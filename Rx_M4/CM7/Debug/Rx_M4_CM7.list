
Rx_M4_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001478c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08014a30  08014a30  00015a30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014e38  08014e38  000162f4  2**0
                  CONTENTS
  4 .ARM          00000008  08014e38  08014e38  00015e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014e40  08014e40  000162f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014e40  08014e40  00015e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014e44  08014e44  00015e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f4  24000000  08014e48  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000249c  240002f4  0801513c  000162f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24002790  0801513c  00016790  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000162f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029732  00000000  00000000  00016322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005613  00000000  00000000  0003fa54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f58  00000000  00000000  00045068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001811  00000000  00000000  00046fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00042939  00000000  00000000  000487d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002da65  00000000  00000000  0008b10a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a2ddd  00000000  00000000  000b8b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0025b94c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000093fc  00000000  00000000  0025b990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00264d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002f4 	.word	0x240002f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014a14 	.word	0x08014a14

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002f8 	.word	0x240002f8
 80002dc:	08014a14 	.word	0x08014a14

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	@ 0x28
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007be:	463b      	mov	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
 80007cc:	615a      	str	r2, [r3, #20]
 80007ce:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007d0:	4b30      	ldr	r3, [pc, #192]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007d2:	4a31      	ldr	r2, [pc, #196]	@ (8000898 <MX_ADC1_Init+0xec>)
 80007d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80007d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007d8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007de:	4b2d      	ldr	r3, [pc, #180]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e4:	4b2b      	ldr	r3, [pc, #172]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007ec:	2204      	movs	r2, #4
 80007ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007f0:	4b28      	ldr	r3, [pc, #160]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f6:	4b27      	ldr	r3, [pc, #156]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80007fc:	4b25      	ldr	r3, [pc, #148]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007fe:	2201      	movs	r2, #1
 8000800:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000802:	4b24      	ldr	r3, [pc, #144]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000804:	2200      	movs	r2, #0
 8000806:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000808:	4b22      	ldr	r3, [pc, #136]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800080a:	2200      	movs	r2, #0
 800080c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080e:	4b21      	ldr	r3, [pc, #132]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000810:	2200      	movs	r2, #0
 8000812:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000814:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000816:	2200      	movs	r2, #0
 8000818:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800081a:	4b1e      	ldr	r3, [pc, #120]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800081c:	2200      	movs	r2, #0
 800081e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000820:	4b1c      	ldr	r3, [pc, #112]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000822:	2200      	movs	r2, #0
 8000824:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000826:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000828:	2200      	movs	r2, #0
 800082a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800082e:	4819      	ldr	r0, [pc, #100]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000830:	f002 faa6 	bl	8002d80 <HAL_ADC_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800083a:	f000 fd86 	bl	800134a <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	4812      	ldr	r0, [pc, #72]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800084a:	f003 f8c9 	bl	80039e0 <HAL_ADCEx_MultiModeConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000854:	f000 fd79 	bl	800134a <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000858:	4b10      	ldr	r3, [pc, #64]	@ (800089c <MX_ADC1_Init+0xf0>)
 800085a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085c:	2306      	movs	r3, #6
 800085e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000864:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000868:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800086a:	2304      	movs	r3, #4
 800086c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000876:	463b      	mov	r3, r7
 8000878:	4619      	mov	r1, r3
 800087a:	4806      	ldr	r0, [pc, #24]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800087c:	f002 fc22 	bl	80030c4 <HAL_ADC_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000886:	f000 fd60 	bl	800134a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	3728      	adds	r7, #40	@ 0x28
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	24000310 	.word	0x24000310
 8000898:	40022000 	.word	0x40022000
 800089c:	2a000400 	.word	0x2a000400

080008a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	@ 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a18      	ldr	r2, [pc, #96]	@ (8000920 <HAL_ADC_MspInit+0x80>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d129      	bne.n	8000916 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008c2:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008c8:	4a16      	ldr	r2, [pc, #88]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008ca:	f043 0320 	orr.w	r3, r3, #32
 80008ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80008d2:	4b14      	ldr	r3, [pc, #80]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008d8:	f003 0320 	and.w	r3, r3, #32
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e0:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008fe:	2301      	movs	r3, #1
 8000900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000902:	2303      	movs	r3, #3
 8000904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4805      	ldr	r0, [pc, #20]	@ (8000928 <HAL_ADC_MspInit+0x88>)
 8000912:	f005 fbaf 	bl	8006074 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	@ 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40022000 	.word	0x40022000
 8000924:	58024400 	.word	0x58024400
 8000928:	58020800 	.word	0x58020800

0800092c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000932:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <MX_DMA_Init+0x6c>)
 8000934:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000938:	4a17      	ldr	r2, [pc, #92]	@ (8000998 <MX_DMA_Init+0x6c>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000942:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <MX_DMA_Init+0x6c>)
 8000944:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	200c      	movs	r0, #12
 8000956:	f003 f9fc 	bl	8003d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800095a:	200c      	movs	r0, #12
 800095c:	f003 fa13 	bl	8003d86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2100      	movs	r1, #0
 8000964:	200e      	movs	r0, #14
 8000966:	f003 f9f4 	bl	8003d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800096a:	200e      	movs	r0, #14
 800096c:	f003 fa0b 	bl	8003d86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	2100      	movs	r1, #0
 8000974:	200f      	movs	r0, #15
 8000976:	f003 f9ec 	bl	8003d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800097a:	200f      	movs	r0, #15
 800097c:	f003 fa03 	bl	8003d86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2010      	movs	r0, #16
 8000986:	f003 f9e4 	bl	8003d52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800098a:	2010      	movs	r0, #16
 800098c:	f003 f9fb 	bl	8003d86 <HAL_NVIC_EnableIRQ>

}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	58024400 	.word	0x58024400

0800099c <dshot_init>:
static void dshot_enable_dma_request();


/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 f833 	bl	8000a14 <dshot_set_timer>
	dshot_put_tc_callback_function();
 80009ae:	f000 f8d3 	bl	8000b58 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 80009b2:	f000 f8ef 	bl	8000b94 <dshot_start_pwm>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <dshot_write>:

void dshot_write(uint16_t* motor_value)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer_all(motor_value);
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f000 f962 	bl	8000c90 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 80009cc:	f000 f98c 	bl	8000ce8 <dshot_dma_start>
	dshot_enable_dma_request();
 80009d0:	f000 f9c2 	bl	8000d58 <dshot_enable_dma_request>
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <dshot_choose_type>:


/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d003      	beq.n	80009f4 <dshot_choose_type+0x18>
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d103      	bne.n	80009f8 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return DSHOT600_HZ;
 80009f0:	4b05      	ldr	r3, [pc, #20]	@ (8000a08 <dshot_choose_type+0x2c>)
 80009f2:	e002      	b.n	80009fa <dshot_choose_type+0x1e>

		case(DSHOT300):
				return DSHOT300_HZ;
 80009f4:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <dshot_choose_type+0x30>)
 80009f6:	e000      	b.n	80009fa <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return DSHOT150_HZ;
 80009f8:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <dshot_choose_type+0x34>)
	}
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	00b71b00 	.word	0x00b71b00
 8000a0c:	005b8d80 	.word	0x005b8d80
 8000a10:	002dc6c0 	.word	0x002dc6c0

08000a14 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	ed2d 8b02 	vpush	{d8}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 8000a22:	4b27      	ldr	r3, [pc, #156]	@ (8000ac0 <dshot_set_timer+0xac>)
 8000a24:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	ee07 3a90 	vmov	s15, r3
 8000a2c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ffd2 	bl	80009dc <dshot_choose_type>
 8000a38:	ee07 0a90 	vmov	s15, r0
 8000a3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a40:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000a44:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000ac4 <dshot_set_timer+0xb0>
 8000a48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a50:	f013 ffa0 	bl	8014994 <lrintf>
 8000a54:	4603      	mov	r3, r0
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	897a      	ldrh	r2, [r7, #10]
 8000a62:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 8000a64:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2214      	movs	r2, #20
 8000a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000a6e:	2214      	movs	r2, #20
 8000a70:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 8000a72:	4b16      	ldr	r3, [pc, #88]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	897a      	ldrh	r2, [r7, #10]
 8000a78:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 8000a7a:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2214      	movs	r2, #20
 8000a80:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a82:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a84:	2214      	movs	r2, #20
 8000a86:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8000a88:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	897a      	ldrh	r2, [r7, #10]
 8000a8e:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 8000a90:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2214      	movs	r2, #20
 8000a96:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a9a:	2214      	movs	r2, #20
 8000a9c:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	897a      	ldrh	r2, [r7, #10]
 8000aa4:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 8000aa6:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2214      	movs	r2, #20
 8000aac:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000aae:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000ab0:	2214      	movs	r2, #20
 8000ab2:	60da      	str	r2, [r3, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	ecbd 8b02 	vpop	{d8}
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	0bebc200 	.word	0x0bebc200
 8000ac4:	3c23d70a 	.word	0x3c23d70a
 8000ac8:	240006f8 	.word	0x240006f8
 8000acc:	24000614 	.word	0x24000614

08000ad0 <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000adc:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d108      	bne.n	8000afa <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	68da      	ldr	r2, [r3, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000af6:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 8000af8:	e028      	b.n	8000b4c <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d108      	bne.n	8000b16 <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	68da      	ldr	r2, [r3, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000b12:	60da      	str	r2, [r3, #12]
}
 8000b14:	e01a      	b.n	8000b4c <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d108      	bne.n	8000b32 <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	68da      	ldr	r2, [r3, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000b2e:	60da      	str	r2, [r3, #12]
}
 8000b30:	e00c      	b.n	8000b4c <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d107      	bne.n	8000b4c <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000b4a:	60da      	str	r2, [r3, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <dshot_put_tc_callback_function+0x30>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b60:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <dshot_put_tc_callback_function+0x34>)
 8000b62:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <dshot_put_tc_callback_function+0x38>)
 8000b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b68:	4a08      	ldr	r2, [pc, #32]	@ (8000b8c <dshot_put_tc_callback_function+0x34>)
 8000b6a:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <dshot_put_tc_callback_function+0x38>)
 8000b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b70:	4a06      	ldr	r2, [pc, #24]	@ (8000b8c <dshot_put_tc_callback_function+0x34>)
 8000b72:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 8000b74:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <dshot_put_tc_callback_function+0x30>)
 8000b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b78:	4a04      	ldr	r2, [pc, #16]	@ (8000b8c <dshot_put_tc_callback_function+0x34>)
 8000b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	240006f8 	.word	0x240006f8
 8000b8c:	08000ad1 	.word	0x08000ad1
 8000b90:	24000614 	.word	0x24000614

08000b94 <dshot_start_pwm>:

static void dshot_start_pwm()
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 8000b98:	210c      	movs	r1, #12
 8000b9a:	4808      	ldr	r0, [pc, #32]	@ (8000bbc <dshot_start_pwm+0x28>)
 8000b9c:	f00a fda8 	bl	800b6f0 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 8000ba0:	2108      	movs	r1, #8
 8000ba2:	4807      	ldr	r0, [pc, #28]	@ (8000bc0 <dshot_start_pwm+0x2c>)
 8000ba4:	f00a fda4 	bl	800b6f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <dshot_start_pwm+0x2c>)
 8000bac:	f00a fda0 	bl	800b6f0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 8000bb0:	2104      	movs	r1, #4
 8000bb2:	4802      	ldr	r0, [pc, #8]	@ (8000bbc <dshot_start_pwm+0x28>)
 8000bb4:	f00a fd9c 	bl	800b6f0 <HAL_TIM_PWM_Start>
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	240006f8 	.word	0x240006f8
 8000bc0:	24000614 	.word	0x24000614

08000bc4 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b087      	sub	sp, #28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 8000bd2:	88fb      	ldrh	r3, [r7, #6]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	b21a      	sxth	r2, r3
 8000bd8:	7afb      	ldrb	r3, [r7, #11]
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 8000be6:	893b      	ldrh	r3, [r7, #8]
 8000be8:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	e009      	b.n	8000c04 <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	4053      	eors	r3, r2
 8000bf6:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	091b      	lsrs	r3, r3, #4
 8000bfc:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	3301      	adds	r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	ddf2      	ble.n	8000bf0 <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	f003 030f 	and.w	r3, r3, #15
 8000c10:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 8000c12:	893b      	ldrh	r3, [r7, #8]
 8000c14:	011b      	lsls	r3, r3, #4
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	813b      	strh	r3, [r7, #8]

	return packet;
 8000c20:	893b      	ldrh	r3, [r7, #8]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	371c      	adds	r7, #28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b084      	sub	sp, #16
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
 8000c36:	460b      	mov	r3, r1
 8000c38:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ffc1 	bl	8000bc4 <dshot_prepare_packet>
 8000c42:	4603      	mov	r3, r0
 8000c44:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	e011      	b.n	8000c70 <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 8000c4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	da01      	bge.n	8000c58 <dshot_prepare_dmabuffer+0x2a>
 8000c54:	220e      	movs	r2, #14
 8000c56:	e000      	b.n	8000c5a <dshot_prepare_dmabuffer+0x2c>
 8000c58:	2207      	movs	r2, #7
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	440b      	add	r3, r1
 8000c62:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8000c64:	89fb      	ldrh	r3, [r7, #14]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b0f      	cmp	r3, #15
 8000c74:	ddea      	ble.n	8000c4c <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3340      	adds	r3, #64	@ 0x40
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	3344      	adds	r3, #68	@ 0x44
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
}
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480e      	ldr	r0, [pc, #56]	@ (8000cd8 <dshot_prepare_dmabuffer_all+0x48>)
 8000ca0:	f7ff ffc5 	bl	8000c2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3302      	adds	r3, #2
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	4619      	mov	r1, r3
 8000cac:	480b      	ldr	r0, [pc, #44]	@ (8000cdc <dshot_prepare_dmabuffer_all+0x4c>)
 8000cae:	f7ff ffbe 	bl	8000c2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4809      	ldr	r0, [pc, #36]	@ (8000ce0 <dshot_prepare_dmabuffer_all+0x50>)
 8000cbc:	f7ff ffb7 	bl	8000c2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3306      	adds	r3, #6
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4806      	ldr	r0, [pc, #24]	@ (8000ce4 <dshot_prepare_dmabuffer_all+0x54>)
 8000cca:	f7ff ffb0 	bl	8000c2e <dshot_prepare_dmabuffer>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	24000374 	.word	0x24000374
 8000cdc:	240003bc 	.word	0x240003bc
 8000ce0:	24000404 	.word	0x24000404
 8000ce4:	2400044c 	.word	0x2400044c

08000ce8 <dshot_dma_start>:

static void dshot_dma_start()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 8000cec:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <dshot_dma_start+0x58>)
 8000cee:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000cf0:	4914      	ldr	r1, [pc, #80]	@ (8000d44 <dshot_dma_start+0x5c>)
 8000cf2:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <dshot_dma_start+0x58>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	3340      	adds	r3, #64	@ 0x40
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	2312      	movs	r3, #18
 8000cfc:	f003 fbce 	bl	800449c <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
 8000d00:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <dshot_dma_start+0x60>)
 8000d02:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8000d04:	4911      	ldr	r1, [pc, #68]	@ (8000d4c <dshot_dma_start+0x64>)
 8000d06:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <dshot_dma_start+0x60>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	333c      	adds	r3, #60	@ 0x3c
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	2312      	movs	r3, #18
 8000d10:	f003 fbc4 	bl	800449c <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR1, DSHOT_DMA_BUFFER_SIZE);
 8000d14:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <dshot_dma_start+0x60>)
 8000d16:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000d18:	490d      	ldr	r1, [pc, #52]	@ (8000d50 <dshot_dma_start+0x68>)
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <dshot_dma_start+0x60>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3334      	adds	r3, #52	@ 0x34
 8000d20:	461a      	mov	r2, r3
 8000d22:	2312      	movs	r3, #18
 8000d24:	f003 fbba 	bl	800449c <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
 8000d28:	4b05      	ldr	r3, [pc, #20]	@ (8000d40 <dshot_dma_start+0x58>)
 8000d2a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000d2c:	4909      	ldr	r1, [pc, #36]	@ (8000d54 <dshot_dma_start+0x6c>)
 8000d2e:	4b04      	ldr	r3, [pc, #16]	@ (8000d40 <dshot_dma_start+0x58>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	3338      	adds	r3, #56	@ 0x38
 8000d34:	461a      	mov	r2, r3
 8000d36:	2312      	movs	r3, #18
 8000d38:	f003 fbb0 	bl	800449c <HAL_DMA_Start_IT>
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	240006f8 	.word	0x240006f8
 8000d44:	24000374 	.word	0x24000374
 8000d48:	24000614 	.word	0x24000614
 8000d4c:	240003bc 	.word	0x240003bc
 8000d50:	24000404 	.word	0x24000404
 8000d54:	2400044c 	.word	0x2400044c

08000d58 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC4);
 8000d5c:	4b12      	ldr	r3, [pc, #72]	@ (8000da8 <dshot_enable_dma_request+0x50>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	68da      	ldr	r2, [r3, #12]
 8000d62:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <dshot_enable_dma_request+0x50>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000d6a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <dshot_enable_dma_request+0x54>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <dshot_enable_dma_request+0x54>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000d7a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC1);
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <dshot_enable_dma_request+0x54>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	68da      	ldr	r2, [r3, #12]
 8000d82:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <dshot_enable_dma_request+0x54>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000d8a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC2);
 8000d8c:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <dshot_enable_dma_request+0x50>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	68da      	ldr	r2, [r3, #12]
 8000d92:	4b05      	ldr	r3, [pc, #20]	@ (8000da8 <dshot_enable_dma_request+0x50>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000d9a:	60da      	str	r2, [r3, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	240006f8 	.word	0x240006f8
 8000dac:	24000614 	.word	0x24000614

08000db0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b087      	sub	sp, #28
 8000db4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db6:	4b28      	ldr	r3, [pc, #160]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dbc:	4a26      	ldr	r2, [pc, #152]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000dbe:	f043 0304 	orr.w	r3, r3, #4
 8000dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc6:	4b24      	ldr	r3, [pc, #144]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd4:	4b20      	ldr	r3, [pc, #128]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dda:	4a1f      	ldr	r2, [pc, #124]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000df2:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df8:	4a17      	ldr	r2, [pc, #92]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000dfa:	f043 0310 	orr.w	r3, r3, #16
 8000dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e02:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e08:	f003 0310 	and.w	r3, r3, #16
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e10:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e16:	4a10      	ldr	r2, [pc, #64]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e18:	f043 0308 	orr.w	r3, r3, #8
 8000e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e20:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e26:	f003 0308 	and.w	r3, r3, #8
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e34:	4a08      	ldr	r2, [pc, #32]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]

}
 8000e4c:	bf00      	nop
 8000e4e:	371c      	adds	r7, #28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	58024400 	.word	0x58024400

08000e5c <get_M4>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t * get_M4() // get data from M4 to M7 buffer
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
	static uint8_t buffer[32]; // buffer to receive data
	if (xfr_ptr->sts_4to7 == 1) // if M4 to M7 buffer has data
 8000e62:	4b16      	ldr	r3, [pc, #88]	@ (8000ebc <get_M4+0x60>)
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d11f      	bne.n	8000eac <get_M4+0x50>
	{
		xfr_ptr->sts_4to7 = 2; // lock the M4 to M7 buffer
 8000e6c:	4b13      	ldr	r3, [pc, #76]	@ (8000ebc <get_M4+0x60>)
 8000e6e:	2202      	movs	r2, #2
 8000e70:	701a      	strb	r2, [r3, #0]
		for(int n = 0; n < 32; n++)
 8000e72:	2300      	movs	r3, #0
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	e013      	b.n	8000ea0 <get_M4+0x44>
		{
			buffer[n] = xfr_ptr->M4toM7[n]; // transfer data
 8000e78:	4a10      	ldr	r2, [pc, #64]	@ (8000ebc <get_M4+0x60>)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	3302      	adds	r3, #2
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	b2d9      	uxtb	r1, r3
 8000e84:	4a0e      	ldr	r2, [pc, #56]	@ (8000ec0 <get_M4+0x64>)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	4413      	add	r3, r2
 8000e8a:	460a      	mov	r2, r1
 8000e8c:	701a      	strb	r2, [r3, #0]
			xfr_ptr->M4toM7[n] = 0; // clear M4 to M7 buffer
 8000e8e:	4a0b      	ldr	r2, [pc, #44]	@ (8000ebc <get_M4+0x60>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	4413      	add	r3, r2
 8000e94:	3302      	adds	r3, #2
 8000e96:	2200      	movs	r2, #0
 8000e98:	701a      	strb	r2, [r3, #0]
		for(int n = 0; n < 32; n++)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2b1f      	cmp	r3, #31
 8000ea4:	dde8      	ble.n	8000e78 <get_M4+0x1c>
		}
		xfr_ptr->sts_4to7 = 0; // M4 to M7 buffer is empty
 8000ea6:	4b05      	ldr	r3, [pc, #20]	@ (8000ebc <get_M4+0x60>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
	}
	return buffer; // return the buffer (pointer)
 8000eac:	4b04      	ldr	r3, [pc, #16]	@ (8000ec0 <get_M4+0x64>)
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	38001000 	.word	0x38001000
 8000ec0:	24000508 	.word	0x24000508

08000ec4 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
	contador = __HAL_TIM_GET_COUNTER(&htim4);
 8000ecc:	4b05      	ldr	r3, [pc, #20]	@ (8000ee4 <HAL_TIM_IC_CaptureCallback+0x20>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ed2:	4a05      	ldr	r2, [pc, #20]	@ (8000ee8 <HAL_TIM_IC_CaptureCallback+0x24>)
 8000ed4:	6013      	str	r3, [r2, #0]
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	240006ac 	.word	0x240006ac
 8000ee8:	240004e4 	.word	0x240004e4

08000eec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b0a0      	sub	sp, #128	@ 0x80
 8000ef0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000ef2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ef6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000ef8:	bf00      	nop
 8000efa:	4bac      	ldr	r3, [pc, #688]	@ (80011ac <main+0x2c0>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d004      	beq.n	8000f10 <main+0x24>
 8000f06:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000f08:	1e5a      	subs	r2, r3, #1
 8000f0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	dcf4      	bgt.n	8000efa <main+0xe>
  if ( timeout < 0 )
 8000f10:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	da01      	bge.n	8000f1a <main+0x2e>
  {
  Error_Handler();
 8000f16:	f000 fa18 	bl	800134a <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1a:	f001 fce3 	bl	80028e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f1e:	f000 f961 	bl	80011e4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f22:	f000 f9df 	bl	80012e4 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000f26:	4ba1      	ldr	r3, [pc, #644]	@ (80011ac <main+0x2c0>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2c:	4a9f      	ldr	r2, [pc, #636]	@ (80011ac <main+0x2c0>)
 8000f2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f36:	4b9d      	ldr	r3, [pc, #628]	@ (80011ac <main+0x2c0>)
 8000f38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000f44:	2000      	movs	r0, #0
 8000f46:	f005 fa91 	bl	800646c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	2000      	movs	r0, #0
 8000f4e:	f005 faa7 	bl	80064a0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000f52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f56:	67fb      	str	r3, [r7, #124]	@ 0x7c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f58:	bf00      	nop
 8000f5a:	4b94      	ldr	r3, [pc, #592]	@ (80011ac <main+0x2c0>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d104      	bne.n	8000f70 <main+0x84>
 8000f66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000f68:	1e5a      	subs	r2, r3, #1
 8000f6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	dcf4      	bgt.n	8000f5a <main+0x6e>
if ( timeout < 0 )
 8000f70:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	da01      	bge.n	8000f7a <main+0x8e>
{
Error_Handler();
 8000f76:	f000 f9e8 	bl	800134a <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7a:	f7ff ff19 	bl	8000db0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f7e:	f7ff fcd5 	bl	800092c <MX_DMA_Init>
  MX_TIM2_Init();
 8000f82:	f000 fdd1 	bl	8001b28 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000f86:	f000 fedf 	bl	8001d48 <MX_TIM5_Init>
  MX_TIM3_Init();
 8000f8a:	f000 fe31 	bl	8001bf0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f8e:	f000 fe85 	bl	8001c9c <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000f92:	f010 f9f7 	bl	8011384 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000f96:	f000 fd6d 	bl	8001a74 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000f9a:	f000 ff39 	bl	8001e10 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000f9e:	f000 ff91 	bl	8001ec4 <MX_TIM15_Init>
  MX_ADC1_Init();
 8000fa2:	f7ff fc03 	bl	80007ac <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  int count = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	67bb      	str	r3, [r7, #120]	@ 0x78
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000faa:	213c      	movs	r1, #60	@ 0x3c
 8000fac:	4880      	ldr	r0, [pc, #512]	@ (80011b0 <main+0x2c4>)
 8000fae:	f00a fd53 	bl	800ba58 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8000fb2:	213c      	movs	r1, #60	@ 0x3c
 8000fb4:	487f      	ldr	r0, [pc, #508]	@ (80011b4 <main+0x2c8>)
 8000fb6:	f00a fd4f 	bl	800ba58 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 8000fba:	213c      	movs	r1, #60	@ 0x3c
 8000fbc:	487e      	ldr	r0, [pc, #504]	@ (80011b8 <main+0x2cc>)
 8000fbe:	f00a fd4b 	bl	800ba58 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000fc2:	213c      	movs	r1, #60	@ 0x3c
 8000fc4:	487d      	ldr	r0, [pc, #500]	@ (80011bc <main+0x2d0>)
 8000fc6:	f00a fd47 	bl	800ba58 <HAL_TIM_Encoder_Start_IT>
	uint8_t * xfr_data; // pointer to transfer data


	//initialize inter-core status pointers
	xfr_ptr->sts_4to7 = 0;
 8000fca:	4b7d      	ldr	r3, [pc, #500]	@ (80011c0 <main+0x2d4>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]
	xfr_ptr->sts_7to4 = 0;
 8000fd0:	4b7b      	ldr	r3, [pc, #492]	@ (80011c0 <main+0x2d4>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	705a      	strb	r2, [r3, #1]
	extern uint16_t D[4];


	  if (HAL_TIM_Base_Start_IT(&htim15) != HAL_OK)
 8000fd6:	487b      	ldr	r0, [pc, #492]	@ (80011c4 <main+0x2d8>)
 8000fd8:	f00a faba 	bl	800b550 <HAL_TIM_Base_Start_IT>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <main+0xfa>
	    {
	      /* Starting Error */
	      Error_Handler();
 8000fe2:	f000 f9b2 	bl	800134a <Error_Handler>
	    }
	  dshot_init(DSHOT300);
 8000fe6:	2001      	movs	r0, #1
 8000fe8:	f7ff fcd8 	bl	800099c <dshot_init>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000fec:	2000      	movs	r0, #0
 8000fee:	f001 fa95 	bl	800251c <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f001 fa92 	bl	800251c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000ff8:	2002      	movs	r0, #2
 8000ffa:	f001 fa8f 	bl	800251c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000ffe:	2101      	movs	r1, #1
 8001000:	2000      	movs	r0, #0
 8001002:	f001 fb01 	bl	8002608 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8001006:	4b70      	ldr	r3, [pc, #448]	@ (80011c8 <main+0x2dc>)
 8001008:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800100c:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 800100e:	4b6e      	ldr	r3, [pc, #440]	@ (80011c8 <main+0x2dc>)
 8001010:	2200      	movs	r2, #0
 8001012:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001014:	4b6c      	ldr	r3, [pc, #432]	@ (80011c8 <main+0x2dc>)
 8001016:	2200      	movs	r2, #0
 8001018:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 800101a:	4b6b      	ldr	r3, [pc, #428]	@ (80011c8 <main+0x2dc>)
 800101c:	2200      	movs	r2, #0
 800101e:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8001020:	4b69      	ldr	r3, [pc, #420]	@ (80011c8 <main+0x2dc>)
 8001022:	2200      	movs	r2, #0
 8001024:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001026:	4968      	ldr	r1, [pc, #416]	@ (80011c8 <main+0x2dc>)
 8001028:	2000      	movs	r0, #0
 800102a:	f001 fb7d 	bl	8002728 <BSP_COM_Init>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <main+0x14c>
  {
    Error_Handler();
 8001034:	f000 f989 	bl	800134a <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char message[100]={'\0'};
 8001038:	2300      	movs	r3, #0
 800103a:	60bb      	str	r3, [r7, #8]
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	2260      	movs	r2, #96	@ 0x60
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f011 fc48 	bl	80128da <memset>
  uint8_t robonum;
  GPIO_PinState PinState[2];
  //definicao do robo por meio da entrada de tensao no pinc10 e Pinc11//
  PinState[0]= HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_10);
 800104a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800104e:	485f      	ldr	r0, [pc, #380]	@ (80011cc <main+0x2e0>)
 8001050:	f005 f9c0 	bl	80063d4 <HAL_GPIO_ReadPin>
 8001054:	4603      	mov	r3, r0
 8001056:	713b      	strb	r3, [r7, #4]
  PinState[1]= HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_11);
 8001058:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800105c:	485b      	ldr	r0, [pc, #364]	@ (80011cc <main+0x2e0>)
 800105e:	f005 f9b9 	bl	80063d4 <HAL_GPIO_ReadPin>
 8001062:	4603      	mov	r3, r0
 8001064:	717b      	strb	r3, [r7, #5]
  if((PinState[0]==0)&&(PinState[1]==0))
 8001066:	793b      	ldrb	r3, [r7, #4]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d105      	bne.n	8001078 <main+0x18c>
 800106c:	797b      	ldrb	r3, [r7, #5]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d102      	bne.n	8001078 <main+0x18c>
	  robonum=0;
 8001072:	2300      	movs	r3, #0
 8001074:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
  if(PinState[0]==1)
 8001078:	793b      	ldrb	r3, [r7, #4]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d102      	bne.n	8001084 <main+0x198>
	  robonum=1;
 800107e:	2301      	movs	r3, #1
 8001080:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
  if(PinState[1]==1)
 8001084:	797b      	ldrb	r3, [r7, #5]
 8001086:	2b01      	cmp	r3, #1
 8001088:	d102      	bne.n	8001090 <main+0x1a4>
	  robonum=2;
 800108a:	2302      	movs	r3, #2
 800108c:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73

  for(uint8_t i =0;i<4;i++){
 8001090:	2300      	movs	r3, #0
 8001092:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 8001096:	e00c      	b.n	80010b2 <main+0x1c6>
	  ref[i] =0;
 8001098:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800109c:	4a4c      	ldr	r2, [pc, #304]	@ (80011d0 <main+0x2e4>)
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	4413      	add	r3, r2
 80010a2:	f04f 0200 	mov.w	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
  for(uint8_t i =0;i<4;i++){
 80010a8:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80010ac:	3301      	adds	r3, #1
 80010ae:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 80010b2:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 80010b6:	2b03      	cmp	r3, #3
 80010b8:	d9ee      	bls.n	8001098 <main+0x1ac>
  }
  HAL_Delay(7000);
 80010ba:	f641 3058 	movw	r0, #7000	@ 0x1b58
 80010be:	f001 fca3 	bl	8002a08 <HAL_Delay>
  while (1)
  {
	  // if  M4 to M7 buffer has data
	  	  if (xfr_ptr->sts_4to7 == 1)
 80010c2:	4b3f      	ldr	r3, [pc, #252]	@ (80011c0 <main+0x2d4>)
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d102      	bne.n	80010d2 <main+0x1e6>
	  	  {
	  		  xfr_data = get_M4(); // get data sent from M4 to M7
 80010cc:	f7ff fec6 	bl	8000e5c <get_M4>
 80010d0:	6778      	str	r0, [r7, #116]	@ 0x74
	  	  }

	  	  for(uint8_t n = 0; n<32;n++){
 80010d2:	2300      	movs	r3, #0
 80010d4:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
 80010d8:	e00d      	b.n	80010f6 <main+0x20a>
	  		  new_mensagem[n] = xfr_data[n];
 80010da:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80010de:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80010e0:	441a      	add	r2, r3
 80010e2:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80010e6:	7811      	ldrb	r1, [r2, #0]
 80010e8:	4a3a      	ldr	r2, [pc, #232]	@ (80011d4 <main+0x2e8>)
 80010ea:	54d1      	strb	r1, [r2, r3]
	  	  for(uint8_t n = 0; n<32;n++){
 80010ec:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80010f0:	3301      	adds	r3, #1
 80010f2:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
 80010f6:	f897 3071 	ldrb.w	r3, [r7, #113]	@ 0x71
 80010fa:	2b1f      	cmp	r3, #31
 80010fc:	d9ed      	bls.n	80010da <main+0x1ee>
	  	  }

	  	  if((new_mensagem[0]==111)&&(new_mensagem[31]==112)){
 80010fe:	4b35      	ldr	r3, [pc, #212]	@ (80011d4 <main+0x2e8>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b6f      	cmp	r3, #111	@ 0x6f
 8001104:	d118      	bne.n	8001138 <main+0x24c>
 8001106:	4b33      	ldr	r3, [pc, #204]	@ (80011d4 <main+0x2e8>)
 8001108:	7fdb      	ldrb	r3, [r3, #31]
 800110a:	2b70      	cmp	r3, #112	@ 0x70
 800110c:	d114      	bne.n	8001138 <main+0x24c>
	  		for(uint8_t n=0;n<32;n++)
 800110e:	2300      	movs	r3, #0
 8001110:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 8001114:	e00c      	b.n	8001130 <main+0x244>
	  		  old_mensagem[n] = new_mensagem[n];
 8001116:	f897 2070 	ldrb.w	r2, [r7, #112]	@ 0x70
 800111a:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800111e:	492d      	ldr	r1, [pc, #180]	@ (80011d4 <main+0x2e8>)
 8001120:	5c89      	ldrb	r1, [r1, r2]
 8001122:	4a2d      	ldr	r2, [pc, #180]	@ (80011d8 <main+0x2ec>)
 8001124:	54d1      	strb	r1, [r2, r3]
	  		for(uint8_t n=0;n<32;n++)
 8001126:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 800112a:	3301      	adds	r3, #1
 800112c:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
 8001130:	f897 3070 	ldrb.w	r3, [r7, #112]	@ 0x70
 8001134:	2b1f      	cmp	r3, #31
 8001136:	d9ee      	bls.n	8001116 <main+0x22a>
	  	  }

	  	  for(uint8_t n=0; n<4;n++)
 8001138:	2300      	movs	r3, #0
 800113a:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 800113e:	e018      	b.n	8001172 <main+0x286>
	  		 ref[n] = old_mensagem[robonum*4+n+1];
 8001140:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001144:	009a      	lsls	r2, r3, #2
 8001146:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800114a:	4413      	add	r3, r2
 800114c:	3301      	adds	r3, #1
 800114e:	4a22      	ldr	r2, [pc, #136]	@ (80011d8 <main+0x2ec>)
 8001150:	5cd2      	ldrb	r2, [r2, r3]
 8001152:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001156:	ee07 2a90 	vmov	s15, r2
 800115a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800115e:	4a1c      	ldr	r2, [pc, #112]	@ (80011d0 <main+0x2e4>)
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	4413      	add	r3, r2
 8001164:	edc3 7a00 	vstr	s15, [r3]
	  	  for(uint8_t n=0; n<4;n++)
 8001168:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800116c:	3301      	adds	r3, #1
 800116e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8001172:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8001176:	2b03      	cmp	r3, #3
 8001178:	d9e2      	bls.n	8001140 <main+0x254>


	  	  count++;
 800117a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800117c:	3301      	adds	r3, #1
 800117e:	67bb      	str	r3, [r7, #120]	@ 0x78
	  	  sprintf(message, "%f\n \r",velocidade[3]);
 8001180:	4b16      	ldr	r3, [pc, #88]	@ (80011dc <main+0x2f0>)
 8001182:	edd3 7a03 	vldr	s15, [r3, #12]
 8001186:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800118a:	f107 0008 	add.w	r0, r7, #8
 800118e:	ec53 2b17 	vmov	r2, r3, d7
 8001192:	4913      	ldr	r1, [pc, #76]	@ (80011e0 <main+0x2f4>)
 8001194:	f011 fb3e 	bl	8012814 <siprintf>


	  	  CDC_Transmit_FS(message,sizeof(message));
 8001198:	f107 0308 	add.w	r3, r7, #8
 800119c:	2164      	movs	r1, #100	@ 0x64
 800119e:	4618      	mov	r0, r3
 80011a0:	f010 f9b0 	bl	8011504 <CDC_Transmit_FS>
	  	  HAL_Delay(10);
 80011a4:	200a      	movs	r0, #10
 80011a6:	f001 fc2f 	bl	8002a08 <HAL_Delay>
  {
 80011aa:	e78a      	b.n	80010c2 <main+0x1d6>
 80011ac:	58024400 	.word	0x58024400
 80011b0:	240006ac 	.word	0x240006ac
 80011b4:	240005c8 	.word	0x240005c8
 80011b8:	24000744 	.word	0x24000744
 80011bc:	24000660 	.word	0x24000660
 80011c0:	38001000 	.word	0x38001000
 80011c4:	24000790 	.word	0x24000790
 80011c8:	24000494 	.word	0x24000494
 80011cc:	58020800 	.word	0x58020800
 80011d0:	240004f8 	.word	0x240004f8
 80011d4:	240004a4 	.word	0x240004a4
 80011d8:	240004c4 	.word	0x240004c4
 80011dc:	240004e8 	.word	0x240004e8
 80011e0:	08014a30 	.word	0x08014a30

080011e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b09c      	sub	sp, #112	@ 0x70
 80011e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ee:	224c      	movs	r2, #76	@ 0x4c
 80011f0:	2100      	movs	r1, #0
 80011f2:	4618      	mov	r0, r3
 80011f4:	f011 fb71 	bl	80128da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011f8:	1d3b      	adds	r3, r7, #4
 80011fa:	2220      	movs	r2, #32
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f011 fb6b 	bl	80128da <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001204:	2004      	movs	r0, #4
 8001206:	f006 fbfd 	bl	8007a04 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800120a:	2300      	movs	r3, #0
 800120c:	603b      	str	r3, [r7, #0]
 800120e:	4b33      	ldr	r3, [pc, #204]	@ (80012dc <SystemClock_Config+0xf8>)
 8001210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001212:	4a32      	ldr	r2, [pc, #200]	@ (80012dc <SystemClock_Config+0xf8>)
 8001214:	f023 0301 	bic.w	r3, r3, #1
 8001218:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800121a:	4b30      	ldr	r3, [pc, #192]	@ (80012dc <SystemClock_Config+0xf8>)
 800121c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	4b2e      	ldr	r3, [pc, #184]	@ (80012e0 <SystemClock_Config+0xfc>)
 8001226:	699b      	ldr	r3, [r3, #24]
 8001228:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800122c:	4a2c      	ldr	r2, [pc, #176]	@ (80012e0 <SystemClock_Config+0xfc>)
 800122e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001232:	6193      	str	r3, [r2, #24]
 8001234:	4b2a      	ldr	r3, [pc, #168]	@ (80012e0 <SystemClock_Config+0xfc>)
 8001236:	699b      	ldr	r3, [r3, #24]
 8001238:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800123c:	603b      	str	r3, [r7, #0]
 800123e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001240:	bf00      	nop
 8001242:	4b27      	ldr	r3, [pc, #156]	@ (80012e0 <SystemClock_Config+0xfc>)
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800124a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800124e:	d1f8      	bne.n	8001242 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001250:	2322      	movs	r3, #34	@ 0x22
 8001252:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001254:	2301      	movs	r3, #1
 8001256:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001258:	2340      	movs	r3, #64	@ 0x40
 800125a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800125c:	2301      	movs	r3, #1
 800125e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001260:	2302      	movs	r3, #2
 8001262:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001264:	2300      	movs	r3, #0
 8001266:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001268:	2304      	movs	r3, #4
 800126a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 800126c:	2319      	movs	r3, #25
 800126e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001270:	2302      	movs	r3, #2
 8001272:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001274:	2305      	movs	r3, #5
 8001276:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001278:	2302      	movs	r3, #2
 800127a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800127c:	230c      	movs	r3, #12
 800127e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001280:	2300      	movs	r3, #0
 8001282:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001288:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800128c:	4618      	mov	r0, r3
 800128e:	f006 fc23 	bl	8007ad8 <HAL_RCC_OscConfig>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001298:	f000 f857 	bl	800134a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800129c:	233f      	movs	r3, #63	@ 0x3f
 800129e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012a0:	2303      	movs	r3, #3
 80012a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80012a8:	2300      	movs	r3, #0
 80012aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80012ac:	2340      	movs	r3, #64	@ 0x40
 80012ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80012b0:	2340      	movs	r3, #64	@ 0x40
 80012b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80012b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80012ba:	2340      	movs	r3, #64	@ 0x40
 80012bc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	2104      	movs	r1, #4
 80012c2:	4618      	mov	r0, r3
 80012c4:	f007 f862 	bl	800838c <HAL_RCC_ClockConfig>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <SystemClock_Config+0xee>
  {
    Error_Handler();
 80012ce:	f000 f83c 	bl	800134a <Error_Handler>
  }
}
 80012d2:	bf00      	nop
 80012d4:	3770      	adds	r7, #112	@ 0x70
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	58000400 	.word	0x58000400
 80012e0:	58024800 	.word	0x58024800

080012e4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b0b0      	sub	sp, #192	@ 0xc0
 80012e8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012ea:	463b      	mov	r3, r7
 80012ec:	22c0      	movs	r2, #192	@ 0xc0
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f011 faf2 	bl	80128da <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI1;
 80012f6:	f44f 2201 	mov.w	r2, #528384	@ 0x81000
 80012fa:	f04f 0300 	mov.w	r3, #0
 80012fe:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8001302:	2304      	movs	r3, #4
 8001304:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 8001306:	2309      	movs	r3, #9
 8001308:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 800130a:	2302      	movs	r3, #2
 800130c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800130e:	2302      	movs	r3, #2
 8001310:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001312:	2302      	movs	r3, #2
 8001314:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8001316:	23c0      	movs	r3, #192	@ 0xc0
 8001318:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800131a:	2320      	movs	r3, #32
 800131c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 800131e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001322:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8001324:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001328:	663b      	str	r3, [r7, #96]	@ 0x60
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800132a:	2300      	movs	r3, #0
 800132c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001330:	463b      	mov	r3, r7
 8001332:	4618      	mov	r0, r3
 8001334:	f007 fbb6 	bl	8008aa4 <HAL_RCCEx_PeriphCLKConfig>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 800133e:	f000 f804 	bl	800134a <Error_Handler>
  }
}
 8001342:	bf00      	nop
 8001344:	37c0      	adds	r7, #192	@ 0xc0
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800134a:	b480      	push	{r7}
 800134c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800134e:	b672      	cpsid	i
}
 8001350:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001352:	bf00      	nop
 8001354:	e7fd      	b.n	8001352 <Error_Handler+0x8>
	...

08001358 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800135e:	4b0a      	ldr	r3, [pc, #40]	@ (8001388 <HAL_MspInit+0x30>)
 8001360:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001364:	4a08      	ldr	r2, [pc, #32]	@ (8001388 <HAL_MspInit+0x30>)
 8001366:	f043 0302 	orr.w	r3, r3, #2
 800136a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800136e:	4b06      	ldr	r3, [pc, #24]	@ (8001388 <HAL_MspInit+0x30>)
 8001370:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001374:	f003 0302 	and.w	r3, r3, #2
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	58024400 	.word	0x58024400

0800138c <map>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Função de mapeamento
uint16_t map(float x, int in_min, int in_max, int out_min, int out_max) {
 800138c:	b480      	push	{r7}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
 8001392:	ed87 0a05 	vstr	s0, [r7, #20]
 8001396:	6138      	str	r0, [r7, #16]
 8001398:	60f9      	str	r1, [r7, #12]
 800139a:	60ba      	str	r2, [r7, #8]
 800139c:	607b      	str	r3, [r7, #4]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80013ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013b0:	687a      	ldr	r2, [r7, #4]
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	ee07 3a90 	vmov	s15, r3
 80013ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013be:	ee67 6a27 	vmul.f32	s13, s14, s15
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	ee07 3a90 	vmov	s15, r3
 80013cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	ee07 3a90 	vmov	s15, r3
 80013da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80013e6:	ee17 3a90 	vmov	r3, s15
 80013ea:	b29b      	uxth	r3, r3
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	371c      	adds	r7, #28
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr

080013f8 <Controle>:

void Controle(){
 80013f8:	b590      	push	{r4, r7, lr}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
	for(uint8_t n=0;n<4;n++){
 80013fe:	2300      	movs	r3, #0
 8001400:	71fb      	strb	r3, [r7, #7]
 8001402:	e0e9      	b.n	80015d8 <Controle+0x1e0>
		//Calculo de erro
		error[n] =ref[n] -  speed[n];
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	4aa3      	ldr	r2, [pc, #652]	@ (8001694 <Controle+0x29c>)
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	ed93 7a00 	vldr	s14, [r3]
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	4aa1      	ldr	r2, [pc, #644]	@ (8001698 <Controle+0x2a0>)
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	edd3 7a00 	vldr	s15, [r3]
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001422:	4a9e      	ldr	r2, [pc, #632]	@ (800169c <Controle+0x2a4>)
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	edc3 7a00 	vstr	s15, [r3]
		//Variação da ação de controle para esta iteração
		deltaU[n] = Kc*(error[n]- preverror[n]) + error[n]*Ki -Kd*(speed[n]-2*prevspeed[n] + prevspeed2[n]);
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	4a9b      	ldr	r2, [pc, #620]	@ (800169c <Controle+0x2a4>)
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	4413      	add	r3, r2
 8001434:	ed93 7a00 	vldr	s14, [r3]
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	4a99      	ldr	r2, [pc, #612]	@ (80016a0 <Controle+0x2a8>)
 800143c:	009b      	lsls	r3, r3, #2
 800143e:	4413      	add	r3, r2
 8001440:	edd3 7a00 	vldr	s15, [r3]
 8001444:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001448:	4b96      	ldr	r3, [pc, #600]	@ (80016a4 <Controle+0x2ac>)
 800144a:	edd3 7a00 	vldr	s15, [r3]
 800144e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	4a91      	ldr	r2, [pc, #580]	@ (800169c <Controle+0x2a4>)
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	edd3 6a00 	vldr	s13, [r3]
 800145e:	4b92      	ldr	r3, [pc, #584]	@ (80016a8 <Controle+0x2b0>)
 8001460:	edd3 7a00 	vldr	s15, [r3]
 8001464:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001468:	ee37 7a27 	vadd.f32	s14, s14, s15
 800146c:	79fb      	ldrb	r3, [r7, #7]
 800146e:	4a8a      	ldr	r2, [pc, #552]	@ (8001698 <Controle+0x2a0>)
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	edd3 6a00 	vldr	s13, [r3]
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	4a8c      	ldr	r2, [pc, #560]	@ (80016ac <Controle+0x2b4>)
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	edd3 7a00 	vldr	s15, [r3]
 8001484:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001488:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800148c:	79fb      	ldrb	r3, [r7, #7]
 800148e:	4a88      	ldr	r2, [pc, #544]	@ (80016b0 <Controle+0x2b8>)
 8001490:	009b      	lsls	r3, r3, #2
 8001492:	4413      	add	r3, r2
 8001494:	edd3 7a00 	vldr	s15, [r3]
 8001498:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800149c:	4b85      	ldr	r3, [pc, #532]	@ (80016b4 <Controle+0x2bc>)
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014ac:	4a82      	ldr	r2, [pc, #520]	@ (80016b8 <Controle+0x2c0>)
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	edc3 7a00 	vstr	s15, [r3]
		//Ação de controle
		uM[n] = uM[n] + deltaU[n];
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	4a80      	ldr	r2, [pc, #512]	@ (80016bc <Controle+0x2c4>)
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	ed93 7a00 	vldr	s14, [r3]
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	4a7c      	ldr	r2, [pc, #496]	@ (80016b8 <Controle+0x2c0>)
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	edd3 7a00 	vldr	s15, [r3]
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d4:	4a79      	ldr	r2, [pc, #484]	@ (80016bc <Controle+0x2c4>)
 80014d6:	009b      	lsls	r3, r3, #2
 80014d8:	4413      	add	r3, r2
 80014da:	edc3 7a00 	vstr	s15, [r3]
		//Saturado para evitar que a ação de controle ultrapasse o limite
		if( uM[n] < -1023){
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	4a76      	ldr	r2, [pc, #472]	@ (80016bc <Controle+0x2c4>)
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	edd3 7a00 	vldr	s15, [r3]
 80014ea:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 80016c0 <Controle+0x2c8>
 80014ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f6:	d505      	bpl.n	8001504 <Controle+0x10c>
			uM[n]= -1023;
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	4a70      	ldr	r2, [pc, #448]	@ (80016bc <Controle+0x2c4>)
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	4413      	add	r3, r2
 8001500:	4a70      	ldr	r2, [pc, #448]	@ (80016c4 <Controle+0x2cc>)
 8001502:	601a      	str	r2, [r3, #0]
		}
		if(uM[n]>1023){
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	4a6d      	ldr	r2, [pc, #436]	@ (80016bc <Controle+0x2c4>)
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	edd3 7a00 	vldr	s15, [r3]
 8001510:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 80016c8 <Controle+0x2d0>
 8001514:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151c:	dd05      	ble.n	800152a <Controle+0x132>
			uM[n]= 1023;
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	4a66      	ldr	r2, [pc, #408]	@ (80016bc <Controle+0x2c4>)
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	4413      	add	r3, r2
 8001526:	4a69      	ldr	r2, [pc, #420]	@ (80016cc <Controle+0x2d4>)
 8001528:	601a      	str	r2, [r3, #0]
		}
		//Mapeamento da variavel de ação de controle no alcançe dado
		if(ref[n]==0){
 800152a:	79fb      	ldrb	r3, [r7, #7]
 800152c:	4a59      	ldr	r2, [pc, #356]	@ (8001694 <Controle+0x29c>)
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	4413      	add	r3, r2
 8001532:	edd3 7a00 	vldr	s15, [r3]
 8001536:	eef5 7a40 	vcmp.f32	s15, #0.0
 800153a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153e:	d105      	bne.n	800154c <Controle+0x154>
			D[n]=0;
 8001540:	79fb      	ldrb	r3, [r7, #7]
 8001542:	4a63      	ldr	r2, [pc, #396]	@ (80016d0 <Controle+0x2d8>)
 8001544:	2100      	movs	r1, #0
 8001546:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800154a:	e042      	b.n	80015d2 <Controle+0x1da>
		}else if(uM[n]>=0 ){
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	4a5b      	ldr	r2, [pc, #364]	@ (80016bc <Controle+0x2c4>)
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	4413      	add	r3, r2
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800155c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001560:	db16      	blt.n	8001590 <Controle+0x198>
			D[n] = map(uM[n],0,1023,0,1023);
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	4a55      	ldr	r2, [pc, #340]	@ (80016bc <Controle+0x2c4>)
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	4413      	add	r3, r2
 800156a:	edd3 7a00 	vldr	s15, [r3]
 800156e:	79fc      	ldrb	r4, [r7, #7]
 8001570:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8001574:	2200      	movs	r2, #0
 8001576:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 800157a:	2000      	movs	r0, #0
 800157c:	eeb0 0a67 	vmov.f32	s0, s15
 8001580:	f7ff ff04 	bl	800138c <map>
 8001584:	4603      	mov	r3, r0
 8001586:	461a      	mov	r2, r3
 8001588:	4b51      	ldr	r3, [pc, #324]	@ (80016d0 <Controle+0x2d8>)
 800158a:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 800158e:	e020      	b.n	80015d2 <Controle+0x1da>
		}else if(uM[n]<0){
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	4a4a      	ldr	r2, [pc, #296]	@ (80016bc <Controle+0x2c4>)
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	edd3 7a00 	vldr	s15, [r3]
 800159c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a4:	d515      	bpl.n	80015d2 <Controle+0x1da>
			D[n]= map(uM[n],-1023,0,2047,1023);
 80015a6:	79fb      	ldrb	r3, [r7, #7]
 80015a8:	4a44      	ldr	r2, [pc, #272]	@ (80016bc <Controle+0x2c4>)
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	4413      	add	r3, r2
 80015ae:	edd3 7a00 	vldr	s15, [r3]
 80015b2:	79fc      	ldrb	r4, [r7, #7]
 80015b4:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80015b8:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80015bc:	2100      	movs	r1, #0
 80015be:	4845      	ldr	r0, [pc, #276]	@ (80016d4 <Controle+0x2dc>)
 80015c0:	eeb0 0a67 	vmov.f32	s0, s15
 80015c4:	f7ff fee2 	bl	800138c <map>
 80015c8:	4603      	mov	r3, r0
 80015ca:	461a      	mov	r2, r3
 80015cc:	4b40      	ldr	r3, [pc, #256]	@ (80016d0 <Controle+0x2d8>)
 80015ce:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for(uint8_t n=0;n<4;n++){
 80015d2:	79fb      	ldrb	r3, [r7, #7]
 80015d4:	3301      	adds	r3, #1
 80015d6:	71fb      	strb	r3, [r7, #7]
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	2b03      	cmp	r3, #3
 80015dc:	f67f af12 	bls.w	8001404 <Controle+0xc>
		}
	}

	//Logica para salvar o erro e a velocidade anterior
	cont = cont +1;
 80015e0:	4b3d      	ldr	r3, [pc, #244]	@ (80016d8 <Controle+0x2e0>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	3301      	adds	r3, #1
 80015e6:	b2da      	uxtb	r2, r3
 80015e8:	4b3b      	ldr	r3, [pc, #236]	@ (80016d8 <Controle+0x2e0>)
 80015ea:	701a      	strb	r2, [r3, #0]
	if(cont == 1){
 80015ec:	4b3a      	ldr	r3, [pc, #232]	@ (80016d8 <Controle+0x2e0>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d11d      	bne.n	8001630 <Controle+0x238>
		for(uint8_t n=0;n<4;n++){
 80015f4:	2300      	movs	r3, #0
 80015f6:	71bb      	strb	r3, [r7, #6]
 80015f8:	e016      	b.n	8001628 <Controle+0x230>
			prevspeed[n] = speed[n];
 80015fa:	79ba      	ldrb	r2, [r7, #6]
 80015fc:	79bb      	ldrb	r3, [r7, #6]
 80015fe:	4926      	ldr	r1, [pc, #152]	@ (8001698 <Controle+0x2a0>)
 8001600:	0092      	lsls	r2, r2, #2
 8001602:	440a      	add	r2, r1
 8001604:	6812      	ldr	r2, [r2, #0]
 8001606:	4929      	ldr	r1, [pc, #164]	@ (80016ac <Controle+0x2b4>)
 8001608:	009b      	lsls	r3, r3, #2
 800160a:	440b      	add	r3, r1
 800160c:	601a      	str	r2, [r3, #0]
			preverror[n] = error[n];
 800160e:	79ba      	ldrb	r2, [r7, #6]
 8001610:	79bb      	ldrb	r3, [r7, #6]
 8001612:	4922      	ldr	r1, [pc, #136]	@ (800169c <Controle+0x2a4>)
 8001614:	0092      	lsls	r2, r2, #2
 8001616:	440a      	add	r2, r1
 8001618:	6812      	ldr	r2, [r2, #0]
 800161a:	4921      	ldr	r1, [pc, #132]	@ (80016a0 <Controle+0x2a8>)
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	440b      	add	r3, r1
 8001620:	601a      	str	r2, [r3, #0]
		for(uint8_t n=0;n<4;n++){
 8001622:	79bb      	ldrb	r3, [r7, #6]
 8001624:	3301      	adds	r3, #1
 8001626:	71bb      	strb	r3, [r7, #6]
 8001628:	79bb      	ldrb	r3, [r7, #6]
 800162a:	2b03      	cmp	r3, #3
 800162c:	d9e5      	bls.n	80015fa <Controle+0x202>
			prevspeed[n] = speed[n];
			preverror[n] = error[n];
		}
		cont = 1;
	}
}
 800162e:	e02d      	b.n	800168c <Controle+0x294>
	} else if(cont ==2){
 8001630:	4b29      	ldr	r3, [pc, #164]	@ (80016d8 <Controle+0x2e0>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b02      	cmp	r3, #2
 8001636:	d129      	bne.n	800168c <Controle+0x294>
		for(uint8_t n=0;n<4;n++){
 8001638:	2300      	movs	r3, #0
 800163a:	717b      	strb	r3, [r7, #5]
 800163c:	e020      	b.n	8001680 <Controle+0x288>
			prevspeed2[n] = prevspeed[n];
 800163e:	797a      	ldrb	r2, [r7, #5]
 8001640:	797b      	ldrb	r3, [r7, #5]
 8001642:	491a      	ldr	r1, [pc, #104]	@ (80016ac <Controle+0x2b4>)
 8001644:	0092      	lsls	r2, r2, #2
 8001646:	440a      	add	r2, r1
 8001648:	6812      	ldr	r2, [r2, #0]
 800164a:	4919      	ldr	r1, [pc, #100]	@ (80016b0 <Controle+0x2b8>)
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	440b      	add	r3, r1
 8001650:	601a      	str	r2, [r3, #0]
			prevspeed[n] = speed[n];
 8001652:	797a      	ldrb	r2, [r7, #5]
 8001654:	797b      	ldrb	r3, [r7, #5]
 8001656:	4910      	ldr	r1, [pc, #64]	@ (8001698 <Controle+0x2a0>)
 8001658:	0092      	lsls	r2, r2, #2
 800165a:	440a      	add	r2, r1
 800165c:	6812      	ldr	r2, [r2, #0]
 800165e:	4913      	ldr	r1, [pc, #76]	@ (80016ac <Controle+0x2b4>)
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	440b      	add	r3, r1
 8001664:	601a      	str	r2, [r3, #0]
			preverror[n] = error[n];
 8001666:	797a      	ldrb	r2, [r7, #5]
 8001668:	797b      	ldrb	r3, [r7, #5]
 800166a:	490c      	ldr	r1, [pc, #48]	@ (800169c <Controle+0x2a4>)
 800166c:	0092      	lsls	r2, r2, #2
 800166e:	440a      	add	r2, r1
 8001670:	6812      	ldr	r2, [r2, #0]
 8001672:	490b      	ldr	r1, [pc, #44]	@ (80016a0 <Controle+0x2a8>)
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	440b      	add	r3, r1
 8001678:	601a      	str	r2, [r3, #0]
		for(uint8_t n=0;n<4;n++){
 800167a:	797b      	ldrb	r3, [r7, #5]
 800167c:	3301      	adds	r3, #1
 800167e:	717b      	strb	r3, [r7, #5]
 8001680:	797b      	ldrb	r3, [r7, #5]
 8001682:	2b03      	cmp	r3, #3
 8001684:	d9db      	bls.n	800163e <Controle+0x246>
		cont = 1;
 8001686:	4b14      	ldr	r3, [pc, #80]	@ (80016d8 <Controle+0x2e0>)
 8001688:	2201      	movs	r2, #1
 800168a:	701a      	strb	r2, [r3, #0]
}
 800168c:	bf00      	nop
 800168e:	370c      	adds	r7, #12
 8001690:	46bd      	mov	sp, r7
 8001692:	bd90      	pop	{r4, r7, pc}
 8001694:	240004f8 	.word	0x240004f8
 8001698:	240005b4 	.word	0x240005b4
 800169c:	24000528 	.word	0x24000528
 80016a0:	24000578 	.word	0x24000578
 80016a4:	24000008 	.word	0x24000008
 80016a8:	2400000c 	.word	0x2400000c
 80016ac:	24000558 	.word	0x24000558
 80016b0:	24000568 	.word	0x24000568
 80016b4:	24000010 	.word	0x24000010
 80016b8:	24000538 	.word	0x24000538
 80016bc:	24000548 	.word	0x24000548
 80016c0:	c47fc000 	.word	0xc47fc000
 80016c4:	c47fc000 	.word	0xc47fc000
 80016c8:	447fc000 	.word	0x447fc000
 80016cc:	447fc000 	.word	0x447fc000
 80016d0:	2400058c 	.word	0x2400058c
 80016d4:	fffffc01 	.word	0xfffffc01
 80016d8:	24000588 	.word	0x24000588

080016dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80016e0:	bf00      	nop
 80016e2:	e7fd      	b.n	80016e0 <NMI_Handler+0x4>

080016e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <HardFault_Handler+0x4>

080016ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f0:	bf00      	nop
 80016f2:	e7fd      	b.n	80016f0 <MemManage_Handler+0x4>

080016f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016f8:	bf00      	nop
 80016fa:	e7fd      	b.n	80016f8 <BusFault_Handler+0x4>

080016fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001700:	bf00      	nop
 8001702:	e7fd      	b.n	8001700 <UsageFault_Handler+0x4>

08001704 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr

0800172e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001732:	f001 f949 	bl	80029c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8001740:	4802      	ldr	r0, [pc, #8]	@ (800174c <DMA1_Stream1_IRQHandler+0x10>)
 8001742:	f003 f915 	bl	8004970 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	24000854 	.word	0x24000854

08001750 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8001754:	4802      	ldr	r0, [pc, #8]	@ (8001760 <DMA1_Stream3_IRQHandler+0x10>)
 8001756:	f003 f90b 	bl	8004970 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	240008cc 	.word	0x240008cc

08001764 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8001768:	4802      	ldr	r0, [pc, #8]	@ (8001774 <DMA1_Stream4_IRQHandler+0x10>)
 800176a:	f003 f901 	bl	8004970 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	24000944 	.word	0x24000944

08001778 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 800177c:	4802      	ldr	r0, [pc, #8]	@ (8001788 <DMA1_Stream5_IRQHandler+0x10>)
 800177e:	f003 f8f7 	bl	8004970 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	240007dc 	.word	0x240007dc

0800178c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001790:	4802      	ldr	r0, [pc, #8]	@ (800179c <TIM4_IRQHandler+0x10>)
 8001792:	f00a fa0f 	bl	800bbb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	240006ac 	.word	0x240006ac

080017a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80017a4:	2000      	movs	r0, #0
 80017a6:	f000 ffa1 	bl	80026ec <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
	...

080017b0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80017b4:	4802      	ldr	r0, [pc, #8]	@ (80017c0 <OTG_FS_IRQHandler+0x10>)
 80017b6:	f004 ffc8 	bl	800674a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	24001f40 	.word	0x24001f40
 80017c4:	00000000 	.word	0x00000000

080017c8 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 80017ce:	483a      	ldr	r0, [pc, #232]	@ (80018b8 <TIM15_IRQHandler+0xf0>)
 80017d0:	f00a f9f0 	bl	800bbb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */
  //
  Enc[0] = TIM4->CNT;
 80017d4:	4b39      	ldr	r3, [pc, #228]	@ (80018bc <TIM15_IRQHandler+0xf4>)
 80017d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d8:	4a39      	ldr	r2, [pc, #228]	@ (80018c0 <TIM15_IRQHandler+0xf8>)
 80017da:	6013      	str	r3, [r2, #0]
  Enc[1] = TIM1->CNT;
 80017dc:	4b39      	ldr	r3, [pc, #228]	@ (80018c4 <TIM15_IRQHandler+0xfc>)
 80017de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e0:	4a37      	ldr	r2, [pc, #220]	@ (80018c0 <TIM15_IRQHandler+0xf8>)
 80017e2:	6053      	str	r3, [r2, #4]
  Enc[2] = TIM8->CNT;
 80017e4:	4b38      	ldr	r3, [pc, #224]	@ (80018c8 <TIM15_IRQHandler+0x100>)
 80017e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e8:	4a35      	ldr	r2, [pc, #212]	@ (80018c0 <TIM15_IRQHandler+0xf8>)
 80017ea:	6093      	str	r3, [r2, #8]
  Enc[3] = TIM3->CNT;
 80017ec:	4b37      	ldr	r3, [pc, #220]	@ (80018cc <TIM15_IRQHandler+0x104>)
 80017ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f0:	4a33      	ldr	r2, [pc, #204]	@ (80018c0 <TIM15_IRQHandler+0xf8>)
 80017f2:	60d3      	str	r3, [r2, #12]
  TIM4->CNT = 0;
 80017f4:	4b31      	ldr	r3, [pc, #196]	@ (80018bc <TIM15_IRQHandler+0xf4>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM1->CNT = 0;
 80017fa:	4b32      	ldr	r3, [pc, #200]	@ (80018c4 <TIM15_IRQHandler+0xfc>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM8->CNT = 0;
 8001800:	4b31      	ldr	r3, [pc, #196]	@ (80018c8 <TIM15_IRQHandler+0x100>)
 8001802:	2200      	movs	r2, #0
 8001804:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM3->CNT = 0;
 8001806:	4b31      	ldr	r3, [pc, #196]	@ (80018cc <TIM15_IRQHandler+0x104>)
 8001808:	2200      	movs	r2, #0
 800180a:	625a      	str	r2, [r3, #36]	@ 0x24

  for(uint8_t i=0;i<4;i++){
 800180c:	2300      	movs	r3, #0
 800180e:	71fb      	strb	r3, [r7, #7]
 8001810:	e03b      	b.n	800188a <TIM15_IRQHandler+0xc2>
	  vel[i] = Enc[i];
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	4a2a      	ldr	r2, [pc, #168]	@ (80018c0 <TIM15_IRQHandler+0xf8>)
 8001816:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	4611      	mov	r1, r2
 800181e:	4a2c      	ldr	r2, [pc, #176]	@ (80018d0 <TIM15_IRQHandler+0x108>)
 8001820:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  if(vel[i]>60000){
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	4a2a      	ldr	r2, [pc, #168]	@ (80018d0 <TIM15_IRQHandler+0x108>)
 8001828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182c:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001830:	4293      	cmp	r3, r2
 8001832:	dd09      	ble.n	8001848 <TIM15_IRQHandler+0x80>
			  vel[i] = vel[i] - 65356;
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	4a26      	ldr	r2, [pc, #152]	@ (80018d0 <TIM15_IRQHandler+0x108>)
 8001838:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800183c:	79fa      	ldrb	r2, [r7, #7]
 800183e:	4b25      	ldr	r3, [pc, #148]	@ (80018d4 <TIM15_IRQHandler+0x10c>)
 8001840:	440b      	add	r3, r1
 8001842:	4923      	ldr	r1, [pc, #140]	@ (80018d0 <TIM15_IRQHandler+0x108>)
 8001844:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	  }
	  speed[i] = vel[i]/(81.92);
 8001848:	79fb      	ldrb	r3, [r7, #7]
 800184a:	4a21      	ldr	r2, [pc, #132]	@ (80018d0 <TIM15_IRQHandler+0x108>)
 800184c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001850:	ee07 3a90 	vmov	s15, r3
 8001854:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001858:	ed9f 5b15 	vldr	d5, [pc, #84]	@ 80018b0 <TIM15_IRQHandler+0xe8>
 800185c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001866:	4a1c      	ldr	r2, [pc, #112]	@ (80018d8 <TIM15_IRQHandler+0x110>)
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	4413      	add	r3, r2
 800186c:	edc3 7a00 	vstr	s15, [r3]
	  velocidade[i] = speed[i];
 8001870:	79fa      	ldrb	r2, [r7, #7]
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	4918      	ldr	r1, [pc, #96]	@ (80018d8 <TIM15_IRQHandler+0x110>)
 8001876:	0092      	lsls	r2, r2, #2
 8001878:	440a      	add	r2, r1
 800187a:	6812      	ldr	r2, [r2, #0]
 800187c:	4917      	ldr	r1, [pc, #92]	@ (80018dc <TIM15_IRQHandler+0x114>)
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0;i<4;i++){
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	3301      	adds	r3, #1
 8001888:	71fb      	strb	r3, [r7, #7]
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	2b03      	cmp	r3, #3
 800188e:	d9c0      	bls.n	8001812 <TIM15_IRQHandler+0x4a>
  }
  dshot_write(D);
 8001890:	4813      	ldr	r0, [pc, #76]	@ (80018e0 <TIM15_IRQHandler+0x118>)
 8001892:	f7ff f894 	bl	80009be <dshot_write>


  //velocidade = speed[0];
  Controle();
 8001896:	f7ff fdaf 	bl	80013f8 <Controle>

  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 800189a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800189e:	4811      	ldr	r0, [pc, #68]	@ (80018e4 <TIM15_IRQHandler+0x11c>)
 80018a0:	f004 fdc9 	bl	8006436 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM15_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	f3af 8000 	nop.w
 80018b0:	47ae147b 	.word	0x47ae147b
 80018b4:	40547ae1 	.word	0x40547ae1
 80018b8:	24000790 	.word	0x24000790
 80018bc:	40000800 	.word	0x40000800
 80018c0:	24000594 	.word	0x24000594
 80018c4:	40010000 	.word	0x40010000
 80018c8:	40010400 	.word	0x40010400
 80018cc:	40000400 	.word	0x40000400
 80018d0:	240005a4 	.word	0x240005a4
 80018d4:	ffff00b4 	.word	0xffff00b4
 80018d8:	240005b4 	.word	0x240005b4
 80018dc:	240004e8 	.word	0x240004e8
 80018e0:	2400058c 	.word	0x2400058c
 80018e4:	58020400 	.word	0x58020400

080018e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return 1;
 80018ec:	2301      	movs	r3, #1
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <_kill>:

int _kill(int pid, int sig)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001902:	f011 f83d 	bl	8012980 <__errno>
 8001906:	4603      	mov	r3, r0
 8001908:	2216      	movs	r2, #22
 800190a:	601a      	str	r2, [r3, #0]
  return -1;
 800190c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}

08001918 <_exit>:

void _exit (int status)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001920:	f04f 31ff 	mov.w	r1, #4294967295
 8001924:	6878      	ldr	r0, [r7, #4]
 8001926:	f7ff ffe7 	bl	80018f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800192a:	bf00      	nop
 800192c:	e7fd      	b.n	800192a <_exit+0x12>

0800192e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b086      	sub	sp, #24
 8001932:	af00      	add	r7, sp, #0
 8001934:	60f8      	str	r0, [r7, #12]
 8001936:	60b9      	str	r1, [r7, #8]
 8001938:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193a:	2300      	movs	r3, #0
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	e00a      	b.n	8001956 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001940:	f3af 8000 	nop.w
 8001944:	4601      	mov	r1, r0
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	1c5a      	adds	r2, r3, #1
 800194a:	60ba      	str	r2, [r7, #8]
 800194c:	b2ca      	uxtb	r2, r1
 800194e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	3301      	adds	r3, #1
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	429a      	cmp	r2, r3
 800195c:	dbf0      	blt.n	8001940 <_read+0x12>
  }

  return len;
 800195e:	687b      	ldr	r3, [r7, #4]
}
 8001960:	4618      	mov	r0, r3
 8001962:	3718      	adds	r7, #24
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	e009      	b.n	800198e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	1c5a      	adds	r2, r3, #1
 800197e:	60ba      	str	r2, [r7, #8]
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	4618      	mov	r0, r3
 8001984:	f000 ff32 	bl	80027ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	3301      	adds	r3, #1
 800198c:	617b      	str	r3, [r7, #20]
 800198e:	697a      	ldr	r2, [r7, #20]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	429a      	cmp	r2, r3
 8001994:	dbf1      	blt.n	800197a <_write+0x12>
  }
  return len;
 8001996:	687b      	ldr	r3, [r7, #4]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <_close>:

int _close(int file)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
 80019c0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019c8:	605a      	str	r2, [r3, #4]
  return 0;
 80019ca:	2300      	movs	r3, #0
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <_isatty>:

int _isatty(int file)
{
 80019d8:	b480      	push	{r7}
 80019da:	b083      	sub	sp, #12
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019e0:	2301      	movs	r3, #1
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b085      	sub	sp, #20
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a10:	4a14      	ldr	r2, [pc, #80]	@ (8001a64 <_sbrk+0x5c>)
 8001a12:	4b15      	ldr	r3, [pc, #84]	@ (8001a68 <_sbrk+0x60>)
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a1c:	4b13      	ldr	r3, [pc, #76]	@ (8001a6c <_sbrk+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d102      	bne.n	8001a2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a24:	4b11      	ldr	r3, [pc, #68]	@ (8001a6c <_sbrk+0x64>)
 8001a26:	4a12      	ldr	r2, [pc, #72]	@ (8001a70 <_sbrk+0x68>)
 8001a28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a2a:	4b10      	ldr	r3, [pc, #64]	@ (8001a6c <_sbrk+0x64>)
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d207      	bcs.n	8001a48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a38:	f010 ffa2 	bl	8012980 <__errno>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	220c      	movs	r2, #12
 8001a40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a42:	f04f 33ff 	mov.w	r3, #4294967295
 8001a46:	e009      	b.n	8001a5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a48:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <_sbrk+0x64>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a4e:	4b07      	ldr	r3, [pc, #28]	@ (8001a6c <_sbrk+0x64>)
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4413      	add	r3, r2
 8001a56:	4a05      	ldr	r2, [pc, #20]	@ (8001a6c <_sbrk+0x64>)
 8001a58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	3718      	adds	r7, #24
 8001a60:	46bd      	mov	sp, r7
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	24080000 	.word	0x24080000
 8001a68:	00000400 	.word	0x00000400
 8001a6c:	240005c4 	.word	0x240005c4
 8001a70:	24002790 	.word	0x24002790

08001a74 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim5_ch4;
DMA_HandleTypeDef hdma_tim5_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08c      	sub	sp, #48	@ 0x30
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a7a:	f107 030c 	add.w	r3, r7, #12
 8001a7e:	2224      	movs	r2, #36	@ 0x24
 8001a80:	2100      	movs	r1, #0
 8001a82:	4618      	mov	r0, r3
 8001a84:	f010 ff29 	bl	80128da <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a88:	463b      	mov	r3, r7
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	601a      	str	r2, [r3, #0]
 8001a8e:	605a      	str	r2, [r3, #4]
 8001a90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a92:	4b23      	ldr	r3, [pc, #140]	@ (8001b20 <MX_TIM1_Init+0xac>)
 8001a94:	4a23      	ldr	r2, [pc, #140]	@ (8001b24 <MX_TIM1_Init+0xb0>)
 8001a96:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a98:	4b21      	ldr	r3, [pc, #132]	@ (8001b20 <MX_TIM1_Init+0xac>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9e:	4b20      	ldr	r3, [pc, #128]	@ (8001b20 <MX_TIM1_Init+0xac>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b20 <MX_TIM1_Init+0xac>)
 8001aa6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001aaa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aac:	4b1c      	ldr	r3, [pc, #112]	@ (8001b20 <MX_TIM1_Init+0xac>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ab2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b20 <MX_TIM1_Init+0xac>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab8:	4b19      	ldr	r3, [pc, #100]	@ (8001b20 <MX_TIM1_Init+0xac>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ada:	2300      	movs	r3, #0
 8001adc:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	480d      	ldr	r0, [pc, #52]	@ (8001b20 <MX_TIM1_Init+0xac>)
 8001aea:	f009 ff0f 	bl	800b90c <HAL_TIM_Encoder_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001af4:	f7ff fc29 	bl	800134a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af8:	2300      	movs	r3, #0
 8001afa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001afc:	2300      	movs	r3, #0
 8001afe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b04:	463b      	mov	r3, r7
 8001b06:	4619      	mov	r1, r3
 8001b08:	4805      	ldr	r0, [pc, #20]	@ (8001b20 <MX_TIM1_Init+0xac>)
 8001b0a:	f00a ffcf 	bl	800caac <HAL_TIMEx_MasterConfigSynchronization>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001b14:	f7ff fc19 	bl	800134a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b18:	bf00      	nop
 8001b1a:	3730      	adds	r7, #48	@ 0x30
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	240005c8 	.word	0x240005c8
 8001b24:	40010000 	.word	0x40010000

08001b28 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08a      	sub	sp, #40	@ 0x28
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b2e:	f107 031c 	add.w	r3, r7, #28
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b3a:	463b      	mov	r3, r7
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
 8001b48:	615a      	str	r2, [r3, #20]
 8001b4a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b4c:	4b27      	ldr	r3, [pc, #156]	@ (8001bec <MX_TIM2_Init+0xc4>)
 8001b4e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b54:	4b25      	ldr	r3, [pc, #148]	@ (8001bec <MX_TIM2_Init+0xc4>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5a:	4b24      	ldr	r3, [pc, #144]	@ (8001bec <MX_TIM2_Init+0xc4>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001b60:	4b22      	ldr	r3, [pc, #136]	@ (8001bec <MX_TIM2_Init+0xc4>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b66:	4b21      	ldr	r3, [pc, #132]	@ (8001bec <MX_TIM2_Init+0xc4>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bec <MX_TIM2_Init+0xc4>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b72:	481e      	ldr	r0, [pc, #120]	@ (8001bec <MX_TIM2_Init+0xc4>)
 8001b74:	f009 fd64 	bl	800b640 <HAL_TIM_PWM_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001b7e:	f7ff fbe4 	bl	800134a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b82:	2300      	movs	r3, #0
 8001b84:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b86:	2300      	movs	r3, #0
 8001b88:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b8a:	f107 031c 	add.w	r3, r7, #28
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4816      	ldr	r0, [pc, #88]	@ (8001bec <MX_TIM2_Init+0xc4>)
 8001b92:	f00a ff8b 	bl	800caac <HAL_TIMEx_MasterConfigSynchronization>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001b9c:	f7ff fbd5 	bl	800134a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ba0:	2360      	movs	r3, #96	@ 0x60
 8001ba2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bb0:	463b      	mov	r3, r7
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	480d      	ldr	r0, [pc, #52]	@ (8001bec <MX_TIM2_Init+0xc4>)
 8001bb8:	f00a f904 	bl	800bdc4 <HAL_TIM_PWM_ConfigChannel>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001bc2:	f7ff fbc2 	bl	800134a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	2208      	movs	r2, #8
 8001bca:	4619      	mov	r1, r3
 8001bcc:	4807      	ldr	r0, [pc, #28]	@ (8001bec <MX_TIM2_Init+0xc4>)
 8001bce:	f00a f8f9 	bl	800bdc4 <HAL_TIM_PWM_ConfigChannel>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001bd8:	f7ff fbb7 	bl	800134a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001bdc:	4803      	ldr	r0, [pc, #12]	@ (8001bec <MX_TIM2_Init+0xc4>)
 8001bde:	f000 fc13 	bl	8002408 <HAL_TIM_MspPostInit>

}
 8001be2:	bf00      	nop
 8001be4:	3728      	adds	r7, #40	@ 0x28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	24000614 	.word	0x24000614

08001bf0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08c      	sub	sp, #48	@ 0x30
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bf6:	f107 030c 	add.w	r3, r7, #12
 8001bfa:	2224      	movs	r2, #36	@ 0x24
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f010 fe6b 	bl	80128da <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c04:	463b      	mov	r3, r7
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c0e:	4b21      	ldr	r3, [pc, #132]	@ (8001c94 <MX_TIM3_Init+0xa4>)
 8001c10:	4a21      	ldr	r2, [pc, #132]	@ (8001c98 <MX_TIM3_Init+0xa8>)
 8001c12:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c14:	4b1f      	ldr	r3, [pc, #124]	@ (8001c94 <MX_TIM3_Init+0xa4>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1a:	4b1e      	ldr	r3, [pc, #120]	@ (8001c94 <MX_TIM3_Init+0xa4>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c20:	4b1c      	ldr	r3, [pc, #112]	@ (8001c94 <MX_TIM3_Init+0xa4>)
 8001c22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c28:	4b1a      	ldr	r3, [pc, #104]	@ (8001c94 <MX_TIM3_Init+0xa4>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c2e:	4b19      	ldr	r3, [pc, #100]	@ (8001c94 <MX_TIM3_Init+0xa4>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c34:	2303      	movs	r3, #3
 8001c36:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c50:	2300      	movs	r3, #0
 8001c52:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c58:	f107 030c 	add.w	r3, r7, #12
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	480d      	ldr	r0, [pc, #52]	@ (8001c94 <MX_TIM3_Init+0xa4>)
 8001c60:	f009 fe54 	bl	800b90c <HAL_TIM_Encoder_Init>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001c6a:	f7ff fb6e 	bl	800134a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c72:	2300      	movs	r3, #0
 8001c74:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c76:	463b      	mov	r3, r7
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4806      	ldr	r0, [pc, #24]	@ (8001c94 <MX_TIM3_Init+0xa4>)
 8001c7c:	f00a ff16 	bl	800caac <HAL_TIMEx_MasterConfigSynchronization>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001c86:	f7ff fb60 	bl	800134a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c8a:	bf00      	nop
 8001c8c:	3730      	adds	r7, #48	@ 0x30
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	24000660 	.word	0x24000660
 8001c98:	40000400 	.word	0x40000400

08001c9c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b08c      	sub	sp, #48	@ 0x30
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ca2:	f107 030c 	add.w	r3, r7, #12
 8001ca6:	2224      	movs	r2, #36	@ 0x24
 8001ca8:	2100      	movs	r1, #0
 8001caa:	4618      	mov	r0, r3
 8001cac:	f010 fe15 	bl	80128da <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cb0:	463b      	mov	r3, r7
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001cba:	4b21      	ldr	r3, [pc, #132]	@ (8001d40 <MX_TIM4_Init+0xa4>)
 8001cbc:	4a21      	ldr	r2, [pc, #132]	@ (8001d44 <MX_TIM4_Init+0xa8>)
 8001cbe:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001cc0:	4b1f      	ldr	r3, [pc, #124]	@ (8001d40 <MX_TIM4_Init+0xa4>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d40 <MX_TIM4_Init+0xa4>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001ccc:	4b1c      	ldr	r3, [pc, #112]	@ (8001d40 <MX_TIM4_Init+0xa4>)
 8001cce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001cd2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d40 <MX_TIM4_Init+0xa4>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cda:	4b19      	ldr	r3, [pc, #100]	@ (8001d40 <MX_TIM4_Init+0xa4>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001ce4:	2302      	movs	r3, #2
 8001ce6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d04:	f107 030c 	add.w	r3, r7, #12
 8001d08:	4619      	mov	r1, r3
 8001d0a:	480d      	ldr	r0, [pc, #52]	@ (8001d40 <MX_TIM4_Init+0xa4>)
 8001d0c:	f009 fdfe 	bl	800b90c <HAL_TIM_Encoder_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001d16:	f7ff fb18 	bl	800134a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d22:	463b      	mov	r3, r7
 8001d24:	4619      	mov	r1, r3
 8001d26:	4806      	ldr	r0, [pc, #24]	@ (8001d40 <MX_TIM4_Init+0xa4>)
 8001d28:	f00a fec0 	bl	800caac <HAL_TIMEx_MasterConfigSynchronization>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001d32:	f7ff fb0a 	bl	800134a <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d36:	bf00      	nop
 8001d38:	3730      	adds	r7, #48	@ 0x30
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	240006ac 	.word	0x240006ac
 8001d44:	40000800 	.word	0x40000800

08001d48 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08a      	sub	sp, #40	@ 0x28
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d4e:	f107 031c 	add.w	r3, r7, #28
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d5a:	463b      	mov	r3, r7
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	605a      	str	r2, [r3, #4]
 8001d62:	609a      	str	r2, [r3, #8]
 8001d64:	60da      	str	r2, [r3, #12]
 8001d66:	611a      	str	r2, [r3, #16]
 8001d68:	615a      	str	r2, [r3, #20]
 8001d6a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001d6c:	4b26      	ldr	r3, [pc, #152]	@ (8001e08 <MX_TIM5_Init+0xc0>)
 8001d6e:	4a27      	ldr	r2, [pc, #156]	@ (8001e0c <MX_TIM5_Init+0xc4>)
 8001d70:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001d72:	4b25      	ldr	r3, [pc, #148]	@ (8001e08 <MX_TIM5_Init+0xc0>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d78:	4b23      	ldr	r3, [pc, #140]	@ (8001e08 <MX_TIM5_Init+0xc0>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001d7e:	4b22      	ldr	r3, [pc, #136]	@ (8001e08 <MX_TIM5_Init+0xc0>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d84:	4b20      	ldr	r3, [pc, #128]	@ (8001e08 <MX_TIM5_Init+0xc0>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8a:	4b1f      	ldr	r3, [pc, #124]	@ (8001e08 <MX_TIM5_Init+0xc0>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001d90:	481d      	ldr	r0, [pc, #116]	@ (8001e08 <MX_TIM5_Init+0xc0>)
 8001d92:	f009 fc55 	bl	800b640 <HAL_TIM_PWM_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001d9c:	f7ff fad5 	bl	800134a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001da8:	f107 031c 	add.w	r3, r7, #28
 8001dac:	4619      	mov	r1, r3
 8001dae:	4816      	ldr	r0, [pc, #88]	@ (8001e08 <MX_TIM5_Init+0xc0>)
 8001db0:	f00a fe7c 	bl	800caac <HAL_TIMEx_MasterConfigSynchronization>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001dba:	f7ff fac6 	bl	800134a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dbe:	2360      	movs	r3, #96	@ 0x60
 8001dc0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001dce:	463b      	mov	r3, r7
 8001dd0:	2204      	movs	r2, #4
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	480c      	ldr	r0, [pc, #48]	@ (8001e08 <MX_TIM5_Init+0xc0>)
 8001dd6:	f009 fff5 	bl	800bdc4 <HAL_TIM_PWM_ConfigChannel>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d001      	beq.n	8001de4 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001de0:	f7ff fab3 	bl	800134a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001de4:	463b      	mov	r3, r7
 8001de6:	220c      	movs	r2, #12
 8001de8:	4619      	mov	r1, r3
 8001dea:	4807      	ldr	r0, [pc, #28]	@ (8001e08 <MX_TIM5_Init+0xc0>)
 8001dec:	f009 ffea 	bl	800bdc4 <HAL_TIM_PWM_ConfigChannel>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001df6:	f7ff faa8 	bl	800134a <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001dfa:	4803      	ldr	r0, [pc, #12]	@ (8001e08 <MX_TIM5_Init+0xc0>)
 8001dfc:	f000 fb04 	bl	8002408 <HAL_TIM_MspPostInit>

}
 8001e00:	bf00      	nop
 8001e02:	3728      	adds	r7, #40	@ 0x28
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	240006f8 	.word	0x240006f8
 8001e0c:	40000c00 	.word	0x40000c00

08001e10 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b08c      	sub	sp, #48	@ 0x30
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001e16:	f107 030c 	add.w	r3, r7, #12
 8001e1a:	2224      	movs	r2, #36	@ 0x24
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f010 fd5b 	bl	80128da <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e24:	463b      	mov	r3, r7
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001e2e:	4b23      	ldr	r3, [pc, #140]	@ (8001ebc <MX_TIM8_Init+0xac>)
 8001e30:	4a23      	ldr	r2, [pc, #140]	@ (8001ec0 <MX_TIM8_Init+0xb0>)
 8001e32:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001e34:	4b21      	ldr	r3, [pc, #132]	@ (8001ebc <MX_TIM8_Init+0xac>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e3a:	4b20      	ldr	r3, [pc, #128]	@ (8001ebc <MX_TIM8_Init+0xac>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001e40:	4b1e      	ldr	r3, [pc, #120]	@ (8001ebc <MX_TIM8_Init+0xac>)
 8001e42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001e46:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e48:	4b1c      	ldr	r3, [pc, #112]	@ (8001ebc <MX_TIM8_Init+0xac>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001e4e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ebc <MX_TIM8_Init+0xac>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e54:	4b19      	ldr	r3, [pc, #100]	@ (8001ebc <MX_TIM8_Init+0xac>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001e5e:	2302      	movs	r3, #2
 8001e60:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001e62:	2301      	movs	r3, #1
 8001e64:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001e72:	2301      	movs	r3, #1
 8001e74:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e76:	2300      	movs	r3, #0
 8001e78:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001e7e:	f107 030c 	add.w	r3, r7, #12
 8001e82:	4619      	mov	r1, r3
 8001e84:	480d      	ldr	r0, [pc, #52]	@ (8001ebc <MX_TIM8_Init+0xac>)
 8001e86:	f009 fd41 	bl	800b90c <HAL_TIM_Encoder_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001e90:	f7ff fa5b 	bl	800134a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e94:	2300      	movs	r3, #0
 8001e96:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ea0:	463b      	mov	r3, r7
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	4805      	ldr	r0, [pc, #20]	@ (8001ebc <MX_TIM8_Init+0xac>)
 8001ea6:	f00a fe01 	bl	800caac <HAL_TIMEx_MasterConfigSynchronization>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001eb0:	f7ff fa4b 	bl	800134a <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001eb4:	bf00      	nop
 8001eb6:	3730      	adds	r7, #48	@ 0x30
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	24000744 	.word	0x24000744
 8001ec0:	40010400 	.word	0x40010400

08001ec4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eca:	f107 0310 	add.w	r3, r7, #16
 8001ece:	2200      	movs	r2, #0
 8001ed0:	601a      	str	r2, [r3, #0]
 8001ed2:	605a      	str	r2, [r3, #4]
 8001ed4:	609a      	str	r2, [r3, #8]
 8001ed6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed8:	1d3b      	adds	r3, r7, #4
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001ee2:	4b1f      	ldr	r3, [pc, #124]	@ (8001f60 <MX_TIM15_Init+0x9c>)
 8001ee4:	4a1f      	ldr	r2, [pc, #124]	@ (8001f64 <MX_TIM15_Init+0xa0>)
 8001ee6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 19999;
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f60 <MX_TIM15_Init+0x9c>)
 8001eea:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001eee:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8001f60 <MX_TIM15_Init+0x9c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 99;
 8001ef6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f60 <MX_TIM15_Init+0x9c>)
 8001ef8:	2263      	movs	r2, #99	@ 0x63
 8001efa:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001efc:	4b18      	ldr	r3, [pc, #96]	@ (8001f60 <MX_TIM15_Init+0x9c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001f02:	4b17      	ldr	r3, [pc, #92]	@ (8001f60 <MX_TIM15_Init+0x9c>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f08:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <MX_TIM15_Init+0x9c>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001f0e:	4814      	ldr	r0, [pc, #80]	@ (8001f60 <MX_TIM15_Init+0x9c>)
 8001f10:	f009 fac6 	bl	800b4a0 <HAL_TIM_Base_Init>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d001      	beq.n	8001f1e <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001f1a:	f7ff fa16 	bl	800134a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f22:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001f24:	f107 0310 	add.w	r3, r7, #16
 8001f28:	4619      	mov	r1, r3
 8001f2a:	480d      	ldr	r0, [pc, #52]	@ (8001f60 <MX_TIM15_Init+0x9c>)
 8001f2c:	f00a f85e 	bl	800bfec <HAL_TIM_ConfigClockSource>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001f36:	f7ff fa08 	bl	800134a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001f42:	1d3b      	adds	r3, r7, #4
 8001f44:	4619      	mov	r1, r3
 8001f46:	4806      	ldr	r0, [pc, #24]	@ (8001f60 <MX_TIM15_Init+0x9c>)
 8001f48:	f00a fdb0 	bl	800caac <HAL_TIMEx_MasterConfigSynchronization>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8001f52:	f7ff f9fa 	bl	800134a <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001f56:	bf00      	nop
 8001f58:	3720      	adds	r7, #32
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	24000790 	.word	0x24000790
 8001f64:	40014000 	.word	0x40014000

08001f68 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b090      	sub	sp, #64	@ 0x40
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	609a      	str	r2, [r3, #8]
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a6d      	ldr	r2, [pc, #436]	@ (800213c <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d12f      	bne.n	8001fea <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f8a:	4b6d      	ldr	r3, [pc, #436]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001f8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f90:	4a6b      	ldr	r2, [pc, #428]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f9a:	4b69      	ldr	r3, [pc, #420]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001f9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001fa0:	f003 0301 	and.w	r3, r3, #1
 8001fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fa8:	4b65      	ldr	r3, [pc, #404]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fae:	4a64      	ldr	r2, [pc, #400]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001fb0:	f043 0310 	orr.w	r3, r3, #16
 8001fb4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fb8:	4b61      	ldr	r3, [pc, #388]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC2_A_Pin|ENC2_B_Pin;
 8001fc6:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fdc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4858      	ldr	r0, [pc, #352]	@ (8002144 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001fe4:	f004 f846 	bl	8006074 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001fe8:	e0a3      	b.n	8002132 <HAL_TIM_Encoder_MspInit+0x1ca>
  else if(tim_encoderHandle->Instance==TIM3)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a56      	ldr	r2, [pc, #344]	@ (8002148 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d12e      	bne.n	8002052 <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001ff4:	4b52      	ldr	r3, [pc, #328]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001ff6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ffa:	4a51      	ldr	r2, [pc, #324]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001ffc:	f043 0302 	orr.w	r3, r3, #2
 8002000:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002004:	4b4e      	ldr	r3, [pc, #312]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002006:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800200a:	f003 0302 	and.w	r3, r3, #2
 800200e:	623b      	str	r3, [r7, #32]
 8002010:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002012:	4b4b      	ldr	r3, [pc, #300]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002014:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002018:	4a49      	ldr	r2, [pc, #292]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800201a:	f043 0302 	orr.w	r3, r3, #2
 800201e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002022:	4b47      	ldr	r3, [pc, #284]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002024:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	61fb      	str	r3, [r7, #28]
 800202e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ENC4_A_Pin|ENC4_B_Pin;
 8002030:	2330      	movs	r3, #48	@ 0x30
 8002032:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002034:	2302      	movs	r3, #2
 8002036:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002038:	2300      	movs	r3, #0
 800203a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800203c:	2300      	movs	r3, #0
 800203e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002040:	2302      	movs	r3, #2
 8002042:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002044:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002048:	4619      	mov	r1, r3
 800204a:	4840      	ldr	r0, [pc, #256]	@ (800214c <HAL_TIM_Encoder_MspInit+0x1e4>)
 800204c:	f004 f812 	bl	8006074 <HAL_GPIO_Init>
}
 8002050:	e06f      	b.n	8002132 <HAL_TIM_Encoder_MspInit+0x1ca>
  else if(tim_encoderHandle->Instance==TIM4)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a3e      	ldr	r2, [pc, #248]	@ (8002150 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d137      	bne.n	80020cc <HAL_TIM_Encoder_MspInit+0x164>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800205c:	4b38      	ldr	r3, [pc, #224]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800205e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002062:	4a37      	ldr	r2, [pc, #220]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002064:	f043 0304 	orr.w	r3, r3, #4
 8002068:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800206c:	4b34      	ldr	r3, [pc, #208]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800206e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002072:	f003 0304 	and.w	r3, r3, #4
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800207a:	4b31      	ldr	r3, [pc, #196]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800207c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002080:	4a2f      	ldr	r2, [pc, #188]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002082:	f043 0308 	orr.w	r3, r3, #8
 8002086:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800208a:	4b2d      	ldr	r3, [pc, #180]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800208c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002090:	f003 0308 	and.w	r3, r3, #8
 8002094:	617b      	str	r3, [r7, #20]
 8002096:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC1_A_Pin|ENC1_B_Pin;
 8002098:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800209c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209e:	2302      	movs	r3, #2
 80020a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a6:	2300      	movs	r3, #0
 80020a8:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020aa:	2302      	movs	r3, #2
 80020ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ae:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020b2:	4619      	mov	r1, r3
 80020b4:	4827      	ldr	r0, [pc, #156]	@ (8002154 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80020b6:	f003 ffdd 	bl	8006074 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80020ba:	2200      	movs	r2, #0
 80020bc:	2100      	movs	r1, #0
 80020be:	201e      	movs	r0, #30
 80020c0:	f001 fe47 	bl	8003d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80020c4:	201e      	movs	r0, #30
 80020c6:	f001 fe5e 	bl	8003d86 <HAL_NVIC_EnableIRQ>
}
 80020ca:	e032      	b.n	8002132 <HAL_TIM_Encoder_MspInit+0x1ca>
  else if(tim_encoderHandle->Instance==TIM8)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a21      	ldr	r2, [pc, #132]	@ (8002158 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d12d      	bne.n	8002132 <HAL_TIM_Encoder_MspInit+0x1ca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80020d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80020d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020dc:	4a18      	ldr	r2, [pc, #96]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80020de:	f043 0302 	orr.w	r3, r3, #2
 80020e2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80020e6:	4b16      	ldr	r3, [pc, #88]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80020e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f4:	4b12      	ldr	r3, [pc, #72]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80020f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80020fa:	4a11      	ldr	r2, [pc, #68]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x1d8>)
 80020fc:	f043 0304 	orr.w	r3, r3, #4
 8002100:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002104:	4b0e      	ldr	r3, [pc, #56]	@ (8002140 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002106:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC3_A_Pin|ENC3_B_Pin;
 8002112:	23c0      	movs	r3, #192	@ 0xc0
 8002114:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211e:	2300      	movs	r3, #0
 8002120:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002122:	2303      	movs	r3, #3
 8002124:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002126:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800212a:	4619      	mov	r1, r3
 800212c:	480b      	ldr	r0, [pc, #44]	@ (800215c <HAL_TIM_Encoder_MspInit+0x1f4>)
 800212e:	f003 ffa1 	bl	8006074 <HAL_GPIO_Init>
}
 8002132:	bf00      	nop
 8002134:	3740      	adds	r7, #64	@ 0x40
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40010000 	.word	0x40010000
 8002140:	58024400 	.word	0x58024400
 8002144:	58021000 	.word	0x58021000
 8002148:	40000400 	.word	0x40000400
 800214c:	58020400 	.word	0x58020400
 8002150:	40000800 	.word	0x40000800
 8002154:	58020c00 	.word	0x58020c00
 8002158:	40010400 	.word	0x40010400
 800215c:	58020800 	.word	0x58020800

08002160 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b084      	sub	sp, #16
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002170:	f040 8082 	bne.w	8002278 <HAL_TIM_PWM_MspInit+0x118>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002174:	4b86      	ldr	r3, [pc, #536]	@ (8002390 <HAL_TIM_PWM_MspInit+0x230>)
 8002176:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800217a:	4a85      	ldr	r2, [pc, #532]	@ (8002390 <HAL_TIM_PWM_MspInit+0x230>)
 800217c:	f043 0301 	orr.w	r3, r3, #1
 8002180:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002184:	4b82      	ldr	r3, [pc, #520]	@ (8002390 <HAL_TIM_PWM_MspInit+0x230>)
 8002186:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	60fb      	str	r3, [r7, #12]
 8002190:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8002192:	4b80      	ldr	r3, [pc, #512]	@ (8002394 <HAL_TIM_PWM_MspInit+0x234>)
 8002194:	4a80      	ldr	r2, [pc, #512]	@ (8002398 <HAL_TIM_PWM_MspInit+0x238>)
 8002196:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8002198:	4b7e      	ldr	r3, [pc, #504]	@ (8002394 <HAL_TIM_PWM_MspInit+0x234>)
 800219a:	2212      	movs	r2, #18
 800219c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800219e:	4b7d      	ldr	r3, [pc, #500]	@ (8002394 <HAL_TIM_PWM_MspInit+0x234>)
 80021a0:	2240      	movs	r2, #64	@ 0x40
 80021a2:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021a4:	4b7b      	ldr	r3, [pc, #492]	@ (8002394 <HAL_TIM_PWM_MspInit+0x234>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80021aa:	4b7a      	ldr	r3, [pc, #488]	@ (8002394 <HAL_TIM_PWM_MspInit+0x234>)
 80021ac:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021b0:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80021b2:	4b78      	ldr	r3, [pc, #480]	@ (8002394 <HAL_TIM_PWM_MspInit+0x234>)
 80021b4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80021b8:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80021ba:	4b76      	ldr	r3, [pc, #472]	@ (8002394 <HAL_TIM_PWM_MspInit+0x234>)
 80021bc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021c0:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80021c2:	4b74      	ldr	r3, [pc, #464]	@ (8002394 <HAL_TIM_PWM_MspInit+0x234>)
 80021c4:	2200      	movs	r2, #0
 80021c6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80021c8:	4b72      	ldr	r3, [pc, #456]	@ (8002394 <HAL_TIM_PWM_MspInit+0x234>)
 80021ca:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021ce:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80021d0:	4b70      	ldr	r3, [pc, #448]	@ (8002394 <HAL_TIM_PWM_MspInit+0x234>)
 80021d2:	2204      	movs	r2, #4
 80021d4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim2_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80021d6:	4b6f      	ldr	r3, [pc, #444]	@ (8002394 <HAL_TIM_PWM_MspInit+0x234>)
 80021d8:	2200      	movs	r2, #0
 80021da:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim2_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 80021dc:	4b6d      	ldr	r3, [pc, #436]	@ (8002394 <HAL_TIM_PWM_MspInit+0x234>)
 80021de:	2200      	movs	r2, #0
 80021e0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim2_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80021e2:	4b6c      	ldr	r3, [pc, #432]	@ (8002394 <HAL_TIM_PWM_MspInit+0x234>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80021e8:	486a      	ldr	r0, [pc, #424]	@ (8002394 <HAL_TIM_PWM_MspInit+0x234>)
 80021ea:	f001 fdfb 	bl	8003de4 <HAL_DMA_Init>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <HAL_TIM_PWM_MspInit+0x98>
    {
      Error_Handler();
 80021f4:	f7ff f8a9 	bl	800134a <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a66      	ldr	r2, [pc, #408]	@ (8002394 <HAL_TIM_PWM_MspInit+0x234>)
 80021fc:	625a      	str	r2, [r3, #36]	@ 0x24
 80021fe:	4a65      	ldr	r2, [pc, #404]	@ (8002394 <HAL_TIM_PWM_MspInit+0x234>)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8002204:	4b65      	ldr	r3, [pc, #404]	@ (800239c <HAL_TIM_PWM_MspInit+0x23c>)
 8002206:	4a66      	ldr	r2, [pc, #408]	@ (80023a0 <HAL_TIM_PWM_MspInit+0x240>)
 8002208:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 800220a:	4b64      	ldr	r3, [pc, #400]	@ (800239c <HAL_TIM_PWM_MspInit+0x23c>)
 800220c:	2214      	movs	r2, #20
 800220e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002210:	4b62      	ldr	r3, [pc, #392]	@ (800239c <HAL_TIM_PWM_MspInit+0x23c>)
 8002212:	2240      	movs	r2, #64	@ 0x40
 8002214:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002216:	4b61      	ldr	r3, [pc, #388]	@ (800239c <HAL_TIM_PWM_MspInit+0x23c>)
 8002218:	2200      	movs	r2, #0
 800221a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800221c:	4b5f      	ldr	r3, [pc, #380]	@ (800239c <HAL_TIM_PWM_MspInit+0x23c>)
 800221e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002222:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002224:	4b5d      	ldr	r3, [pc, #372]	@ (800239c <HAL_TIM_PWM_MspInit+0x23c>)
 8002226:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800222a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800222c:	4b5b      	ldr	r3, [pc, #364]	@ (800239c <HAL_TIM_PWM_MspInit+0x23c>)
 800222e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002232:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8002234:	4b59      	ldr	r3, [pc, #356]	@ (800239c <HAL_TIM_PWM_MspInit+0x23c>)
 8002236:	2200      	movs	r2, #0
 8002238:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 800223a:	4b58      	ldr	r3, [pc, #352]	@ (800239c <HAL_TIM_PWM_MspInit+0x23c>)
 800223c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002240:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002242:	4b56      	ldr	r3, [pc, #344]	@ (800239c <HAL_TIM_PWM_MspInit+0x23c>)
 8002244:	2204      	movs	r2, #4
 8002246:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim2_ch3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002248:	4b54      	ldr	r3, [pc, #336]	@ (800239c <HAL_TIM_PWM_MspInit+0x23c>)
 800224a:	2200      	movs	r2, #0
 800224c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim2_ch3.Init.MemBurst = DMA_MBURST_SINGLE;
 800224e:	4b53      	ldr	r3, [pc, #332]	@ (800239c <HAL_TIM_PWM_MspInit+0x23c>)
 8002250:	2200      	movs	r2, #0
 8002252:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim2_ch3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002254:	4b51      	ldr	r3, [pc, #324]	@ (800239c <HAL_TIM_PWM_MspInit+0x23c>)
 8002256:	2200      	movs	r2, #0
 8002258:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 800225a:	4850      	ldr	r0, [pc, #320]	@ (800239c <HAL_TIM_PWM_MspInit+0x23c>)
 800225c:	f001 fdc2 	bl	8003de4 <HAL_DMA_Init>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <HAL_TIM_PWM_MspInit+0x10a>
    {
      Error_Handler();
 8002266:	f7ff f870 	bl	800134a <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a4b      	ldr	r2, [pc, #300]	@ (800239c <HAL_TIM_PWM_MspInit+0x23c>)
 800226e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002270:	4a4a      	ldr	r2, [pc, #296]	@ (800239c <HAL_TIM_PWM_MspInit+0x23c>)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002276:	e086      	b.n	8002386 <HAL_TIM_PWM_MspInit+0x226>
  else if(tim_pwmHandle->Instance==TIM5)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a49      	ldr	r2, [pc, #292]	@ (80023a4 <HAL_TIM_PWM_MspInit+0x244>)
 800227e:	4293      	cmp	r3, r2
 8002280:	f040 8081 	bne.w	8002386 <HAL_TIM_PWM_MspInit+0x226>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002284:	4b42      	ldr	r3, [pc, #264]	@ (8002390 <HAL_TIM_PWM_MspInit+0x230>)
 8002286:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800228a:	4a41      	ldr	r2, [pc, #260]	@ (8002390 <HAL_TIM_PWM_MspInit+0x230>)
 800228c:	f043 0308 	orr.w	r3, r3, #8
 8002290:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002294:	4b3e      	ldr	r3, [pc, #248]	@ (8002390 <HAL_TIM_PWM_MspInit+0x230>)
 8002296:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800229a:	f003 0308 	and.w	r3, r3, #8
 800229e:	60bb      	str	r3, [r7, #8]
 80022a0:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream3;
 80022a2:	4b41      	ldr	r3, [pc, #260]	@ (80023a8 <HAL_TIM_PWM_MspInit+0x248>)
 80022a4:	4a41      	ldr	r2, [pc, #260]	@ (80023ac <HAL_TIM_PWM_MspInit+0x24c>)
 80022a6:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80022a8:	4b3f      	ldr	r3, [pc, #252]	@ (80023a8 <HAL_TIM_PWM_MspInit+0x248>)
 80022aa:	223a      	movs	r2, #58	@ 0x3a
 80022ac:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022ae:	4b3e      	ldr	r3, [pc, #248]	@ (80023a8 <HAL_TIM_PWM_MspInit+0x248>)
 80022b0:	2240      	movs	r2, #64	@ 0x40
 80022b2:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80022b4:	4b3c      	ldr	r3, [pc, #240]	@ (80023a8 <HAL_TIM_PWM_MspInit+0x248>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80022ba:	4b3b      	ldr	r3, [pc, #236]	@ (80023a8 <HAL_TIM_PWM_MspInit+0x248>)
 80022bc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022c0:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022c2:	4b39      	ldr	r3, [pc, #228]	@ (80023a8 <HAL_TIM_PWM_MspInit+0x248>)
 80022c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022c8:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80022ca:	4b37      	ldr	r3, [pc, #220]	@ (80023a8 <HAL_TIM_PWM_MspInit+0x248>)
 80022cc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80022d0:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 80022d2:	4b35      	ldr	r3, [pc, #212]	@ (80023a8 <HAL_TIM_PWM_MspInit+0x248>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 80022d8:	4b33      	ldr	r3, [pc, #204]	@ (80023a8 <HAL_TIM_PWM_MspInit+0x248>)
 80022da:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022de:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80022e0:	4b31      	ldr	r3, [pc, #196]	@ (80023a8 <HAL_TIM_PWM_MspInit+0x248>)
 80022e2:	2204      	movs	r2, #4
 80022e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80022e6:	4b30      	ldr	r3, [pc, #192]	@ (80023a8 <HAL_TIM_PWM_MspInit+0x248>)
 80022e8:	2200      	movs	r2, #0
 80022ea:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch4.Init.MemBurst = DMA_MBURST_SINGLE;
 80022ec:	4b2e      	ldr	r3, [pc, #184]	@ (80023a8 <HAL_TIM_PWM_MspInit+0x248>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80022f2:	4b2d      	ldr	r3, [pc, #180]	@ (80023a8 <HAL_TIM_PWM_MspInit+0x248>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 80022f8:	482b      	ldr	r0, [pc, #172]	@ (80023a8 <HAL_TIM_PWM_MspInit+0x248>)
 80022fa:	f001 fd73 	bl	8003de4 <HAL_DMA_Init>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <HAL_TIM_PWM_MspInit+0x1a8>
      Error_Handler();
 8002304:	f7ff f821 	bl	800134a <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a27      	ldr	r2, [pc, #156]	@ (80023a8 <HAL_TIM_PWM_MspInit+0x248>)
 800230c:	631a      	str	r2, [r3, #48]	@ 0x30
 800230e:	4a26      	ldr	r2, [pc, #152]	@ (80023a8 <HAL_TIM_PWM_MspInit+0x248>)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8002314:	4b26      	ldr	r3, [pc, #152]	@ (80023b0 <HAL_TIM_PWM_MspInit+0x250>)
 8002316:	4a27      	ldr	r2, [pc, #156]	@ (80023b4 <HAL_TIM_PWM_MspInit+0x254>)
 8002318:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Request = DMA_REQUEST_TIM5_CH2;
 800231a:	4b25      	ldr	r3, [pc, #148]	@ (80023b0 <HAL_TIM_PWM_MspInit+0x250>)
 800231c:	2238      	movs	r2, #56	@ 0x38
 800231e:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002320:	4b23      	ldr	r3, [pc, #140]	@ (80023b0 <HAL_TIM_PWM_MspInit+0x250>)
 8002322:	2240      	movs	r2, #64	@ 0x40
 8002324:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002326:	4b22      	ldr	r3, [pc, #136]	@ (80023b0 <HAL_TIM_PWM_MspInit+0x250>)
 8002328:	2200      	movs	r2, #0
 800232a:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800232c:	4b20      	ldr	r3, [pc, #128]	@ (80023b0 <HAL_TIM_PWM_MspInit+0x250>)
 800232e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002332:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002334:	4b1e      	ldr	r3, [pc, #120]	@ (80023b0 <HAL_TIM_PWM_MspInit+0x250>)
 8002336:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800233a:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800233c:	4b1c      	ldr	r3, [pc, #112]	@ (80023b0 <HAL_TIM_PWM_MspInit+0x250>)
 800233e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002342:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8002344:	4b1a      	ldr	r3, [pc, #104]	@ (80023b0 <HAL_TIM_PWM_MspInit+0x250>)
 8002346:	2200      	movs	r2, #0
 8002348:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800234a:	4b19      	ldr	r3, [pc, #100]	@ (80023b0 <HAL_TIM_PWM_MspInit+0x250>)
 800234c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002350:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002352:	4b17      	ldr	r3, [pc, #92]	@ (80023b0 <HAL_TIM_PWM_MspInit+0x250>)
 8002354:	2204      	movs	r2, #4
 8002356:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002358:	4b15      	ldr	r3, [pc, #84]	@ (80023b0 <HAL_TIM_PWM_MspInit+0x250>)
 800235a:	2200      	movs	r2, #0
 800235c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 800235e:	4b14      	ldr	r3, [pc, #80]	@ (80023b0 <HAL_TIM_PWM_MspInit+0x250>)
 8002360:	2200      	movs	r2, #0
 8002362:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002364:	4b12      	ldr	r3, [pc, #72]	@ (80023b0 <HAL_TIM_PWM_MspInit+0x250>)
 8002366:	2200      	movs	r2, #0
 8002368:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 800236a:	4811      	ldr	r0, [pc, #68]	@ (80023b0 <HAL_TIM_PWM_MspInit+0x250>)
 800236c:	f001 fd3a 	bl	8003de4 <HAL_DMA_Init>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <HAL_TIM_PWM_MspInit+0x21a>
      Error_Handler();
 8002376:	f7fe ffe8 	bl	800134a <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a0c      	ldr	r2, [pc, #48]	@ (80023b0 <HAL_TIM_PWM_MspInit+0x250>)
 800237e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002380:	4a0b      	ldr	r2, [pc, #44]	@ (80023b0 <HAL_TIM_PWM_MspInit+0x250>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002386:	bf00      	nop
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	58024400 	.word	0x58024400
 8002394:	240007dc 	.word	0x240007dc
 8002398:	40020088 	.word	0x40020088
 800239c:	24000854 	.word	0x24000854
 80023a0:	40020028 	.word	0x40020028
 80023a4:	40000c00 	.word	0x40000c00
 80023a8:	240008cc 	.word	0x240008cc
 80023ac:	40020058 	.word	0x40020058
 80023b0:	24000944 	.word	0x24000944
 80023b4:	40020070 	.word	0x40020070

080023b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023b8:	b580      	push	{r7, lr}
 80023ba:	b084      	sub	sp, #16
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM15)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0e      	ldr	r2, [pc, #56]	@ (8002400 <HAL_TIM_Base_MspInit+0x48>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d116      	bne.n	80023f8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80023ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002404 <HAL_TIM_Base_MspInit+0x4c>)
 80023cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023d0:	4a0c      	ldr	r2, [pc, #48]	@ (8002404 <HAL_TIM_Base_MspInit+0x4c>)
 80023d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023d6:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80023da:	4b0a      	ldr	r3, [pc, #40]	@ (8002404 <HAL_TIM_Base_MspInit+0x4c>)
 80023dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80023e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023e4:	60fb      	str	r3, [r7, #12]
 80023e6:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 80023e8:	2200      	movs	r2, #0
 80023ea:	2100      	movs	r1, #0
 80023ec:	2074      	movs	r0, #116	@ 0x74
 80023ee:	f001 fcb0 	bl	8003d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80023f2:	2074      	movs	r0, #116	@ 0x74
 80023f4:	f001 fcc7 	bl	8003d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80023f8:	bf00      	nop
 80023fa:	3710      	adds	r7, #16
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40014000 	.word	0x40014000
 8002404:	58024400 	.word	0x58024400

08002408 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b08a      	sub	sp, #40	@ 0x28
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002428:	d11f      	bne.n	800246a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800242a:	4b24      	ldr	r3, [pc, #144]	@ (80024bc <HAL_TIM_MspPostInit+0xb4>)
 800242c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002430:	4a22      	ldr	r2, [pc, #136]	@ (80024bc <HAL_TIM_MspPostInit+0xb4>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800243a:	4b20      	ldr	r3, [pc, #128]	@ (80024bc <HAL_TIM_MspPostInit+0xb4>)
 800243c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002440:	f003 0301 	and.w	r3, r3, #1
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = M3_Pin|M2_Pin;
 8002448:	2305      	movs	r3, #5
 800244a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244c:	2302      	movs	r3, #2
 800244e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002450:	2300      	movs	r3, #0
 8002452:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002454:	2300      	movs	r3, #0
 8002456:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002458:	2301      	movs	r3, #1
 800245a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800245c:	f107 0314 	add.w	r3, r7, #20
 8002460:	4619      	mov	r1, r3
 8002462:	4817      	ldr	r0, [pc, #92]	@ (80024c0 <HAL_TIM_MspPostInit+0xb8>)
 8002464:	f003 fe06 	bl	8006074 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8002468:	e023      	b.n	80024b2 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM5)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a15      	ldr	r2, [pc, #84]	@ (80024c4 <HAL_TIM_MspPostInit+0xbc>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d11e      	bne.n	80024b2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002474:	4b11      	ldr	r3, [pc, #68]	@ (80024bc <HAL_TIM_MspPostInit+0xb4>)
 8002476:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800247a:	4a10      	ldr	r2, [pc, #64]	@ (80024bc <HAL_TIM_MspPostInit+0xb4>)
 800247c:	f043 0301 	orr.w	r3, r3, #1
 8002480:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002484:	4b0d      	ldr	r3, [pc, #52]	@ (80024bc <HAL_TIM_MspPostInit+0xb4>)
 8002486:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M4_Pin|M1_Pin;
 8002492:	230a      	movs	r3, #10
 8002494:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002496:	2302      	movs	r3, #2
 8002498:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800249a:	2300      	movs	r3, #0
 800249c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800249e:	2300      	movs	r3, #0
 80024a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80024a2:	2302      	movs	r3, #2
 80024a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024a6:	f107 0314 	add.w	r3, r7, #20
 80024aa:	4619      	mov	r1, r3
 80024ac:	4804      	ldr	r0, [pc, #16]	@ (80024c0 <HAL_TIM_MspPostInit+0xb8>)
 80024ae:	f003 fde1 	bl	8006074 <HAL_GPIO_Init>
}
 80024b2:	bf00      	nop
 80024b4:	3728      	adds	r7, #40	@ 0x28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	58024400 	.word	0x58024400
 80024c0:	58020000 	.word	0x58020000
 80024c4:	40000c00 	.word	0x40000c00

080024c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80024c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002500 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80024cc:	f7fe f8d8 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024d0:	480c      	ldr	r0, [pc, #48]	@ (8002504 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024d2:	490d      	ldr	r1, [pc, #52]	@ (8002508 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024d4:	4a0d      	ldr	r2, [pc, #52]	@ (800250c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024d8:	e002      	b.n	80024e0 <LoopCopyDataInit>

080024da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024de:	3304      	adds	r3, #4

080024e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024e4:	d3f9      	bcc.n	80024da <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002510 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024e8:	4c0a      	ldr	r4, [pc, #40]	@ (8002514 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024ec:	e001      	b.n	80024f2 <LoopFillZerobss>

080024ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024f0:	3204      	adds	r2, #4

080024f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024f4:	d3fb      	bcc.n	80024ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024f6:	f010 fa49 	bl	801298c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024fa:	f7fe fcf7 	bl	8000eec <main>
  bx  lr
 80024fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002500:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002504:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002508:	240002f4 	.word	0x240002f4
  ldr r2, =_sidata
 800250c:	08014e48 	.word	0x08014e48
  ldr r2, =_sbss
 8002510:	240002f4 	.word	0x240002f4
  ldr r4, =_ebss
 8002514:	24002790 	.word	0x24002790

08002518 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002518:	e7fe      	b.n	8002518 <ADC3_IRQHandler>
	...

0800251c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08c      	sub	sp, #48	@ 0x30
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002526:	2300      	movs	r3, #0
 8002528:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800252a:	79fb      	ldrb	r3, [r7, #7]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d009      	beq.n	8002544 <BSP_LED_Init+0x28>
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	2b01      	cmp	r3, #1
 8002534:	d006      	beq.n	8002544 <BSP_LED_Init+0x28>
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	2b02      	cmp	r3, #2
 800253a:	d003      	beq.n	8002544 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800253c:	f06f 0301 	mvn.w	r3, #1
 8002540:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002542:	e055      	b.n	80025f0 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d10f      	bne.n	800256a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800254a:	4b2c      	ldr	r3, [pc, #176]	@ (80025fc <BSP_LED_Init+0xe0>)
 800254c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002550:	4a2a      	ldr	r2, [pc, #168]	@ (80025fc <BSP_LED_Init+0xe0>)
 8002552:	f043 0302 	orr.w	r3, r3, #2
 8002556:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800255a:	4b28      	ldr	r3, [pc, #160]	@ (80025fc <BSP_LED_Init+0xe0>)
 800255c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	697b      	ldr	r3, [r7, #20]
 8002568:	e021      	b.n	80025ae <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800256a:	79fb      	ldrb	r3, [r7, #7]
 800256c:	2b01      	cmp	r3, #1
 800256e:	d10f      	bne.n	8002590 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8002570:	4b22      	ldr	r3, [pc, #136]	@ (80025fc <BSP_LED_Init+0xe0>)
 8002572:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002576:	4a21      	ldr	r2, [pc, #132]	@ (80025fc <BSP_LED_Init+0xe0>)
 8002578:	f043 0310 	orr.w	r3, r3, #16
 800257c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002580:	4b1e      	ldr	r3, [pc, #120]	@ (80025fc <BSP_LED_Init+0xe0>)
 8002582:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002586:	f003 0310 	and.w	r3, r3, #16
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	e00e      	b.n	80025ae <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8002590:	4b1a      	ldr	r3, [pc, #104]	@ (80025fc <BSP_LED_Init+0xe0>)
 8002592:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002596:	4a19      	ldr	r2, [pc, #100]	@ (80025fc <BSP_LED_Init+0xe0>)
 8002598:	f043 0302 	orr.w	r3, r3, #2
 800259c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025a0:	4b16      	ldr	r3, [pc, #88]	@ (80025fc <BSP_LED_Init+0xe0>)
 80025a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025a6:	f003 0302 	and.w	r3, r3, #2
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	4a13      	ldr	r2, [pc, #76]	@ (8002600 <BSP_LED_Init+0xe4>)
 80025b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025b6:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80025b8:	2301      	movs	r3, #1
 80025ba:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025c0:	2303      	movs	r3, #3
 80025c2:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80025c4:	79fb      	ldrb	r3, [r7, #7]
 80025c6:	4a0f      	ldr	r2, [pc, #60]	@ (8002604 <BSP_LED_Init+0xe8>)
 80025c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025cc:	f107 0218 	add.w	r2, r7, #24
 80025d0:	4611      	mov	r1, r2
 80025d2:	4618      	mov	r0, r3
 80025d4:	f003 fd4e 	bl	8006074 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	4a0a      	ldr	r2, [pc, #40]	@ (8002604 <BSP_LED_Init+0xe8>)
 80025dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	4a07      	ldr	r2, [pc, #28]	@ (8002600 <BSP_LED_Init+0xe4>)
 80025e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025e8:	2200      	movs	r2, #0
 80025ea:	4619      	mov	r1, r3
 80025ec:	f003 ff0a 	bl	8006404 <HAL_GPIO_WritePin>
  }

  return ret;
 80025f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3730      	adds	r7, #48	@ 0x30
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	58024400 	.word	0x58024400
 8002600:	08014a90 	.word	0x08014a90
 8002604:	24000018 	.word	0x24000018

08002608 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af00      	add	r7, sp, #0
 800260e:	4603      	mov	r3, r0
 8002610:	460a      	mov	r2, r1
 8002612:	71fb      	strb	r3, [r7, #7]
 8002614:	4613      	mov	r3, r2
 8002616:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002618:	4b2e      	ldr	r3, [pc, #184]	@ (80026d4 <BSP_PB_Init+0xcc>)
 800261a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800261e:	4a2d      	ldr	r2, [pc, #180]	@ (80026d4 <BSP_PB_Init+0xcc>)
 8002620:	f043 0304 	orr.w	r3, r3, #4
 8002624:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002628:	4b2a      	ldr	r3, [pc, #168]	@ (80026d4 <BSP_PB_Init+0xcc>)
 800262a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	60bb      	str	r3, [r7, #8]
 8002634:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8002636:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800263a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800263c:	2302      	movs	r3, #2
 800263e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002640:	2302      	movs	r3, #2
 8002642:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8002644:	79bb      	ldrb	r3, [r7, #6]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10c      	bne.n	8002664 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800264a:	2300      	movs	r3, #0
 800264c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800264e:	79fb      	ldrb	r3, [r7, #7]
 8002650:	4a21      	ldr	r2, [pc, #132]	@ (80026d8 <BSP_PB_Init+0xd0>)
 8002652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002656:	f107 020c 	add.w	r2, r7, #12
 800265a:	4611      	mov	r1, r2
 800265c:	4618      	mov	r0, r3
 800265e:	f003 fd09 	bl	8006074 <HAL_GPIO_Init>
 8002662:	e031      	b.n	80026c8 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8002664:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002668:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800266a:	79fb      	ldrb	r3, [r7, #7]
 800266c:	4a1a      	ldr	r2, [pc, #104]	@ (80026d8 <BSP_PB_Init+0xd0>)
 800266e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002672:	f107 020c 	add.w	r2, r7, #12
 8002676:	4611      	mov	r1, r2
 8002678:	4618      	mov	r0, r3
 800267a:	f003 fcfb 	bl	8006074 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	00db      	lsls	r3, r3, #3
 8002682:	4a16      	ldr	r2, [pc, #88]	@ (80026dc <BSP_PB_Init+0xd4>)
 8002684:	441a      	add	r2, r3
 8002686:	79fb      	ldrb	r3, [r7, #7]
 8002688:	4915      	ldr	r1, [pc, #84]	@ (80026e0 <BSP_PB_Init+0xd8>)
 800268a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800268e:	4619      	mov	r1, r3
 8002690:	4610      	mov	r0, r2
 8002692:	f003 fc9e 	bl	8005fd2 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002696:	79fb      	ldrb	r3, [r7, #7]
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	4a10      	ldr	r2, [pc, #64]	@ (80026dc <BSP_PB_Init+0xd4>)
 800269c:	1898      	adds	r0, r3, r2
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	4a10      	ldr	r2, [pc, #64]	@ (80026e4 <BSP_PB_Init+0xdc>)
 80026a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a6:	461a      	mov	r2, r3
 80026a8:	2100      	movs	r1, #0
 80026aa:	f003 fc73 	bl	8005f94 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80026ae:	2028      	movs	r0, #40	@ 0x28
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	4a0d      	ldr	r2, [pc, #52]	@ (80026e8 <BSP_PB_Init+0xe0>)
 80026b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026b8:	2200      	movs	r2, #0
 80026ba:	4619      	mov	r1, r3
 80026bc:	f001 fb49 	bl	8003d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80026c0:	2328      	movs	r3, #40	@ 0x28
 80026c2:	4618      	mov	r0, r3
 80026c4:	f001 fb5f 	bl	8003d86 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3720      	adds	r7, #32
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	58024400 	.word	0x58024400
 80026d8:	24000024 	.word	0x24000024
 80026dc:	240009bc 	.word	0x240009bc
 80026e0:	08014a98 	.word	0x08014a98
 80026e4:	24000028 	.word	0x24000028
 80026e8:	2400002c 	.word	0x2400002c

080026ec <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4a04      	ldr	r2, [pc, #16]	@ (800270c <BSP_PB_IRQHandler+0x20>)
 80026fc:	4413      	add	r3, r2
 80026fe:	4618      	mov	r0, r3
 8002700:	f003 fc7c 	bl	8005ffc <HAL_EXTI_IRQHandler>
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	240009bc 	.word	0x240009bc

08002710 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	4603      	mov	r3, r0
 8002718:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800271a:	bf00      	nop
 800271c:	370c      	adds	r7, #12
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
	...

08002728 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b084      	sub	sp, #16
 800272c:	af00      	add	r7, sp, #0
 800272e:	4603      	mov	r3, r0
 8002730:	6039      	str	r1, [r7, #0]
 8002732:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8002734:	2300      	movs	r3, #0
 8002736:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8002738:	79fb      	ldrb	r3, [r7, #7]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800273e:	f06f 0301 	mvn.w	r3, #1
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	e018      	b.n	8002778 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8002746:	79fb      	ldrb	r3, [r7, #7]
 8002748:	2294      	movs	r2, #148	@ 0x94
 800274a:	fb02 f303 	mul.w	r3, r2, r3
 800274e:	4a0d      	ldr	r2, [pc, #52]	@ (8002784 <BSP_COM_Init+0x5c>)
 8002750:	4413      	add	r3, r2
 8002752:	4618      	mov	r0, r3
 8002754:	f000 f86e 	bl	8002834 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	2294      	movs	r2, #148	@ 0x94
 800275c:	fb02 f303 	mul.w	r3, r2, r3
 8002760:	4a08      	ldr	r2, [pc, #32]	@ (8002784 <BSP_COM_Init+0x5c>)
 8002762:	4413      	add	r3, r2
 8002764:	6839      	ldr	r1, [r7, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f000 f80e 	bl	8002788 <MX_USART3_Init>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8002772:	f06f 0303 	mvn.w	r3, #3
 8002776:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002778:	68fb      	ldr	r3, [r7, #12]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	240009c4 	.word	0x240009c4

08002788 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8002792:	4b15      	ldr	r3, [pc, #84]	@ (80027e8 <MX_USART3_Init+0x60>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	220c      	movs	r2, #12
 80027a6:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	895b      	ldrh	r3, [r3, #10]
 80027ac:	461a      	mov	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	891b      	ldrh	r3, [r3, #8]
 80027be:	461a      	mov	r2, r3
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	899b      	ldrh	r3, [r3, #12]
 80027c8:	461a      	mov	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80027d4:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f00a fa14 	bl	800cc04 <HAL_UART_Init>
 80027dc:	4603      	mov	r3, r0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	24000014 	.word	0x24000014

080027ec <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80027f4:	4b09      	ldr	r3, [pc, #36]	@ (800281c <__io_putchar+0x30>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	461a      	mov	r2, r3
 80027fa:	2394      	movs	r3, #148	@ 0x94
 80027fc:	fb02 f303 	mul.w	r3, r2, r3
 8002800:	4a07      	ldr	r2, [pc, #28]	@ (8002820 <__io_putchar+0x34>)
 8002802:	1898      	adds	r0, r3, r2
 8002804:	1d39      	adds	r1, r7, #4
 8002806:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800280a:	2201      	movs	r2, #1
 800280c:	f00a fa54 	bl	800ccb8 <HAL_UART_Transmit>
  return ch;
 8002810:	687b      	ldr	r3, [r7, #4]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	24000a58 	.word	0x24000a58
 8002820:	240009c4 	.word	0x240009c4

08002824 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002828:	2000      	movs	r0, #0
 800282a:	f7ff ff71 	bl	8002710 <BSP_PB_Callback>
}
 800282e:	bf00      	nop
 8002830:	bd80      	pop	{r7, pc}
	...

08002834 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b08a      	sub	sp, #40	@ 0x28
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800283c:	4b27      	ldr	r3, [pc, #156]	@ (80028dc <COM1_MspInit+0xa8>)
 800283e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002842:	4a26      	ldr	r2, [pc, #152]	@ (80028dc <COM1_MspInit+0xa8>)
 8002844:	f043 0308 	orr.w	r3, r3, #8
 8002848:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800284c:	4b23      	ldr	r3, [pc, #140]	@ (80028dc <COM1_MspInit+0xa8>)
 800284e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	613b      	str	r3, [r7, #16]
 8002858:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800285a:	4b20      	ldr	r3, [pc, #128]	@ (80028dc <COM1_MspInit+0xa8>)
 800285c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002860:	4a1e      	ldr	r2, [pc, #120]	@ (80028dc <COM1_MspInit+0xa8>)
 8002862:	f043 0308 	orr.w	r3, r3, #8
 8002866:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800286a:	4b1c      	ldr	r3, [pc, #112]	@ (80028dc <COM1_MspInit+0xa8>)
 800286c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	60fb      	str	r3, [r7, #12]
 8002876:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002878:	4b18      	ldr	r3, [pc, #96]	@ (80028dc <COM1_MspInit+0xa8>)
 800287a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800287e:	4a17      	ldr	r2, [pc, #92]	@ (80028dc <COM1_MspInit+0xa8>)
 8002880:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002884:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002888:	4b14      	ldr	r3, [pc, #80]	@ (80028dc <COM1_MspInit+0xa8>)
 800288a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800288e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002892:	60bb      	str	r3, [r7, #8]
 8002894:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8002896:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800289a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800289c:	2302      	movs	r3, #2
 800289e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80028a0:	2302      	movs	r3, #2
 80028a2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80028a4:	2301      	movs	r3, #1
 80028a6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80028a8:	2307      	movs	r3, #7
 80028aa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80028ac:	f107 0314 	add.w	r3, r7, #20
 80028b0:	4619      	mov	r1, r3
 80028b2:	480b      	ldr	r0, [pc, #44]	@ (80028e0 <COM1_MspInit+0xac>)
 80028b4:	f003 fbde 	bl	8006074 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80028b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028bc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80028be:	2302      	movs	r3, #2
 80028c0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80028c2:	2307      	movs	r3, #7
 80028c4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80028c6:	f107 0314 	add.w	r3, r7, #20
 80028ca:	4619      	mov	r1, r3
 80028cc:	4804      	ldr	r0, [pc, #16]	@ (80028e0 <COM1_MspInit+0xac>)
 80028ce:	f003 fbd1 	bl	8006074 <HAL_GPIO_Init>
}
 80028d2:	bf00      	nop
 80028d4:	3728      	adds	r7, #40	@ 0x28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
 80028da:	bf00      	nop
 80028dc:	58024400 	.word	0x58024400
 80028e0:	58020c00 	.word	0x58020c00

080028e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028ea:	2003      	movs	r0, #3
 80028ec:	f001 fa26 	bl	8003d3c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80028f0:	f005 ff02 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 80028f4:	4602      	mov	r2, r0
 80028f6:	4b15      	ldr	r3, [pc, #84]	@ (800294c <HAL_Init+0x68>)
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	0a1b      	lsrs	r3, r3, #8
 80028fc:	f003 030f 	and.w	r3, r3, #15
 8002900:	4913      	ldr	r1, [pc, #76]	@ (8002950 <HAL_Init+0x6c>)
 8002902:	5ccb      	ldrb	r3, [r1, r3]
 8002904:	f003 031f 	and.w	r3, r3, #31
 8002908:	fa22 f303 	lsr.w	r3, r2, r3
 800290c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800290e:	4b0f      	ldr	r3, [pc, #60]	@ (800294c <HAL_Init+0x68>)
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	4a0e      	ldr	r2, [pc, #56]	@ (8002950 <HAL_Init+0x6c>)
 8002918:	5cd3      	ldrb	r3, [r2, r3]
 800291a:	f003 031f 	and.w	r3, r3, #31
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	fa22 f303 	lsr.w	r3, r2, r3
 8002924:	4a0b      	ldr	r2, [pc, #44]	@ (8002954 <HAL_Init+0x70>)
 8002926:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002928:	4a0b      	ldr	r2, [pc, #44]	@ (8002958 <HAL_Init+0x74>)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800292e:	2000      	movs	r0, #0
 8002930:	f000 f814 	bl	800295c <HAL_InitTick>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e002      	b.n	8002944 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800293e:	f7fe fd0b 	bl	8001358 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	3708      	adds	r7, #8
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	58024400 	.word	0x58024400
 8002950:	08014a80 	.word	0x08014a80
 8002954:	24000004 	.word	0x24000004
 8002958:	24000000 	.word	0x24000000

0800295c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002964:	4b15      	ldr	r3, [pc, #84]	@ (80029bc <HAL_InitTick+0x60>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e021      	b.n	80029b4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002970:	4b13      	ldr	r3, [pc, #76]	@ (80029c0 <HAL_InitTick+0x64>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	4b11      	ldr	r3, [pc, #68]	@ (80029bc <HAL_InitTick+0x60>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	4619      	mov	r1, r3
 800297a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800297e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002982:	fbb2 f3f3 	udiv	r3, r2, r3
 8002986:	4618      	mov	r0, r3
 8002988:	f001 fa0b 	bl	8003da2 <HAL_SYSTICK_Config>
 800298c:	4603      	mov	r3, r0
 800298e:	2b00      	cmp	r3, #0
 8002990:	d001      	beq.n	8002996 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e00e      	b.n	80029b4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2b0f      	cmp	r3, #15
 800299a:	d80a      	bhi.n	80029b2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800299c:	2200      	movs	r2, #0
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	f04f 30ff 	mov.w	r0, #4294967295
 80029a4:	f001 f9d5 	bl	8003d52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029a8:	4a06      	ldr	r2, [pc, #24]	@ (80029c4 <HAL_InitTick+0x68>)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
 80029b0:	e000      	b.n	80029b4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	3708      	adds	r7, #8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	24000034 	.word	0x24000034
 80029c0:	24000000 	.word	0x24000000
 80029c4:	24000030 	.word	0x24000030

080029c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80029cc:	4b06      	ldr	r3, [pc, #24]	@ (80029e8 <HAL_IncTick+0x20>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	461a      	mov	r2, r3
 80029d2:	4b06      	ldr	r3, [pc, #24]	@ (80029ec <HAL_IncTick+0x24>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4413      	add	r3, r2
 80029d8:	4a04      	ldr	r2, [pc, #16]	@ (80029ec <HAL_IncTick+0x24>)
 80029da:	6013      	str	r3, [r2, #0]
}
 80029dc:	bf00      	nop
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	24000034 	.word	0x24000034
 80029ec:	24000a5c 	.word	0x24000a5c

080029f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  return uwTick;
 80029f4:	4b03      	ldr	r3, [pc, #12]	@ (8002a04 <HAL_GetTick+0x14>)
 80029f6:	681b      	ldr	r3, [r3, #0]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	24000a5c 	.word	0x24000a5c

08002a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a10:	f7ff ffee 	bl	80029f0 <HAL_GetTick>
 8002a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a20:	d005      	beq.n	8002a2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a22:	4b0a      	ldr	r3, [pc, #40]	@ (8002a4c <HAL_Delay+0x44>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a2e:	bf00      	nop
 8002a30:	f7ff ffde 	bl	80029f0 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d8f7      	bhi.n	8002a30 <HAL_Delay+0x28>
  {
  }
}
 8002a40:	bf00      	nop
 8002a42:	bf00      	nop
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	24000034 	.word	0x24000034

08002a50 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002a54:	4b03      	ldr	r3, [pc, #12]	@ (8002a64 <HAL_GetREVID+0x14>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	0c1b      	lsrs	r3, r3, #16
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr
 8002a64:	5c001000 	.word	0x5c001000

08002a68 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	609a      	str	r2, [r3, #8]
}
 8002a82:	bf00      	nop
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
 8002a96:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
}
 8002aa8:	bf00      	nop
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
 8002adc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	3360      	adds	r3, #96	@ 0x60
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	430b      	orrs	r3, r1
 8002afe:	431a      	orrs	r2, r3
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002b04:	bf00      	nop
 8002b06:	371c      	adds	r7, #28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	f003 031f 	and.w	r3, r3, #31
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b30:	431a      	orrs	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	611a      	str	r2, [r3, #16]
}
 8002b36:	bf00      	nop
 8002b38:	3714      	adds	r7, #20
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b087      	sub	sp, #28
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	60f8      	str	r0, [r7, #12]
 8002b4a:	60b9      	str	r1, [r7, #8]
 8002b4c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	3360      	adds	r3, #96	@ 0x60
 8002b52:	461a      	mov	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	431a      	orrs	r2, r3
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	601a      	str	r2, [r3, #0]
  }
}
 8002b6c:	bf00      	nop
 8002b6e:	371c      	adds	r7, #28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	3330      	adds	r3, #48	@ 0x30
 8002b88:	461a      	mov	r2, r3
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	0a1b      	lsrs	r3, r3, #8
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	f003 030c 	and.w	r3, r3, #12
 8002b94:	4413      	add	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	f003 031f 	and.w	r3, r3, #31
 8002ba2:	211f      	movs	r1, #31
 8002ba4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	401a      	ands	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	0e9b      	lsrs	r3, r3, #26
 8002bb0:	f003 011f 	and.w	r1, r3, #31
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f003 031f 	and.w	r3, r3, #31
 8002bba:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002bc4:	bf00      	nop
 8002bc6:	371c      	adds	r7, #28
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b087      	sub	sp, #28
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	3314      	adds	r3, #20
 8002be0:	461a      	mov	r2, r3
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	0e5b      	lsrs	r3, r3, #25
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	f003 0304 	and.w	r3, r3, #4
 8002bec:	4413      	add	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	0d1b      	lsrs	r3, r3, #20
 8002bf8:	f003 031f 	and.w	r3, r3, #31
 8002bfc:	2107      	movs	r1, #7
 8002bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	401a      	ands	r2, r3
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	0d1b      	lsrs	r3, r3, #20
 8002c0a:	f003 031f 	and.w	r3, r3, #31
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	fa01 f303 	lsl.w	r3, r1, r3
 8002c14:	431a      	orrs	r2, r3
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002c1a:	bf00      	nop
 8002c1c:	371c      	adds	r7, #28
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
	...

08002c28 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c40:	43db      	mvns	r3, r3
 8002c42:	401a      	ands	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f003 0318 	and.w	r3, r3, #24
 8002c4a:	4908      	ldr	r1, [pc, #32]	@ (8002c6c <LL_ADC_SetChannelSingleDiff+0x44>)
 8002c4c:	40d9      	lsrs	r1, r3
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	400b      	ands	r3, r1
 8002c52:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002c56:	431a      	orrs	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002c5e:	bf00      	nop
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
 8002c6a:	bf00      	nop
 8002c6c:	000fffff 	.word	0x000fffff

08002c70 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	4b04      	ldr	r3, [pc, #16]	@ (8002c90 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6093      	str	r3, [r2, #8]
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr
 8002c90:	5fffffc0 	.word	0x5fffffc0

08002c94 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ca4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ca8:	d101      	bne.n	8002cae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689a      	ldr	r2, [r3, #8]
 8002cc8:	4b05      	ldr	r3, [pc, #20]	@ (8002ce0 <LL_ADC_EnableInternalRegulator+0x24>)
 8002cca:	4013      	ands	r3, r2
 8002ccc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	6fffffc0 	.word	0x6fffffc0

08002ce4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002cf8:	d101      	bne.n	8002cfe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <LL_ADC_IsEnabled+0x18>
 8002d20:	2301      	movs	r3, #1
 8002d22:	e000      	b.n	8002d26 <LL_ADC_IsEnabled+0x1a>
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d101      	bne.n	8002d4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d101      	bne.n	8002d70 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
	...

08002d80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d80:	b590      	push	{r4, r7, lr}
 8002d82:	b089      	sub	sp, #36	@ 0x24
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e18f      	b.n	80030ba <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d109      	bne.n	8002dbc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f7fd fd79 	bl	80008a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff ff67 	bl	8002c94 <LL_ADC_IsDeepPowerDownEnabled>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d004      	beq.n	8002dd6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff ff4d 	bl	8002c70 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff ff82 	bl	8002ce4 <LL_ADC_IsInternalRegulatorEnabled>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d114      	bne.n	8002e10 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff ff66 	bl	8002cbc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002df0:	4b87      	ldr	r3, [pc, #540]	@ (8003010 <HAL_ADC_Init+0x290>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	099b      	lsrs	r3, r3, #6
 8002df6:	4a87      	ldr	r2, [pc, #540]	@ (8003014 <HAL_ADC_Init+0x294>)
 8002df8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfc:	099b      	lsrs	r3, r3, #6
 8002dfe:	3301      	adds	r3, #1
 8002e00:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e02:	e002      	b.n	8002e0a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	3b01      	subs	r3, #1
 8002e08:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1f9      	bne.n	8002e04 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff ff65 	bl	8002ce4 <LL_ADC_IsInternalRegulatorEnabled>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10d      	bne.n	8002e3c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e24:	f043 0210 	orr.w	r2, r3, #16
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e30:	f043 0201 	orr.w	r2, r3, #1
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff ff76 	bl	8002d32 <LL_ADC_REG_IsConversionOngoing>
 8002e46:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e4c:	f003 0310 	and.w	r3, r3, #16
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	f040 8129 	bne.w	80030a8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f040 8125 	bne.w	80030a8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e62:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002e66:	f043 0202 	orr.w	r2, r3, #2
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff ff4a 	bl	8002d0c <LL_ADC_IsEnabled>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d136      	bne.n	8002eec <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a65      	ldr	r2, [pc, #404]	@ (8003018 <HAL_ADC_Init+0x298>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d004      	beq.n	8002e92 <HAL_ADC_Init+0x112>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a63      	ldr	r2, [pc, #396]	@ (800301c <HAL_ADC_Init+0x29c>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d10e      	bne.n	8002eb0 <HAL_ADC_Init+0x130>
 8002e92:	4861      	ldr	r0, [pc, #388]	@ (8003018 <HAL_ADC_Init+0x298>)
 8002e94:	f7ff ff3a 	bl	8002d0c <LL_ADC_IsEnabled>
 8002e98:	4604      	mov	r4, r0
 8002e9a:	4860      	ldr	r0, [pc, #384]	@ (800301c <HAL_ADC_Init+0x29c>)
 8002e9c:	f7ff ff36 	bl	8002d0c <LL_ADC_IsEnabled>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	4323      	orrs	r3, r4
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bf0c      	ite	eq
 8002ea8:	2301      	moveq	r3, #1
 8002eaa:	2300      	movne	r3, #0
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	e008      	b.n	8002ec2 <HAL_ADC_Init+0x142>
 8002eb0:	485b      	ldr	r0, [pc, #364]	@ (8003020 <HAL_ADC_Init+0x2a0>)
 8002eb2:	f7ff ff2b 	bl	8002d0c <LL_ADC_IsEnabled>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	bf0c      	ite	eq
 8002ebc:	2301      	moveq	r3, #1
 8002ebe:	2300      	movne	r3, #0
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d012      	beq.n	8002eec <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a53      	ldr	r2, [pc, #332]	@ (8003018 <HAL_ADC_Init+0x298>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d004      	beq.n	8002eda <HAL_ADC_Init+0x15a>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a51      	ldr	r2, [pc, #324]	@ (800301c <HAL_ADC_Init+0x29c>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d101      	bne.n	8002ede <HAL_ADC_Init+0x15e>
 8002eda:	4a52      	ldr	r2, [pc, #328]	@ (8003024 <HAL_ADC_Init+0x2a4>)
 8002edc:	e000      	b.n	8002ee0 <HAL_ADC_Init+0x160>
 8002ede:	4a52      	ldr	r2, [pc, #328]	@ (8003028 <HAL_ADC_Init+0x2a8>)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4610      	mov	r0, r2
 8002ee8:	f7ff fdbe 	bl	8002a68 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002eec:	f7ff fdb0 	bl	8002a50 <HAL_GetREVID>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d914      	bls.n	8002f24 <HAL_ADC_Init+0x1a4>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	2b10      	cmp	r3, #16
 8002f00:	d110      	bne.n	8002f24 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	7d5b      	ldrb	r3, [r3, #21]
 8002f06:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f0c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f12:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	7f1b      	ldrb	r3, [r3, #28]
 8002f18:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002f1a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f1c:	f043 030c 	orr.w	r3, r3, #12
 8002f20:	61bb      	str	r3, [r7, #24]
 8002f22:	e00d      	b.n	8002f40 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	7d5b      	ldrb	r3, [r3, #21]
 8002f28:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f2e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f34:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	7f1b      	ldrb	r3, [r3, #28]
 8002f3a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	7f1b      	ldrb	r3, [r3, #28]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d106      	bne.n	8002f56 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	045b      	lsls	r3, r3, #17
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d009      	beq.n	8002f72 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f62:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	4b2c      	ldr	r3, [pc, #176]	@ (800302c <HAL_ADC_Init+0x2ac>)
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	687a      	ldr	r2, [r7, #4]
 8002f7e:	6812      	ldr	r2, [r2, #0]
 8002f80:	69b9      	ldr	r1, [r7, #24]
 8002f82:	430b      	orrs	r3, r1
 8002f84:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f7ff fed1 	bl	8002d32 <LL_ADC_REG_IsConversionOngoing>
 8002f90:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7ff fede 	bl	8002d58 <LL_ADC_INJ_IsConversionOngoing>
 8002f9c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d15f      	bne.n	8003064 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d15c      	bne.n	8003064 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	7d1b      	ldrb	r3, [r3, #20]
 8002fae:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	4b1c      	ldr	r3, [pc, #112]	@ (8003030 <HAL_ADC_Init+0x2b0>)
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	69b9      	ldr	r1, [r7, #24]
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d130      	bne.n	8003038 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fda:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	691a      	ldr	r2, [r3, #16]
 8002fe2:	4b14      	ldr	r3, [pc, #80]	@ (8003034 <HAL_ADC_Init+0x2b4>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002fea:	3a01      	subs	r2, #1
 8002fec:	0411      	lsls	r1, r2, #16
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ff2:	4311      	orrs	r1, r2
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002ff8:	4311      	orrs	r1, r2
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ffe:	430a      	orrs	r2, r1
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	611a      	str	r2, [r3, #16]
 800300c:	e01c      	b.n	8003048 <HAL_ADC_Init+0x2c8>
 800300e:	bf00      	nop
 8003010:	24000000 	.word	0x24000000
 8003014:	053e2d63 	.word	0x053e2d63
 8003018:	40022000 	.word	0x40022000
 800301c:	40022100 	.word	0x40022100
 8003020:	58026000 	.word	0x58026000
 8003024:	40022300 	.word	0x40022300
 8003028:	58026300 	.word	0x58026300
 800302c:	fff0c003 	.word	0xfff0c003
 8003030:	ffffbffc 	.word	0xffffbffc
 8003034:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	691a      	ldr	r2, [r3, #16]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 0201 	bic.w	r2, r2, #1
 8003046:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 fb8c 	bl	800377c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d10c      	bne.n	8003086 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003072:	f023 010f 	bic.w	r1, r3, #15
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	699b      	ldr	r3, [r3, #24]
 800307a:	1e5a      	subs	r2, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	430a      	orrs	r2, r1
 8003082:	631a      	str	r2, [r3, #48]	@ 0x30
 8003084:	e007      	b.n	8003096 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 020f 	bic.w	r2, r2, #15
 8003094:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800309a:	f023 0303 	bic.w	r3, r3, #3
 800309e:	f043 0201 	orr.w	r2, r3, #1
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	655a      	str	r2, [r3, #84]	@ 0x54
 80030a6:	e007      	b.n	80030b8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ac:	f043 0210 	orr.w	r2, r3, #16
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80030b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3724      	adds	r7, #36	@ 0x24
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd90      	pop	{r4, r7, pc}
 80030c2:	bf00      	nop

080030c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80030c4:	b590      	push	{r4, r7, lr}
 80030c6:	b0a1      	sub	sp, #132	@ 0x84
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030ce:	2300      	movs	r3, #0
 80030d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	4a65      	ldr	r2, [pc, #404]	@ (8003274 <HAL_ADC_ConfigChannel+0x1b0>)
 80030de:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d101      	bne.n	80030ee <HAL_ADC_ConfigChannel+0x2a>
 80030ea:	2302      	movs	r3, #2
 80030ec:	e32e      	b.n	800374c <HAL_ADC_ConfigChannel+0x688>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2201      	movs	r2, #1
 80030f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f7ff fe19 	bl	8002d32 <LL_ADC_REG_IsConversionOngoing>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	f040 8313 	bne.w	800372e <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	db2c      	blt.n	800316a <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003118:	2b00      	cmp	r3, #0
 800311a:	d108      	bne.n	800312e <HAL_ADC_ConfigChannel+0x6a>
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	0e9b      	lsrs	r3, r3, #26
 8003122:	f003 031f 	and.w	r3, r3, #31
 8003126:	2201      	movs	r2, #1
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	e016      	b.n	800315c <HAL_ADC_ConfigChannel+0x98>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003134:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003136:	fa93 f3a3 	rbit	r3, r3
 800313a:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800313c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800313e:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003140:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8003146:	2320      	movs	r3, #32
 8003148:	e003      	b.n	8003152 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800314a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800314c:	fab3 f383 	clz	r3, r3
 8003150:	b2db      	uxtb	r3, r3
 8003152:	f003 031f 	and.w	r3, r3, #31
 8003156:	2201      	movs	r2, #1
 8003158:	fa02 f303 	lsl.w	r3, r2, r3
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	6812      	ldr	r2, [r2, #0]
 8003160:	69d1      	ldr	r1, [r2, #28]
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	6812      	ldr	r2, [r2, #0]
 8003166:	430b      	orrs	r3, r1
 8003168:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6818      	ldr	r0, [r3, #0]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	6859      	ldr	r1, [r3, #4]
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	461a      	mov	r2, r3
 8003178:	f7ff fcfe 	bl	8002b78 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff fdd6 	bl	8002d32 <LL_ADC_REG_IsConversionOngoing>
 8003186:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f7ff fde3 	bl	8002d58 <LL_ADC_INJ_IsConversionOngoing>
 8003192:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003194:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003196:	2b00      	cmp	r3, #0
 8003198:	f040 80b8 	bne.w	800330c <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800319c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f040 80b4 	bne.w	800330c <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6818      	ldr	r0, [r3, #0]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	6819      	ldr	r1, [r3, #0]
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	461a      	mov	r2, r3
 80031b2:	f7ff fd0d 	bl	8002bd0 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80031b6:	4b30      	ldr	r3, [pc, #192]	@ (8003278 <HAL_ADC_ConfigChannel+0x1b4>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80031be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031c2:	d10b      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x118>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	695a      	ldr	r2, [r3, #20]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	089b      	lsrs	r3, r3, #2
 80031d0:	f003 0307 	and.w	r3, r3, #7
 80031d4:	005b      	lsls	r3, r3, #1
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	e01d      	b.n	8003218 <HAL_ADC_ConfigChannel+0x154>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	f003 0310 	and.w	r3, r3, #16
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d10b      	bne.n	8003202 <HAL_ADC_ConfigChannel+0x13e>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	695a      	ldr	r2, [r3, #20]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	089b      	lsrs	r3, r3, #2
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	e00a      	b.n	8003218 <HAL_ADC_ConfigChannel+0x154>
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	695a      	ldr	r2, [r3, #20]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	089b      	lsrs	r3, r3, #2
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	2b04      	cmp	r3, #4
 8003220:	d02c      	beq.n	800327c <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6818      	ldr	r0, [r3, #0]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	6919      	ldr	r1, [r3, #16]
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003230:	f7ff fc4e 	bl	8002ad0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	6919      	ldr	r1, [r3, #16]
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	7e5b      	ldrb	r3, [r3, #25]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d102      	bne.n	800324a <HAL_ADC_ConfigChannel+0x186>
 8003244:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003248:	e000      	b.n	800324c <HAL_ADC_ConfigChannel+0x188>
 800324a:	2300      	movs	r3, #0
 800324c:	461a      	mov	r2, r3
 800324e:	f7ff fc78 	bl	8002b42 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	6919      	ldr	r1, [r3, #16]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	7e1b      	ldrb	r3, [r3, #24]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d102      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x1a4>
 8003262:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003266:	e000      	b.n	800326a <HAL_ADC_ConfigChannel+0x1a6>
 8003268:	2300      	movs	r3, #0
 800326a:	461a      	mov	r2, r3
 800326c:	f7ff fc50 	bl	8002b10 <LL_ADC_SetDataRightShift>
 8003270:	e04c      	b.n	800330c <HAL_ADC_ConfigChannel+0x248>
 8003272:	bf00      	nop
 8003274:	47ff0000 	.word	0x47ff0000
 8003278:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003282:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	069b      	lsls	r3, r3, #26
 800328c:	429a      	cmp	r2, r3
 800328e:	d107      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800329e:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	069b      	lsls	r3, r3, #26
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d107      	bne.n	80032c4 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80032c2:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	069b      	lsls	r3, r3, #26
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d107      	bne.n	80032e8 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80032e6:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032ee:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	069b      	lsls	r3, r3, #26
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d107      	bne.n	800330c <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800330a:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff fcfb 	bl	8002d0c <LL_ADC_IsEnabled>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	f040 8211 	bne.w	8003740 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6818      	ldr	r0, [r3, #0]
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	6819      	ldr	r1, [r3, #0]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	461a      	mov	r2, r3
 800332c:	f7ff fc7c 	bl	8002c28 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	4aa1      	ldr	r2, [pc, #644]	@ (80035bc <HAL_ADC_ConfigChannel+0x4f8>)
 8003336:	4293      	cmp	r3, r2
 8003338:	f040 812e 	bne.w	8003598 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003348:	2b00      	cmp	r3, #0
 800334a:	d10b      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x2a0>
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	0e9b      	lsrs	r3, r3, #26
 8003352:	3301      	adds	r3, #1
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	2b09      	cmp	r3, #9
 800335a:	bf94      	ite	ls
 800335c:	2301      	movls	r3, #1
 800335e:	2300      	movhi	r3, #0
 8003360:	b2db      	uxtb	r3, r3
 8003362:	e019      	b.n	8003398 <HAL_ADC_ConfigChannel+0x2d4>
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800336c:	fa93 f3a3 	rbit	r3, r3
 8003370:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 8003372:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003374:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003376:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 800337c:	2320      	movs	r3, #32
 800337e:	e003      	b.n	8003388 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8003380:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003382:	fab3 f383 	clz	r3, r3
 8003386:	b2db      	uxtb	r3, r3
 8003388:	3301      	adds	r3, #1
 800338a:	f003 031f 	and.w	r3, r3, #31
 800338e:	2b09      	cmp	r3, #9
 8003390:	bf94      	ite	ls
 8003392:	2301      	movls	r3, #1
 8003394:	2300      	movhi	r3, #0
 8003396:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003398:	2b00      	cmp	r3, #0
 800339a:	d079      	beq.n	8003490 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d107      	bne.n	80033b8 <HAL_ADC_ConfigChannel+0x2f4>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	0e9b      	lsrs	r3, r3, #26
 80033ae:	3301      	adds	r3, #1
 80033b0:	069b      	lsls	r3, r3, #26
 80033b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033b6:	e015      	b.n	80033e4 <HAL_ADC_ConfigChannel+0x320>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033c0:	fa93 f3a3 	rbit	r3, r3
 80033c4:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80033c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033c8:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80033ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d101      	bne.n	80033d4 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80033d0:	2320      	movs	r3, #32
 80033d2:	e003      	b.n	80033dc <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80033d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033d6:	fab3 f383 	clz	r3, r3
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	3301      	adds	r3, #1
 80033de:	069b      	lsls	r3, r3, #26
 80033e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d109      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x340>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	0e9b      	lsrs	r3, r3, #26
 80033f6:	3301      	adds	r3, #1
 80033f8:	f003 031f 	and.w	r3, r3, #31
 80033fc:	2101      	movs	r1, #1
 80033fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003402:	e017      	b.n	8003434 <HAL_ADC_ConfigChannel+0x370>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800340a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800340c:	fa93 f3a3 	rbit	r3, r3
 8003410:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 8003412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003414:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003416:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 800341c:	2320      	movs	r3, #32
 800341e:	e003      	b.n	8003428 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8003420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003422:	fab3 f383 	clz	r3, r3
 8003426:	b2db      	uxtb	r3, r3
 8003428:	3301      	adds	r3, #1
 800342a:	f003 031f 	and.w	r3, r3, #31
 800342e:	2101      	movs	r1, #1
 8003430:	fa01 f303 	lsl.w	r3, r1, r3
 8003434:	ea42 0103 	orr.w	r1, r2, r3
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003440:	2b00      	cmp	r3, #0
 8003442:	d10a      	bne.n	800345a <HAL_ADC_ConfigChannel+0x396>
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	0e9b      	lsrs	r3, r3, #26
 800344a:	3301      	adds	r3, #1
 800344c:	f003 021f 	and.w	r2, r3, #31
 8003450:	4613      	mov	r3, r2
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	4413      	add	r3, r2
 8003456:	051b      	lsls	r3, r3, #20
 8003458:	e018      	b.n	800348c <HAL_ADC_ConfigChannel+0x3c8>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003462:	fa93 f3a3 	rbit	r3, r3
 8003466:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800346a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800346c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8003472:	2320      	movs	r3, #32
 8003474:	e003      	b.n	800347e <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003478:	fab3 f383 	clz	r3, r3
 800347c:	b2db      	uxtb	r3, r3
 800347e:	3301      	adds	r3, #1
 8003480:	f003 021f 	and.w	r2, r3, #31
 8003484:	4613      	mov	r3, r2
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	4413      	add	r3, r2
 800348a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800348c:	430b      	orrs	r3, r1
 800348e:	e07e      	b.n	800358e <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003498:	2b00      	cmp	r3, #0
 800349a:	d107      	bne.n	80034ac <HAL_ADC_ConfigChannel+0x3e8>
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	0e9b      	lsrs	r3, r3, #26
 80034a2:	3301      	adds	r3, #1
 80034a4:	069b      	lsls	r3, r3, #26
 80034a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034aa:	e015      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x414>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b4:	fa93 f3a3 	rbit	r3, r3
 80034b8:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80034ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80034be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80034c4:	2320      	movs	r3, #32
 80034c6:	e003      	b.n	80034d0 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80034c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ca:	fab3 f383 	clz	r3, r3
 80034ce:	b2db      	uxtb	r3, r3
 80034d0:	3301      	adds	r3, #1
 80034d2:	069b      	lsls	r3, r3, #26
 80034d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d109      	bne.n	80034f8 <HAL_ADC_ConfigChannel+0x434>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	0e9b      	lsrs	r3, r3, #26
 80034ea:	3301      	adds	r3, #1
 80034ec:	f003 031f 	and.w	r3, r3, #31
 80034f0:	2101      	movs	r1, #1
 80034f2:	fa01 f303 	lsl.w	r3, r1, r3
 80034f6:	e017      	b.n	8003528 <HAL_ADC_ConfigChannel+0x464>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	fa93 f3a3 	rbit	r3, r3
 8003504:	61bb      	str	r3, [r7, #24]
  return result;
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8003510:	2320      	movs	r3, #32
 8003512:	e003      	b.n	800351c <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	fab3 f383 	clz	r3, r3
 800351a:	b2db      	uxtb	r3, r3
 800351c:	3301      	adds	r3, #1
 800351e:	f003 031f 	and.w	r3, r3, #31
 8003522:	2101      	movs	r1, #1
 8003524:	fa01 f303 	lsl.w	r3, r1, r3
 8003528:	ea42 0103 	orr.w	r1, r2, r3
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003534:	2b00      	cmp	r3, #0
 8003536:	d10d      	bne.n	8003554 <HAL_ADC_ConfigChannel+0x490>
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	0e9b      	lsrs	r3, r3, #26
 800353e:	3301      	adds	r3, #1
 8003540:	f003 021f 	and.w	r2, r3, #31
 8003544:	4613      	mov	r3, r2
 8003546:	005b      	lsls	r3, r3, #1
 8003548:	4413      	add	r3, r2
 800354a:	3b1e      	subs	r3, #30
 800354c:	051b      	lsls	r3, r3, #20
 800354e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003552:	e01b      	b.n	800358c <HAL_ADC_ConfigChannel+0x4c8>
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	fa93 f3a3 	rbit	r3, r3
 8003560:	60fb      	str	r3, [r7, #12]
  return result;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 800356c:	2320      	movs	r3, #32
 800356e:	e003      	b.n	8003578 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	fab3 f383 	clz	r3, r3
 8003576:	b2db      	uxtb	r3, r3
 8003578:	3301      	adds	r3, #1
 800357a:	f003 021f 	and.w	r2, r3, #31
 800357e:	4613      	mov	r3, r2
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	4413      	add	r3, r2
 8003584:	3b1e      	subs	r3, #30
 8003586:	051b      	lsls	r3, r3, #20
 8003588:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800358c:	430b      	orrs	r3, r1
 800358e:	683a      	ldr	r2, [r7, #0]
 8003590:	6892      	ldr	r2, [r2, #8]
 8003592:	4619      	mov	r1, r3
 8003594:	f7ff fb1c 	bl	8002bd0 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b00      	cmp	r3, #0
 800359e:	f280 80cf 	bge.w	8003740 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a06      	ldr	r2, [pc, #24]	@ (80035c0 <HAL_ADC_ConfigChannel+0x4fc>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d004      	beq.n	80035b6 <HAL_ADC_ConfigChannel+0x4f2>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a04      	ldr	r2, [pc, #16]	@ (80035c4 <HAL_ADC_ConfigChannel+0x500>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d10a      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x508>
 80035b6:	4b04      	ldr	r3, [pc, #16]	@ (80035c8 <HAL_ADC_ConfigChannel+0x504>)
 80035b8:	e009      	b.n	80035ce <HAL_ADC_ConfigChannel+0x50a>
 80035ba:	bf00      	nop
 80035bc:	47ff0000 	.word	0x47ff0000
 80035c0:	40022000 	.word	0x40022000
 80035c4:	40022100 	.word	0x40022100
 80035c8:	40022300 	.word	0x40022300
 80035cc:	4b61      	ldr	r3, [pc, #388]	@ (8003754 <HAL_ADC_ConfigChannel+0x690>)
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7ff fa70 	bl	8002ab4 <LL_ADC_GetCommonPathInternalCh>
 80035d4:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a5f      	ldr	r2, [pc, #380]	@ (8003758 <HAL_ADC_ConfigChannel+0x694>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d004      	beq.n	80035ea <HAL_ADC_ConfigChannel+0x526>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a5d      	ldr	r2, [pc, #372]	@ (800375c <HAL_ADC_ConfigChannel+0x698>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d10e      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x544>
 80035ea:	485b      	ldr	r0, [pc, #364]	@ (8003758 <HAL_ADC_ConfigChannel+0x694>)
 80035ec:	f7ff fb8e 	bl	8002d0c <LL_ADC_IsEnabled>
 80035f0:	4604      	mov	r4, r0
 80035f2:	485a      	ldr	r0, [pc, #360]	@ (800375c <HAL_ADC_ConfigChannel+0x698>)
 80035f4:	f7ff fb8a 	bl	8002d0c <LL_ADC_IsEnabled>
 80035f8:	4603      	mov	r3, r0
 80035fa:	4323      	orrs	r3, r4
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	bf0c      	ite	eq
 8003600:	2301      	moveq	r3, #1
 8003602:	2300      	movne	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	e008      	b.n	800361a <HAL_ADC_ConfigChannel+0x556>
 8003608:	4855      	ldr	r0, [pc, #340]	@ (8003760 <HAL_ADC_ConfigChannel+0x69c>)
 800360a:	f7ff fb7f 	bl	8002d0c <LL_ADC_IsEnabled>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	bf0c      	ite	eq
 8003614:	2301      	moveq	r3, #1
 8003616:	2300      	movne	r3, #0
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b00      	cmp	r3, #0
 800361c:	d07d      	beq.n	800371a <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a50      	ldr	r2, [pc, #320]	@ (8003764 <HAL_ADC_ConfigChannel+0x6a0>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d130      	bne.n	800368a <HAL_ADC_ConfigChannel+0x5c6>
 8003628:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800362a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d12b      	bne.n	800368a <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a4a      	ldr	r2, [pc, #296]	@ (8003760 <HAL_ADC_ConfigChannel+0x69c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	f040 8081 	bne.w	8003740 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a45      	ldr	r2, [pc, #276]	@ (8003758 <HAL_ADC_ConfigChannel+0x694>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d004      	beq.n	8003652 <HAL_ADC_ConfigChannel+0x58e>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a43      	ldr	r2, [pc, #268]	@ (800375c <HAL_ADC_ConfigChannel+0x698>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d101      	bne.n	8003656 <HAL_ADC_ConfigChannel+0x592>
 8003652:	4a45      	ldr	r2, [pc, #276]	@ (8003768 <HAL_ADC_ConfigChannel+0x6a4>)
 8003654:	e000      	b.n	8003658 <HAL_ADC_ConfigChannel+0x594>
 8003656:	4a3f      	ldr	r2, [pc, #252]	@ (8003754 <HAL_ADC_ConfigChannel+0x690>)
 8003658:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800365a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800365e:	4619      	mov	r1, r3
 8003660:	4610      	mov	r0, r2
 8003662:	f7ff fa14 	bl	8002a8e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003666:	4b41      	ldr	r3, [pc, #260]	@ (800376c <HAL_ADC_ConfigChannel+0x6a8>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	099b      	lsrs	r3, r3, #6
 800366c:	4a40      	ldr	r2, [pc, #256]	@ (8003770 <HAL_ADC_ConfigChannel+0x6ac>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	099b      	lsrs	r3, r3, #6
 8003674:	3301      	adds	r3, #1
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800367a:	e002      	b.n	8003682 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	3b01      	subs	r3, #1
 8003680:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1f9      	bne.n	800367c <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003688:	e05a      	b.n	8003740 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a39      	ldr	r2, [pc, #228]	@ (8003774 <HAL_ADC_ConfigChannel+0x6b0>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d11e      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x60e>
 8003694:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003696:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d119      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a2f      	ldr	r2, [pc, #188]	@ (8003760 <HAL_ADC_ConfigChannel+0x69c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d14b      	bne.n	8003740 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a2a      	ldr	r2, [pc, #168]	@ (8003758 <HAL_ADC_ConfigChannel+0x694>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d004      	beq.n	80036bc <HAL_ADC_ConfigChannel+0x5f8>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a29      	ldr	r2, [pc, #164]	@ (800375c <HAL_ADC_ConfigChannel+0x698>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d101      	bne.n	80036c0 <HAL_ADC_ConfigChannel+0x5fc>
 80036bc:	4a2a      	ldr	r2, [pc, #168]	@ (8003768 <HAL_ADC_ConfigChannel+0x6a4>)
 80036be:	e000      	b.n	80036c2 <HAL_ADC_ConfigChannel+0x5fe>
 80036c0:	4a24      	ldr	r2, [pc, #144]	@ (8003754 <HAL_ADC_ConfigChannel+0x690>)
 80036c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036c4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036c8:	4619      	mov	r1, r3
 80036ca:	4610      	mov	r0, r2
 80036cc:	f7ff f9df 	bl	8002a8e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80036d0:	e036      	b.n	8003740 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a28      	ldr	r2, [pc, #160]	@ (8003778 <HAL_ADC_ConfigChannel+0x6b4>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d131      	bne.n	8003740 <HAL_ADC_ConfigChannel+0x67c>
 80036dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80036de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d12c      	bne.n	8003740 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a1d      	ldr	r2, [pc, #116]	@ (8003760 <HAL_ADC_ConfigChannel+0x69c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d127      	bne.n	8003740 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a18      	ldr	r2, [pc, #96]	@ (8003758 <HAL_ADC_ConfigChannel+0x694>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d004      	beq.n	8003704 <HAL_ADC_ConfigChannel+0x640>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a17      	ldr	r2, [pc, #92]	@ (800375c <HAL_ADC_ConfigChannel+0x698>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d101      	bne.n	8003708 <HAL_ADC_ConfigChannel+0x644>
 8003704:	4a18      	ldr	r2, [pc, #96]	@ (8003768 <HAL_ADC_ConfigChannel+0x6a4>)
 8003706:	e000      	b.n	800370a <HAL_ADC_ConfigChannel+0x646>
 8003708:	4a12      	ldr	r2, [pc, #72]	@ (8003754 <HAL_ADC_ConfigChannel+0x690>)
 800370a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800370c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003710:	4619      	mov	r1, r3
 8003712:	4610      	mov	r0, r2
 8003714:	f7ff f9bb 	bl	8002a8e <LL_ADC_SetCommonPathInternalCh>
 8003718:	e012      	b.n	8003740 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800371e:	f043 0220 	orr.w	r2, r3, #32
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800372c:	e008      	b.n	8003740 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003732:	f043 0220 	orr.w	r2, r3, #32
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003748:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800374c:	4618      	mov	r0, r3
 800374e:	3784      	adds	r7, #132	@ 0x84
 8003750:	46bd      	mov	sp, r7
 8003752:	bd90      	pop	{r4, r7, pc}
 8003754:	58026300 	.word	0x58026300
 8003758:	40022000 	.word	0x40022000
 800375c:	40022100 	.word	0x40022100
 8003760:	58026000 	.word	0x58026000
 8003764:	cb840000 	.word	0xcb840000
 8003768:	40022300 	.word	0x40022300
 800376c:	24000000 	.word	0x24000000
 8003770:	053e2d63 	.word	0x053e2d63
 8003774:	c7520000 	.word	0xc7520000
 8003778:	cfb80000 	.word	0xcfb80000

0800377c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a7a      	ldr	r2, [pc, #488]	@ (8003974 <ADC_ConfigureBoostMode+0x1f8>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d004      	beq.n	8003798 <ADC_ConfigureBoostMode+0x1c>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a79      	ldr	r2, [pc, #484]	@ (8003978 <ADC_ConfigureBoostMode+0x1fc>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d109      	bne.n	80037ac <ADC_ConfigureBoostMode+0x30>
 8003798:	4b78      	ldr	r3, [pc, #480]	@ (800397c <ADC_ConfigureBoostMode+0x200>)
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	bf14      	ite	ne
 80037a4:	2301      	movne	r3, #1
 80037a6:	2300      	moveq	r3, #0
 80037a8:	b2db      	uxtb	r3, r3
 80037aa:	e008      	b.n	80037be <ADC_ConfigureBoostMode+0x42>
 80037ac:	4b74      	ldr	r3, [pc, #464]	@ (8003980 <ADC_ConfigureBoostMode+0x204>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	bf14      	ite	ne
 80037b8:	2301      	movne	r3, #1
 80037ba:	2300      	moveq	r3, #0
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d01c      	beq.n	80037fc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80037c2:	f005 f913 	bl	80089ec <HAL_RCC_GetHCLKFreq>
 80037c6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80037d0:	d010      	beq.n	80037f4 <ADC_ConfigureBoostMode+0x78>
 80037d2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80037d6:	d873      	bhi.n	80038c0 <ADC_ConfigureBoostMode+0x144>
 80037d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037dc:	d002      	beq.n	80037e4 <ADC_ConfigureBoostMode+0x68>
 80037de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80037e2:	d16d      	bne.n	80038c0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	0c1b      	lsrs	r3, r3, #16
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f0:	60fb      	str	r3, [r7, #12]
        break;
 80037f2:	e068      	b.n	80038c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	089b      	lsrs	r3, r3, #2
 80037f8:	60fb      	str	r3, [r7, #12]
        break;
 80037fa:	e064      	b.n	80038c6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 80037fc:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003800:	f04f 0100 	mov.w	r1, #0
 8003804:	f006 fb58 	bl	8009eb8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003808:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003812:	d051      	beq.n	80038b8 <ADC_ConfigureBoostMode+0x13c>
 8003814:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003818:	d854      	bhi.n	80038c4 <ADC_ConfigureBoostMode+0x148>
 800381a:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 800381e:	d047      	beq.n	80038b0 <ADC_ConfigureBoostMode+0x134>
 8003820:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003824:	d84e      	bhi.n	80038c4 <ADC_ConfigureBoostMode+0x148>
 8003826:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800382a:	d03d      	beq.n	80038a8 <ADC_ConfigureBoostMode+0x12c>
 800382c:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003830:	d848      	bhi.n	80038c4 <ADC_ConfigureBoostMode+0x148>
 8003832:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003836:	d033      	beq.n	80038a0 <ADC_ConfigureBoostMode+0x124>
 8003838:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800383c:	d842      	bhi.n	80038c4 <ADC_ConfigureBoostMode+0x148>
 800383e:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003842:	d029      	beq.n	8003898 <ADC_ConfigureBoostMode+0x11c>
 8003844:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003848:	d83c      	bhi.n	80038c4 <ADC_ConfigureBoostMode+0x148>
 800384a:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 800384e:	d01a      	beq.n	8003886 <ADC_ConfigureBoostMode+0x10a>
 8003850:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003854:	d836      	bhi.n	80038c4 <ADC_ConfigureBoostMode+0x148>
 8003856:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 800385a:	d014      	beq.n	8003886 <ADC_ConfigureBoostMode+0x10a>
 800385c:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003860:	d830      	bhi.n	80038c4 <ADC_ConfigureBoostMode+0x148>
 8003862:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003866:	d00e      	beq.n	8003886 <ADC_ConfigureBoostMode+0x10a>
 8003868:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800386c:	d82a      	bhi.n	80038c4 <ADC_ConfigureBoostMode+0x148>
 800386e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003872:	d008      	beq.n	8003886 <ADC_ConfigureBoostMode+0x10a>
 8003874:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003878:	d824      	bhi.n	80038c4 <ADC_ConfigureBoostMode+0x148>
 800387a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800387e:	d002      	beq.n	8003886 <ADC_ConfigureBoostMode+0x10a>
 8003880:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003884:	d11e      	bne.n	80038c4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	0c9b      	lsrs	r3, r3, #18
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	68fa      	ldr	r2, [r7, #12]
 8003890:	fbb2 f3f3 	udiv	r3, r2, r3
 8003894:	60fb      	str	r3, [r7, #12]
        break;
 8003896:	e016      	b.n	80038c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	091b      	lsrs	r3, r3, #4
 800389c:	60fb      	str	r3, [r7, #12]
        break;
 800389e:	e012      	b.n	80038c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	60fb      	str	r3, [r7, #12]
        break;
 80038a6:	e00e      	b.n	80038c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	099b      	lsrs	r3, r3, #6
 80038ac:	60fb      	str	r3, [r7, #12]
        break;
 80038ae:	e00a      	b.n	80038c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	09db      	lsrs	r3, r3, #7
 80038b4:	60fb      	str	r3, [r7, #12]
        break;
 80038b6:	e006      	b.n	80038c6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	0a1b      	lsrs	r3, r3, #8
 80038bc:	60fb      	str	r3, [r7, #12]
        break;
 80038be:	e002      	b.n	80038c6 <ADC_ConfigureBoostMode+0x14a>
        break;
 80038c0:	bf00      	nop
 80038c2:	e000      	b.n	80038c6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80038c4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80038c6:	f7ff f8c3 	bl	8002a50 <HAL_GetREVID>
 80038ca:	4603      	mov	r3, r0
 80038cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d815      	bhi.n	8003900 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4a2b      	ldr	r2, [pc, #172]	@ (8003984 <ADC_ConfigureBoostMode+0x208>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d908      	bls.n	80038ee <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689a      	ldr	r2, [r3, #8]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038ea:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80038ec:	e03e      	b.n	800396c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689a      	ldr	r2, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038fc:	609a      	str	r2, [r3, #8]
}
 80038fe:	e035      	b.n	800396c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	085b      	lsrs	r3, r3, #1
 8003904:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4a1f      	ldr	r2, [pc, #124]	@ (8003988 <ADC_ConfigureBoostMode+0x20c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d808      	bhi.n	8003920 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800391c:	609a      	str	r2, [r3, #8]
}
 800391e:	e025      	b.n	800396c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4a1a      	ldr	r2, [pc, #104]	@ (800398c <ADC_ConfigureBoostMode+0x210>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d80a      	bhi.n	800393e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800393a:	609a      	str	r2, [r3, #8]
}
 800393c:	e016      	b.n	800396c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	4a13      	ldr	r2, [pc, #76]	@ (8003990 <ADC_ConfigureBoostMode+0x214>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d80a      	bhi.n	800395c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003958:	609a      	str	r2, [r3, #8]
}
 800395a:	e007      	b.n	800396c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689a      	ldr	r2, [r3, #8]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 800396a:	609a      	str	r2, [r3, #8]
}
 800396c:	bf00      	nop
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40022000 	.word	0x40022000
 8003978:	40022100 	.word	0x40022100
 800397c:	40022300 	.word	0x40022300
 8003980:	58026300 	.word	0x58026300
 8003984:	01312d00 	.word	0x01312d00
 8003988:	005f5e10 	.word	0x005f5e10
 800398c:	00bebc20 	.word	0x00bebc20
 8003990:	017d7840 	.word	0x017d7840

08003994 <LL_ADC_IsEnabled>:
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d101      	bne.n	80039ac <LL_ADC_IsEnabled+0x18>
 80039a8:	2301      	movs	r3, #1
 80039aa:	e000      	b.n	80039ae <LL_ADC_IsEnabled+0x1a>
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <LL_ADC_REG_IsConversionOngoing>:
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 0304 	and.w	r3, r3, #4
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	d101      	bne.n	80039d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80039ce:	2301      	movs	r3, #1
 80039d0:	e000      	b.n	80039d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80039e0:	b590      	push	{r4, r7, lr}
 80039e2:	b09f      	sub	sp, #124	@ 0x7c
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d101      	bne.n	80039fe <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80039fa:	2302      	movs	r3, #2
 80039fc:	e0be      	b.n	8003b7c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003a06:	2300      	movs	r3, #0
 8003a08:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a5c      	ldr	r2, [pc, #368]	@ (8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d102      	bne.n	8003a1e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003a18:	4b5b      	ldr	r3, [pc, #364]	@ (8003b88 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003a1a:	60bb      	str	r3, [r7, #8]
 8003a1c:	e001      	b.n	8003a22 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d10b      	bne.n	8003a40 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a2c:	f043 0220 	orr.w	r2, r3, #32
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e09d      	b.n	8003b7c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	4618      	mov	r0, r3
 8003a44:	f7ff ffb9 	bl	80039ba <LL_ADC_REG_IsConversionOngoing>
 8003a48:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f7ff ffb3 	bl	80039ba <LL_ADC_REG_IsConversionOngoing>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d17f      	bne.n	8003b5a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003a5a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d17c      	bne.n	8003b5a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a47      	ldr	r2, [pc, #284]	@ (8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d004      	beq.n	8003a74 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a46      	ldr	r2, [pc, #280]	@ (8003b88 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d101      	bne.n	8003a78 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003a74:	4b45      	ldr	r3, [pc, #276]	@ (8003b8c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003a76:	e000      	b.n	8003a7a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003a78:	4b45      	ldr	r3, [pc, #276]	@ (8003b90 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003a7a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d039      	beq.n	8003af8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003a84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	431a      	orrs	r2, r3
 8003a92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a94:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a3a      	ldr	r2, [pc, #232]	@ (8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d004      	beq.n	8003aaa <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a38      	ldr	r2, [pc, #224]	@ (8003b88 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d10e      	bne.n	8003ac8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003aaa:	4836      	ldr	r0, [pc, #216]	@ (8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003aac:	f7ff ff72 	bl	8003994 <LL_ADC_IsEnabled>
 8003ab0:	4604      	mov	r4, r0
 8003ab2:	4835      	ldr	r0, [pc, #212]	@ (8003b88 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003ab4:	f7ff ff6e 	bl	8003994 <LL_ADC_IsEnabled>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	4323      	orrs	r3, r4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	bf0c      	ite	eq
 8003ac0:	2301      	moveq	r3, #1
 8003ac2:	2300      	movne	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	e008      	b.n	8003ada <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003ac8:	4832      	ldr	r0, [pc, #200]	@ (8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003aca:	f7ff ff63 	bl	8003994 <LL_ADC_IsEnabled>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	bf0c      	ite	eq
 8003ad4:	2301      	moveq	r3, #1
 8003ad6:	2300      	movne	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d047      	beq.n	8003b6e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003ade:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	4b2d      	ldr	r3, [pc, #180]	@ (8003b98 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	683a      	ldr	r2, [r7, #0]
 8003ae8:	6811      	ldr	r1, [r2, #0]
 8003aea:	683a      	ldr	r2, [r7, #0]
 8003aec:	6892      	ldr	r2, [r2, #8]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	431a      	orrs	r2, r3
 8003af2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003af4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003af6:	e03a      	b.n	8003b6e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003af8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003b00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b02:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a1e      	ldr	r2, [pc, #120]	@ (8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d004      	beq.n	8003b18 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a1d      	ldr	r2, [pc, #116]	@ (8003b88 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d10e      	bne.n	8003b36 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003b18:	481a      	ldr	r0, [pc, #104]	@ (8003b84 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003b1a:	f7ff ff3b 	bl	8003994 <LL_ADC_IsEnabled>
 8003b1e:	4604      	mov	r4, r0
 8003b20:	4819      	ldr	r0, [pc, #100]	@ (8003b88 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003b22:	f7ff ff37 	bl	8003994 <LL_ADC_IsEnabled>
 8003b26:	4603      	mov	r3, r0
 8003b28:	4323      	orrs	r3, r4
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	bf0c      	ite	eq
 8003b2e:	2301      	moveq	r3, #1
 8003b30:	2300      	movne	r3, #0
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	e008      	b.n	8003b48 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003b36:	4817      	ldr	r0, [pc, #92]	@ (8003b94 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003b38:	f7ff ff2c 	bl	8003994 <LL_ADC_IsEnabled>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	bf0c      	ite	eq
 8003b42:	2301      	moveq	r3, #1
 8003b44:	2300      	movne	r3, #0
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d010      	beq.n	8003b6e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	4b11      	ldr	r3, [pc, #68]	@ (8003b98 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003b52:	4013      	ands	r3, r2
 8003b54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003b56:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b58:	e009      	b.n	8003b6e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b5e:	f043 0220 	orr.w	r2, r3, #32
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003b6c:	e000      	b.n	8003b70 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b6e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b78:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	377c      	adds	r7, #124	@ 0x7c
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd90      	pop	{r4, r7, pc}
 8003b84:	40022000 	.word	0x40022000
 8003b88:	40022100 	.word	0x40022100
 8003b8c:	40022300 	.word	0x40022300
 8003b90:	58026300 	.word	0x58026300
 8003b94:	58026000 	.word	0x58026000
 8003b98:	fffff0e0 	.word	0xfffff0e0

08003b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b085      	sub	sp, #20
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f003 0307 	and.w	r3, r3, #7
 8003baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003bac:	4b0b      	ldr	r3, [pc, #44]	@ (8003bdc <__NVIC_SetPriorityGrouping+0x40>)
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003bb8:	4013      	ands	r3, r2
 8003bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003bc4:	4b06      	ldr	r3, [pc, #24]	@ (8003be0 <__NVIC_SetPriorityGrouping+0x44>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bca:	4a04      	ldr	r2, [pc, #16]	@ (8003bdc <__NVIC_SetPriorityGrouping+0x40>)
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	60d3      	str	r3, [r2, #12]
}
 8003bd0:	bf00      	nop
 8003bd2:	3714      	adds	r7, #20
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr
 8003bdc:	e000ed00 	.word	0xe000ed00
 8003be0:	05fa0000 	.word	0x05fa0000

08003be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003be8:	4b04      	ldr	r3, [pc, #16]	@ (8003bfc <__NVIC_GetPriorityGrouping+0x18>)
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	0a1b      	lsrs	r3, r3, #8
 8003bee:	f003 0307 	and.w	r3, r3, #7
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	e000ed00 	.word	0xe000ed00

08003c00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	4603      	mov	r3, r0
 8003c08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	db0b      	blt.n	8003c2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c12:	88fb      	ldrh	r3, [r7, #6]
 8003c14:	f003 021f 	and.w	r2, r3, #31
 8003c18:	4907      	ldr	r1, [pc, #28]	@ (8003c38 <__NVIC_EnableIRQ+0x38>)
 8003c1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c1e:	095b      	lsrs	r3, r3, #5
 8003c20:	2001      	movs	r0, #1
 8003c22:	fa00 f202 	lsl.w	r2, r0, r2
 8003c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c2a:	bf00      	nop
 8003c2c:	370c      	adds	r7, #12
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	e000e100 	.word	0xe000e100

08003c3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	4603      	mov	r3, r0
 8003c44:	6039      	str	r1, [r7, #0]
 8003c46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003c48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	db0a      	blt.n	8003c66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	b2da      	uxtb	r2, r3
 8003c54:	490c      	ldr	r1, [pc, #48]	@ (8003c88 <__NVIC_SetPriority+0x4c>)
 8003c56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c5a:	0112      	lsls	r2, r2, #4
 8003c5c:	b2d2      	uxtb	r2, r2
 8003c5e:	440b      	add	r3, r1
 8003c60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c64:	e00a      	b.n	8003c7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	b2da      	uxtb	r2, r3
 8003c6a:	4908      	ldr	r1, [pc, #32]	@ (8003c8c <__NVIC_SetPriority+0x50>)
 8003c6c:	88fb      	ldrh	r3, [r7, #6]
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	3b04      	subs	r3, #4
 8003c74:	0112      	lsls	r2, r2, #4
 8003c76:	b2d2      	uxtb	r2, r2
 8003c78:	440b      	add	r3, r1
 8003c7a:	761a      	strb	r2, [r3, #24]
}
 8003c7c:	bf00      	nop
 8003c7e:	370c      	adds	r7, #12
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr
 8003c88:	e000e100 	.word	0xe000e100
 8003c8c:	e000ed00 	.word	0xe000ed00

08003c90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b089      	sub	sp, #36	@ 0x24
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	60b9      	str	r1, [r7, #8]
 8003c9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	f1c3 0307 	rsb	r3, r3, #7
 8003caa:	2b04      	cmp	r3, #4
 8003cac:	bf28      	it	cs
 8003cae:	2304      	movcs	r3, #4
 8003cb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	3304      	adds	r3, #4
 8003cb6:	2b06      	cmp	r3, #6
 8003cb8:	d902      	bls.n	8003cc0 <NVIC_EncodePriority+0x30>
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	3b03      	subs	r3, #3
 8003cbe:	e000      	b.n	8003cc2 <NVIC_EncodePriority+0x32>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc4:	f04f 32ff 	mov.w	r2, #4294967295
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	43da      	mvns	r2, r3
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	401a      	ands	r2, r3
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cd8:	f04f 31ff 	mov.w	r1, #4294967295
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce2:	43d9      	mvns	r1, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ce8:	4313      	orrs	r3, r2
         );
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3724      	adds	r7, #36	@ 0x24
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
	...

08003cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	3b01      	subs	r3, #1
 8003d04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d08:	d301      	bcc.n	8003d0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e00f      	b.n	8003d2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d38 <SysTick_Config+0x40>)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3b01      	subs	r3, #1
 8003d14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d16:	210f      	movs	r1, #15
 8003d18:	f04f 30ff 	mov.w	r0, #4294967295
 8003d1c:	f7ff ff8e 	bl	8003c3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d20:	4b05      	ldr	r3, [pc, #20]	@ (8003d38 <SysTick_Config+0x40>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d26:	4b04      	ldr	r3, [pc, #16]	@ (8003d38 <SysTick_Config+0x40>)
 8003d28:	2207      	movs	r2, #7
 8003d2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	4618      	mov	r0, r3
 8003d30:	3708      	adds	r7, #8
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
 8003d36:	bf00      	nop
 8003d38:	e000e010 	.word	0xe000e010

08003d3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7ff ff29 	bl	8003b9c <__NVIC_SetPriorityGrouping>
}
 8003d4a:	bf00      	nop
 8003d4c:	3708      	adds	r7, #8
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b086      	sub	sp, #24
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	4603      	mov	r3, r0
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	607a      	str	r2, [r7, #4]
 8003d5e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d60:	f7ff ff40 	bl	8003be4 <__NVIC_GetPriorityGrouping>
 8003d64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	68b9      	ldr	r1, [r7, #8]
 8003d6a:	6978      	ldr	r0, [r7, #20]
 8003d6c:	f7ff ff90 	bl	8003c90 <NVIC_EncodePriority>
 8003d70:	4602      	mov	r2, r0
 8003d72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d76:	4611      	mov	r1, r2
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff ff5f 	bl	8003c3c <__NVIC_SetPriority>
}
 8003d7e:	bf00      	nop
 8003d80:	3718      	adds	r7, #24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d86:	b580      	push	{r7, lr}
 8003d88:	b082      	sub	sp, #8
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d94:	4618      	mov	r0, r3
 8003d96:	f7ff ff33 	bl	8003c00 <__NVIC_EnableIRQ>
}
 8003d9a:	bf00      	nop
 8003d9c:	3708      	adds	r7, #8
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b082      	sub	sp, #8
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff ffa4 	bl	8003cf8 <SysTick_Config>
 8003db0:	4603      	mov	r3, r0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3708      	adds	r7, #8
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}
	...

08003dbc <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8003dc0:	4b07      	ldr	r3, [pc, #28]	@ (8003de0 <HAL_GetCurrentCPUID+0x24>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	091b      	lsrs	r3, r3, #4
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	2b07      	cmp	r3, #7
 8003dcc:	d101      	bne.n	8003dd2 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e000      	b.n	8003dd4 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8003dd2:	2301      	movs	r3, #1
  }
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	e000ed00 	.word	0xe000ed00

08003de4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003dec:	f7fe fe00 	bl	80029f0 <HAL_GetTick>
 8003df0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d101      	bne.n	8003dfc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e316      	b.n	800442a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a66      	ldr	r2, [pc, #408]	@ (8003f9c <HAL_DMA_Init+0x1b8>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d04a      	beq.n	8003e9c <HAL_DMA_Init+0xb8>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a65      	ldr	r2, [pc, #404]	@ (8003fa0 <HAL_DMA_Init+0x1bc>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d045      	beq.n	8003e9c <HAL_DMA_Init+0xb8>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a63      	ldr	r2, [pc, #396]	@ (8003fa4 <HAL_DMA_Init+0x1c0>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d040      	beq.n	8003e9c <HAL_DMA_Init+0xb8>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a62      	ldr	r2, [pc, #392]	@ (8003fa8 <HAL_DMA_Init+0x1c4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d03b      	beq.n	8003e9c <HAL_DMA_Init+0xb8>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a60      	ldr	r2, [pc, #384]	@ (8003fac <HAL_DMA_Init+0x1c8>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d036      	beq.n	8003e9c <HAL_DMA_Init+0xb8>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a5f      	ldr	r2, [pc, #380]	@ (8003fb0 <HAL_DMA_Init+0x1cc>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d031      	beq.n	8003e9c <HAL_DMA_Init+0xb8>
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a5d      	ldr	r2, [pc, #372]	@ (8003fb4 <HAL_DMA_Init+0x1d0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d02c      	beq.n	8003e9c <HAL_DMA_Init+0xb8>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a5c      	ldr	r2, [pc, #368]	@ (8003fb8 <HAL_DMA_Init+0x1d4>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d027      	beq.n	8003e9c <HAL_DMA_Init+0xb8>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a5a      	ldr	r2, [pc, #360]	@ (8003fbc <HAL_DMA_Init+0x1d8>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d022      	beq.n	8003e9c <HAL_DMA_Init+0xb8>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a59      	ldr	r2, [pc, #356]	@ (8003fc0 <HAL_DMA_Init+0x1dc>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d01d      	beq.n	8003e9c <HAL_DMA_Init+0xb8>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a57      	ldr	r2, [pc, #348]	@ (8003fc4 <HAL_DMA_Init+0x1e0>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d018      	beq.n	8003e9c <HAL_DMA_Init+0xb8>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a56      	ldr	r2, [pc, #344]	@ (8003fc8 <HAL_DMA_Init+0x1e4>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d013      	beq.n	8003e9c <HAL_DMA_Init+0xb8>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a54      	ldr	r2, [pc, #336]	@ (8003fcc <HAL_DMA_Init+0x1e8>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d00e      	beq.n	8003e9c <HAL_DMA_Init+0xb8>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a53      	ldr	r2, [pc, #332]	@ (8003fd0 <HAL_DMA_Init+0x1ec>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d009      	beq.n	8003e9c <HAL_DMA_Init+0xb8>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a51      	ldr	r2, [pc, #324]	@ (8003fd4 <HAL_DMA_Init+0x1f0>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d004      	beq.n	8003e9c <HAL_DMA_Init+0xb8>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a50      	ldr	r2, [pc, #320]	@ (8003fd8 <HAL_DMA_Init+0x1f4>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d101      	bne.n	8003ea0 <HAL_DMA_Init+0xbc>
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e000      	b.n	8003ea2 <HAL_DMA_Init+0xbe>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	f000 813b 	beq.w	800411e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2202      	movs	r2, #2
 8003eac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a37      	ldr	r2, [pc, #220]	@ (8003f9c <HAL_DMA_Init+0x1b8>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d04a      	beq.n	8003f58 <HAL_DMA_Init+0x174>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a36      	ldr	r2, [pc, #216]	@ (8003fa0 <HAL_DMA_Init+0x1bc>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d045      	beq.n	8003f58 <HAL_DMA_Init+0x174>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a34      	ldr	r2, [pc, #208]	@ (8003fa4 <HAL_DMA_Init+0x1c0>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d040      	beq.n	8003f58 <HAL_DMA_Init+0x174>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a33      	ldr	r2, [pc, #204]	@ (8003fa8 <HAL_DMA_Init+0x1c4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d03b      	beq.n	8003f58 <HAL_DMA_Init+0x174>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a31      	ldr	r2, [pc, #196]	@ (8003fac <HAL_DMA_Init+0x1c8>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d036      	beq.n	8003f58 <HAL_DMA_Init+0x174>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a30      	ldr	r2, [pc, #192]	@ (8003fb0 <HAL_DMA_Init+0x1cc>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d031      	beq.n	8003f58 <HAL_DMA_Init+0x174>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a2e      	ldr	r2, [pc, #184]	@ (8003fb4 <HAL_DMA_Init+0x1d0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d02c      	beq.n	8003f58 <HAL_DMA_Init+0x174>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a2d      	ldr	r2, [pc, #180]	@ (8003fb8 <HAL_DMA_Init+0x1d4>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d027      	beq.n	8003f58 <HAL_DMA_Init+0x174>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a2b      	ldr	r2, [pc, #172]	@ (8003fbc <HAL_DMA_Init+0x1d8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d022      	beq.n	8003f58 <HAL_DMA_Init+0x174>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a2a      	ldr	r2, [pc, #168]	@ (8003fc0 <HAL_DMA_Init+0x1dc>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d01d      	beq.n	8003f58 <HAL_DMA_Init+0x174>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a28      	ldr	r2, [pc, #160]	@ (8003fc4 <HAL_DMA_Init+0x1e0>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d018      	beq.n	8003f58 <HAL_DMA_Init+0x174>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a27      	ldr	r2, [pc, #156]	@ (8003fc8 <HAL_DMA_Init+0x1e4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d013      	beq.n	8003f58 <HAL_DMA_Init+0x174>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a25      	ldr	r2, [pc, #148]	@ (8003fcc <HAL_DMA_Init+0x1e8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d00e      	beq.n	8003f58 <HAL_DMA_Init+0x174>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a24      	ldr	r2, [pc, #144]	@ (8003fd0 <HAL_DMA_Init+0x1ec>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d009      	beq.n	8003f58 <HAL_DMA_Init+0x174>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a22      	ldr	r2, [pc, #136]	@ (8003fd4 <HAL_DMA_Init+0x1f0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d004      	beq.n	8003f58 <HAL_DMA_Init+0x174>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a21      	ldr	r2, [pc, #132]	@ (8003fd8 <HAL_DMA_Init+0x1f4>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d108      	bne.n	8003f6a <HAL_DMA_Init+0x186>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f022 0201 	bic.w	r2, r2, #1
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	e007      	b.n	8003f7a <HAL_DMA_Init+0x196>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0201 	bic.w	r2, r2, #1
 8003f78:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f7a:	e02f      	b.n	8003fdc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f7c:	f7fe fd38 	bl	80029f0 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b05      	cmp	r3, #5
 8003f88:	d928      	bls.n	8003fdc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2203      	movs	r2, #3
 8003f94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e246      	b.n	800442a <HAL_DMA_Init+0x646>
 8003f9c:	40020010 	.word	0x40020010
 8003fa0:	40020028 	.word	0x40020028
 8003fa4:	40020040 	.word	0x40020040
 8003fa8:	40020058 	.word	0x40020058
 8003fac:	40020070 	.word	0x40020070
 8003fb0:	40020088 	.word	0x40020088
 8003fb4:	400200a0 	.word	0x400200a0
 8003fb8:	400200b8 	.word	0x400200b8
 8003fbc:	40020410 	.word	0x40020410
 8003fc0:	40020428 	.word	0x40020428
 8003fc4:	40020440 	.word	0x40020440
 8003fc8:	40020458 	.word	0x40020458
 8003fcc:	40020470 	.word	0x40020470
 8003fd0:	40020488 	.word	0x40020488
 8003fd4:	400204a0 	.word	0x400204a0
 8003fd8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0301 	and.w	r3, r3, #1
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1c8      	bne.n	8003f7c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ff2:	697a      	ldr	r2, [r7, #20]
 8003ff4:	4b83      	ldr	r3, [pc, #524]	@ (8004204 <HAL_DMA_Init+0x420>)
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004002:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800400e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800401a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	4313      	orrs	r3, r2
 8004026:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402c:	2b04      	cmp	r3, #4
 800402e:	d107      	bne.n	8004040 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004038:	4313      	orrs	r3, r2
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	4313      	orrs	r3, r2
 800403e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004040:	4b71      	ldr	r3, [pc, #452]	@ (8004208 <HAL_DMA_Init+0x424>)
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	4b71      	ldr	r3, [pc, #452]	@ (800420c <HAL_DMA_Init+0x428>)
 8004046:	4013      	ands	r3, r2
 8004048:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800404c:	d328      	bcc.n	80040a0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	2b28      	cmp	r3, #40	@ 0x28
 8004054:	d903      	bls.n	800405e <HAL_DMA_Init+0x27a>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b2e      	cmp	r3, #46	@ 0x2e
 800405c:	d917      	bls.n	800408e <HAL_DMA_Init+0x2aa>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	2b3e      	cmp	r3, #62	@ 0x3e
 8004064:	d903      	bls.n	800406e <HAL_DMA_Init+0x28a>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	2b42      	cmp	r3, #66	@ 0x42
 800406c:	d90f      	bls.n	800408e <HAL_DMA_Init+0x2aa>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b46      	cmp	r3, #70	@ 0x46
 8004074:	d903      	bls.n	800407e <HAL_DMA_Init+0x29a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2b48      	cmp	r3, #72	@ 0x48
 800407c:	d907      	bls.n	800408e <HAL_DMA_Init+0x2aa>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	2b4e      	cmp	r3, #78	@ 0x4e
 8004084:	d905      	bls.n	8004092 <HAL_DMA_Init+0x2ae>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2b52      	cmp	r3, #82	@ 0x52
 800408c:	d801      	bhi.n	8004092 <HAL_DMA_Init+0x2ae>
 800408e:	2301      	movs	r3, #1
 8004090:	e000      	b.n	8004094 <HAL_DMA_Init+0x2b0>
 8004092:	2300      	movs	r3, #0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d003      	beq.n	80040a0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800409e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	697a      	ldr	r2, [r7, #20]
 80040a6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	f023 0307 	bic.w	r3, r3, #7
 80040b6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040bc:	697a      	ldr	r2, [r7, #20]
 80040be:	4313      	orrs	r3, r2
 80040c0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c6:	2b04      	cmp	r3, #4
 80040c8:	d117      	bne.n	80040fa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00e      	beq.n	80040fa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f001 fdcf 	bl	8005c80 <DMA_CheckFifoParam>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d008      	beq.n	80040fa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2240      	movs	r2, #64	@ 0x40
 80040ec:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2201      	movs	r2, #1
 80040f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e197      	b.n	800442a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	697a      	ldr	r2, [r7, #20]
 8004100:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f001 fd0a 	bl	8005b1c <DMA_CalcBaseAndBitshift>
 8004108:	4603      	mov	r3, r0
 800410a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004110:	f003 031f 	and.w	r3, r3, #31
 8004114:	223f      	movs	r2, #63	@ 0x3f
 8004116:	409a      	lsls	r2, r3
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	609a      	str	r2, [r3, #8]
 800411c:	e0cd      	b.n	80042ba <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a3b      	ldr	r2, [pc, #236]	@ (8004210 <HAL_DMA_Init+0x42c>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d022      	beq.n	800416e <HAL_DMA_Init+0x38a>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a39      	ldr	r2, [pc, #228]	@ (8004214 <HAL_DMA_Init+0x430>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d01d      	beq.n	800416e <HAL_DMA_Init+0x38a>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a38      	ldr	r2, [pc, #224]	@ (8004218 <HAL_DMA_Init+0x434>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d018      	beq.n	800416e <HAL_DMA_Init+0x38a>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a36      	ldr	r2, [pc, #216]	@ (800421c <HAL_DMA_Init+0x438>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d013      	beq.n	800416e <HAL_DMA_Init+0x38a>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a35      	ldr	r2, [pc, #212]	@ (8004220 <HAL_DMA_Init+0x43c>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d00e      	beq.n	800416e <HAL_DMA_Init+0x38a>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a33      	ldr	r2, [pc, #204]	@ (8004224 <HAL_DMA_Init+0x440>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d009      	beq.n	800416e <HAL_DMA_Init+0x38a>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a32      	ldr	r2, [pc, #200]	@ (8004228 <HAL_DMA_Init+0x444>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d004      	beq.n	800416e <HAL_DMA_Init+0x38a>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a30      	ldr	r2, [pc, #192]	@ (800422c <HAL_DMA_Init+0x448>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d101      	bne.n	8004172 <HAL_DMA_Init+0x38e>
 800416e:	2301      	movs	r3, #1
 8004170:	e000      	b.n	8004174 <HAL_DMA_Init+0x390>
 8004172:	2300      	movs	r3, #0
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 8097 	beq.w	80042a8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a24      	ldr	r2, [pc, #144]	@ (8004210 <HAL_DMA_Init+0x42c>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d021      	beq.n	80041c8 <HAL_DMA_Init+0x3e4>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a22      	ldr	r2, [pc, #136]	@ (8004214 <HAL_DMA_Init+0x430>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d01c      	beq.n	80041c8 <HAL_DMA_Init+0x3e4>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a21      	ldr	r2, [pc, #132]	@ (8004218 <HAL_DMA_Init+0x434>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d017      	beq.n	80041c8 <HAL_DMA_Init+0x3e4>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a1f      	ldr	r2, [pc, #124]	@ (800421c <HAL_DMA_Init+0x438>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d012      	beq.n	80041c8 <HAL_DMA_Init+0x3e4>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a1e      	ldr	r2, [pc, #120]	@ (8004220 <HAL_DMA_Init+0x43c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d00d      	beq.n	80041c8 <HAL_DMA_Init+0x3e4>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a1c      	ldr	r2, [pc, #112]	@ (8004224 <HAL_DMA_Init+0x440>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d008      	beq.n	80041c8 <HAL_DMA_Init+0x3e4>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a1b      	ldr	r2, [pc, #108]	@ (8004228 <HAL_DMA_Init+0x444>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d003      	beq.n	80041c8 <HAL_DMA_Init+0x3e4>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a19      	ldr	r2, [pc, #100]	@ (800422c <HAL_DMA_Init+0x448>)
 80041c6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2202      	movs	r2, #2
 80041cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4b13      	ldr	r3, [pc, #76]	@ (8004230 <HAL_DMA_Init+0x44c>)
 80041e4:	4013      	ands	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	689b      	ldr	r3, [r3, #8]
 80041ec:	2b40      	cmp	r3, #64	@ 0x40
 80041ee:	d021      	beq.n	8004234 <HAL_DMA_Init+0x450>
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2b80      	cmp	r3, #128	@ 0x80
 80041f6:	d102      	bne.n	80041fe <HAL_DMA_Init+0x41a>
 80041f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80041fc:	e01b      	b.n	8004236 <HAL_DMA_Init+0x452>
 80041fe:	2300      	movs	r3, #0
 8004200:	e019      	b.n	8004236 <HAL_DMA_Init+0x452>
 8004202:	bf00      	nop
 8004204:	fe10803f 	.word	0xfe10803f
 8004208:	5c001000 	.word	0x5c001000
 800420c:	ffff0000 	.word	0xffff0000
 8004210:	58025408 	.word	0x58025408
 8004214:	5802541c 	.word	0x5802541c
 8004218:	58025430 	.word	0x58025430
 800421c:	58025444 	.word	0x58025444
 8004220:	58025458 	.word	0x58025458
 8004224:	5802546c 	.word	0x5802546c
 8004228:	58025480 	.word	0x58025480
 800422c:	58025494 	.word	0x58025494
 8004230:	fffe000f 	.word	0xfffe000f
 8004234:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	68d2      	ldr	r2, [r2, #12]
 800423a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800423c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691b      	ldr	r3, [r3, #16]
 8004242:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004244:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800424c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	699b      	ldr	r3, [r3, #24]
 8004252:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004254:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	69db      	ldr	r3, [r3, #28]
 800425a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800425c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004264:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4313      	orrs	r3, r2
 800426a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	461a      	mov	r2, r3
 800427a:	4b6e      	ldr	r3, [pc, #440]	@ (8004434 <HAL_DMA_Init+0x650>)
 800427c:	4413      	add	r3, r2
 800427e:	4a6e      	ldr	r2, [pc, #440]	@ (8004438 <HAL_DMA_Init+0x654>)
 8004280:	fba2 2303 	umull	r2, r3, r2, r3
 8004284:	091b      	lsrs	r3, r3, #4
 8004286:	009a      	lsls	r2, r3, #2
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f001 fc45 	bl	8005b1c <DMA_CalcBaseAndBitshift>
 8004292:	4603      	mov	r3, r0
 8004294:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800429a:	f003 031f 	and.w	r3, r3, #31
 800429e:	2201      	movs	r2, #1
 80042a0:	409a      	lsls	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	605a      	str	r2, [r3, #4]
 80042a6:	e008      	b.n	80042ba <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2240      	movs	r2, #64	@ 0x40
 80042ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2203      	movs	r2, #3
 80042b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e0b7      	b.n	800442a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a5f      	ldr	r2, [pc, #380]	@ (800443c <HAL_DMA_Init+0x658>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d072      	beq.n	80043aa <HAL_DMA_Init+0x5c6>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a5d      	ldr	r2, [pc, #372]	@ (8004440 <HAL_DMA_Init+0x65c>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d06d      	beq.n	80043aa <HAL_DMA_Init+0x5c6>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a5c      	ldr	r2, [pc, #368]	@ (8004444 <HAL_DMA_Init+0x660>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d068      	beq.n	80043aa <HAL_DMA_Init+0x5c6>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a5a      	ldr	r2, [pc, #360]	@ (8004448 <HAL_DMA_Init+0x664>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d063      	beq.n	80043aa <HAL_DMA_Init+0x5c6>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a59      	ldr	r2, [pc, #356]	@ (800444c <HAL_DMA_Init+0x668>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d05e      	beq.n	80043aa <HAL_DMA_Init+0x5c6>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a57      	ldr	r2, [pc, #348]	@ (8004450 <HAL_DMA_Init+0x66c>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d059      	beq.n	80043aa <HAL_DMA_Init+0x5c6>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a56      	ldr	r2, [pc, #344]	@ (8004454 <HAL_DMA_Init+0x670>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d054      	beq.n	80043aa <HAL_DMA_Init+0x5c6>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a54      	ldr	r2, [pc, #336]	@ (8004458 <HAL_DMA_Init+0x674>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d04f      	beq.n	80043aa <HAL_DMA_Init+0x5c6>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a53      	ldr	r2, [pc, #332]	@ (800445c <HAL_DMA_Init+0x678>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d04a      	beq.n	80043aa <HAL_DMA_Init+0x5c6>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a51      	ldr	r2, [pc, #324]	@ (8004460 <HAL_DMA_Init+0x67c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d045      	beq.n	80043aa <HAL_DMA_Init+0x5c6>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a50      	ldr	r2, [pc, #320]	@ (8004464 <HAL_DMA_Init+0x680>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d040      	beq.n	80043aa <HAL_DMA_Init+0x5c6>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a4e      	ldr	r2, [pc, #312]	@ (8004468 <HAL_DMA_Init+0x684>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d03b      	beq.n	80043aa <HAL_DMA_Init+0x5c6>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a4d      	ldr	r2, [pc, #308]	@ (800446c <HAL_DMA_Init+0x688>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d036      	beq.n	80043aa <HAL_DMA_Init+0x5c6>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a4b      	ldr	r2, [pc, #300]	@ (8004470 <HAL_DMA_Init+0x68c>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d031      	beq.n	80043aa <HAL_DMA_Init+0x5c6>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a4a      	ldr	r2, [pc, #296]	@ (8004474 <HAL_DMA_Init+0x690>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d02c      	beq.n	80043aa <HAL_DMA_Init+0x5c6>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a48      	ldr	r2, [pc, #288]	@ (8004478 <HAL_DMA_Init+0x694>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d027      	beq.n	80043aa <HAL_DMA_Init+0x5c6>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a47      	ldr	r2, [pc, #284]	@ (800447c <HAL_DMA_Init+0x698>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d022      	beq.n	80043aa <HAL_DMA_Init+0x5c6>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a45      	ldr	r2, [pc, #276]	@ (8004480 <HAL_DMA_Init+0x69c>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d01d      	beq.n	80043aa <HAL_DMA_Init+0x5c6>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a44      	ldr	r2, [pc, #272]	@ (8004484 <HAL_DMA_Init+0x6a0>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d018      	beq.n	80043aa <HAL_DMA_Init+0x5c6>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a42      	ldr	r2, [pc, #264]	@ (8004488 <HAL_DMA_Init+0x6a4>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d013      	beq.n	80043aa <HAL_DMA_Init+0x5c6>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a41      	ldr	r2, [pc, #260]	@ (800448c <HAL_DMA_Init+0x6a8>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d00e      	beq.n	80043aa <HAL_DMA_Init+0x5c6>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a3f      	ldr	r2, [pc, #252]	@ (8004490 <HAL_DMA_Init+0x6ac>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d009      	beq.n	80043aa <HAL_DMA_Init+0x5c6>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a3e      	ldr	r2, [pc, #248]	@ (8004494 <HAL_DMA_Init+0x6b0>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d004      	beq.n	80043aa <HAL_DMA_Init+0x5c6>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a3c      	ldr	r2, [pc, #240]	@ (8004498 <HAL_DMA_Init+0x6b4>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d101      	bne.n	80043ae <HAL_DMA_Init+0x5ca>
 80043aa:	2301      	movs	r3, #1
 80043ac:	e000      	b.n	80043b0 <HAL_DMA_Init+0x5cc>
 80043ae:	2300      	movs	r3, #0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d032      	beq.n	800441a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f001 fcdf 	bl	8005d78 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	2b80      	cmp	r3, #128	@ 0x80
 80043c0:	d102      	bne.n	80043c8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80043d0:	b2d2      	uxtb	r2, r2
 80043d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80043dc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d010      	beq.n	8004408 <HAL_DMA_Init+0x624>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	2b08      	cmp	r3, #8
 80043ec:	d80c      	bhi.n	8004408 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f001 fd5c 	bl	8005eac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004404:	605a      	str	r2, [r3, #4]
 8004406:	e008      	b.n	800441a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2201      	movs	r2, #1
 8004424:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	a7fdabf8 	.word	0xa7fdabf8
 8004438:	cccccccd 	.word	0xcccccccd
 800443c:	40020010 	.word	0x40020010
 8004440:	40020028 	.word	0x40020028
 8004444:	40020040 	.word	0x40020040
 8004448:	40020058 	.word	0x40020058
 800444c:	40020070 	.word	0x40020070
 8004450:	40020088 	.word	0x40020088
 8004454:	400200a0 	.word	0x400200a0
 8004458:	400200b8 	.word	0x400200b8
 800445c:	40020410 	.word	0x40020410
 8004460:	40020428 	.word	0x40020428
 8004464:	40020440 	.word	0x40020440
 8004468:	40020458 	.word	0x40020458
 800446c:	40020470 	.word	0x40020470
 8004470:	40020488 	.word	0x40020488
 8004474:	400204a0 	.word	0x400204a0
 8004478:	400204b8 	.word	0x400204b8
 800447c:	58025408 	.word	0x58025408
 8004480:	5802541c 	.word	0x5802541c
 8004484:	58025430 	.word	0x58025430
 8004488:	58025444 	.word	0x58025444
 800448c:	58025458 	.word	0x58025458
 8004490:	5802546c 	.word	0x5802546c
 8004494:	58025480 	.word	0x58025480
 8004498:	58025494 	.word	0x58025494

0800449c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e226      	b.n	8004906 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <HAL_DMA_Start_IT+0x2a>
 80044c2:	2302      	movs	r3, #2
 80044c4:	e21f      	b.n	8004906 <HAL_DMA_Start_IT+0x46a>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	f040 820a 	bne.w	80048f0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a68      	ldr	r2, [pc, #416]	@ (8004690 <HAL_DMA_Start_IT+0x1f4>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d04a      	beq.n	800458a <HAL_DMA_Start_IT+0xee>
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a66      	ldr	r2, [pc, #408]	@ (8004694 <HAL_DMA_Start_IT+0x1f8>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d045      	beq.n	800458a <HAL_DMA_Start_IT+0xee>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a65      	ldr	r2, [pc, #404]	@ (8004698 <HAL_DMA_Start_IT+0x1fc>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d040      	beq.n	800458a <HAL_DMA_Start_IT+0xee>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a63      	ldr	r2, [pc, #396]	@ (800469c <HAL_DMA_Start_IT+0x200>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d03b      	beq.n	800458a <HAL_DMA_Start_IT+0xee>
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a62      	ldr	r2, [pc, #392]	@ (80046a0 <HAL_DMA_Start_IT+0x204>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d036      	beq.n	800458a <HAL_DMA_Start_IT+0xee>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a60      	ldr	r2, [pc, #384]	@ (80046a4 <HAL_DMA_Start_IT+0x208>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d031      	beq.n	800458a <HAL_DMA_Start_IT+0xee>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a5f      	ldr	r2, [pc, #380]	@ (80046a8 <HAL_DMA_Start_IT+0x20c>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d02c      	beq.n	800458a <HAL_DMA_Start_IT+0xee>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a5d      	ldr	r2, [pc, #372]	@ (80046ac <HAL_DMA_Start_IT+0x210>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d027      	beq.n	800458a <HAL_DMA_Start_IT+0xee>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a5c      	ldr	r2, [pc, #368]	@ (80046b0 <HAL_DMA_Start_IT+0x214>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d022      	beq.n	800458a <HAL_DMA_Start_IT+0xee>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a5a      	ldr	r2, [pc, #360]	@ (80046b4 <HAL_DMA_Start_IT+0x218>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d01d      	beq.n	800458a <HAL_DMA_Start_IT+0xee>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a59      	ldr	r2, [pc, #356]	@ (80046b8 <HAL_DMA_Start_IT+0x21c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d018      	beq.n	800458a <HAL_DMA_Start_IT+0xee>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a57      	ldr	r2, [pc, #348]	@ (80046bc <HAL_DMA_Start_IT+0x220>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d013      	beq.n	800458a <HAL_DMA_Start_IT+0xee>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a56      	ldr	r2, [pc, #344]	@ (80046c0 <HAL_DMA_Start_IT+0x224>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d00e      	beq.n	800458a <HAL_DMA_Start_IT+0xee>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a54      	ldr	r2, [pc, #336]	@ (80046c4 <HAL_DMA_Start_IT+0x228>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d009      	beq.n	800458a <HAL_DMA_Start_IT+0xee>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a53      	ldr	r2, [pc, #332]	@ (80046c8 <HAL_DMA_Start_IT+0x22c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d004      	beq.n	800458a <HAL_DMA_Start_IT+0xee>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a51      	ldr	r2, [pc, #324]	@ (80046cc <HAL_DMA_Start_IT+0x230>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d108      	bne.n	800459c <HAL_DMA_Start_IT+0x100>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0201 	bic.w	r2, r2, #1
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	e007      	b.n	80045ac <HAL_DMA_Start_IT+0x110>
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681a      	ldr	r2, [r3, #0]
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 0201 	bic.w	r2, r2, #1
 80045aa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	68b9      	ldr	r1, [r7, #8]
 80045b2:	68f8      	ldr	r0, [r7, #12]
 80045b4:	f001 f906 	bl	80057c4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a34      	ldr	r2, [pc, #208]	@ (8004690 <HAL_DMA_Start_IT+0x1f4>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d04a      	beq.n	8004658 <HAL_DMA_Start_IT+0x1bc>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a33      	ldr	r2, [pc, #204]	@ (8004694 <HAL_DMA_Start_IT+0x1f8>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d045      	beq.n	8004658 <HAL_DMA_Start_IT+0x1bc>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a31      	ldr	r2, [pc, #196]	@ (8004698 <HAL_DMA_Start_IT+0x1fc>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d040      	beq.n	8004658 <HAL_DMA_Start_IT+0x1bc>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a30      	ldr	r2, [pc, #192]	@ (800469c <HAL_DMA_Start_IT+0x200>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d03b      	beq.n	8004658 <HAL_DMA_Start_IT+0x1bc>
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a2e      	ldr	r2, [pc, #184]	@ (80046a0 <HAL_DMA_Start_IT+0x204>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d036      	beq.n	8004658 <HAL_DMA_Start_IT+0x1bc>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a2d      	ldr	r2, [pc, #180]	@ (80046a4 <HAL_DMA_Start_IT+0x208>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d031      	beq.n	8004658 <HAL_DMA_Start_IT+0x1bc>
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a2b      	ldr	r2, [pc, #172]	@ (80046a8 <HAL_DMA_Start_IT+0x20c>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d02c      	beq.n	8004658 <HAL_DMA_Start_IT+0x1bc>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a2a      	ldr	r2, [pc, #168]	@ (80046ac <HAL_DMA_Start_IT+0x210>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d027      	beq.n	8004658 <HAL_DMA_Start_IT+0x1bc>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a28      	ldr	r2, [pc, #160]	@ (80046b0 <HAL_DMA_Start_IT+0x214>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d022      	beq.n	8004658 <HAL_DMA_Start_IT+0x1bc>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a27      	ldr	r2, [pc, #156]	@ (80046b4 <HAL_DMA_Start_IT+0x218>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d01d      	beq.n	8004658 <HAL_DMA_Start_IT+0x1bc>
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a25      	ldr	r2, [pc, #148]	@ (80046b8 <HAL_DMA_Start_IT+0x21c>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d018      	beq.n	8004658 <HAL_DMA_Start_IT+0x1bc>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a24      	ldr	r2, [pc, #144]	@ (80046bc <HAL_DMA_Start_IT+0x220>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d013      	beq.n	8004658 <HAL_DMA_Start_IT+0x1bc>
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a22      	ldr	r2, [pc, #136]	@ (80046c0 <HAL_DMA_Start_IT+0x224>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d00e      	beq.n	8004658 <HAL_DMA_Start_IT+0x1bc>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a21      	ldr	r2, [pc, #132]	@ (80046c4 <HAL_DMA_Start_IT+0x228>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d009      	beq.n	8004658 <HAL_DMA_Start_IT+0x1bc>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a1f      	ldr	r2, [pc, #124]	@ (80046c8 <HAL_DMA_Start_IT+0x22c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d004      	beq.n	8004658 <HAL_DMA_Start_IT+0x1bc>
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a1e      	ldr	r2, [pc, #120]	@ (80046cc <HAL_DMA_Start_IT+0x230>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d101      	bne.n	800465c <HAL_DMA_Start_IT+0x1c0>
 8004658:	2301      	movs	r3, #1
 800465a:	e000      	b.n	800465e <HAL_DMA_Start_IT+0x1c2>
 800465c:	2300      	movs	r3, #0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d036      	beq.n	80046d0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f023 021e 	bic.w	r2, r3, #30
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f042 0216 	orr.w	r2, r2, #22
 8004674:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467a:	2b00      	cmp	r3, #0
 800467c:	d03e      	beq.n	80046fc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f042 0208 	orr.w	r2, r2, #8
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	e035      	b.n	80046fc <HAL_DMA_Start_IT+0x260>
 8004690:	40020010 	.word	0x40020010
 8004694:	40020028 	.word	0x40020028
 8004698:	40020040 	.word	0x40020040
 800469c:	40020058 	.word	0x40020058
 80046a0:	40020070 	.word	0x40020070
 80046a4:	40020088 	.word	0x40020088
 80046a8:	400200a0 	.word	0x400200a0
 80046ac:	400200b8 	.word	0x400200b8
 80046b0:	40020410 	.word	0x40020410
 80046b4:	40020428 	.word	0x40020428
 80046b8:	40020440 	.word	0x40020440
 80046bc:	40020458 	.word	0x40020458
 80046c0:	40020470 	.word	0x40020470
 80046c4:	40020488 	.word	0x40020488
 80046c8:	400204a0 	.word	0x400204a0
 80046cc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f023 020e 	bic.w	r2, r3, #14
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 020a 	orr.w	r2, r2, #10
 80046e2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d007      	beq.n	80046fc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0204 	orr.w	r2, r2, #4
 80046fa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a83      	ldr	r2, [pc, #524]	@ (8004910 <HAL_DMA_Start_IT+0x474>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d072      	beq.n	80047ec <HAL_DMA_Start_IT+0x350>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a82      	ldr	r2, [pc, #520]	@ (8004914 <HAL_DMA_Start_IT+0x478>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d06d      	beq.n	80047ec <HAL_DMA_Start_IT+0x350>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a80      	ldr	r2, [pc, #512]	@ (8004918 <HAL_DMA_Start_IT+0x47c>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d068      	beq.n	80047ec <HAL_DMA_Start_IT+0x350>
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a7f      	ldr	r2, [pc, #508]	@ (800491c <HAL_DMA_Start_IT+0x480>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d063      	beq.n	80047ec <HAL_DMA_Start_IT+0x350>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a7d      	ldr	r2, [pc, #500]	@ (8004920 <HAL_DMA_Start_IT+0x484>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d05e      	beq.n	80047ec <HAL_DMA_Start_IT+0x350>
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a7c      	ldr	r2, [pc, #496]	@ (8004924 <HAL_DMA_Start_IT+0x488>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d059      	beq.n	80047ec <HAL_DMA_Start_IT+0x350>
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a7a      	ldr	r2, [pc, #488]	@ (8004928 <HAL_DMA_Start_IT+0x48c>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d054      	beq.n	80047ec <HAL_DMA_Start_IT+0x350>
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a79      	ldr	r2, [pc, #484]	@ (800492c <HAL_DMA_Start_IT+0x490>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d04f      	beq.n	80047ec <HAL_DMA_Start_IT+0x350>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a77      	ldr	r2, [pc, #476]	@ (8004930 <HAL_DMA_Start_IT+0x494>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d04a      	beq.n	80047ec <HAL_DMA_Start_IT+0x350>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a76      	ldr	r2, [pc, #472]	@ (8004934 <HAL_DMA_Start_IT+0x498>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d045      	beq.n	80047ec <HAL_DMA_Start_IT+0x350>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a74      	ldr	r2, [pc, #464]	@ (8004938 <HAL_DMA_Start_IT+0x49c>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d040      	beq.n	80047ec <HAL_DMA_Start_IT+0x350>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a73      	ldr	r2, [pc, #460]	@ (800493c <HAL_DMA_Start_IT+0x4a0>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d03b      	beq.n	80047ec <HAL_DMA_Start_IT+0x350>
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a71      	ldr	r2, [pc, #452]	@ (8004940 <HAL_DMA_Start_IT+0x4a4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d036      	beq.n	80047ec <HAL_DMA_Start_IT+0x350>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a70      	ldr	r2, [pc, #448]	@ (8004944 <HAL_DMA_Start_IT+0x4a8>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d031      	beq.n	80047ec <HAL_DMA_Start_IT+0x350>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a6e      	ldr	r2, [pc, #440]	@ (8004948 <HAL_DMA_Start_IT+0x4ac>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d02c      	beq.n	80047ec <HAL_DMA_Start_IT+0x350>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a6d      	ldr	r2, [pc, #436]	@ (800494c <HAL_DMA_Start_IT+0x4b0>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d027      	beq.n	80047ec <HAL_DMA_Start_IT+0x350>
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a6b      	ldr	r2, [pc, #428]	@ (8004950 <HAL_DMA_Start_IT+0x4b4>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d022      	beq.n	80047ec <HAL_DMA_Start_IT+0x350>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a6a      	ldr	r2, [pc, #424]	@ (8004954 <HAL_DMA_Start_IT+0x4b8>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d01d      	beq.n	80047ec <HAL_DMA_Start_IT+0x350>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a68      	ldr	r2, [pc, #416]	@ (8004958 <HAL_DMA_Start_IT+0x4bc>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d018      	beq.n	80047ec <HAL_DMA_Start_IT+0x350>
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a67      	ldr	r2, [pc, #412]	@ (800495c <HAL_DMA_Start_IT+0x4c0>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d013      	beq.n	80047ec <HAL_DMA_Start_IT+0x350>
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a65      	ldr	r2, [pc, #404]	@ (8004960 <HAL_DMA_Start_IT+0x4c4>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d00e      	beq.n	80047ec <HAL_DMA_Start_IT+0x350>
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a64      	ldr	r2, [pc, #400]	@ (8004964 <HAL_DMA_Start_IT+0x4c8>)
 80047d4:	4293      	cmp	r3, r2
 80047d6:	d009      	beq.n	80047ec <HAL_DMA_Start_IT+0x350>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a62      	ldr	r2, [pc, #392]	@ (8004968 <HAL_DMA_Start_IT+0x4cc>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d004      	beq.n	80047ec <HAL_DMA_Start_IT+0x350>
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a61      	ldr	r2, [pc, #388]	@ (800496c <HAL_DMA_Start_IT+0x4d0>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d101      	bne.n	80047f0 <HAL_DMA_Start_IT+0x354>
 80047ec:	2301      	movs	r3, #1
 80047ee:	e000      	b.n	80047f2 <HAL_DMA_Start_IT+0x356>
 80047f0:	2300      	movs	r3, #0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d01a      	beq.n	800482c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d007      	beq.n	8004814 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800480e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004812:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004818:	2b00      	cmp	r3, #0
 800481a:	d007      	beq.n	800482c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004826:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800482a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a37      	ldr	r2, [pc, #220]	@ (8004910 <HAL_DMA_Start_IT+0x474>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d04a      	beq.n	80048cc <HAL_DMA_Start_IT+0x430>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a36      	ldr	r2, [pc, #216]	@ (8004914 <HAL_DMA_Start_IT+0x478>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d045      	beq.n	80048cc <HAL_DMA_Start_IT+0x430>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a34      	ldr	r2, [pc, #208]	@ (8004918 <HAL_DMA_Start_IT+0x47c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d040      	beq.n	80048cc <HAL_DMA_Start_IT+0x430>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a33      	ldr	r2, [pc, #204]	@ (800491c <HAL_DMA_Start_IT+0x480>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d03b      	beq.n	80048cc <HAL_DMA_Start_IT+0x430>
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a31      	ldr	r2, [pc, #196]	@ (8004920 <HAL_DMA_Start_IT+0x484>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d036      	beq.n	80048cc <HAL_DMA_Start_IT+0x430>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a30      	ldr	r2, [pc, #192]	@ (8004924 <HAL_DMA_Start_IT+0x488>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d031      	beq.n	80048cc <HAL_DMA_Start_IT+0x430>
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a2e      	ldr	r2, [pc, #184]	@ (8004928 <HAL_DMA_Start_IT+0x48c>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d02c      	beq.n	80048cc <HAL_DMA_Start_IT+0x430>
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a2d      	ldr	r2, [pc, #180]	@ (800492c <HAL_DMA_Start_IT+0x490>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d027      	beq.n	80048cc <HAL_DMA_Start_IT+0x430>
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a2b      	ldr	r2, [pc, #172]	@ (8004930 <HAL_DMA_Start_IT+0x494>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d022      	beq.n	80048cc <HAL_DMA_Start_IT+0x430>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a2a      	ldr	r2, [pc, #168]	@ (8004934 <HAL_DMA_Start_IT+0x498>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d01d      	beq.n	80048cc <HAL_DMA_Start_IT+0x430>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a28      	ldr	r2, [pc, #160]	@ (8004938 <HAL_DMA_Start_IT+0x49c>)
 8004896:	4293      	cmp	r3, r2
 8004898:	d018      	beq.n	80048cc <HAL_DMA_Start_IT+0x430>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4a27      	ldr	r2, [pc, #156]	@ (800493c <HAL_DMA_Start_IT+0x4a0>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d013      	beq.n	80048cc <HAL_DMA_Start_IT+0x430>
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a25      	ldr	r2, [pc, #148]	@ (8004940 <HAL_DMA_Start_IT+0x4a4>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d00e      	beq.n	80048cc <HAL_DMA_Start_IT+0x430>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a24      	ldr	r2, [pc, #144]	@ (8004944 <HAL_DMA_Start_IT+0x4a8>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d009      	beq.n	80048cc <HAL_DMA_Start_IT+0x430>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a22      	ldr	r2, [pc, #136]	@ (8004948 <HAL_DMA_Start_IT+0x4ac>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d004      	beq.n	80048cc <HAL_DMA_Start_IT+0x430>
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4a21      	ldr	r2, [pc, #132]	@ (800494c <HAL_DMA_Start_IT+0x4b0>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d108      	bne.n	80048de <HAL_DMA_Start_IT+0x442>
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f042 0201 	orr.w	r2, r2, #1
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	e012      	b.n	8004904 <HAL_DMA_Start_IT+0x468>
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f042 0201 	orr.w	r2, r2, #1
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	e009      	b.n	8004904 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80048f6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004904:	7dfb      	ldrb	r3, [r7, #23]
}
 8004906:	4618      	mov	r0, r3
 8004908:	3718      	adds	r7, #24
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	40020010 	.word	0x40020010
 8004914:	40020028 	.word	0x40020028
 8004918:	40020040 	.word	0x40020040
 800491c:	40020058 	.word	0x40020058
 8004920:	40020070 	.word	0x40020070
 8004924:	40020088 	.word	0x40020088
 8004928:	400200a0 	.word	0x400200a0
 800492c:	400200b8 	.word	0x400200b8
 8004930:	40020410 	.word	0x40020410
 8004934:	40020428 	.word	0x40020428
 8004938:	40020440 	.word	0x40020440
 800493c:	40020458 	.word	0x40020458
 8004940:	40020470 	.word	0x40020470
 8004944:	40020488 	.word	0x40020488
 8004948:	400204a0 	.word	0x400204a0
 800494c:	400204b8 	.word	0x400204b8
 8004950:	58025408 	.word	0x58025408
 8004954:	5802541c 	.word	0x5802541c
 8004958:	58025430 	.word	0x58025430
 800495c:	58025444 	.word	0x58025444
 8004960:	58025458 	.word	0x58025458
 8004964:	5802546c 	.word	0x5802546c
 8004968:	58025480 	.word	0x58025480
 800496c:	58025494 	.word	0x58025494

08004970 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b08a      	sub	sp, #40	@ 0x28
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800497c:	4b67      	ldr	r3, [pc, #412]	@ (8004b1c <HAL_DMA_IRQHandler+0x1ac>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a67      	ldr	r2, [pc, #412]	@ (8004b20 <HAL_DMA_IRQHandler+0x1b0>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	0a9b      	lsrs	r3, r3, #10
 8004988:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800498e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004994:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004996:	6a3b      	ldr	r3, [r7, #32]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a5f      	ldr	r2, [pc, #380]	@ (8004b24 <HAL_DMA_IRQHandler+0x1b4>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d04a      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xd2>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a5d      	ldr	r2, [pc, #372]	@ (8004b28 <HAL_DMA_IRQHandler+0x1b8>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d045      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xd2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a5c      	ldr	r2, [pc, #368]	@ (8004b2c <HAL_DMA_IRQHandler+0x1bc>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d040      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xd2>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a5a      	ldr	r2, [pc, #360]	@ (8004b30 <HAL_DMA_IRQHandler+0x1c0>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d03b      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xd2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a59      	ldr	r2, [pc, #356]	@ (8004b34 <HAL_DMA_IRQHandler+0x1c4>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d036      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xd2>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a57      	ldr	r2, [pc, #348]	@ (8004b38 <HAL_DMA_IRQHandler+0x1c8>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d031      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xd2>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a56      	ldr	r2, [pc, #344]	@ (8004b3c <HAL_DMA_IRQHandler+0x1cc>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d02c      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xd2>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a54      	ldr	r2, [pc, #336]	@ (8004b40 <HAL_DMA_IRQHandler+0x1d0>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d027      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xd2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a53      	ldr	r2, [pc, #332]	@ (8004b44 <HAL_DMA_IRQHandler+0x1d4>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d022      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xd2>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a51      	ldr	r2, [pc, #324]	@ (8004b48 <HAL_DMA_IRQHandler+0x1d8>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d01d      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xd2>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a50      	ldr	r2, [pc, #320]	@ (8004b4c <HAL_DMA_IRQHandler+0x1dc>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d018      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xd2>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a4e      	ldr	r2, [pc, #312]	@ (8004b50 <HAL_DMA_IRQHandler+0x1e0>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d013      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xd2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a4d      	ldr	r2, [pc, #308]	@ (8004b54 <HAL_DMA_IRQHandler+0x1e4>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d00e      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xd2>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a4b      	ldr	r2, [pc, #300]	@ (8004b58 <HAL_DMA_IRQHandler+0x1e8>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d009      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xd2>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a4a      	ldr	r2, [pc, #296]	@ (8004b5c <HAL_DMA_IRQHandler+0x1ec>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d004      	beq.n	8004a42 <HAL_DMA_IRQHandler+0xd2>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a48      	ldr	r2, [pc, #288]	@ (8004b60 <HAL_DMA_IRQHandler+0x1f0>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d101      	bne.n	8004a46 <HAL_DMA_IRQHandler+0xd6>
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <HAL_DMA_IRQHandler+0xd8>
 8004a46:	2300      	movs	r3, #0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 842b 	beq.w	80052a4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a52:	f003 031f 	and.w	r3, r3, #31
 8004a56:	2208      	movs	r2, #8
 8004a58:	409a      	lsls	r2, r3
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 80a2 	beq.w	8004ba8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a2e      	ldr	r2, [pc, #184]	@ (8004b24 <HAL_DMA_IRQHandler+0x1b4>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d04a      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x194>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a2d      	ldr	r2, [pc, #180]	@ (8004b28 <HAL_DMA_IRQHandler+0x1b8>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d045      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x194>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a2b      	ldr	r2, [pc, #172]	@ (8004b2c <HAL_DMA_IRQHandler+0x1bc>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d040      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x194>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a2a      	ldr	r2, [pc, #168]	@ (8004b30 <HAL_DMA_IRQHandler+0x1c0>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d03b      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x194>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a28      	ldr	r2, [pc, #160]	@ (8004b34 <HAL_DMA_IRQHandler+0x1c4>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d036      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x194>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a27      	ldr	r2, [pc, #156]	@ (8004b38 <HAL_DMA_IRQHandler+0x1c8>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d031      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x194>
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a25      	ldr	r2, [pc, #148]	@ (8004b3c <HAL_DMA_IRQHandler+0x1cc>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d02c      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x194>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a24      	ldr	r2, [pc, #144]	@ (8004b40 <HAL_DMA_IRQHandler+0x1d0>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d027      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x194>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a22      	ldr	r2, [pc, #136]	@ (8004b44 <HAL_DMA_IRQHandler+0x1d4>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d022      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x194>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	4a21      	ldr	r2, [pc, #132]	@ (8004b48 <HAL_DMA_IRQHandler+0x1d8>)
 8004ac4:	4293      	cmp	r3, r2
 8004ac6:	d01d      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x194>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a1f      	ldr	r2, [pc, #124]	@ (8004b4c <HAL_DMA_IRQHandler+0x1dc>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d018      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x194>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8004b50 <HAL_DMA_IRQHandler+0x1e0>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d013      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x194>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a1c      	ldr	r2, [pc, #112]	@ (8004b54 <HAL_DMA_IRQHandler+0x1e4>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d00e      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x194>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a1b      	ldr	r2, [pc, #108]	@ (8004b58 <HAL_DMA_IRQHandler+0x1e8>)
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d009      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x194>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	4a19      	ldr	r2, [pc, #100]	@ (8004b5c <HAL_DMA_IRQHandler+0x1ec>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d004      	beq.n	8004b04 <HAL_DMA_IRQHandler+0x194>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a18      	ldr	r2, [pc, #96]	@ (8004b60 <HAL_DMA_IRQHandler+0x1f0>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d12f      	bne.n	8004b64 <HAL_DMA_IRQHandler+0x1f4>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0304 	and.w	r3, r3, #4
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	bf14      	ite	ne
 8004b12:	2301      	movne	r3, #1
 8004b14:	2300      	moveq	r3, #0
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	e02e      	b.n	8004b78 <HAL_DMA_IRQHandler+0x208>
 8004b1a:	bf00      	nop
 8004b1c:	24000000 	.word	0x24000000
 8004b20:	1b4e81b5 	.word	0x1b4e81b5
 8004b24:	40020010 	.word	0x40020010
 8004b28:	40020028 	.word	0x40020028
 8004b2c:	40020040 	.word	0x40020040
 8004b30:	40020058 	.word	0x40020058
 8004b34:	40020070 	.word	0x40020070
 8004b38:	40020088 	.word	0x40020088
 8004b3c:	400200a0 	.word	0x400200a0
 8004b40:	400200b8 	.word	0x400200b8
 8004b44:	40020410 	.word	0x40020410
 8004b48:	40020428 	.word	0x40020428
 8004b4c:	40020440 	.word	0x40020440
 8004b50:	40020458 	.word	0x40020458
 8004b54:	40020470 	.word	0x40020470
 8004b58:	40020488 	.word	0x40020488
 8004b5c:	400204a0 	.word	0x400204a0
 8004b60:	400204b8 	.word	0x400204b8
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0308 	and.w	r3, r3, #8
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	bf14      	ite	ne
 8004b72:	2301      	movne	r3, #1
 8004b74:	2300      	moveq	r3, #0
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d015      	beq.n	8004ba8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f022 0204 	bic.w	r2, r2, #4
 8004b8a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b90:	f003 031f 	and.w	r3, r3, #31
 8004b94:	2208      	movs	r2, #8
 8004b96:	409a      	lsls	r2, r3
 8004b98:	6a3b      	ldr	r3, [r7, #32]
 8004b9a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ba0:	f043 0201 	orr.w	r2, r3, #1
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004bac:	f003 031f 	and.w	r3, r3, #31
 8004bb0:	69ba      	ldr	r2, [r7, #24]
 8004bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb6:	f003 0301 	and.w	r3, r3, #1
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d06e      	beq.n	8004c9c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a69      	ldr	r2, [pc, #420]	@ (8004d68 <HAL_DMA_IRQHandler+0x3f8>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d04a      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x2ee>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a67      	ldr	r2, [pc, #412]	@ (8004d6c <HAL_DMA_IRQHandler+0x3fc>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d045      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x2ee>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a66      	ldr	r2, [pc, #408]	@ (8004d70 <HAL_DMA_IRQHandler+0x400>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d040      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x2ee>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a64      	ldr	r2, [pc, #400]	@ (8004d74 <HAL_DMA_IRQHandler+0x404>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d03b      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x2ee>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a63      	ldr	r2, [pc, #396]	@ (8004d78 <HAL_DMA_IRQHandler+0x408>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d036      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x2ee>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a61      	ldr	r2, [pc, #388]	@ (8004d7c <HAL_DMA_IRQHandler+0x40c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d031      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x2ee>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a60      	ldr	r2, [pc, #384]	@ (8004d80 <HAL_DMA_IRQHandler+0x410>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d02c      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x2ee>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a5e      	ldr	r2, [pc, #376]	@ (8004d84 <HAL_DMA_IRQHandler+0x414>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d027      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x2ee>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a5d      	ldr	r2, [pc, #372]	@ (8004d88 <HAL_DMA_IRQHandler+0x418>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d022      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x2ee>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a5b      	ldr	r2, [pc, #364]	@ (8004d8c <HAL_DMA_IRQHandler+0x41c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d01d      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x2ee>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a5a      	ldr	r2, [pc, #360]	@ (8004d90 <HAL_DMA_IRQHandler+0x420>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d018      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x2ee>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a58      	ldr	r2, [pc, #352]	@ (8004d94 <HAL_DMA_IRQHandler+0x424>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d013      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x2ee>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a57      	ldr	r2, [pc, #348]	@ (8004d98 <HAL_DMA_IRQHandler+0x428>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d00e      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x2ee>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a55      	ldr	r2, [pc, #340]	@ (8004d9c <HAL_DMA_IRQHandler+0x42c>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d009      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x2ee>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a54      	ldr	r2, [pc, #336]	@ (8004da0 <HAL_DMA_IRQHandler+0x430>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d004      	beq.n	8004c5e <HAL_DMA_IRQHandler+0x2ee>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a52      	ldr	r2, [pc, #328]	@ (8004da4 <HAL_DMA_IRQHandler+0x434>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d10a      	bne.n	8004c74 <HAL_DMA_IRQHandler+0x304>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	bf14      	ite	ne
 8004c6c:	2301      	movne	r3, #1
 8004c6e:	2300      	moveq	r3, #0
 8004c70:	b2db      	uxtb	r3, r3
 8004c72:	e003      	b.n	8004c7c <HAL_DMA_IRQHandler+0x30c>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00d      	beq.n	8004c9c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c84:	f003 031f 	and.w	r3, r3, #31
 8004c88:	2201      	movs	r2, #1
 8004c8a:	409a      	lsls	r2, r3
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
 8004c8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c94:	f043 0202 	orr.w	r2, r3, #2
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ca0:	f003 031f 	and.w	r3, r3, #31
 8004ca4:	2204      	movs	r2, #4
 8004ca6:	409a      	lsls	r2, r3
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	4013      	ands	r3, r2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	f000 808f 	beq.w	8004dd0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a2c      	ldr	r2, [pc, #176]	@ (8004d68 <HAL_DMA_IRQHandler+0x3f8>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d04a      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x3e2>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a2a      	ldr	r2, [pc, #168]	@ (8004d6c <HAL_DMA_IRQHandler+0x3fc>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d045      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x3e2>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a29      	ldr	r2, [pc, #164]	@ (8004d70 <HAL_DMA_IRQHandler+0x400>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d040      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x3e2>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a27      	ldr	r2, [pc, #156]	@ (8004d74 <HAL_DMA_IRQHandler+0x404>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d03b      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x3e2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a26      	ldr	r2, [pc, #152]	@ (8004d78 <HAL_DMA_IRQHandler+0x408>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d036      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x3e2>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a24      	ldr	r2, [pc, #144]	@ (8004d7c <HAL_DMA_IRQHandler+0x40c>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d031      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x3e2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a23      	ldr	r2, [pc, #140]	@ (8004d80 <HAL_DMA_IRQHandler+0x410>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d02c      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x3e2>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a21      	ldr	r2, [pc, #132]	@ (8004d84 <HAL_DMA_IRQHandler+0x414>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d027      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x3e2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a20      	ldr	r2, [pc, #128]	@ (8004d88 <HAL_DMA_IRQHandler+0x418>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d022      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x3e2>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a1e      	ldr	r2, [pc, #120]	@ (8004d8c <HAL_DMA_IRQHandler+0x41c>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d01d      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x3e2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8004d90 <HAL_DMA_IRQHandler+0x420>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d018      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x3e2>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a1b      	ldr	r2, [pc, #108]	@ (8004d94 <HAL_DMA_IRQHandler+0x424>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d013      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x3e2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8004d98 <HAL_DMA_IRQHandler+0x428>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d00e      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x3e2>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a18      	ldr	r2, [pc, #96]	@ (8004d9c <HAL_DMA_IRQHandler+0x42c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d009      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x3e2>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a17      	ldr	r2, [pc, #92]	@ (8004da0 <HAL_DMA_IRQHandler+0x430>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d004      	beq.n	8004d52 <HAL_DMA_IRQHandler+0x3e2>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a15      	ldr	r2, [pc, #84]	@ (8004da4 <HAL_DMA_IRQHandler+0x434>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d12a      	bne.n	8004da8 <HAL_DMA_IRQHandler+0x438>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	bf14      	ite	ne
 8004d60:	2301      	movne	r3, #1
 8004d62:	2300      	moveq	r3, #0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	e023      	b.n	8004db0 <HAL_DMA_IRQHandler+0x440>
 8004d68:	40020010 	.word	0x40020010
 8004d6c:	40020028 	.word	0x40020028
 8004d70:	40020040 	.word	0x40020040
 8004d74:	40020058 	.word	0x40020058
 8004d78:	40020070 	.word	0x40020070
 8004d7c:	40020088 	.word	0x40020088
 8004d80:	400200a0 	.word	0x400200a0
 8004d84:	400200b8 	.word	0x400200b8
 8004d88:	40020410 	.word	0x40020410
 8004d8c:	40020428 	.word	0x40020428
 8004d90:	40020440 	.word	0x40020440
 8004d94:	40020458 	.word	0x40020458
 8004d98:	40020470 	.word	0x40020470
 8004d9c:	40020488 	.word	0x40020488
 8004da0:	400204a0 	.word	0x400204a0
 8004da4:	400204b8 	.word	0x400204b8
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2300      	movs	r3, #0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00d      	beq.n	8004dd0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004db8:	f003 031f 	and.w	r3, r3, #31
 8004dbc:	2204      	movs	r2, #4
 8004dbe:	409a      	lsls	r2, r3
 8004dc0:	6a3b      	ldr	r3, [r7, #32]
 8004dc2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dc8:	f043 0204 	orr.w	r2, r3, #4
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dd4:	f003 031f 	and.w	r3, r3, #31
 8004dd8:	2210      	movs	r2, #16
 8004dda:	409a      	lsls	r2, r3
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	4013      	ands	r3, r2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 80a6 	beq.w	8004f32 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a85      	ldr	r2, [pc, #532]	@ (8005000 <HAL_DMA_IRQHandler+0x690>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d04a      	beq.n	8004e86 <HAL_DMA_IRQHandler+0x516>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a83      	ldr	r2, [pc, #524]	@ (8005004 <HAL_DMA_IRQHandler+0x694>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d045      	beq.n	8004e86 <HAL_DMA_IRQHandler+0x516>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a82      	ldr	r2, [pc, #520]	@ (8005008 <HAL_DMA_IRQHandler+0x698>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d040      	beq.n	8004e86 <HAL_DMA_IRQHandler+0x516>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a80      	ldr	r2, [pc, #512]	@ (800500c <HAL_DMA_IRQHandler+0x69c>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d03b      	beq.n	8004e86 <HAL_DMA_IRQHandler+0x516>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a7f      	ldr	r2, [pc, #508]	@ (8005010 <HAL_DMA_IRQHandler+0x6a0>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d036      	beq.n	8004e86 <HAL_DMA_IRQHandler+0x516>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a7d      	ldr	r2, [pc, #500]	@ (8005014 <HAL_DMA_IRQHandler+0x6a4>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d031      	beq.n	8004e86 <HAL_DMA_IRQHandler+0x516>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a7c      	ldr	r2, [pc, #496]	@ (8005018 <HAL_DMA_IRQHandler+0x6a8>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d02c      	beq.n	8004e86 <HAL_DMA_IRQHandler+0x516>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a7a      	ldr	r2, [pc, #488]	@ (800501c <HAL_DMA_IRQHandler+0x6ac>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d027      	beq.n	8004e86 <HAL_DMA_IRQHandler+0x516>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a79      	ldr	r2, [pc, #484]	@ (8005020 <HAL_DMA_IRQHandler+0x6b0>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d022      	beq.n	8004e86 <HAL_DMA_IRQHandler+0x516>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a77      	ldr	r2, [pc, #476]	@ (8005024 <HAL_DMA_IRQHandler+0x6b4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d01d      	beq.n	8004e86 <HAL_DMA_IRQHandler+0x516>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a76      	ldr	r2, [pc, #472]	@ (8005028 <HAL_DMA_IRQHandler+0x6b8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d018      	beq.n	8004e86 <HAL_DMA_IRQHandler+0x516>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a74      	ldr	r2, [pc, #464]	@ (800502c <HAL_DMA_IRQHandler+0x6bc>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d013      	beq.n	8004e86 <HAL_DMA_IRQHandler+0x516>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a73      	ldr	r2, [pc, #460]	@ (8005030 <HAL_DMA_IRQHandler+0x6c0>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d00e      	beq.n	8004e86 <HAL_DMA_IRQHandler+0x516>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a71      	ldr	r2, [pc, #452]	@ (8005034 <HAL_DMA_IRQHandler+0x6c4>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d009      	beq.n	8004e86 <HAL_DMA_IRQHandler+0x516>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a70      	ldr	r2, [pc, #448]	@ (8005038 <HAL_DMA_IRQHandler+0x6c8>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d004      	beq.n	8004e86 <HAL_DMA_IRQHandler+0x516>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a6e      	ldr	r2, [pc, #440]	@ (800503c <HAL_DMA_IRQHandler+0x6cc>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d10a      	bne.n	8004e9c <HAL_DMA_IRQHandler+0x52c>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0308 	and.w	r3, r3, #8
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	bf14      	ite	ne
 8004e94:	2301      	movne	r3, #1
 8004e96:	2300      	moveq	r3, #0
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	e009      	b.n	8004eb0 <HAL_DMA_IRQHandler+0x540>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f003 0304 	and.w	r3, r3, #4
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	bf14      	ite	ne
 8004eaa:	2301      	movne	r3, #1
 8004eac:	2300      	moveq	r3, #0
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d03e      	beq.n	8004f32 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004eb8:	f003 031f 	and.w	r3, r3, #31
 8004ebc:	2210      	movs	r2, #16
 8004ebe:	409a      	lsls	r2, r3
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d018      	beq.n	8004f04 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d108      	bne.n	8004ef2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d024      	beq.n	8004f32 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	4798      	blx	r3
 8004ef0:	e01f      	b.n	8004f32 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d01b      	beq.n	8004f32 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	4798      	blx	r3
 8004f02:	e016      	b.n	8004f32 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d107      	bne.n	8004f22 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f022 0208 	bic.w	r2, r2, #8
 8004f20:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d003      	beq.n	8004f32 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f36:	f003 031f 	and.w	r3, r3, #31
 8004f3a:	2220      	movs	r2, #32
 8004f3c:	409a      	lsls	r2, r3
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	4013      	ands	r3, r2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f000 8110 	beq.w	8005168 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a2c      	ldr	r2, [pc, #176]	@ (8005000 <HAL_DMA_IRQHandler+0x690>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d04a      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0x678>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a2b      	ldr	r2, [pc, #172]	@ (8005004 <HAL_DMA_IRQHandler+0x694>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d045      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0x678>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a29      	ldr	r2, [pc, #164]	@ (8005008 <HAL_DMA_IRQHandler+0x698>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d040      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0x678>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a28      	ldr	r2, [pc, #160]	@ (800500c <HAL_DMA_IRQHandler+0x69c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d03b      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0x678>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a26      	ldr	r2, [pc, #152]	@ (8005010 <HAL_DMA_IRQHandler+0x6a0>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d036      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0x678>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a25      	ldr	r2, [pc, #148]	@ (8005014 <HAL_DMA_IRQHandler+0x6a4>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d031      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0x678>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4a23      	ldr	r2, [pc, #140]	@ (8005018 <HAL_DMA_IRQHandler+0x6a8>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d02c      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0x678>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a22      	ldr	r2, [pc, #136]	@ (800501c <HAL_DMA_IRQHandler+0x6ac>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d027      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0x678>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	4a20      	ldr	r2, [pc, #128]	@ (8005020 <HAL_DMA_IRQHandler+0x6b0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d022      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0x678>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	4a1f      	ldr	r2, [pc, #124]	@ (8005024 <HAL_DMA_IRQHandler+0x6b4>)
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d01d      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0x678>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a1d      	ldr	r2, [pc, #116]	@ (8005028 <HAL_DMA_IRQHandler+0x6b8>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d018      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0x678>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a1c      	ldr	r2, [pc, #112]	@ (800502c <HAL_DMA_IRQHandler+0x6bc>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d013      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0x678>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a1a      	ldr	r2, [pc, #104]	@ (8005030 <HAL_DMA_IRQHandler+0x6c0>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d00e      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0x678>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a19      	ldr	r2, [pc, #100]	@ (8005034 <HAL_DMA_IRQHandler+0x6c4>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d009      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0x678>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a17      	ldr	r2, [pc, #92]	@ (8005038 <HAL_DMA_IRQHandler+0x6c8>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d004      	beq.n	8004fe8 <HAL_DMA_IRQHandler+0x678>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a16      	ldr	r2, [pc, #88]	@ (800503c <HAL_DMA_IRQHandler+0x6cc>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d12b      	bne.n	8005040 <HAL_DMA_IRQHandler+0x6d0>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0310 	and.w	r3, r3, #16
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	bf14      	ite	ne
 8004ff6:	2301      	movne	r3, #1
 8004ff8:	2300      	moveq	r3, #0
 8004ffa:	b2db      	uxtb	r3, r3
 8004ffc:	e02a      	b.n	8005054 <HAL_DMA_IRQHandler+0x6e4>
 8004ffe:	bf00      	nop
 8005000:	40020010 	.word	0x40020010
 8005004:	40020028 	.word	0x40020028
 8005008:	40020040 	.word	0x40020040
 800500c:	40020058 	.word	0x40020058
 8005010:	40020070 	.word	0x40020070
 8005014:	40020088 	.word	0x40020088
 8005018:	400200a0 	.word	0x400200a0
 800501c:	400200b8 	.word	0x400200b8
 8005020:	40020410 	.word	0x40020410
 8005024:	40020428 	.word	0x40020428
 8005028:	40020440 	.word	0x40020440
 800502c:	40020458 	.word	0x40020458
 8005030:	40020470 	.word	0x40020470
 8005034:	40020488 	.word	0x40020488
 8005038:	400204a0 	.word	0x400204a0
 800503c:	400204b8 	.word	0x400204b8
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	bf14      	ite	ne
 800504e:	2301      	movne	r3, #1
 8005050:	2300      	moveq	r3, #0
 8005052:	b2db      	uxtb	r3, r3
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 8087 	beq.w	8005168 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800505e:	f003 031f 	and.w	r3, r3, #31
 8005062:	2220      	movs	r2, #32
 8005064:	409a      	lsls	r2, r3
 8005066:	6a3b      	ldr	r3, [r7, #32]
 8005068:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b04      	cmp	r3, #4
 8005074:	d139      	bne.n	80050ea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0216 	bic.w	r2, r2, #22
 8005084:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	695a      	ldr	r2, [r3, #20]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005094:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800509a:	2b00      	cmp	r3, #0
 800509c:	d103      	bne.n	80050a6 <HAL_DMA_IRQHandler+0x736>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d007      	beq.n	80050b6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f022 0208 	bic.w	r2, r2, #8
 80050b4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050ba:	f003 031f 	and.w	r3, r3, #31
 80050be:	223f      	movs	r2, #63	@ 0x3f
 80050c0:	409a      	lsls	r2, r3
 80050c2:	6a3b      	ldr	r3, [r7, #32]
 80050c4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050da:	2b00      	cmp	r3, #0
 80050dc:	f000 834a 	beq.w	8005774 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	4798      	blx	r3
          }
          return;
 80050e8:	e344      	b.n	8005774 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d018      	beq.n	800512a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005102:	2b00      	cmp	r3, #0
 8005104:	d108      	bne.n	8005118 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800510a:	2b00      	cmp	r3, #0
 800510c:	d02c      	beq.n	8005168 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	4798      	blx	r3
 8005116:	e027      	b.n	8005168 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800511c:	2b00      	cmp	r3, #0
 800511e:	d023      	beq.n	8005168 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	4798      	blx	r3
 8005128:	e01e      	b.n	8005168 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005134:	2b00      	cmp	r3, #0
 8005136:	d10f      	bne.n	8005158 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0210 	bic.w	r2, r2, #16
 8005146:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800515c:	2b00      	cmp	r3, #0
 800515e:	d003      	beq.n	8005168 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800516c:	2b00      	cmp	r3, #0
 800516e:	f000 8306 	beq.w	800577e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	f000 8088 	beq.w	8005290 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2204      	movs	r2, #4
 8005184:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a7a      	ldr	r2, [pc, #488]	@ (8005378 <HAL_DMA_IRQHandler+0xa08>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d04a      	beq.n	8005228 <HAL_DMA_IRQHandler+0x8b8>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a79      	ldr	r2, [pc, #484]	@ (800537c <HAL_DMA_IRQHandler+0xa0c>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d045      	beq.n	8005228 <HAL_DMA_IRQHandler+0x8b8>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a77      	ldr	r2, [pc, #476]	@ (8005380 <HAL_DMA_IRQHandler+0xa10>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d040      	beq.n	8005228 <HAL_DMA_IRQHandler+0x8b8>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a76      	ldr	r2, [pc, #472]	@ (8005384 <HAL_DMA_IRQHandler+0xa14>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d03b      	beq.n	8005228 <HAL_DMA_IRQHandler+0x8b8>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a74      	ldr	r2, [pc, #464]	@ (8005388 <HAL_DMA_IRQHandler+0xa18>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d036      	beq.n	8005228 <HAL_DMA_IRQHandler+0x8b8>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a73      	ldr	r2, [pc, #460]	@ (800538c <HAL_DMA_IRQHandler+0xa1c>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d031      	beq.n	8005228 <HAL_DMA_IRQHandler+0x8b8>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a71      	ldr	r2, [pc, #452]	@ (8005390 <HAL_DMA_IRQHandler+0xa20>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d02c      	beq.n	8005228 <HAL_DMA_IRQHandler+0x8b8>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a70      	ldr	r2, [pc, #448]	@ (8005394 <HAL_DMA_IRQHandler+0xa24>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d027      	beq.n	8005228 <HAL_DMA_IRQHandler+0x8b8>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a6e      	ldr	r2, [pc, #440]	@ (8005398 <HAL_DMA_IRQHandler+0xa28>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d022      	beq.n	8005228 <HAL_DMA_IRQHandler+0x8b8>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a6d      	ldr	r2, [pc, #436]	@ (800539c <HAL_DMA_IRQHandler+0xa2c>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d01d      	beq.n	8005228 <HAL_DMA_IRQHandler+0x8b8>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a6b      	ldr	r2, [pc, #428]	@ (80053a0 <HAL_DMA_IRQHandler+0xa30>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d018      	beq.n	8005228 <HAL_DMA_IRQHandler+0x8b8>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a6a      	ldr	r2, [pc, #424]	@ (80053a4 <HAL_DMA_IRQHandler+0xa34>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d013      	beq.n	8005228 <HAL_DMA_IRQHandler+0x8b8>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a68      	ldr	r2, [pc, #416]	@ (80053a8 <HAL_DMA_IRQHandler+0xa38>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d00e      	beq.n	8005228 <HAL_DMA_IRQHandler+0x8b8>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a67      	ldr	r2, [pc, #412]	@ (80053ac <HAL_DMA_IRQHandler+0xa3c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d009      	beq.n	8005228 <HAL_DMA_IRQHandler+0x8b8>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a65      	ldr	r2, [pc, #404]	@ (80053b0 <HAL_DMA_IRQHandler+0xa40>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d004      	beq.n	8005228 <HAL_DMA_IRQHandler+0x8b8>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a64      	ldr	r2, [pc, #400]	@ (80053b4 <HAL_DMA_IRQHandler+0xa44>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d108      	bne.n	800523a <HAL_DMA_IRQHandler+0x8ca>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 0201 	bic.w	r2, r2, #1
 8005236:	601a      	str	r2, [r3, #0]
 8005238:	e007      	b.n	800524a <HAL_DMA_IRQHandler+0x8da>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f022 0201 	bic.w	r2, r2, #1
 8005248:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	3301      	adds	r3, #1
 800524e:	60fb      	str	r3, [r7, #12]
 8005250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005252:	429a      	cmp	r2, r3
 8005254:	d307      	bcc.n	8005266 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1f2      	bne.n	800524a <HAL_DMA_IRQHandler+0x8da>
 8005264:	e000      	b.n	8005268 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005266:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0301 	and.w	r3, r3, #1
 8005272:	2b00      	cmp	r3, #0
 8005274:	d004      	beq.n	8005280 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2203      	movs	r2, #3
 800527a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800527e:	e003      	b.n	8005288 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005294:	2b00      	cmp	r3, #0
 8005296:	f000 8272 	beq.w	800577e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	4798      	blx	r3
 80052a2:	e26c      	b.n	800577e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a43      	ldr	r2, [pc, #268]	@ (80053b8 <HAL_DMA_IRQHandler+0xa48>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d022      	beq.n	80052f4 <HAL_DMA_IRQHandler+0x984>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a42      	ldr	r2, [pc, #264]	@ (80053bc <HAL_DMA_IRQHandler+0xa4c>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d01d      	beq.n	80052f4 <HAL_DMA_IRQHandler+0x984>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a40      	ldr	r2, [pc, #256]	@ (80053c0 <HAL_DMA_IRQHandler+0xa50>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d018      	beq.n	80052f4 <HAL_DMA_IRQHandler+0x984>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a3f      	ldr	r2, [pc, #252]	@ (80053c4 <HAL_DMA_IRQHandler+0xa54>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d013      	beq.n	80052f4 <HAL_DMA_IRQHandler+0x984>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a3d      	ldr	r2, [pc, #244]	@ (80053c8 <HAL_DMA_IRQHandler+0xa58>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00e      	beq.n	80052f4 <HAL_DMA_IRQHandler+0x984>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a3c      	ldr	r2, [pc, #240]	@ (80053cc <HAL_DMA_IRQHandler+0xa5c>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d009      	beq.n	80052f4 <HAL_DMA_IRQHandler+0x984>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a3a      	ldr	r2, [pc, #232]	@ (80053d0 <HAL_DMA_IRQHandler+0xa60>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d004      	beq.n	80052f4 <HAL_DMA_IRQHandler+0x984>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a39      	ldr	r2, [pc, #228]	@ (80053d4 <HAL_DMA_IRQHandler+0xa64>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d101      	bne.n	80052f8 <HAL_DMA_IRQHandler+0x988>
 80052f4:	2301      	movs	r3, #1
 80052f6:	e000      	b.n	80052fa <HAL_DMA_IRQHandler+0x98a>
 80052f8:	2300      	movs	r3, #0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f000 823f 	beq.w	800577e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800530c:	f003 031f 	and.w	r3, r3, #31
 8005310:	2204      	movs	r2, #4
 8005312:	409a      	lsls	r2, r3
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	4013      	ands	r3, r2
 8005318:	2b00      	cmp	r3, #0
 800531a:	f000 80cd 	beq.w	80054b8 <HAL_DMA_IRQHandler+0xb48>
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 80c7 	beq.w	80054b8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800532e:	f003 031f 	and.w	r3, r3, #31
 8005332:	2204      	movs	r2, #4
 8005334:	409a      	lsls	r2, r3
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d049      	beq.n	80053d8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d109      	bne.n	8005362 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 8210 	beq.w	8005778 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005360:	e20a      	b.n	8005778 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 8206 	beq.w	8005778 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005374:	e200      	b.n	8005778 <HAL_DMA_IRQHandler+0xe08>
 8005376:	bf00      	nop
 8005378:	40020010 	.word	0x40020010
 800537c:	40020028 	.word	0x40020028
 8005380:	40020040 	.word	0x40020040
 8005384:	40020058 	.word	0x40020058
 8005388:	40020070 	.word	0x40020070
 800538c:	40020088 	.word	0x40020088
 8005390:	400200a0 	.word	0x400200a0
 8005394:	400200b8 	.word	0x400200b8
 8005398:	40020410 	.word	0x40020410
 800539c:	40020428 	.word	0x40020428
 80053a0:	40020440 	.word	0x40020440
 80053a4:	40020458 	.word	0x40020458
 80053a8:	40020470 	.word	0x40020470
 80053ac:	40020488 	.word	0x40020488
 80053b0:	400204a0 	.word	0x400204a0
 80053b4:	400204b8 	.word	0x400204b8
 80053b8:	58025408 	.word	0x58025408
 80053bc:	5802541c 	.word	0x5802541c
 80053c0:	58025430 	.word	0x58025430
 80053c4:	58025444 	.word	0x58025444
 80053c8:	58025458 	.word	0x58025458
 80053cc:	5802546c 	.word	0x5802546c
 80053d0:	58025480 	.word	0x58025480
 80053d4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	f003 0320 	and.w	r3, r3, #32
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d160      	bne.n	80054a4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a7f      	ldr	r2, [pc, #508]	@ (80055e4 <HAL_DMA_IRQHandler+0xc74>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d04a      	beq.n	8005482 <HAL_DMA_IRQHandler+0xb12>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a7d      	ldr	r2, [pc, #500]	@ (80055e8 <HAL_DMA_IRQHandler+0xc78>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d045      	beq.n	8005482 <HAL_DMA_IRQHandler+0xb12>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a7c      	ldr	r2, [pc, #496]	@ (80055ec <HAL_DMA_IRQHandler+0xc7c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d040      	beq.n	8005482 <HAL_DMA_IRQHandler+0xb12>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a7a      	ldr	r2, [pc, #488]	@ (80055f0 <HAL_DMA_IRQHandler+0xc80>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d03b      	beq.n	8005482 <HAL_DMA_IRQHandler+0xb12>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a79      	ldr	r2, [pc, #484]	@ (80055f4 <HAL_DMA_IRQHandler+0xc84>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d036      	beq.n	8005482 <HAL_DMA_IRQHandler+0xb12>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a77      	ldr	r2, [pc, #476]	@ (80055f8 <HAL_DMA_IRQHandler+0xc88>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d031      	beq.n	8005482 <HAL_DMA_IRQHandler+0xb12>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a76      	ldr	r2, [pc, #472]	@ (80055fc <HAL_DMA_IRQHandler+0xc8c>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d02c      	beq.n	8005482 <HAL_DMA_IRQHandler+0xb12>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a74      	ldr	r2, [pc, #464]	@ (8005600 <HAL_DMA_IRQHandler+0xc90>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d027      	beq.n	8005482 <HAL_DMA_IRQHandler+0xb12>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a73      	ldr	r2, [pc, #460]	@ (8005604 <HAL_DMA_IRQHandler+0xc94>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d022      	beq.n	8005482 <HAL_DMA_IRQHandler+0xb12>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a71      	ldr	r2, [pc, #452]	@ (8005608 <HAL_DMA_IRQHandler+0xc98>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d01d      	beq.n	8005482 <HAL_DMA_IRQHandler+0xb12>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a70      	ldr	r2, [pc, #448]	@ (800560c <HAL_DMA_IRQHandler+0xc9c>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d018      	beq.n	8005482 <HAL_DMA_IRQHandler+0xb12>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a6e      	ldr	r2, [pc, #440]	@ (8005610 <HAL_DMA_IRQHandler+0xca0>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d013      	beq.n	8005482 <HAL_DMA_IRQHandler+0xb12>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a6d      	ldr	r2, [pc, #436]	@ (8005614 <HAL_DMA_IRQHandler+0xca4>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d00e      	beq.n	8005482 <HAL_DMA_IRQHandler+0xb12>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a6b      	ldr	r2, [pc, #428]	@ (8005618 <HAL_DMA_IRQHandler+0xca8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d009      	beq.n	8005482 <HAL_DMA_IRQHandler+0xb12>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a6a      	ldr	r2, [pc, #424]	@ (800561c <HAL_DMA_IRQHandler+0xcac>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d004      	beq.n	8005482 <HAL_DMA_IRQHandler+0xb12>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a68      	ldr	r2, [pc, #416]	@ (8005620 <HAL_DMA_IRQHandler+0xcb0>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d108      	bne.n	8005494 <HAL_DMA_IRQHandler+0xb24>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 0208 	bic.w	r2, r2, #8
 8005490:	601a      	str	r2, [r3, #0]
 8005492:	e007      	b.n	80054a4 <HAL_DMA_IRQHandler+0xb34>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 0204 	bic.w	r2, r2, #4
 80054a2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f000 8165 	beq.w	8005778 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054b6:	e15f      	b.n	8005778 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054bc:	f003 031f 	and.w	r3, r3, #31
 80054c0:	2202      	movs	r2, #2
 80054c2:	409a      	lsls	r2, r3
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	4013      	ands	r3, r2
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	f000 80c5 	beq.w	8005658 <HAL_DMA_IRQHandler+0xce8>
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	f003 0302 	and.w	r3, r3, #2
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	f000 80bf 	beq.w	8005658 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054de:	f003 031f 	and.w	r3, r3, #31
 80054e2:	2202      	movs	r2, #2
 80054e4:	409a      	lsls	r2, r3
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d018      	beq.n	8005526 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d109      	bne.n	8005512 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 813a 	beq.w	800577c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005510:	e134      	b.n	800577c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 8130 	beq.w	800577c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005524:	e12a      	b.n	800577c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005526:	693b      	ldr	r3, [r7, #16]
 8005528:	f003 0320 	and.w	r3, r3, #32
 800552c:	2b00      	cmp	r3, #0
 800552e:	f040 8089 	bne.w	8005644 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a2b      	ldr	r2, [pc, #172]	@ (80055e4 <HAL_DMA_IRQHandler+0xc74>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d04a      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xc62>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a29      	ldr	r2, [pc, #164]	@ (80055e8 <HAL_DMA_IRQHandler+0xc78>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d045      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xc62>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a28      	ldr	r2, [pc, #160]	@ (80055ec <HAL_DMA_IRQHandler+0xc7c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d040      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xc62>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a26      	ldr	r2, [pc, #152]	@ (80055f0 <HAL_DMA_IRQHandler+0xc80>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d03b      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xc62>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a25      	ldr	r2, [pc, #148]	@ (80055f4 <HAL_DMA_IRQHandler+0xc84>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d036      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xc62>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a23      	ldr	r2, [pc, #140]	@ (80055f8 <HAL_DMA_IRQHandler+0xc88>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d031      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xc62>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a22      	ldr	r2, [pc, #136]	@ (80055fc <HAL_DMA_IRQHandler+0xc8c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d02c      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xc62>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a20      	ldr	r2, [pc, #128]	@ (8005600 <HAL_DMA_IRQHandler+0xc90>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d027      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xc62>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a1f      	ldr	r2, [pc, #124]	@ (8005604 <HAL_DMA_IRQHandler+0xc94>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d022      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xc62>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a1d      	ldr	r2, [pc, #116]	@ (8005608 <HAL_DMA_IRQHandler+0xc98>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d01d      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xc62>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a1c      	ldr	r2, [pc, #112]	@ (800560c <HAL_DMA_IRQHandler+0xc9c>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d018      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xc62>
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4a1a      	ldr	r2, [pc, #104]	@ (8005610 <HAL_DMA_IRQHandler+0xca0>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d013      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xc62>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a19      	ldr	r2, [pc, #100]	@ (8005614 <HAL_DMA_IRQHandler+0xca4>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d00e      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xc62>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	4a17      	ldr	r2, [pc, #92]	@ (8005618 <HAL_DMA_IRQHandler+0xca8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d009      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xc62>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a16      	ldr	r2, [pc, #88]	@ (800561c <HAL_DMA_IRQHandler+0xcac>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d004      	beq.n	80055d2 <HAL_DMA_IRQHandler+0xc62>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a14      	ldr	r2, [pc, #80]	@ (8005620 <HAL_DMA_IRQHandler+0xcb0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d128      	bne.n	8005624 <HAL_DMA_IRQHandler+0xcb4>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681a      	ldr	r2, [r3, #0]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f022 0214 	bic.w	r2, r2, #20
 80055e0:	601a      	str	r2, [r3, #0]
 80055e2:	e027      	b.n	8005634 <HAL_DMA_IRQHandler+0xcc4>
 80055e4:	40020010 	.word	0x40020010
 80055e8:	40020028 	.word	0x40020028
 80055ec:	40020040 	.word	0x40020040
 80055f0:	40020058 	.word	0x40020058
 80055f4:	40020070 	.word	0x40020070
 80055f8:	40020088 	.word	0x40020088
 80055fc:	400200a0 	.word	0x400200a0
 8005600:	400200b8 	.word	0x400200b8
 8005604:	40020410 	.word	0x40020410
 8005608:	40020428 	.word	0x40020428
 800560c:	40020440 	.word	0x40020440
 8005610:	40020458 	.word	0x40020458
 8005614:	40020470 	.word	0x40020470
 8005618:	40020488 	.word	0x40020488
 800561c:	400204a0 	.word	0x400204a0
 8005620:	400204b8 	.word	0x400204b8
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f022 020a 	bic.w	r2, r2, #10
 8005632:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2200      	movs	r2, #0
 8005640:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005648:	2b00      	cmp	r3, #0
 800564a:	f000 8097 	beq.w	800577c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005656:	e091      	b.n	800577c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800565c:	f003 031f 	and.w	r3, r3, #31
 8005660:	2208      	movs	r2, #8
 8005662:	409a      	lsls	r2, r3
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	4013      	ands	r3, r2
 8005668:	2b00      	cmp	r3, #0
 800566a:	f000 8088 	beq.w	800577e <HAL_DMA_IRQHandler+0xe0e>
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	f003 0308 	and.w	r3, r3, #8
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 8082 	beq.w	800577e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a41      	ldr	r2, [pc, #260]	@ (8005784 <HAL_DMA_IRQHandler+0xe14>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d04a      	beq.n	800571a <HAL_DMA_IRQHandler+0xdaa>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a3f      	ldr	r2, [pc, #252]	@ (8005788 <HAL_DMA_IRQHandler+0xe18>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d045      	beq.n	800571a <HAL_DMA_IRQHandler+0xdaa>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4a3e      	ldr	r2, [pc, #248]	@ (800578c <HAL_DMA_IRQHandler+0xe1c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d040      	beq.n	800571a <HAL_DMA_IRQHandler+0xdaa>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a3c      	ldr	r2, [pc, #240]	@ (8005790 <HAL_DMA_IRQHandler+0xe20>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d03b      	beq.n	800571a <HAL_DMA_IRQHandler+0xdaa>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a3b      	ldr	r2, [pc, #236]	@ (8005794 <HAL_DMA_IRQHandler+0xe24>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d036      	beq.n	800571a <HAL_DMA_IRQHandler+0xdaa>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4a39      	ldr	r2, [pc, #228]	@ (8005798 <HAL_DMA_IRQHandler+0xe28>)
 80056b2:	4293      	cmp	r3, r2
 80056b4:	d031      	beq.n	800571a <HAL_DMA_IRQHandler+0xdaa>
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	4a38      	ldr	r2, [pc, #224]	@ (800579c <HAL_DMA_IRQHandler+0xe2c>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d02c      	beq.n	800571a <HAL_DMA_IRQHandler+0xdaa>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4a36      	ldr	r2, [pc, #216]	@ (80057a0 <HAL_DMA_IRQHandler+0xe30>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d027      	beq.n	800571a <HAL_DMA_IRQHandler+0xdaa>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4a35      	ldr	r2, [pc, #212]	@ (80057a4 <HAL_DMA_IRQHandler+0xe34>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d022      	beq.n	800571a <HAL_DMA_IRQHandler+0xdaa>
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a33      	ldr	r2, [pc, #204]	@ (80057a8 <HAL_DMA_IRQHandler+0xe38>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d01d      	beq.n	800571a <HAL_DMA_IRQHandler+0xdaa>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a32      	ldr	r2, [pc, #200]	@ (80057ac <HAL_DMA_IRQHandler+0xe3c>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d018      	beq.n	800571a <HAL_DMA_IRQHandler+0xdaa>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a30      	ldr	r2, [pc, #192]	@ (80057b0 <HAL_DMA_IRQHandler+0xe40>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d013      	beq.n	800571a <HAL_DMA_IRQHandler+0xdaa>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a2f      	ldr	r2, [pc, #188]	@ (80057b4 <HAL_DMA_IRQHandler+0xe44>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d00e      	beq.n	800571a <HAL_DMA_IRQHandler+0xdaa>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a2d      	ldr	r2, [pc, #180]	@ (80057b8 <HAL_DMA_IRQHandler+0xe48>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d009      	beq.n	800571a <HAL_DMA_IRQHandler+0xdaa>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a2c      	ldr	r2, [pc, #176]	@ (80057bc <HAL_DMA_IRQHandler+0xe4c>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d004      	beq.n	800571a <HAL_DMA_IRQHandler+0xdaa>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a2a      	ldr	r2, [pc, #168]	@ (80057c0 <HAL_DMA_IRQHandler+0xe50>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d108      	bne.n	800572c <HAL_DMA_IRQHandler+0xdbc>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f022 021c 	bic.w	r2, r2, #28
 8005728:	601a      	str	r2, [r3, #0]
 800572a:	e007      	b.n	800573c <HAL_DMA_IRQHandler+0xdcc>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 020e 	bic.w	r2, r2, #14
 800573a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005740:	f003 031f 	and.w	r3, r3, #31
 8005744:	2201      	movs	r2, #1
 8005746:	409a      	lsls	r2, r3
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005766:	2b00      	cmp	r3, #0
 8005768:	d009      	beq.n	800577e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	4798      	blx	r3
 8005772:	e004      	b.n	800577e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005774:	bf00      	nop
 8005776:	e002      	b.n	800577e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005778:	bf00      	nop
 800577a:	e000      	b.n	800577e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800577c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800577e:	3728      	adds	r7, #40	@ 0x28
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	40020010 	.word	0x40020010
 8005788:	40020028 	.word	0x40020028
 800578c:	40020040 	.word	0x40020040
 8005790:	40020058 	.word	0x40020058
 8005794:	40020070 	.word	0x40020070
 8005798:	40020088 	.word	0x40020088
 800579c:	400200a0 	.word	0x400200a0
 80057a0:	400200b8 	.word	0x400200b8
 80057a4:	40020410 	.word	0x40020410
 80057a8:	40020428 	.word	0x40020428
 80057ac:	40020440 	.word	0x40020440
 80057b0:	40020458 	.word	0x40020458
 80057b4:	40020470 	.word	0x40020470
 80057b8:	40020488 	.word	0x40020488
 80057bc:	400204a0 	.word	0x400204a0
 80057c0:	400204b8 	.word	0x400204b8

080057c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80057c4:	b480      	push	{r7}
 80057c6:	b087      	sub	sp, #28
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
 80057d0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057d6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057dc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a7f      	ldr	r2, [pc, #508]	@ (80059e0 <DMA_SetConfig+0x21c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d072      	beq.n	80058ce <DMA_SetConfig+0x10a>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a7d      	ldr	r2, [pc, #500]	@ (80059e4 <DMA_SetConfig+0x220>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d06d      	beq.n	80058ce <DMA_SetConfig+0x10a>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a7c      	ldr	r2, [pc, #496]	@ (80059e8 <DMA_SetConfig+0x224>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d068      	beq.n	80058ce <DMA_SetConfig+0x10a>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a7a      	ldr	r2, [pc, #488]	@ (80059ec <DMA_SetConfig+0x228>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d063      	beq.n	80058ce <DMA_SetConfig+0x10a>
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a79      	ldr	r2, [pc, #484]	@ (80059f0 <DMA_SetConfig+0x22c>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d05e      	beq.n	80058ce <DMA_SetConfig+0x10a>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a77      	ldr	r2, [pc, #476]	@ (80059f4 <DMA_SetConfig+0x230>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d059      	beq.n	80058ce <DMA_SetConfig+0x10a>
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a76      	ldr	r2, [pc, #472]	@ (80059f8 <DMA_SetConfig+0x234>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d054      	beq.n	80058ce <DMA_SetConfig+0x10a>
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a74      	ldr	r2, [pc, #464]	@ (80059fc <DMA_SetConfig+0x238>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d04f      	beq.n	80058ce <DMA_SetConfig+0x10a>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a73      	ldr	r2, [pc, #460]	@ (8005a00 <DMA_SetConfig+0x23c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d04a      	beq.n	80058ce <DMA_SetConfig+0x10a>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a71      	ldr	r2, [pc, #452]	@ (8005a04 <DMA_SetConfig+0x240>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d045      	beq.n	80058ce <DMA_SetConfig+0x10a>
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a70      	ldr	r2, [pc, #448]	@ (8005a08 <DMA_SetConfig+0x244>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d040      	beq.n	80058ce <DMA_SetConfig+0x10a>
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a6e      	ldr	r2, [pc, #440]	@ (8005a0c <DMA_SetConfig+0x248>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d03b      	beq.n	80058ce <DMA_SetConfig+0x10a>
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	4a6d      	ldr	r2, [pc, #436]	@ (8005a10 <DMA_SetConfig+0x24c>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d036      	beq.n	80058ce <DMA_SetConfig+0x10a>
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a6b      	ldr	r2, [pc, #428]	@ (8005a14 <DMA_SetConfig+0x250>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d031      	beq.n	80058ce <DMA_SetConfig+0x10a>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a6a      	ldr	r2, [pc, #424]	@ (8005a18 <DMA_SetConfig+0x254>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d02c      	beq.n	80058ce <DMA_SetConfig+0x10a>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a68      	ldr	r2, [pc, #416]	@ (8005a1c <DMA_SetConfig+0x258>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d027      	beq.n	80058ce <DMA_SetConfig+0x10a>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a67      	ldr	r2, [pc, #412]	@ (8005a20 <DMA_SetConfig+0x25c>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d022      	beq.n	80058ce <DMA_SetConfig+0x10a>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a65      	ldr	r2, [pc, #404]	@ (8005a24 <DMA_SetConfig+0x260>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d01d      	beq.n	80058ce <DMA_SetConfig+0x10a>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a64      	ldr	r2, [pc, #400]	@ (8005a28 <DMA_SetConfig+0x264>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d018      	beq.n	80058ce <DMA_SetConfig+0x10a>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a62      	ldr	r2, [pc, #392]	@ (8005a2c <DMA_SetConfig+0x268>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d013      	beq.n	80058ce <DMA_SetConfig+0x10a>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a61      	ldr	r2, [pc, #388]	@ (8005a30 <DMA_SetConfig+0x26c>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d00e      	beq.n	80058ce <DMA_SetConfig+0x10a>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a5f      	ldr	r2, [pc, #380]	@ (8005a34 <DMA_SetConfig+0x270>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d009      	beq.n	80058ce <DMA_SetConfig+0x10a>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a5e      	ldr	r2, [pc, #376]	@ (8005a38 <DMA_SetConfig+0x274>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d004      	beq.n	80058ce <DMA_SetConfig+0x10a>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a5c      	ldr	r2, [pc, #368]	@ (8005a3c <DMA_SetConfig+0x278>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d101      	bne.n	80058d2 <DMA_SetConfig+0x10e>
 80058ce:	2301      	movs	r3, #1
 80058d0:	e000      	b.n	80058d4 <DMA_SetConfig+0x110>
 80058d2:	2300      	movs	r3, #0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00d      	beq.n	80058f4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80058e0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d004      	beq.n	80058f4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80058f2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a39      	ldr	r2, [pc, #228]	@ (80059e0 <DMA_SetConfig+0x21c>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d04a      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a38      	ldr	r2, [pc, #224]	@ (80059e4 <DMA_SetConfig+0x220>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d045      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a36      	ldr	r2, [pc, #216]	@ (80059e8 <DMA_SetConfig+0x224>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d040      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a35      	ldr	r2, [pc, #212]	@ (80059ec <DMA_SetConfig+0x228>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d03b      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a33      	ldr	r2, [pc, #204]	@ (80059f0 <DMA_SetConfig+0x22c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d036      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a32      	ldr	r2, [pc, #200]	@ (80059f4 <DMA_SetConfig+0x230>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d031      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a30      	ldr	r2, [pc, #192]	@ (80059f8 <DMA_SetConfig+0x234>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d02c      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a2f      	ldr	r2, [pc, #188]	@ (80059fc <DMA_SetConfig+0x238>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d027      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a2d      	ldr	r2, [pc, #180]	@ (8005a00 <DMA_SetConfig+0x23c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d022      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a2c      	ldr	r2, [pc, #176]	@ (8005a04 <DMA_SetConfig+0x240>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d01d      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a2a      	ldr	r2, [pc, #168]	@ (8005a08 <DMA_SetConfig+0x244>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d018      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a29      	ldr	r2, [pc, #164]	@ (8005a0c <DMA_SetConfig+0x248>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d013      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a27      	ldr	r2, [pc, #156]	@ (8005a10 <DMA_SetConfig+0x24c>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d00e      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a26      	ldr	r2, [pc, #152]	@ (8005a14 <DMA_SetConfig+0x250>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d009      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a24      	ldr	r2, [pc, #144]	@ (8005a18 <DMA_SetConfig+0x254>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d004      	beq.n	8005994 <DMA_SetConfig+0x1d0>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a23      	ldr	r2, [pc, #140]	@ (8005a1c <DMA_SetConfig+0x258>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d101      	bne.n	8005998 <DMA_SetConfig+0x1d4>
 8005994:	2301      	movs	r3, #1
 8005996:	e000      	b.n	800599a <DMA_SetConfig+0x1d6>
 8005998:	2300      	movs	r3, #0
 800599a:	2b00      	cmp	r3, #0
 800599c:	d059      	beq.n	8005a52 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059a2:	f003 031f 	and.w	r3, r3, #31
 80059a6:	223f      	movs	r2, #63	@ 0x3f
 80059a8:	409a      	lsls	r2, r3
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	681a      	ldr	r2, [r3, #0]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80059bc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	2b40      	cmp	r3, #64	@ 0x40
 80059cc:	d138      	bne.n	8005a40 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80059de:	e086      	b.n	8005aee <DMA_SetConfig+0x32a>
 80059e0:	40020010 	.word	0x40020010
 80059e4:	40020028 	.word	0x40020028
 80059e8:	40020040 	.word	0x40020040
 80059ec:	40020058 	.word	0x40020058
 80059f0:	40020070 	.word	0x40020070
 80059f4:	40020088 	.word	0x40020088
 80059f8:	400200a0 	.word	0x400200a0
 80059fc:	400200b8 	.word	0x400200b8
 8005a00:	40020410 	.word	0x40020410
 8005a04:	40020428 	.word	0x40020428
 8005a08:	40020440 	.word	0x40020440
 8005a0c:	40020458 	.word	0x40020458
 8005a10:	40020470 	.word	0x40020470
 8005a14:	40020488 	.word	0x40020488
 8005a18:	400204a0 	.word	0x400204a0
 8005a1c:	400204b8 	.word	0x400204b8
 8005a20:	58025408 	.word	0x58025408
 8005a24:	5802541c 	.word	0x5802541c
 8005a28:	58025430 	.word	0x58025430
 8005a2c:	58025444 	.word	0x58025444
 8005a30:	58025458 	.word	0x58025458
 8005a34:	5802546c 	.word	0x5802546c
 8005a38:	58025480 	.word	0x58025480
 8005a3c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	687a      	ldr	r2, [r7, #4]
 8005a4e:	60da      	str	r2, [r3, #12]
}
 8005a50:	e04d      	b.n	8005aee <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a29      	ldr	r2, [pc, #164]	@ (8005afc <DMA_SetConfig+0x338>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d022      	beq.n	8005aa2 <DMA_SetConfig+0x2de>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a27      	ldr	r2, [pc, #156]	@ (8005b00 <DMA_SetConfig+0x33c>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d01d      	beq.n	8005aa2 <DMA_SetConfig+0x2de>
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a26      	ldr	r2, [pc, #152]	@ (8005b04 <DMA_SetConfig+0x340>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d018      	beq.n	8005aa2 <DMA_SetConfig+0x2de>
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a24      	ldr	r2, [pc, #144]	@ (8005b08 <DMA_SetConfig+0x344>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d013      	beq.n	8005aa2 <DMA_SetConfig+0x2de>
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a23      	ldr	r2, [pc, #140]	@ (8005b0c <DMA_SetConfig+0x348>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d00e      	beq.n	8005aa2 <DMA_SetConfig+0x2de>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a21      	ldr	r2, [pc, #132]	@ (8005b10 <DMA_SetConfig+0x34c>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d009      	beq.n	8005aa2 <DMA_SetConfig+0x2de>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a20      	ldr	r2, [pc, #128]	@ (8005b14 <DMA_SetConfig+0x350>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d004      	beq.n	8005aa2 <DMA_SetConfig+0x2de>
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a1e      	ldr	r2, [pc, #120]	@ (8005b18 <DMA_SetConfig+0x354>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d101      	bne.n	8005aa6 <DMA_SetConfig+0x2e2>
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e000      	b.n	8005aa8 <DMA_SetConfig+0x2e4>
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d020      	beq.n	8005aee <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ab0:	f003 031f 	and.w	r3, r3, #31
 8005ab4:	2201      	movs	r2, #1
 8005ab6:	409a      	lsls	r2, r3
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	683a      	ldr	r2, [r7, #0]
 8005ac2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	2b40      	cmp	r3, #64	@ 0x40
 8005aca:	d108      	bne.n	8005ade <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	60da      	str	r2, [r3, #12]
}
 8005adc:	e007      	b.n	8005aee <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	60da      	str	r2, [r3, #12]
}
 8005aee:	bf00      	nop
 8005af0:	371c      	adds	r7, #28
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
 8005afa:	bf00      	nop
 8005afc:	58025408 	.word	0x58025408
 8005b00:	5802541c 	.word	0x5802541c
 8005b04:	58025430 	.word	0x58025430
 8005b08:	58025444 	.word	0x58025444
 8005b0c:	58025458 	.word	0x58025458
 8005b10:	5802546c 	.word	0x5802546c
 8005b14:	58025480 	.word	0x58025480
 8005b18:	58025494 	.word	0x58025494

08005b1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005b1c:	b480      	push	{r7}
 8005b1e:	b085      	sub	sp, #20
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a42      	ldr	r2, [pc, #264]	@ (8005c34 <DMA_CalcBaseAndBitshift+0x118>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d04a      	beq.n	8005bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a41      	ldr	r2, [pc, #260]	@ (8005c38 <DMA_CalcBaseAndBitshift+0x11c>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d045      	beq.n	8005bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a3f      	ldr	r2, [pc, #252]	@ (8005c3c <DMA_CalcBaseAndBitshift+0x120>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d040      	beq.n	8005bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a3e      	ldr	r2, [pc, #248]	@ (8005c40 <DMA_CalcBaseAndBitshift+0x124>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d03b      	beq.n	8005bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a3c      	ldr	r2, [pc, #240]	@ (8005c44 <DMA_CalcBaseAndBitshift+0x128>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d036      	beq.n	8005bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a3b      	ldr	r2, [pc, #236]	@ (8005c48 <DMA_CalcBaseAndBitshift+0x12c>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d031      	beq.n	8005bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a39      	ldr	r2, [pc, #228]	@ (8005c4c <DMA_CalcBaseAndBitshift+0x130>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d02c      	beq.n	8005bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a38      	ldr	r2, [pc, #224]	@ (8005c50 <DMA_CalcBaseAndBitshift+0x134>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d027      	beq.n	8005bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	4a36      	ldr	r2, [pc, #216]	@ (8005c54 <DMA_CalcBaseAndBitshift+0x138>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d022      	beq.n	8005bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	4a35      	ldr	r2, [pc, #212]	@ (8005c58 <DMA_CalcBaseAndBitshift+0x13c>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d01d      	beq.n	8005bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4a33      	ldr	r2, [pc, #204]	@ (8005c5c <DMA_CalcBaseAndBitshift+0x140>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d018      	beq.n	8005bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a32      	ldr	r2, [pc, #200]	@ (8005c60 <DMA_CalcBaseAndBitshift+0x144>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d013      	beq.n	8005bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a30      	ldr	r2, [pc, #192]	@ (8005c64 <DMA_CalcBaseAndBitshift+0x148>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d00e      	beq.n	8005bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a2f      	ldr	r2, [pc, #188]	@ (8005c68 <DMA_CalcBaseAndBitshift+0x14c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d009      	beq.n	8005bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a2d      	ldr	r2, [pc, #180]	@ (8005c6c <DMA_CalcBaseAndBitshift+0x150>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d004      	beq.n	8005bc4 <DMA_CalcBaseAndBitshift+0xa8>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a2c      	ldr	r2, [pc, #176]	@ (8005c70 <DMA_CalcBaseAndBitshift+0x154>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d101      	bne.n	8005bc8 <DMA_CalcBaseAndBitshift+0xac>
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e000      	b.n	8005bca <DMA_CalcBaseAndBitshift+0xae>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d024      	beq.n	8005c18 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	3b10      	subs	r3, #16
 8005bd6:	4a27      	ldr	r2, [pc, #156]	@ (8005c74 <DMA_CalcBaseAndBitshift+0x158>)
 8005bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bdc:	091b      	lsrs	r3, r3, #4
 8005bde:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f003 0307 	and.w	r3, r3, #7
 8005be6:	4a24      	ldr	r2, [pc, #144]	@ (8005c78 <DMA_CalcBaseAndBitshift+0x15c>)
 8005be8:	5cd3      	ldrb	r3, [r2, r3]
 8005bea:	461a      	mov	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	2b03      	cmp	r3, #3
 8005bf4:	d908      	bls.n	8005c08 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	461a      	mov	r2, r3
 8005bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8005c7c <DMA_CalcBaseAndBitshift+0x160>)
 8005bfe:	4013      	ands	r3, r2
 8005c00:	1d1a      	adds	r2, r3, #4
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	659a      	str	r2, [r3, #88]	@ 0x58
 8005c06:	e00d      	b.n	8005c24 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	4b1b      	ldr	r3, [pc, #108]	@ (8005c7c <DMA_CalcBaseAndBitshift+0x160>)
 8005c10:	4013      	ands	r3, r2
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c16:	e005      	b.n	8005c24 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	40020010 	.word	0x40020010
 8005c38:	40020028 	.word	0x40020028
 8005c3c:	40020040 	.word	0x40020040
 8005c40:	40020058 	.word	0x40020058
 8005c44:	40020070 	.word	0x40020070
 8005c48:	40020088 	.word	0x40020088
 8005c4c:	400200a0 	.word	0x400200a0
 8005c50:	400200b8 	.word	0x400200b8
 8005c54:	40020410 	.word	0x40020410
 8005c58:	40020428 	.word	0x40020428
 8005c5c:	40020440 	.word	0x40020440
 8005c60:	40020458 	.word	0x40020458
 8005c64:	40020470 	.word	0x40020470
 8005c68:	40020488 	.word	0x40020488
 8005c6c:	400204a0 	.word	0x400204a0
 8005c70:	400204b8 	.word	0x400204b8
 8005c74:	aaaaaaab 	.word	0xaaaaaaab
 8005c78:	08014a9c 	.word	0x08014a9c
 8005c7c:	fffffc00 	.word	0xfffffc00

08005c80 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d120      	bne.n	8005cd6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c98:	2b03      	cmp	r3, #3
 8005c9a:	d858      	bhi.n	8005d4e <DMA_CheckFifoParam+0xce>
 8005c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8005ca4 <DMA_CheckFifoParam+0x24>)
 8005c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ca2:	bf00      	nop
 8005ca4:	08005cb5 	.word	0x08005cb5
 8005ca8:	08005cc7 	.word	0x08005cc7
 8005cac:	08005cb5 	.word	0x08005cb5
 8005cb0:	08005d4f 	.word	0x08005d4f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d048      	beq.n	8005d52 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005cc4:	e045      	b.n	8005d52 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005cce:	d142      	bne.n	8005d56 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005cd4:	e03f      	b.n	8005d56 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	699b      	ldr	r3, [r3, #24]
 8005cda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005cde:	d123      	bne.n	8005d28 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	d838      	bhi.n	8005d5a <DMA_CheckFifoParam+0xda>
 8005ce8:	a201      	add	r2, pc, #4	@ (adr r2, 8005cf0 <DMA_CheckFifoParam+0x70>)
 8005cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cee:	bf00      	nop
 8005cf0:	08005d01 	.word	0x08005d01
 8005cf4:	08005d07 	.word	0x08005d07
 8005cf8:	08005d01 	.word	0x08005d01
 8005cfc:	08005d19 	.word	0x08005d19
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	73fb      	strb	r3, [r7, #15]
        break;
 8005d04:	e030      	b.n	8005d68 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d025      	beq.n	8005d5e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d16:	e022      	b.n	8005d5e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d1c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005d20:	d11f      	bne.n	8005d62 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005d26:	e01c      	b.n	8005d62 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	d902      	bls.n	8005d36 <DMA_CheckFifoParam+0xb6>
 8005d30:	2b03      	cmp	r3, #3
 8005d32:	d003      	beq.n	8005d3c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005d34:	e018      	b.n	8005d68 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	73fb      	strb	r3, [r7, #15]
        break;
 8005d3a:	e015      	b.n	8005d68 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00e      	beq.n	8005d66 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	73fb      	strb	r3, [r7, #15]
    break;
 8005d4c:	e00b      	b.n	8005d66 <DMA_CheckFifoParam+0xe6>
        break;
 8005d4e:	bf00      	nop
 8005d50:	e00a      	b.n	8005d68 <DMA_CheckFifoParam+0xe8>
        break;
 8005d52:	bf00      	nop
 8005d54:	e008      	b.n	8005d68 <DMA_CheckFifoParam+0xe8>
        break;
 8005d56:	bf00      	nop
 8005d58:	e006      	b.n	8005d68 <DMA_CheckFifoParam+0xe8>
        break;
 8005d5a:	bf00      	nop
 8005d5c:	e004      	b.n	8005d68 <DMA_CheckFifoParam+0xe8>
        break;
 8005d5e:	bf00      	nop
 8005d60:	e002      	b.n	8005d68 <DMA_CheckFifoParam+0xe8>
        break;
 8005d62:	bf00      	nop
 8005d64:	e000      	b.n	8005d68 <DMA_CheckFifoParam+0xe8>
    break;
 8005d66:	bf00      	nop
    }
  }

  return status;
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop

08005d78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	4a38      	ldr	r2, [pc, #224]	@ (8005e6c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005d8c:	4293      	cmp	r3, r2
 8005d8e:	d022      	beq.n	8005dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a36      	ldr	r2, [pc, #216]	@ (8005e70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d01d      	beq.n	8005dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4a35      	ldr	r2, [pc, #212]	@ (8005e74 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d018      	beq.n	8005dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a33      	ldr	r2, [pc, #204]	@ (8005e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d013      	beq.n	8005dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	4a32      	ldr	r2, [pc, #200]	@ (8005e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d00e      	beq.n	8005dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a30      	ldr	r2, [pc, #192]	@ (8005e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d009      	beq.n	8005dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a2f      	ldr	r2, [pc, #188]	@ (8005e84 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d004      	beq.n	8005dd6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	4a2d      	ldr	r2, [pc, #180]	@ (8005e88 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005dd2:	4293      	cmp	r3, r2
 8005dd4:	d101      	bne.n	8005dda <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e000      	b.n	8005ddc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005dda:	2300      	movs	r3, #0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d01a      	beq.n	8005e16 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	3b08      	subs	r3, #8
 8005de8:	4a28      	ldr	r2, [pc, #160]	@ (8005e8c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005dea:	fba2 2303 	umull	r2, r3, r2, r3
 8005dee:	091b      	lsrs	r3, r3, #4
 8005df0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005df2:	68fa      	ldr	r2, [r7, #12]
 8005df4:	4b26      	ldr	r3, [pc, #152]	@ (8005e90 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005df6:	4413      	add	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	4a24      	ldr	r2, [pc, #144]	@ (8005e94 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005e04:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f003 031f 	and.w	r3, r3, #31
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	409a      	lsls	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005e14:	e024      	b.n	8005e60 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	3b10      	subs	r3, #16
 8005e1e:	4a1e      	ldr	r2, [pc, #120]	@ (8005e98 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005e20:	fba2 2303 	umull	r2, r3, r2, r3
 8005e24:	091b      	lsrs	r3, r3, #4
 8005e26:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	4a1c      	ldr	r2, [pc, #112]	@ (8005e9c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d806      	bhi.n	8005e3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	4a1b      	ldr	r2, [pc, #108]	@ (8005ea0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d902      	bls.n	8005e3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	3308      	adds	r3, #8
 8005e3c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005e3e:	68fa      	ldr	r2, [r7, #12]
 8005e40:	4b18      	ldr	r3, [pc, #96]	@ (8005ea4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005e42:	4413      	add	r3, r2
 8005e44:	009b      	lsls	r3, r3, #2
 8005e46:	461a      	mov	r2, r3
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a16      	ldr	r2, [pc, #88]	@ (8005ea8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005e50:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f003 031f 	and.w	r3, r3, #31
 8005e58:	2201      	movs	r2, #1
 8005e5a:	409a      	lsls	r2, r3
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005e60:	bf00      	nop
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	58025408 	.word	0x58025408
 8005e70:	5802541c 	.word	0x5802541c
 8005e74:	58025430 	.word	0x58025430
 8005e78:	58025444 	.word	0x58025444
 8005e7c:	58025458 	.word	0x58025458
 8005e80:	5802546c 	.word	0x5802546c
 8005e84:	58025480 	.word	0x58025480
 8005e88:	58025494 	.word	0x58025494
 8005e8c:	cccccccd 	.word	0xcccccccd
 8005e90:	16009600 	.word	0x16009600
 8005e94:	58025880 	.word	0x58025880
 8005e98:	aaaaaaab 	.word	0xaaaaaaab
 8005e9c:	400204b8 	.word	0x400204b8
 8005ea0:	4002040f 	.word	0x4002040f
 8005ea4:	10008200 	.word	0x10008200
 8005ea8:	40020880 	.word	0x40020880

08005eac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d04a      	beq.n	8005f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2b08      	cmp	r3, #8
 8005ec6:	d847      	bhi.n	8005f58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a25      	ldr	r2, [pc, #148]	@ (8005f64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d022      	beq.n	8005f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a24      	ldr	r2, [pc, #144]	@ (8005f68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d01d      	beq.n	8005f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a22      	ldr	r2, [pc, #136]	@ (8005f6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d018      	beq.n	8005f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a21      	ldr	r2, [pc, #132]	@ (8005f70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d013      	beq.n	8005f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a1f      	ldr	r2, [pc, #124]	@ (8005f74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d00e      	beq.n	8005f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a1e      	ldr	r2, [pc, #120]	@ (8005f78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d009      	beq.n	8005f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a1c      	ldr	r2, [pc, #112]	@ (8005f7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d004      	beq.n	8005f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a1b      	ldr	r2, [pc, #108]	@ (8005f80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d101      	bne.n	8005f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e000      	b.n	8005f1e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00a      	beq.n	8005f38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	4b17      	ldr	r3, [pc, #92]	@ (8005f84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005f26:	4413      	add	r3, r2
 8005f28:	009b      	lsls	r3, r3, #2
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a15      	ldr	r2, [pc, #84]	@ (8005f88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005f34:	671a      	str	r2, [r3, #112]	@ 0x70
 8005f36:	e009      	b.n	8005f4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	4b14      	ldr	r3, [pc, #80]	@ (8005f8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005f3c:	4413      	add	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	461a      	mov	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a11      	ldr	r2, [pc, #68]	@ (8005f90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005f4a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	3b01      	subs	r3, #1
 8005f50:	2201      	movs	r2, #1
 8005f52:	409a      	lsls	r2, r3
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005f58:	bf00      	nop
 8005f5a:	3714      	adds	r7, #20
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	58025408 	.word	0x58025408
 8005f68:	5802541c 	.word	0x5802541c
 8005f6c:	58025430 	.word	0x58025430
 8005f70:	58025444 	.word	0x58025444
 8005f74:	58025458 	.word	0x58025458
 8005f78:	5802546c 	.word	0x5802546c
 8005f7c:	58025480 	.word	0x58025480
 8005f80:	58025494 	.word	0x58025494
 8005f84:	1600963f 	.word	0x1600963f
 8005f88:	58025940 	.word	0x58025940
 8005f8c:	1000823f 	.word	0x1000823f
 8005f90:	40020940 	.word	0x40020940

08005f94 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8005f94:	b480      	push	{r7}
 8005f96:	b087      	sub	sp, #28
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	607a      	str	r2, [r7, #4]
 8005fa0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e00a      	b.n	8005fc6 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8005fb0:	7afb      	ldrb	r3, [r7, #11]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d103      	bne.n	8005fbe <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	605a      	str	r2, [r3, #4]
      break;
 8005fbc:	e002      	b.n	8005fc4 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	75fb      	strb	r3, [r7, #23]
      break;
 8005fc2:	bf00      	nop
  }

  return status;
 8005fc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	371c      	adds	r7, #28
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b083      	sub	sp, #12
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e003      	b.n	8005fee <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	683a      	ldr	r2, [r7, #0]
 8005fea:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005fec:	2300      	movs	r3, #0
  }
}
 8005fee:	4618      	mov	r0, r3
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff8:	4770      	bx	lr
	...

08005ffc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b086      	sub	sp, #24
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	0c1b      	lsrs	r3, r3, #16
 800600a:	f003 0303 	and.w	r3, r3, #3
 800600e:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f003 031f 	and.w	r3, r3, #31
 8006018:	2201      	movs	r2, #1
 800601a:	fa02 f303 	lsl.w	r3, r2, r3
 800601e:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8006020:	f7fd fecc 	bl	8003dbc <HAL_GetCurrentCPUID>
 8006024:	4603      	mov	r3, r0
 8006026:	2b03      	cmp	r3, #3
 8006028:	d105      	bne.n	8006036 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	011a      	lsls	r2, r3, #4
 800602e:	4b0f      	ldr	r3, [pc, #60]	@ (800606c <HAL_EXTI_IRQHandler+0x70>)
 8006030:	4413      	add	r3, r2
 8006032:	617b      	str	r3, [r7, #20]
 8006034:	e004      	b.n	8006040 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	011a      	lsls	r2, r3, #4
 800603a:	4b0d      	ldr	r3, [pc, #52]	@ (8006070 <HAL_EXTI_IRQHandler+0x74>)
 800603c:	4413      	add	r3, r2
 800603e:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68fa      	ldr	r2, [r7, #12]
 8006046:	4013      	ands	r3, r2
 8006048:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d009      	beq.n	8006064 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d002      	beq.n	8006064 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	685b      	ldr	r3, [r3, #4]
 8006062:	4798      	blx	r3
    }
  }
}
 8006064:	bf00      	nop
 8006066:	3718      	adds	r7, #24
 8006068:	46bd      	mov	sp, r7
 800606a:	bd80      	pop	{r7, pc}
 800606c:	58000088 	.word	0x58000088
 8006070:	580000c8 	.word	0x580000c8

08006074 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006074:	b480      	push	{r7}
 8006076:	b089      	sub	sp, #36	@ 0x24
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800607e:	2300      	movs	r3, #0
 8006080:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006082:	4b89      	ldr	r3, [pc, #548]	@ (80062a8 <HAL_GPIO_Init+0x234>)
 8006084:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006086:	e194      	b.n	80063b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	2101      	movs	r1, #1
 800608e:	69fb      	ldr	r3, [r7, #28]
 8006090:	fa01 f303 	lsl.w	r3, r1, r3
 8006094:	4013      	ands	r3, r2
 8006096:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	2b00      	cmp	r3, #0
 800609c:	f000 8186 	beq.w	80063ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	685b      	ldr	r3, [r3, #4]
 80060a4:	f003 0303 	and.w	r3, r3, #3
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d005      	beq.n	80060b8 <HAL_GPIO_Init+0x44>
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	f003 0303 	and.w	r3, r3, #3
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d130      	bne.n	800611a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	005b      	lsls	r3, r3, #1
 80060c2:	2203      	movs	r2, #3
 80060c4:	fa02 f303 	lsl.w	r3, r2, r3
 80060c8:	43db      	mvns	r3, r3
 80060ca:	69ba      	ldr	r2, [r7, #24]
 80060cc:	4013      	ands	r3, r2
 80060ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	005b      	lsls	r3, r3, #1
 80060d8:	fa02 f303 	lsl.w	r3, r2, r3
 80060dc:	69ba      	ldr	r2, [r7, #24]
 80060de:	4313      	orrs	r3, r2
 80060e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80060ee:	2201      	movs	r2, #1
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	fa02 f303 	lsl.w	r3, r2, r3
 80060f6:	43db      	mvns	r3, r3
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	4013      	ands	r3, r2
 80060fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	685b      	ldr	r3, [r3, #4]
 8006102:	091b      	lsrs	r3, r3, #4
 8006104:	f003 0201 	and.w	r2, r3, #1
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	fa02 f303 	lsl.w	r3, r2, r3
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	4313      	orrs	r3, r2
 8006112:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	69ba      	ldr	r2, [r7, #24]
 8006118:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f003 0303 	and.w	r3, r3, #3
 8006122:	2b03      	cmp	r3, #3
 8006124:	d017      	beq.n	8006156 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	005b      	lsls	r3, r3, #1
 8006130:	2203      	movs	r2, #3
 8006132:	fa02 f303 	lsl.w	r3, r2, r3
 8006136:	43db      	mvns	r3, r3
 8006138:	69ba      	ldr	r2, [r7, #24]
 800613a:	4013      	ands	r3, r2
 800613c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	689a      	ldr	r2, [r3, #8]
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	005b      	lsls	r3, r3, #1
 8006146:	fa02 f303 	lsl.w	r3, r2, r3
 800614a:	69ba      	ldr	r2, [r7, #24]
 800614c:	4313      	orrs	r3, r2
 800614e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	69ba      	ldr	r2, [r7, #24]
 8006154:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	f003 0303 	and.w	r3, r3, #3
 800615e:	2b02      	cmp	r3, #2
 8006160:	d123      	bne.n	80061aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006162:	69fb      	ldr	r3, [r7, #28]
 8006164:	08da      	lsrs	r2, r3, #3
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	3208      	adds	r2, #8
 800616a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800616e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006170:	69fb      	ldr	r3, [r7, #28]
 8006172:	f003 0307 	and.w	r3, r3, #7
 8006176:	009b      	lsls	r3, r3, #2
 8006178:	220f      	movs	r2, #15
 800617a:	fa02 f303 	lsl.w	r3, r2, r3
 800617e:	43db      	mvns	r3, r3
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	4013      	ands	r3, r2
 8006184:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	691a      	ldr	r2, [r3, #16]
 800618a:	69fb      	ldr	r3, [r7, #28]
 800618c:	f003 0307 	and.w	r3, r3, #7
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	fa02 f303 	lsl.w	r3, r2, r3
 8006196:	69ba      	ldr	r2, [r7, #24]
 8006198:	4313      	orrs	r3, r2
 800619a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	08da      	lsrs	r2, r3, #3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	3208      	adds	r2, #8
 80061a4:	69b9      	ldr	r1, [r7, #24]
 80061a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	005b      	lsls	r3, r3, #1
 80061b4:	2203      	movs	r2, #3
 80061b6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ba:	43db      	mvns	r3, r3
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	4013      	ands	r3, r2
 80061c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f003 0203 	and.w	r2, r3, #3
 80061ca:	69fb      	ldr	r3, [r7, #28]
 80061cc:	005b      	lsls	r3, r3, #1
 80061ce:	fa02 f303 	lsl.w	r3, r2, r3
 80061d2:	69ba      	ldr	r2, [r7, #24]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	69ba      	ldr	r2, [r7, #24]
 80061dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	f000 80e0 	beq.w	80063ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061ec:	4b2f      	ldr	r3, [pc, #188]	@ (80062ac <HAL_GPIO_Init+0x238>)
 80061ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80061f2:	4a2e      	ldr	r2, [pc, #184]	@ (80062ac <HAL_GPIO_Init+0x238>)
 80061f4:	f043 0302 	orr.w	r3, r3, #2
 80061f8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80061fc:	4b2b      	ldr	r3, [pc, #172]	@ (80062ac <HAL_GPIO_Init+0x238>)
 80061fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006202:	f003 0302 	and.w	r3, r3, #2
 8006206:	60fb      	str	r3, [r7, #12]
 8006208:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800620a:	4a29      	ldr	r2, [pc, #164]	@ (80062b0 <HAL_GPIO_Init+0x23c>)
 800620c:	69fb      	ldr	r3, [r7, #28]
 800620e:	089b      	lsrs	r3, r3, #2
 8006210:	3302      	adds	r3, #2
 8006212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006216:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006218:	69fb      	ldr	r3, [r7, #28]
 800621a:	f003 0303 	and.w	r3, r3, #3
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	220f      	movs	r2, #15
 8006222:	fa02 f303 	lsl.w	r3, r2, r3
 8006226:	43db      	mvns	r3, r3
 8006228:	69ba      	ldr	r2, [r7, #24]
 800622a:	4013      	ands	r3, r2
 800622c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	4a20      	ldr	r2, [pc, #128]	@ (80062b4 <HAL_GPIO_Init+0x240>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d052      	beq.n	80062dc <HAL_GPIO_Init+0x268>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a1f      	ldr	r2, [pc, #124]	@ (80062b8 <HAL_GPIO_Init+0x244>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d031      	beq.n	80062a2 <HAL_GPIO_Init+0x22e>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a1e      	ldr	r2, [pc, #120]	@ (80062bc <HAL_GPIO_Init+0x248>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d02b      	beq.n	800629e <HAL_GPIO_Init+0x22a>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a1d      	ldr	r2, [pc, #116]	@ (80062c0 <HAL_GPIO_Init+0x24c>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d025      	beq.n	800629a <HAL_GPIO_Init+0x226>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a1c      	ldr	r2, [pc, #112]	@ (80062c4 <HAL_GPIO_Init+0x250>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d01f      	beq.n	8006296 <HAL_GPIO_Init+0x222>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a1b      	ldr	r2, [pc, #108]	@ (80062c8 <HAL_GPIO_Init+0x254>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d019      	beq.n	8006292 <HAL_GPIO_Init+0x21e>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a1a      	ldr	r2, [pc, #104]	@ (80062cc <HAL_GPIO_Init+0x258>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d013      	beq.n	800628e <HAL_GPIO_Init+0x21a>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a19      	ldr	r2, [pc, #100]	@ (80062d0 <HAL_GPIO_Init+0x25c>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d00d      	beq.n	800628a <HAL_GPIO_Init+0x216>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a18      	ldr	r2, [pc, #96]	@ (80062d4 <HAL_GPIO_Init+0x260>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d007      	beq.n	8006286 <HAL_GPIO_Init+0x212>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a17      	ldr	r2, [pc, #92]	@ (80062d8 <HAL_GPIO_Init+0x264>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d101      	bne.n	8006282 <HAL_GPIO_Init+0x20e>
 800627e:	2309      	movs	r3, #9
 8006280:	e02d      	b.n	80062de <HAL_GPIO_Init+0x26a>
 8006282:	230a      	movs	r3, #10
 8006284:	e02b      	b.n	80062de <HAL_GPIO_Init+0x26a>
 8006286:	2308      	movs	r3, #8
 8006288:	e029      	b.n	80062de <HAL_GPIO_Init+0x26a>
 800628a:	2307      	movs	r3, #7
 800628c:	e027      	b.n	80062de <HAL_GPIO_Init+0x26a>
 800628e:	2306      	movs	r3, #6
 8006290:	e025      	b.n	80062de <HAL_GPIO_Init+0x26a>
 8006292:	2305      	movs	r3, #5
 8006294:	e023      	b.n	80062de <HAL_GPIO_Init+0x26a>
 8006296:	2304      	movs	r3, #4
 8006298:	e021      	b.n	80062de <HAL_GPIO_Init+0x26a>
 800629a:	2303      	movs	r3, #3
 800629c:	e01f      	b.n	80062de <HAL_GPIO_Init+0x26a>
 800629e:	2302      	movs	r3, #2
 80062a0:	e01d      	b.n	80062de <HAL_GPIO_Init+0x26a>
 80062a2:	2301      	movs	r3, #1
 80062a4:	e01b      	b.n	80062de <HAL_GPIO_Init+0x26a>
 80062a6:	bf00      	nop
 80062a8:	58000080 	.word	0x58000080
 80062ac:	58024400 	.word	0x58024400
 80062b0:	58000400 	.word	0x58000400
 80062b4:	58020000 	.word	0x58020000
 80062b8:	58020400 	.word	0x58020400
 80062bc:	58020800 	.word	0x58020800
 80062c0:	58020c00 	.word	0x58020c00
 80062c4:	58021000 	.word	0x58021000
 80062c8:	58021400 	.word	0x58021400
 80062cc:	58021800 	.word	0x58021800
 80062d0:	58021c00 	.word	0x58021c00
 80062d4:	58022000 	.word	0x58022000
 80062d8:	58022400 	.word	0x58022400
 80062dc:	2300      	movs	r3, #0
 80062de:	69fa      	ldr	r2, [r7, #28]
 80062e0:	f002 0203 	and.w	r2, r2, #3
 80062e4:	0092      	lsls	r2, r2, #2
 80062e6:	4093      	lsls	r3, r2
 80062e8:	69ba      	ldr	r2, [r7, #24]
 80062ea:	4313      	orrs	r3, r2
 80062ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80062ee:	4938      	ldr	r1, [pc, #224]	@ (80063d0 <HAL_GPIO_Init+0x35c>)
 80062f0:	69fb      	ldr	r3, [r7, #28]
 80062f2:	089b      	lsrs	r3, r3, #2
 80062f4:	3302      	adds	r3, #2
 80062f6:	69ba      	ldr	r2, [r7, #24]
 80062f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80062fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	43db      	mvns	r3, r3
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	4013      	ands	r3, r2
 800630c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	4313      	orrs	r3, r2
 8006320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8006322:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800632a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	43db      	mvns	r3, r3
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	4013      	ands	r3, r2
 800633a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006344:	2b00      	cmp	r3, #0
 8006346:	d003      	beq.n	8006350 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8006348:	69ba      	ldr	r2, [r7, #24]
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	4313      	orrs	r3, r2
 800634e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006350:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006354:	69bb      	ldr	r3, [r7, #24]
 8006356:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	43db      	mvns	r3, r3
 8006362:	69ba      	ldr	r2, [r7, #24]
 8006364:	4013      	ands	r3, r2
 8006366:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d003      	beq.n	800637c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006374:	69ba      	ldr	r2, [r7, #24]
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	4313      	orrs	r3, r2
 800637a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800637c:	697b      	ldr	r3, [r7, #20]
 800637e:	69ba      	ldr	r2, [r7, #24]
 8006380:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	43db      	mvns	r3, r3
 800638c:	69ba      	ldr	r2, [r7, #24]
 800638e:	4013      	ands	r3, r2
 8006390:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800639a:	2b00      	cmp	r3, #0
 800639c:	d003      	beq.n	80063a6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	4313      	orrs	r3, r2
 80063a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	3301      	adds	r3, #1
 80063b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	fa22 f303 	lsr.w	r3, r2, r3
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f47f ae63 	bne.w	8006088 <HAL_GPIO_Init+0x14>
  }
}
 80063c2:	bf00      	nop
 80063c4:	bf00      	nop
 80063c6:	3724      	adds	r7, #36	@ 0x24
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr
 80063d0:	58000400 	.word	0x58000400

080063d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	460b      	mov	r3, r1
 80063de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	691a      	ldr	r2, [r3, #16]
 80063e4:	887b      	ldrh	r3, [r7, #2]
 80063e6:	4013      	ands	r3, r2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d002      	beq.n	80063f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80063ec:	2301      	movs	r3, #1
 80063ee:	73fb      	strb	r3, [r7, #15]
 80063f0:	e001      	b.n	80063f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80063f2:	2300      	movs	r3, #0
 80063f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3714      	adds	r7, #20
 80063fc:	46bd      	mov	sp, r7
 80063fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006402:	4770      	bx	lr

08006404 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	460b      	mov	r3, r1
 800640e:	807b      	strh	r3, [r7, #2]
 8006410:	4613      	mov	r3, r2
 8006412:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006414:	787b      	ldrb	r3, [r7, #1]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d003      	beq.n	8006422 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800641a:	887a      	ldrh	r2, [r7, #2]
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006420:	e003      	b.n	800642a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006422:	887b      	ldrh	r3, [r7, #2]
 8006424:	041a      	lsls	r2, r3, #16
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	619a      	str	r2, [r3, #24]
}
 800642a:	bf00      	nop
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr

08006436 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006436:	b480      	push	{r7}
 8006438:	b085      	sub	sp, #20
 800643a:	af00      	add	r7, sp, #0
 800643c:	6078      	str	r0, [r7, #4]
 800643e:	460b      	mov	r3, r1
 8006440:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	695b      	ldr	r3, [r3, #20]
 8006446:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006448:	887a      	ldrh	r2, [r7, #2]
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	4013      	ands	r3, r2
 800644e:	041a      	lsls	r2, r3, #16
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	43d9      	mvns	r1, r3
 8006454:	887b      	ldrh	r3, [r7, #2]
 8006456:	400b      	ands	r3, r1
 8006458:	431a      	orrs	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	619a      	str	r2, [r3, #24]
}
 800645e:	bf00      	nop
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr
	...

0800646c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006474:	4a08      	ldr	r2, [pc, #32]	@ (8006498 <HAL_HSEM_FastTake+0x2c>)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	3320      	adds	r3, #32
 800647a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800647e:	4a07      	ldr	r2, [pc, #28]	@ (800649c <HAL_HSEM_FastTake+0x30>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d101      	bne.n	8006488 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006484:	2300      	movs	r3, #0
 8006486:	e000      	b.n	800648a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006488:	2301      	movs	r3, #1
}
 800648a:	4618      	mov	r0, r3
 800648c:	370c      	adds	r7, #12
 800648e:	46bd      	mov	sp, r7
 8006490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	58026400 	.word	0x58026400
 800649c:	80000300 	.word	0x80000300

080064a0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b083      	sub	sp, #12
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80064aa:	4906      	ldr	r1, [pc, #24]	@ (80064c4 <HAL_HSEM_Release+0x24>)
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr
 80064c4:	58026400 	.word	0x58026400

080064c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b086      	sub	sp, #24
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d101      	bne.n	80064da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	e0fe      	b.n	80066d8 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80064e0:	b2db      	uxtb	r3, r3
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d106      	bne.n	80064f4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f00b f950 	bl	8011794 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2203      	movs	r2, #3
 80064f8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4618      	mov	r0, r3
 8006502:	f007 fd14 	bl	800df2e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6818      	ldr	r0, [r3, #0]
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	7c1a      	ldrb	r2, [r3, #16]
 800650e:	f88d 2000 	strb.w	r2, [sp]
 8006512:	3304      	adds	r3, #4
 8006514:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006516:	f007 fbe5 	bl	800dce4 <USB_CoreInit>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d005      	beq.n	800652c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2202      	movs	r2, #2
 8006524:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e0d5      	b.n	80066d8 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2100      	movs	r1, #0
 8006532:	4618      	mov	r0, r3
 8006534:	f007 fd0c 	bl	800df50 <USB_SetCurrentMode>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d005      	beq.n	800654a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2202      	movs	r2, #2
 8006542:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006546:	2301      	movs	r3, #1
 8006548:	e0c6      	b.n	80066d8 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800654a:	2300      	movs	r3, #0
 800654c:	73fb      	strb	r3, [r7, #15]
 800654e:	e04a      	b.n	80065e6 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006550:	7bfa      	ldrb	r2, [r7, #15]
 8006552:	6879      	ldr	r1, [r7, #4]
 8006554:	4613      	mov	r3, r2
 8006556:	00db      	lsls	r3, r3, #3
 8006558:	4413      	add	r3, r2
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	440b      	add	r3, r1
 800655e:	3315      	adds	r3, #21
 8006560:	2201      	movs	r2, #1
 8006562:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006564:	7bfa      	ldrb	r2, [r7, #15]
 8006566:	6879      	ldr	r1, [r7, #4]
 8006568:	4613      	mov	r3, r2
 800656a:	00db      	lsls	r3, r3, #3
 800656c:	4413      	add	r3, r2
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	440b      	add	r3, r1
 8006572:	3314      	adds	r3, #20
 8006574:	7bfa      	ldrb	r2, [r7, #15]
 8006576:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006578:	7bfa      	ldrb	r2, [r7, #15]
 800657a:	7bfb      	ldrb	r3, [r7, #15]
 800657c:	b298      	uxth	r0, r3
 800657e:	6879      	ldr	r1, [r7, #4]
 8006580:	4613      	mov	r3, r2
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	4413      	add	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	440b      	add	r3, r1
 800658a:	332e      	adds	r3, #46	@ 0x2e
 800658c:	4602      	mov	r2, r0
 800658e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006590:	7bfa      	ldrb	r2, [r7, #15]
 8006592:	6879      	ldr	r1, [r7, #4]
 8006594:	4613      	mov	r3, r2
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	4413      	add	r3, r2
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	440b      	add	r3, r1
 800659e:	3318      	adds	r3, #24
 80065a0:	2200      	movs	r2, #0
 80065a2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80065a4:	7bfa      	ldrb	r2, [r7, #15]
 80065a6:	6879      	ldr	r1, [r7, #4]
 80065a8:	4613      	mov	r3, r2
 80065aa:	00db      	lsls	r3, r3, #3
 80065ac:	4413      	add	r3, r2
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	440b      	add	r3, r1
 80065b2:	331c      	adds	r3, #28
 80065b4:	2200      	movs	r2, #0
 80065b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80065b8:	7bfa      	ldrb	r2, [r7, #15]
 80065ba:	6879      	ldr	r1, [r7, #4]
 80065bc:	4613      	mov	r3, r2
 80065be:	00db      	lsls	r3, r3, #3
 80065c0:	4413      	add	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	440b      	add	r3, r1
 80065c6:	3320      	adds	r3, #32
 80065c8:	2200      	movs	r2, #0
 80065ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80065cc:	7bfa      	ldrb	r2, [r7, #15]
 80065ce:	6879      	ldr	r1, [r7, #4]
 80065d0:	4613      	mov	r3, r2
 80065d2:	00db      	lsls	r3, r3, #3
 80065d4:	4413      	add	r3, r2
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	440b      	add	r3, r1
 80065da:	3324      	adds	r3, #36	@ 0x24
 80065dc:	2200      	movs	r2, #0
 80065de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
 80065e2:	3301      	adds	r3, #1
 80065e4:	73fb      	strb	r3, [r7, #15]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	791b      	ldrb	r3, [r3, #4]
 80065ea:	7bfa      	ldrb	r2, [r7, #15]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d3af      	bcc.n	8006550 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80065f0:	2300      	movs	r3, #0
 80065f2:	73fb      	strb	r3, [r7, #15]
 80065f4:	e044      	b.n	8006680 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80065f6:	7bfa      	ldrb	r2, [r7, #15]
 80065f8:	6879      	ldr	r1, [r7, #4]
 80065fa:	4613      	mov	r3, r2
 80065fc:	00db      	lsls	r3, r3, #3
 80065fe:	4413      	add	r3, r2
 8006600:	009b      	lsls	r3, r3, #2
 8006602:	440b      	add	r3, r1
 8006604:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006608:	2200      	movs	r2, #0
 800660a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800660c:	7bfa      	ldrb	r2, [r7, #15]
 800660e:	6879      	ldr	r1, [r7, #4]
 8006610:	4613      	mov	r3, r2
 8006612:	00db      	lsls	r3, r3, #3
 8006614:	4413      	add	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	440b      	add	r3, r1
 800661a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800661e:	7bfa      	ldrb	r2, [r7, #15]
 8006620:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006622:	7bfa      	ldrb	r2, [r7, #15]
 8006624:	6879      	ldr	r1, [r7, #4]
 8006626:	4613      	mov	r3, r2
 8006628:	00db      	lsls	r3, r3, #3
 800662a:	4413      	add	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	440b      	add	r3, r1
 8006630:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006634:	2200      	movs	r2, #0
 8006636:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006638:	7bfa      	ldrb	r2, [r7, #15]
 800663a:	6879      	ldr	r1, [r7, #4]
 800663c:	4613      	mov	r3, r2
 800663e:	00db      	lsls	r3, r3, #3
 8006640:	4413      	add	r3, r2
 8006642:	009b      	lsls	r3, r3, #2
 8006644:	440b      	add	r3, r1
 8006646:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800664a:	2200      	movs	r2, #0
 800664c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800664e:	7bfa      	ldrb	r2, [r7, #15]
 8006650:	6879      	ldr	r1, [r7, #4]
 8006652:	4613      	mov	r3, r2
 8006654:	00db      	lsls	r3, r3, #3
 8006656:	4413      	add	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	440b      	add	r3, r1
 800665c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006660:	2200      	movs	r2, #0
 8006662:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006664:	7bfa      	ldrb	r2, [r7, #15]
 8006666:	6879      	ldr	r1, [r7, #4]
 8006668:	4613      	mov	r3, r2
 800666a:	00db      	lsls	r3, r3, #3
 800666c:	4413      	add	r3, r2
 800666e:	009b      	lsls	r3, r3, #2
 8006670:	440b      	add	r3, r1
 8006672:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006676:	2200      	movs	r2, #0
 8006678:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800667a:	7bfb      	ldrb	r3, [r7, #15]
 800667c:	3301      	adds	r3, #1
 800667e:	73fb      	strb	r3, [r7, #15]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	791b      	ldrb	r3, [r3, #4]
 8006684:	7bfa      	ldrb	r2, [r7, #15]
 8006686:	429a      	cmp	r2, r3
 8006688:	d3b5      	bcc.n	80065f6 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6818      	ldr	r0, [r3, #0]
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	7c1a      	ldrb	r2, [r3, #16]
 8006692:	f88d 2000 	strb.w	r2, [sp]
 8006696:	3304      	adds	r3, #4
 8006698:	cb0e      	ldmia	r3, {r1, r2, r3}
 800669a:	f007 fca5 	bl	800dfe8 <USB_DevInit>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d005      	beq.n	80066b0 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2202      	movs	r2, #2
 80066a8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e013      	b.n	80066d8 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2201      	movs	r2, #1
 80066ba:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	7b1b      	ldrb	r3, [r3, #12]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d102      	bne.n	80066cc <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f001 f96c 	bl	80079a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f008 fce4 	bl	800f09e <USB_DevDisconnect>

  return HAL_OK;
 80066d6:	2300      	movs	r3, #0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3710      	adds	r7, #16
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80066e0:	b580      	push	{r7, lr}
 80066e2:	b084      	sub	sp, #16
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d101      	bne.n	80066fc <HAL_PCD_Start+0x1c>
 80066f8:	2302      	movs	r3, #2
 80066fa:	e022      	b.n	8006742 <HAL_PCD_Start+0x62>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2201      	movs	r2, #1
 8006700:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	68db      	ldr	r3, [r3, #12]
 8006708:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800670c:	2b00      	cmp	r3, #0
 800670e:	d009      	beq.n	8006724 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006714:	2b01      	cmp	r3, #1
 8006716:	d105      	bne.n	8006724 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800671c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4618      	mov	r0, r3
 800672a:	f007 fbef 	bl	800df0c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	4618      	mov	r0, r3
 8006734:	f008 fc92 	bl	800f05c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3710      	adds	r7, #16
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800674a:	b590      	push	{r4, r7, lr}
 800674c:	b08d      	sub	sp, #52	@ 0x34
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	4618      	mov	r0, r3
 8006762:	f008 fd50 	bl	800f206 <USB_GetMode>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	f040 84b9 	bne.w	80070e0 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4618      	mov	r0, r3
 8006774:	f008 fcb4 	bl	800f0e0 <USB_ReadInterrupts>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	f000 84af 	beq.w	80070de <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	0a1b      	lsrs	r3, r3, #8
 800678a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4618      	mov	r0, r3
 800679a:	f008 fca1 	bl	800f0e0 <USB_ReadInterrupts>
 800679e:	4603      	mov	r3, r0
 80067a0:	f003 0302 	and.w	r3, r3, #2
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d107      	bne.n	80067b8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	695a      	ldr	r2, [r3, #20]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f002 0202 	and.w	r2, r2, #2
 80067b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4618      	mov	r0, r3
 80067be:	f008 fc8f 	bl	800f0e0 <USB_ReadInterrupts>
 80067c2:	4603      	mov	r3, r0
 80067c4:	f003 0310 	and.w	r3, r3, #16
 80067c8:	2b10      	cmp	r3, #16
 80067ca:	d161      	bne.n	8006890 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	699a      	ldr	r2, [r3, #24]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 0210 	bic.w	r2, r2, #16
 80067da:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	6a1b      	ldr	r3, [r3, #32]
 80067e0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80067e2:	69bb      	ldr	r3, [r7, #24]
 80067e4:	f003 020f 	and.w	r2, r3, #15
 80067e8:	4613      	mov	r3, r2
 80067ea:	00db      	lsls	r3, r3, #3
 80067ec:	4413      	add	r3, r2
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	4413      	add	r3, r2
 80067f8:	3304      	adds	r3, #4
 80067fa:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	0c5b      	lsrs	r3, r3, #17
 8006800:	f003 030f 	and.w	r3, r3, #15
 8006804:	2b02      	cmp	r3, #2
 8006806:	d124      	bne.n	8006852 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006808:	69ba      	ldr	r2, [r7, #24]
 800680a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800680e:	4013      	ands	r3, r2
 8006810:	2b00      	cmp	r3, #0
 8006812:	d035      	beq.n	8006880 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006814:	697b      	ldr	r3, [r7, #20]
 8006816:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006818:	69bb      	ldr	r3, [r7, #24]
 800681a:	091b      	lsrs	r3, r3, #4
 800681c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800681e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006822:	b29b      	uxth	r3, r3
 8006824:	461a      	mov	r2, r3
 8006826:	6a38      	ldr	r0, [r7, #32]
 8006828:	f008 fac6 	bl	800edb8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	68da      	ldr	r2, [r3, #12]
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	091b      	lsrs	r3, r3, #4
 8006834:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006838:	441a      	add	r2, r3
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	695a      	ldr	r2, [r3, #20]
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	091b      	lsrs	r3, r3, #4
 8006846:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800684a:	441a      	add	r2, r3
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	615a      	str	r2, [r3, #20]
 8006850:	e016      	b.n	8006880 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006852:	69bb      	ldr	r3, [r7, #24]
 8006854:	0c5b      	lsrs	r3, r3, #17
 8006856:	f003 030f 	and.w	r3, r3, #15
 800685a:	2b06      	cmp	r3, #6
 800685c:	d110      	bne.n	8006880 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006864:	2208      	movs	r2, #8
 8006866:	4619      	mov	r1, r3
 8006868:	6a38      	ldr	r0, [r7, #32]
 800686a:	f008 faa5 	bl	800edb8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	695a      	ldr	r2, [r3, #20]
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	091b      	lsrs	r3, r3, #4
 8006876:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800687a:	441a      	add	r2, r3
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	699a      	ldr	r2, [r3, #24]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f042 0210 	orr.w	r2, r2, #16
 800688e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4618      	mov	r0, r3
 8006896:	f008 fc23 	bl	800f0e0 <USB_ReadInterrupts>
 800689a:	4603      	mov	r3, r0
 800689c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80068a0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80068a4:	f040 80a7 	bne.w	80069f6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80068a8:	2300      	movs	r3, #0
 80068aa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4618      	mov	r0, r3
 80068b2:	f008 fc28 	bl	800f106 <USB_ReadDevAllOutEpInterrupt>
 80068b6:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80068b8:	e099      	b.n	80069ee <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80068ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068bc:	f003 0301 	and.w	r3, r3, #1
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	f000 808e 	beq.w	80069e2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068cc:	b2d2      	uxtb	r2, r2
 80068ce:	4611      	mov	r1, r2
 80068d0:	4618      	mov	r0, r3
 80068d2:	f008 fc4c 	bl	800f16e <USB_ReadDevOutEPInterrupt>
 80068d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	f003 0301 	and.w	r3, r3, #1
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00c      	beq.n	80068fc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80068e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e4:	015a      	lsls	r2, r3, #5
 80068e6:	69fb      	ldr	r3, [r7, #28]
 80068e8:	4413      	add	r3, r2
 80068ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068ee:	461a      	mov	r2, r3
 80068f0:	2301      	movs	r3, #1
 80068f2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80068f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 fece 	bl	8007698 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	f003 0308 	and.w	r3, r3, #8
 8006902:	2b00      	cmp	r3, #0
 8006904:	d00c      	beq.n	8006920 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006908:	015a      	lsls	r2, r3, #5
 800690a:	69fb      	ldr	r3, [r7, #28]
 800690c:	4413      	add	r3, r2
 800690e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006912:	461a      	mov	r2, r3
 8006914:	2308      	movs	r3, #8
 8006916:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006918:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 ffa4 	bl	8007868 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	f003 0310 	and.w	r3, r3, #16
 8006926:	2b00      	cmp	r3, #0
 8006928:	d008      	beq.n	800693c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800692a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800692c:	015a      	lsls	r2, r3, #5
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	4413      	add	r3, r2
 8006932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006936:	461a      	mov	r2, r3
 8006938:	2310      	movs	r3, #16
 800693a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	f003 0302 	and.w	r3, r3, #2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d030      	beq.n	80069a8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006946:	6a3b      	ldr	r3, [r7, #32]
 8006948:	695b      	ldr	r3, [r3, #20]
 800694a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800694e:	2b80      	cmp	r3, #128	@ 0x80
 8006950:	d109      	bne.n	8006966 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	69fa      	ldr	r2, [r7, #28]
 800695c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006960:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006964:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006968:	4613      	mov	r3, r2
 800696a:	00db      	lsls	r3, r3, #3
 800696c:	4413      	add	r3, r2
 800696e:	009b      	lsls	r3, r3, #2
 8006970:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006974:	687a      	ldr	r2, [r7, #4]
 8006976:	4413      	add	r3, r2
 8006978:	3304      	adds	r3, #4
 800697a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	78db      	ldrb	r3, [r3, #3]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d108      	bne.n	8006996 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	2200      	movs	r2, #0
 8006988:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800698a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698c:	b2db      	uxtb	r3, r3
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f00b f835 	bl	8011a00 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	4413      	add	r3, r2
 800699e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069a2:	461a      	mov	r2, r3
 80069a4:	2302      	movs	r3, #2
 80069a6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	f003 0320 	and.w	r3, r3, #32
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d008      	beq.n	80069c4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80069b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069b4:	015a      	lsls	r2, r3, #5
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	4413      	add	r3, r2
 80069ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069be:	461a      	mov	r2, r3
 80069c0:	2320      	movs	r3, #32
 80069c2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d009      	beq.n	80069e2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80069ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d0:	015a      	lsls	r2, r3, #5
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	4413      	add	r3, r2
 80069d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069da:	461a      	mov	r2, r3
 80069dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80069e0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80069e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069e4:	3301      	adds	r3, #1
 80069e6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80069e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ea:	085b      	lsrs	r3, r3, #1
 80069ec:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80069ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f47f af62 	bne.w	80068ba <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4618      	mov	r0, r3
 80069fc:	f008 fb70 	bl	800f0e0 <USB_ReadInterrupts>
 8006a00:	4603      	mov	r3, r0
 8006a02:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a06:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006a0a:	f040 80db 	bne.w	8006bc4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4618      	mov	r0, r3
 8006a14:	f008 fb91 	bl	800f13a <USB_ReadDevAllInEpInterrupt>
 8006a18:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006a1e:	e0cd      	b.n	8006bbc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a22:	f003 0301 	and.w	r3, r3, #1
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	f000 80c2 	beq.w	8006bb0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a32:	b2d2      	uxtb	r2, r2
 8006a34:	4611      	mov	r1, r2
 8006a36:	4618      	mov	r0, r3
 8006a38:	f008 fbb7 	bl	800f1aa <USB_ReadDevInEPInterrupt>
 8006a3c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	f003 0301 	and.w	r3, r3, #1
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d057      	beq.n	8006af8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4a:	f003 030f 	and.w	r3, r3, #15
 8006a4e:	2201      	movs	r2, #1
 8006a50:	fa02 f303 	lsl.w	r3, r2, r3
 8006a54:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	43db      	mvns	r3, r3
 8006a62:	69f9      	ldr	r1, [r7, #28]
 8006a64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006a68:	4013      	ands	r3, r2
 8006a6a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a6e:	015a      	lsls	r2, r3, #5
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	4413      	add	r3, r2
 8006a74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a78:	461a      	mov	r2, r3
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	799b      	ldrb	r3, [r3, #6]
 8006a82:	2b01      	cmp	r3, #1
 8006a84:	d132      	bne.n	8006aec <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006a86:	6879      	ldr	r1, [r7, #4]
 8006a88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	00db      	lsls	r3, r3, #3
 8006a8e:	4413      	add	r3, r2
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	440b      	add	r3, r1
 8006a94:	3320      	adds	r3, #32
 8006a96:	6819      	ldr	r1, [r3, #0]
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	00db      	lsls	r3, r3, #3
 8006aa0:	4413      	add	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4403      	add	r3, r0
 8006aa6:	331c      	adds	r3, #28
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4419      	add	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	00db      	lsls	r3, r3, #3
 8006ab4:	4413      	add	r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	4403      	add	r3, r0
 8006aba:	3320      	adds	r3, #32
 8006abc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d113      	bne.n	8006aec <HAL_PCD_IRQHandler+0x3a2>
 8006ac4:	6879      	ldr	r1, [r7, #4]
 8006ac6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ac8:	4613      	mov	r3, r2
 8006aca:	00db      	lsls	r3, r3, #3
 8006acc:	4413      	add	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	440b      	add	r3, r1
 8006ad2:	3324      	adds	r3, #36	@ 0x24
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d108      	bne.n	8006aec <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6818      	ldr	r0, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006ae4:	461a      	mov	r2, r3
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	f008 fbc0 	bl	800f26c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aee:	b2db      	uxtb	r3, r3
 8006af0:	4619      	mov	r1, r3
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f00a feff 	bl	80118f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	f003 0308 	and.w	r3, r3, #8
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d008      	beq.n	8006b14 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b04:	015a      	lsls	r2, r3, #5
 8006b06:	69fb      	ldr	r3, [r7, #28]
 8006b08:	4413      	add	r3, r2
 8006b0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b0e:	461a      	mov	r2, r3
 8006b10:	2308      	movs	r3, #8
 8006b12:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	f003 0310 	and.w	r3, r3, #16
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d008      	beq.n	8006b30 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b20:	015a      	lsls	r2, r3, #5
 8006b22:	69fb      	ldr	r3, [r7, #28]
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	2310      	movs	r3, #16
 8006b2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d008      	beq.n	8006b4c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	69fb      	ldr	r3, [r7, #28]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b46:	461a      	mov	r2, r3
 8006b48:	2340      	movs	r3, #64	@ 0x40
 8006b4a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	f003 0302 	and.w	r3, r3, #2
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d023      	beq.n	8006b9e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006b56:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b58:	6a38      	ldr	r0, [r7, #32]
 8006b5a:	f007 fba3 	bl	800e2a4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006b5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b60:	4613      	mov	r3, r2
 8006b62:	00db      	lsls	r3, r3, #3
 8006b64:	4413      	add	r3, r2
 8006b66:	009b      	lsls	r3, r3, #2
 8006b68:	3310      	adds	r3, #16
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	3304      	adds	r3, #4
 8006b70:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	78db      	ldrb	r3, [r3, #3]
 8006b76:	2b01      	cmp	r3, #1
 8006b78:	d108      	bne.n	8006b8c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b82:	b2db      	uxtb	r3, r3
 8006b84:	4619      	mov	r1, r3
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f00a ff4c 	bl	8011a24 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8e:	015a      	lsls	r2, r3, #5
 8006b90:	69fb      	ldr	r3, [r7, #28]
 8006b92:	4413      	add	r3, r2
 8006b94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b98:	461a      	mov	r2, r3
 8006b9a:	2302      	movs	r3, #2
 8006b9c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d003      	beq.n	8006bb0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006ba8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fce8 	bl	8007580 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb2:	3301      	adds	r3, #1
 8006bb4:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb8:	085b      	lsrs	r3, r3, #1
 8006bba:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f47f af2e 	bne.w	8006a20 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f008 fa89 	bl	800f0e0 <USB_ReadInterrupts>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006bd4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bd8:	d122      	bne.n	8006c20 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006be0:	685b      	ldr	r3, [r3, #4]
 8006be2:	69fa      	ldr	r2, [r7, #28]
 8006be4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006be8:	f023 0301 	bic.w	r3, r3, #1
 8006bec:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006bf4:	2b01      	cmp	r3, #1
 8006bf6:	d108      	bne.n	8006c0a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006c00:	2100      	movs	r1, #0
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fef2 	bl	80079ec <HAL_PCDEx_LPM_Callback>
 8006c08:	e002      	b.n	8006c10 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f00a feea 	bl	80119e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	695a      	ldr	r2, [r3, #20]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006c1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f008 fa5b 	bl	800f0e0 <USB_ReadInterrupts>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c34:	d112      	bne.n	8006c5c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f003 0301 	and.w	r3, r3, #1
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d102      	bne.n	8006c4c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f00a fea6 	bl	8011998 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	695a      	ldr	r2, [r3, #20]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006c5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4618      	mov	r0, r3
 8006c62:	f008 fa3d 	bl	800f0e0 <USB_ReadInterrupts>
 8006c66:	4603      	mov	r3, r0
 8006c68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006c6c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006c70:	d121      	bne.n	8006cb6 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	695a      	ldr	r2, [r3, #20]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8006c80:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d111      	bne.n	8006cb0 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2201      	movs	r2, #1
 8006c90:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c9a:	089b      	lsrs	r3, r3, #2
 8006c9c:	f003 020f 	and.w	r2, r3, #15
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006ca6:	2101      	movs	r1, #1
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fe9f 	bl	80079ec <HAL_PCDEx_LPM_Callback>
 8006cae:	e002      	b.n	8006cb6 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f00a fe71 	bl	8011998 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f008 fa10 	bl	800f0e0 <USB_ReadInterrupts>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006cc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006cca:	f040 80b7 	bne.w	8006e3c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cd4:	685b      	ldr	r3, [r3, #4]
 8006cd6:	69fa      	ldr	r2, [r7, #28]
 8006cd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cdc:	f023 0301 	bic.w	r3, r3, #1
 8006ce0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2110      	movs	r1, #16
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f007 fadb 	bl	800e2a4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cee:	2300      	movs	r3, #0
 8006cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cf2:	e046      	b.n	8006d82 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf6:	015a      	lsls	r2, r3, #5
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d00:	461a      	mov	r2, r3
 8006d02:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006d06:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d0a:	015a      	lsls	r2, r3, #5
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	4413      	add	r3, r2
 8006d10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d18:	0151      	lsls	r1, r2, #5
 8006d1a:	69fa      	ldr	r2, [r7, #28]
 8006d1c:	440a      	add	r2, r1
 8006d1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006d22:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006d26:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006d28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d2a:	015a      	lsls	r2, r3, #5
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	4413      	add	r3, r2
 8006d30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d34:	461a      	mov	r2, r3
 8006d36:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006d3a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006d3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	69fb      	ldr	r3, [r7, #28]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d4c:	0151      	lsls	r1, r2, #5
 8006d4e:	69fa      	ldr	r2, [r7, #28]
 8006d50:	440a      	add	r2, r1
 8006d52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d56:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006d5a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d5e:	015a      	lsls	r2, r3, #5
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	4413      	add	r3, r2
 8006d64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d6c:	0151      	lsls	r1, r2, #5
 8006d6e:	69fa      	ldr	r2, [r7, #28]
 8006d70:	440a      	add	r2, r1
 8006d72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d76:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006d7a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d7e:	3301      	adds	r3, #1
 8006d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	791b      	ldrb	r3, [r3, #4]
 8006d86:	461a      	mov	r2, r3
 8006d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d3b2      	bcc.n	8006cf4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d94:	69db      	ldr	r3, [r3, #28]
 8006d96:	69fa      	ldr	r2, [r7, #28]
 8006d98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d9c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006da0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	7bdb      	ldrb	r3, [r3, #15]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d016      	beq.n	8006dd8 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006daa:	69fb      	ldr	r3, [r7, #28]
 8006dac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006db4:	69fa      	ldr	r2, [r7, #28]
 8006db6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006dba:	f043 030b 	orr.w	r3, r3, #11
 8006dbe:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dca:	69fa      	ldr	r2, [r7, #28]
 8006dcc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006dd0:	f043 030b 	orr.w	r3, r3, #11
 8006dd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8006dd6:	e015      	b.n	8006e04 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006dde:	695a      	ldr	r2, [r3, #20]
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006de6:	4619      	mov	r1, r3
 8006de8:	f242 032b 	movw	r3, #8235	@ 0x202b
 8006dec:	4313      	orrs	r3, r2
 8006dee:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006df6:	691b      	ldr	r3, [r3, #16]
 8006df8:	69fa      	ldr	r2, [r7, #28]
 8006dfa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006dfe:	f043 030b 	orr.w	r3, r3, #11
 8006e02:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	69fa      	ldr	r2, [r7, #28]
 8006e0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006e12:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006e16:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	6818      	ldr	r0, [r3, #0]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006e26:	461a      	mov	r2, r3
 8006e28:	f008 fa20 	bl	800f26c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	695a      	ldr	r2, [r3, #20]
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006e3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	4618      	mov	r0, r3
 8006e42:	f008 f94d 	bl	800f0e0 <USB_ReadInterrupts>
 8006e46:	4603      	mov	r3, r0
 8006e48:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e4c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006e50:	d123      	bne.n	8006e9a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f008 f9e4 	bl	800f224 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	4618      	mov	r0, r3
 8006e62:	f007 fa98 	bl	800e396 <USB_GetDevSpeed>
 8006e66:	4603      	mov	r3, r0
 8006e68:	461a      	mov	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681c      	ldr	r4, [r3, #0]
 8006e72:	f001 fdbb 	bl	80089ec <HAL_RCC_GetHCLKFreq>
 8006e76:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	4620      	mov	r0, r4
 8006e80:	f006 ffa2 	bl	800ddc8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f00a fd5e 	bl	8011946 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	695a      	ldr	r2, [r3, #20]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006e98:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f008 f91e 	bl	800f0e0 <USB_ReadInterrupts>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	f003 0308 	and.w	r3, r3, #8
 8006eaa:	2b08      	cmp	r3, #8
 8006eac:	d10a      	bne.n	8006ec4 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f00a fd3b 	bl	801192a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	695a      	ldr	r2, [r3, #20]
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	f002 0208 	and.w	r2, r2, #8
 8006ec2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f008 f909 	bl	800f0e0 <USB_ReadInterrupts>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ed4:	2b80      	cmp	r3, #128	@ 0x80
 8006ed6:	d123      	bne.n	8006f20 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006ed8:	6a3b      	ldr	r3, [r7, #32]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006ee4:	2301      	movs	r3, #1
 8006ee6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ee8:	e014      	b.n	8006f14 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006eea:	6879      	ldr	r1, [r7, #4]
 8006eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eee:	4613      	mov	r3, r2
 8006ef0:	00db      	lsls	r3, r3, #3
 8006ef2:	4413      	add	r3, r2
 8006ef4:	009b      	lsls	r3, r3, #2
 8006ef6:	440b      	add	r3, r1
 8006ef8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006efc:	781b      	ldrb	r3, [r3, #0]
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d105      	bne.n	8006f0e <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	4619      	mov	r1, r3
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f000 fb08 	bl	800751e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f10:	3301      	adds	r3, #1
 8006f12:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	791b      	ldrb	r3, [r3, #4]
 8006f18:	461a      	mov	r2, r3
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1c:	4293      	cmp	r3, r2
 8006f1e:	d3e4      	bcc.n	8006eea <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4618      	mov	r0, r3
 8006f26:	f008 f8db 	bl	800f0e0 <USB_ReadInterrupts>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006f30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f34:	d13c      	bne.n	8006fb0 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f36:	2301      	movs	r3, #1
 8006f38:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f3a:	e02b      	b.n	8006f94 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006f4c:	6879      	ldr	r1, [r7, #4]
 8006f4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f50:	4613      	mov	r3, r2
 8006f52:	00db      	lsls	r3, r3, #3
 8006f54:	4413      	add	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	440b      	add	r3, r1
 8006f5a:	3318      	adds	r3, #24
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d115      	bne.n	8006f8e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006f62:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	da12      	bge.n	8006f8e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006f68:	6879      	ldr	r1, [r7, #4]
 8006f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	00db      	lsls	r3, r3, #3
 8006f70:	4413      	add	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	440b      	add	r3, r1
 8006f76:	3317      	adds	r3, #23
 8006f78:	2201      	movs	r2, #1
 8006f7a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006f84:	b2db      	uxtb	r3, r3
 8006f86:	4619      	mov	r1, r3
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fac8 	bl	800751e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f90:	3301      	adds	r3, #1
 8006f92:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	791b      	ldrb	r3, [r3, #4]
 8006f98:	461a      	mov	r2, r3
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d3cd      	bcc.n	8006f3c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	695a      	ldr	r2, [r3, #20]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006fae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f008 f893 	bl	800f0e0 <USB_ReadInterrupts>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006fc0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006fc4:	d156      	bne.n	8007074 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fca:	e045      	b.n	8007058 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	69fb      	ldr	r3, [r7, #28]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006fdc:	6879      	ldr	r1, [r7, #4]
 8006fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fe0:	4613      	mov	r3, r2
 8006fe2:	00db      	lsls	r3, r3, #3
 8006fe4:	4413      	add	r3, r2
 8006fe6:	009b      	lsls	r3, r3, #2
 8006fe8:	440b      	add	r3, r1
 8006fea:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d12e      	bne.n	8007052 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006ff4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	da2b      	bge.n	8007052 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8007006:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800700a:	429a      	cmp	r2, r3
 800700c:	d121      	bne.n	8007052 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800700e:	6879      	ldr	r1, [r7, #4]
 8007010:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007012:	4613      	mov	r3, r2
 8007014:	00db      	lsls	r3, r3, #3
 8007016:	4413      	add	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	440b      	add	r3, r1
 800701c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007020:	2201      	movs	r2, #1
 8007022:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007024:	6a3b      	ldr	r3, [r7, #32]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800702c:	6a3b      	ldr	r3, [r7, #32]
 800702e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007030:	6a3b      	ldr	r3, [r7, #32]
 8007032:	695b      	ldr	r3, [r3, #20]
 8007034:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10a      	bne.n	8007052 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	69fa      	ldr	r2, [r7, #28]
 8007046:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800704a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800704e:	6053      	str	r3, [r2, #4]
            break;
 8007050:	e008      	b.n	8007064 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007054:	3301      	adds	r3, #1
 8007056:	627b      	str	r3, [r7, #36]	@ 0x24
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	791b      	ldrb	r3, [r3, #4]
 800705c:	461a      	mov	r2, r3
 800705e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007060:	4293      	cmp	r3, r2
 8007062:	d3b3      	bcc.n	8006fcc <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	695a      	ldr	r2, [r3, #20]
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007072:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4618      	mov	r0, r3
 800707a:	f008 f831 	bl	800f0e0 <USB_ReadInterrupts>
 800707e:	4603      	mov	r3, r0
 8007080:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007088:	d10a      	bne.n	80070a0 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f00a fcdc 	bl	8011a48 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	695a      	ldr	r2, [r3, #20]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800709e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f008 f81b 	bl	800f0e0 <USB_ReadInterrupts>
 80070aa:	4603      	mov	r3, r0
 80070ac:	f003 0304 	and.w	r3, r3, #4
 80070b0:	2b04      	cmp	r3, #4
 80070b2:	d115      	bne.n	80070e0 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	f003 0304 	and.w	r3, r3, #4
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d002      	beq.n	80070cc <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f00a fccc 	bl	8011a64 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6859      	ldr	r1, [r3, #4]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	69ba      	ldr	r2, [r7, #24]
 80070d8:	430a      	orrs	r2, r1
 80070da:	605a      	str	r2, [r3, #4]
 80070dc:	e000      	b.n	80070e0 <HAL_PCD_IRQHandler+0x996>
      return;
 80070de:	bf00      	nop
    }
  }
}
 80070e0:	3734      	adds	r7, #52	@ 0x34
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd90      	pop	{r4, r7, pc}

080070e6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b082      	sub	sp, #8
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
 80070ee:	460b      	mov	r3, r1
 80070f0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d101      	bne.n	8007100 <HAL_PCD_SetAddress+0x1a>
 80070fc:	2302      	movs	r3, #2
 80070fe:	e012      	b.n	8007126 <HAL_PCD_SetAddress+0x40>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	78fa      	ldrb	r2, [r7, #3]
 800710c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	78fa      	ldrb	r2, [r7, #3]
 8007114:	4611      	mov	r1, r2
 8007116:	4618      	mov	r0, r3
 8007118:	f007 ff7a 	bl	800f010 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007124:	2300      	movs	r3, #0
}
 8007126:	4618      	mov	r0, r3
 8007128:	3708      	adds	r7, #8
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}

0800712e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800712e:	b580      	push	{r7, lr}
 8007130:	b084      	sub	sp, #16
 8007132:	af00      	add	r7, sp, #0
 8007134:	6078      	str	r0, [r7, #4]
 8007136:	4608      	mov	r0, r1
 8007138:	4611      	mov	r1, r2
 800713a:	461a      	mov	r2, r3
 800713c:	4603      	mov	r3, r0
 800713e:	70fb      	strb	r3, [r7, #3]
 8007140:	460b      	mov	r3, r1
 8007142:	803b      	strh	r3, [r7, #0]
 8007144:	4613      	mov	r3, r2
 8007146:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8007148:	2300      	movs	r3, #0
 800714a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800714c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007150:	2b00      	cmp	r3, #0
 8007152:	da0f      	bge.n	8007174 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007154:	78fb      	ldrb	r3, [r7, #3]
 8007156:	f003 020f 	and.w	r2, r3, #15
 800715a:	4613      	mov	r3, r2
 800715c:	00db      	lsls	r3, r3, #3
 800715e:	4413      	add	r3, r2
 8007160:	009b      	lsls	r3, r3, #2
 8007162:	3310      	adds	r3, #16
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	4413      	add	r3, r2
 8007168:	3304      	adds	r3, #4
 800716a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2201      	movs	r2, #1
 8007170:	705a      	strb	r2, [r3, #1]
 8007172:	e00f      	b.n	8007194 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007174:	78fb      	ldrb	r3, [r7, #3]
 8007176:	f003 020f 	and.w	r2, r3, #15
 800717a:	4613      	mov	r3, r2
 800717c:	00db      	lsls	r3, r3, #3
 800717e:	4413      	add	r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	4413      	add	r3, r2
 800718a:	3304      	adds	r3, #4
 800718c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007194:	78fb      	ldrb	r3, [r7, #3]
 8007196:	f003 030f 	and.w	r3, r3, #15
 800719a:	b2da      	uxtb	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80071a0:	883a      	ldrh	r2, [r7, #0]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	78ba      	ldrb	r2, [r7, #2]
 80071aa:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	785b      	ldrb	r3, [r3, #1]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d004      	beq.n	80071be <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	461a      	mov	r2, r3
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80071be:	78bb      	ldrb	r3, [r7, #2]
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d102      	bne.n	80071ca <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	2200      	movs	r2, #0
 80071c8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d101      	bne.n	80071d8 <HAL_PCD_EP_Open+0xaa>
 80071d4:	2302      	movs	r3, #2
 80071d6:	e00e      	b.n	80071f6 <HAL_PCD_EP_Open+0xc8>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	68f9      	ldr	r1, [r7, #12]
 80071e6:	4618      	mov	r0, r3
 80071e8:	f007 f8fa 	bl	800e3e0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80071f4:	7afb      	ldrb	r3, [r7, #11]
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b084      	sub	sp, #16
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	460b      	mov	r3, r1
 8007208:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800720a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800720e:	2b00      	cmp	r3, #0
 8007210:	da0f      	bge.n	8007232 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007212:	78fb      	ldrb	r3, [r7, #3]
 8007214:	f003 020f 	and.w	r2, r3, #15
 8007218:	4613      	mov	r3, r2
 800721a:	00db      	lsls	r3, r3, #3
 800721c:	4413      	add	r3, r2
 800721e:	009b      	lsls	r3, r3, #2
 8007220:	3310      	adds	r3, #16
 8007222:	687a      	ldr	r2, [r7, #4]
 8007224:	4413      	add	r3, r2
 8007226:	3304      	adds	r3, #4
 8007228:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2201      	movs	r2, #1
 800722e:	705a      	strb	r2, [r3, #1]
 8007230:	e00f      	b.n	8007252 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007232:	78fb      	ldrb	r3, [r7, #3]
 8007234:	f003 020f 	and.w	r2, r3, #15
 8007238:	4613      	mov	r3, r2
 800723a:	00db      	lsls	r3, r3, #3
 800723c:	4413      	add	r3, r2
 800723e:	009b      	lsls	r3, r3, #2
 8007240:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	4413      	add	r3, r2
 8007248:	3304      	adds	r3, #4
 800724a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007252:	78fb      	ldrb	r3, [r7, #3]
 8007254:	f003 030f 	and.w	r3, r3, #15
 8007258:	b2da      	uxtb	r2, r3
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007264:	2b01      	cmp	r3, #1
 8007266:	d101      	bne.n	800726c <HAL_PCD_EP_Close+0x6e>
 8007268:	2302      	movs	r3, #2
 800726a:	e00e      	b.n	800728a <HAL_PCD_EP_Close+0x8c>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68f9      	ldr	r1, [r7, #12]
 800727a:	4618      	mov	r0, r3
 800727c:	f007 f938 	bl	800e4f0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2200      	movs	r2, #0
 8007284:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007288:	2300      	movs	r3, #0
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b086      	sub	sp, #24
 8007296:	af00      	add	r7, sp, #0
 8007298:	60f8      	str	r0, [r7, #12]
 800729a:	607a      	str	r2, [r7, #4]
 800729c:	603b      	str	r3, [r7, #0]
 800729e:	460b      	mov	r3, r1
 80072a0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80072a2:	7afb      	ldrb	r3, [r7, #11]
 80072a4:	f003 020f 	and.w	r2, r3, #15
 80072a8:	4613      	mov	r3, r2
 80072aa:	00db      	lsls	r3, r3, #3
 80072ac:	4413      	add	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	4413      	add	r3, r2
 80072b8:	3304      	adds	r3, #4
 80072ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	683a      	ldr	r2, [r7, #0]
 80072c6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	2200      	movs	r2, #0
 80072cc:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2200      	movs	r2, #0
 80072d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80072d4:	7afb      	ldrb	r3, [r7, #11]
 80072d6:	f003 030f 	and.w	r3, r3, #15
 80072da:	b2da      	uxtb	r2, r3
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	799b      	ldrb	r3, [r3, #6]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d102      	bne.n	80072ee <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80072e8:	687a      	ldr	r2, [r7, #4]
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6818      	ldr	r0, [r3, #0]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	799b      	ldrb	r3, [r3, #6]
 80072f6:	461a      	mov	r2, r3
 80072f8:	6979      	ldr	r1, [r7, #20]
 80072fa:	f007 f9d5 	bl	800e6a8 <USB_EPStartXfer>

  return HAL_OK;
 80072fe:	2300      	movs	r3, #0
}
 8007300:	4618      	mov	r0, r3
 8007302:	3718      	adds	r7, #24
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}

08007308 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	460b      	mov	r3, r1
 8007312:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007314:	78fb      	ldrb	r3, [r7, #3]
 8007316:	f003 020f 	and.w	r2, r3, #15
 800731a:	6879      	ldr	r1, [r7, #4]
 800731c:	4613      	mov	r3, r2
 800731e:	00db      	lsls	r3, r3, #3
 8007320:	4413      	add	r3, r2
 8007322:	009b      	lsls	r3, r3, #2
 8007324:	440b      	add	r3, r1
 8007326:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800732a:	681b      	ldr	r3, [r3, #0]
}
 800732c:	4618      	mov	r0, r3
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	607a      	str	r2, [r7, #4]
 8007342:	603b      	str	r3, [r7, #0]
 8007344:	460b      	mov	r3, r1
 8007346:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007348:	7afb      	ldrb	r3, [r7, #11]
 800734a:	f003 020f 	and.w	r2, r3, #15
 800734e:	4613      	mov	r3, r2
 8007350:	00db      	lsls	r3, r3, #3
 8007352:	4413      	add	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	3310      	adds	r3, #16
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	4413      	add	r3, r2
 800735c:	3304      	adds	r3, #4
 800735e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007360:	697b      	ldr	r3, [r7, #20]
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	683a      	ldr	r2, [r7, #0]
 800736a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	2200      	movs	r2, #0
 8007370:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2201      	movs	r2, #1
 8007376:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007378:	7afb      	ldrb	r3, [r7, #11]
 800737a:	f003 030f 	and.w	r3, r3, #15
 800737e:	b2da      	uxtb	r2, r3
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	799b      	ldrb	r3, [r3, #6]
 8007388:	2b01      	cmp	r3, #1
 800738a:	d102      	bne.n	8007392 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6818      	ldr	r0, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	799b      	ldrb	r3, [r3, #6]
 800739a:	461a      	mov	r2, r3
 800739c:	6979      	ldr	r1, [r7, #20]
 800739e:	f007 f983 	bl	800e6a8 <USB_EPStartXfer>

  return HAL_OK;
 80073a2:	2300      	movs	r3, #0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3718      	adds	r7, #24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}

080073ac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	460b      	mov	r3, r1
 80073b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80073b8:	78fb      	ldrb	r3, [r7, #3]
 80073ba:	f003 030f 	and.w	r3, r3, #15
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	7912      	ldrb	r2, [r2, #4]
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d901      	bls.n	80073ca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e04f      	b.n	800746a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80073ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	da0f      	bge.n	80073f2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073d2:	78fb      	ldrb	r3, [r7, #3]
 80073d4:	f003 020f 	and.w	r2, r3, #15
 80073d8:	4613      	mov	r3, r2
 80073da:	00db      	lsls	r3, r3, #3
 80073dc:	4413      	add	r3, r2
 80073de:	009b      	lsls	r3, r3, #2
 80073e0:	3310      	adds	r3, #16
 80073e2:	687a      	ldr	r2, [r7, #4]
 80073e4:	4413      	add	r3, r2
 80073e6:	3304      	adds	r3, #4
 80073e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	2201      	movs	r2, #1
 80073ee:	705a      	strb	r2, [r3, #1]
 80073f0:	e00d      	b.n	800740e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80073f2:	78fa      	ldrb	r2, [r7, #3]
 80073f4:	4613      	mov	r3, r2
 80073f6:	00db      	lsls	r3, r3, #3
 80073f8:	4413      	add	r3, r2
 80073fa:	009b      	lsls	r3, r3, #2
 80073fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	4413      	add	r3, r2
 8007404:	3304      	adds	r3, #4
 8007406:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2200      	movs	r2, #0
 800740c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2201      	movs	r2, #1
 8007412:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007414:	78fb      	ldrb	r3, [r7, #3]
 8007416:	f003 030f 	and.w	r3, r3, #15
 800741a:	b2da      	uxtb	r2, r3
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007426:	2b01      	cmp	r3, #1
 8007428:	d101      	bne.n	800742e <HAL_PCD_EP_SetStall+0x82>
 800742a:	2302      	movs	r3, #2
 800742c:	e01d      	b.n	800746a <HAL_PCD_EP_SetStall+0xbe>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	68f9      	ldr	r1, [r7, #12]
 800743c:	4618      	mov	r0, r3
 800743e:	f007 fd13 	bl	800ee68 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007442:	78fb      	ldrb	r3, [r7, #3]
 8007444:	f003 030f 	and.w	r3, r3, #15
 8007448:	2b00      	cmp	r3, #0
 800744a:	d109      	bne.n	8007460 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6818      	ldr	r0, [r3, #0]
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	7999      	ldrb	r1, [r3, #6]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800745a:	461a      	mov	r2, r3
 800745c:	f007 ff06 	bl	800f26c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3710      	adds	r7, #16
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}

08007472 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b084      	sub	sp, #16
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	460b      	mov	r3, r1
 800747c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800747e:	78fb      	ldrb	r3, [r7, #3]
 8007480:	f003 030f 	and.w	r3, r3, #15
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	7912      	ldrb	r2, [r2, #4]
 8007488:	4293      	cmp	r3, r2
 800748a:	d901      	bls.n	8007490 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800748c:	2301      	movs	r3, #1
 800748e:	e042      	b.n	8007516 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007490:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007494:	2b00      	cmp	r3, #0
 8007496:	da0f      	bge.n	80074b8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007498:	78fb      	ldrb	r3, [r7, #3]
 800749a:	f003 020f 	and.w	r2, r3, #15
 800749e:	4613      	mov	r3, r2
 80074a0:	00db      	lsls	r3, r3, #3
 80074a2:	4413      	add	r3, r2
 80074a4:	009b      	lsls	r3, r3, #2
 80074a6:	3310      	adds	r3, #16
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	4413      	add	r3, r2
 80074ac:	3304      	adds	r3, #4
 80074ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2201      	movs	r2, #1
 80074b4:	705a      	strb	r2, [r3, #1]
 80074b6:	e00f      	b.n	80074d8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074b8:	78fb      	ldrb	r3, [r7, #3]
 80074ba:	f003 020f 	and.w	r2, r3, #15
 80074be:	4613      	mov	r3, r2
 80074c0:	00db      	lsls	r3, r3, #3
 80074c2:	4413      	add	r3, r2
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80074ca:	687a      	ldr	r2, [r7, #4]
 80074cc:	4413      	add	r3, r2
 80074ce:	3304      	adds	r3, #4
 80074d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	2200      	movs	r2, #0
 80074d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2200      	movs	r2, #0
 80074dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80074de:	78fb      	ldrb	r3, [r7, #3]
 80074e0:	f003 030f 	and.w	r3, r3, #15
 80074e4:	b2da      	uxtb	r2, r3
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d101      	bne.n	80074f8 <HAL_PCD_EP_ClrStall+0x86>
 80074f4:	2302      	movs	r3, #2
 80074f6:	e00e      	b.n	8007516 <HAL_PCD_EP_ClrStall+0xa4>
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2201      	movs	r2, #1
 80074fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	68f9      	ldr	r1, [r7, #12]
 8007506:	4618      	mov	r0, r3
 8007508:	f007 fd1c 	bl	800ef44 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2200      	movs	r2, #0
 8007510:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007514:	2300      	movs	r3, #0
}
 8007516:	4618      	mov	r0, r3
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}

0800751e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b084      	sub	sp, #16
 8007522:	af00      	add	r7, sp, #0
 8007524:	6078      	str	r0, [r7, #4]
 8007526:	460b      	mov	r3, r1
 8007528:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800752a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800752e:	2b00      	cmp	r3, #0
 8007530:	da0c      	bge.n	800754c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007532:	78fb      	ldrb	r3, [r7, #3]
 8007534:	f003 020f 	and.w	r2, r3, #15
 8007538:	4613      	mov	r3, r2
 800753a:	00db      	lsls	r3, r3, #3
 800753c:	4413      	add	r3, r2
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	3310      	adds	r3, #16
 8007542:	687a      	ldr	r2, [r7, #4]
 8007544:	4413      	add	r3, r2
 8007546:	3304      	adds	r3, #4
 8007548:	60fb      	str	r3, [r7, #12]
 800754a:	e00c      	b.n	8007566 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800754c:	78fb      	ldrb	r3, [r7, #3]
 800754e:	f003 020f 	and.w	r2, r3, #15
 8007552:	4613      	mov	r3, r2
 8007554:	00db      	lsls	r3, r3, #3
 8007556:	4413      	add	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	4413      	add	r3, r2
 8007562:	3304      	adds	r3, #4
 8007564:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	68f9      	ldr	r1, [r7, #12]
 800756c:	4618      	mov	r0, r3
 800756e:	f007 fb3b 	bl	800ebe8 <USB_EPStopXfer>
 8007572:	4603      	mov	r3, r0
 8007574:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007576:	7afb      	ldrb	r3, [r7, #11]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3710      	adds	r7, #16
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b08a      	sub	sp, #40	@ 0x28
 8007584:	af02      	add	r7, sp, #8
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007594:	683a      	ldr	r2, [r7, #0]
 8007596:	4613      	mov	r3, r2
 8007598:	00db      	lsls	r3, r3, #3
 800759a:	4413      	add	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	3310      	adds	r3, #16
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	4413      	add	r3, r2
 80075a4:	3304      	adds	r3, #4
 80075a6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	695a      	ldr	r2, [r3, #20]
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	691b      	ldr	r3, [r3, #16]
 80075b0:	429a      	cmp	r2, r3
 80075b2:	d901      	bls.n	80075b8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80075b4:	2301      	movs	r3, #1
 80075b6:	e06b      	b.n	8007690 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	691a      	ldr	r2, [r3, #16]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	695b      	ldr	r3, [r3, #20]
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	69fa      	ldr	r2, [r7, #28]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d902      	bls.n	80075d4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80075d4:	69fb      	ldr	r3, [r7, #28]
 80075d6:	3303      	adds	r3, #3
 80075d8:	089b      	lsrs	r3, r3, #2
 80075da:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80075dc:	e02a      	b.n	8007634 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	691a      	ldr	r2, [r3, #16]
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	1ad3      	subs	r3, r2, r3
 80075e8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	69fa      	ldr	r2, [r7, #28]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d902      	bls.n	80075fa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	3303      	adds	r3, #3
 80075fe:	089b      	lsrs	r3, r3, #2
 8007600:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	68d9      	ldr	r1, [r3, #12]
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	b2da      	uxtb	r2, r3
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	4603      	mov	r3, r0
 8007616:	6978      	ldr	r0, [r7, #20]
 8007618:	f007 fb90 	bl	800ed3c <USB_WritePacket>

    ep->xfer_buff  += len;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	68da      	ldr	r2, [r3, #12]
 8007620:	69fb      	ldr	r3, [r7, #28]
 8007622:	441a      	add	r2, r3
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	695a      	ldr	r2, [r3, #20]
 800762c:	69fb      	ldr	r3, [r7, #28]
 800762e:	441a      	add	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	015a      	lsls	r2, r3, #5
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	4413      	add	r3, r2
 800763c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007640:	699b      	ldr	r3, [r3, #24]
 8007642:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007644:	69ba      	ldr	r2, [r7, #24]
 8007646:	429a      	cmp	r2, r3
 8007648:	d809      	bhi.n	800765e <PCD_WriteEmptyTxFifo+0xde>
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	695a      	ldr	r2, [r3, #20]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007652:	429a      	cmp	r2, r3
 8007654:	d203      	bcs.n	800765e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d1bf      	bne.n	80075de <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	691a      	ldr	r2, [r3, #16]
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	429a      	cmp	r2, r3
 8007668:	d811      	bhi.n	800768e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	f003 030f 	and.w	r3, r3, #15
 8007670:	2201      	movs	r2, #1
 8007672:	fa02 f303 	lsl.w	r3, r2, r3
 8007676:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800767e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	43db      	mvns	r3, r3
 8007684:	6939      	ldr	r1, [r7, #16]
 8007686:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800768a:	4013      	ands	r3, r2
 800768c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3720      	adds	r7, #32
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b088      	sub	sp, #32
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076a8:	69fb      	ldr	r3, [r7, #28]
 80076aa:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80076ac:	69fb      	ldr	r3, [r7, #28]
 80076ae:	333c      	adds	r3, #60	@ 0x3c
 80076b0:	3304      	adds	r3, #4
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	015a      	lsls	r2, r3, #5
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	4413      	add	r3, r2
 80076be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	799b      	ldrb	r3, [r3, #6]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d17b      	bne.n	80077c6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80076ce:	693b      	ldr	r3, [r7, #16]
 80076d0:	f003 0308 	and.w	r3, r3, #8
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d015      	beq.n	8007704 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076d8:	697b      	ldr	r3, [r7, #20]
 80076da:	4a61      	ldr	r2, [pc, #388]	@ (8007860 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	f240 80b9 	bls.w	8007854 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f000 80b3 	beq.w	8007854 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	015a      	lsls	r2, r3, #5
 80076f2:	69bb      	ldr	r3, [r7, #24]
 80076f4:	4413      	add	r3, r2
 80076f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076fa:	461a      	mov	r2, r3
 80076fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007700:	6093      	str	r3, [r2, #8]
 8007702:	e0a7      	b.n	8007854 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	f003 0320 	and.w	r3, r3, #32
 800770a:	2b00      	cmp	r3, #0
 800770c:	d009      	beq.n	8007722 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	015a      	lsls	r2, r3, #5
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	4413      	add	r3, r2
 8007716:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800771a:	461a      	mov	r2, r3
 800771c:	2320      	movs	r3, #32
 800771e:	6093      	str	r3, [r2, #8]
 8007720:	e098      	b.n	8007854 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007728:	2b00      	cmp	r3, #0
 800772a:	f040 8093 	bne.w	8007854 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	4a4b      	ldr	r2, [pc, #300]	@ (8007860 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d90f      	bls.n	8007756 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00a      	beq.n	8007756 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	015a      	lsls	r2, r3, #5
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	4413      	add	r3, r2
 8007748:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800774c:	461a      	mov	r2, r3
 800774e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007752:	6093      	str	r3, [r2, #8]
 8007754:	e07e      	b.n	8007854 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	4613      	mov	r3, r2
 800775a:	00db      	lsls	r3, r3, #3
 800775c:	4413      	add	r3, r2
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	4413      	add	r3, r2
 8007768:	3304      	adds	r3, #4
 800776a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6a1a      	ldr	r2, [r3, #32]
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	0159      	lsls	r1, r3, #5
 8007774:	69bb      	ldr	r3, [r7, #24]
 8007776:	440b      	add	r3, r1
 8007778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800777c:	691b      	ldr	r3, [r3, #16]
 800777e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007782:	1ad2      	subs	r2, r2, r3
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d114      	bne.n	80077b8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d109      	bne.n	80077aa <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	6818      	ldr	r0, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80077a0:	461a      	mov	r2, r3
 80077a2:	2101      	movs	r1, #1
 80077a4:	f007 fd62 	bl	800f26c <USB_EP0_OutStart>
 80077a8:	e006      	b.n	80077b8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	68da      	ldr	r2, [r3, #12]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	695b      	ldr	r3, [r3, #20]
 80077b2:	441a      	add	r2, r3
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	b2db      	uxtb	r3, r3
 80077bc:	4619      	mov	r1, r3
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f00a f87e 	bl	80118c0 <HAL_PCD_DataOutStageCallback>
 80077c4:	e046      	b.n	8007854 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	4a26      	ldr	r2, [pc, #152]	@ (8007864 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d124      	bne.n	8007818 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d00a      	beq.n	80077ee <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	015a      	lsls	r2, r3, #5
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	4413      	add	r3, r2
 80077e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80077e4:	461a      	mov	r2, r3
 80077e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077ea:	6093      	str	r3, [r2, #8]
 80077ec:	e032      	b.n	8007854 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80077ee:	693b      	ldr	r3, [r7, #16]
 80077f0:	f003 0320 	and.w	r3, r3, #32
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d008      	beq.n	800780a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	015a      	lsls	r2, r3, #5
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	4413      	add	r3, r2
 8007800:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007804:	461a      	mov	r2, r3
 8007806:	2320      	movs	r3, #32
 8007808:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	b2db      	uxtb	r3, r3
 800780e:	4619      	mov	r1, r3
 8007810:	6878      	ldr	r0, [r7, #4]
 8007812:	f00a f855 	bl	80118c0 <HAL_PCD_DataOutStageCallback>
 8007816:	e01d      	b.n	8007854 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d114      	bne.n	8007848 <PCD_EP_OutXfrComplete_int+0x1b0>
 800781e:	6879      	ldr	r1, [r7, #4]
 8007820:	683a      	ldr	r2, [r7, #0]
 8007822:	4613      	mov	r3, r2
 8007824:	00db      	lsls	r3, r3, #3
 8007826:	4413      	add	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	440b      	add	r3, r1
 800782c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d108      	bne.n	8007848 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	6818      	ldr	r0, [r3, #0]
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007840:	461a      	mov	r2, r3
 8007842:	2100      	movs	r1, #0
 8007844:	f007 fd12 	bl	800f26c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	b2db      	uxtb	r3, r3
 800784c:	4619      	mov	r1, r3
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f00a f836 	bl	80118c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3720      	adds	r7, #32
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	4f54300a 	.word	0x4f54300a
 8007864:	4f54310a 	.word	0x4f54310a

08007868 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007868:	b580      	push	{r7, lr}
 800786a:	b086      	sub	sp, #24
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	333c      	adds	r3, #60	@ 0x3c
 8007880:	3304      	adds	r3, #4
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	015a      	lsls	r2, r3, #5
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	4413      	add	r3, r2
 800788e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	4a15      	ldr	r2, [pc, #84]	@ (80078f0 <PCD_EP_OutSetupPacket_int+0x88>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d90e      	bls.n	80078bc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d009      	beq.n	80078bc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	015a      	lsls	r2, r3, #5
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	4413      	add	r3, r2
 80078b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078b4:	461a      	mov	r2, r3
 80078b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80078ba:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f009 ffed 	bl	801189c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	4a0a      	ldr	r2, [pc, #40]	@ (80078f0 <PCD_EP_OutSetupPacket_int+0x88>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d90c      	bls.n	80078e4 <PCD_EP_OutSetupPacket_int+0x7c>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	799b      	ldrb	r3, [r3, #6]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d108      	bne.n	80078e4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6818      	ldr	r0, [r3, #0]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80078dc:	461a      	mov	r2, r3
 80078de:	2101      	movs	r1, #1
 80078e0:	f007 fcc4 	bl	800f26c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80078e4:	2300      	movs	r3, #0
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3718      	adds	r7, #24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}
 80078ee:	bf00      	nop
 80078f0:	4f54300a 	.word	0x4f54300a

080078f4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
 80078fc:	460b      	mov	r3, r1
 80078fe:	70fb      	strb	r3, [r7, #3]
 8007900:	4613      	mov	r3, r2
 8007902:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800790a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800790c:	78fb      	ldrb	r3, [r7, #3]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d107      	bne.n	8007922 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007912:	883b      	ldrh	r3, [r7, #0]
 8007914:	0419      	lsls	r1, r3, #16
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	430a      	orrs	r2, r1
 800791e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007920:	e028      	b.n	8007974 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007928:	0c1b      	lsrs	r3, r3, #16
 800792a:	68ba      	ldr	r2, [r7, #8]
 800792c:	4413      	add	r3, r2
 800792e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007930:	2300      	movs	r3, #0
 8007932:	73fb      	strb	r3, [r7, #15]
 8007934:	e00d      	b.n	8007952 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	7bfb      	ldrb	r3, [r7, #15]
 800793c:	3340      	adds	r3, #64	@ 0x40
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	4413      	add	r3, r2
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	0c1b      	lsrs	r3, r3, #16
 8007946:	68ba      	ldr	r2, [r7, #8]
 8007948:	4413      	add	r3, r2
 800794a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800794c:	7bfb      	ldrb	r3, [r7, #15]
 800794e:	3301      	adds	r3, #1
 8007950:	73fb      	strb	r3, [r7, #15]
 8007952:	7bfa      	ldrb	r2, [r7, #15]
 8007954:	78fb      	ldrb	r3, [r7, #3]
 8007956:	3b01      	subs	r3, #1
 8007958:	429a      	cmp	r2, r3
 800795a:	d3ec      	bcc.n	8007936 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800795c:	883b      	ldrh	r3, [r7, #0]
 800795e:	0418      	lsls	r0, r3, #16
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6819      	ldr	r1, [r3, #0]
 8007964:	78fb      	ldrb	r3, [r7, #3]
 8007966:	3b01      	subs	r3, #1
 8007968:	68ba      	ldr	r2, [r7, #8]
 800796a:	4302      	orrs	r2, r0
 800796c:	3340      	adds	r3, #64	@ 0x40
 800796e:	009b      	lsls	r3, r3, #2
 8007970:	440b      	add	r3, r1
 8007972:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3714      	adds	r7, #20
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007982:	b480      	push	{r7}
 8007984:	b083      	sub	sp, #12
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	460b      	mov	r3, r1
 800798c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	887a      	ldrh	r2, [r7, #2]
 8007994:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2201      	movs	r2, #1
 80079b6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80079d2:	4b05      	ldr	r3, [pc, #20]	@ (80079e8 <HAL_PCDEx_ActivateLPM+0x44>)
 80079d4:	4313      	orrs	r3, r2
 80079d6:	68fa      	ldr	r2, [r7, #12]
 80079d8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80079da:	2300      	movs	r3, #0
}
 80079dc:	4618      	mov	r0, r3
 80079de:	3714      	adds	r7, #20
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr
 80079e8:	10000003 	.word	0x10000003

080079ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	460b      	mov	r3, r1
 80079f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007a0c:	4b29      	ldr	r3, [pc, #164]	@ (8007ab4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	f003 0307 	and.w	r3, r3, #7
 8007a14:	2b06      	cmp	r3, #6
 8007a16:	d00a      	beq.n	8007a2e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007a18:	4b26      	ldr	r3, [pc, #152]	@ (8007ab4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007a1a:	68db      	ldr	r3, [r3, #12]
 8007a1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007a20:	687a      	ldr	r2, [r7, #4]
 8007a22:	429a      	cmp	r2, r3
 8007a24:	d001      	beq.n	8007a2a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e040      	b.n	8007aac <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	e03e      	b.n	8007aac <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007a2e:	4b21      	ldr	r3, [pc, #132]	@ (8007ab4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8007a36:	491f      	ldr	r1, [pc, #124]	@ (8007ab4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	4313      	orrs	r3, r2
 8007a3c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007a3e:	f7fa ffd7 	bl	80029f0 <HAL_GetTick>
 8007a42:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007a44:	e009      	b.n	8007a5a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007a46:	f7fa ffd3 	bl	80029f0 <HAL_GetTick>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a54:	d901      	bls.n	8007a5a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007a56:	2301      	movs	r3, #1
 8007a58:	e028      	b.n	8007aac <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007a5a:	4b16      	ldr	r3, [pc, #88]	@ (8007ab4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007a5c:	685b      	ldr	r3, [r3, #4]
 8007a5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007a62:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a66:	d1ee      	bne.n	8007a46 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2b1e      	cmp	r3, #30
 8007a6c:	d008      	beq.n	8007a80 <HAL_PWREx_ConfigSupply+0x7c>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2b2e      	cmp	r3, #46	@ 0x2e
 8007a72:	d005      	beq.n	8007a80 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2b1d      	cmp	r3, #29
 8007a78:	d002      	beq.n	8007a80 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2b2d      	cmp	r3, #45	@ 0x2d
 8007a7e:	d114      	bne.n	8007aaa <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007a80:	f7fa ffb6 	bl	80029f0 <HAL_GetTick>
 8007a84:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007a86:	e009      	b.n	8007a9c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007a88:	f7fa ffb2 	bl	80029f0 <HAL_GetTick>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a96:	d901      	bls.n	8007a9c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e007      	b.n	8007aac <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007a9c:	4b05      	ldr	r3, [pc, #20]	@ (8007ab4 <HAL_PWREx_ConfigSupply+0xb0>)
 8007a9e:	68db      	ldr	r3, [r3, #12]
 8007aa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007aa8:	d1ee      	bne.n	8007a88 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	58024800 	.word	0x58024800

08007ab8 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007abc:	4b05      	ldr	r3, [pc, #20]	@ (8007ad4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	4a04      	ldr	r2, [pc, #16]	@ (8007ad4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007ac2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007ac6:	60d3      	str	r3, [r2, #12]
}
 8007ac8:	bf00      	nop
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	58024800 	.word	0x58024800

08007ad8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b08c      	sub	sp, #48	@ 0x30
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d102      	bne.n	8007aec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	f000 bc48 	b.w	800837c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 0301 	and.w	r3, r3, #1
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f000 8088 	beq.w	8007c0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007afa:	4b99      	ldr	r3, [pc, #612]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007afc:	691b      	ldr	r3, [r3, #16]
 8007afe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007b04:	4b96      	ldr	r3, [pc, #600]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b08:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b0c:	2b10      	cmp	r3, #16
 8007b0e:	d007      	beq.n	8007b20 <HAL_RCC_OscConfig+0x48>
 8007b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b12:	2b18      	cmp	r3, #24
 8007b14:	d111      	bne.n	8007b3a <HAL_RCC_OscConfig+0x62>
 8007b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b18:	f003 0303 	and.w	r3, r3, #3
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d10c      	bne.n	8007b3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b20:	4b8f      	ldr	r3, [pc, #572]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d06d      	beq.n	8007c08 <HAL_RCC_OscConfig+0x130>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d169      	bne.n	8007c08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007b34:	2301      	movs	r3, #1
 8007b36:	f000 bc21 	b.w	800837c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b42:	d106      	bne.n	8007b52 <HAL_RCC_OscConfig+0x7a>
 8007b44:	4b86      	ldr	r3, [pc, #536]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a85      	ldr	r2, [pc, #532]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007b4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b4e:	6013      	str	r3, [r2, #0]
 8007b50:	e02e      	b.n	8007bb0 <HAL_RCC_OscConfig+0xd8>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10c      	bne.n	8007b74 <HAL_RCC_OscConfig+0x9c>
 8007b5a:	4b81      	ldr	r3, [pc, #516]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a80      	ldr	r2, [pc, #512]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007b60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b64:	6013      	str	r3, [r2, #0]
 8007b66:	4b7e      	ldr	r3, [pc, #504]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a7d      	ldr	r2, [pc, #500]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007b6c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b70:	6013      	str	r3, [r2, #0]
 8007b72:	e01d      	b.n	8007bb0 <HAL_RCC_OscConfig+0xd8>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b7c:	d10c      	bne.n	8007b98 <HAL_RCC_OscConfig+0xc0>
 8007b7e:	4b78      	ldr	r3, [pc, #480]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a77      	ldr	r2, [pc, #476]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007b84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007b88:	6013      	str	r3, [r2, #0]
 8007b8a:	4b75      	ldr	r3, [pc, #468]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a74      	ldr	r2, [pc, #464]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007b90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b94:	6013      	str	r3, [r2, #0]
 8007b96:	e00b      	b.n	8007bb0 <HAL_RCC_OscConfig+0xd8>
 8007b98:	4b71      	ldr	r3, [pc, #452]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a70      	ldr	r2, [pc, #448]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007b9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007ba2:	6013      	str	r3, [r2, #0]
 8007ba4:	4b6e      	ldr	r3, [pc, #440]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a6d      	ldr	r2, [pc, #436]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007baa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d013      	beq.n	8007be0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bb8:	f7fa ff1a 	bl	80029f0 <HAL_GetTick>
 8007bbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007bbe:	e008      	b.n	8007bd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007bc0:	f7fa ff16 	bl	80029f0 <HAL_GetTick>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	2b64      	cmp	r3, #100	@ 0x64
 8007bcc:	d901      	bls.n	8007bd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	e3d4      	b.n	800837c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007bd2:	4b63      	ldr	r3, [pc, #396]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d0f0      	beq.n	8007bc0 <HAL_RCC_OscConfig+0xe8>
 8007bde:	e014      	b.n	8007c0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007be0:	f7fa ff06 	bl	80029f0 <HAL_GetTick>
 8007be4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007be6:	e008      	b.n	8007bfa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007be8:	f7fa ff02 	bl	80029f0 <HAL_GetTick>
 8007bec:	4602      	mov	r2, r0
 8007bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf0:	1ad3      	subs	r3, r2, r3
 8007bf2:	2b64      	cmp	r3, #100	@ 0x64
 8007bf4:	d901      	bls.n	8007bfa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007bf6:	2303      	movs	r3, #3
 8007bf8:	e3c0      	b.n	800837c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007bfa:	4b59      	ldr	r3, [pc, #356]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d1f0      	bne.n	8007be8 <HAL_RCC_OscConfig+0x110>
 8007c06:	e000      	b.n	8007c0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0302 	and.w	r3, r3, #2
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f000 80ca 	beq.w	8007dac <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c18:	4b51      	ldr	r3, [pc, #324]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c20:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c22:	4b4f      	ldr	r3, [pc, #316]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007c24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c26:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007c28:	6a3b      	ldr	r3, [r7, #32]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d007      	beq.n	8007c3e <HAL_RCC_OscConfig+0x166>
 8007c2e:	6a3b      	ldr	r3, [r7, #32]
 8007c30:	2b18      	cmp	r3, #24
 8007c32:	d156      	bne.n	8007ce2 <HAL_RCC_OscConfig+0x20a>
 8007c34:	69fb      	ldr	r3, [r7, #28]
 8007c36:	f003 0303 	and.w	r3, r3, #3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d151      	bne.n	8007ce2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c3e:	4b48      	ldr	r3, [pc, #288]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f003 0304 	and.w	r3, r3, #4
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d005      	beq.n	8007c56 <HAL_RCC_OscConfig+0x17e>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e392      	b.n	800837c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007c56:	4b42      	ldr	r3, [pc, #264]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f023 0219 	bic.w	r2, r3, #25
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	68db      	ldr	r3, [r3, #12]
 8007c62:	493f      	ldr	r1, [pc, #252]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007c64:	4313      	orrs	r3, r2
 8007c66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c68:	f7fa fec2 	bl	80029f0 <HAL_GetTick>
 8007c6c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c6e:	e008      	b.n	8007c82 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c70:	f7fa febe 	bl	80029f0 <HAL_GetTick>
 8007c74:	4602      	mov	r2, r0
 8007c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c78:	1ad3      	subs	r3, r2, r3
 8007c7a:	2b02      	cmp	r3, #2
 8007c7c:	d901      	bls.n	8007c82 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007c7e:	2303      	movs	r3, #3
 8007c80:	e37c      	b.n	800837c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c82:	4b37      	ldr	r3, [pc, #220]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f003 0304 	and.w	r3, r3, #4
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d0f0      	beq.n	8007c70 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c8e:	f7fa fedf 	bl	8002a50 <HAL_GetREVID>
 8007c92:	4603      	mov	r3, r0
 8007c94:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d817      	bhi.n	8007ccc <HAL_RCC_OscConfig+0x1f4>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	2b40      	cmp	r3, #64	@ 0x40
 8007ca2:	d108      	bne.n	8007cb6 <HAL_RCC_OscConfig+0x1de>
 8007ca4:	4b2e      	ldr	r3, [pc, #184]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007cac:	4a2c      	ldr	r2, [pc, #176]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007cae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cb2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007cb4:	e07a      	b.n	8007dac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cb6:	4b2a      	ldr	r3, [pc, #168]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007cb8:	685b      	ldr	r3, [r3, #4]
 8007cba:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	691b      	ldr	r3, [r3, #16]
 8007cc2:	031b      	lsls	r3, r3, #12
 8007cc4:	4926      	ldr	r1, [pc, #152]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007cc6:	4313      	orrs	r3, r2
 8007cc8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007cca:	e06f      	b.n	8007dac <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ccc:	4b24      	ldr	r3, [pc, #144]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007cce:	685b      	ldr	r3, [r3, #4]
 8007cd0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	691b      	ldr	r3, [r3, #16]
 8007cd8:	061b      	lsls	r3, r3, #24
 8007cda:	4921      	ldr	r1, [pc, #132]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007cdc:	4313      	orrs	r3, r2
 8007cde:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ce0:	e064      	b.n	8007dac <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	68db      	ldr	r3, [r3, #12]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d047      	beq.n	8007d7a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007cea:	4b1d      	ldr	r3, [pc, #116]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f023 0219 	bic.w	r2, r3, #25
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	491a      	ldr	r1, [pc, #104]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cfc:	f7fa fe78 	bl	80029f0 <HAL_GetTick>
 8007d00:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d02:	e008      	b.n	8007d16 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d04:	f7fa fe74 	bl	80029f0 <HAL_GetTick>
 8007d08:	4602      	mov	r2, r0
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d0c:	1ad3      	subs	r3, r2, r3
 8007d0e:	2b02      	cmp	r3, #2
 8007d10:	d901      	bls.n	8007d16 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e332      	b.n	800837c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007d16:	4b12      	ldr	r3, [pc, #72]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	f003 0304 	and.w	r3, r3, #4
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d0f0      	beq.n	8007d04 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d22:	f7fa fe95 	bl	8002a50 <HAL_GetREVID>
 8007d26:	4603      	mov	r3, r0
 8007d28:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007d2c:	4293      	cmp	r3, r2
 8007d2e:	d819      	bhi.n	8007d64 <HAL_RCC_OscConfig+0x28c>
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	2b40      	cmp	r3, #64	@ 0x40
 8007d36:	d108      	bne.n	8007d4a <HAL_RCC_OscConfig+0x272>
 8007d38:	4b09      	ldr	r3, [pc, #36]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007d40:	4a07      	ldr	r2, [pc, #28]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007d42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007d46:	6053      	str	r3, [r2, #4]
 8007d48:	e030      	b.n	8007dac <HAL_RCC_OscConfig+0x2d4>
 8007d4a:	4b05      	ldr	r3, [pc, #20]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007d4c:	685b      	ldr	r3, [r3, #4]
 8007d4e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	691b      	ldr	r3, [r3, #16]
 8007d56:	031b      	lsls	r3, r3, #12
 8007d58:	4901      	ldr	r1, [pc, #4]	@ (8007d60 <HAL_RCC_OscConfig+0x288>)
 8007d5a:	4313      	orrs	r3, r2
 8007d5c:	604b      	str	r3, [r1, #4]
 8007d5e:	e025      	b.n	8007dac <HAL_RCC_OscConfig+0x2d4>
 8007d60:	58024400 	.word	0x58024400
 8007d64:	4b9a      	ldr	r3, [pc, #616]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007d66:	685b      	ldr	r3, [r3, #4]
 8007d68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	061b      	lsls	r3, r3, #24
 8007d72:	4997      	ldr	r1, [pc, #604]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007d74:	4313      	orrs	r3, r2
 8007d76:	604b      	str	r3, [r1, #4]
 8007d78:	e018      	b.n	8007dac <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d7a:	4b95      	ldr	r3, [pc, #596]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a94      	ldr	r2, [pc, #592]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007d80:	f023 0301 	bic.w	r3, r3, #1
 8007d84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d86:	f7fa fe33 	bl	80029f0 <HAL_GetTick>
 8007d8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d8c:	e008      	b.n	8007da0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d8e:	f7fa fe2f 	bl	80029f0 <HAL_GetTick>
 8007d92:	4602      	mov	r2, r0
 8007d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d96:	1ad3      	subs	r3, r2, r3
 8007d98:	2b02      	cmp	r3, #2
 8007d9a:	d901      	bls.n	8007da0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e2ed      	b.n	800837c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007da0:	4b8b      	ldr	r3, [pc, #556]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f003 0304 	and.w	r3, r3, #4
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d1f0      	bne.n	8007d8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f003 0310 	and.w	r3, r3, #16
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 80a9 	beq.w	8007f0c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007dba:	4b85      	ldr	r3, [pc, #532]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007dc2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007dc4:	4b82      	ldr	r3, [pc, #520]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dc8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007dca:	69bb      	ldr	r3, [r7, #24]
 8007dcc:	2b08      	cmp	r3, #8
 8007dce:	d007      	beq.n	8007de0 <HAL_RCC_OscConfig+0x308>
 8007dd0:	69bb      	ldr	r3, [r7, #24]
 8007dd2:	2b18      	cmp	r3, #24
 8007dd4:	d13a      	bne.n	8007e4c <HAL_RCC_OscConfig+0x374>
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	f003 0303 	and.w	r3, r3, #3
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d135      	bne.n	8007e4c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007de0:	4b7b      	ldr	r3, [pc, #492]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d005      	beq.n	8007df8 <HAL_RCC_OscConfig+0x320>
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	69db      	ldr	r3, [r3, #28]
 8007df0:	2b80      	cmp	r3, #128	@ 0x80
 8007df2:	d001      	beq.n	8007df8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007df4:	2301      	movs	r3, #1
 8007df6:	e2c1      	b.n	800837c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007df8:	f7fa fe2a 	bl	8002a50 <HAL_GetREVID>
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d817      	bhi.n	8007e36 <HAL_RCC_OscConfig+0x35e>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	2b20      	cmp	r3, #32
 8007e0c:	d108      	bne.n	8007e20 <HAL_RCC_OscConfig+0x348>
 8007e0e:	4b70      	ldr	r3, [pc, #448]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007e16:	4a6e      	ldr	r2, [pc, #440]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007e18:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e1c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e1e:	e075      	b.n	8007f0c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e20:	4b6b      	ldr	r3, [pc, #428]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6a1b      	ldr	r3, [r3, #32]
 8007e2c:	069b      	lsls	r3, r3, #26
 8007e2e:	4968      	ldr	r1, [pc, #416]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007e30:	4313      	orrs	r3, r2
 8007e32:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e34:	e06a      	b.n	8007f0c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e36:	4b66      	ldr	r3, [pc, #408]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007e38:	68db      	ldr	r3, [r3, #12]
 8007e3a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6a1b      	ldr	r3, [r3, #32]
 8007e42:	061b      	lsls	r3, r3, #24
 8007e44:	4962      	ldr	r1, [pc, #392]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007e4a:	e05f      	b.n	8007f0c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	69db      	ldr	r3, [r3, #28]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d042      	beq.n	8007eda <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007e54:	4b5e      	ldr	r3, [pc, #376]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a5d      	ldr	r2, [pc, #372]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007e5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e60:	f7fa fdc6 	bl	80029f0 <HAL_GetTick>
 8007e64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e66:	e008      	b.n	8007e7a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007e68:	f7fa fdc2 	bl	80029f0 <HAL_GetTick>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e70:	1ad3      	subs	r3, r2, r3
 8007e72:	2b02      	cmp	r3, #2
 8007e74:	d901      	bls.n	8007e7a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e280      	b.n	800837c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e7a:	4b55      	ldr	r3, [pc, #340]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d0f0      	beq.n	8007e68 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e86:	f7fa fde3 	bl	8002a50 <HAL_GetREVID>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d817      	bhi.n	8007ec4 <HAL_RCC_OscConfig+0x3ec>
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a1b      	ldr	r3, [r3, #32]
 8007e98:	2b20      	cmp	r3, #32
 8007e9a:	d108      	bne.n	8007eae <HAL_RCC_OscConfig+0x3d6>
 8007e9c:	4b4c      	ldr	r3, [pc, #304]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007ea4:	4a4a      	ldr	r2, [pc, #296]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007ea6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007eaa:	6053      	str	r3, [r2, #4]
 8007eac:	e02e      	b.n	8007f0c <HAL_RCC_OscConfig+0x434>
 8007eae:	4b48      	ldr	r3, [pc, #288]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007eb0:	685b      	ldr	r3, [r3, #4]
 8007eb2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	069b      	lsls	r3, r3, #26
 8007ebc:	4944      	ldr	r1, [pc, #272]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	604b      	str	r3, [r1, #4]
 8007ec2:	e023      	b.n	8007f0c <HAL_RCC_OscConfig+0x434>
 8007ec4:	4b42      	ldr	r3, [pc, #264]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007ec6:	68db      	ldr	r3, [r3, #12]
 8007ec8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	6a1b      	ldr	r3, [r3, #32]
 8007ed0:	061b      	lsls	r3, r3, #24
 8007ed2:	493f      	ldr	r1, [pc, #252]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	60cb      	str	r3, [r1, #12]
 8007ed8:	e018      	b.n	8007f0c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007eda:	4b3d      	ldr	r3, [pc, #244]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a3c      	ldr	r2, [pc, #240]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007ee0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007ee4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ee6:	f7fa fd83 	bl	80029f0 <HAL_GetTick>
 8007eea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007eec:	e008      	b.n	8007f00 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007eee:	f7fa fd7f 	bl	80029f0 <HAL_GetTick>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	2b02      	cmp	r3, #2
 8007efa:	d901      	bls.n	8007f00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e23d      	b.n	800837c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007f00:	4b33      	ldr	r3, [pc, #204]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d1f0      	bne.n	8007eee <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f003 0308 	and.w	r3, r3, #8
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d036      	beq.n	8007f86 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	695b      	ldr	r3, [r3, #20]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d019      	beq.n	8007f54 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f20:	4b2b      	ldr	r3, [pc, #172]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007f22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f24:	4a2a      	ldr	r2, [pc, #168]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007f26:	f043 0301 	orr.w	r3, r3, #1
 8007f2a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f2c:	f7fa fd60 	bl	80029f0 <HAL_GetTick>
 8007f30:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f32:	e008      	b.n	8007f46 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f34:	f7fa fd5c 	bl	80029f0 <HAL_GetTick>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d901      	bls.n	8007f46 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e21a      	b.n	800837c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007f46:	4b22      	ldr	r3, [pc, #136]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007f48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f4a:	f003 0302 	and.w	r3, r3, #2
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d0f0      	beq.n	8007f34 <HAL_RCC_OscConfig+0x45c>
 8007f52:	e018      	b.n	8007f86 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007f54:	4b1e      	ldr	r3, [pc, #120]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007f56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f58:	4a1d      	ldr	r2, [pc, #116]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007f5a:	f023 0301 	bic.w	r3, r3, #1
 8007f5e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f60:	f7fa fd46 	bl	80029f0 <HAL_GetTick>
 8007f64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f66:	e008      	b.n	8007f7a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f68:	f7fa fd42 	bl	80029f0 <HAL_GetTick>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f70:	1ad3      	subs	r3, r2, r3
 8007f72:	2b02      	cmp	r3, #2
 8007f74:	d901      	bls.n	8007f7a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007f76:	2303      	movs	r3, #3
 8007f78:	e200      	b.n	800837c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f7a:	4b15      	ldr	r3, [pc, #84]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007f7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f7e:	f003 0302 	and.w	r3, r3, #2
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1f0      	bne.n	8007f68 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0320 	and.w	r3, r3, #32
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d039      	beq.n	8008006 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d01c      	beq.n	8007fd4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007f9a:	4b0d      	ldr	r3, [pc, #52]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a0c      	ldr	r2, [pc, #48]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007fa0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007fa4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007fa6:	f7fa fd23 	bl	80029f0 <HAL_GetTick>
 8007faa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007fac:	e008      	b.n	8007fc0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fae:	f7fa fd1f 	bl	80029f0 <HAL_GetTick>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fb6:	1ad3      	subs	r3, r2, r3
 8007fb8:	2b02      	cmp	r3, #2
 8007fba:	d901      	bls.n	8007fc0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	e1dd      	b.n	800837c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007fc0:	4b03      	ldr	r3, [pc, #12]	@ (8007fd0 <HAL_RCC_OscConfig+0x4f8>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d0f0      	beq.n	8007fae <HAL_RCC_OscConfig+0x4d6>
 8007fcc:	e01b      	b.n	8008006 <HAL_RCC_OscConfig+0x52e>
 8007fce:	bf00      	nop
 8007fd0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007fd4:	4b9b      	ldr	r3, [pc, #620]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a9a      	ldr	r2, [pc, #616]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 8007fda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007fde:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007fe0:	f7fa fd06 	bl	80029f0 <HAL_GetTick>
 8007fe4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007fe6:	e008      	b.n	8007ffa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fe8:	f7fa fd02 	bl	80029f0 <HAL_GetTick>
 8007fec:	4602      	mov	r2, r0
 8007fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d901      	bls.n	8007ffa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e1c0      	b.n	800837c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007ffa:	4b92      	ldr	r3, [pc, #584]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008002:	2b00      	cmp	r3, #0
 8008004:	d1f0      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 0304 	and.w	r3, r3, #4
 800800e:	2b00      	cmp	r3, #0
 8008010:	f000 8081 	beq.w	8008116 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008014:	4b8c      	ldr	r3, [pc, #560]	@ (8008248 <HAL_RCC_OscConfig+0x770>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4a8b      	ldr	r2, [pc, #556]	@ (8008248 <HAL_RCC_OscConfig+0x770>)
 800801a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800801e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008020:	f7fa fce6 	bl	80029f0 <HAL_GetTick>
 8008024:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008026:	e008      	b.n	800803a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008028:	f7fa fce2 	bl	80029f0 <HAL_GetTick>
 800802c:	4602      	mov	r2, r0
 800802e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008030:	1ad3      	subs	r3, r2, r3
 8008032:	2b64      	cmp	r3, #100	@ 0x64
 8008034:	d901      	bls.n	800803a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008036:	2303      	movs	r3, #3
 8008038:	e1a0      	b.n	800837c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800803a:	4b83      	ldr	r3, [pc, #524]	@ (8008248 <HAL_RCC_OscConfig+0x770>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008042:	2b00      	cmp	r3, #0
 8008044:	d0f0      	beq.n	8008028 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	2b01      	cmp	r3, #1
 800804c:	d106      	bne.n	800805c <HAL_RCC_OscConfig+0x584>
 800804e:	4b7d      	ldr	r3, [pc, #500]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 8008050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008052:	4a7c      	ldr	r2, [pc, #496]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 8008054:	f043 0301 	orr.w	r3, r3, #1
 8008058:	6713      	str	r3, [r2, #112]	@ 0x70
 800805a:	e02d      	b.n	80080b8 <HAL_RCC_OscConfig+0x5e0>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10c      	bne.n	800807e <HAL_RCC_OscConfig+0x5a6>
 8008064:	4b77      	ldr	r3, [pc, #476]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 8008066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008068:	4a76      	ldr	r2, [pc, #472]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 800806a:	f023 0301 	bic.w	r3, r3, #1
 800806e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008070:	4b74      	ldr	r3, [pc, #464]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 8008072:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008074:	4a73      	ldr	r2, [pc, #460]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 8008076:	f023 0304 	bic.w	r3, r3, #4
 800807a:	6713      	str	r3, [r2, #112]	@ 0x70
 800807c:	e01c      	b.n	80080b8 <HAL_RCC_OscConfig+0x5e0>
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	2b05      	cmp	r3, #5
 8008084:	d10c      	bne.n	80080a0 <HAL_RCC_OscConfig+0x5c8>
 8008086:	4b6f      	ldr	r3, [pc, #444]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 8008088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800808a:	4a6e      	ldr	r2, [pc, #440]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 800808c:	f043 0304 	orr.w	r3, r3, #4
 8008090:	6713      	str	r3, [r2, #112]	@ 0x70
 8008092:	4b6c      	ldr	r3, [pc, #432]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 8008094:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008096:	4a6b      	ldr	r2, [pc, #428]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 8008098:	f043 0301 	orr.w	r3, r3, #1
 800809c:	6713      	str	r3, [r2, #112]	@ 0x70
 800809e:	e00b      	b.n	80080b8 <HAL_RCC_OscConfig+0x5e0>
 80080a0:	4b68      	ldr	r3, [pc, #416]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 80080a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080a4:	4a67      	ldr	r2, [pc, #412]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 80080a6:	f023 0301 	bic.w	r3, r3, #1
 80080aa:	6713      	str	r3, [r2, #112]	@ 0x70
 80080ac:	4b65      	ldr	r3, [pc, #404]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 80080ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080b0:	4a64      	ldr	r2, [pc, #400]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 80080b2:	f023 0304 	bic.w	r3, r3, #4
 80080b6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	689b      	ldr	r3, [r3, #8]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d015      	beq.n	80080ec <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080c0:	f7fa fc96 	bl	80029f0 <HAL_GetTick>
 80080c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080c6:	e00a      	b.n	80080de <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080c8:	f7fa fc92 	bl	80029f0 <HAL_GetTick>
 80080cc:	4602      	mov	r2, r0
 80080ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d901      	bls.n	80080de <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80080da:	2303      	movs	r3, #3
 80080dc:	e14e      	b.n	800837c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80080de:	4b59      	ldr	r3, [pc, #356]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 80080e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80080e2:	f003 0302 	and.w	r3, r3, #2
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d0ee      	beq.n	80080c8 <HAL_RCC_OscConfig+0x5f0>
 80080ea:	e014      	b.n	8008116 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080ec:	f7fa fc80 	bl	80029f0 <HAL_GetTick>
 80080f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80080f2:	e00a      	b.n	800810a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80080f4:	f7fa fc7c 	bl	80029f0 <HAL_GetTick>
 80080f8:	4602      	mov	r2, r0
 80080fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008102:	4293      	cmp	r3, r2
 8008104:	d901      	bls.n	800810a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008106:	2303      	movs	r3, #3
 8008108:	e138      	b.n	800837c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800810a:	4b4e      	ldr	r3, [pc, #312]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 800810c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800810e:	f003 0302 	and.w	r3, r3, #2
 8008112:	2b00      	cmp	r3, #0
 8008114:	d1ee      	bne.n	80080f4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800811a:	2b00      	cmp	r3, #0
 800811c:	f000 812d 	beq.w	800837a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008120:	4b48      	ldr	r3, [pc, #288]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 8008122:	691b      	ldr	r3, [r3, #16]
 8008124:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008128:	2b18      	cmp	r3, #24
 800812a:	f000 80bd 	beq.w	80082a8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008132:	2b02      	cmp	r3, #2
 8008134:	f040 809e 	bne.w	8008274 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008138:	4b42      	ldr	r3, [pc, #264]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a41      	ldr	r2, [pc, #260]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 800813e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008142:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008144:	f7fa fc54 	bl	80029f0 <HAL_GetTick>
 8008148:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800814a:	e008      	b.n	800815e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800814c:	f7fa fc50 	bl	80029f0 <HAL_GetTick>
 8008150:	4602      	mov	r2, r0
 8008152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008154:	1ad3      	subs	r3, r2, r3
 8008156:	2b02      	cmp	r3, #2
 8008158:	d901      	bls.n	800815e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800815a:	2303      	movs	r3, #3
 800815c:	e10e      	b.n	800837c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800815e:	4b39      	ldr	r3, [pc, #228]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008166:	2b00      	cmp	r3, #0
 8008168:	d1f0      	bne.n	800814c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800816a:	4b36      	ldr	r3, [pc, #216]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 800816c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800816e:	4b37      	ldr	r3, [pc, #220]	@ (800824c <HAL_RCC_OscConfig+0x774>)
 8008170:	4013      	ands	r3, r2
 8008172:	687a      	ldr	r2, [r7, #4]
 8008174:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800817a:	0112      	lsls	r2, r2, #4
 800817c:	430a      	orrs	r2, r1
 800817e:	4931      	ldr	r1, [pc, #196]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 8008180:	4313      	orrs	r3, r2
 8008182:	628b      	str	r3, [r1, #40]	@ 0x28
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008188:	3b01      	subs	r3, #1
 800818a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008192:	3b01      	subs	r3, #1
 8008194:	025b      	lsls	r3, r3, #9
 8008196:	b29b      	uxth	r3, r3
 8008198:	431a      	orrs	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800819e:	3b01      	subs	r3, #1
 80081a0:	041b      	lsls	r3, r3, #16
 80081a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80081a6:	431a      	orrs	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081ac:	3b01      	subs	r3, #1
 80081ae:	061b      	lsls	r3, r3, #24
 80081b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80081b4:	4923      	ldr	r1, [pc, #140]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 80081b6:	4313      	orrs	r3, r2
 80081b8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80081ba:	4b22      	ldr	r3, [pc, #136]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 80081bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081be:	4a21      	ldr	r2, [pc, #132]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 80081c0:	f023 0301 	bic.w	r3, r3, #1
 80081c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80081c6:	4b1f      	ldr	r3, [pc, #124]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 80081c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081ca:	4b21      	ldr	r3, [pc, #132]	@ (8008250 <HAL_RCC_OscConfig+0x778>)
 80081cc:	4013      	ands	r3, r2
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80081d2:	00d2      	lsls	r2, r2, #3
 80081d4:	491b      	ldr	r1, [pc, #108]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80081da:	4b1a      	ldr	r3, [pc, #104]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 80081dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081de:	f023 020c 	bic.w	r2, r3, #12
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081e6:	4917      	ldr	r1, [pc, #92]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 80081e8:	4313      	orrs	r3, r2
 80081ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80081ec:	4b15      	ldr	r3, [pc, #84]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 80081ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081f0:	f023 0202 	bic.w	r2, r3, #2
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80081f8:	4912      	ldr	r1, [pc, #72]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 80081fa:	4313      	orrs	r3, r2
 80081fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80081fe:	4b11      	ldr	r3, [pc, #68]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 8008200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008202:	4a10      	ldr	r2, [pc, #64]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 8008204:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008208:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800820a:	4b0e      	ldr	r3, [pc, #56]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 800820c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800820e:	4a0d      	ldr	r2, [pc, #52]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 8008210:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008214:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008216:	4b0b      	ldr	r3, [pc, #44]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 8008218:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800821a:	4a0a      	ldr	r2, [pc, #40]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 800821c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008220:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008222:	4b08      	ldr	r3, [pc, #32]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 8008224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008226:	4a07      	ldr	r2, [pc, #28]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 8008228:	f043 0301 	orr.w	r3, r3, #1
 800822c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800822e:	4b05      	ldr	r3, [pc, #20]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a04      	ldr	r2, [pc, #16]	@ (8008244 <HAL_RCC_OscConfig+0x76c>)
 8008234:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008238:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800823a:	f7fa fbd9 	bl	80029f0 <HAL_GetTick>
 800823e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008240:	e011      	b.n	8008266 <HAL_RCC_OscConfig+0x78e>
 8008242:	bf00      	nop
 8008244:	58024400 	.word	0x58024400
 8008248:	58024800 	.word	0x58024800
 800824c:	fffffc0c 	.word	0xfffffc0c
 8008250:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008254:	f7fa fbcc 	bl	80029f0 <HAL_GetTick>
 8008258:	4602      	mov	r2, r0
 800825a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800825c:	1ad3      	subs	r3, r2, r3
 800825e:	2b02      	cmp	r3, #2
 8008260:	d901      	bls.n	8008266 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008262:	2303      	movs	r3, #3
 8008264:	e08a      	b.n	800837c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008266:	4b47      	ldr	r3, [pc, #284]	@ (8008384 <HAL_RCC_OscConfig+0x8ac>)
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800826e:	2b00      	cmp	r3, #0
 8008270:	d0f0      	beq.n	8008254 <HAL_RCC_OscConfig+0x77c>
 8008272:	e082      	b.n	800837a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008274:	4b43      	ldr	r3, [pc, #268]	@ (8008384 <HAL_RCC_OscConfig+0x8ac>)
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a42      	ldr	r2, [pc, #264]	@ (8008384 <HAL_RCC_OscConfig+0x8ac>)
 800827a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800827e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008280:	f7fa fbb6 	bl	80029f0 <HAL_GetTick>
 8008284:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008286:	e008      	b.n	800829a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008288:	f7fa fbb2 	bl	80029f0 <HAL_GetTick>
 800828c:	4602      	mov	r2, r0
 800828e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008290:	1ad3      	subs	r3, r2, r3
 8008292:	2b02      	cmp	r3, #2
 8008294:	d901      	bls.n	800829a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008296:	2303      	movs	r3, #3
 8008298:	e070      	b.n	800837c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800829a:	4b3a      	ldr	r3, [pc, #232]	@ (8008384 <HAL_RCC_OscConfig+0x8ac>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d1f0      	bne.n	8008288 <HAL_RCC_OscConfig+0x7b0>
 80082a6:	e068      	b.n	800837a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80082a8:	4b36      	ldr	r3, [pc, #216]	@ (8008384 <HAL_RCC_OscConfig+0x8ac>)
 80082aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ac:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80082ae:	4b35      	ldr	r3, [pc, #212]	@ (8008384 <HAL_RCC_OscConfig+0x8ac>)
 80082b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082b2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d031      	beq.n	8008320 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	f003 0203 	and.w	r2, r3, #3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d12a      	bne.n	8008320 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	091b      	lsrs	r3, r3, #4
 80082ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082d6:	429a      	cmp	r2, r3
 80082d8:	d122      	bne.n	8008320 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d11a      	bne.n	8008320 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	0a5b      	lsrs	r3, r3, #9
 80082ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082f6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d111      	bne.n	8008320 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	0c1b      	lsrs	r3, r3, #16
 8008300:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008308:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800830a:	429a      	cmp	r2, r3
 800830c:	d108      	bne.n	8008320 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	0e1b      	lsrs	r3, r3, #24
 8008312:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800831a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800831c:	429a      	cmp	r2, r3
 800831e:	d001      	beq.n	8008324 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e02b      	b.n	800837c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008324:	4b17      	ldr	r3, [pc, #92]	@ (8008384 <HAL_RCC_OscConfig+0x8ac>)
 8008326:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008328:	08db      	lsrs	r3, r3, #3
 800832a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800832e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008334:	693a      	ldr	r2, [r7, #16]
 8008336:	429a      	cmp	r2, r3
 8008338:	d01f      	beq.n	800837a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800833a:	4b12      	ldr	r3, [pc, #72]	@ (8008384 <HAL_RCC_OscConfig+0x8ac>)
 800833c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800833e:	4a11      	ldr	r2, [pc, #68]	@ (8008384 <HAL_RCC_OscConfig+0x8ac>)
 8008340:	f023 0301 	bic.w	r3, r3, #1
 8008344:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008346:	f7fa fb53 	bl	80029f0 <HAL_GetTick>
 800834a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800834c:	bf00      	nop
 800834e:	f7fa fb4f 	bl	80029f0 <HAL_GetTick>
 8008352:	4602      	mov	r2, r0
 8008354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008356:	4293      	cmp	r3, r2
 8008358:	d0f9      	beq.n	800834e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800835a:	4b0a      	ldr	r3, [pc, #40]	@ (8008384 <HAL_RCC_OscConfig+0x8ac>)
 800835c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800835e:	4b0a      	ldr	r3, [pc, #40]	@ (8008388 <HAL_RCC_OscConfig+0x8b0>)
 8008360:	4013      	ands	r3, r2
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008366:	00d2      	lsls	r2, r2, #3
 8008368:	4906      	ldr	r1, [pc, #24]	@ (8008384 <HAL_RCC_OscConfig+0x8ac>)
 800836a:	4313      	orrs	r3, r2
 800836c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800836e:	4b05      	ldr	r3, [pc, #20]	@ (8008384 <HAL_RCC_OscConfig+0x8ac>)
 8008370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008372:	4a04      	ldr	r2, [pc, #16]	@ (8008384 <HAL_RCC_OscConfig+0x8ac>)
 8008374:	f043 0301 	orr.w	r3, r3, #1
 8008378:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3730      	adds	r7, #48	@ 0x30
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	58024400 	.word	0x58024400
 8008388:	ffff0007 	.word	0xffff0007

0800838c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b086      	sub	sp, #24
 8008390:	af00      	add	r7, sp, #0
 8008392:	6078      	str	r0, [r7, #4]
 8008394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d101      	bne.n	80083a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800839c:	2301      	movs	r3, #1
 800839e:	e19c      	b.n	80086da <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80083a0:	4b8a      	ldr	r3, [pc, #552]	@ (80085cc <HAL_RCC_ClockConfig+0x240>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f003 030f 	and.w	r3, r3, #15
 80083a8:	683a      	ldr	r2, [r7, #0]
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d910      	bls.n	80083d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083ae:	4b87      	ldr	r3, [pc, #540]	@ (80085cc <HAL_RCC_ClockConfig+0x240>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f023 020f 	bic.w	r2, r3, #15
 80083b6:	4985      	ldr	r1, [pc, #532]	@ (80085cc <HAL_RCC_ClockConfig+0x240>)
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	4313      	orrs	r3, r2
 80083bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083be:	4b83      	ldr	r3, [pc, #524]	@ (80085cc <HAL_RCC_ClockConfig+0x240>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f003 030f 	and.w	r3, r3, #15
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	429a      	cmp	r2, r3
 80083ca:	d001      	beq.n	80083d0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e184      	b.n	80086da <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 0304 	and.w	r3, r3, #4
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d010      	beq.n	80083fe <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	691a      	ldr	r2, [r3, #16]
 80083e0:	4b7b      	ldr	r3, [pc, #492]	@ (80085d0 <HAL_RCC_ClockConfig+0x244>)
 80083e2:	699b      	ldr	r3, [r3, #24]
 80083e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80083e8:	429a      	cmp	r2, r3
 80083ea:	d908      	bls.n	80083fe <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80083ec:	4b78      	ldr	r3, [pc, #480]	@ (80085d0 <HAL_RCC_ClockConfig+0x244>)
 80083ee:	699b      	ldr	r3, [r3, #24]
 80083f0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	691b      	ldr	r3, [r3, #16]
 80083f8:	4975      	ldr	r1, [pc, #468]	@ (80085d0 <HAL_RCC_ClockConfig+0x244>)
 80083fa:	4313      	orrs	r3, r2
 80083fc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 0308 	and.w	r3, r3, #8
 8008406:	2b00      	cmp	r3, #0
 8008408:	d010      	beq.n	800842c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	695a      	ldr	r2, [r3, #20]
 800840e:	4b70      	ldr	r3, [pc, #448]	@ (80085d0 <HAL_RCC_ClockConfig+0x244>)
 8008410:	69db      	ldr	r3, [r3, #28]
 8008412:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008416:	429a      	cmp	r2, r3
 8008418:	d908      	bls.n	800842c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800841a:	4b6d      	ldr	r3, [pc, #436]	@ (80085d0 <HAL_RCC_ClockConfig+0x244>)
 800841c:	69db      	ldr	r3, [r3, #28]
 800841e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	496a      	ldr	r1, [pc, #424]	@ (80085d0 <HAL_RCC_ClockConfig+0x244>)
 8008428:	4313      	orrs	r3, r2
 800842a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	f003 0310 	and.w	r3, r3, #16
 8008434:	2b00      	cmp	r3, #0
 8008436:	d010      	beq.n	800845a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	699a      	ldr	r2, [r3, #24]
 800843c:	4b64      	ldr	r3, [pc, #400]	@ (80085d0 <HAL_RCC_ClockConfig+0x244>)
 800843e:	69db      	ldr	r3, [r3, #28]
 8008440:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008444:	429a      	cmp	r2, r3
 8008446:	d908      	bls.n	800845a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008448:	4b61      	ldr	r3, [pc, #388]	@ (80085d0 <HAL_RCC_ClockConfig+0x244>)
 800844a:	69db      	ldr	r3, [r3, #28]
 800844c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	699b      	ldr	r3, [r3, #24]
 8008454:	495e      	ldr	r1, [pc, #376]	@ (80085d0 <HAL_RCC_ClockConfig+0x244>)
 8008456:	4313      	orrs	r3, r2
 8008458:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 0320 	and.w	r3, r3, #32
 8008462:	2b00      	cmp	r3, #0
 8008464:	d010      	beq.n	8008488 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	69da      	ldr	r2, [r3, #28]
 800846a:	4b59      	ldr	r3, [pc, #356]	@ (80085d0 <HAL_RCC_ClockConfig+0x244>)
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008472:	429a      	cmp	r2, r3
 8008474:	d908      	bls.n	8008488 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008476:	4b56      	ldr	r3, [pc, #344]	@ (80085d0 <HAL_RCC_ClockConfig+0x244>)
 8008478:	6a1b      	ldr	r3, [r3, #32]
 800847a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	69db      	ldr	r3, [r3, #28]
 8008482:	4953      	ldr	r1, [pc, #332]	@ (80085d0 <HAL_RCC_ClockConfig+0x244>)
 8008484:	4313      	orrs	r3, r2
 8008486:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f003 0302 	and.w	r3, r3, #2
 8008490:	2b00      	cmp	r3, #0
 8008492:	d010      	beq.n	80084b6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	68da      	ldr	r2, [r3, #12]
 8008498:	4b4d      	ldr	r3, [pc, #308]	@ (80085d0 <HAL_RCC_ClockConfig+0x244>)
 800849a:	699b      	ldr	r3, [r3, #24]
 800849c:	f003 030f 	and.w	r3, r3, #15
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d908      	bls.n	80084b6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084a4:	4b4a      	ldr	r3, [pc, #296]	@ (80085d0 <HAL_RCC_ClockConfig+0x244>)
 80084a6:	699b      	ldr	r3, [r3, #24]
 80084a8:	f023 020f 	bic.w	r2, r3, #15
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	4947      	ldr	r1, [pc, #284]	@ (80085d0 <HAL_RCC_ClockConfig+0x244>)
 80084b2:	4313      	orrs	r3, r2
 80084b4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d055      	beq.n	800856e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80084c2:	4b43      	ldr	r3, [pc, #268]	@ (80085d0 <HAL_RCC_ClockConfig+0x244>)
 80084c4:	699b      	ldr	r3, [r3, #24]
 80084c6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	689b      	ldr	r3, [r3, #8]
 80084ce:	4940      	ldr	r1, [pc, #256]	@ (80085d0 <HAL_RCC_ClockConfig+0x244>)
 80084d0:	4313      	orrs	r3, r2
 80084d2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	2b02      	cmp	r3, #2
 80084da:	d107      	bne.n	80084ec <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80084dc:	4b3c      	ldr	r3, [pc, #240]	@ (80085d0 <HAL_RCC_ClockConfig+0x244>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d121      	bne.n	800852c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e0f6      	b.n	80086da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	2b03      	cmp	r3, #3
 80084f2:	d107      	bne.n	8008504 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80084f4:	4b36      	ldr	r3, [pc, #216]	@ (80085d0 <HAL_RCC_ClockConfig+0x244>)
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d115      	bne.n	800852c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	e0ea      	b.n	80086da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	685b      	ldr	r3, [r3, #4]
 8008508:	2b01      	cmp	r3, #1
 800850a:	d107      	bne.n	800851c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800850c:	4b30      	ldr	r3, [pc, #192]	@ (80085d0 <HAL_RCC_ClockConfig+0x244>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008514:	2b00      	cmp	r3, #0
 8008516:	d109      	bne.n	800852c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008518:	2301      	movs	r3, #1
 800851a:	e0de      	b.n	80086da <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800851c:	4b2c      	ldr	r3, [pc, #176]	@ (80085d0 <HAL_RCC_ClockConfig+0x244>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 0304 	and.w	r3, r3, #4
 8008524:	2b00      	cmp	r3, #0
 8008526:	d101      	bne.n	800852c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e0d6      	b.n	80086da <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800852c:	4b28      	ldr	r3, [pc, #160]	@ (80085d0 <HAL_RCC_ClockConfig+0x244>)
 800852e:	691b      	ldr	r3, [r3, #16]
 8008530:	f023 0207 	bic.w	r2, r3, #7
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	4925      	ldr	r1, [pc, #148]	@ (80085d0 <HAL_RCC_ClockConfig+0x244>)
 800853a:	4313      	orrs	r3, r2
 800853c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800853e:	f7fa fa57 	bl	80029f0 <HAL_GetTick>
 8008542:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008544:	e00a      	b.n	800855c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008546:	f7fa fa53 	bl	80029f0 <HAL_GetTick>
 800854a:	4602      	mov	r2, r0
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	1ad3      	subs	r3, r2, r3
 8008550:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008554:	4293      	cmp	r3, r2
 8008556:	d901      	bls.n	800855c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8008558:	2303      	movs	r3, #3
 800855a:	e0be      	b.n	80086da <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800855c:	4b1c      	ldr	r3, [pc, #112]	@ (80085d0 <HAL_RCC_ClockConfig+0x244>)
 800855e:	691b      	ldr	r3, [r3, #16]
 8008560:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	00db      	lsls	r3, r3, #3
 800856a:	429a      	cmp	r2, r3
 800856c:	d1eb      	bne.n	8008546 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f003 0302 	and.w	r3, r3, #2
 8008576:	2b00      	cmp	r3, #0
 8008578:	d010      	beq.n	800859c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	68da      	ldr	r2, [r3, #12]
 800857e:	4b14      	ldr	r3, [pc, #80]	@ (80085d0 <HAL_RCC_ClockConfig+0x244>)
 8008580:	699b      	ldr	r3, [r3, #24]
 8008582:	f003 030f 	and.w	r3, r3, #15
 8008586:	429a      	cmp	r2, r3
 8008588:	d208      	bcs.n	800859c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800858a:	4b11      	ldr	r3, [pc, #68]	@ (80085d0 <HAL_RCC_ClockConfig+0x244>)
 800858c:	699b      	ldr	r3, [r3, #24]
 800858e:	f023 020f 	bic.w	r2, r3, #15
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	68db      	ldr	r3, [r3, #12]
 8008596:	490e      	ldr	r1, [pc, #56]	@ (80085d0 <HAL_RCC_ClockConfig+0x244>)
 8008598:	4313      	orrs	r3, r2
 800859a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800859c:	4b0b      	ldr	r3, [pc, #44]	@ (80085cc <HAL_RCC_ClockConfig+0x240>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f003 030f 	and.w	r3, r3, #15
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d214      	bcs.n	80085d4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80085aa:	4b08      	ldr	r3, [pc, #32]	@ (80085cc <HAL_RCC_ClockConfig+0x240>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f023 020f 	bic.w	r2, r3, #15
 80085b2:	4906      	ldr	r1, [pc, #24]	@ (80085cc <HAL_RCC_ClockConfig+0x240>)
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80085ba:	4b04      	ldr	r3, [pc, #16]	@ (80085cc <HAL_RCC_ClockConfig+0x240>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 030f 	and.w	r3, r3, #15
 80085c2:	683a      	ldr	r2, [r7, #0]
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d005      	beq.n	80085d4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80085c8:	2301      	movs	r3, #1
 80085ca:	e086      	b.n	80086da <HAL_RCC_ClockConfig+0x34e>
 80085cc:	52002000 	.word	0x52002000
 80085d0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f003 0304 	and.w	r3, r3, #4
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d010      	beq.n	8008602 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	691a      	ldr	r2, [r3, #16]
 80085e4:	4b3f      	ldr	r3, [pc, #252]	@ (80086e4 <HAL_RCC_ClockConfig+0x358>)
 80085e6:	699b      	ldr	r3, [r3, #24]
 80085e8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d208      	bcs.n	8008602 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80085f0:	4b3c      	ldr	r3, [pc, #240]	@ (80086e4 <HAL_RCC_ClockConfig+0x358>)
 80085f2:	699b      	ldr	r3, [r3, #24]
 80085f4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	691b      	ldr	r3, [r3, #16]
 80085fc:	4939      	ldr	r1, [pc, #228]	@ (80086e4 <HAL_RCC_ClockConfig+0x358>)
 80085fe:	4313      	orrs	r3, r2
 8008600:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f003 0308 	and.w	r3, r3, #8
 800860a:	2b00      	cmp	r3, #0
 800860c:	d010      	beq.n	8008630 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	695a      	ldr	r2, [r3, #20]
 8008612:	4b34      	ldr	r3, [pc, #208]	@ (80086e4 <HAL_RCC_ClockConfig+0x358>)
 8008614:	69db      	ldr	r3, [r3, #28]
 8008616:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800861a:	429a      	cmp	r2, r3
 800861c:	d208      	bcs.n	8008630 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800861e:	4b31      	ldr	r3, [pc, #196]	@ (80086e4 <HAL_RCC_ClockConfig+0x358>)
 8008620:	69db      	ldr	r3, [r3, #28]
 8008622:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	695b      	ldr	r3, [r3, #20]
 800862a:	492e      	ldr	r1, [pc, #184]	@ (80086e4 <HAL_RCC_ClockConfig+0x358>)
 800862c:	4313      	orrs	r3, r2
 800862e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 0310 	and.w	r3, r3, #16
 8008638:	2b00      	cmp	r3, #0
 800863a:	d010      	beq.n	800865e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	699a      	ldr	r2, [r3, #24]
 8008640:	4b28      	ldr	r3, [pc, #160]	@ (80086e4 <HAL_RCC_ClockConfig+0x358>)
 8008642:	69db      	ldr	r3, [r3, #28]
 8008644:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008648:	429a      	cmp	r2, r3
 800864a:	d208      	bcs.n	800865e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800864c:	4b25      	ldr	r3, [pc, #148]	@ (80086e4 <HAL_RCC_ClockConfig+0x358>)
 800864e:	69db      	ldr	r3, [r3, #28]
 8008650:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	699b      	ldr	r3, [r3, #24]
 8008658:	4922      	ldr	r1, [pc, #136]	@ (80086e4 <HAL_RCC_ClockConfig+0x358>)
 800865a:	4313      	orrs	r3, r2
 800865c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f003 0320 	and.w	r3, r3, #32
 8008666:	2b00      	cmp	r3, #0
 8008668:	d010      	beq.n	800868c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	69da      	ldr	r2, [r3, #28]
 800866e:	4b1d      	ldr	r3, [pc, #116]	@ (80086e4 <HAL_RCC_ClockConfig+0x358>)
 8008670:	6a1b      	ldr	r3, [r3, #32]
 8008672:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008676:	429a      	cmp	r2, r3
 8008678:	d208      	bcs.n	800868c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800867a:	4b1a      	ldr	r3, [pc, #104]	@ (80086e4 <HAL_RCC_ClockConfig+0x358>)
 800867c:	6a1b      	ldr	r3, [r3, #32]
 800867e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	69db      	ldr	r3, [r3, #28]
 8008686:	4917      	ldr	r1, [pc, #92]	@ (80086e4 <HAL_RCC_ClockConfig+0x358>)
 8008688:	4313      	orrs	r3, r2
 800868a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800868c:	f000 f834 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 8008690:	4602      	mov	r2, r0
 8008692:	4b14      	ldr	r3, [pc, #80]	@ (80086e4 <HAL_RCC_ClockConfig+0x358>)
 8008694:	699b      	ldr	r3, [r3, #24]
 8008696:	0a1b      	lsrs	r3, r3, #8
 8008698:	f003 030f 	and.w	r3, r3, #15
 800869c:	4912      	ldr	r1, [pc, #72]	@ (80086e8 <HAL_RCC_ClockConfig+0x35c>)
 800869e:	5ccb      	ldrb	r3, [r1, r3]
 80086a0:	f003 031f 	and.w	r3, r3, #31
 80086a4:	fa22 f303 	lsr.w	r3, r2, r3
 80086a8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80086aa:	4b0e      	ldr	r3, [pc, #56]	@ (80086e4 <HAL_RCC_ClockConfig+0x358>)
 80086ac:	699b      	ldr	r3, [r3, #24]
 80086ae:	f003 030f 	and.w	r3, r3, #15
 80086b2:	4a0d      	ldr	r2, [pc, #52]	@ (80086e8 <HAL_RCC_ClockConfig+0x35c>)
 80086b4:	5cd3      	ldrb	r3, [r2, r3]
 80086b6:	f003 031f 	and.w	r3, r3, #31
 80086ba:	693a      	ldr	r2, [r7, #16]
 80086bc:	fa22 f303 	lsr.w	r3, r2, r3
 80086c0:	4a0a      	ldr	r2, [pc, #40]	@ (80086ec <HAL_RCC_ClockConfig+0x360>)
 80086c2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80086c4:	4a0a      	ldr	r2, [pc, #40]	@ (80086f0 <HAL_RCC_ClockConfig+0x364>)
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80086ca:	4b0a      	ldr	r3, [pc, #40]	@ (80086f4 <HAL_RCC_ClockConfig+0x368>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fa f944 	bl	800295c <HAL_InitTick>
 80086d4:	4603      	mov	r3, r0
 80086d6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80086d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086da:	4618      	mov	r0, r3
 80086dc:	3718      	adds	r7, #24
 80086de:	46bd      	mov	sp, r7
 80086e0:	bd80      	pop	{r7, pc}
 80086e2:	bf00      	nop
 80086e4:	58024400 	.word	0x58024400
 80086e8:	08014a80 	.word	0x08014a80
 80086ec:	24000004 	.word	0x24000004
 80086f0:	24000000 	.word	0x24000000
 80086f4:	24000030 	.word	0x24000030

080086f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b089      	sub	sp, #36	@ 0x24
 80086fc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80086fe:	4bb3      	ldr	r3, [pc, #716]	@ (80089cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008700:	691b      	ldr	r3, [r3, #16]
 8008702:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008706:	2b18      	cmp	r3, #24
 8008708:	f200 8155 	bhi.w	80089b6 <HAL_RCC_GetSysClockFreq+0x2be>
 800870c:	a201      	add	r2, pc, #4	@ (adr r2, 8008714 <HAL_RCC_GetSysClockFreq+0x1c>)
 800870e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008712:	bf00      	nop
 8008714:	08008779 	.word	0x08008779
 8008718:	080089b7 	.word	0x080089b7
 800871c:	080089b7 	.word	0x080089b7
 8008720:	080089b7 	.word	0x080089b7
 8008724:	080089b7 	.word	0x080089b7
 8008728:	080089b7 	.word	0x080089b7
 800872c:	080089b7 	.word	0x080089b7
 8008730:	080089b7 	.word	0x080089b7
 8008734:	0800879f 	.word	0x0800879f
 8008738:	080089b7 	.word	0x080089b7
 800873c:	080089b7 	.word	0x080089b7
 8008740:	080089b7 	.word	0x080089b7
 8008744:	080089b7 	.word	0x080089b7
 8008748:	080089b7 	.word	0x080089b7
 800874c:	080089b7 	.word	0x080089b7
 8008750:	080089b7 	.word	0x080089b7
 8008754:	080087a5 	.word	0x080087a5
 8008758:	080089b7 	.word	0x080089b7
 800875c:	080089b7 	.word	0x080089b7
 8008760:	080089b7 	.word	0x080089b7
 8008764:	080089b7 	.word	0x080089b7
 8008768:	080089b7 	.word	0x080089b7
 800876c:	080089b7 	.word	0x080089b7
 8008770:	080089b7 	.word	0x080089b7
 8008774:	080087ab 	.word	0x080087ab
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008778:	4b94      	ldr	r3, [pc, #592]	@ (80089cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f003 0320 	and.w	r3, r3, #32
 8008780:	2b00      	cmp	r3, #0
 8008782:	d009      	beq.n	8008798 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008784:	4b91      	ldr	r3, [pc, #580]	@ (80089cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	08db      	lsrs	r3, r3, #3
 800878a:	f003 0303 	and.w	r3, r3, #3
 800878e:	4a90      	ldr	r2, [pc, #576]	@ (80089d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008790:	fa22 f303 	lsr.w	r3, r2, r3
 8008794:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008796:	e111      	b.n	80089bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008798:	4b8d      	ldr	r3, [pc, #564]	@ (80089d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800879a:	61bb      	str	r3, [r7, #24]
      break;
 800879c:	e10e      	b.n	80089bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800879e:	4b8d      	ldr	r3, [pc, #564]	@ (80089d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80087a0:	61bb      	str	r3, [r7, #24]
      break;
 80087a2:	e10b      	b.n	80089bc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80087a4:	4b8c      	ldr	r3, [pc, #560]	@ (80089d8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80087a6:	61bb      	str	r3, [r7, #24]
      break;
 80087a8:	e108      	b.n	80089bc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80087aa:	4b88      	ldr	r3, [pc, #544]	@ (80089cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087ae:	f003 0303 	and.w	r3, r3, #3
 80087b2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80087b4:	4b85      	ldr	r3, [pc, #532]	@ (80089cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b8:	091b      	lsrs	r3, r3, #4
 80087ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087be:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80087c0:	4b82      	ldr	r3, [pc, #520]	@ (80089cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087c4:	f003 0301 	and.w	r3, r3, #1
 80087c8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80087ca:	4b80      	ldr	r3, [pc, #512]	@ (80089cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087ce:	08db      	lsrs	r3, r3, #3
 80087d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	fb02 f303 	mul.w	r3, r2, r3
 80087da:	ee07 3a90 	vmov	s15, r3
 80087de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087e2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	f000 80e1 	beq.w	80089b0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80087ee:	697b      	ldr	r3, [r7, #20]
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	f000 8083 	beq.w	80088fc <HAL_RCC_GetSysClockFreq+0x204>
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	f200 80a1 	bhi.w	8008940 <HAL_RCC_GetSysClockFreq+0x248>
 80087fe:	697b      	ldr	r3, [r7, #20]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d003      	beq.n	800880c <HAL_RCC_GetSysClockFreq+0x114>
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	2b01      	cmp	r3, #1
 8008808:	d056      	beq.n	80088b8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800880a:	e099      	b.n	8008940 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800880c:	4b6f      	ldr	r3, [pc, #444]	@ (80089cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f003 0320 	and.w	r3, r3, #32
 8008814:	2b00      	cmp	r3, #0
 8008816:	d02d      	beq.n	8008874 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008818:	4b6c      	ldr	r3, [pc, #432]	@ (80089cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	08db      	lsrs	r3, r3, #3
 800881e:	f003 0303 	and.w	r3, r3, #3
 8008822:	4a6b      	ldr	r2, [pc, #428]	@ (80089d0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008824:	fa22 f303 	lsr.w	r3, r2, r3
 8008828:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	ee07 3a90 	vmov	s15, r3
 8008830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	ee07 3a90 	vmov	s15, r3
 800883a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800883e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008842:	4b62      	ldr	r3, [pc, #392]	@ (80089cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800884a:	ee07 3a90 	vmov	s15, r3
 800884e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008852:	ed97 6a02 	vldr	s12, [r7, #8]
 8008856:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80089dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800885a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800885e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008862:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800886a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800886e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008872:	e087      	b.n	8008984 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	ee07 3a90 	vmov	s15, r3
 800887a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800887e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80089e0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008886:	4b51      	ldr	r3, [pc, #324]	@ (80089cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800888a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800888e:	ee07 3a90 	vmov	s15, r3
 8008892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008896:	ed97 6a02 	vldr	s12, [r7, #8]
 800889a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80089dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800889e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80088b6:	e065      	b.n	8008984 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	ee07 3a90 	vmov	s15, r3
 80088be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088c2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80089e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80088c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088ca:	4b40      	ldr	r3, [pc, #256]	@ (80089cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088d2:	ee07 3a90 	vmov	s15, r3
 80088d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088da:	ed97 6a02 	vldr	s12, [r7, #8]
 80088de:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80089dc <HAL_RCC_GetSysClockFreq+0x2e4>
 80088e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80088fa:	e043      	b.n	8008984 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	ee07 3a90 	vmov	s15, r3
 8008902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008906:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80089e8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800890a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800890e:	4b2f      	ldr	r3, [pc, #188]	@ (80089cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008916:	ee07 3a90 	vmov	s15, r3
 800891a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800891e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008922:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80089dc <HAL_RCC_GetSysClockFreq+0x2e4>
 8008926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800892a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800892e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800893a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800893e:	e021      	b.n	8008984 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	ee07 3a90 	vmov	s15, r3
 8008946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800894a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80089e4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800894e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008952:	4b1e      	ldr	r3, [pc, #120]	@ (80089cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800895a:	ee07 3a90 	vmov	s15, r3
 800895e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008962:	ed97 6a02 	vldr	s12, [r7, #8]
 8008966:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80089dc <HAL_RCC_GetSysClockFreq+0x2e4>
 800896a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800896e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008972:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800897a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800897e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008982:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008984:	4b11      	ldr	r3, [pc, #68]	@ (80089cc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008988:	0a5b      	lsrs	r3, r3, #9
 800898a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800898e:	3301      	adds	r3, #1
 8008990:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	ee07 3a90 	vmov	s15, r3
 8008998:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800899c:	edd7 6a07 	vldr	s13, [r7, #28]
 80089a0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089a8:	ee17 3a90 	vmov	r3, s15
 80089ac:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80089ae:	e005      	b.n	80089bc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80089b0:	2300      	movs	r3, #0
 80089b2:	61bb      	str	r3, [r7, #24]
      break;
 80089b4:	e002      	b.n	80089bc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80089b6:	4b07      	ldr	r3, [pc, #28]	@ (80089d4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80089b8:	61bb      	str	r3, [r7, #24]
      break;
 80089ba:	bf00      	nop
  }

  return sysclockfreq;
 80089bc:	69bb      	ldr	r3, [r7, #24]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3724      	adds	r7, #36	@ 0x24
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	58024400 	.word	0x58024400
 80089d0:	03d09000 	.word	0x03d09000
 80089d4:	003d0900 	.word	0x003d0900
 80089d8:	017d7840 	.word	0x017d7840
 80089dc:	46000000 	.word	0x46000000
 80089e0:	4c742400 	.word	0x4c742400
 80089e4:	4a742400 	.word	0x4a742400
 80089e8:	4bbebc20 	.word	0x4bbebc20

080089ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80089f2:	f7ff fe81 	bl	80086f8 <HAL_RCC_GetSysClockFreq>
 80089f6:	4602      	mov	r2, r0
 80089f8:	4b10      	ldr	r3, [pc, #64]	@ (8008a3c <HAL_RCC_GetHCLKFreq+0x50>)
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	0a1b      	lsrs	r3, r3, #8
 80089fe:	f003 030f 	and.w	r3, r3, #15
 8008a02:	490f      	ldr	r1, [pc, #60]	@ (8008a40 <HAL_RCC_GetHCLKFreq+0x54>)
 8008a04:	5ccb      	ldrb	r3, [r1, r3]
 8008a06:	f003 031f 	and.w	r3, r3, #31
 8008a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8008a0e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008a10:	4b0a      	ldr	r3, [pc, #40]	@ (8008a3c <HAL_RCC_GetHCLKFreq+0x50>)
 8008a12:	699b      	ldr	r3, [r3, #24]
 8008a14:	f003 030f 	and.w	r3, r3, #15
 8008a18:	4a09      	ldr	r2, [pc, #36]	@ (8008a40 <HAL_RCC_GetHCLKFreq+0x54>)
 8008a1a:	5cd3      	ldrb	r3, [r2, r3]
 8008a1c:	f003 031f 	and.w	r3, r3, #31
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	fa22 f303 	lsr.w	r3, r2, r3
 8008a26:	4a07      	ldr	r2, [pc, #28]	@ (8008a44 <HAL_RCC_GetHCLKFreq+0x58>)
 8008a28:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008a2a:	4a07      	ldr	r2, [pc, #28]	@ (8008a48 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008a30:	4b04      	ldr	r3, [pc, #16]	@ (8008a44 <HAL_RCC_GetHCLKFreq+0x58>)
 8008a32:	681b      	ldr	r3, [r3, #0]
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3708      	adds	r7, #8
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}
 8008a3c:	58024400 	.word	0x58024400
 8008a40:	08014a80 	.word	0x08014a80
 8008a44:	24000004 	.word	0x24000004
 8008a48:	24000000 	.word	0x24000000

08008a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008a50:	f7ff ffcc 	bl	80089ec <HAL_RCC_GetHCLKFreq>
 8008a54:	4602      	mov	r2, r0
 8008a56:	4b06      	ldr	r3, [pc, #24]	@ (8008a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008a58:	69db      	ldr	r3, [r3, #28]
 8008a5a:	091b      	lsrs	r3, r3, #4
 8008a5c:	f003 0307 	and.w	r3, r3, #7
 8008a60:	4904      	ldr	r1, [pc, #16]	@ (8008a74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008a62:	5ccb      	ldrb	r3, [r1, r3]
 8008a64:	f003 031f 	and.w	r3, r3, #31
 8008a68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	bd80      	pop	{r7, pc}
 8008a70:	58024400 	.word	0x58024400
 8008a74:	08014a80 	.word	0x08014a80

08008a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008a7c:	f7ff ffb6 	bl	80089ec <HAL_RCC_GetHCLKFreq>
 8008a80:	4602      	mov	r2, r0
 8008a82:	4b06      	ldr	r3, [pc, #24]	@ (8008a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a84:	69db      	ldr	r3, [r3, #28]
 8008a86:	0a1b      	lsrs	r3, r3, #8
 8008a88:	f003 0307 	and.w	r3, r3, #7
 8008a8c:	4904      	ldr	r1, [pc, #16]	@ (8008aa0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008a8e:	5ccb      	ldrb	r3, [r1, r3]
 8008a90:	f003 031f 	and.w	r3, r3, #31
 8008a94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	bd80      	pop	{r7, pc}
 8008a9c:	58024400 	.word	0x58024400
 8008aa0:	08014a80 	.word	0x08014a80

08008aa4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008aa8:	b0ca      	sub	sp, #296	@ 0x128
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008ac8:	2500      	movs	r5, #0
 8008aca:	ea54 0305 	orrs.w	r3, r4, r5
 8008ace:	d049      	beq.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ad4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ad6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ada:	d02f      	beq.n	8008b3c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008adc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008ae0:	d828      	bhi.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008ae2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008ae6:	d01a      	beq.n	8008b1e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008ae8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008aec:	d822      	bhi.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d003      	beq.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008af2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008af6:	d007      	beq.n	8008b08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008af8:	e01c      	b.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008afa:	4bb8      	ldr	r3, [pc, #736]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008afc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008afe:	4ab7      	ldr	r2, [pc, #732]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b06:	e01a      	b.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b0c:	3308      	adds	r3, #8
 8008b0e:	2102      	movs	r1, #2
 8008b10:	4618      	mov	r0, r3
 8008b12:	f002 fb61 	bl	800b1d8 <RCCEx_PLL2_Config>
 8008b16:	4603      	mov	r3, r0
 8008b18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b1c:	e00f      	b.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b22:	3328      	adds	r3, #40	@ 0x28
 8008b24:	2102      	movs	r1, #2
 8008b26:	4618      	mov	r0, r3
 8008b28:	f002 fc08 	bl	800b33c <RCCEx_PLL3_Config>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008b32:	e004      	b.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b34:	2301      	movs	r3, #1
 8008b36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b3a:	e000      	b.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008b3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d10a      	bne.n	8008b5c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008b46:	4ba5      	ldr	r3, [pc, #660]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b4a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008b54:	4aa1      	ldr	r2, [pc, #644]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b56:	430b      	orrs	r3, r1
 8008b58:	6513      	str	r3, [r2, #80]	@ 0x50
 8008b5a:	e003      	b.n	8008b64 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b60:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008b70:	f04f 0900 	mov.w	r9, #0
 8008b74:	ea58 0309 	orrs.w	r3, r8, r9
 8008b78:	d047      	beq.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b80:	2b04      	cmp	r3, #4
 8008b82:	d82a      	bhi.n	8008bda <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008b84:	a201      	add	r2, pc, #4	@ (adr r2, 8008b8c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b8a:	bf00      	nop
 8008b8c:	08008ba1 	.word	0x08008ba1
 8008b90:	08008baf 	.word	0x08008baf
 8008b94:	08008bc5 	.word	0x08008bc5
 8008b98:	08008be3 	.word	0x08008be3
 8008b9c:	08008be3 	.word	0x08008be3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ba0:	4b8e      	ldr	r3, [pc, #568]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ba4:	4a8d      	ldr	r2, [pc, #564]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ba6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008baa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008bac:	e01a      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bb2:	3308      	adds	r3, #8
 8008bb4:	2100      	movs	r1, #0
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f002 fb0e 	bl	800b1d8 <RCCEx_PLL2_Config>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008bc2:	e00f      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bc8:	3328      	adds	r3, #40	@ 0x28
 8008bca:	2100      	movs	r1, #0
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f002 fbb5 	bl	800b33c <RCCEx_PLL3_Config>
 8008bd2:	4603      	mov	r3, r0
 8008bd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008bd8:	e004      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008bda:	2301      	movs	r3, #1
 8008bdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008be0:	e000      	b.n	8008be4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008be2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008be4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d10a      	bne.n	8008c02 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008bec:	4b7b      	ldr	r3, [pc, #492]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bf0:	f023 0107 	bic.w	r1, r3, #7
 8008bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008bfa:	4a78      	ldr	r2, [pc, #480]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bfc:	430b      	orrs	r3, r1
 8008bfe:	6513      	str	r3, [r2, #80]	@ 0x50
 8008c00:	e003      	b.n	8008c0a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c12:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008c16:	f04f 0b00 	mov.w	fp, #0
 8008c1a:	ea5a 030b 	orrs.w	r3, sl, fp
 8008c1e:	d04c      	beq.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c2a:	d030      	beq.n	8008c8e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008c2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008c30:	d829      	bhi.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008c32:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c34:	d02d      	beq.n	8008c92 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008c36:	2bc0      	cmp	r3, #192	@ 0xc0
 8008c38:	d825      	bhi.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008c3a:	2b80      	cmp	r3, #128	@ 0x80
 8008c3c:	d018      	beq.n	8008c70 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008c3e:	2b80      	cmp	r3, #128	@ 0x80
 8008c40:	d821      	bhi.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d002      	beq.n	8008c4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008c46:	2b40      	cmp	r3, #64	@ 0x40
 8008c48:	d007      	beq.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008c4a:	e01c      	b.n	8008c86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c4c:	4b63      	ldr	r3, [pc, #396]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c50:	4a62      	ldr	r2, [pc, #392]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008c56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008c58:	e01c      	b.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c5e:	3308      	adds	r3, #8
 8008c60:	2100      	movs	r1, #0
 8008c62:	4618      	mov	r0, r3
 8008c64:	f002 fab8 	bl	800b1d8 <RCCEx_PLL2_Config>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008c6e:	e011      	b.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c74:	3328      	adds	r3, #40	@ 0x28
 8008c76:	2100      	movs	r1, #0
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f002 fb5f 	bl	800b33c <RCCEx_PLL3_Config>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008c84:	e006      	b.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c86:	2301      	movs	r3, #1
 8008c88:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c8c:	e002      	b.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008c8e:	bf00      	nop
 8008c90:	e000      	b.n	8008c94 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008c92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d10a      	bne.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008c9c:	4b4f      	ldr	r3, [pc, #316]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ca0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008caa:	4a4c      	ldr	r2, [pc, #304]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cac:	430b      	orrs	r3, r1
 8008cae:	6513      	str	r3, [r2, #80]	@ 0x50
 8008cb0:	e003      	b.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cb6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008cba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cc2:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008cc6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008cca:	2300      	movs	r3, #0
 8008ccc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008cd0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	d053      	beq.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008ce2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008ce6:	d035      	beq.n	8008d54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008ce8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008cec:	d82e      	bhi.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008cee:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008cf2:	d031      	beq.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008cf4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008cf8:	d828      	bhi.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008cfa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008cfe:	d01a      	beq.n	8008d36 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008d00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008d04:	d822      	bhi.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d003      	beq.n	8008d12 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008d0a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008d0e:	d007      	beq.n	8008d20 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008d10:	e01c      	b.n	8008d4c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d12:	4b32      	ldr	r3, [pc, #200]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d16:	4a31      	ldr	r2, [pc, #196]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d1e:	e01c      	b.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d24:	3308      	adds	r3, #8
 8008d26:	2100      	movs	r1, #0
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f002 fa55 	bl	800b1d8 <RCCEx_PLL2_Config>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008d34:	e011      	b.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d3a:	3328      	adds	r3, #40	@ 0x28
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f002 fafc 	bl	800b33c <RCCEx_PLL3_Config>
 8008d44:	4603      	mov	r3, r0
 8008d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d4a:	e006      	b.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008d52:	e002      	b.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008d54:	bf00      	nop
 8008d56:	e000      	b.n	8008d5a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008d58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d10b      	bne.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008d62:	4b1e      	ldr	r3, [pc, #120]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d66:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d6e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008d72:	4a1a      	ldr	r2, [pc, #104]	@ (8008ddc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d74:	430b      	orrs	r3, r1
 8008d76:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d78:	e003      	b.n	8008d82 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d7e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008d8e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008d92:	2300      	movs	r3, #0
 8008d94:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008d98:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008d9c:	460b      	mov	r3, r1
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	d056      	beq.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008da2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008da6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008daa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008dae:	d038      	beq.n	8008e22 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008db0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008db4:	d831      	bhi.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008db6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008dba:	d034      	beq.n	8008e26 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008dbc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008dc0:	d82b      	bhi.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008dc2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008dc6:	d01d      	beq.n	8008e04 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008dc8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008dcc:	d825      	bhi.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d006      	beq.n	8008de0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008dd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008dd6:	d00a      	beq.n	8008dee <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008dd8:	e01f      	b.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008dda:	bf00      	nop
 8008ddc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008de0:	4ba2      	ldr	r3, [pc, #648]	@ (800906c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de4:	4aa1      	ldr	r2, [pc, #644]	@ (800906c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008de6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008dea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008dec:	e01c      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008df2:	3308      	adds	r3, #8
 8008df4:	2100      	movs	r1, #0
 8008df6:	4618      	mov	r0, r3
 8008df8:	f002 f9ee 	bl	800b1d8 <RCCEx_PLL2_Config>
 8008dfc:	4603      	mov	r3, r0
 8008dfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008e02:	e011      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e08:	3328      	adds	r3, #40	@ 0x28
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f002 fa95 	bl	800b33c <RCCEx_PLL3_Config>
 8008e12:	4603      	mov	r3, r0
 8008e14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008e18:	e006      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e20:	e002      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008e22:	bf00      	nop
 8008e24:	e000      	b.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008e26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d10b      	bne.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008e30:	4b8e      	ldr	r3, [pc, #568]	@ (800906c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e34:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e3c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008e40:	4a8a      	ldr	r2, [pc, #552]	@ (800906c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e42:	430b      	orrs	r3, r1
 8008e44:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e46:	e003      	b.n	8008e50 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e4c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008e50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e58:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008e5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008e60:	2300      	movs	r3, #0
 8008e62:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008e66:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008e6a:	460b      	mov	r3, r1
 8008e6c:	4313      	orrs	r3, r2
 8008e6e:	d03a      	beq.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e76:	2b30      	cmp	r3, #48	@ 0x30
 8008e78:	d01f      	beq.n	8008eba <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008e7a:	2b30      	cmp	r3, #48	@ 0x30
 8008e7c:	d819      	bhi.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008e7e:	2b20      	cmp	r3, #32
 8008e80:	d00c      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008e82:	2b20      	cmp	r3, #32
 8008e84:	d815      	bhi.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d019      	beq.n	8008ebe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008e8a:	2b10      	cmp	r3, #16
 8008e8c:	d111      	bne.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e8e:	4b77      	ldr	r3, [pc, #476]	@ (800906c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e92:	4a76      	ldr	r2, [pc, #472]	@ (800906c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008e9a:	e011      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ea0:	3308      	adds	r3, #8
 8008ea2:	2102      	movs	r1, #2
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f002 f997 	bl	800b1d8 <RCCEx_PLL2_Config>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008eb0:	e006      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008eb8:	e002      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008eba:	bf00      	nop
 8008ebc:	e000      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008ebe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ec0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d10a      	bne.n	8008ede <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008ec8:	4b68      	ldr	r3, [pc, #416]	@ (800906c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ecc:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ed6:	4a65      	ldr	r2, [pc, #404]	@ (800906c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ed8:	430b      	orrs	r3, r1
 8008eda:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008edc:	e003      	b.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ede:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ee2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008ee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eee:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008ef2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008efc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008f00:	460b      	mov	r3, r1
 8008f02:	4313      	orrs	r3, r2
 8008f04:	d051      	beq.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f0a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f0c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f10:	d035      	beq.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008f12:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008f16:	d82e      	bhi.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008f18:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008f1c:	d031      	beq.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008f1e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008f22:	d828      	bhi.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008f24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f28:	d01a      	beq.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008f2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008f2e:	d822      	bhi.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d003      	beq.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008f34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008f38:	d007      	beq.n	8008f4a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008f3a:	e01c      	b.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f3c:	4b4b      	ldr	r3, [pc, #300]	@ (800906c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f40:	4a4a      	ldr	r2, [pc, #296]	@ (800906c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008f48:	e01c      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f4e:	3308      	adds	r3, #8
 8008f50:	2100      	movs	r1, #0
 8008f52:	4618      	mov	r0, r3
 8008f54:	f002 f940 	bl	800b1d8 <RCCEx_PLL2_Config>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008f5e:	e011      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f64:	3328      	adds	r3, #40	@ 0x28
 8008f66:	2100      	movs	r1, #0
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f002 f9e7 	bl	800b33c <RCCEx_PLL3_Config>
 8008f6e:	4603      	mov	r3, r0
 8008f70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008f74:	e006      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f7c:	e002      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008f7e:	bf00      	nop
 8008f80:	e000      	b.n	8008f84 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008f82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d10a      	bne.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008f8c:	4b37      	ldr	r3, [pc, #220]	@ (800906c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f90:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f9a:	4a34      	ldr	r2, [pc, #208]	@ (800906c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f9c:	430b      	orrs	r3, r1
 8008f9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8008fa0:	e003      	b.n	8008faa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fa6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008faa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb2:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008fb6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008fba:	2300      	movs	r3, #0
 8008fbc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008fc0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008fc4:	460b      	mov	r3, r1
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	d056      	beq.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008fd4:	d033      	beq.n	800903e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008fd6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008fda:	d82c      	bhi.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008fdc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008fe0:	d02f      	beq.n	8009042 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008fe2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008fe6:	d826      	bhi.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008fe8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008fec:	d02b      	beq.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008fee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008ff2:	d820      	bhi.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008ff4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ff8:	d012      	beq.n	8009020 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008ffa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008ffe:	d81a      	bhi.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009000:	2b00      	cmp	r3, #0
 8009002:	d022      	beq.n	800904a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009008:	d115      	bne.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800900a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800900e:	3308      	adds	r3, #8
 8009010:	2101      	movs	r1, #1
 8009012:	4618      	mov	r0, r3
 8009014:	f002 f8e0 	bl	800b1d8 <RCCEx_PLL2_Config>
 8009018:	4603      	mov	r3, r0
 800901a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800901e:	e015      	b.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009020:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009024:	3328      	adds	r3, #40	@ 0x28
 8009026:	2101      	movs	r1, #1
 8009028:	4618      	mov	r0, r3
 800902a:	f002 f987 	bl	800b33c <RCCEx_PLL3_Config>
 800902e:	4603      	mov	r3, r0
 8009030:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009034:	e00a      	b.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009036:	2301      	movs	r3, #1
 8009038:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800903c:	e006      	b.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800903e:	bf00      	nop
 8009040:	e004      	b.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009042:	bf00      	nop
 8009044:	e002      	b.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009046:	bf00      	nop
 8009048:	e000      	b.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800904a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800904c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10d      	bne.n	8009070 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009054:	4b05      	ldr	r3, [pc, #20]	@ (800906c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009056:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009058:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800905c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009060:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009062:	4a02      	ldr	r2, [pc, #8]	@ (800906c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009064:	430b      	orrs	r3, r1
 8009066:	6513      	str	r3, [r2, #80]	@ 0x50
 8009068:	e006      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800906a:	bf00      	nop
 800906c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009070:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009074:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800907c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009080:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009084:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009088:	2300      	movs	r3, #0
 800908a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800908e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8009092:	460b      	mov	r3, r1
 8009094:	4313      	orrs	r3, r2
 8009096:	d055      	beq.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009098:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800909c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80090a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80090a4:	d033      	beq.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80090a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80090aa:	d82c      	bhi.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80090ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090b0:	d02f      	beq.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80090b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090b6:	d826      	bhi.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80090b8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80090bc:	d02b      	beq.n	8009116 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80090be:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80090c2:	d820      	bhi.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80090c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090c8:	d012      	beq.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80090ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090ce:	d81a      	bhi.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d022      	beq.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80090d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80090d8:	d115      	bne.n	8009106 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80090da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090de:	3308      	adds	r3, #8
 80090e0:	2101      	movs	r1, #1
 80090e2:	4618      	mov	r0, r3
 80090e4:	f002 f878 	bl	800b1d8 <RCCEx_PLL2_Config>
 80090e8:	4603      	mov	r3, r0
 80090ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80090ee:	e015      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80090f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090f4:	3328      	adds	r3, #40	@ 0x28
 80090f6:	2101      	movs	r1, #1
 80090f8:	4618      	mov	r0, r3
 80090fa:	f002 f91f 	bl	800b33c <RCCEx_PLL3_Config>
 80090fe:	4603      	mov	r3, r0
 8009100:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009104:	e00a      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800910c:	e006      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800910e:	bf00      	nop
 8009110:	e004      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009112:	bf00      	nop
 8009114:	e002      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009116:	bf00      	nop
 8009118:	e000      	b.n	800911c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800911a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800911c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009120:	2b00      	cmp	r3, #0
 8009122:	d10b      	bne.n	800913c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009124:	4ba3      	ldr	r3, [pc, #652]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009128:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800912c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009130:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009134:	4a9f      	ldr	r2, [pc, #636]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009136:	430b      	orrs	r3, r1
 8009138:	6593      	str	r3, [r2, #88]	@ 0x58
 800913a:	e003      	b.n	8009144 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800913c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009140:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009144:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800914c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8009150:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009154:	2300      	movs	r3, #0
 8009156:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800915a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800915e:	460b      	mov	r3, r1
 8009160:	4313      	orrs	r3, r2
 8009162:	d037      	beq.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009164:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009168:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800916a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800916e:	d00e      	beq.n	800918e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009170:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009174:	d816      	bhi.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009176:	2b00      	cmp	r3, #0
 8009178:	d018      	beq.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x708>
 800917a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800917e:	d111      	bne.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009180:	4b8c      	ldr	r3, [pc, #560]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009184:	4a8b      	ldr	r2, [pc, #556]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009186:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800918a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800918c:	e00f      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800918e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009192:	3308      	adds	r3, #8
 8009194:	2101      	movs	r1, #1
 8009196:	4618      	mov	r0, r3
 8009198:	f002 f81e 	bl	800b1d8 <RCCEx_PLL2_Config>
 800919c:	4603      	mov	r3, r0
 800919e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80091a2:	e004      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80091aa:	e000      	b.n	80091ae <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80091ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d10a      	bne.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80091b6:	4b7f      	ldr	r3, [pc, #508]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80091ba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80091be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80091c4:	4a7b      	ldr	r2, [pc, #492]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091c6:	430b      	orrs	r3, r1
 80091c8:	6513      	str	r3, [r2, #80]	@ 0x50
 80091ca:	e003      	b.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091d0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80091d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091dc:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80091e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80091e4:	2300      	movs	r3, #0
 80091e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80091ea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80091ee:	460b      	mov	r3, r1
 80091f0:	4313      	orrs	r3, r2
 80091f2:	d039      	beq.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80091f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091fa:	2b03      	cmp	r3, #3
 80091fc:	d81c      	bhi.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80091fe:	a201      	add	r2, pc, #4	@ (adr r2, 8009204 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009204:	08009241 	.word	0x08009241
 8009208:	08009215 	.word	0x08009215
 800920c:	08009223 	.word	0x08009223
 8009210:	08009241 	.word	0x08009241
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009214:	4b67      	ldr	r3, [pc, #412]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009218:	4a66      	ldr	r2, [pc, #408]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800921a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800921e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009220:	e00f      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009222:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009226:	3308      	adds	r3, #8
 8009228:	2102      	movs	r1, #2
 800922a:	4618      	mov	r0, r3
 800922c:	f001 ffd4 	bl	800b1d8 <RCCEx_PLL2_Config>
 8009230:	4603      	mov	r3, r0
 8009232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009236:	e004      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800923e:	e000      	b.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009240:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009242:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009246:	2b00      	cmp	r3, #0
 8009248:	d10a      	bne.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800924a:	4b5a      	ldr	r3, [pc, #360]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800924c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800924e:	f023 0103 	bic.w	r1, r3, #3
 8009252:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009256:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009258:	4a56      	ldr	r2, [pc, #344]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800925a:	430b      	orrs	r3, r1
 800925c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800925e:	e003      	b.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009260:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009264:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009268:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800926c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009270:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009274:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009278:	2300      	movs	r3, #0
 800927a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800927e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8009282:	460b      	mov	r3, r1
 8009284:	4313      	orrs	r3, r2
 8009286:	f000 809f 	beq.w	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800928a:	4b4b      	ldr	r3, [pc, #300]	@ (80093b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a4a      	ldr	r2, [pc, #296]	@ (80093b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009290:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009294:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009296:	f7f9 fbab 	bl	80029f0 <HAL_GetTick>
 800929a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800929e:	e00b      	b.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092a0:	f7f9 fba6 	bl	80029f0 <HAL_GetTick>
 80092a4:	4602      	mov	r2, r0
 80092a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80092aa:	1ad3      	subs	r3, r2, r3
 80092ac:	2b64      	cmp	r3, #100	@ 0x64
 80092ae:	d903      	bls.n	80092b8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80092b0:	2303      	movs	r3, #3
 80092b2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80092b6:	e005      	b.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80092b8:	4b3f      	ldr	r3, [pc, #252]	@ (80093b8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d0ed      	beq.n	80092a0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80092c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d179      	bne.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80092cc:	4b39      	ldr	r3, [pc, #228]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092ce:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80092d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80092d8:	4053      	eors	r3, r2
 80092da:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d015      	beq.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80092e2:	4b34      	ldr	r3, [pc, #208]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092ea:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80092ee:	4b31      	ldr	r3, [pc, #196]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092f2:	4a30      	ldr	r2, [pc, #192]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80092f8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80092fa:	4b2e      	ldr	r3, [pc, #184]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092fe:	4a2d      	ldr	r2, [pc, #180]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009300:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009304:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009306:	4a2b      	ldr	r2, [pc, #172]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009308:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800930c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800930e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009312:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009316:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800931a:	d118      	bne.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800931c:	f7f9 fb68 	bl	80029f0 <HAL_GetTick>
 8009320:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009324:	e00d      	b.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009326:	f7f9 fb63 	bl	80029f0 <HAL_GetTick>
 800932a:	4602      	mov	r2, r0
 800932c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009330:	1ad2      	subs	r2, r2, r3
 8009332:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009336:	429a      	cmp	r2, r3
 8009338:	d903      	bls.n	8009342 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800933a:	2303      	movs	r3, #3
 800933c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8009340:	e005      	b.n	800934e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009342:	4b1c      	ldr	r3, [pc, #112]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009344:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009346:	f003 0302 	and.w	r3, r3, #2
 800934a:	2b00      	cmp	r3, #0
 800934c:	d0eb      	beq.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800934e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009352:	2b00      	cmp	r3, #0
 8009354:	d129      	bne.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800935a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800935e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009362:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009366:	d10e      	bne.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009368:	4b12      	ldr	r3, [pc, #72]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800936a:	691b      	ldr	r3, [r3, #16]
 800936c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8009370:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009374:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009378:	091a      	lsrs	r2, r3, #4
 800937a:	4b10      	ldr	r3, [pc, #64]	@ (80093bc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800937c:	4013      	ands	r3, r2
 800937e:	4a0d      	ldr	r2, [pc, #52]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009380:	430b      	orrs	r3, r1
 8009382:	6113      	str	r3, [r2, #16]
 8009384:	e005      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009386:	4b0b      	ldr	r3, [pc, #44]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	4a0a      	ldr	r2, [pc, #40]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800938c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009390:	6113      	str	r3, [r2, #16]
 8009392:	4b08      	ldr	r3, [pc, #32]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009394:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800939a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800939e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093a2:	4a04      	ldr	r2, [pc, #16]	@ (80093b4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80093a4:	430b      	orrs	r3, r1
 80093a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80093a8:	e00e      	b.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80093aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80093b2:	e009      	b.n	80093c8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80093b4:	58024400 	.word	0x58024400
 80093b8:	58024800 	.word	0x58024800
 80093bc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80093c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093d0:	f002 0301 	and.w	r3, r2, #1
 80093d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80093d8:	2300      	movs	r3, #0
 80093da:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80093de:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80093e2:	460b      	mov	r3, r1
 80093e4:	4313      	orrs	r3, r2
 80093e6:	f000 8089 	beq.w	80094fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80093ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80093f0:	2b28      	cmp	r3, #40	@ 0x28
 80093f2:	d86b      	bhi.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80093f4:	a201      	add	r2, pc, #4	@ (adr r2, 80093fc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80093f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fa:	bf00      	nop
 80093fc:	080094d5 	.word	0x080094d5
 8009400:	080094cd 	.word	0x080094cd
 8009404:	080094cd 	.word	0x080094cd
 8009408:	080094cd 	.word	0x080094cd
 800940c:	080094cd 	.word	0x080094cd
 8009410:	080094cd 	.word	0x080094cd
 8009414:	080094cd 	.word	0x080094cd
 8009418:	080094cd 	.word	0x080094cd
 800941c:	080094a1 	.word	0x080094a1
 8009420:	080094cd 	.word	0x080094cd
 8009424:	080094cd 	.word	0x080094cd
 8009428:	080094cd 	.word	0x080094cd
 800942c:	080094cd 	.word	0x080094cd
 8009430:	080094cd 	.word	0x080094cd
 8009434:	080094cd 	.word	0x080094cd
 8009438:	080094cd 	.word	0x080094cd
 800943c:	080094b7 	.word	0x080094b7
 8009440:	080094cd 	.word	0x080094cd
 8009444:	080094cd 	.word	0x080094cd
 8009448:	080094cd 	.word	0x080094cd
 800944c:	080094cd 	.word	0x080094cd
 8009450:	080094cd 	.word	0x080094cd
 8009454:	080094cd 	.word	0x080094cd
 8009458:	080094cd 	.word	0x080094cd
 800945c:	080094d5 	.word	0x080094d5
 8009460:	080094cd 	.word	0x080094cd
 8009464:	080094cd 	.word	0x080094cd
 8009468:	080094cd 	.word	0x080094cd
 800946c:	080094cd 	.word	0x080094cd
 8009470:	080094cd 	.word	0x080094cd
 8009474:	080094cd 	.word	0x080094cd
 8009478:	080094cd 	.word	0x080094cd
 800947c:	080094d5 	.word	0x080094d5
 8009480:	080094cd 	.word	0x080094cd
 8009484:	080094cd 	.word	0x080094cd
 8009488:	080094cd 	.word	0x080094cd
 800948c:	080094cd 	.word	0x080094cd
 8009490:	080094cd 	.word	0x080094cd
 8009494:	080094cd 	.word	0x080094cd
 8009498:	080094cd 	.word	0x080094cd
 800949c:	080094d5 	.word	0x080094d5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80094a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094a4:	3308      	adds	r3, #8
 80094a6:	2101      	movs	r1, #1
 80094a8:	4618      	mov	r0, r3
 80094aa:	f001 fe95 	bl	800b1d8 <RCCEx_PLL2_Config>
 80094ae:	4603      	mov	r3, r0
 80094b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80094b4:	e00f      	b.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ba:	3328      	adds	r3, #40	@ 0x28
 80094bc:	2101      	movs	r1, #1
 80094be:	4618      	mov	r0, r3
 80094c0:	f001 ff3c 	bl	800b33c <RCCEx_PLL3_Config>
 80094c4:	4603      	mov	r3, r0
 80094c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80094ca:	e004      	b.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094cc:	2301      	movs	r3, #1
 80094ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80094d2:	e000      	b.n	80094d6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80094d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d10a      	bne.n	80094f4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80094de:	4bbf      	ldr	r3, [pc, #764]	@ (80097dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80094e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094e2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80094e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80094ec:	4abb      	ldr	r2, [pc, #748]	@ (80097dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80094ee:	430b      	orrs	r3, r1
 80094f0:	6553      	str	r3, [r2, #84]	@ 0x54
 80094f2:	e003      	b.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80094fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009504:	f002 0302 	and.w	r3, r2, #2
 8009508:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800950c:	2300      	movs	r3, #0
 800950e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009512:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009516:	460b      	mov	r3, r1
 8009518:	4313      	orrs	r3, r2
 800951a:	d041      	beq.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800951c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009520:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009522:	2b05      	cmp	r3, #5
 8009524:	d824      	bhi.n	8009570 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009526:	a201      	add	r2, pc, #4	@ (adr r2, 800952c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800952c:	08009579 	.word	0x08009579
 8009530:	08009545 	.word	0x08009545
 8009534:	0800955b 	.word	0x0800955b
 8009538:	08009579 	.word	0x08009579
 800953c:	08009579 	.word	0x08009579
 8009540:	08009579 	.word	0x08009579
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009548:	3308      	adds	r3, #8
 800954a:	2101      	movs	r1, #1
 800954c:	4618      	mov	r0, r3
 800954e:	f001 fe43 	bl	800b1d8 <RCCEx_PLL2_Config>
 8009552:	4603      	mov	r3, r0
 8009554:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009558:	e00f      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800955a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800955e:	3328      	adds	r3, #40	@ 0x28
 8009560:	2101      	movs	r1, #1
 8009562:	4618      	mov	r0, r3
 8009564:	f001 feea 	bl	800b33c <RCCEx_PLL3_Config>
 8009568:	4603      	mov	r3, r0
 800956a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800956e:	e004      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009570:	2301      	movs	r3, #1
 8009572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009576:	e000      	b.n	800957a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009578:	bf00      	nop
    }

    if (ret == HAL_OK)
 800957a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800957e:	2b00      	cmp	r3, #0
 8009580:	d10a      	bne.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8009582:	4b96      	ldr	r3, [pc, #600]	@ (80097dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009584:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009586:	f023 0107 	bic.w	r1, r3, #7
 800958a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800958e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009590:	4a92      	ldr	r2, [pc, #584]	@ (80097dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009592:	430b      	orrs	r3, r1
 8009594:	6553      	str	r3, [r2, #84]	@ 0x54
 8009596:	e003      	b.n	80095a0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009598:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800959c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80095a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a8:	f002 0304 	and.w	r3, r2, #4
 80095ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80095b0:	2300      	movs	r3, #0
 80095b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80095b6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80095ba:	460b      	mov	r3, r1
 80095bc:	4313      	orrs	r3, r2
 80095be:	d044      	beq.n	800964a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80095c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80095c8:	2b05      	cmp	r3, #5
 80095ca:	d825      	bhi.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80095cc:	a201      	add	r2, pc, #4	@ (adr r2, 80095d4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80095ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095d2:	bf00      	nop
 80095d4:	08009621 	.word	0x08009621
 80095d8:	080095ed 	.word	0x080095ed
 80095dc:	08009603 	.word	0x08009603
 80095e0:	08009621 	.word	0x08009621
 80095e4:	08009621 	.word	0x08009621
 80095e8:	08009621 	.word	0x08009621
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095f0:	3308      	adds	r3, #8
 80095f2:	2101      	movs	r1, #1
 80095f4:	4618      	mov	r0, r3
 80095f6:	f001 fdef 	bl	800b1d8 <RCCEx_PLL2_Config>
 80095fa:	4603      	mov	r3, r0
 80095fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009600:	e00f      	b.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009602:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009606:	3328      	adds	r3, #40	@ 0x28
 8009608:	2101      	movs	r1, #1
 800960a:	4618      	mov	r0, r3
 800960c:	f001 fe96 	bl	800b33c <RCCEx_PLL3_Config>
 8009610:	4603      	mov	r3, r0
 8009612:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009616:	e004      	b.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800961e:	e000      	b.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009620:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009622:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009626:	2b00      	cmp	r3, #0
 8009628:	d10b      	bne.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800962a:	4b6c      	ldr	r3, [pc, #432]	@ (80097dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800962c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800962e:	f023 0107 	bic.w	r1, r3, #7
 8009632:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009636:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800963a:	4a68      	ldr	r2, [pc, #416]	@ (80097dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800963c:	430b      	orrs	r3, r1
 800963e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009640:	e003      	b.n	800964a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009646:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800964a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800964e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009652:	f002 0320 	and.w	r3, r2, #32
 8009656:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800965a:	2300      	movs	r3, #0
 800965c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009660:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009664:	460b      	mov	r3, r1
 8009666:	4313      	orrs	r3, r2
 8009668:	d055      	beq.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800966a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800966e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009672:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009676:	d033      	beq.n	80096e0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009678:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800967c:	d82c      	bhi.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800967e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009682:	d02f      	beq.n	80096e4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009684:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009688:	d826      	bhi.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800968a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800968e:	d02b      	beq.n	80096e8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009690:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009694:	d820      	bhi.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009696:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800969a:	d012      	beq.n	80096c2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800969c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80096a0:	d81a      	bhi.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d022      	beq.n	80096ec <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80096a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80096aa:	d115      	bne.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80096ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096b0:	3308      	adds	r3, #8
 80096b2:	2100      	movs	r1, #0
 80096b4:	4618      	mov	r0, r3
 80096b6:	f001 fd8f 	bl	800b1d8 <RCCEx_PLL2_Config>
 80096ba:	4603      	mov	r3, r0
 80096bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80096c0:	e015      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80096c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096c6:	3328      	adds	r3, #40	@ 0x28
 80096c8:	2102      	movs	r1, #2
 80096ca:	4618      	mov	r0, r3
 80096cc:	f001 fe36 	bl	800b33c <RCCEx_PLL3_Config>
 80096d0:	4603      	mov	r3, r0
 80096d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80096d6:	e00a      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80096d8:	2301      	movs	r3, #1
 80096da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80096de:	e006      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80096e0:	bf00      	nop
 80096e2:	e004      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80096e4:	bf00      	nop
 80096e6:	e002      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80096e8:	bf00      	nop
 80096ea:	e000      	b.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80096ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d10b      	bne.n	800970e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80096f6:	4b39      	ldr	r3, [pc, #228]	@ (80097dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80096f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80096fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009702:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009706:	4a35      	ldr	r2, [pc, #212]	@ (80097dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009708:	430b      	orrs	r3, r1
 800970a:	6553      	str	r3, [r2, #84]	@ 0x54
 800970c:	e003      	b.n	8009716 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800970e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009712:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800971a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009722:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009726:	2300      	movs	r3, #0
 8009728:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800972c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009730:	460b      	mov	r3, r1
 8009732:	4313      	orrs	r3, r2
 8009734:	d058      	beq.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800973a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800973e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009742:	d033      	beq.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009744:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009748:	d82c      	bhi.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800974a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800974e:	d02f      	beq.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009750:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009754:	d826      	bhi.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009756:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800975a:	d02b      	beq.n	80097b4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800975c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009760:	d820      	bhi.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009762:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009766:	d012      	beq.n	800978e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009768:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800976c:	d81a      	bhi.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800976e:	2b00      	cmp	r3, #0
 8009770:	d022      	beq.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009772:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009776:	d115      	bne.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800977c:	3308      	adds	r3, #8
 800977e:	2100      	movs	r1, #0
 8009780:	4618      	mov	r0, r3
 8009782:	f001 fd29 	bl	800b1d8 <RCCEx_PLL2_Config>
 8009786:	4603      	mov	r3, r0
 8009788:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800978c:	e015      	b.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800978e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009792:	3328      	adds	r3, #40	@ 0x28
 8009794:	2102      	movs	r1, #2
 8009796:	4618      	mov	r0, r3
 8009798:	f001 fdd0 	bl	800b33c <RCCEx_PLL3_Config>
 800979c:	4603      	mov	r3, r0
 800979e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80097a2:	e00a      	b.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80097aa:	e006      	b.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80097ac:	bf00      	nop
 80097ae:	e004      	b.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80097b0:	bf00      	nop
 80097b2:	e002      	b.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80097b4:	bf00      	nop
 80097b6:	e000      	b.n	80097ba <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80097b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d10e      	bne.n	80097e0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80097c2:	4b06      	ldr	r3, [pc, #24]	@ (80097dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80097c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80097c6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80097ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80097d2:	4a02      	ldr	r2, [pc, #8]	@ (80097dc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80097d4:	430b      	orrs	r3, r1
 80097d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80097d8:	e006      	b.n	80097e8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80097da:	bf00      	nop
 80097dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097e4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80097e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80097f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80097f8:	2300      	movs	r3, #0
 80097fa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80097fe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009802:	460b      	mov	r3, r1
 8009804:	4313      	orrs	r3, r2
 8009806:	d055      	beq.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800980c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009810:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009814:	d033      	beq.n	800987e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009816:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800981a:	d82c      	bhi.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800981c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009820:	d02f      	beq.n	8009882 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009822:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009826:	d826      	bhi.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009828:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800982c:	d02b      	beq.n	8009886 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800982e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009832:	d820      	bhi.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009834:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009838:	d012      	beq.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800983a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800983e:	d81a      	bhi.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009840:	2b00      	cmp	r3, #0
 8009842:	d022      	beq.n	800988a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009844:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009848:	d115      	bne.n	8009876 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800984a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800984e:	3308      	adds	r3, #8
 8009850:	2100      	movs	r1, #0
 8009852:	4618      	mov	r0, r3
 8009854:	f001 fcc0 	bl	800b1d8 <RCCEx_PLL2_Config>
 8009858:	4603      	mov	r3, r0
 800985a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800985e:	e015      	b.n	800988c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009864:	3328      	adds	r3, #40	@ 0x28
 8009866:	2102      	movs	r1, #2
 8009868:	4618      	mov	r0, r3
 800986a:	f001 fd67 	bl	800b33c <RCCEx_PLL3_Config>
 800986e:	4603      	mov	r3, r0
 8009870:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009874:	e00a      	b.n	800988c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009876:	2301      	movs	r3, #1
 8009878:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800987c:	e006      	b.n	800988c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800987e:	bf00      	nop
 8009880:	e004      	b.n	800988c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009882:	bf00      	nop
 8009884:	e002      	b.n	800988c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009886:	bf00      	nop
 8009888:	e000      	b.n	800988c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800988a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800988c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009890:	2b00      	cmp	r3, #0
 8009892:	d10b      	bne.n	80098ac <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009894:	4ba1      	ldr	r3, [pc, #644]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009898:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800989c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80098a4:	4a9d      	ldr	r2, [pc, #628]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098a6:	430b      	orrs	r3, r1
 80098a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80098aa:	e003      	b.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80098b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80098b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098bc:	f002 0308 	and.w	r3, r2, #8
 80098c0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80098c4:	2300      	movs	r3, #0
 80098c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80098ca:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80098ce:	460b      	mov	r3, r1
 80098d0:	4313      	orrs	r3, r2
 80098d2:	d01e      	beq.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80098d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80098dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80098e0:	d10c      	bne.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80098e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098e6:	3328      	adds	r3, #40	@ 0x28
 80098e8:	2102      	movs	r1, #2
 80098ea:	4618      	mov	r0, r3
 80098ec:	f001 fd26 	bl	800b33c <RCCEx_PLL3_Config>
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d002      	beq.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80098f6:	2301      	movs	r3, #1
 80098f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80098fc:	4b87      	ldr	r3, [pc, #540]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009900:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009908:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800990c:	4a83      	ldr	r2, [pc, #524]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800990e:	430b      	orrs	r3, r1
 8009910:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800991a:	f002 0310 	and.w	r3, r2, #16
 800991e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009922:	2300      	movs	r3, #0
 8009924:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009928:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800992c:	460b      	mov	r3, r1
 800992e:	4313      	orrs	r3, r2
 8009930:	d01e      	beq.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009936:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800993a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800993e:	d10c      	bne.n	800995a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009940:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009944:	3328      	adds	r3, #40	@ 0x28
 8009946:	2102      	movs	r1, #2
 8009948:	4618      	mov	r0, r3
 800994a:	f001 fcf7 	bl	800b33c <RCCEx_PLL3_Config>
 800994e:	4603      	mov	r3, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d002      	beq.n	800995a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009954:	2301      	movs	r3, #1
 8009956:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800995a:	4b70      	ldr	r3, [pc, #448]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800995c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800995e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009966:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800996a:	4a6c      	ldr	r2, [pc, #432]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800996c:	430b      	orrs	r3, r1
 800996e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009970:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009978:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800997c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009980:	2300      	movs	r3, #0
 8009982:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009986:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800998a:	460b      	mov	r3, r1
 800998c:	4313      	orrs	r3, r2
 800998e:	d03e      	beq.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009990:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009994:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009998:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800999c:	d022      	beq.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800999e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80099a2:	d81b      	bhi.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d003      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80099a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80099ac:	d00b      	beq.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80099ae:	e015      	b.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099b4:	3308      	adds	r3, #8
 80099b6:	2100      	movs	r1, #0
 80099b8:	4618      	mov	r0, r3
 80099ba:	f001 fc0d 	bl	800b1d8 <RCCEx_PLL2_Config>
 80099be:	4603      	mov	r3, r0
 80099c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80099c4:	e00f      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80099c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099ca:	3328      	adds	r3, #40	@ 0x28
 80099cc:	2102      	movs	r1, #2
 80099ce:	4618      	mov	r0, r3
 80099d0:	f001 fcb4 	bl	800b33c <RCCEx_PLL3_Config>
 80099d4:	4603      	mov	r3, r0
 80099d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80099da:	e004      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80099e2:	e000      	b.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80099e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d10b      	bne.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80099ee:	4b4b      	ldr	r3, [pc, #300]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80099f2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80099f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80099fe:	4a47      	ldr	r2, [pc, #284]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a00:	430b      	orrs	r3, r1
 8009a02:	6593      	str	r3, [r2, #88]	@ 0x58
 8009a04:	e003      	b.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a16:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009a1a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009a20:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009a24:	460b      	mov	r3, r1
 8009a26:	4313      	orrs	r3, r2
 8009a28:	d03b      	beq.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a32:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009a36:	d01f      	beq.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009a38:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009a3c:	d818      	bhi.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009a3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009a42:	d003      	beq.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009a44:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009a48:	d007      	beq.n	8009a5a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009a4a:	e011      	b.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a4c:	4b33      	ldr	r3, [pc, #204]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a50:	4a32      	ldr	r2, [pc, #200]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009a58:	e00f      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a5e:	3328      	adds	r3, #40	@ 0x28
 8009a60:	2101      	movs	r1, #1
 8009a62:	4618      	mov	r0, r3
 8009a64:	f001 fc6a 	bl	800b33c <RCCEx_PLL3_Config>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009a6e:	e004      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a70:	2301      	movs	r3, #1
 8009a72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a76:	e000      	b.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009a78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d10b      	bne.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009a82:	4b26      	ldr	r3, [pc, #152]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a86:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a92:	4a22      	ldr	r2, [pc, #136]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a94:	430b      	orrs	r3, r1
 8009a96:	6553      	str	r3, [r2, #84]	@ 0x54
 8009a98:	e003      	b.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a9e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aaa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009aae:	673b      	str	r3, [r7, #112]	@ 0x70
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	677b      	str	r3, [r7, #116]	@ 0x74
 8009ab4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009ab8:	460b      	mov	r3, r1
 8009aba:	4313      	orrs	r3, r2
 8009abc:	d034      	beq.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d003      	beq.n	8009ad0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009acc:	d007      	beq.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009ace:	e011      	b.n	8009af4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ad0:	4b12      	ldr	r3, [pc, #72]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ad4:	4a11      	ldr	r2, [pc, #68]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ad6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009ada:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009adc:	e00e      	b.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ae2:	3308      	adds	r3, #8
 8009ae4:	2102      	movs	r1, #2
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f001 fb76 	bl	800b1d8 <RCCEx_PLL2_Config>
 8009aec:	4603      	mov	r3, r0
 8009aee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009af2:	e003      	b.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009af4:	2301      	movs	r3, #1
 8009af6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009afa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009afc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d10d      	bne.n	8009b20 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009b04:	4b05      	ldr	r3, [pc, #20]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009b08:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b12:	4a02      	ldr	r2, [pc, #8]	@ (8009b1c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009b14:	430b      	orrs	r3, r1
 8009b16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009b18:	e006      	b.n	8009b28 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009b1a:	bf00      	nop
 8009b1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b24:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b30:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009b34:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009b36:	2300      	movs	r3, #0
 8009b38:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009b3a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009b3e:	460b      	mov	r3, r1
 8009b40:	4313      	orrs	r3, r2
 8009b42:	d00c      	beq.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009b44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b48:	3328      	adds	r3, #40	@ 0x28
 8009b4a:	2102      	movs	r1, #2
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	f001 fbf5 	bl	800b33c <RCCEx_PLL3_Config>
 8009b52:	4603      	mov	r3, r0
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d002      	beq.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b66:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009b6a:	663b      	str	r3, [r7, #96]	@ 0x60
 8009b6c:	2300      	movs	r3, #0
 8009b6e:	667b      	str	r3, [r7, #100]	@ 0x64
 8009b70:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009b74:	460b      	mov	r3, r1
 8009b76:	4313      	orrs	r3, r2
 8009b78:	d038      	beq.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009b7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b82:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b86:	d018      	beq.n	8009bba <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009b88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b8c:	d811      	bhi.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009b8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b92:	d014      	beq.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009b94:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b98:	d80b      	bhi.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d011      	beq.n	8009bc2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009b9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009ba2:	d106      	bne.n	8009bb2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ba4:	4bc3      	ldr	r3, [pc, #780]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ba6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ba8:	4ac2      	ldr	r2, [pc, #776]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009baa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009bae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009bb0:	e008      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009bb8:	e004      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009bba:	bf00      	nop
 8009bbc:	e002      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009bbe:	bf00      	nop
 8009bc0:	e000      	b.n	8009bc4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d10b      	bne.n	8009be4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009bcc:	4bb9      	ldr	r3, [pc, #740]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009bd0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bdc:	4ab5      	ldr	r2, [pc, #724]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bde:	430b      	orrs	r3, r1
 8009be0:	6553      	str	r3, [r2, #84]	@ 0x54
 8009be2:	e003      	b.n	8009bec <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009be4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009be8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009bf8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009bfe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009c02:	460b      	mov	r3, r1
 8009c04:	4313      	orrs	r3, r2
 8009c06:	d009      	beq.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009c08:	4baa      	ldr	r3, [pc, #680]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c0a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c0c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009c10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009c16:	4aa7      	ldr	r2, [pc, #668]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c18:	430b      	orrs	r3, r1
 8009c1a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c24:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009c28:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c2e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009c32:	460b      	mov	r3, r1
 8009c34:	4313      	orrs	r3, r2
 8009c36:	d00a      	beq.n	8009c4e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009c38:	4b9e      	ldr	r3, [pc, #632]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c3a:	691b      	ldr	r3, [r3, #16]
 8009c3c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c44:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009c48:	4a9a      	ldr	r2, [pc, #616]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c4a:	430b      	orrs	r3, r1
 8009c4c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009c4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c56:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009c60:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009c64:	460b      	mov	r3, r1
 8009c66:	4313      	orrs	r3, r2
 8009c68:	d009      	beq.n	8009c7e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009c6a:	4b92      	ldr	r3, [pc, #584]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c6e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c78:	4a8e      	ldr	r2, [pc, #568]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c7a:	430b      	orrs	r3, r1
 8009c7c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c86:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009c8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c90:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009c94:	460b      	mov	r3, r1
 8009c96:	4313      	orrs	r3, r2
 8009c98:	d00e      	beq.n	8009cb8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009c9a:	4b86      	ldr	r3, [pc, #536]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	4a85      	ldr	r2, [pc, #532]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ca0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009ca4:	6113      	str	r3, [r2, #16]
 8009ca6:	4b83      	ldr	r3, [pc, #524]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ca8:	6919      	ldr	r1, [r3, #16]
 8009caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cae:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009cb2:	4a80      	ldr	r2, [pc, #512]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cb4:	430b      	orrs	r3, r1
 8009cb6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cc0:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009cc4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009cca:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009cce:	460b      	mov	r3, r1
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	d009      	beq.n	8009ce8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009cd4:	4b77      	ldr	r3, [pc, #476]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cd8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ce2:	4a74      	ldr	r2, [pc, #464]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ce4:	430b      	orrs	r3, r1
 8009ce6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009ce8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cf0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009cf4:	633b      	str	r3, [r7, #48]	@ 0x30
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	637b      	str	r3, [r7, #52]	@ 0x34
 8009cfa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009cfe:	460b      	mov	r3, r1
 8009d00:	4313      	orrs	r3, r2
 8009d02:	d00a      	beq.n	8009d1a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009d04:	4b6b      	ldr	r3, [pc, #428]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d08:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009d14:	4a67      	ldr	r2, [pc, #412]	@ (8009eb4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009d16:	430b      	orrs	r3, r1
 8009d18:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d22:	2100      	movs	r1, #0
 8009d24:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009d26:	f003 0301 	and.w	r3, r3, #1
 8009d2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d2c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009d30:	460b      	mov	r3, r1
 8009d32:	4313      	orrs	r3, r2
 8009d34:	d011      	beq.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009d36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d3a:	3308      	adds	r3, #8
 8009d3c:	2100      	movs	r1, #0
 8009d3e:	4618      	mov	r0, r3
 8009d40:	f001 fa4a 	bl	800b1d8 <RCCEx_PLL2_Config>
 8009d44:	4603      	mov	r3, r0
 8009d46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009d4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d003      	beq.n	8009d5a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d62:	2100      	movs	r1, #0
 8009d64:	6239      	str	r1, [r7, #32]
 8009d66:	f003 0302 	and.w	r3, r3, #2
 8009d6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8009d6c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009d70:	460b      	mov	r3, r1
 8009d72:	4313      	orrs	r3, r2
 8009d74:	d011      	beq.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d7a:	3308      	adds	r3, #8
 8009d7c:	2101      	movs	r1, #1
 8009d7e:	4618      	mov	r0, r3
 8009d80:	f001 fa2a 	bl	800b1d8 <RCCEx_PLL2_Config>
 8009d84:	4603      	mov	r3, r0
 8009d86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d003      	beq.n	8009d9a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009da2:	2100      	movs	r1, #0
 8009da4:	61b9      	str	r1, [r7, #24]
 8009da6:	f003 0304 	and.w	r3, r3, #4
 8009daa:	61fb      	str	r3, [r7, #28]
 8009dac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009db0:	460b      	mov	r3, r1
 8009db2:	4313      	orrs	r3, r2
 8009db4:	d011      	beq.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dba:	3308      	adds	r3, #8
 8009dbc:	2102      	movs	r1, #2
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f001 fa0a 	bl	800b1d8 <RCCEx_PLL2_Config>
 8009dc4:	4603      	mov	r3, r0
 8009dc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009dca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d003      	beq.n	8009dda <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009dda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de2:	2100      	movs	r1, #0
 8009de4:	6139      	str	r1, [r7, #16]
 8009de6:	f003 0308 	and.w	r3, r3, #8
 8009dea:	617b      	str	r3, [r7, #20]
 8009dec:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009df0:	460b      	mov	r3, r1
 8009df2:	4313      	orrs	r3, r2
 8009df4:	d011      	beq.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009df6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dfa:	3328      	adds	r3, #40	@ 0x28
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	4618      	mov	r0, r3
 8009e00:	f001 fa9c 	bl	800b33c <RCCEx_PLL3_Config>
 8009e04:	4603      	mov	r3, r0
 8009e06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8009e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d003      	beq.n	8009e1a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e22:	2100      	movs	r1, #0
 8009e24:	60b9      	str	r1, [r7, #8]
 8009e26:	f003 0310 	and.w	r3, r3, #16
 8009e2a:	60fb      	str	r3, [r7, #12]
 8009e2c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009e30:	460b      	mov	r3, r1
 8009e32:	4313      	orrs	r3, r2
 8009e34:	d011      	beq.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e3a:	3328      	adds	r3, #40	@ 0x28
 8009e3c:	2101      	movs	r1, #1
 8009e3e:	4618      	mov	r0, r3
 8009e40:	f001 fa7c 	bl	800b33c <RCCEx_PLL3_Config>
 8009e44:	4603      	mov	r3, r0
 8009e46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d003      	beq.n	8009e5a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e62:	2100      	movs	r1, #0
 8009e64:	6039      	str	r1, [r7, #0]
 8009e66:	f003 0320 	and.w	r3, r3, #32
 8009e6a:	607b      	str	r3, [r7, #4]
 8009e6c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009e70:	460b      	mov	r3, r1
 8009e72:	4313      	orrs	r3, r2
 8009e74:	d011      	beq.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e7a:	3328      	adds	r3, #40	@ 0x28
 8009e7c:	2102      	movs	r1, #2
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f001 fa5c 	bl	800b33c <RCCEx_PLL3_Config>
 8009e84:	4603      	mov	r3, r0
 8009e86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d003      	beq.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e92:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e96:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8009e9a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d101      	bne.n	8009ea6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009ea2:	2300      	movs	r3, #0
 8009ea4:	e000      	b.n	8009ea8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009ea6:	2301      	movs	r3, #1
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8009eae:	46bd      	mov	sp, r7
 8009eb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009eb4:	58024400 	.word	0x58024400

08009eb8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b090      	sub	sp, #64	@ 0x40
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009ec2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ec6:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009eca:	430b      	orrs	r3, r1
 8009ecc:	f040 8094 	bne.w	8009ff8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009ed0:	4b9e      	ldr	r3, [pc, #632]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ed2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ed4:	f003 0307 	and.w	r3, r3, #7
 8009ed8:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009edc:	2b04      	cmp	r3, #4
 8009ede:	f200 8087 	bhi.w	8009ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8009ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee8:	08009efd 	.word	0x08009efd
 8009eec:	08009f25 	.word	0x08009f25
 8009ef0:	08009f4d 	.word	0x08009f4d
 8009ef4:	08009fe9 	.word	0x08009fe9
 8009ef8:	08009f75 	.word	0x08009f75
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009efc:	4b93      	ldr	r3, [pc, #588]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f04:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f08:	d108      	bne.n	8009f1c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f0e:	4618      	mov	r0, r3
 8009f10:	f001 f810 	bl	800af34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f18:	f000 bd45 	b.w	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f20:	f000 bd41 	b.w	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f24:	4b89      	ldr	r3, [pc, #548]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f30:	d108      	bne.n	8009f44 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f32:	f107 0318 	add.w	r3, r7, #24
 8009f36:	4618      	mov	r0, r3
 8009f38:	f000 fd54 	bl	800a9e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f40:	f000 bd31 	b.w	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f44:	2300      	movs	r3, #0
 8009f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f48:	f000 bd2d 	b.w	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f4c:	4b7f      	ldr	r3, [pc, #508]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f58:	d108      	bne.n	8009f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f5a:	f107 030c 	add.w	r3, r7, #12
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f000 fe94 	bl	800ac8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f68:	f000 bd1d 	b.w	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f70:	f000 bd19 	b.w	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f74:	4b75      	ldr	r3, [pc, #468]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f78:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009f7c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f7e:	4b73      	ldr	r3, [pc, #460]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	f003 0304 	and.w	r3, r3, #4
 8009f86:	2b04      	cmp	r3, #4
 8009f88:	d10c      	bne.n	8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d109      	bne.n	8009fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f90:	4b6e      	ldr	r3, [pc, #440]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	08db      	lsrs	r3, r3, #3
 8009f96:	f003 0303 	and.w	r3, r3, #3
 8009f9a:	4a6d      	ldr	r2, [pc, #436]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8009fa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fa2:	e01f      	b.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009fa4:	4b69      	ldr	r3, [pc, #420]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fb0:	d106      	bne.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009fb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fb4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fb8:	d102      	bne.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009fba:	4b66      	ldr	r3, [pc, #408]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009fbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fbe:	e011      	b.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fc0:	4b62      	ldr	r3, [pc, #392]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fc8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fcc:	d106      	bne.n	8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fd0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fd4:	d102      	bne.n	8009fdc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009fd6:	4b60      	ldr	r3, [pc, #384]	@ (800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fda:	e003      	b.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009fe0:	f000 bce1 	b.w	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009fe4:	f000 bcdf 	b.w	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009fe8:	4b5c      	ldr	r3, [pc, #368]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009fec:	f000 bcdb 	b.w	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ff4:	f000 bcd7 	b.w	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009ff8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ffc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a000:	430b      	orrs	r3, r1
 800a002:	f040 80ad 	bne.w	800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a006:	4b51      	ldr	r3, [pc, #324]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a008:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a00a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a00e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a012:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a016:	d056      	beq.n	800a0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a01a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a01e:	f200 8090 	bhi.w	800a142 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a024:	2bc0      	cmp	r3, #192	@ 0xc0
 800a026:	f000 8088 	beq.w	800a13a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a02a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a02c:	2bc0      	cmp	r3, #192	@ 0xc0
 800a02e:	f200 8088 	bhi.w	800a142 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a032:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a034:	2b80      	cmp	r3, #128	@ 0x80
 800a036:	d032      	beq.n	800a09e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a038:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a03a:	2b80      	cmp	r3, #128	@ 0x80
 800a03c:	f200 8081 	bhi.w	800a142 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a042:	2b00      	cmp	r3, #0
 800a044:	d003      	beq.n	800a04e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a048:	2b40      	cmp	r3, #64	@ 0x40
 800a04a:	d014      	beq.n	800a076 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a04c:	e079      	b.n	800a142 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a04e:	4b3f      	ldr	r3, [pc, #252]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a056:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a05a:	d108      	bne.n	800a06e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a05c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a060:	4618      	mov	r0, r3
 800a062:	f000 ff67 	bl	800af34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a068:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a06a:	f000 bc9c 	b.w	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a06e:	2300      	movs	r3, #0
 800a070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a072:	f000 bc98 	b.w	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a076:	4b35      	ldr	r3, [pc, #212]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a07e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a082:	d108      	bne.n	800a096 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a084:	f107 0318 	add.w	r3, r7, #24
 800a088:	4618      	mov	r0, r3
 800a08a:	f000 fcab 	bl	800a9e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a08e:	69bb      	ldr	r3, [r7, #24]
 800a090:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a092:	f000 bc88 	b.w	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a096:	2300      	movs	r3, #0
 800a098:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a09a:	f000 bc84 	b.w	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a09e:	4b2b      	ldr	r3, [pc, #172]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0aa:	d108      	bne.n	800a0be <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0ac:	f107 030c 	add.w	r3, r7, #12
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f000 fdeb 	bl	800ac8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0ba:	f000 bc74 	b.w	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0be:	2300      	movs	r3, #0
 800a0c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0c2:	f000 bc70 	b.w	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0c6:	4b21      	ldr	r3, [pc, #132]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a0ce:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0d0:	4b1e      	ldr	r3, [pc, #120]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f003 0304 	and.w	r3, r3, #4
 800a0d8:	2b04      	cmp	r3, #4
 800a0da:	d10c      	bne.n	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a0dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d109      	bne.n	800a0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0e2:	4b1a      	ldr	r3, [pc, #104]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	08db      	lsrs	r3, r3, #3
 800a0e8:	f003 0303 	and.w	r3, r3, #3
 800a0ec:	4a18      	ldr	r2, [pc, #96]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a0ee:	fa22 f303 	lsr.w	r3, r2, r3
 800a0f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0f4:	e01f      	b.n	800a136 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a0f6:	4b15      	ldr	r3, [pc, #84]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a0fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a102:	d106      	bne.n	800a112 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a104:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a106:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a10a:	d102      	bne.n	800a112 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a10c:	4b11      	ldr	r3, [pc, #68]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a110:	e011      	b.n	800a136 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a112:	4b0e      	ldr	r3, [pc, #56]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a11a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a11e:	d106      	bne.n	800a12e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a120:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a122:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a126:	d102      	bne.n	800a12e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a128:	4b0b      	ldr	r3, [pc, #44]	@ (800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a12a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a12c:	e003      	b.n	800a136 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a12e:	2300      	movs	r3, #0
 800a130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a132:	f000 bc38 	b.w	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a136:	f000 bc36 	b.w	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a13a:	4b08      	ldr	r3, [pc, #32]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a13c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a13e:	f000 bc32 	b.w	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a142:	2300      	movs	r3, #0
 800a144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a146:	f000 bc2e 	b.w	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a14a:	bf00      	nop
 800a14c:	58024400 	.word	0x58024400
 800a150:	03d09000 	.word	0x03d09000
 800a154:	003d0900 	.word	0x003d0900
 800a158:	017d7840 	.word	0x017d7840
 800a15c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a160:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a164:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a168:	430b      	orrs	r3, r1
 800a16a:	f040 809c 	bne.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a16e:	4b9e      	ldr	r3, [pc, #632]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a172:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a176:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a17a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a17e:	d054      	beq.n	800a22a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a182:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a186:	f200 808b 	bhi.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a18c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a190:	f000 8083 	beq.w	800a29a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a196:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a19a:	f200 8081 	bhi.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a19e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a1a4:	d02f      	beq.n	800a206 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a1a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a1ac:	d878      	bhi.n	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d004      	beq.n	800a1be <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a1b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1b6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a1ba:	d012      	beq.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a1bc:	e070      	b.n	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a1be:	4b8a      	ldr	r3, [pc, #552]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1ca:	d107      	bne.n	800a1dc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	f000 feaf 	bl	800af34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1da:	e3e4      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1dc:	2300      	movs	r3, #0
 800a1de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1e0:	e3e1      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1e2:	4b81      	ldr	r3, [pc, #516]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1ee:	d107      	bne.n	800a200 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1f0:	f107 0318 	add.w	r3, r7, #24
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f000 fbf5 	bl	800a9e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1fe:	e3d2      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a200:	2300      	movs	r3, #0
 800a202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a204:	e3cf      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a206:	4b78      	ldr	r3, [pc, #480]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a20e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a212:	d107      	bne.n	800a224 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a214:	f107 030c 	add.w	r3, r7, #12
 800a218:	4618      	mov	r0, r3
 800a21a:	f000 fd37 	bl	800ac8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a222:	e3c0      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a224:	2300      	movs	r3, #0
 800a226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a228:	e3bd      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a22a:	4b6f      	ldr	r3, [pc, #444]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a22c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a22e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a232:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a234:	4b6c      	ldr	r3, [pc, #432]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 0304 	and.w	r3, r3, #4
 800a23c:	2b04      	cmp	r3, #4
 800a23e:	d10c      	bne.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a240:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a242:	2b00      	cmp	r3, #0
 800a244:	d109      	bne.n	800a25a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a246:	4b68      	ldr	r3, [pc, #416]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	08db      	lsrs	r3, r3, #3
 800a24c:	f003 0303 	and.w	r3, r3, #3
 800a250:	4a66      	ldr	r2, [pc, #408]	@ (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a252:	fa22 f303 	lsr.w	r3, r2, r3
 800a256:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a258:	e01e      	b.n	800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a25a:	4b63      	ldr	r3, [pc, #396]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a262:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a266:	d106      	bne.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a268:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a26a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a26e:	d102      	bne.n	800a276 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a270:	4b5f      	ldr	r3, [pc, #380]	@ (800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a272:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a274:	e010      	b.n	800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a276:	4b5c      	ldr	r3, [pc, #368]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a27e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a282:	d106      	bne.n	800a292 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a284:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a286:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a28a:	d102      	bne.n	800a292 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a28c:	4b59      	ldr	r3, [pc, #356]	@ (800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a28e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a290:	e002      	b.n	800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a292:	2300      	movs	r3, #0
 800a294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a296:	e386      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a298:	e385      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a29a:	4b57      	ldr	r3, [pc, #348]	@ (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a29c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a29e:	e382      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2a4:	e37f      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a2a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2aa:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a2ae:	430b      	orrs	r3, r1
 800a2b0:	f040 80a7 	bne.w	800a402 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a2b4:	4b4c      	ldr	r3, [pc, #304]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a2b8:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a2bc:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a2be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a2c4:	d055      	beq.n	800a372 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a2c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a2cc:	f200 8096 	bhi.w	800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a2d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a2d6:	f000 8084 	beq.w	800a3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a2da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2dc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a2e0:	f200 808c 	bhi.w	800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a2e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2ea:	d030      	beq.n	800a34e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a2ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2ee:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a2f2:	f200 8083 	bhi.w	800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a2f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d004      	beq.n	800a306 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a2fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a302:	d012      	beq.n	800a32a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a304:	e07a      	b.n	800a3fc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a306:	4b38      	ldr	r3, [pc, #224]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a30e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a312:	d107      	bne.n	800a324 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a314:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a318:	4618      	mov	r0, r3
 800a31a:	f000 fe0b 	bl	800af34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a31e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a320:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a322:	e340      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a324:	2300      	movs	r3, #0
 800a326:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a328:	e33d      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a32a:	4b2f      	ldr	r3, [pc, #188]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a332:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a336:	d107      	bne.n	800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a338:	f107 0318 	add.w	r3, r7, #24
 800a33c:	4618      	mov	r0, r3
 800a33e:	f000 fb51 	bl	800a9e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a342:	69bb      	ldr	r3, [r7, #24]
 800a344:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a346:	e32e      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a348:	2300      	movs	r3, #0
 800a34a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a34c:	e32b      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a34e:	4b26      	ldr	r3, [pc, #152]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a356:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a35a:	d107      	bne.n	800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a35c:	f107 030c 	add.w	r3, r7, #12
 800a360:	4618      	mov	r0, r3
 800a362:	f000 fc93 	bl	800ac8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a36a:	e31c      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a36c:	2300      	movs	r3, #0
 800a36e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a370:	e319      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a372:	4b1d      	ldr	r3, [pc, #116]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a376:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a37a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a37c:	4b1a      	ldr	r3, [pc, #104]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f003 0304 	and.w	r3, r3, #4
 800a384:	2b04      	cmp	r3, #4
 800a386:	d10c      	bne.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a388:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d109      	bne.n	800a3a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a38e:	4b16      	ldr	r3, [pc, #88]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	08db      	lsrs	r3, r3, #3
 800a394:	f003 0303 	and.w	r3, r3, #3
 800a398:	4a14      	ldr	r2, [pc, #80]	@ (800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a39a:	fa22 f303 	lsr.w	r3, r2, r3
 800a39e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3a0:	e01e      	b.n	800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a3a2:	4b11      	ldr	r3, [pc, #68]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a3aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a3ae:	d106      	bne.n	800a3be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a3b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a3b6:	d102      	bne.n	800a3be <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a3b8:	4b0d      	ldr	r3, [pc, #52]	@ (800a3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a3ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3bc:	e010      	b.n	800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a3be:	4b0a      	ldr	r3, [pc, #40]	@ (800a3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3ca:	d106      	bne.n	800a3da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a3cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3d2:	d102      	bne.n	800a3da <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a3d4:	4b07      	ldr	r3, [pc, #28]	@ (800a3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a3d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3d8:	e002      	b.n	800a3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a3da:	2300      	movs	r3, #0
 800a3dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a3de:	e2e2      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a3e0:	e2e1      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a3e2:	4b05      	ldr	r3, [pc, #20]	@ (800a3f8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a3e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3e6:	e2de      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a3e8:	58024400 	.word	0x58024400
 800a3ec:	03d09000 	.word	0x03d09000
 800a3f0:	003d0900 	.word	0x003d0900
 800a3f4:	017d7840 	.word	0x017d7840
 800a3f8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a400:	e2d1      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a402:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a406:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a40a:	430b      	orrs	r3, r1
 800a40c:	f040 809c 	bne.w	800a548 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a410:	4b93      	ldr	r3, [pc, #588]	@ (800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a414:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a418:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a41a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a41c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a420:	d054      	beq.n	800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a424:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a428:	f200 808b 	bhi.w	800a542 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a42c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a42e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a432:	f000 8083 	beq.w	800a53c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a438:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a43c:	f200 8081 	bhi.w	800a542 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a442:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a446:	d02f      	beq.n	800a4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a448:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a44a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a44e:	d878      	bhi.n	800a542 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a452:	2b00      	cmp	r3, #0
 800a454:	d004      	beq.n	800a460 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a458:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a45c:	d012      	beq.n	800a484 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a45e:	e070      	b.n	800a542 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a460:	4b7f      	ldr	r3, [pc, #508]	@ (800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a468:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a46c:	d107      	bne.n	800a47e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a46e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a472:	4618      	mov	r0, r3
 800a474:	f000 fd5e 	bl	800af34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a47a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a47c:	e293      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a47e:	2300      	movs	r3, #0
 800a480:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a482:	e290      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a484:	4b76      	ldr	r3, [pc, #472]	@ (800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a48c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a490:	d107      	bne.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a492:	f107 0318 	add.w	r3, r7, #24
 800a496:	4618      	mov	r0, r3
 800a498:	f000 faa4 	bl	800a9e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a49c:	69bb      	ldr	r3, [r7, #24]
 800a49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4a0:	e281      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4a6:	e27e      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4a8:	4b6d      	ldr	r3, [pc, #436]	@ (800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a4b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4b4:	d107      	bne.n	800a4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a4b6:	f107 030c 	add.w	r3, r7, #12
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	f000 fbe6 	bl	800ac8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4c4:	e26f      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4ca:	e26c      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a4cc:	4b64      	ldr	r3, [pc, #400]	@ (800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a4d4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a4d6:	4b62      	ldr	r3, [pc, #392]	@ (800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f003 0304 	and.w	r3, r3, #4
 800a4de:	2b04      	cmp	r3, #4
 800a4e0:	d10c      	bne.n	800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a4e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d109      	bne.n	800a4fc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a4e8:	4b5d      	ldr	r3, [pc, #372]	@ (800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4ea:	681b      	ldr	r3, [r3, #0]
 800a4ec:	08db      	lsrs	r3, r3, #3
 800a4ee:	f003 0303 	and.w	r3, r3, #3
 800a4f2:	4a5c      	ldr	r2, [pc, #368]	@ (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a4f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a4f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4fa:	e01e      	b.n	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a4fc:	4b58      	ldr	r3, [pc, #352]	@ (800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a504:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a508:	d106      	bne.n	800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a50a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a50c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a510:	d102      	bne.n	800a518 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a512:	4b55      	ldr	r3, [pc, #340]	@ (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a514:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a516:	e010      	b.n	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a518:	4b51      	ldr	r3, [pc, #324]	@ (800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a520:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a524:	d106      	bne.n	800a534 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a528:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a52c:	d102      	bne.n	800a534 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a52e:	4b4f      	ldr	r3, [pc, #316]	@ (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a530:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a532:	e002      	b.n	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a534:	2300      	movs	r3, #0
 800a536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a538:	e235      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a53a:	e234      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a53c:	4b4c      	ldr	r3, [pc, #304]	@ (800a670 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a53e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a540:	e231      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a542:	2300      	movs	r3, #0
 800a544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a546:	e22e      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a54c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a550:	430b      	orrs	r3, r1
 800a552:	f040 808f 	bne.w	800a674 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a556:	4b42      	ldr	r3, [pc, #264]	@ (800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a558:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a55a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a55e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a562:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a566:	d06b      	beq.n	800a640 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a56a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a56e:	d874      	bhi.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a572:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a576:	d056      	beq.n	800a626 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a57a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a57e:	d86c      	bhi.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a582:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a586:	d03b      	beq.n	800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a58a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a58e:	d864      	bhi.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a592:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a596:	d021      	beq.n	800a5dc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a59a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a59e:	d85c      	bhi.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a5a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d004      	beq.n	800a5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a5a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a5ac:	d004      	beq.n	800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a5ae:	e054      	b.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a5b0:	f7fe fa4c 	bl	8008a4c <HAL_RCC_GetPCLK1Freq>
 800a5b4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a5b6:	e1f6      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5b8:	4b29      	ldr	r3, [pc, #164]	@ (800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5c4:	d107      	bne.n	800a5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5c6:	f107 0318 	add.w	r3, r7, #24
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f000 fa0a 	bl	800a9e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a5d0:	69fb      	ldr	r3, [r7, #28]
 800a5d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5d4:	e1e7      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5da:	e1e4      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5dc:	4b20      	ldr	r3, [pc, #128]	@ (800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a5e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5e8:	d107      	bne.n	800a5fa <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5ea:	f107 030c 	add.w	r3, r7, #12
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f000 fb4c 	bl	800ac8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5f8:	e1d5      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5fe:	e1d2      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a600:	4b17      	ldr	r3, [pc, #92]	@ (800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f003 0304 	and.w	r3, r3, #4
 800a608:	2b04      	cmp	r3, #4
 800a60a:	d109      	bne.n	800a620 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a60c:	4b14      	ldr	r3, [pc, #80]	@ (800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	08db      	lsrs	r3, r3, #3
 800a612:	f003 0303 	and.w	r3, r3, #3
 800a616:	4a13      	ldr	r2, [pc, #76]	@ (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a618:	fa22 f303 	lsr.w	r3, r2, r3
 800a61c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a61e:	e1c2      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a620:	2300      	movs	r3, #0
 800a622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a624:	e1bf      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a626:	4b0e      	ldr	r3, [pc, #56]	@ (800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a62e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a632:	d102      	bne.n	800a63a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a634:	4b0c      	ldr	r3, [pc, #48]	@ (800a668 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a636:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a638:	e1b5      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a63a:	2300      	movs	r3, #0
 800a63c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a63e:	e1b2      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a640:	4b07      	ldr	r3, [pc, #28]	@ (800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a648:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a64c:	d102      	bne.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a64e:	4b07      	ldr	r3, [pc, #28]	@ (800a66c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a650:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a652:	e1a8      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a654:	2300      	movs	r3, #0
 800a656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a658:	e1a5      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a65a:	2300      	movs	r3, #0
 800a65c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a65e:	e1a2      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a660:	58024400 	.word	0x58024400
 800a664:	03d09000 	.word	0x03d09000
 800a668:	003d0900 	.word	0x003d0900
 800a66c:	017d7840 	.word	0x017d7840
 800a670:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a674:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a678:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a67c:	430b      	orrs	r3, r1
 800a67e:	d173      	bne.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a680:	4b9c      	ldr	r3, [pc, #624]	@ (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a684:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a688:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a68a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a68c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a690:	d02f      	beq.n	800a6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a694:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a698:	d863      	bhi.n	800a762 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a69a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d004      	beq.n	800a6aa <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a6a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a6a6:	d012      	beq.n	800a6ce <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a6a8:	e05b      	b.n	800a762 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6aa:	4b92      	ldr	r3, [pc, #584]	@ (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6b6:	d107      	bne.n	800a6c8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6b8:	f107 0318 	add.w	r3, r7, #24
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f000 f991 	bl	800a9e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a6c2:	69bb      	ldr	r3, [r7, #24]
 800a6c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6c6:	e16e      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6cc:	e16b      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a6ce:	4b89      	ldr	r3, [pc, #548]	@ (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a6d6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6da:	d107      	bne.n	800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6dc:	f107 030c 	add.w	r3, r7, #12
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f000 fad3 	bl	800ac8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a6e6:	697b      	ldr	r3, [r7, #20]
 800a6e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6ea:	e15c      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6f0:	e159      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a6f2:	4b80      	ldr	r3, [pc, #512]	@ (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a6f6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a6fa:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a6fc:	4b7d      	ldr	r3, [pc, #500]	@ (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f003 0304 	and.w	r3, r3, #4
 800a704:	2b04      	cmp	r3, #4
 800a706:	d10c      	bne.n	800a722 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d109      	bne.n	800a722 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a70e:	4b79      	ldr	r3, [pc, #484]	@ (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	08db      	lsrs	r3, r3, #3
 800a714:	f003 0303 	and.w	r3, r3, #3
 800a718:	4a77      	ldr	r2, [pc, #476]	@ (800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a71a:	fa22 f303 	lsr.w	r3, r2, r3
 800a71e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a720:	e01e      	b.n	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a722:	4b74      	ldr	r3, [pc, #464]	@ (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a72a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a72e:	d106      	bne.n	800a73e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a730:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a732:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a736:	d102      	bne.n	800a73e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a738:	4b70      	ldr	r3, [pc, #448]	@ (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a73a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a73c:	e010      	b.n	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a73e:	4b6d      	ldr	r3, [pc, #436]	@ (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a746:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a74a:	d106      	bne.n	800a75a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a74c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a74e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a752:	d102      	bne.n	800a75a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a754:	4b6a      	ldr	r3, [pc, #424]	@ (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a756:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a758:	e002      	b.n	800a760 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a75a:	2300      	movs	r3, #0
 800a75c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a75e:	e122      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a760:	e121      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a762:	2300      	movs	r3, #0
 800a764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a766:	e11e      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a76c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a770:	430b      	orrs	r3, r1
 800a772:	d133      	bne.n	800a7dc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a774:	4b5f      	ldr	r3, [pc, #380]	@ (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a778:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a77c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a77e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a780:	2b00      	cmp	r3, #0
 800a782:	d004      	beq.n	800a78e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a786:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a78a:	d012      	beq.n	800a7b2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a78c:	e023      	b.n	800a7d6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a78e:	4b59      	ldr	r3, [pc, #356]	@ (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a796:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a79a:	d107      	bne.n	800a7ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a79c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a7a0:	4618      	mov	r0, r3
 800a7a2:	f000 fbc7 	bl	800af34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a7a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7aa:	e0fc      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7b0:	e0f9      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7b2:	4b50      	ldr	r3, [pc, #320]	@ (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7ba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7be:	d107      	bne.n	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7c0:	f107 0318 	add.w	r3, r7, #24
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	f000 f90d 	bl	800a9e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a7ca:	6a3b      	ldr	r3, [r7, #32]
 800a7cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7ce:	e0ea      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7d4:	e0e7      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7da:	e0e4      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a7dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a7e0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a7e4:	430b      	orrs	r3, r1
 800a7e6:	f040 808d 	bne.w	800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a7ea:	4b42      	ldr	r3, [pc, #264]	@ (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a7ee:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a7f2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a7f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a7fa:	d06b      	beq.n	800a8d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a7fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a802:	d874      	bhi.n	800a8ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a806:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a80a:	d056      	beq.n	800a8ba <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a80c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a80e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a812:	d86c      	bhi.n	800a8ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a816:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a81a:	d03b      	beq.n	800a894 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a81c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a81e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a822:	d864      	bhi.n	800a8ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a824:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a826:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a82a:	d021      	beq.n	800a870 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a82c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a82e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a832:	d85c      	bhi.n	800a8ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a836:	2b00      	cmp	r3, #0
 800a838:	d004      	beq.n	800a844 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a83a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a83c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a840:	d004      	beq.n	800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a842:	e054      	b.n	800a8ee <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a844:	f000 f8b8 	bl	800a9b8 <HAL_RCCEx_GetD3PCLK1Freq>
 800a848:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a84a:	e0ac      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a84c:	4b29      	ldr	r3, [pc, #164]	@ (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a854:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a858:	d107      	bne.n	800a86a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a85a:	f107 0318 	add.w	r3, r7, #24
 800a85e:	4618      	mov	r0, r3
 800a860:	f000 f8c0 	bl	800a9e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a864:	69fb      	ldr	r3, [r7, #28]
 800a866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a868:	e09d      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a86a:	2300      	movs	r3, #0
 800a86c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a86e:	e09a      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a870:	4b20      	ldr	r3, [pc, #128]	@ (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a878:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a87c:	d107      	bne.n	800a88e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a87e:	f107 030c 	add.w	r3, r7, #12
 800a882:	4618      	mov	r0, r3
 800a884:	f000 fa02 	bl	800ac8c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a888:	693b      	ldr	r3, [r7, #16]
 800a88a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a88c:	e08b      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a88e:	2300      	movs	r3, #0
 800a890:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a892:	e088      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a894:	4b17      	ldr	r3, [pc, #92]	@ (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f003 0304 	and.w	r3, r3, #4
 800a89c:	2b04      	cmp	r3, #4
 800a89e:	d109      	bne.n	800a8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a8a0:	4b14      	ldr	r3, [pc, #80]	@ (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	08db      	lsrs	r3, r3, #3
 800a8a6:	f003 0303 	and.w	r3, r3, #3
 800a8aa:	4a13      	ldr	r2, [pc, #76]	@ (800a8f8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a8ac:	fa22 f303 	lsr.w	r3, r2, r3
 800a8b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8b2:	e078      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8b8:	e075      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a8ba:	4b0e      	ldr	r3, [pc, #56]	@ (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a8c6:	d102      	bne.n	800a8ce <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a8c8:	4b0c      	ldr	r3, [pc, #48]	@ (800a8fc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a8ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8cc:	e06b      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8d2:	e068      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a8d4:	4b07      	ldr	r3, [pc, #28]	@ (800a8f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8dc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8e0:	d102      	bne.n	800a8e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a8e2:	4b07      	ldr	r3, [pc, #28]	@ (800a900 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a8e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8e6:	e05e      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8ec:	e05b      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8f2:	e058      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a8f4:	58024400 	.word	0x58024400
 800a8f8:	03d09000 	.word	0x03d09000
 800a8fc:	003d0900 	.word	0x003d0900
 800a900:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a904:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a908:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a90c:	430b      	orrs	r3, r1
 800a90e:	d148      	bne.n	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a910:	4b27      	ldr	r3, [pc, #156]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a912:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a914:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a918:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a91a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a91c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a920:	d02a      	beq.n	800a978 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a924:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a928:	d838      	bhi.n	800a99c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a92a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d004      	beq.n	800a93a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a932:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a936:	d00d      	beq.n	800a954 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a938:	e030      	b.n	800a99c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a93a:	4b1d      	ldr	r3, [pc, #116]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a942:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a946:	d102      	bne.n	800a94e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a948:	4b1a      	ldr	r3, [pc, #104]	@ (800a9b4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a94a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a94c:	e02b      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a94e:	2300      	movs	r3, #0
 800a950:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a952:	e028      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a954:	4b16      	ldr	r3, [pc, #88]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a95c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a960:	d107      	bne.n	800a972 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a962:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a966:	4618      	mov	r0, r3
 800a968:	f000 fae4 	bl	800af34 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a96c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a96e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a970:	e019      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a972:	2300      	movs	r3, #0
 800a974:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a976:	e016      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a978:	4b0d      	ldr	r3, [pc, #52]	@ (800a9b0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a980:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a984:	d107      	bne.n	800a996 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a986:	f107 0318 	add.w	r3, r7, #24
 800a98a:	4618      	mov	r0, r3
 800a98c:	f000 f82a 	bl	800a9e4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a990:	69fb      	ldr	r3, [r7, #28]
 800a992:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a994:	e007      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a996:	2300      	movs	r3, #0
 800a998:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a99a:	e004      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a99c:	2300      	movs	r3, #0
 800a99e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9a0:	e001      	b.n	800a9a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a9a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	3740      	adds	r7, #64	@ 0x40
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	bd80      	pop	{r7, pc}
 800a9b0:	58024400 	.word	0x58024400
 800a9b4:	017d7840 	.word	0x017d7840

0800a9b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a9bc:	f7fe f816 	bl	80089ec <HAL_RCC_GetHCLKFreq>
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	4b06      	ldr	r3, [pc, #24]	@ (800a9dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a9c4:	6a1b      	ldr	r3, [r3, #32]
 800a9c6:	091b      	lsrs	r3, r3, #4
 800a9c8:	f003 0307 	and.w	r3, r3, #7
 800a9cc:	4904      	ldr	r1, [pc, #16]	@ (800a9e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a9ce:	5ccb      	ldrb	r3, [r1, r3]
 800a9d0:	f003 031f 	and.w	r3, r3, #31
 800a9d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a9d8:	4618      	mov	r0, r3
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	58024400 	.word	0x58024400
 800a9e0:	08014a80 	.word	0x08014a80

0800a9e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a9e4:	b480      	push	{r7}
 800a9e6:	b089      	sub	sp, #36	@ 0x24
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a9ec:	4ba1      	ldr	r3, [pc, #644]	@ (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9f0:	f003 0303 	and.w	r3, r3, #3
 800a9f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a9f6:	4b9f      	ldr	r3, [pc, #636]	@ (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9fa:	0b1b      	lsrs	r3, r3, #12
 800a9fc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aa00:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800aa02:	4b9c      	ldr	r3, [pc, #624]	@ (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa06:	091b      	lsrs	r3, r3, #4
 800aa08:	f003 0301 	and.w	r3, r3, #1
 800aa0c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800aa0e:	4b99      	ldr	r3, [pc, #612]	@ (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa12:	08db      	lsrs	r3, r3, #3
 800aa14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa18:	693a      	ldr	r2, [r7, #16]
 800aa1a:	fb02 f303 	mul.w	r3, r2, r3
 800aa1e:	ee07 3a90 	vmov	s15, r3
 800aa22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f000 8111 	beq.w	800ac54 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800aa32:	69bb      	ldr	r3, [r7, #24]
 800aa34:	2b02      	cmp	r3, #2
 800aa36:	f000 8083 	beq.w	800ab40 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800aa3a:	69bb      	ldr	r3, [r7, #24]
 800aa3c:	2b02      	cmp	r3, #2
 800aa3e:	f200 80a1 	bhi.w	800ab84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d003      	beq.n	800aa50 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aa48:	69bb      	ldr	r3, [r7, #24]
 800aa4a:	2b01      	cmp	r3, #1
 800aa4c:	d056      	beq.n	800aafc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aa4e:	e099      	b.n	800ab84 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa50:	4b88      	ldr	r3, [pc, #544]	@ (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f003 0320 	and.w	r3, r3, #32
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d02d      	beq.n	800aab8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa5c:	4b85      	ldr	r3, [pc, #532]	@ (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	08db      	lsrs	r3, r3, #3
 800aa62:	f003 0303 	and.w	r3, r3, #3
 800aa66:	4a84      	ldr	r2, [pc, #528]	@ (800ac78 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aa68:	fa22 f303 	lsr.w	r3, r2, r3
 800aa6c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa6e:	68bb      	ldr	r3, [r7, #8]
 800aa70:	ee07 3a90 	vmov	s15, r3
 800aa74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	ee07 3a90 	vmov	s15, r3
 800aa7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa86:	4b7b      	ldr	r3, [pc, #492]	@ (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa8e:	ee07 3a90 	vmov	s15, r3
 800aa92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa96:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa9a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ac7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aaaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aab2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aab6:	e087      	b.n	800abc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aab8:	697b      	ldr	r3, [r7, #20]
 800aaba:	ee07 3a90 	vmov	s15, r3
 800aabe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aac2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ac80 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaca:	4b6a      	ldr	r3, [pc, #424]	@ (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aacc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aad2:	ee07 3a90 	vmov	s15, r3
 800aad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aada:	ed97 6a03 	vldr	s12, [r7, #12]
 800aade:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ac7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aaee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aafa:	e065      	b.n	800abc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aafc:	697b      	ldr	r3, [r7, #20]
 800aafe:	ee07 3a90 	vmov	s15, r3
 800ab02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab06:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab0e:	4b59      	ldr	r3, [pc, #356]	@ (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab16:	ee07 3a90 	vmov	s15, r3
 800ab1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab1e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab22:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ac7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab36:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab3e:	e043      	b.n	800abc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	ee07 3a90 	vmov	s15, r3
 800ab46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab4a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ac88 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ab4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab52:	4b48      	ldr	r3, [pc, #288]	@ (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab5a:	ee07 3a90 	vmov	s15, r3
 800ab5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab62:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab66:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ac7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab82:	e021      	b.n	800abc8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	ee07 3a90 	vmov	s15, r3
 800ab8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab8e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ac84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab96:	4b37      	ldr	r3, [pc, #220]	@ (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab9e:	ee07 3a90 	vmov	s15, r3
 800aba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aba6:	ed97 6a03 	vldr	s12, [r7, #12]
 800abaa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ac7c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800abae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abc6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800abc8:	4b2a      	ldr	r3, [pc, #168]	@ (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abcc:	0a5b      	lsrs	r3, r3, #9
 800abce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abd2:	ee07 3a90 	vmov	s15, r3
 800abd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abde:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abe2:	edd7 6a07 	vldr	s13, [r7, #28]
 800abe6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abee:	ee17 2a90 	vmov	r2, s15
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800abf6:	4b1f      	ldr	r3, [pc, #124]	@ (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abfa:	0c1b      	lsrs	r3, r3, #16
 800abfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac00:	ee07 3a90 	vmov	s15, r3
 800ac04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac10:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac1c:	ee17 2a90 	vmov	r2, s15
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ac24:	4b13      	ldr	r3, [pc, #76]	@ (800ac74 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ac26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac28:	0e1b      	lsrs	r3, r3, #24
 800ac2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac2e:	ee07 3a90 	vmov	s15, r3
 800ac32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac3e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac4a:	ee17 2a90 	vmov	r2, s15
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ac52:	e008      	b.n	800ac66 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2200      	movs	r2, #0
 800ac58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2200      	movs	r2, #0
 800ac64:	609a      	str	r2, [r3, #8]
}
 800ac66:	bf00      	nop
 800ac68:	3724      	adds	r7, #36	@ 0x24
 800ac6a:	46bd      	mov	sp, r7
 800ac6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac70:	4770      	bx	lr
 800ac72:	bf00      	nop
 800ac74:	58024400 	.word	0x58024400
 800ac78:	03d09000 	.word	0x03d09000
 800ac7c:	46000000 	.word	0x46000000
 800ac80:	4c742400 	.word	0x4c742400
 800ac84:	4a742400 	.word	0x4a742400
 800ac88:	4bbebc20 	.word	0x4bbebc20

0800ac8c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ac8c:	b480      	push	{r7}
 800ac8e:	b089      	sub	sp, #36	@ 0x24
 800ac90:	af00      	add	r7, sp, #0
 800ac92:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac94:	4ba1      	ldr	r3, [pc, #644]	@ (800af1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac98:	f003 0303 	and.w	r3, r3, #3
 800ac9c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ac9e:	4b9f      	ldr	r3, [pc, #636]	@ (800af1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aca2:	0d1b      	lsrs	r3, r3, #20
 800aca4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aca8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800acaa:	4b9c      	ldr	r3, [pc, #624]	@ (800af1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acae:	0a1b      	lsrs	r3, r3, #8
 800acb0:	f003 0301 	and.w	r3, r3, #1
 800acb4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800acb6:	4b99      	ldr	r3, [pc, #612]	@ (800af1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800acba:	08db      	lsrs	r3, r3, #3
 800acbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800acc0:	693a      	ldr	r2, [r7, #16]
 800acc2:	fb02 f303 	mul.w	r3, r2, r3
 800acc6:	ee07 3a90 	vmov	s15, r3
 800acca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	f000 8111 	beq.w	800aefc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800acda:	69bb      	ldr	r3, [r7, #24]
 800acdc:	2b02      	cmp	r3, #2
 800acde:	f000 8083 	beq.w	800ade8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ace2:	69bb      	ldr	r3, [r7, #24]
 800ace4:	2b02      	cmp	r3, #2
 800ace6:	f200 80a1 	bhi.w	800ae2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d003      	beq.n	800acf8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	2b01      	cmp	r3, #1
 800acf4:	d056      	beq.n	800ada4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800acf6:	e099      	b.n	800ae2c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acf8:	4b88      	ldr	r3, [pc, #544]	@ (800af1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f003 0320 	and.w	r3, r3, #32
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d02d      	beq.n	800ad60 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad04:	4b85      	ldr	r3, [pc, #532]	@ (800af1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	08db      	lsrs	r3, r3, #3
 800ad0a:	f003 0303 	and.w	r3, r3, #3
 800ad0e:	4a84      	ldr	r2, [pc, #528]	@ (800af20 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ad10:	fa22 f303 	lsr.w	r3, r2, r3
 800ad14:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad16:	68bb      	ldr	r3, [r7, #8]
 800ad18:	ee07 3a90 	vmov	s15, r3
 800ad1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	ee07 3a90 	vmov	s15, r3
 800ad26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad2e:	4b7b      	ldr	r3, [pc, #492]	@ (800af1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad36:	ee07 3a90 	vmov	s15, r3
 800ad3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad42:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800af24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ad5e:	e087      	b.n	800ae70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	ee07 3a90 	vmov	s15, r3
 800ad66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad6a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800af28 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800ad6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad72:	4b6a      	ldr	r3, [pc, #424]	@ (800af1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad7a:	ee07 3a90 	vmov	s15, r3
 800ad7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad82:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad86:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800af24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ada2:	e065      	b.n	800ae70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ada4:	697b      	ldr	r3, [r7, #20]
 800ada6:	ee07 3a90 	vmov	s15, r3
 800adaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800adb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adb6:	4b59      	ldr	r3, [pc, #356]	@ (800af1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adbe:	ee07 3a90 	vmov	s15, r3
 800adc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800adca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800af24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800adce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800add2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800add6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ade2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ade6:	e043      	b.n	800ae70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ade8:	697b      	ldr	r3, [r7, #20]
 800adea:	ee07 3a90 	vmov	s15, r3
 800adee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adf2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800af30 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800adf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adfa:	4b48      	ldr	r3, [pc, #288]	@ (800af1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae02:	ee07 3a90 	vmov	s15, r3
 800ae06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae0e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800af24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae2a:	e021      	b.n	800ae70 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ae2c:	697b      	ldr	r3, [r7, #20]
 800ae2e:	ee07 3a90 	vmov	s15, r3
 800ae32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae36:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800af2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ae3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae3e:	4b37      	ldr	r3, [pc, #220]	@ (800af1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae46:	ee07 3a90 	vmov	s15, r3
 800ae4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae4e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae52:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800af24 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ae56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae6e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ae70:	4b2a      	ldr	r3, [pc, #168]	@ (800af1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae74:	0a5b      	lsrs	r3, r3, #9
 800ae76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae7a:	ee07 3a90 	vmov	s15, r3
 800ae7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae86:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae8a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae96:	ee17 2a90 	vmov	r2, s15
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ae9e:	4b1f      	ldr	r3, [pc, #124]	@ (800af1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aea2:	0c1b      	lsrs	r3, r3, #16
 800aea4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aea8:	ee07 3a90 	vmov	s15, r3
 800aeac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aeb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aeb8:	edd7 6a07 	vldr	s13, [r7, #28]
 800aebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aec4:	ee17 2a90 	vmov	r2, s15
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800aecc:	4b13      	ldr	r3, [pc, #76]	@ (800af1c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aed0:	0e1b      	lsrs	r3, r3, #24
 800aed2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aed6:	ee07 3a90 	vmov	s15, r3
 800aeda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aede:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aee2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aee6:	edd7 6a07 	vldr	s13, [r7, #28]
 800aeea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aeee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aef2:	ee17 2a90 	vmov	r2, s15
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800aefa:	e008      	b.n	800af0e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	2200      	movs	r2, #0
 800af06:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	2200      	movs	r2, #0
 800af0c:	609a      	str	r2, [r3, #8]
}
 800af0e:	bf00      	nop
 800af10:	3724      	adds	r7, #36	@ 0x24
 800af12:	46bd      	mov	sp, r7
 800af14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af18:	4770      	bx	lr
 800af1a:	bf00      	nop
 800af1c:	58024400 	.word	0x58024400
 800af20:	03d09000 	.word	0x03d09000
 800af24:	46000000 	.word	0x46000000
 800af28:	4c742400 	.word	0x4c742400
 800af2c:	4a742400 	.word	0x4a742400
 800af30:	4bbebc20 	.word	0x4bbebc20

0800af34 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800af34:	b480      	push	{r7}
 800af36:	b089      	sub	sp, #36	@ 0x24
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800af3c:	4ba0      	ldr	r3, [pc, #640]	@ (800b1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af40:	f003 0303 	and.w	r3, r3, #3
 800af44:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800af46:	4b9e      	ldr	r3, [pc, #632]	@ (800b1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af4a:	091b      	lsrs	r3, r3, #4
 800af4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800af50:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800af52:	4b9b      	ldr	r3, [pc, #620]	@ (800b1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af56:	f003 0301 	and.w	r3, r3, #1
 800af5a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800af5c:	4b98      	ldr	r3, [pc, #608]	@ (800b1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800af60:	08db      	lsrs	r3, r3, #3
 800af62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800af66:	693a      	ldr	r2, [r7, #16]
 800af68:	fb02 f303 	mul.w	r3, r2, r3
 800af6c:	ee07 3a90 	vmov	s15, r3
 800af70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af74:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	f000 8111 	beq.w	800b1a2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800af80:	69bb      	ldr	r3, [r7, #24]
 800af82:	2b02      	cmp	r3, #2
 800af84:	f000 8083 	beq.w	800b08e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800af88:	69bb      	ldr	r3, [r7, #24]
 800af8a:	2b02      	cmp	r3, #2
 800af8c:	f200 80a1 	bhi.w	800b0d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800af90:	69bb      	ldr	r3, [r7, #24]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d003      	beq.n	800af9e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800af96:	69bb      	ldr	r3, [r7, #24]
 800af98:	2b01      	cmp	r3, #1
 800af9a:	d056      	beq.n	800b04a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800af9c:	e099      	b.n	800b0d2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af9e:	4b88      	ldr	r3, [pc, #544]	@ (800b1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f003 0320 	and.w	r3, r3, #32
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d02d      	beq.n	800b006 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afaa:	4b85      	ldr	r3, [pc, #532]	@ (800b1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	08db      	lsrs	r3, r3, #3
 800afb0:	f003 0303 	and.w	r3, r3, #3
 800afb4:	4a83      	ldr	r2, [pc, #524]	@ (800b1c4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800afb6:	fa22 f303 	lsr.w	r3, r2, r3
 800afba:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	ee07 3a90 	vmov	s15, r3
 800afc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afc6:	697b      	ldr	r3, [r7, #20]
 800afc8:	ee07 3a90 	vmov	s15, r3
 800afcc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afd4:	4b7a      	ldr	r3, [pc, #488]	@ (800b1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afdc:	ee07 3a90 	vmov	s15, r3
 800afe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afe4:	ed97 6a03 	vldr	s12, [r7, #12]
 800afe8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b1c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800afec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aff0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aff4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aff8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800affc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b000:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b004:	e087      	b.n	800b116 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	ee07 3a90 	vmov	s15, r3
 800b00c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b010:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b1cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b014:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b018:	4b69      	ldr	r3, [pc, #420]	@ (800b1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b01a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b01c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b020:	ee07 3a90 	vmov	s15, r3
 800b024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b028:	ed97 6a03 	vldr	s12, [r7, #12]
 800b02c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b1c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b030:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b034:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b038:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b03c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b040:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b044:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b048:	e065      	b.n	800b116 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b04a:	697b      	ldr	r3, [r7, #20]
 800b04c:	ee07 3a90 	vmov	s15, r3
 800b050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b054:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b1d0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b058:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b05c:	4b58      	ldr	r3, [pc, #352]	@ (800b1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b05e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b060:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b064:	ee07 3a90 	vmov	s15, r3
 800b068:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b06c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b070:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b1c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b074:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b078:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b07c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b080:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b084:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b088:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b08c:	e043      	b.n	800b116 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	ee07 3a90 	vmov	s15, r3
 800b094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b098:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b1d4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b09c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0a0:	4b47      	ldr	r3, [pc, #284]	@ (800b1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0a8:	ee07 3a90 	vmov	s15, r3
 800b0ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0b0:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0b4:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b1c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b0b8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b0bc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b0c0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b0c4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b0c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0cc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0d0:	e021      	b.n	800b116 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	ee07 3a90 	vmov	s15, r3
 800b0d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0dc:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b1cc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b0e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b0e4:	4b36      	ldr	r3, [pc, #216]	@ (800b1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0ec:	ee07 3a90 	vmov	s15, r3
 800b0f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b0f4:	ed97 6a03 	vldr	s12, [r7, #12]
 800b0f8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b1c8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b0fc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b100:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b104:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b108:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b10c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b110:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b114:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b116:	4b2a      	ldr	r3, [pc, #168]	@ (800b1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b11a:	0a5b      	lsrs	r3, r3, #9
 800b11c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b120:	ee07 3a90 	vmov	s15, r3
 800b124:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b128:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b12c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b130:	edd7 6a07 	vldr	s13, [r7, #28]
 800b134:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b138:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b13c:	ee17 2a90 	vmov	r2, s15
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b144:	4b1e      	ldr	r3, [pc, #120]	@ (800b1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b146:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b148:	0c1b      	lsrs	r3, r3, #16
 800b14a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b14e:	ee07 3a90 	vmov	s15, r3
 800b152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b156:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b15a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b15e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b162:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b16a:	ee17 2a90 	vmov	r2, s15
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b172:	4b13      	ldr	r3, [pc, #76]	@ (800b1c0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b176:	0e1b      	lsrs	r3, r3, #24
 800b178:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b17c:	ee07 3a90 	vmov	s15, r3
 800b180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b184:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b188:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b18c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b198:	ee17 2a90 	vmov	r2, s15
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b1a0:	e008      	b.n	800b1b4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	609a      	str	r2, [r3, #8]
}
 800b1b4:	bf00      	nop
 800b1b6:	3724      	adds	r7, #36	@ 0x24
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr
 800b1c0:	58024400 	.word	0x58024400
 800b1c4:	03d09000 	.word	0x03d09000
 800b1c8:	46000000 	.word	0x46000000
 800b1cc:	4c742400 	.word	0x4c742400
 800b1d0:	4a742400 	.word	0x4a742400
 800b1d4:	4bbebc20 	.word	0x4bbebc20

0800b1d8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b084      	sub	sp, #16
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b1e6:	4b53      	ldr	r3, [pc, #332]	@ (800b334 <RCCEx_PLL2_Config+0x15c>)
 800b1e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1ea:	f003 0303 	and.w	r3, r3, #3
 800b1ee:	2b03      	cmp	r3, #3
 800b1f0:	d101      	bne.n	800b1f6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	e099      	b.n	800b32a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b1f6:	4b4f      	ldr	r3, [pc, #316]	@ (800b334 <RCCEx_PLL2_Config+0x15c>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a4e      	ldr	r2, [pc, #312]	@ (800b334 <RCCEx_PLL2_Config+0x15c>)
 800b1fc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b200:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b202:	f7f7 fbf5 	bl	80029f0 <HAL_GetTick>
 800b206:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b208:	e008      	b.n	800b21c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b20a:	f7f7 fbf1 	bl	80029f0 <HAL_GetTick>
 800b20e:	4602      	mov	r2, r0
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	1ad3      	subs	r3, r2, r3
 800b214:	2b02      	cmp	r3, #2
 800b216:	d901      	bls.n	800b21c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b218:	2303      	movs	r3, #3
 800b21a:	e086      	b.n	800b32a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b21c:	4b45      	ldr	r3, [pc, #276]	@ (800b334 <RCCEx_PLL2_Config+0x15c>)
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b224:	2b00      	cmp	r3, #0
 800b226:	d1f0      	bne.n	800b20a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b228:	4b42      	ldr	r3, [pc, #264]	@ (800b334 <RCCEx_PLL2_Config+0x15c>)
 800b22a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b22c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	031b      	lsls	r3, r3, #12
 800b236:	493f      	ldr	r1, [pc, #252]	@ (800b334 <RCCEx_PLL2_Config+0x15c>)
 800b238:	4313      	orrs	r3, r2
 800b23a:	628b      	str	r3, [r1, #40]	@ 0x28
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	685b      	ldr	r3, [r3, #4]
 800b240:	3b01      	subs	r3, #1
 800b242:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	689b      	ldr	r3, [r3, #8]
 800b24a:	3b01      	subs	r3, #1
 800b24c:	025b      	lsls	r3, r3, #9
 800b24e:	b29b      	uxth	r3, r3
 800b250:	431a      	orrs	r2, r3
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	68db      	ldr	r3, [r3, #12]
 800b256:	3b01      	subs	r3, #1
 800b258:	041b      	lsls	r3, r3, #16
 800b25a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b25e:	431a      	orrs	r2, r3
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	691b      	ldr	r3, [r3, #16]
 800b264:	3b01      	subs	r3, #1
 800b266:	061b      	lsls	r3, r3, #24
 800b268:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b26c:	4931      	ldr	r1, [pc, #196]	@ (800b334 <RCCEx_PLL2_Config+0x15c>)
 800b26e:	4313      	orrs	r3, r2
 800b270:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b272:	4b30      	ldr	r3, [pc, #192]	@ (800b334 <RCCEx_PLL2_Config+0x15c>)
 800b274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b276:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	695b      	ldr	r3, [r3, #20]
 800b27e:	492d      	ldr	r1, [pc, #180]	@ (800b334 <RCCEx_PLL2_Config+0x15c>)
 800b280:	4313      	orrs	r3, r2
 800b282:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b284:	4b2b      	ldr	r3, [pc, #172]	@ (800b334 <RCCEx_PLL2_Config+0x15c>)
 800b286:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b288:	f023 0220 	bic.w	r2, r3, #32
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	699b      	ldr	r3, [r3, #24]
 800b290:	4928      	ldr	r1, [pc, #160]	@ (800b334 <RCCEx_PLL2_Config+0x15c>)
 800b292:	4313      	orrs	r3, r2
 800b294:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b296:	4b27      	ldr	r3, [pc, #156]	@ (800b334 <RCCEx_PLL2_Config+0x15c>)
 800b298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b29a:	4a26      	ldr	r2, [pc, #152]	@ (800b334 <RCCEx_PLL2_Config+0x15c>)
 800b29c:	f023 0310 	bic.w	r3, r3, #16
 800b2a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b2a2:	4b24      	ldr	r3, [pc, #144]	@ (800b334 <RCCEx_PLL2_Config+0x15c>)
 800b2a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b2a6:	4b24      	ldr	r3, [pc, #144]	@ (800b338 <RCCEx_PLL2_Config+0x160>)
 800b2a8:	4013      	ands	r3, r2
 800b2aa:	687a      	ldr	r2, [r7, #4]
 800b2ac:	69d2      	ldr	r2, [r2, #28]
 800b2ae:	00d2      	lsls	r2, r2, #3
 800b2b0:	4920      	ldr	r1, [pc, #128]	@ (800b334 <RCCEx_PLL2_Config+0x15c>)
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b2b6:	4b1f      	ldr	r3, [pc, #124]	@ (800b334 <RCCEx_PLL2_Config+0x15c>)
 800b2b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2ba:	4a1e      	ldr	r2, [pc, #120]	@ (800b334 <RCCEx_PLL2_Config+0x15c>)
 800b2bc:	f043 0310 	orr.w	r3, r3, #16
 800b2c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d106      	bne.n	800b2d6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b2c8:	4b1a      	ldr	r3, [pc, #104]	@ (800b334 <RCCEx_PLL2_Config+0x15c>)
 800b2ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2cc:	4a19      	ldr	r2, [pc, #100]	@ (800b334 <RCCEx_PLL2_Config+0x15c>)
 800b2ce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b2d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b2d4:	e00f      	b.n	800b2f6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	2b01      	cmp	r3, #1
 800b2da:	d106      	bne.n	800b2ea <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b2dc:	4b15      	ldr	r3, [pc, #84]	@ (800b334 <RCCEx_PLL2_Config+0x15c>)
 800b2de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2e0:	4a14      	ldr	r2, [pc, #80]	@ (800b334 <RCCEx_PLL2_Config+0x15c>)
 800b2e2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b2e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b2e8:	e005      	b.n	800b2f6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b2ea:	4b12      	ldr	r3, [pc, #72]	@ (800b334 <RCCEx_PLL2_Config+0x15c>)
 800b2ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2ee:	4a11      	ldr	r2, [pc, #68]	@ (800b334 <RCCEx_PLL2_Config+0x15c>)
 800b2f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b2f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b2f6:	4b0f      	ldr	r3, [pc, #60]	@ (800b334 <RCCEx_PLL2_Config+0x15c>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a0e      	ldr	r2, [pc, #56]	@ (800b334 <RCCEx_PLL2_Config+0x15c>)
 800b2fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b300:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b302:	f7f7 fb75 	bl	80029f0 <HAL_GetTick>
 800b306:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b308:	e008      	b.n	800b31c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b30a:	f7f7 fb71 	bl	80029f0 <HAL_GetTick>
 800b30e:	4602      	mov	r2, r0
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	1ad3      	subs	r3, r2, r3
 800b314:	2b02      	cmp	r3, #2
 800b316:	d901      	bls.n	800b31c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b318:	2303      	movs	r3, #3
 800b31a:	e006      	b.n	800b32a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b31c:	4b05      	ldr	r3, [pc, #20]	@ (800b334 <RCCEx_PLL2_Config+0x15c>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b324:	2b00      	cmp	r3, #0
 800b326:	d0f0      	beq.n	800b30a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b328:	7bfb      	ldrb	r3, [r7, #15]
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3710      	adds	r7, #16
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	58024400 	.word	0x58024400
 800b338:	ffff0007 	.word	0xffff0007

0800b33c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b084      	sub	sp, #16
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b346:	2300      	movs	r3, #0
 800b348:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b34a:	4b53      	ldr	r3, [pc, #332]	@ (800b498 <RCCEx_PLL3_Config+0x15c>)
 800b34c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b34e:	f003 0303 	and.w	r3, r3, #3
 800b352:	2b03      	cmp	r3, #3
 800b354:	d101      	bne.n	800b35a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b356:	2301      	movs	r3, #1
 800b358:	e099      	b.n	800b48e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b35a:	4b4f      	ldr	r3, [pc, #316]	@ (800b498 <RCCEx_PLL3_Config+0x15c>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a4e      	ldr	r2, [pc, #312]	@ (800b498 <RCCEx_PLL3_Config+0x15c>)
 800b360:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b364:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b366:	f7f7 fb43 	bl	80029f0 <HAL_GetTick>
 800b36a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b36c:	e008      	b.n	800b380 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b36e:	f7f7 fb3f 	bl	80029f0 <HAL_GetTick>
 800b372:	4602      	mov	r2, r0
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	1ad3      	subs	r3, r2, r3
 800b378:	2b02      	cmp	r3, #2
 800b37a:	d901      	bls.n	800b380 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b37c:	2303      	movs	r3, #3
 800b37e:	e086      	b.n	800b48e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b380:	4b45      	ldr	r3, [pc, #276]	@ (800b498 <RCCEx_PLL3_Config+0x15c>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d1f0      	bne.n	800b36e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b38c:	4b42      	ldr	r3, [pc, #264]	@ (800b498 <RCCEx_PLL3_Config+0x15c>)
 800b38e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b390:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	051b      	lsls	r3, r3, #20
 800b39a:	493f      	ldr	r1, [pc, #252]	@ (800b498 <RCCEx_PLL3_Config+0x15c>)
 800b39c:	4313      	orrs	r3, r2
 800b39e:	628b      	str	r3, [r1, #40]	@ 0x28
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	689b      	ldr	r3, [r3, #8]
 800b3ae:	3b01      	subs	r3, #1
 800b3b0:	025b      	lsls	r3, r3, #9
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	431a      	orrs	r2, r3
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	68db      	ldr	r3, [r3, #12]
 800b3ba:	3b01      	subs	r3, #1
 800b3bc:	041b      	lsls	r3, r3, #16
 800b3be:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b3c2:	431a      	orrs	r2, r3
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	691b      	ldr	r3, [r3, #16]
 800b3c8:	3b01      	subs	r3, #1
 800b3ca:	061b      	lsls	r3, r3, #24
 800b3cc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b3d0:	4931      	ldr	r1, [pc, #196]	@ (800b498 <RCCEx_PLL3_Config+0x15c>)
 800b3d2:	4313      	orrs	r3, r2
 800b3d4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b3d6:	4b30      	ldr	r3, [pc, #192]	@ (800b498 <RCCEx_PLL3_Config+0x15c>)
 800b3d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	695b      	ldr	r3, [r3, #20]
 800b3e2:	492d      	ldr	r1, [pc, #180]	@ (800b498 <RCCEx_PLL3_Config+0x15c>)
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b3e8:	4b2b      	ldr	r3, [pc, #172]	@ (800b498 <RCCEx_PLL3_Config+0x15c>)
 800b3ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3ec:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	699b      	ldr	r3, [r3, #24]
 800b3f4:	4928      	ldr	r1, [pc, #160]	@ (800b498 <RCCEx_PLL3_Config+0x15c>)
 800b3f6:	4313      	orrs	r3, r2
 800b3f8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b3fa:	4b27      	ldr	r3, [pc, #156]	@ (800b498 <RCCEx_PLL3_Config+0x15c>)
 800b3fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3fe:	4a26      	ldr	r2, [pc, #152]	@ (800b498 <RCCEx_PLL3_Config+0x15c>)
 800b400:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b404:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b406:	4b24      	ldr	r3, [pc, #144]	@ (800b498 <RCCEx_PLL3_Config+0x15c>)
 800b408:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b40a:	4b24      	ldr	r3, [pc, #144]	@ (800b49c <RCCEx_PLL3_Config+0x160>)
 800b40c:	4013      	ands	r3, r2
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	69d2      	ldr	r2, [r2, #28]
 800b412:	00d2      	lsls	r2, r2, #3
 800b414:	4920      	ldr	r1, [pc, #128]	@ (800b498 <RCCEx_PLL3_Config+0x15c>)
 800b416:	4313      	orrs	r3, r2
 800b418:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b41a:	4b1f      	ldr	r3, [pc, #124]	@ (800b498 <RCCEx_PLL3_Config+0x15c>)
 800b41c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b41e:	4a1e      	ldr	r2, [pc, #120]	@ (800b498 <RCCEx_PLL3_Config+0x15c>)
 800b420:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b424:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d106      	bne.n	800b43a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b42c:	4b1a      	ldr	r3, [pc, #104]	@ (800b498 <RCCEx_PLL3_Config+0x15c>)
 800b42e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b430:	4a19      	ldr	r2, [pc, #100]	@ (800b498 <RCCEx_PLL3_Config+0x15c>)
 800b432:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b436:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b438:	e00f      	b.n	800b45a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d106      	bne.n	800b44e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b440:	4b15      	ldr	r3, [pc, #84]	@ (800b498 <RCCEx_PLL3_Config+0x15c>)
 800b442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b444:	4a14      	ldr	r2, [pc, #80]	@ (800b498 <RCCEx_PLL3_Config+0x15c>)
 800b446:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b44a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b44c:	e005      	b.n	800b45a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b44e:	4b12      	ldr	r3, [pc, #72]	@ (800b498 <RCCEx_PLL3_Config+0x15c>)
 800b450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b452:	4a11      	ldr	r2, [pc, #68]	@ (800b498 <RCCEx_PLL3_Config+0x15c>)
 800b454:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b458:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b45a:	4b0f      	ldr	r3, [pc, #60]	@ (800b498 <RCCEx_PLL3_Config+0x15c>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	4a0e      	ldr	r2, [pc, #56]	@ (800b498 <RCCEx_PLL3_Config+0x15c>)
 800b460:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b464:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b466:	f7f7 fac3 	bl	80029f0 <HAL_GetTick>
 800b46a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b46c:	e008      	b.n	800b480 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b46e:	f7f7 fabf 	bl	80029f0 <HAL_GetTick>
 800b472:	4602      	mov	r2, r0
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	1ad3      	subs	r3, r2, r3
 800b478:	2b02      	cmp	r3, #2
 800b47a:	d901      	bls.n	800b480 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b47c:	2303      	movs	r3, #3
 800b47e:	e006      	b.n	800b48e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b480:	4b05      	ldr	r3, [pc, #20]	@ (800b498 <RCCEx_PLL3_Config+0x15c>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d0f0      	beq.n	800b46e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b48c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}
 800b496:	bf00      	nop
 800b498:	58024400 	.word	0x58024400
 800b49c:	ffff0007 	.word	0xffff0007

0800b4a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b082      	sub	sp, #8
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d101      	bne.n	800b4b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b4ae:	2301      	movs	r3, #1
 800b4b0:	e049      	b.n	800b546 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b4b8:	b2db      	uxtb	r3, r3
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d106      	bne.n	800b4cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b4c6:	6878      	ldr	r0, [r7, #4]
 800b4c8:	f7f6 ff76 	bl	80023b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2202      	movs	r2, #2
 800b4d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	3304      	adds	r3, #4
 800b4dc:	4619      	mov	r1, r3
 800b4de:	4610      	mov	r0, r2
 800b4e0:	f000 fea4 	bl	800c22c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	2201      	movs	r2, #1
 800b4e8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	2201      	movs	r2, #1
 800b4f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2201      	movs	r2, #1
 800b4f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2201      	movs	r2, #1
 800b500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	2201      	movs	r2, #1
 800b508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2201      	movs	r2, #1
 800b510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	2201      	movs	r2, #1
 800b518:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2201      	movs	r2, #1
 800b520:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2201      	movs	r2, #1
 800b528:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	2201      	movs	r2, #1
 800b530:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	2201      	movs	r2, #1
 800b538:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2201      	movs	r2, #1
 800b540:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b544:	2300      	movs	r3, #0
}
 800b546:	4618      	mov	r0, r3
 800b548:	3708      	adds	r7, #8
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
	...

0800b550 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b550:	b480      	push	{r7}
 800b552:	b085      	sub	sp, #20
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b55e:	b2db      	uxtb	r3, r3
 800b560:	2b01      	cmp	r3, #1
 800b562:	d001      	beq.n	800b568 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b564:	2301      	movs	r3, #1
 800b566:	e054      	b.n	800b612 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2202      	movs	r2, #2
 800b56c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	68da      	ldr	r2, [r3, #12]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f042 0201 	orr.w	r2, r2, #1
 800b57e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4a26      	ldr	r2, [pc, #152]	@ (800b620 <HAL_TIM_Base_Start_IT+0xd0>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d022      	beq.n	800b5d0 <HAL_TIM_Base_Start_IT+0x80>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b592:	d01d      	beq.n	800b5d0 <HAL_TIM_Base_Start_IT+0x80>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4a22      	ldr	r2, [pc, #136]	@ (800b624 <HAL_TIM_Base_Start_IT+0xd4>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d018      	beq.n	800b5d0 <HAL_TIM_Base_Start_IT+0x80>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4a21      	ldr	r2, [pc, #132]	@ (800b628 <HAL_TIM_Base_Start_IT+0xd8>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d013      	beq.n	800b5d0 <HAL_TIM_Base_Start_IT+0x80>
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	4a1f      	ldr	r2, [pc, #124]	@ (800b62c <HAL_TIM_Base_Start_IT+0xdc>)
 800b5ae:	4293      	cmp	r3, r2
 800b5b0:	d00e      	beq.n	800b5d0 <HAL_TIM_Base_Start_IT+0x80>
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	4a1e      	ldr	r2, [pc, #120]	@ (800b630 <HAL_TIM_Base_Start_IT+0xe0>)
 800b5b8:	4293      	cmp	r3, r2
 800b5ba:	d009      	beq.n	800b5d0 <HAL_TIM_Base_Start_IT+0x80>
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4a1c      	ldr	r2, [pc, #112]	@ (800b634 <HAL_TIM_Base_Start_IT+0xe4>)
 800b5c2:	4293      	cmp	r3, r2
 800b5c4:	d004      	beq.n	800b5d0 <HAL_TIM_Base_Start_IT+0x80>
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4a1b      	ldr	r2, [pc, #108]	@ (800b638 <HAL_TIM_Base_Start_IT+0xe8>)
 800b5cc:	4293      	cmp	r3, r2
 800b5ce:	d115      	bne.n	800b5fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	689a      	ldr	r2, [r3, #8]
 800b5d6:	4b19      	ldr	r3, [pc, #100]	@ (800b63c <HAL_TIM_Base_Start_IT+0xec>)
 800b5d8:	4013      	ands	r3, r2
 800b5da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	2b06      	cmp	r3, #6
 800b5e0:	d015      	beq.n	800b60e <HAL_TIM_Base_Start_IT+0xbe>
 800b5e2:	68fb      	ldr	r3, [r7, #12]
 800b5e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b5e8:	d011      	beq.n	800b60e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f042 0201 	orr.w	r2, r2, #1
 800b5f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b5fa:	e008      	b.n	800b60e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	681a      	ldr	r2, [r3, #0]
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f042 0201 	orr.w	r2, r2, #1
 800b60a:	601a      	str	r2, [r3, #0]
 800b60c:	e000      	b.n	800b610 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b60e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b610:	2300      	movs	r3, #0
}
 800b612:	4618      	mov	r0, r3
 800b614:	3714      	adds	r7, #20
 800b616:	46bd      	mov	sp, r7
 800b618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	40010000 	.word	0x40010000
 800b624:	40000400 	.word	0x40000400
 800b628:	40000800 	.word	0x40000800
 800b62c:	40000c00 	.word	0x40000c00
 800b630:	40010400 	.word	0x40010400
 800b634:	40001800 	.word	0x40001800
 800b638:	40014000 	.word	0x40014000
 800b63c:	00010007 	.word	0x00010007

0800b640 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b082      	sub	sp, #8
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d101      	bne.n	800b652 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b64e:	2301      	movs	r3, #1
 800b650:	e049      	b.n	800b6e6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b658:	b2db      	uxtb	r3, r3
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d106      	bne.n	800b66c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	2200      	movs	r2, #0
 800b662:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f7f6 fd7a 	bl	8002160 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2202      	movs	r2, #2
 800b670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681a      	ldr	r2, [r3, #0]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	3304      	adds	r3, #4
 800b67c:	4619      	mov	r1, r3
 800b67e:	4610      	mov	r0, r2
 800b680:	f000 fdd4 	bl	800c22c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2201      	movs	r2, #1
 800b688:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	2201      	movs	r2, #1
 800b690:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	2201      	movs	r2, #1
 800b698:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2201      	movs	r2, #1
 800b6a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2201      	movs	r2, #1
 800b6b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2201      	movs	r2, #1
 800b6c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b6e4:	2300      	movs	r3, #0
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3708      	adds	r7, #8
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
	...

0800b6f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d109      	bne.n	800b714 <HAL_TIM_PWM_Start+0x24>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b706:	b2db      	uxtb	r3, r3
 800b708:	2b01      	cmp	r3, #1
 800b70a:	bf14      	ite	ne
 800b70c:	2301      	movne	r3, #1
 800b70e:	2300      	moveq	r3, #0
 800b710:	b2db      	uxtb	r3, r3
 800b712:	e03c      	b.n	800b78e <HAL_TIM_PWM_Start+0x9e>
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	2b04      	cmp	r3, #4
 800b718:	d109      	bne.n	800b72e <HAL_TIM_PWM_Start+0x3e>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b720:	b2db      	uxtb	r3, r3
 800b722:	2b01      	cmp	r3, #1
 800b724:	bf14      	ite	ne
 800b726:	2301      	movne	r3, #1
 800b728:	2300      	moveq	r3, #0
 800b72a:	b2db      	uxtb	r3, r3
 800b72c:	e02f      	b.n	800b78e <HAL_TIM_PWM_Start+0x9e>
 800b72e:	683b      	ldr	r3, [r7, #0]
 800b730:	2b08      	cmp	r3, #8
 800b732:	d109      	bne.n	800b748 <HAL_TIM_PWM_Start+0x58>
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b73a:	b2db      	uxtb	r3, r3
 800b73c:	2b01      	cmp	r3, #1
 800b73e:	bf14      	ite	ne
 800b740:	2301      	movne	r3, #1
 800b742:	2300      	moveq	r3, #0
 800b744:	b2db      	uxtb	r3, r3
 800b746:	e022      	b.n	800b78e <HAL_TIM_PWM_Start+0x9e>
 800b748:	683b      	ldr	r3, [r7, #0]
 800b74a:	2b0c      	cmp	r3, #12
 800b74c:	d109      	bne.n	800b762 <HAL_TIM_PWM_Start+0x72>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b754:	b2db      	uxtb	r3, r3
 800b756:	2b01      	cmp	r3, #1
 800b758:	bf14      	ite	ne
 800b75a:	2301      	movne	r3, #1
 800b75c:	2300      	moveq	r3, #0
 800b75e:	b2db      	uxtb	r3, r3
 800b760:	e015      	b.n	800b78e <HAL_TIM_PWM_Start+0x9e>
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	2b10      	cmp	r3, #16
 800b766:	d109      	bne.n	800b77c <HAL_TIM_PWM_Start+0x8c>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b76e:	b2db      	uxtb	r3, r3
 800b770:	2b01      	cmp	r3, #1
 800b772:	bf14      	ite	ne
 800b774:	2301      	movne	r3, #1
 800b776:	2300      	moveq	r3, #0
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	e008      	b.n	800b78e <HAL_TIM_PWM_Start+0x9e>
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b782:	b2db      	uxtb	r3, r3
 800b784:	2b01      	cmp	r3, #1
 800b786:	bf14      	ite	ne
 800b788:	2301      	movne	r3, #1
 800b78a:	2300      	moveq	r3, #0
 800b78c:	b2db      	uxtb	r3, r3
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d001      	beq.n	800b796 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b792:	2301      	movs	r3, #1
 800b794:	e0a1      	b.n	800b8da <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b796:	683b      	ldr	r3, [r7, #0]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d104      	bne.n	800b7a6 <HAL_TIM_PWM_Start+0xb6>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	2202      	movs	r2, #2
 800b7a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b7a4:	e023      	b.n	800b7ee <HAL_TIM_PWM_Start+0xfe>
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	2b04      	cmp	r3, #4
 800b7aa:	d104      	bne.n	800b7b6 <HAL_TIM_PWM_Start+0xc6>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2202      	movs	r2, #2
 800b7b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b7b4:	e01b      	b.n	800b7ee <HAL_TIM_PWM_Start+0xfe>
 800b7b6:	683b      	ldr	r3, [r7, #0]
 800b7b8:	2b08      	cmp	r3, #8
 800b7ba:	d104      	bne.n	800b7c6 <HAL_TIM_PWM_Start+0xd6>
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2202      	movs	r2, #2
 800b7c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b7c4:	e013      	b.n	800b7ee <HAL_TIM_PWM_Start+0xfe>
 800b7c6:	683b      	ldr	r3, [r7, #0]
 800b7c8:	2b0c      	cmp	r3, #12
 800b7ca:	d104      	bne.n	800b7d6 <HAL_TIM_PWM_Start+0xe6>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	2202      	movs	r2, #2
 800b7d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b7d4:	e00b      	b.n	800b7ee <HAL_TIM_PWM_Start+0xfe>
 800b7d6:	683b      	ldr	r3, [r7, #0]
 800b7d8:	2b10      	cmp	r3, #16
 800b7da:	d104      	bne.n	800b7e6 <HAL_TIM_PWM_Start+0xf6>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2202      	movs	r2, #2
 800b7e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b7e4:	e003      	b.n	800b7ee <HAL_TIM_PWM_Start+0xfe>
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	2202      	movs	r2, #2
 800b7ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	6839      	ldr	r1, [r7, #0]
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f001 f932 	bl	800ca60 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a38      	ldr	r2, [pc, #224]	@ (800b8e4 <HAL_TIM_PWM_Start+0x1f4>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d013      	beq.n	800b82e <HAL_TIM_PWM_Start+0x13e>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	4a37      	ldr	r2, [pc, #220]	@ (800b8e8 <HAL_TIM_PWM_Start+0x1f8>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d00e      	beq.n	800b82e <HAL_TIM_PWM_Start+0x13e>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4a35      	ldr	r2, [pc, #212]	@ (800b8ec <HAL_TIM_PWM_Start+0x1fc>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d009      	beq.n	800b82e <HAL_TIM_PWM_Start+0x13e>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	4a34      	ldr	r2, [pc, #208]	@ (800b8f0 <HAL_TIM_PWM_Start+0x200>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d004      	beq.n	800b82e <HAL_TIM_PWM_Start+0x13e>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	4a32      	ldr	r2, [pc, #200]	@ (800b8f4 <HAL_TIM_PWM_Start+0x204>)
 800b82a:	4293      	cmp	r3, r2
 800b82c:	d101      	bne.n	800b832 <HAL_TIM_PWM_Start+0x142>
 800b82e:	2301      	movs	r3, #1
 800b830:	e000      	b.n	800b834 <HAL_TIM_PWM_Start+0x144>
 800b832:	2300      	movs	r3, #0
 800b834:	2b00      	cmp	r3, #0
 800b836:	d007      	beq.n	800b848 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b846:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4a25      	ldr	r2, [pc, #148]	@ (800b8e4 <HAL_TIM_PWM_Start+0x1f4>)
 800b84e:	4293      	cmp	r3, r2
 800b850:	d022      	beq.n	800b898 <HAL_TIM_PWM_Start+0x1a8>
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b85a:	d01d      	beq.n	800b898 <HAL_TIM_PWM_Start+0x1a8>
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	4a25      	ldr	r2, [pc, #148]	@ (800b8f8 <HAL_TIM_PWM_Start+0x208>)
 800b862:	4293      	cmp	r3, r2
 800b864:	d018      	beq.n	800b898 <HAL_TIM_PWM_Start+0x1a8>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	4a24      	ldr	r2, [pc, #144]	@ (800b8fc <HAL_TIM_PWM_Start+0x20c>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d013      	beq.n	800b898 <HAL_TIM_PWM_Start+0x1a8>
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	4a22      	ldr	r2, [pc, #136]	@ (800b900 <HAL_TIM_PWM_Start+0x210>)
 800b876:	4293      	cmp	r3, r2
 800b878:	d00e      	beq.n	800b898 <HAL_TIM_PWM_Start+0x1a8>
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	4a1a      	ldr	r2, [pc, #104]	@ (800b8e8 <HAL_TIM_PWM_Start+0x1f8>)
 800b880:	4293      	cmp	r3, r2
 800b882:	d009      	beq.n	800b898 <HAL_TIM_PWM_Start+0x1a8>
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	4a1e      	ldr	r2, [pc, #120]	@ (800b904 <HAL_TIM_PWM_Start+0x214>)
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d004      	beq.n	800b898 <HAL_TIM_PWM_Start+0x1a8>
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	4a16      	ldr	r2, [pc, #88]	@ (800b8ec <HAL_TIM_PWM_Start+0x1fc>)
 800b894:	4293      	cmp	r3, r2
 800b896:	d115      	bne.n	800b8c4 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	689a      	ldr	r2, [r3, #8]
 800b89e:	4b1a      	ldr	r3, [pc, #104]	@ (800b908 <HAL_TIM_PWM_Start+0x218>)
 800b8a0:	4013      	ands	r3, r2
 800b8a2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2b06      	cmp	r3, #6
 800b8a8:	d015      	beq.n	800b8d6 <HAL_TIM_PWM_Start+0x1e6>
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b8b0:	d011      	beq.n	800b8d6 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	681a      	ldr	r2, [r3, #0]
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	f042 0201 	orr.w	r2, r2, #1
 800b8c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8c2:	e008      	b.n	800b8d6 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f042 0201 	orr.w	r2, r2, #1
 800b8d2:	601a      	str	r2, [r3, #0]
 800b8d4:	e000      	b.n	800b8d8 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8d6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b8d8:	2300      	movs	r3, #0
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3710      	adds	r7, #16
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}
 800b8e2:	bf00      	nop
 800b8e4:	40010000 	.word	0x40010000
 800b8e8:	40010400 	.word	0x40010400
 800b8ec:	40014000 	.word	0x40014000
 800b8f0:	40014400 	.word	0x40014400
 800b8f4:	40014800 	.word	0x40014800
 800b8f8:	40000400 	.word	0x40000400
 800b8fc:	40000800 	.word	0x40000800
 800b900:	40000c00 	.word	0x40000c00
 800b904:	40001800 	.word	0x40001800
 800b908:	00010007 	.word	0x00010007

0800b90c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b086      	sub	sp, #24
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d101      	bne.n	800b920 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b91c:	2301      	movs	r3, #1
 800b91e:	e08f      	b.n	800ba40 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b926:	b2db      	uxtb	r3, r3
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d106      	bne.n	800b93a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2200      	movs	r2, #0
 800b930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f7f6 fb17 	bl	8001f68 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2202      	movs	r2, #2
 800b93e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	6899      	ldr	r1, [r3, #8]
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681a      	ldr	r2, [r3, #0]
 800b94c:	4b3e      	ldr	r3, [pc, #248]	@ (800ba48 <HAL_TIM_Encoder_Init+0x13c>)
 800b94e:	400b      	ands	r3, r1
 800b950:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681a      	ldr	r2, [r3, #0]
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	3304      	adds	r3, #4
 800b95a:	4619      	mov	r1, r3
 800b95c:	4610      	mov	r0, r2
 800b95e:	f000 fc65 	bl	800c22c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	689b      	ldr	r3, [r3, #8]
 800b968:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	699b      	ldr	r3, [r3, #24]
 800b970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	6a1b      	ldr	r3, [r3, #32]
 800b978:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	697a      	ldr	r2, [r7, #20]
 800b980:	4313      	orrs	r3, r2
 800b982:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b984:	693a      	ldr	r2, [r7, #16]
 800b986:	4b31      	ldr	r3, [pc, #196]	@ (800ba4c <HAL_TIM_Encoder_Init+0x140>)
 800b988:	4013      	ands	r3, r2
 800b98a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	689a      	ldr	r2, [r3, #8]
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	699b      	ldr	r3, [r3, #24]
 800b994:	021b      	lsls	r3, r3, #8
 800b996:	4313      	orrs	r3, r2
 800b998:	693a      	ldr	r2, [r7, #16]
 800b99a:	4313      	orrs	r3, r2
 800b99c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b99e:	693a      	ldr	r2, [r7, #16]
 800b9a0:	4b2b      	ldr	r3, [pc, #172]	@ (800ba50 <HAL_TIM_Encoder_Init+0x144>)
 800b9a2:	4013      	ands	r3, r2
 800b9a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b9a6:	693a      	ldr	r2, [r7, #16]
 800b9a8:	4b2a      	ldr	r3, [pc, #168]	@ (800ba54 <HAL_TIM_Encoder_Init+0x148>)
 800b9aa:	4013      	ands	r3, r2
 800b9ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	68da      	ldr	r2, [r3, #12]
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	69db      	ldr	r3, [r3, #28]
 800b9b6:	021b      	lsls	r3, r3, #8
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	693a      	ldr	r2, [r7, #16]
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b9c0:	683b      	ldr	r3, [r7, #0]
 800b9c2:	691b      	ldr	r3, [r3, #16]
 800b9c4:	011a      	lsls	r2, r3, #4
 800b9c6:	683b      	ldr	r3, [r7, #0]
 800b9c8:	6a1b      	ldr	r3, [r3, #32]
 800b9ca:	031b      	lsls	r3, r3, #12
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	693a      	ldr	r2, [r7, #16]
 800b9d0:	4313      	orrs	r3, r2
 800b9d2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800b9da:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800b9e2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	685a      	ldr	r2, [r3, #4]
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	695b      	ldr	r3, [r3, #20]
 800b9ec:	011b      	lsls	r3, r3, #4
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	68fa      	ldr	r2, [r7, #12]
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	697a      	ldr	r2, [r7, #20]
 800b9fc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	693a      	ldr	r2, [r7, #16]
 800ba04:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	68fa      	ldr	r2, [r7, #12]
 800ba0c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2201      	movs	r2, #1
 800ba12:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2201      	movs	r2, #1
 800ba1a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	2201      	movs	r2, #1
 800ba22:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2201      	movs	r2, #1
 800ba2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2201      	movs	r2, #1
 800ba32:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2201      	movs	r2, #1
 800ba3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800ba3e:	2300      	movs	r3, #0
}
 800ba40:	4618      	mov	r0, r3
 800ba42:	3718      	adds	r7, #24
 800ba44:	46bd      	mov	sp, r7
 800ba46:	bd80      	pop	{r7, pc}
 800ba48:	fffebff8 	.word	0xfffebff8
 800ba4c:	fffffcfc 	.word	0xfffffcfc
 800ba50:	fffff3f3 	.word	0xfffff3f3
 800ba54:	ffff0f0f 	.word	0xffff0f0f

0800ba58 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b084      	sub	sp, #16
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800ba68:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800ba70:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ba78:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ba80:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800ba82:	683b      	ldr	r3, [r7, #0]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d110      	bne.n	800baaa <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ba88:	7bfb      	ldrb	r3, [r7, #15]
 800ba8a:	2b01      	cmp	r3, #1
 800ba8c:	d102      	bne.n	800ba94 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800ba8e:	7b7b      	ldrb	r3, [r7, #13]
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d001      	beq.n	800ba98 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800ba94:	2301      	movs	r3, #1
 800ba96:	e089      	b.n	800bbac <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	2202      	movs	r2, #2
 800ba9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	2202      	movs	r2, #2
 800baa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800baa8:	e031      	b.n	800bb0e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800baaa:	683b      	ldr	r3, [r7, #0]
 800baac:	2b04      	cmp	r3, #4
 800baae:	d110      	bne.n	800bad2 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bab0:	7bbb      	ldrb	r3, [r7, #14]
 800bab2:	2b01      	cmp	r3, #1
 800bab4:	d102      	bne.n	800babc <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bab6:	7b3b      	ldrb	r3, [r7, #12]
 800bab8:	2b01      	cmp	r3, #1
 800baba:	d001      	beq.n	800bac0 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800babc:	2301      	movs	r3, #1
 800babe:	e075      	b.n	800bbac <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2202      	movs	r2, #2
 800bac4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2202      	movs	r2, #2
 800bacc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bad0:	e01d      	b.n	800bb0e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bad2:	7bfb      	ldrb	r3, [r7, #15]
 800bad4:	2b01      	cmp	r3, #1
 800bad6:	d108      	bne.n	800baea <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bad8:	7bbb      	ldrb	r3, [r7, #14]
 800bada:	2b01      	cmp	r3, #1
 800badc:	d105      	bne.n	800baea <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bade:	7b7b      	ldrb	r3, [r7, #13]
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d102      	bne.n	800baea <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bae4:	7b3b      	ldrb	r3, [r7, #12]
 800bae6:	2b01      	cmp	r3, #1
 800bae8:	d001      	beq.n	800baee <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800baea:	2301      	movs	r3, #1
 800baec:	e05e      	b.n	800bbac <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2202      	movs	r2, #2
 800baf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	2202      	movs	r2, #2
 800bafa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2202      	movs	r2, #2
 800bb02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	2202      	movs	r2, #2
 800bb0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d003      	beq.n	800bb1c <HAL_TIM_Encoder_Start_IT+0xc4>
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	2b04      	cmp	r3, #4
 800bb18:	d010      	beq.n	800bb3c <HAL_TIM_Encoder_Start_IT+0xe4>
 800bb1a:	e01f      	b.n	800bb5c <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	2201      	movs	r2, #1
 800bb22:	2100      	movs	r1, #0
 800bb24:	4618      	mov	r0, r3
 800bb26:	f000 ff9b 	bl	800ca60 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	68da      	ldr	r2, [r3, #12]
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f042 0202 	orr.w	r2, r2, #2
 800bb38:	60da      	str	r2, [r3, #12]
      break;
 800bb3a:	e02e      	b.n	800bb9a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	2201      	movs	r2, #1
 800bb42:	2104      	movs	r1, #4
 800bb44:	4618      	mov	r0, r3
 800bb46:	f000 ff8b 	bl	800ca60 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	68da      	ldr	r2, [r3, #12]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	f042 0204 	orr.w	r2, r2, #4
 800bb58:	60da      	str	r2, [r3, #12]
      break;
 800bb5a:	e01e      	b.n	800bb9a <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	2201      	movs	r2, #1
 800bb62:	2100      	movs	r1, #0
 800bb64:	4618      	mov	r0, r3
 800bb66:	f000 ff7b 	bl	800ca60 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	2201      	movs	r2, #1
 800bb70:	2104      	movs	r1, #4
 800bb72:	4618      	mov	r0, r3
 800bb74:	f000 ff74 	bl	800ca60 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	68da      	ldr	r2, [r3, #12]
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	f042 0202 	orr.w	r2, r2, #2
 800bb86:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	68da      	ldr	r2, [r3, #12]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f042 0204 	orr.w	r2, r2, #4
 800bb96:	60da      	str	r2, [r3, #12]
      break;
 800bb98:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	681b      	ldr	r3, [r3, #0]
 800bb9e:	681a      	ldr	r2, [r3, #0]
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f042 0201 	orr.w	r2, r2, #1
 800bba8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bbaa:	2300      	movs	r3, #0
}
 800bbac:	4618      	mov	r0, r3
 800bbae:	3710      	adds	r7, #16
 800bbb0:	46bd      	mov	sp, r7
 800bbb2:	bd80      	pop	{r7, pc}

0800bbb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b084      	sub	sp, #16
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	68db      	ldr	r3, [r3, #12]
 800bbc2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	691b      	ldr	r3, [r3, #16]
 800bbca:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	f003 0302 	and.w	r3, r3, #2
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d020      	beq.n	800bc18 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	f003 0302 	and.w	r3, r3, #2
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d01b      	beq.n	800bc18 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	f06f 0202 	mvn.w	r2, #2
 800bbe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2201      	movs	r2, #1
 800bbee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	699b      	ldr	r3, [r3, #24]
 800bbf6:	f003 0303 	and.w	r3, r3, #3
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d003      	beq.n	800bc06 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f7f5 f960 	bl	8000ec4 <HAL_TIM_IC_CaptureCallback>
 800bc04:	e005      	b.n	800bc12 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 faf2 	bl	800c1f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc0c:	6878      	ldr	r0, [r7, #4]
 800bc0e:	f000 faf9 	bl	800c204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2200      	movs	r2, #0
 800bc16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	f003 0304 	and.w	r3, r3, #4
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d020      	beq.n	800bc64 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f003 0304 	and.w	r3, r3, #4
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d01b      	beq.n	800bc64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f06f 0204 	mvn.w	r2, #4
 800bc34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2202      	movs	r2, #2
 800bc3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	699b      	ldr	r3, [r3, #24]
 800bc42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d003      	beq.n	800bc52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f7f5 f93a 	bl	8000ec4 <HAL_TIM_IC_CaptureCallback>
 800bc50:	e005      	b.n	800bc5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 facc 	bl	800c1f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 fad3 	bl	800c204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2200      	movs	r2, #0
 800bc62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	f003 0308 	and.w	r3, r3, #8
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d020      	beq.n	800bcb0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	f003 0308 	and.w	r3, r3, #8
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d01b      	beq.n	800bcb0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	f06f 0208 	mvn.w	r2, #8
 800bc80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2204      	movs	r2, #4
 800bc86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	69db      	ldr	r3, [r3, #28]
 800bc8e:	f003 0303 	and.w	r3, r3, #3
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d003      	beq.n	800bc9e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f7f5 f914 	bl	8000ec4 <HAL_TIM_IC_CaptureCallback>
 800bc9c:	e005      	b.n	800bcaa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f000 faa6 	bl	800c1f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f000 faad 	bl	800c204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	2200      	movs	r2, #0
 800bcae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	f003 0310 	and.w	r3, r3, #16
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	d020      	beq.n	800bcfc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	f003 0310 	and.w	r3, r3, #16
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d01b      	beq.n	800bcfc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f06f 0210 	mvn.w	r2, #16
 800bccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2208      	movs	r2, #8
 800bcd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	69db      	ldr	r3, [r3, #28]
 800bcda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d003      	beq.n	800bcea <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bce2:	6878      	ldr	r0, [r7, #4]
 800bce4:	f7f5 f8ee 	bl	8000ec4 <HAL_TIM_IC_CaptureCallback>
 800bce8:	e005      	b.n	800bcf6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f000 fa80 	bl	800c1f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bcf0:	6878      	ldr	r0, [r7, #4]
 800bcf2:	f000 fa87 	bl	800c204 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bcfc:	68bb      	ldr	r3, [r7, #8]
 800bcfe:	f003 0301 	and.w	r3, r3, #1
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d00c      	beq.n	800bd20 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	f003 0301 	and.w	r3, r3, #1
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d007      	beq.n	800bd20 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f06f 0201 	mvn.w	r2, #1
 800bd18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 fa5e 	bl	800c1dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bd20:	68bb      	ldr	r3, [r7, #8]
 800bd22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d104      	bne.n	800bd34 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bd2a:	68bb      	ldr	r3, [r7, #8]
 800bd2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d00c      	beq.n	800bd4e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d007      	beq.n	800bd4e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bd46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f000 ff47 	bl	800cbdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d00c      	beq.n	800bd72 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d007      	beq.n	800bd72 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bd6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bd6c:	6878      	ldr	r0, [r7, #4]
 800bd6e:	f000 ff3f 	bl	800cbf0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bd72:	68bb      	ldr	r3, [r7, #8]
 800bd74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d00c      	beq.n	800bd96 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d007      	beq.n	800bd96 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bd8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f000 fa41 	bl	800c218 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	f003 0320 	and.w	r3, r3, #32
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d00c      	beq.n	800bdba <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	f003 0320 	and.w	r3, r3, #32
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d007      	beq.n	800bdba <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f06f 0220 	mvn.w	r2, #32
 800bdb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bdb4:	6878      	ldr	r0, [r7, #4]
 800bdb6:	f000 ff07 	bl	800cbc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bdba:	bf00      	nop
 800bdbc:	3710      	adds	r7, #16
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
	...

0800bdc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b086      	sub	sp, #24
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	60f8      	str	r0, [r7, #12]
 800bdcc:	60b9      	str	r1, [r7, #8]
 800bdce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bdda:	2b01      	cmp	r3, #1
 800bddc:	d101      	bne.n	800bde2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bdde:	2302      	movs	r3, #2
 800bde0:	e0ff      	b.n	800bfe2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	2201      	movs	r2, #1
 800bde6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2b14      	cmp	r3, #20
 800bdee:	f200 80f0 	bhi.w	800bfd2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bdf2:	a201      	add	r2, pc, #4	@ (adr r2, 800bdf8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bdf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdf8:	0800be4d 	.word	0x0800be4d
 800bdfc:	0800bfd3 	.word	0x0800bfd3
 800be00:	0800bfd3 	.word	0x0800bfd3
 800be04:	0800bfd3 	.word	0x0800bfd3
 800be08:	0800be8d 	.word	0x0800be8d
 800be0c:	0800bfd3 	.word	0x0800bfd3
 800be10:	0800bfd3 	.word	0x0800bfd3
 800be14:	0800bfd3 	.word	0x0800bfd3
 800be18:	0800becf 	.word	0x0800becf
 800be1c:	0800bfd3 	.word	0x0800bfd3
 800be20:	0800bfd3 	.word	0x0800bfd3
 800be24:	0800bfd3 	.word	0x0800bfd3
 800be28:	0800bf0f 	.word	0x0800bf0f
 800be2c:	0800bfd3 	.word	0x0800bfd3
 800be30:	0800bfd3 	.word	0x0800bfd3
 800be34:	0800bfd3 	.word	0x0800bfd3
 800be38:	0800bf51 	.word	0x0800bf51
 800be3c:	0800bfd3 	.word	0x0800bfd3
 800be40:	0800bfd3 	.word	0x0800bfd3
 800be44:	0800bfd3 	.word	0x0800bfd3
 800be48:	0800bf91 	.word	0x0800bf91
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	68b9      	ldr	r1, [r7, #8]
 800be52:	4618      	mov	r0, r3
 800be54:	f000 fa90 	bl	800c378 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	699a      	ldr	r2, [r3, #24]
 800be5e:	68fb      	ldr	r3, [r7, #12]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	f042 0208 	orr.w	r2, r2, #8
 800be66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	699a      	ldr	r2, [r3, #24]
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f022 0204 	bic.w	r2, r2, #4
 800be76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	6999      	ldr	r1, [r3, #24]
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	691a      	ldr	r2, [r3, #16]
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	430a      	orrs	r2, r1
 800be88:	619a      	str	r2, [r3, #24]
      break;
 800be8a:	e0a5      	b.n	800bfd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	68b9      	ldr	r1, [r7, #8]
 800be92:	4618      	mov	r0, r3
 800be94:	f000 fb00 	bl	800c498 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	699a      	ldr	r2, [r3, #24]
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	699a      	ldr	r2, [r3, #24]
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800beb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	6999      	ldr	r1, [r3, #24]
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	691b      	ldr	r3, [r3, #16]
 800bec2:	021a      	lsls	r2, r3, #8
 800bec4:	68fb      	ldr	r3, [r7, #12]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	430a      	orrs	r2, r1
 800beca:	619a      	str	r2, [r3, #24]
      break;
 800becc:	e084      	b.n	800bfd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	68b9      	ldr	r1, [r7, #8]
 800bed4:	4618      	mov	r0, r3
 800bed6:	f000 fb69 	bl	800c5ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	69da      	ldr	r2, [r3, #28]
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f042 0208 	orr.w	r2, r2, #8
 800bee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	69da      	ldr	r2, [r3, #28]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	f022 0204 	bic.w	r2, r2, #4
 800bef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	69d9      	ldr	r1, [r3, #28]
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	691a      	ldr	r2, [r3, #16]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	430a      	orrs	r2, r1
 800bf0a:	61da      	str	r2, [r3, #28]
      break;
 800bf0c:	e064      	b.n	800bfd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	68b9      	ldr	r1, [r7, #8]
 800bf14:	4618      	mov	r0, r3
 800bf16:	f000 fbd1 	bl	800c6bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	69da      	ldr	r2, [r3, #28]
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bf28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	69da      	ldr	r2, [r3, #28]
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bf38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	69d9      	ldr	r1, [r3, #28]
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	691b      	ldr	r3, [r3, #16]
 800bf44:	021a      	lsls	r2, r3, #8
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	681b      	ldr	r3, [r3, #0]
 800bf4a:	430a      	orrs	r2, r1
 800bf4c:	61da      	str	r2, [r3, #28]
      break;
 800bf4e:	e043      	b.n	800bfd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	68b9      	ldr	r1, [r7, #8]
 800bf56:	4618      	mov	r0, r3
 800bf58:	f000 fc1a 	bl	800c790 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	f042 0208 	orr.w	r2, r2, #8
 800bf6a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f022 0204 	bic.w	r2, r2, #4
 800bf7a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	691a      	ldr	r2, [r3, #16]
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	430a      	orrs	r2, r1
 800bf8c:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bf8e:	e023      	b.n	800bfd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	68b9      	ldr	r1, [r7, #8]
 800bf96:	4618      	mov	r0, r3
 800bf98:	f000 fc5e 	bl	800c858 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bfaa:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bfba:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	691b      	ldr	r3, [r3, #16]
 800bfc6:	021a      	lsls	r2, r3, #8
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	430a      	orrs	r2, r1
 800bfce:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bfd0:	e002      	b.n	800bfd8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	75fb      	strb	r3, [r7, #23]
      break;
 800bfd6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	2200      	movs	r2, #0
 800bfdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bfe0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3718      	adds	r7, #24
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}
 800bfea:	bf00      	nop

0800bfec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b084      	sub	sp, #16
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bff6:	2300      	movs	r3, #0
 800bff8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c000:	2b01      	cmp	r3, #1
 800c002:	d101      	bne.n	800c008 <HAL_TIM_ConfigClockSource+0x1c>
 800c004:	2302      	movs	r3, #2
 800c006:	e0dc      	b.n	800c1c2 <HAL_TIM_ConfigClockSource+0x1d6>
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2201      	movs	r2, #1
 800c00c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2202      	movs	r2, #2
 800c014:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	689b      	ldr	r3, [r3, #8]
 800c01e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c020:	68ba      	ldr	r2, [r7, #8]
 800c022:	4b6a      	ldr	r3, [pc, #424]	@ (800c1cc <HAL_TIM_ConfigClockSource+0x1e0>)
 800c024:	4013      	ands	r3, r2
 800c026:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c028:	68bb      	ldr	r3, [r7, #8]
 800c02a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c02e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	68ba      	ldr	r2, [r7, #8]
 800c036:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	4a64      	ldr	r2, [pc, #400]	@ (800c1d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c03e:	4293      	cmp	r3, r2
 800c040:	f000 80a9 	beq.w	800c196 <HAL_TIM_ConfigClockSource+0x1aa>
 800c044:	4a62      	ldr	r2, [pc, #392]	@ (800c1d0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c046:	4293      	cmp	r3, r2
 800c048:	f200 80ae 	bhi.w	800c1a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c04c:	4a61      	ldr	r2, [pc, #388]	@ (800c1d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	f000 80a1 	beq.w	800c196 <HAL_TIM_ConfigClockSource+0x1aa>
 800c054:	4a5f      	ldr	r2, [pc, #380]	@ (800c1d4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c056:	4293      	cmp	r3, r2
 800c058:	f200 80a6 	bhi.w	800c1a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c05c:	4a5e      	ldr	r2, [pc, #376]	@ (800c1d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c05e:	4293      	cmp	r3, r2
 800c060:	f000 8099 	beq.w	800c196 <HAL_TIM_ConfigClockSource+0x1aa>
 800c064:	4a5c      	ldr	r2, [pc, #368]	@ (800c1d8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c066:	4293      	cmp	r3, r2
 800c068:	f200 809e 	bhi.w	800c1a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c06c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c070:	f000 8091 	beq.w	800c196 <HAL_TIM_ConfigClockSource+0x1aa>
 800c074:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c078:	f200 8096 	bhi.w	800c1a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c07c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c080:	f000 8089 	beq.w	800c196 <HAL_TIM_ConfigClockSource+0x1aa>
 800c084:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c088:	f200 808e 	bhi.w	800c1a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c08c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c090:	d03e      	beq.n	800c110 <HAL_TIM_ConfigClockSource+0x124>
 800c092:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c096:	f200 8087 	bhi.w	800c1a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c09a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c09e:	f000 8086 	beq.w	800c1ae <HAL_TIM_ConfigClockSource+0x1c2>
 800c0a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c0a6:	d87f      	bhi.n	800c1a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c0a8:	2b70      	cmp	r3, #112	@ 0x70
 800c0aa:	d01a      	beq.n	800c0e2 <HAL_TIM_ConfigClockSource+0xf6>
 800c0ac:	2b70      	cmp	r3, #112	@ 0x70
 800c0ae:	d87b      	bhi.n	800c1a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c0b0:	2b60      	cmp	r3, #96	@ 0x60
 800c0b2:	d050      	beq.n	800c156 <HAL_TIM_ConfigClockSource+0x16a>
 800c0b4:	2b60      	cmp	r3, #96	@ 0x60
 800c0b6:	d877      	bhi.n	800c1a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c0b8:	2b50      	cmp	r3, #80	@ 0x50
 800c0ba:	d03c      	beq.n	800c136 <HAL_TIM_ConfigClockSource+0x14a>
 800c0bc:	2b50      	cmp	r3, #80	@ 0x50
 800c0be:	d873      	bhi.n	800c1a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c0c0:	2b40      	cmp	r3, #64	@ 0x40
 800c0c2:	d058      	beq.n	800c176 <HAL_TIM_ConfigClockSource+0x18a>
 800c0c4:	2b40      	cmp	r3, #64	@ 0x40
 800c0c6:	d86f      	bhi.n	800c1a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c0c8:	2b30      	cmp	r3, #48	@ 0x30
 800c0ca:	d064      	beq.n	800c196 <HAL_TIM_ConfigClockSource+0x1aa>
 800c0cc:	2b30      	cmp	r3, #48	@ 0x30
 800c0ce:	d86b      	bhi.n	800c1a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c0d0:	2b20      	cmp	r3, #32
 800c0d2:	d060      	beq.n	800c196 <HAL_TIM_ConfigClockSource+0x1aa>
 800c0d4:	2b20      	cmp	r3, #32
 800c0d6:	d867      	bhi.n	800c1a8 <HAL_TIM_ConfigClockSource+0x1bc>
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d05c      	beq.n	800c196 <HAL_TIM_ConfigClockSource+0x1aa>
 800c0dc:	2b10      	cmp	r3, #16
 800c0de:	d05a      	beq.n	800c196 <HAL_TIM_ConfigClockSource+0x1aa>
 800c0e0:	e062      	b.n	800c1a8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c0f2:	f000 fc95 	bl	800ca20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	689b      	ldr	r3, [r3, #8]
 800c0fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c104:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	68ba      	ldr	r2, [r7, #8]
 800c10c:	609a      	str	r2, [r3, #8]
      break;
 800c10e:	e04f      	b.n	800c1b0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c114:	683b      	ldr	r3, [r7, #0]
 800c116:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c120:	f000 fc7e 	bl	800ca20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	689a      	ldr	r2, [r3, #8]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c132:	609a      	str	r2, [r3, #8]
      break;
 800c134:	e03c      	b.n	800c1b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c142:	461a      	mov	r2, r3
 800c144:	f000 fbee 	bl	800c924 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	2150      	movs	r1, #80	@ 0x50
 800c14e:	4618      	mov	r0, r3
 800c150:	f000 fc48 	bl	800c9e4 <TIM_ITRx_SetConfig>
      break;
 800c154:	e02c      	b.n	800c1b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c162:	461a      	mov	r2, r3
 800c164:	f000 fc0d 	bl	800c982 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	2160      	movs	r1, #96	@ 0x60
 800c16e:	4618      	mov	r0, r3
 800c170:	f000 fc38 	bl	800c9e4 <TIM_ITRx_SetConfig>
      break;
 800c174:	e01c      	b.n	800c1b0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c182:	461a      	mov	r2, r3
 800c184:	f000 fbce 	bl	800c924 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	2140      	movs	r1, #64	@ 0x40
 800c18e:	4618      	mov	r0, r3
 800c190:	f000 fc28 	bl	800c9e4 <TIM_ITRx_SetConfig>
      break;
 800c194:	e00c      	b.n	800c1b0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681a      	ldr	r2, [r3, #0]
 800c19a:	683b      	ldr	r3, [r7, #0]
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	4619      	mov	r1, r3
 800c1a0:	4610      	mov	r0, r2
 800c1a2:	f000 fc1f 	bl	800c9e4 <TIM_ITRx_SetConfig>
      break;
 800c1a6:	e003      	b.n	800c1b0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	73fb      	strb	r3, [r7, #15]
      break;
 800c1ac:	e000      	b.n	800c1b0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c1ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c1c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3710      	adds	r7, #16
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}
 800c1ca:	bf00      	nop
 800c1cc:	ffceff88 	.word	0xffceff88
 800c1d0:	00100040 	.word	0x00100040
 800c1d4:	00100030 	.word	0x00100030
 800c1d8:	00100020 	.word	0x00100020

0800c1dc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	b083      	sub	sp, #12
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c1e4:	bf00      	nop
 800c1e6:	370c      	adds	r7, #12
 800c1e8:	46bd      	mov	sp, r7
 800c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ee:	4770      	bx	lr

0800c1f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b083      	sub	sp, #12
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c1f8:	bf00      	nop
 800c1fa:	370c      	adds	r7, #12
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c202:	4770      	bx	lr

0800c204 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c20c:	bf00      	nop
 800c20e:	370c      	adds	r7, #12
 800c210:	46bd      	mov	sp, r7
 800c212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c216:	4770      	bx	lr

0800c218 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c218:	b480      	push	{r7}
 800c21a:	b083      	sub	sp, #12
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c220:	bf00      	nop
 800c222:	370c      	adds	r7, #12
 800c224:	46bd      	mov	sp, r7
 800c226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22a:	4770      	bx	lr

0800c22c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c22c:	b480      	push	{r7}
 800c22e:	b085      	sub	sp, #20
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
 800c234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	4a46      	ldr	r2, [pc, #280]	@ (800c358 <TIM_Base_SetConfig+0x12c>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d013      	beq.n	800c26c <TIM_Base_SetConfig+0x40>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c24a:	d00f      	beq.n	800c26c <TIM_Base_SetConfig+0x40>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	4a43      	ldr	r2, [pc, #268]	@ (800c35c <TIM_Base_SetConfig+0x130>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d00b      	beq.n	800c26c <TIM_Base_SetConfig+0x40>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	4a42      	ldr	r2, [pc, #264]	@ (800c360 <TIM_Base_SetConfig+0x134>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d007      	beq.n	800c26c <TIM_Base_SetConfig+0x40>
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	4a41      	ldr	r2, [pc, #260]	@ (800c364 <TIM_Base_SetConfig+0x138>)
 800c260:	4293      	cmp	r3, r2
 800c262:	d003      	beq.n	800c26c <TIM_Base_SetConfig+0x40>
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	4a40      	ldr	r2, [pc, #256]	@ (800c368 <TIM_Base_SetConfig+0x13c>)
 800c268:	4293      	cmp	r3, r2
 800c26a:	d108      	bne.n	800c27e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	685b      	ldr	r3, [r3, #4]
 800c278:	68fa      	ldr	r2, [r7, #12]
 800c27a:	4313      	orrs	r3, r2
 800c27c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	4a35      	ldr	r2, [pc, #212]	@ (800c358 <TIM_Base_SetConfig+0x12c>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d01f      	beq.n	800c2c6 <TIM_Base_SetConfig+0x9a>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c28c:	d01b      	beq.n	800c2c6 <TIM_Base_SetConfig+0x9a>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	4a32      	ldr	r2, [pc, #200]	@ (800c35c <TIM_Base_SetConfig+0x130>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d017      	beq.n	800c2c6 <TIM_Base_SetConfig+0x9a>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	4a31      	ldr	r2, [pc, #196]	@ (800c360 <TIM_Base_SetConfig+0x134>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d013      	beq.n	800c2c6 <TIM_Base_SetConfig+0x9a>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	4a30      	ldr	r2, [pc, #192]	@ (800c364 <TIM_Base_SetConfig+0x138>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d00f      	beq.n	800c2c6 <TIM_Base_SetConfig+0x9a>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	4a2f      	ldr	r2, [pc, #188]	@ (800c368 <TIM_Base_SetConfig+0x13c>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d00b      	beq.n	800c2c6 <TIM_Base_SetConfig+0x9a>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	4a2e      	ldr	r2, [pc, #184]	@ (800c36c <TIM_Base_SetConfig+0x140>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d007      	beq.n	800c2c6 <TIM_Base_SetConfig+0x9a>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	4a2d      	ldr	r2, [pc, #180]	@ (800c370 <TIM_Base_SetConfig+0x144>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d003      	beq.n	800c2c6 <TIM_Base_SetConfig+0x9a>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	4a2c      	ldr	r2, [pc, #176]	@ (800c374 <TIM_Base_SetConfig+0x148>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d108      	bne.n	800c2d8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c2cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2ce:	683b      	ldr	r3, [r7, #0]
 800c2d0:	68db      	ldr	r3, [r3, #12]
 800c2d2:	68fa      	ldr	r2, [r7, #12]
 800c2d4:	4313      	orrs	r3, r2
 800c2d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	695b      	ldr	r3, [r3, #20]
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	68fa      	ldr	r2, [r7, #12]
 800c2ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c2ec:	683b      	ldr	r3, [r7, #0]
 800c2ee:	689a      	ldr	r2, [r3, #8]
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	681a      	ldr	r2, [r3, #0]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	4a16      	ldr	r2, [pc, #88]	@ (800c358 <TIM_Base_SetConfig+0x12c>)
 800c300:	4293      	cmp	r3, r2
 800c302:	d00f      	beq.n	800c324 <TIM_Base_SetConfig+0xf8>
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	4a18      	ldr	r2, [pc, #96]	@ (800c368 <TIM_Base_SetConfig+0x13c>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d00b      	beq.n	800c324 <TIM_Base_SetConfig+0xf8>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	4a17      	ldr	r2, [pc, #92]	@ (800c36c <TIM_Base_SetConfig+0x140>)
 800c310:	4293      	cmp	r3, r2
 800c312:	d007      	beq.n	800c324 <TIM_Base_SetConfig+0xf8>
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	4a16      	ldr	r2, [pc, #88]	@ (800c370 <TIM_Base_SetConfig+0x144>)
 800c318:	4293      	cmp	r3, r2
 800c31a:	d003      	beq.n	800c324 <TIM_Base_SetConfig+0xf8>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	4a15      	ldr	r2, [pc, #84]	@ (800c374 <TIM_Base_SetConfig+0x148>)
 800c320:	4293      	cmp	r3, r2
 800c322:	d103      	bne.n	800c32c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	691a      	ldr	r2, [r3, #16]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2201      	movs	r2, #1
 800c330:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	691b      	ldr	r3, [r3, #16]
 800c336:	f003 0301 	and.w	r3, r3, #1
 800c33a:	2b01      	cmp	r3, #1
 800c33c:	d105      	bne.n	800c34a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	691b      	ldr	r3, [r3, #16]
 800c342:	f023 0201 	bic.w	r2, r3, #1
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	611a      	str	r2, [r3, #16]
  }
}
 800c34a:	bf00      	nop
 800c34c:	3714      	adds	r7, #20
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr
 800c356:	bf00      	nop
 800c358:	40010000 	.word	0x40010000
 800c35c:	40000400 	.word	0x40000400
 800c360:	40000800 	.word	0x40000800
 800c364:	40000c00 	.word	0x40000c00
 800c368:	40010400 	.word	0x40010400
 800c36c:	40014000 	.word	0x40014000
 800c370:	40014400 	.word	0x40014400
 800c374:	40014800 	.word	0x40014800

0800c378 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c378:	b480      	push	{r7}
 800c37a:	b087      	sub	sp, #28
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6a1b      	ldr	r3, [r3, #32]
 800c386:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6a1b      	ldr	r3, [r3, #32]
 800c38c:	f023 0201 	bic.w	r2, r3, #1
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	699b      	ldr	r3, [r3, #24]
 800c39e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c3a0:	68fa      	ldr	r2, [r7, #12]
 800c3a2:	4b37      	ldr	r3, [pc, #220]	@ (800c480 <TIM_OC1_SetConfig+0x108>)
 800c3a4:	4013      	ands	r3, r2
 800c3a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f023 0303 	bic.w	r3, r3, #3
 800c3ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	68fa      	ldr	r2, [r7, #12]
 800c3b6:	4313      	orrs	r3, r2
 800c3b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c3ba:	697b      	ldr	r3, [r7, #20]
 800c3bc:	f023 0302 	bic.w	r3, r3, #2
 800c3c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c3c2:	683b      	ldr	r3, [r7, #0]
 800c3c4:	689b      	ldr	r3, [r3, #8]
 800c3c6:	697a      	ldr	r2, [r7, #20]
 800c3c8:	4313      	orrs	r3, r2
 800c3ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	4a2d      	ldr	r2, [pc, #180]	@ (800c484 <TIM_OC1_SetConfig+0x10c>)
 800c3d0:	4293      	cmp	r3, r2
 800c3d2:	d00f      	beq.n	800c3f4 <TIM_OC1_SetConfig+0x7c>
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	4a2c      	ldr	r2, [pc, #176]	@ (800c488 <TIM_OC1_SetConfig+0x110>)
 800c3d8:	4293      	cmp	r3, r2
 800c3da:	d00b      	beq.n	800c3f4 <TIM_OC1_SetConfig+0x7c>
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	4a2b      	ldr	r2, [pc, #172]	@ (800c48c <TIM_OC1_SetConfig+0x114>)
 800c3e0:	4293      	cmp	r3, r2
 800c3e2:	d007      	beq.n	800c3f4 <TIM_OC1_SetConfig+0x7c>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	4a2a      	ldr	r2, [pc, #168]	@ (800c490 <TIM_OC1_SetConfig+0x118>)
 800c3e8:	4293      	cmp	r3, r2
 800c3ea:	d003      	beq.n	800c3f4 <TIM_OC1_SetConfig+0x7c>
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	4a29      	ldr	r2, [pc, #164]	@ (800c494 <TIM_OC1_SetConfig+0x11c>)
 800c3f0:	4293      	cmp	r3, r2
 800c3f2:	d10c      	bne.n	800c40e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c3f4:	697b      	ldr	r3, [r7, #20]
 800c3f6:	f023 0308 	bic.w	r3, r3, #8
 800c3fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	68db      	ldr	r3, [r3, #12]
 800c400:	697a      	ldr	r2, [r7, #20]
 800c402:	4313      	orrs	r3, r2
 800c404:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	f023 0304 	bic.w	r3, r3, #4
 800c40c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	4a1c      	ldr	r2, [pc, #112]	@ (800c484 <TIM_OC1_SetConfig+0x10c>)
 800c412:	4293      	cmp	r3, r2
 800c414:	d00f      	beq.n	800c436 <TIM_OC1_SetConfig+0xbe>
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	4a1b      	ldr	r2, [pc, #108]	@ (800c488 <TIM_OC1_SetConfig+0x110>)
 800c41a:	4293      	cmp	r3, r2
 800c41c:	d00b      	beq.n	800c436 <TIM_OC1_SetConfig+0xbe>
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	4a1a      	ldr	r2, [pc, #104]	@ (800c48c <TIM_OC1_SetConfig+0x114>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d007      	beq.n	800c436 <TIM_OC1_SetConfig+0xbe>
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	4a19      	ldr	r2, [pc, #100]	@ (800c490 <TIM_OC1_SetConfig+0x118>)
 800c42a:	4293      	cmp	r3, r2
 800c42c:	d003      	beq.n	800c436 <TIM_OC1_SetConfig+0xbe>
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	4a18      	ldr	r2, [pc, #96]	@ (800c494 <TIM_OC1_SetConfig+0x11c>)
 800c432:	4293      	cmp	r3, r2
 800c434:	d111      	bne.n	800c45a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c436:	693b      	ldr	r3, [r7, #16]
 800c438:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c43c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c444:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c446:	683b      	ldr	r3, [r7, #0]
 800c448:	695b      	ldr	r3, [r3, #20]
 800c44a:	693a      	ldr	r2, [r7, #16]
 800c44c:	4313      	orrs	r3, r2
 800c44e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	699b      	ldr	r3, [r3, #24]
 800c454:	693a      	ldr	r2, [r7, #16]
 800c456:	4313      	orrs	r3, r2
 800c458:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	693a      	ldr	r2, [r7, #16]
 800c45e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	68fa      	ldr	r2, [r7, #12]
 800c464:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	685a      	ldr	r2, [r3, #4]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	697a      	ldr	r2, [r7, #20]
 800c472:	621a      	str	r2, [r3, #32]
}
 800c474:	bf00      	nop
 800c476:	371c      	adds	r7, #28
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr
 800c480:	fffeff8f 	.word	0xfffeff8f
 800c484:	40010000 	.word	0x40010000
 800c488:	40010400 	.word	0x40010400
 800c48c:	40014000 	.word	0x40014000
 800c490:	40014400 	.word	0x40014400
 800c494:	40014800 	.word	0x40014800

0800c498 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c498:	b480      	push	{r7}
 800c49a:	b087      	sub	sp, #28
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
 800c4a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6a1b      	ldr	r3, [r3, #32]
 800c4a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6a1b      	ldr	r3, [r3, #32]
 800c4ac:	f023 0210 	bic.w	r2, r3, #16
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	685b      	ldr	r3, [r3, #4]
 800c4b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	699b      	ldr	r3, [r3, #24]
 800c4be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c4c0:	68fa      	ldr	r2, [r7, #12]
 800c4c2:	4b34      	ldr	r3, [pc, #208]	@ (800c594 <TIM_OC2_SetConfig+0xfc>)
 800c4c4:	4013      	ands	r3, r2
 800c4c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c4ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	021b      	lsls	r3, r3, #8
 800c4d6:	68fa      	ldr	r2, [r7, #12]
 800c4d8:	4313      	orrs	r3, r2
 800c4da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c4dc:	697b      	ldr	r3, [r7, #20]
 800c4de:	f023 0320 	bic.w	r3, r3, #32
 800c4e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c4e4:	683b      	ldr	r3, [r7, #0]
 800c4e6:	689b      	ldr	r3, [r3, #8]
 800c4e8:	011b      	lsls	r3, r3, #4
 800c4ea:	697a      	ldr	r2, [r7, #20]
 800c4ec:	4313      	orrs	r3, r2
 800c4ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	4a29      	ldr	r2, [pc, #164]	@ (800c598 <TIM_OC2_SetConfig+0x100>)
 800c4f4:	4293      	cmp	r3, r2
 800c4f6:	d003      	beq.n	800c500 <TIM_OC2_SetConfig+0x68>
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	4a28      	ldr	r2, [pc, #160]	@ (800c59c <TIM_OC2_SetConfig+0x104>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d10d      	bne.n	800c51c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c500:	697b      	ldr	r3, [r7, #20]
 800c502:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c506:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	68db      	ldr	r3, [r3, #12]
 800c50c:	011b      	lsls	r3, r3, #4
 800c50e:	697a      	ldr	r2, [r7, #20]
 800c510:	4313      	orrs	r3, r2
 800c512:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c514:	697b      	ldr	r3, [r7, #20]
 800c516:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c51a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	4a1e      	ldr	r2, [pc, #120]	@ (800c598 <TIM_OC2_SetConfig+0x100>)
 800c520:	4293      	cmp	r3, r2
 800c522:	d00f      	beq.n	800c544 <TIM_OC2_SetConfig+0xac>
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	4a1d      	ldr	r2, [pc, #116]	@ (800c59c <TIM_OC2_SetConfig+0x104>)
 800c528:	4293      	cmp	r3, r2
 800c52a:	d00b      	beq.n	800c544 <TIM_OC2_SetConfig+0xac>
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	4a1c      	ldr	r2, [pc, #112]	@ (800c5a0 <TIM_OC2_SetConfig+0x108>)
 800c530:	4293      	cmp	r3, r2
 800c532:	d007      	beq.n	800c544 <TIM_OC2_SetConfig+0xac>
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	4a1b      	ldr	r2, [pc, #108]	@ (800c5a4 <TIM_OC2_SetConfig+0x10c>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d003      	beq.n	800c544 <TIM_OC2_SetConfig+0xac>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	4a1a      	ldr	r2, [pc, #104]	@ (800c5a8 <TIM_OC2_SetConfig+0x110>)
 800c540:	4293      	cmp	r3, r2
 800c542:	d113      	bne.n	800c56c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c544:	693b      	ldr	r3, [r7, #16]
 800c546:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c54a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c552:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	695b      	ldr	r3, [r3, #20]
 800c558:	009b      	lsls	r3, r3, #2
 800c55a:	693a      	ldr	r2, [r7, #16]
 800c55c:	4313      	orrs	r3, r2
 800c55e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c560:	683b      	ldr	r3, [r7, #0]
 800c562:	699b      	ldr	r3, [r3, #24]
 800c564:	009b      	lsls	r3, r3, #2
 800c566:	693a      	ldr	r2, [r7, #16]
 800c568:	4313      	orrs	r3, r2
 800c56a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	693a      	ldr	r2, [r7, #16]
 800c570:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	68fa      	ldr	r2, [r7, #12]
 800c576:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	685a      	ldr	r2, [r3, #4]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	697a      	ldr	r2, [r7, #20]
 800c584:	621a      	str	r2, [r3, #32]
}
 800c586:	bf00      	nop
 800c588:	371c      	adds	r7, #28
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr
 800c592:	bf00      	nop
 800c594:	feff8fff 	.word	0xfeff8fff
 800c598:	40010000 	.word	0x40010000
 800c59c:	40010400 	.word	0x40010400
 800c5a0:	40014000 	.word	0x40014000
 800c5a4:	40014400 	.word	0x40014400
 800c5a8:	40014800 	.word	0x40014800

0800c5ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b087      	sub	sp, #28
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
 800c5b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6a1b      	ldr	r3, [r3, #32]
 800c5ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6a1b      	ldr	r3, [r3, #32]
 800c5c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	685b      	ldr	r3, [r3, #4]
 800c5cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	69db      	ldr	r3, [r3, #28]
 800c5d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c5d4:	68fa      	ldr	r2, [r7, #12]
 800c5d6:	4b33      	ldr	r3, [pc, #204]	@ (800c6a4 <TIM_OC3_SetConfig+0xf8>)
 800c5d8:	4013      	ands	r3, r2
 800c5da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f023 0303 	bic.w	r3, r3, #3
 800c5e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	68fa      	ldr	r2, [r7, #12]
 800c5ea:	4313      	orrs	r3, r2
 800c5ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c5f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	689b      	ldr	r3, [r3, #8]
 800c5fa:	021b      	lsls	r3, r3, #8
 800c5fc:	697a      	ldr	r2, [r7, #20]
 800c5fe:	4313      	orrs	r3, r2
 800c600:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	4a28      	ldr	r2, [pc, #160]	@ (800c6a8 <TIM_OC3_SetConfig+0xfc>)
 800c606:	4293      	cmp	r3, r2
 800c608:	d003      	beq.n	800c612 <TIM_OC3_SetConfig+0x66>
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	4a27      	ldr	r2, [pc, #156]	@ (800c6ac <TIM_OC3_SetConfig+0x100>)
 800c60e:	4293      	cmp	r3, r2
 800c610:	d10d      	bne.n	800c62e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c612:	697b      	ldr	r3, [r7, #20]
 800c614:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c618:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c61a:	683b      	ldr	r3, [r7, #0]
 800c61c:	68db      	ldr	r3, [r3, #12]
 800c61e:	021b      	lsls	r3, r3, #8
 800c620:	697a      	ldr	r2, [r7, #20]
 800c622:	4313      	orrs	r3, r2
 800c624:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c62c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	4a1d      	ldr	r2, [pc, #116]	@ (800c6a8 <TIM_OC3_SetConfig+0xfc>)
 800c632:	4293      	cmp	r3, r2
 800c634:	d00f      	beq.n	800c656 <TIM_OC3_SetConfig+0xaa>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	4a1c      	ldr	r2, [pc, #112]	@ (800c6ac <TIM_OC3_SetConfig+0x100>)
 800c63a:	4293      	cmp	r3, r2
 800c63c:	d00b      	beq.n	800c656 <TIM_OC3_SetConfig+0xaa>
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	4a1b      	ldr	r2, [pc, #108]	@ (800c6b0 <TIM_OC3_SetConfig+0x104>)
 800c642:	4293      	cmp	r3, r2
 800c644:	d007      	beq.n	800c656 <TIM_OC3_SetConfig+0xaa>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	4a1a      	ldr	r2, [pc, #104]	@ (800c6b4 <TIM_OC3_SetConfig+0x108>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d003      	beq.n	800c656 <TIM_OC3_SetConfig+0xaa>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	4a19      	ldr	r2, [pc, #100]	@ (800c6b8 <TIM_OC3_SetConfig+0x10c>)
 800c652:	4293      	cmp	r3, r2
 800c654:	d113      	bne.n	800c67e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c656:	693b      	ldr	r3, [r7, #16]
 800c658:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c65c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c664:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c666:	683b      	ldr	r3, [r7, #0]
 800c668:	695b      	ldr	r3, [r3, #20]
 800c66a:	011b      	lsls	r3, r3, #4
 800c66c:	693a      	ldr	r2, [r7, #16]
 800c66e:	4313      	orrs	r3, r2
 800c670:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	699b      	ldr	r3, [r3, #24]
 800c676:	011b      	lsls	r3, r3, #4
 800c678:	693a      	ldr	r2, [r7, #16]
 800c67a:	4313      	orrs	r3, r2
 800c67c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	693a      	ldr	r2, [r7, #16]
 800c682:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	68fa      	ldr	r2, [r7, #12]
 800c688:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	685a      	ldr	r2, [r3, #4]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	697a      	ldr	r2, [r7, #20]
 800c696:	621a      	str	r2, [r3, #32]
}
 800c698:	bf00      	nop
 800c69a:	371c      	adds	r7, #28
 800c69c:	46bd      	mov	sp, r7
 800c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a2:	4770      	bx	lr
 800c6a4:	fffeff8f 	.word	0xfffeff8f
 800c6a8:	40010000 	.word	0x40010000
 800c6ac:	40010400 	.word	0x40010400
 800c6b0:	40014000 	.word	0x40014000
 800c6b4:	40014400 	.word	0x40014400
 800c6b8:	40014800 	.word	0x40014800

0800c6bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c6bc:	b480      	push	{r7}
 800c6be:	b087      	sub	sp, #28
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
 800c6c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6a1b      	ldr	r3, [r3, #32]
 800c6ca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6a1b      	ldr	r3, [r3, #32]
 800c6d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	685b      	ldr	r3, [r3, #4]
 800c6dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	69db      	ldr	r3, [r3, #28]
 800c6e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c6e4:	68fa      	ldr	r2, [r7, #12]
 800c6e6:	4b24      	ldr	r3, [pc, #144]	@ (800c778 <TIM_OC4_SetConfig+0xbc>)
 800c6e8:	4013      	ands	r3, r2
 800c6ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c6f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	021b      	lsls	r3, r3, #8
 800c6fa:	68fa      	ldr	r2, [r7, #12]
 800c6fc:	4313      	orrs	r3, r2
 800c6fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c706:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	689b      	ldr	r3, [r3, #8]
 800c70c:	031b      	lsls	r3, r3, #12
 800c70e:	693a      	ldr	r2, [r7, #16]
 800c710:	4313      	orrs	r3, r2
 800c712:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	4a19      	ldr	r2, [pc, #100]	@ (800c77c <TIM_OC4_SetConfig+0xc0>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d00f      	beq.n	800c73c <TIM_OC4_SetConfig+0x80>
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	4a18      	ldr	r2, [pc, #96]	@ (800c780 <TIM_OC4_SetConfig+0xc4>)
 800c720:	4293      	cmp	r3, r2
 800c722:	d00b      	beq.n	800c73c <TIM_OC4_SetConfig+0x80>
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	4a17      	ldr	r2, [pc, #92]	@ (800c784 <TIM_OC4_SetConfig+0xc8>)
 800c728:	4293      	cmp	r3, r2
 800c72a:	d007      	beq.n	800c73c <TIM_OC4_SetConfig+0x80>
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	4a16      	ldr	r2, [pc, #88]	@ (800c788 <TIM_OC4_SetConfig+0xcc>)
 800c730:	4293      	cmp	r3, r2
 800c732:	d003      	beq.n	800c73c <TIM_OC4_SetConfig+0x80>
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	4a15      	ldr	r2, [pc, #84]	@ (800c78c <TIM_OC4_SetConfig+0xd0>)
 800c738:	4293      	cmp	r3, r2
 800c73a:	d109      	bne.n	800c750 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c742:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	695b      	ldr	r3, [r3, #20]
 800c748:	019b      	lsls	r3, r3, #6
 800c74a:	697a      	ldr	r2, [r7, #20]
 800c74c:	4313      	orrs	r3, r2
 800c74e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	697a      	ldr	r2, [r7, #20]
 800c754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	68fa      	ldr	r2, [r7, #12]
 800c75a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	685a      	ldr	r2, [r3, #4]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	693a      	ldr	r2, [r7, #16]
 800c768:	621a      	str	r2, [r3, #32]
}
 800c76a:	bf00      	nop
 800c76c:	371c      	adds	r7, #28
 800c76e:	46bd      	mov	sp, r7
 800c770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c774:	4770      	bx	lr
 800c776:	bf00      	nop
 800c778:	feff8fff 	.word	0xfeff8fff
 800c77c:	40010000 	.word	0x40010000
 800c780:	40010400 	.word	0x40010400
 800c784:	40014000 	.word	0x40014000
 800c788:	40014400 	.word	0x40014400
 800c78c:	40014800 	.word	0x40014800

0800c790 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c790:	b480      	push	{r7}
 800c792:	b087      	sub	sp, #28
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
 800c798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	6a1b      	ldr	r3, [r3, #32]
 800c79e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6a1b      	ldr	r3, [r3, #32]
 800c7a4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	685b      	ldr	r3, [r3, #4]
 800c7b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c7b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c7b8:	68fa      	ldr	r2, [r7, #12]
 800c7ba:	4b21      	ldr	r3, [pc, #132]	@ (800c840 <TIM_OC5_SetConfig+0xb0>)
 800c7bc:	4013      	ands	r3, r2
 800c7be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c7c0:	683b      	ldr	r3, [r7, #0]
 800c7c2:	681b      	ldr	r3, [r3, #0]
 800c7c4:	68fa      	ldr	r2, [r7, #12]
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c7ca:	693b      	ldr	r3, [r7, #16]
 800c7cc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c7d0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c7d2:	683b      	ldr	r3, [r7, #0]
 800c7d4:	689b      	ldr	r3, [r3, #8]
 800c7d6:	041b      	lsls	r3, r3, #16
 800c7d8:	693a      	ldr	r2, [r7, #16]
 800c7da:	4313      	orrs	r3, r2
 800c7dc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	4a18      	ldr	r2, [pc, #96]	@ (800c844 <TIM_OC5_SetConfig+0xb4>)
 800c7e2:	4293      	cmp	r3, r2
 800c7e4:	d00f      	beq.n	800c806 <TIM_OC5_SetConfig+0x76>
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	4a17      	ldr	r2, [pc, #92]	@ (800c848 <TIM_OC5_SetConfig+0xb8>)
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d00b      	beq.n	800c806 <TIM_OC5_SetConfig+0x76>
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	4a16      	ldr	r2, [pc, #88]	@ (800c84c <TIM_OC5_SetConfig+0xbc>)
 800c7f2:	4293      	cmp	r3, r2
 800c7f4:	d007      	beq.n	800c806 <TIM_OC5_SetConfig+0x76>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	4a15      	ldr	r2, [pc, #84]	@ (800c850 <TIM_OC5_SetConfig+0xc0>)
 800c7fa:	4293      	cmp	r3, r2
 800c7fc:	d003      	beq.n	800c806 <TIM_OC5_SetConfig+0x76>
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	4a14      	ldr	r2, [pc, #80]	@ (800c854 <TIM_OC5_SetConfig+0xc4>)
 800c802:	4293      	cmp	r3, r2
 800c804:	d109      	bne.n	800c81a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c806:	697b      	ldr	r3, [r7, #20]
 800c808:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c80c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c80e:	683b      	ldr	r3, [r7, #0]
 800c810:	695b      	ldr	r3, [r3, #20]
 800c812:	021b      	lsls	r3, r3, #8
 800c814:	697a      	ldr	r2, [r7, #20]
 800c816:	4313      	orrs	r3, r2
 800c818:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	697a      	ldr	r2, [r7, #20]
 800c81e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	68fa      	ldr	r2, [r7, #12]
 800c824:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c826:	683b      	ldr	r3, [r7, #0]
 800c828:	685a      	ldr	r2, [r3, #4]
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	693a      	ldr	r2, [r7, #16]
 800c832:	621a      	str	r2, [r3, #32]
}
 800c834:	bf00      	nop
 800c836:	371c      	adds	r7, #28
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr
 800c840:	fffeff8f 	.word	0xfffeff8f
 800c844:	40010000 	.word	0x40010000
 800c848:	40010400 	.word	0x40010400
 800c84c:	40014000 	.word	0x40014000
 800c850:	40014400 	.word	0x40014400
 800c854:	40014800 	.word	0x40014800

0800c858 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c858:	b480      	push	{r7}
 800c85a:	b087      	sub	sp, #28
 800c85c:	af00      	add	r7, sp, #0
 800c85e:	6078      	str	r0, [r7, #4]
 800c860:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6a1b      	ldr	r3, [r3, #32]
 800c866:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	6a1b      	ldr	r3, [r3, #32]
 800c86c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	685b      	ldr	r3, [r3, #4]
 800c878:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c87e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c880:	68fa      	ldr	r2, [r7, #12]
 800c882:	4b22      	ldr	r3, [pc, #136]	@ (800c90c <TIM_OC6_SetConfig+0xb4>)
 800c884:	4013      	ands	r3, r2
 800c886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	021b      	lsls	r3, r3, #8
 800c88e:	68fa      	ldr	r2, [r7, #12]
 800c890:	4313      	orrs	r3, r2
 800c892:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c894:	693b      	ldr	r3, [r7, #16]
 800c896:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c89a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	689b      	ldr	r3, [r3, #8]
 800c8a0:	051b      	lsls	r3, r3, #20
 800c8a2:	693a      	ldr	r2, [r7, #16]
 800c8a4:	4313      	orrs	r3, r2
 800c8a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	4a19      	ldr	r2, [pc, #100]	@ (800c910 <TIM_OC6_SetConfig+0xb8>)
 800c8ac:	4293      	cmp	r3, r2
 800c8ae:	d00f      	beq.n	800c8d0 <TIM_OC6_SetConfig+0x78>
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	4a18      	ldr	r2, [pc, #96]	@ (800c914 <TIM_OC6_SetConfig+0xbc>)
 800c8b4:	4293      	cmp	r3, r2
 800c8b6:	d00b      	beq.n	800c8d0 <TIM_OC6_SetConfig+0x78>
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	4a17      	ldr	r2, [pc, #92]	@ (800c918 <TIM_OC6_SetConfig+0xc0>)
 800c8bc:	4293      	cmp	r3, r2
 800c8be:	d007      	beq.n	800c8d0 <TIM_OC6_SetConfig+0x78>
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	4a16      	ldr	r2, [pc, #88]	@ (800c91c <TIM_OC6_SetConfig+0xc4>)
 800c8c4:	4293      	cmp	r3, r2
 800c8c6:	d003      	beq.n	800c8d0 <TIM_OC6_SetConfig+0x78>
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	4a15      	ldr	r2, [pc, #84]	@ (800c920 <TIM_OC6_SetConfig+0xc8>)
 800c8cc:	4293      	cmp	r3, r2
 800c8ce:	d109      	bne.n	800c8e4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c8d0:	697b      	ldr	r3, [r7, #20]
 800c8d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c8d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c8d8:	683b      	ldr	r3, [r7, #0]
 800c8da:	695b      	ldr	r3, [r3, #20]
 800c8dc:	029b      	lsls	r3, r3, #10
 800c8de:	697a      	ldr	r2, [r7, #20]
 800c8e0:	4313      	orrs	r3, r2
 800c8e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	697a      	ldr	r2, [r7, #20]
 800c8e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	68fa      	ldr	r2, [r7, #12]
 800c8ee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	685a      	ldr	r2, [r3, #4]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	693a      	ldr	r2, [r7, #16]
 800c8fc:	621a      	str	r2, [r3, #32]
}
 800c8fe:	bf00      	nop
 800c900:	371c      	adds	r7, #28
 800c902:	46bd      	mov	sp, r7
 800c904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c908:	4770      	bx	lr
 800c90a:	bf00      	nop
 800c90c:	feff8fff 	.word	0xfeff8fff
 800c910:	40010000 	.word	0x40010000
 800c914:	40010400 	.word	0x40010400
 800c918:	40014000 	.word	0x40014000
 800c91c:	40014400 	.word	0x40014400
 800c920:	40014800 	.word	0x40014800

0800c924 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c924:	b480      	push	{r7}
 800c926:	b087      	sub	sp, #28
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	60b9      	str	r1, [r7, #8]
 800c92e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	6a1b      	ldr	r3, [r3, #32]
 800c934:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	6a1b      	ldr	r3, [r3, #32]
 800c93a:	f023 0201 	bic.w	r2, r3, #1
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	699b      	ldr	r3, [r3, #24]
 800c946:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c94e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	011b      	lsls	r3, r3, #4
 800c954:	693a      	ldr	r2, [r7, #16]
 800c956:	4313      	orrs	r3, r2
 800c958:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	f023 030a 	bic.w	r3, r3, #10
 800c960:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c962:	697a      	ldr	r2, [r7, #20]
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	4313      	orrs	r3, r2
 800c968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	693a      	ldr	r2, [r7, #16]
 800c96e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	697a      	ldr	r2, [r7, #20]
 800c974:	621a      	str	r2, [r3, #32]
}
 800c976:	bf00      	nop
 800c978:	371c      	adds	r7, #28
 800c97a:	46bd      	mov	sp, r7
 800c97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c980:	4770      	bx	lr

0800c982 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c982:	b480      	push	{r7}
 800c984:	b087      	sub	sp, #28
 800c986:	af00      	add	r7, sp, #0
 800c988:	60f8      	str	r0, [r7, #12]
 800c98a:	60b9      	str	r1, [r7, #8]
 800c98c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	6a1b      	ldr	r3, [r3, #32]
 800c992:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	6a1b      	ldr	r3, [r3, #32]
 800c998:	f023 0210 	bic.w	r2, r3, #16
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	699b      	ldr	r3, [r3, #24]
 800c9a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c9ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	031b      	lsls	r3, r3, #12
 800c9b2:	693a      	ldr	r2, [r7, #16]
 800c9b4:	4313      	orrs	r3, r2
 800c9b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c9b8:	697b      	ldr	r3, [r7, #20]
 800c9ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c9be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	011b      	lsls	r3, r3, #4
 800c9c4:	697a      	ldr	r2, [r7, #20]
 800c9c6:	4313      	orrs	r3, r2
 800c9c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	693a      	ldr	r2, [r7, #16]
 800c9ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	697a      	ldr	r2, [r7, #20]
 800c9d4:	621a      	str	r2, [r3, #32]
}
 800c9d6:	bf00      	nop
 800c9d8:	371c      	adds	r7, #28
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9e0:	4770      	bx	lr
	...

0800c9e4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c9e4:	b480      	push	{r7}
 800c9e6:	b085      	sub	sp, #20
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]
 800c9ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	689b      	ldr	r3, [r3, #8]
 800c9f2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c9f4:	68fa      	ldr	r2, [r7, #12]
 800c9f6:	4b09      	ldr	r3, [pc, #36]	@ (800ca1c <TIM_ITRx_SetConfig+0x38>)
 800c9f8:	4013      	ands	r3, r2
 800c9fa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c9fc:	683a      	ldr	r2, [r7, #0]
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	4313      	orrs	r3, r2
 800ca02:	f043 0307 	orr.w	r3, r3, #7
 800ca06:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	68fa      	ldr	r2, [r7, #12]
 800ca0c:	609a      	str	r2, [r3, #8]
}
 800ca0e:	bf00      	nop
 800ca10:	3714      	adds	r7, #20
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr
 800ca1a:	bf00      	nop
 800ca1c:	ffcfff8f 	.word	0xffcfff8f

0800ca20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ca20:	b480      	push	{r7}
 800ca22:	b087      	sub	sp, #28
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	60f8      	str	r0, [r7, #12]
 800ca28:	60b9      	str	r1, [r7, #8]
 800ca2a:	607a      	str	r2, [r7, #4]
 800ca2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	689b      	ldr	r3, [r3, #8]
 800ca32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ca34:	697b      	ldr	r3, [r7, #20]
 800ca36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ca3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ca3c:	683b      	ldr	r3, [r7, #0]
 800ca3e:	021a      	lsls	r2, r3, #8
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	431a      	orrs	r2, r3
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	4313      	orrs	r3, r2
 800ca48:	697a      	ldr	r2, [r7, #20]
 800ca4a:	4313      	orrs	r3, r2
 800ca4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	697a      	ldr	r2, [r7, #20]
 800ca52:	609a      	str	r2, [r3, #8]
}
 800ca54:	bf00      	nop
 800ca56:	371c      	adds	r7, #28
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5e:	4770      	bx	lr

0800ca60 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b087      	sub	sp, #28
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	60f8      	str	r0, [r7, #12]
 800ca68:	60b9      	str	r1, [r7, #8]
 800ca6a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ca6c:	68bb      	ldr	r3, [r7, #8]
 800ca6e:	f003 031f 	and.w	r3, r3, #31
 800ca72:	2201      	movs	r2, #1
 800ca74:	fa02 f303 	lsl.w	r3, r2, r3
 800ca78:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	6a1a      	ldr	r2, [r3, #32]
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	43db      	mvns	r3, r3
 800ca82:	401a      	ands	r2, r3
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	6a1a      	ldr	r2, [r3, #32]
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	f003 031f 	and.w	r3, r3, #31
 800ca92:	6879      	ldr	r1, [r7, #4]
 800ca94:	fa01 f303 	lsl.w	r3, r1, r3
 800ca98:	431a      	orrs	r2, r3
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	621a      	str	r2, [r3, #32]
}
 800ca9e:	bf00      	nop
 800caa0:	371c      	adds	r7, #28
 800caa2:	46bd      	mov	sp, r7
 800caa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa8:	4770      	bx	lr
	...

0800caac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800caac:	b480      	push	{r7}
 800caae:	b085      	sub	sp, #20
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
 800cab4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	d101      	bne.n	800cac4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cac0:	2302      	movs	r3, #2
 800cac2:	e06d      	b.n	800cba0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	2201      	movs	r2, #1
 800cac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	2202      	movs	r2, #2
 800cad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	689b      	ldr	r3, [r3, #8]
 800cae2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4a30      	ldr	r2, [pc, #192]	@ (800cbac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d004      	beq.n	800caf8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	4a2f      	ldr	r2, [pc, #188]	@ (800cbb0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800caf4:	4293      	cmp	r3, r2
 800caf6:	d108      	bne.n	800cb0a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cafe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cb00:	683b      	ldr	r3, [r7, #0]
 800cb02:	685b      	ldr	r3, [r3, #4]
 800cb04:	68fa      	ldr	r2, [r7, #12]
 800cb06:	4313      	orrs	r3, r2
 800cb08:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cb10:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	68fa      	ldr	r2, [r7, #12]
 800cb18:	4313      	orrs	r3, r2
 800cb1a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	68fa      	ldr	r2, [r7, #12]
 800cb22:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	681b      	ldr	r3, [r3, #0]
 800cb28:	4a20      	ldr	r2, [pc, #128]	@ (800cbac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	d022      	beq.n	800cb74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	681b      	ldr	r3, [r3, #0]
 800cb32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cb36:	d01d      	beq.n	800cb74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	4a1d      	ldr	r2, [pc, #116]	@ (800cbb4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cb3e:	4293      	cmp	r3, r2
 800cb40:	d018      	beq.n	800cb74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	4a1c      	ldr	r2, [pc, #112]	@ (800cbb8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cb48:	4293      	cmp	r3, r2
 800cb4a:	d013      	beq.n	800cb74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	4a1a      	ldr	r2, [pc, #104]	@ (800cbbc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cb52:	4293      	cmp	r3, r2
 800cb54:	d00e      	beq.n	800cb74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	4a15      	ldr	r2, [pc, #84]	@ (800cbb0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cb5c:	4293      	cmp	r3, r2
 800cb5e:	d009      	beq.n	800cb74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	4a16      	ldr	r2, [pc, #88]	@ (800cbc0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cb66:	4293      	cmp	r3, r2
 800cb68:	d004      	beq.n	800cb74 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	4a15      	ldr	r2, [pc, #84]	@ (800cbc4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cb70:	4293      	cmp	r3, r2
 800cb72:	d10c      	bne.n	800cb8e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cb74:	68bb      	ldr	r3, [r7, #8]
 800cb76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb7c:	683b      	ldr	r3, [r7, #0]
 800cb7e:	689b      	ldr	r3, [r3, #8]
 800cb80:	68ba      	ldr	r2, [r7, #8]
 800cb82:	4313      	orrs	r3, r2
 800cb84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	68ba      	ldr	r2, [r7, #8]
 800cb8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2201      	movs	r2, #1
 800cb92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2200      	movs	r2, #0
 800cb9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cb9e:	2300      	movs	r3, #0
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3714      	adds	r7, #20
 800cba4:	46bd      	mov	sp, r7
 800cba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbaa:	4770      	bx	lr
 800cbac:	40010000 	.word	0x40010000
 800cbb0:	40010400 	.word	0x40010400
 800cbb4:	40000400 	.word	0x40000400
 800cbb8:	40000800 	.word	0x40000800
 800cbbc:	40000c00 	.word	0x40000c00
 800cbc0:	40001800 	.word	0x40001800
 800cbc4:	40014000 	.word	0x40014000

0800cbc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b083      	sub	sp, #12
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cbd0:	bf00      	nop
 800cbd2:	370c      	adds	r7, #12
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr

0800cbdc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b083      	sub	sp, #12
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cbe4:	bf00      	nop
 800cbe6:	370c      	adds	r7, #12
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbee:	4770      	bx	lr

0800cbf0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b083      	sub	sp, #12
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cbf8:	bf00      	nop
 800cbfa:	370c      	adds	r7, #12
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc02:	4770      	bx	lr

0800cc04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b082      	sub	sp, #8
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	d101      	bne.n	800cc16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cc12:	2301      	movs	r3, #1
 800cc14:	e042      	b.n	800cc9c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d106      	bne.n	800cc2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2200      	movs	r2, #0
 800cc24:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cc28:	6878      	ldr	r0, [r7, #4]
 800cc2a:	f000 f83b 	bl	800cca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2224      	movs	r2, #36	@ 0x24
 800cc32:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	681a      	ldr	r2, [r3, #0]
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	f022 0201 	bic.w	r2, r2, #1
 800cc44:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d002      	beq.n	800cc54 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 fe28 	bl	800d8a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f000 f8bd 	bl	800cdd4 <UART_SetConfig>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	2b01      	cmp	r3, #1
 800cc5e:	d101      	bne.n	800cc64 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cc60:	2301      	movs	r3, #1
 800cc62:	e01b      	b.n	800cc9c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	685a      	ldr	r2, [r3, #4]
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681b      	ldr	r3, [r3, #0]
 800cc6e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cc72:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	689a      	ldr	r2, [r3, #8]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cc82:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	681a      	ldr	r2, [r3, #0]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	f042 0201 	orr.w	r2, r2, #1
 800cc92:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f000 fea7 	bl	800d9e8 <UART_CheckIdleState>
 800cc9a:	4603      	mov	r3, r0
}
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	3708      	adds	r7, #8
 800cca0:	46bd      	mov	sp, r7
 800cca2:	bd80      	pop	{r7, pc}

0800cca4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800ccac:	bf00      	nop
 800ccae:	370c      	adds	r7, #12
 800ccb0:	46bd      	mov	sp, r7
 800ccb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb6:	4770      	bx	lr

0800ccb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b08a      	sub	sp, #40	@ 0x28
 800ccbc:	af02      	add	r7, sp, #8
 800ccbe:	60f8      	str	r0, [r7, #12]
 800ccc0:	60b9      	str	r1, [r7, #8]
 800ccc2:	603b      	str	r3, [r7, #0]
 800ccc4:	4613      	mov	r3, r2
 800ccc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ccce:	2b20      	cmp	r3, #32
 800ccd0:	d17b      	bne.n	800cdca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d002      	beq.n	800ccde <HAL_UART_Transmit+0x26>
 800ccd8:	88fb      	ldrh	r3, [r7, #6]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d101      	bne.n	800cce2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800ccde:	2301      	movs	r3, #1
 800cce0:	e074      	b.n	800cdcc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2200      	movs	r2, #0
 800cce6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	2221      	movs	r2, #33	@ 0x21
 800ccee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ccf2:	f7f5 fe7d 	bl	80029f0 <HAL_GetTick>
 800ccf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ccf8:	68fb      	ldr	r3, [r7, #12]
 800ccfa:	88fa      	ldrh	r2, [r7, #6]
 800ccfc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800cd00:	68fb      	ldr	r3, [r7, #12]
 800cd02:	88fa      	ldrh	r2, [r7, #6]
 800cd04:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cd08:	68fb      	ldr	r3, [r7, #12]
 800cd0a:	689b      	ldr	r3, [r3, #8]
 800cd0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cd10:	d108      	bne.n	800cd24 <HAL_UART_Transmit+0x6c>
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	691b      	ldr	r3, [r3, #16]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d104      	bne.n	800cd24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	61bb      	str	r3, [r7, #24]
 800cd22:	e003      	b.n	800cd2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cd2c:	e030      	b.n	800cd90 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	9300      	str	r3, [sp, #0]
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	2200      	movs	r2, #0
 800cd36:	2180      	movs	r1, #128	@ 0x80
 800cd38:	68f8      	ldr	r0, [r7, #12]
 800cd3a:	f000 feff 	bl	800db3c <UART_WaitOnFlagUntilTimeout>
 800cd3e:	4603      	mov	r3, r0
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d005      	beq.n	800cd50 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800cd44:	68fb      	ldr	r3, [r7, #12]
 800cd46:	2220      	movs	r2, #32
 800cd48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800cd4c:	2303      	movs	r3, #3
 800cd4e:	e03d      	b.n	800cdcc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800cd50:	69fb      	ldr	r3, [r7, #28]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d10b      	bne.n	800cd6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cd56:	69bb      	ldr	r3, [r7, #24]
 800cd58:	881b      	ldrh	r3, [r3, #0]
 800cd5a:	461a      	mov	r2, r3
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cd64:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800cd66:	69bb      	ldr	r3, [r7, #24]
 800cd68:	3302      	adds	r3, #2
 800cd6a:	61bb      	str	r3, [r7, #24]
 800cd6c:	e007      	b.n	800cd7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800cd6e:	69fb      	ldr	r3, [r7, #28]
 800cd70:	781a      	ldrb	r2, [r3, #0]
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cd78:	69fb      	ldr	r3, [r7, #28]
 800cd7a:	3301      	adds	r3, #1
 800cd7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cd84:	b29b      	uxth	r3, r3
 800cd86:	3b01      	subs	r3, #1
 800cd88:	b29a      	uxth	r2, r3
 800cd8a:	68fb      	ldr	r3, [r7, #12]
 800cd8c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cd96:	b29b      	uxth	r3, r3
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d1c8      	bne.n	800cd2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cd9c:	683b      	ldr	r3, [r7, #0]
 800cd9e:	9300      	str	r3, [sp, #0]
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	2200      	movs	r2, #0
 800cda4:	2140      	movs	r1, #64	@ 0x40
 800cda6:	68f8      	ldr	r0, [r7, #12]
 800cda8:	f000 fec8 	bl	800db3c <UART_WaitOnFlagUntilTimeout>
 800cdac:	4603      	mov	r3, r0
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d005      	beq.n	800cdbe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	2220      	movs	r2, #32
 800cdb6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800cdba:	2303      	movs	r3, #3
 800cdbc:	e006      	b.n	800cdcc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2220      	movs	r2, #32
 800cdc2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	e000      	b.n	800cdcc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800cdca:	2302      	movs	r3, #2
  }
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3720      	adds	r7, #32
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}

0800cdd4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cdd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cdd8:	b092      	sub	sp, #72	@ 0x48
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cdde:	2300      	movs	r3, #0
 800cde0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	689a      	ldr	r2, [r3, #8]
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	691b      	ldr	r3, [r3, #16]
 800cdec:	431a      	orrs	r2, r3
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	695b      	ldr	r3, [r3, #20]
 800cdf2:	431a      	orrs	r2, r3
 800cdf4:	697b      	ldr	r3, [r7, #20]
 800cdf6:	69db      	ldr	r3, [r3, #28]
 800cdf8:	4313      	orrs	r3, r2
 800cdfa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	681a      	ldr	r2, [r3, #0]
 800ce02:	4bbe      	ldr	r3, [pc, #760]	@ (800d0fc <UART_SetConfig+0x328>)
 800ce04:	4013      	ands	r3, r2
 800ce06:	697a      	ldr	r2, [r7, #20]
 800ce08:	6812      	ldr	r2, [r2, #0]
 800ce0a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ce0c:	430b      	orrs	r3, r1
 800ce0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	685b      	ldr	r3, [r3, #4]
 800ce16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	68da      	ldr	r2, [r3, #12]
 800ce1e:	697b      	ldr	r3, [r7, #20]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	430a      	orrs	r2, r1
 800ce24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ce26:	697b      	ldr	r3, [r7, #20]
 800ce28:	699b      	ldr	r3, [r3, #24]
 800ce2a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ce2c:	697b      	ldr	r3, [r7, #20]
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4ab3      	ldr	r2, [pc, #716]	@ (800d100 <UART_SetConfig+0x32c>)
 800ce32:	4293      	cmp	r3, r2
 800ce34:	d004      	beq.n	800ce40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ce36:	697b      	ldr	r3, [r7, #20]
 800ce38:	6a1b      	ldr	r3, [r3, #32]
 800ce3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce3c:	4313      	orrs	r3, r2
 800ce3e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ce40:	697b      	ldr	r3, [r7, #20]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	689a      	ldr	r2, [r3, #8]
 800ce46:	4baf      	ldr	r3, [pc, #700]	@ (800d104 <UART_SetConfig+0x330>)
 800ce48:	4013      	ands	r3, r2
 800ce4a:	697a      	ldr	r2, [r7, #20]
 800ce4c:	6812      	ldr	r2, [r2, #0]
 800ce4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800ce50:	430b      	orrs	r3, r1
 800ce52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ce54:	697b      	ldr	r3, [r7, #20]
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce5a:	f023 010f 	bic.w	r1, r3, #15
 800ce5e:	697b      	ldr	r3, [r7, #20]
 800ce60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ce62:	697b      	ldr	r3, [r7, #20]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	430a      	orrs	r2, r1
 800ce68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	4aa6      	ldr	r2, [pc, #664]	@ (800d108 <UART_SetConfig+0x334>)
 800ce70:	4293      	cmp	r3, r2
 800ce72:	d177      	bne.n	800cf64 <UART_SetConfig+0x190>
 800ce74:	4ba5      	ldr	r3, [pc, #660]	@ (800d10c <UART_SetConfig+0x338>)
 800ce76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ce7c:	2b28      	cmp	r3, #40	@ 0x28
 800ce7e:	d86d      	bhi.n	800cf5c <UART_SetConfig+0x188>
 800ce80:	a201      	add	r2, pc, #4	@ (adr r2, 800ce88 <UART_SetConfig+0xb4>)
 800ce82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce86:	bf00      	nop
 800ce88:	0800cf2d 	.word	0x0800cf2d
 800ce8c:	0800cf5d 	.word	0x0800cf5d
 800ce90:	0800cf5d 	.word	0x0800cf5d
 800ce94:	0800cf5d 	.word	0x0800cf5d
 800ce98:	0800cf5d 	.word	0x0800cf5d
 800ce9c:	0800cf5d 	.word	0x0800cf5d
 800cea0:	0800cf5d 	.word	0x0800cf5d
 800cea4:	0800cf5d 	.word	0x0800cf5d
 800cea8:	0800cf35 	.word	0x0800cf35
 800ceac:	0800cf5d 	.word	0x0800cf5d
 800ceb0:	0800cf5d 	.word	0x0800cf5d
 800ceb4:	0800cf5d 	.word	0x0800cf5d
 800ceb8:	0800cf5d 	.word	0x0800cf5d
 800cebc:	0800cf5d 	.word	0x0800cf5d
 800cec0:	0800cf5d 	.word	0x0800cf5d
 800cec4:	0800cf5d 	.word	0x0800cf5d
 800cec8:	0800cf3d 	.word	0x0800cf3d
 800cecc:	0800cf5d 	.word	0x0800cf5d
 800ced0:	0800cf5d 	.word	0x0800cf5d
 800ced4:	0800cf5d 	.word	0x0800cf5d
 800ced8:	0800cf5d 	.word	0x0800cf5d
 800cedc:	0800cf5d 	.word	0x0800cf5d
 800cee0:	0800cf5d 	.word	0x0800cf5d
 800cee4:	0800cf5d 	.word	0x0800cf5d
 800cee8:	0800cf45 	.word	0x0800cf45
 800ceec:	0800cf5d 	.word	0x0800cf5d
 800cef0:	0800cf5d 	.word	0x0800cf5d
 800cef4:	0800cf5d 	.word	0x0800cf5d
 800cef8:	0800cf5d 	.word	0x0800cf5d
 800cefc:	0800cf5d 	.word	0x0800cf5d
 800cf00:	0800cf5d 	.word	0x0800cf5d
 800cf04:	0800cf5d 	.word	0x0800cf5d
 800cf08:	0800cf4d 	.word	0x0800cf4d
 800cf0c:	0800cf5d 	.word	0x0800cf5d
 800cf10:	0800cf5d 	.word	0x0800cf5d
 800cf14:	0800cf5d 	.word	0x0800cf5d
 800cf18:	0800cf5d 	.word	0x0800cf5d
 800cf1c:	0800cf5d 	.word	0x0800cf5d
 800cf20:	0800cf5d 	.word	0x0800cf5d
 800cf24:	0800cf5d 	.word	0x0800cf5d
 800cf28:	0800cf55 	.word	0x0800cf55
 800cf2c:	2301      	movs	r3, #1
 800cf2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf32:	e222      	b.n	800d37a <UART_SetConfig+0x5a6>
 800cf34:	2304      	movs	r3, #4
 800cf36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf3a:	e21e      	b.n	800d37a <UART_SetConfig+0x5a6>
 800cf3c:	2308      	movs	r3, #8
 800cf3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf42:	e21a      	b.n	800d37a <UART_SetConfig+0x5a6>
 800cf44:	2310      	movs	r3, #16
 800cf46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf4a:	e216      	b.n	800d37a <UART_SetConfig+0x5a6>
 800cf4c:	2320      	movs	r3, #32
 800cf4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf52:	e212      	b.n	800d37a <UART_SetConfig+0x5a6>
 800cf54:	2340      	movs	r3, #64	@ 0x40
 800cf56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf5a:	e20e      	b.n	800d37a <UART_SetConfig+0x5a6>
 800cf5c:	2380      	movs	r3, #128	@ 0x80
 800cf5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf62:	e20a      	b.n	800d37a <UART_SetConfig+0x5a6>
 800cf64:	697b      	ldr	r3, [r7, #20]
 800cf66:	681b      	ldr	r3, [r3, #0]
 800cf68:	4a69      	ldr	r2, [pc, #420]	@ (800d110 <UART_SetConfig+0x33c>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d130      	bne.n	800cfd0 <UART_SetConfig+0x1fc>
 800cf6e:	4b67      	ldr	r3, [pc, #412]	@ (800d10c <UART_SetConfig+0x338>)
 800cf70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf72:	f003 0307 	and.w	r3, r3, #7
 800cf76:	2b05      	cmp	r3, #5
 800cf78:	d826      	bhi.n	800cfc8 <UART_SetConfig+0x1f4>
 800cf7a:	a201      	add	r2, pc, #4	@ (adr r2, 800cf80 <UART_SetConfig+0x1ac>)
 800cf7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf80:	0800cf99 	.word	0x0800cf99
 800cf84:	0800cfa1 	.word	0x0800cfa1
 800cf88:	0800cfa9 	.word	0x0800cfa9
 800cf8c:	0800cfb1 	.word	0x0800cfb1
 800cf90:	0800cfb9 	.word	0x0800cfb9
 800cf94:	0800cfc1 	.word	0x0800cfc1
 800cf98:	2300      	movs	r3, #0
 800cf9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf9e:	e1ec      	b.n	800d37a <UART_SetConfig+0x5a6>
 800cfa0:	2304      	movs	r3, #4
 800cfa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfa6:	e1e8      	b.n	800d37a <UART_SetConfig+0x5a6>
 800cfa8:	2308      	movs	r3, #8
 800cfaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfae:	e1e4      	b.n	800d37a <UART_SetConfig+0x5a6>
 800cfb0:	2310      	movs	r3, #16
 800cfb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfb6:	e1e0      	b.n	800d37a <UART_SetConfig+0x5a6>
 800cfb8:	2320      	movs	r3, #32
 800cfba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfbe:	e1dc      	b.n	800d37a <UART_SetConfig+0x5a6>
 800cfc0:	2340      	movs	r3, #64	@ 0x40
 800cfc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfc6:	e1d8      	b.n	800d37a <UART_SetConfig+0x5a6>
 800cfc8:	2380      	movs	r3, #128	@ 0x80
 800cfca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfce:	e1d4      	b.n	800d37a <UART_SetConfig+0x5a6>
 800cfd0:	697b      	ldr	r3, [r7, #20]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	4a4f      	ldr	r2, [pc, #316]	@ (800d114 <UART_SetConfig+0x340>)
 800cfd6:	4293      	cmp	r3, r2
 800cfd8:	d130      	bne.n	800d03c <UART_SetConfig+0x268>
 800cfda:	4b4c      	ldr	r3, [pc, #304]	@ (800d10c <UART_SetConfig+0x338>)
 800cfdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfde:	f003 0307 	and.w	r3, r3, #7
 800cfe2:	2b05      	cmp	r3, #5
 800cfe4:	d826      	bhi.n	800d034 <UART_SetConfig+0x260>
 800cfe6:	a201      	add	r2, pc, #4	@ (adr r2, 800cfec <UART_SetConfig+0x218>)
 800cfe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfec:	0800d005 	.word	0x0800d005
 800cff0:	0800d00d 	.word	0x0800d00d
 800cff4:	0800d015 	.word	0x0800d015
 800cff8:	0800d01d 	.word	0x0800d01d
 800cffc:	0800d025 	.word	0x0800d025
 800d000:	0800d02d 	.word	0x0800d02d
 800d004:	2300      	movs	r3, #0
 800d006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d00a:	e1b6      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d00c:	2304      	movs	r3, #4
 800d00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d012:	e1b2      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d014:	2308      	movs	r3, #8
 800d016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d01a:	e1ae      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d01c:	2310      	movs	r3, #16
 800d01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d022:	e1aa      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d024:	2320      	movs	r3, #32
 800d026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d02a:	e1a6      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d02c:	2340      	movs	r3, #64	@ 0x40
 800d02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d032:	e1a2      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d034:	2380      	movs	r3, #128	@ 0x80
 800d036:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d03a:	e19e      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d03c:	697b      	ldr	r3, [r7, #20]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	4a35      	ldr	r2, [pc, #212]	@ (800d118 <UART_SetConfig+0x344>)
 800d042:	4293      	cmp	r3, r2
 800d044:	d130      	bne.n	800d0a8 <UART_SetConfig+0x2d4>
 800d046:	4b31      	ldr	r3, [pc, #196]	@ (800d10c <UART_SetConfig+0x338>)
 800d048:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d04a:	f003 0307 	and.w	r3, r3, #7
 800d04e:	2b05      	cmp	r3, #5
 800d050:	d826      	bhi.n	800d0a0 <UART_SetConfig+0x2cc>
 800d052:	a201      	add	r2, pc, #4	@ (adr r2, 800d058 <UART_SetConfig+0x284>)
 800d054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d058:	0800d071 	.word	0x0800d071
 800d05c:	0800d079 	.word	0x0800d079
 800d060:	0800d081 	.word	0x0800d081
 800d064:	0800d089 	.word	0x0800d089
 800d068:	0800d091 	.word	0x0800d091
 800d06c:	0800d099 	.word	0x0800d099
 800d070:	2300      	movs	r3, #0
 800d072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d076:	e180      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d078:	2304      	movs	r3, #4
 800d07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d07e:	e17c      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d080:	2308      	movs	r3, #8
 800d082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d086:	e178      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d088:	2310      	movs	r3, #16
 800d08a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d08e:	e174      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d090:	2320      	movs	r3, #32
 800d092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d096:	e170      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d098:	2340      	movs	r3, #64	@ 0x40
 800d09a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d09e:	e16c      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d0a0:	2380      	movs	r3, #128	@ 0x80
 800d0a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0a6:	e168      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d0a8:	697b      	ldr	r3, [r7, #20]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4a1b      	ldr	r2, [pc, #108]	@ (800d11c <UART_SetConfig+0x348>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d142      	bne.n	800d138 <UART_SetConfig+0x364>
 800d0b2:	4b16      	ldr	r3, [pc, #88]	@ (800d10c <UART_SetConfig+0x338>)
 800d0b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d0b6:	f003 0307 	and.w	r3, r3, #7
 800d0ba:	2b05      	cmp	r3, #5
 800d0bc:	d838      	bhi.n	800d130 <UART_SetConfig+0x35c>
 800d0be:	a201      	add	r2, pc, #4	@ (adr r2, 800d0c4 <UART_SetConfig+0x2f0>)
 800d0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0c4:	0800d0dd 	.word	0x0800d0dd
 800d0c8:	0800d0e5 	.word	0x0800d0e5
 800d0cc:	0800d0ed 	.word	0x0800d0ed
 800d0d0:	0800d0f5 	.word	0x0800d0f5
 800d0d4:	0800d121 	.word	0x0800d121
 800d0d8:	0800d129 	.word	0x0800d129
 800d0dc:	2300      	movs	r3, #0
 800d0de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0e2:	e14a      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d0e4:	2304      	movs	r3, #4
 800d0e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ea:	e146      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d0ec:	2308      	movs	r3, #8
 800d0ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0f2:	e142      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d0f4:	2310      	movs	r3, #16
 800d0f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0fa:	e13e      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d0fc:	cfff69f3 	.word	0xcfff69f3
 800d100:	58000c00 	.word	0x58000c00
 800d104:	11fff4ff 	.word	0x11fff4ff
 800d108:	40011000 	.word	0x40011000
 800d10c:	58024400 	.word	0x58024400
 800d110:	40004400 	.word	0x40004400
 800d114:	40004800 	.word	0x40004800
 800d118:	40004c00 	.word	0x40004c00
 800d11c:	40005000 	.word	0x40005000
 800d120:	2320      	movs	r3, #32
 800d122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d126:	e128      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d128:	2340      	movs	r3, #64	@ 0x40
 800d12a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d12e:	e124      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d130:	2380      	movs	r3, #128	@ 0x80
 800d132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d136:	e120      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d138:	697b      	ldr	r3, [r7, #20]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	4acb      	ldr	r2, [pc, #812]	@ (800d46c <UART_SetConfig+0x698>)
 800d13e:	4293      	cmp	r3, r2
 800d140:	d176      	bne.n	800d230 <UART_SetConfig+0x45c>
 800d142:	4bcb      	ldr	r3, [pc, #812]	@ (800d470 <UART_SetConfig+0x69c>)
 800d144:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d146:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d14a:	2b28      	cmp	r3, #40	@ 0x28
 800d14c:	d86c      	bhi.n	800d228 <UART_SetConfig+0x454>
 800d14e:	a201      	add	r2, pc, #4	@ (adr r2, 800d154 <UART_SetConfig+0x380>)
 800d150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d154:	0800d1f9 	.word	0x0800d1f9
 800d158:	0800d229 	.word	0x0800d229
 800d15c:	0800d229 	.word	0x0800d229
 800d160:	0800d229 	.word	0x0800d229
 800d164:	0800d229 	.word	0x0800d229
 800d168:	0800d229 	.word	0x0800d229
 800d16c:	0800d229 	.word	0x0800d229
 800d170:	0800d229 	.word	0x0800d229
 800d174:	0800d201 	.word	0x0800d201
 800d178:	0800d229 	.word	0x0800d229
 800d17c:	0800d229 	.word	0x0800d229
 800d180:	0800d229 	.word	0x0800d229
 800d184:	0800d229 	.word	0x0800d229
 800d188:	0800d229 	.word	0x0800d229
 800d18c:	0800d229 	.word	0x0800d229
 800d190:	0800d229 	.word	0x0800d229
 800d194:	0800d209 	.word	0x0800d209
 800d198:	0800d229 	.word	0x0800d229
 800d19c:	0800d229 	.word	0x0800d229
 800d1a0:	0800d229 	.word	0x0800d229
 800d1a4:	0800d229 	.word	0x0800d229
 800d1a8:	0800d229 	.word	0x0800d229
 800d1ac:	0800d229 	.word	0x0800d229
 800d1b0:	0800d229 	.word	0x0800d229
 800d1b4:	0800d211 	.word	0x0800d211
 800d1b8:	0800d229 	.word	0x0800d229
 800d1bc:	0800d229 	.word	0x0800d229
 800d1c0:	0800d229 	.word	0x0800d229
 800d1c4:	0800d229 	.word	0x0800d229
 800d1c8:	0800d229 	.word	0x0800d229
 800d1cc:	0800d229 	.word	0x0800d229
 800d1d0:	0800d229 	.word	0x0800d229
 800d1d4:	0800d219 	.word	0x0800d219
 800d1d8:	0800d229 	.word	0x0800d229
 800d1dc:	0800d229 	.word	0x0800d229
 800d1e0:	0800d229 	.word	0x0800d229
 800d1e4:	0800d229 	.word	0x0800d229
 800d1e8:	0800d229 	.word	0x0800d229
 800d1ec:	0800d229 	.word	0x0800d229
 800d1f0:	0800d229 	.word	0x0800d229
 800d1f4:	0800d221 	.word	0x0800d221
 800d1f8:	2301      	movs	r3, #1
 800d1fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1fe:	e0bc      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d200:	2304      	movs	r3, #4
 800d202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d206:	e0b8      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d208:	2308      	movs	r3, #8
 800d20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d20e:	e0b4      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d210:	2310      	movs	r3, #16
 800d212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d216:	e0b0      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d218:	2320      	movs	r3, #32
 800d21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d21e:	e0ac      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d220:	2340      	movs	r3, #64	@ 0x40
 800d222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d226:	e0a8      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d228:	2380      	movs	r3, #128	@ 0x80
 800d22a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d22e:	e0a4      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	4a8f      	ldr	r2, [pc, #572]	@ (800d474 <UART_SetConfig+0x6a0>)
 800d236:	4293      	cmp	r3, r2
 800d238:	d130      	bne.n	800d29c <UART_SetConfig+0x4c8>
 800d23a:	4b8d      	ldr	r3, [pc, #564]	@ (800d470 <UART_SetConfig+0x69c>)
 800d23c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d23e:	f003 0307 	and.w	r3, r3, #7
 800d242:	2b05      	cmp	r3, #5
 800d244:	d826      	bhi.n	800d294 <UART_SetConfig+0x4c0>
 800d246:	a201      	add	r2, pc, #4	@ (adr r2, 800d24c <UART_SetConfig+0x478>)
 800d248:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d24c:	0800d265 	.word	0x0800d265
 800d250:	0800d26d 	.word	0x0800d26d
 800d254:	0800d275 	.word	0x0800d275
 800d258:	0800d27d 	.word	0x0800d27d
 800d25c:	0800d285 	.word	0x0800d285
 800d260:	0800d28d 	.word	0x0800d28d
 800d264:	2300      	movs	r3, #0
 800d266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d26a:	e086      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d26c:	2304      	movs	r3, #4
 800d26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d272:	e082      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d274:	2308      	movs	r3, #8
 800d276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d27a:	e07e      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d27c:	2310      	movs	r3, #16
 800d27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d282:	e07a      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d284:	2320      	movs	r3, #32
 800d286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d28a:	e076      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d28c:	2340      	movs	r3, #64	@ 0x40
 800d28e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d292:	e072      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d294:	2380      	movs	r3, #128	@ 0x80
 800d296:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d29a:	e06e      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d29c:	697b      	ldr	r3, [r7, #20]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	4a75      	ldr	r2, [pc, #468]	@ (800d478 <UART_SetConfig+0x6a4>)
 800d2a2:	4293      	cmp	r3, r2
 800d2a4:	d130      	bne.n	800d308 <UART_SetConfig+0x534>
 800d2a6:	4b72      	ldr	r3, [pc, #456]	@ (800d470 <UART_SetConfig+0x69c>)
 800d2a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2aa:	f003 0307 	and.w	r3, r3, #7
 800d2ae:	2b05      	cmp	r3, #5
 800d2b0:	d826      	bhi.n	800d300 <UART_SetConfig+0x52c>
 800d2b2:	a201      	add	r2, pc, #4	@ (adr r2, 800d2b8 <UART_SetConfig+0x4e4>)
 800d2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2b8:	0800d2d1 	.word	0x0800d2d1
 800d2bc:	0800d2d9 	.word	0x0800d2d9
 800d2c0:	0800d2e1 	.word	0x0800d2e1
 800d2c4:	0800d2e9 	.word	0x0800d2e9
 800d2c8:	0800d2f1 	.word	0x0800d2f1
 800d2cc:	0800d2f9 	.word	0x0800d2f9
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2d6:	e050      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d2d8:	2304      	movs	r3, #4
 800d2da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2de:	e04c      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d2e0:	2308      	movs	r3, #8
 800d2e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2e6:	e048      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d2e8:	2310      	movs	r3, #16
 800d2ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2ee:	e044      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d2f0:	2320      	movs	r3, #32
 800d2f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2f6:	e040      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d2f8:	2340      	movs	r3, #64	@ 0x40
 800d2fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2fe:	e03c      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d300:	2380      	movs	r3, #128	@ 0x80
 800d302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d306:	e038      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d308:	697b      	ldr	r3, [r7, #20]
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	4a5b      	ldr	r2, [pc, #364]	@ (800d47c <UART_SetConfig+0x6a8>)
 800d30e:	4293      	cmp	r3, r2
 800d310:	d130      	bne.n	800d374 <UART_SetConfig+0x5a0>
 800d312:	4b57      	ldr	r3, [pc, #348]	@ (800d470 <UART_SetConfig+0x69c>)
 800d314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d316:	f003 0307 	and.w	r3, r3, #7
 800d31a:	2b05      	cmp	r3, #5
 800d31c:	d826      	bhi.n	800d36c <UART_SetConfig+0x598>
 800d31e:	a201      	add	r2, pc, #4	@ (adr r2, 800d324 <UART_SetConfig+0x550>)
 800d320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d324:	0800d33d 	.word	0x0800d33d
 800d328:	0800d345 	.word	0x0800d345
 800d32c:	0800d34d 	.word	0x0800d34d
 800d330:	0800d355 	.word	0x0800d355
 800d334:	0800d35d 	.word	0x0800d35d
 800d338:	0800d365 	.word	0x0800d365
 800d33c:	2302      	movs	r3, #2
 800d33e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d342:	e01a      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d344:	2304      	movs	r3, #4
 800d346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d34a:	e016      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d34c:	2308      	movs	r3, #8
 800d34e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d352:	e012      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d354:	2310      	movs	r3, #16
 800d356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d35a:	e00e      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d35c:	2320      	movs	r3, #32
 800d35e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d362:	e00a      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d364:	2340      	movs	r3, #64	@ 0x40
 800d366:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d36a:	e006      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d36c:	2380      	movs	r3, #128	@ 0x80
 800d36e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d372:	e002      	b.n	800d37a <UART_SetConfig+0x5a6>
 800d374:	2380      	movs	r3, #128	@ 0x80
 800d376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4a3f      	ldr	r2, [pc, #252]	@ (800d47c <UART_SetConfig+0x6a8>)
 800d380:	4293      	cmp	r3, r2
 800d382:	f040 80f8 	bne.w	800d576 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d386:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d38a:	2b20      	cmp	r3, #32
 800d38c:	dc46      	bgt.n	800d41c <UART_SetConfig+0x648>
 800d38e:	2b02      	cmp	r3, #2
 800d390:	f2c0 8082 	blt.w	800d498 <UART_SetConfig+0x6c4>
 800d394:	3b02      	subs	r3, #2
 800d396:	2b1e      	cmp	r3, #30
 800d398:	d87e      	bhi.n	800d498 <UART_SetConfig+0x6c4>
 800d39a:	a201      	add	r2, pc, #4	@ (adr r2, 800d3a0 <UART_SetConfig+0x5cc>)
 800d39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3a0:	0800d423 	.word	0x0800d423
 800d3a4:	0800d499 	.word	0x0800d499
 800d3a8:	0800d42b 	.word	0x0800d42b
 800d3ac:	0800d499 	.word	0x0800d499
 800d3b0:	0800d499 	.word	0x0800d499
 800d3b4:	0800d499 	.word	0x0800d499
 800d3b8:	0800d43b 	.word	0x0800d43b
 800d3bc:	0800d499 	.word	0x0800d499
 800d3c0:	0800d499 	.word	0x0800d499
 800d3c4:	0800d499 	.word	0x0800d499
 800d3c8:	0800d499 	.word	0x0800d499
 800d3cc:	0800d499 	.word	0x0800d499
 800d3d0:	0800d499 	.word	0x0800d499
 800d3d4:	0800d499 	.word	0x0800d499
 800d3d8:	0800d44b 	.word	0x0800d44b
 800d3dc:	0800d499 	.word	0x0800d499
 800d3e0:	0800d499 	.word	0x0800d499
 800d3e4:	0800d499 	.word	0x0800d499
 800d3e8:	0800d499 	.word	0x0800d499
 800d3ec:	0800d499 	.word	0x0800d499
 800d3f0:	0800d499 	.word	0x0800d499
 800d3f4:	0800d499 	.word	0x0800d499
 800d3f8:	0800d499 	.word	0x0800d499
 800d3fc:	0800d499 	.word	0x0800d499
 800d400:	0800d499 	.word	0x0800d499
 800d404:	0800d499 	.word	0x0800d499
 800d408:	0800d499 	.word	0x0800d499
 800d40c:	0800d499 	.word	0x0800d499
 800d410:	0800d499 	.word	0x0800d499
 800d414:	0800d499 	.word	0x0800d499
 800d418:	0800d48b 	.word	0x0800d48b
 800d41c:	2b40      	cmp	r3, #64	@ 0x40
 800d41e:	d037      	beq.n	800d490 <UART_SetConfig+0x6bc>
 800d420:	e03a      	b.n	800d498 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d422:	f7fd fac9 	bl	800a9b8 <HAL_RCCEx_GetD3PCLK1Freq>
 800d426:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d428:	e03c      	b.n	800d4a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d42a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d42e:	4618      	mov	r0, r3
 800d430:	f7fd fad8 	bl	800a9e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d438:	e034      	b.n	800d4a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d43a:	f107 0318 	add.w	r3, r7, #24
 800d43e:	4618      	mov	r0, r3
 800d440:	f7fd fc24 	bl	800ac8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d444:	69fb      	ldr	r3, [r7, #28]
 800d446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d448:	e02c      	b.n	800d4a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d44a:	4b09      	ldr	r3, [pc, #36]	@ (800d470 <UART_SetConfig+0x69c>)
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	f003 0320 	and.w	r3, r3, #32
 800d452:	2b00      	cmp	r3, #0
 800d454:	d016      	beq.n	800d484 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d456:	4b06      	ldr	r3, [pc, #24]	@ (800d470 <UART_SetConfig+0x69c>)
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	08db      	lsrs	r3, r3, #3
 800d45c:	f003 0303 	and.w	r3, r3, #3
 800d460:	4a07      	ldr	r2, [pc, #28]	@ (800d480 <UART_SetConfig+0x6ac>)
 800d462:	fa22 f303 	lsr.w	r3, r2, r3
 800d466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d468:	e01c      	b.n	800d4a4 <UART_SetConfig+0x6d0>
 800d46a:	bf00      	nop
 800d46c:	40011400 	.word	0x40011400
 800d470:	58024400 	.word	0x58024400
 800d474:	40007800 	.word	0x40007800
 800d478:	40007c00 	.word	0x40007c00
 800d47c:	58000c00 	.word	0x58000c00
 800d480:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d484:	4b9d      	ldr	r3, [pc, #628]	@ (800d6fc <UART_SetConfig+0x928>)
 800d486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d488:	e00c      	b.n	800d4a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d48a:	4b9d      	ldr	r3, [pc, #628]	@ (800d700 <UART_SetConfig+0x92c>)
 800d48c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d48e:	e009      	b.n	800d4a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d490:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d496:	e005      	b.n	800d4a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d498:	2300      	movs	r3, #0
 800d49a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d49c:	2301      	movs	r3, #1
 800d49e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d4a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d4a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	f000 81de 	beq.w	800d868 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d4ac:	697b      	ldr	r3, [r7, #20]
 800d4ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4b0:	4a94      	ldr	r2, [pc, #592]	@ (800d704 <UART_SetConfig+0x930>)
 800d4b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4b6:	461a      	mov	r2, r3
 800d4b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4ba:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4be:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	685a      	ldr	r2, [r3, #4]
 800d4c4:	4613      	mov	r3, r2
 800d4c6:	005b      	lsls	r3, r3, #1
 800d4c8:	4413      	add	r3, r2
 800d4ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	d305      	bcc.n	800d4dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d4d0:	697b      	ldr	r3, [r7, #20]
 800d4d2:	685b      	ldr	r3, [r3, #4]
 800d4d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d4d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d4d8:	429a      	cmp	r2, r3
 800d4da:	d903      	bls.n	800d4e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d4dc:	2301      	movs	r3, #1
 800d4de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d4e2:	e1c1      	b.n	800d868 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d4e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d4e6:	2200      	movs	r2, #0
 800d4e8:	60bb      	str	r3, [r7, #8]
 800d4ea:	60fa      	str	r2, [r7, #12]
 800d4ec:	697b      	ldr	r3, [r7, #20]
 800d4ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4f0:	4a84      	ldr	r2, [pc, #528]	@ (800d704 <UART_SetConfig+0x930>)
 800d4f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d4f6:	b29b      	uxth	r3, r3
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	603b      	str	r3, [r7, #0]
 800d4fc:	607a      	str	r2, [r7, #4]
 800d4fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d502:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d506:	f7f2 ff43 	bl	8000390 <__aeabi_uldivmod>
 800d50a:	4602      	mov	r2, r0
 800d50c:	460b      	mov	r3, r1
 800d50e:	4610      	mov	r0, r2
 800d510:	4619      	mov	r1, r3
 800d512:	f04f 0200 	mov.w	r2, #0
 800d516:	f04f 0300 	mov.w	r3, #0
 800d51a:	020b      	lsls	r3, r1, #8
 800d51c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d520:	0202      	lsls	r2, r0, #8
 800d522:	6979      	ldr	r1, [r7, #20]
 800d524:	6849      	ldr	r1, [r1, #4]
 800d526:	0849      	lsrs	r1, r1, #1
 800d528:	2000      	movs	r0, #0
 800d52a:	460c      	mov	r4, r1
 800d52c:	4605      	mov	r5, r0
 800d52e:	eb12 0804 	adds.w	r8, r2, r4
 800d532:	eb43 0905 	adc.w	r9, r3, r5
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	685b      	ldr	r3, [r3, #4]
 800d53a:	2200      	movs	r2, #0
 800d53c:	469a      	mov	sl, r3
 800d53e:	4693      	mov	fp, r2
 800d540:	4652      	mov	r2, sl
 800d542:	465b      	mov	r3, fp
 800d544:	4640      	mov	r0, r8
 800d546:	4649      	mov	r1, r9
 800d548:	f7f2 ff22 	bl	8000390 <__aeabi_uldivmod>
 800d54c:	4602      	mov	r2, r0
 800d54e:	460b      	mov	r3, r1
 800d550:	4613      	mov	r3, r2
 800d552:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d556:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d55a:	d308      	bcc.n	800d56e <UART_SetConfig+0x79a>
 800d55c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d55e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d562:	d204      	bcs.n	800d56e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d56a:	60da      	str	r2, [r3, #12]
 800d56c:	e17c      	b.n	800d868 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d56e:	2301      	movs	r3, #1
 800d570:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d574:	e178      	b.n	800d868 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	69db      	ldr	r3, [r3, #28]
 800d57a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d57e:	f040 80c5 	bne.w	800d70c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d582:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d586:	2b20      	cmp	r3, #32
 800d588:	dc48      	bgt.n	800d61c <UART_SetConfig+0x848>
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	db7b      	blt.n	800d686 <UART_SetConfig+0x8b2>
 800d58e:	2b20      	cmp	r3, #32
 800d590:	d879      	bhi.n	800d686 <UART_SetConfig+0x8b2>
 800d592:	a201      	add	r2, pc, #4	@ (adr r2, 800d598 <UART_SetConfig+0x7c4>)
 800d594:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d598:	0800d623 	.word	0x0800d623
 800d59c:	0800d62b 	.word	0x0800d62b
 800d5a0:	0800d687 	.word	0x0800d687
 800d5a4:	0800d687 	.word	0x0800d687
 800d5a8:	0800d633 	.word	0x0800d633
 800d5ac:	0800d687 	.word	0x0800d687
 800d5b0:	0800d687 	.word	0x0800d687
 800d5b4:	0800d687 	.word	0x0800d687
 800d5b8:	0800d643 	.word	0x0800d643
 800d5bc:	0800d687 	.word	0x0800d687
 800d5c0:	0800d687 	.word	0x0800d687
 800d5c4:	0800d687 	.word	0x0800d687
 800d5c8:	0800d687 	.word	0x0800d687
 800d5cc:	0800d687 	.word	0x0800d687
 800d5d0:	0800d687 	.word	0x0800d687
 800d5d4:	0800d687 	.word	0x0800d687
 800d5d8:	0800d653 	.word	0x0800d653
 800d5dc:	0800d687 	.word	0x0800d687
 800d5e0:	0800d687 	.word	0x0800d687
 800d5e4:	0800d687 	.word	0x0800d687
 800d5e8:	0800d687 	.word	0x0800d687
 800d5ec:	0800d687 	.word	0x0800d687
 800d5f0:	0800d687 	.word	0x0800d687
 800d5f4:	0800d687 	.word	0x0800d687
 800d5f8:	0800d687 	.word	0x0800d687
 800d5fc:	0800d687 	.word	0x0800d687
 800d600:	0800d687 	.word	0x0800d687
 800d604:	0800d687 	.word	0x0800d687
 800d608:	0800d687 	.word	0x0800d687
 800d60c:	0800d687 	.word	0x0800d687
 800d610:	0800d687 	.word	0x0800d687
 800d614:	0800d687 	.word	0x0800d687
 800d618:	0800d679 	.word	0x0800d679
 800d61c:	2b40      	cmp	r3, #64	@ 0x40
 800d61e:	d02e      	beq.n	800d67e <UART_SetConfig+0x8aa>
 800d620:	e031      	b.n	800d686 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d622:	f7fb fa13 	bl	8008a4c <HAL_RCC_GetPCLK1Freq>
 800d626:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d628:	e033      	b.n	800d692 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d62a:	f7fb fa25 	bl	8008a78 <HAL_RCC_GetPCLK2Freq>
 800d62e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d630:	e02f      	b.n	800d692 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d632:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d636:	4618      	mov	r0, r3
 800d638:	f7fd f9d4 	bl	800a9e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d63c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d63e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d640:	e027      	b.n	800d692 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d642:	f107 0318 	add.w	r3, r7, #24
 800d646:	4618      	mov	r0, r3
 800d648:	f7fd fb20 	bl	800ac8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d64c:	69fb      	ldr	r3, [r7, #28]
 800d64e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d650:	e01f      	b.n	800d692 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d652:	4b2d      	ldr	r3, [pc, #180]	@ (800d708 <UART_SetConfig+0x934>)
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	f003 0320 	and.w	r3, r3, #32
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d009      	beq.n	800d672 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d65e:	4b2a      	ldr	r3, [pc, #168]	@ (800d708 <UART_SetConfig+0x934>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	08db      	lsrs	r3, r3, #3
 800d664:	f003 0303 	and.w	r3, r3, #3
 800d668:	4a24      	ldr	r2, [pc, #144]	@ (800d6fc <UART_SetConfig+0x928>)
 800d66a:	fa22 f303 	lsr.w	r3, r2, r3
 800d66e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d670:	e00f      	b.n	800d692 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d672:	4b22      	ldr	r3, [pc, #136]	@ (800d6fc <UART_SetConfig+0x928>)
 800d674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d676:	e00c      	b.n	800d692 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d678:	4b21      	ldr	r3, [pc, #132]	@ (800d700 <UART_SetConfig+0x92c>)
 800d67a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d67c:	e009      	b.n	800d692 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d67e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d682:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d684:	e005      	b.n	800d692 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d686:	2300      	movs	r3, #0
 800d688:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d68a:	2301      	movs	r3, #1
 800d68c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d690:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d694:	2b00      	cmp	r3, #0
 800d696:	f000 80e7 	beq.w	800d868 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d69a:	697b      	ldr	r3, [r7, #20]
 800d69c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d69e:	4a19      	ldr	r2, [pc, #100]	@ (800d704 <UART_SetConfig+0x930>)
 800d6a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d6a4:	461a      	mov	r2, r3
 800d6a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d6a8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d6ac:	005a      	lsls	r2, r3, #1
 800d6ae:	697b      	ldr	r3, [r7, #20]
 800d6b0:	685b      	ldr	r3, [r3, #4]
 800d6b2:	085b      	lsrs	r3, r3, #1
 800d6b4:	441a      	add	r2, r3
 800d6b6:	697b      	ldr	r3, [r7, #20]
 800d6b8:	685b      	ldr	r3, [r3, #4]
 800d6ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800d6be:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d6c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6c2:	2b0f      	cmp	r3, #15
 800d6c4:	d916      	bls.n	800d6f4 <UART_SetConfig+0x920>
 800d6c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d6cc:	d212      	bcs.n	800d6f4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d6ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6d0:	b29b      	uxth	r3, r3
 800d6d2:	f023 030f 	bic.w	r3, r3, #15
 800d6d6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d6d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6da:	085b      	lsrs	r3, r3, #1
 800d6dc:	b29b      	uxth	r3, r3
 800d6de:	f003 0307 	and.w	r3, r3, #7
 800d6e2:	b29a      	uxth	r2, r3
 800d6e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d6e6:	4313      	orrs	r3, r2
 800d6e8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d6ea:	697b      	ldr	r3, [r7, #20]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d6f0:	60da      	str	r2, [r3, #12]
 800d6f2:	e0b9      	b.n	800d868 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d6fa:	e0b5      	b.n	800d868 <UART_SetConfig+0xa94>
 800d6fc:	03d09000 	.word	0x03d09000
 800d700:	003d0900 	.word	0x003d0900
 800d704:	08014aa4 	.word	0x08014aa4
 800d708:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d70c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d710:	2b20      	cmp	r3, #32
 800d712:	dc49      	bgt.n	800d7a8 <UART_SetConfig+0x9d4>
 800d714:	2b00      	cmp	r3, #0
 800d716:	db7c      	blt.n	800d812 <UART_SetConfig+0xa3e>
 800d718:	2b20      	cmp	r3, #32
 800d71a:	d87a      	bhi.n	800d812 <UART_SetConfig+0xa3e>
 800d71c:	a201      	add	r2, pc, #4	@ (adr r2, 800d724 <UART_SetConfig+0x950>)
 800d71e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d722:	bf00      	nop
 800d724:	0800d7af 	.word	0x0800d7af
 800d728:	0800d7b7 	.word	0x0800d7b7
 800d72c:	0800d813 	.word	0x0800d813
 800d730:	0800d813 	.word	0x0800d813
 800d734:	0800d7bf 	.word	0x0800d7bf
 800d738:	0800d813 	.word	0x0800d813
 800d73c:	0800d813 	.word	0x0800d813
 800d740:	0800d813 	.word	0x0800d813
 800d744:	0800d7cf 	.word	0x0800d7cf
 800d748:	0800d813 	.word	0x0800d813
 800d74c:	0800d813 	.word	0x0800d813
 800d750:	0800d813 	.word	0x0800d813
 800d754:	0800d813 	.word	0x0800d813
 800d758:	0800d813 	.word	0x0800d813
 800d75c:	0800d813 	.word	0x0800d813
 800d760:	0800d813 	.word	0x0800d813
 800d764:	0800d7df 	.word	0x0800d7df
 800d768:	0800d813 	.word	0x0800d813
 800d76c:	0800d813 	.word	0x0800d813
 800d770:	0800d813 	.word	0x0800d813
 800d774:	0800d813 	.word	0x0800d813
 800d778:	0800d813 	.word	0x0800d813
 800d77c:	0800d813 	.word	0x0800d813
 800d780:	0800d813 	.word	0x0800d813
 800d784:	0800d813 	.word	0x0800d813
 800d788:	0800d813 	.word	0x0800d813
 800d78c:	0800d813 	.word	0x0800d813
 800d790:	0800d813 	.word	0x0800d813
 800d794:	0800d813 	.word	0x0800d813
 800d798:	0800d813 	.word	0x0800d813
 800d79c:	0800d813 	.word	0x0800d813
 800d7a0:	0800d813 	.word	0x0800d813
 800d7a4:	0800d805 	.word	0x0800d805
 800d7a8:	2b40      	cmp	r3, #64	@ 0x40
 800d7aa:	d02e      	beq.n	800d80a <UART_SetConfig+0xa36>
 800d7ac:	e031      	b.n	800d812 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d7ae:	f7fb f94d 	bl	8008a4c <HAL_RCC_GetPCLK1Freq>
 800d7b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d7b4:	e033      	b.n	800d81e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d7b6:	f7fb f95f 	bl	8008a78 <HAL_RCC_GetPCLK2Freq>
 800d7ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d7bc:	e02f      	b.n	800d81e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d7be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	f7fd f90e 	bl	800a9e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d7c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7cc:	e027      	b.n	800d81e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d7ce:	f107 0318 	add.w	r3, r7, #24
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7fd fa5a 	bl	800ac8c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d7dc:	e01f      	b.n	800d81e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d7de:	4b2d      	ldr	r3, [pc, #180]	@ (800d894 <UART_SetConfig+0xac0>)
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	f003 0320 	and.w	r3, r3, #32
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d009      	beq.n	800d7fe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d7ea:	4b2a      	ldr	r3, [pc, #168]	@ (800d894 <UART_SetConfig+0xac0>)
 800d7ec:	681b      	ldr	r3, [r3, #0]
 800d7ee:	08db      	lsrs	r3, r3, #3
 800d7f0:	f003 0303 	and.w	r3, r3, #3
 800d7f4:	4a28      	ldr	r2, [pc, #160]	@ (800d898 <UART_SetConfig+0xac4>)
 800d7f6:	fa22 f303 	lsr.w	r3, r2, r3
 800d7fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d7fc:	e00f      	b.n	800d81e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d7fe:	4b26      	ldr	r3, [pc, #152]	@ (800d898 <UART_SetConfig+0xac4>)
 800d800:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d802:	e00c      	b.n	800d81e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d804:	4b25      	ldr	r3, [pc, #148]	@ (800d89c <UART_SetConfig+0xac8>)
 800d806:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d808:	e009      	b.n	800d81e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d80a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d80e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d810:	e005      	b.n	800d81e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d812:	2300      	movs	r3, #0
 800d814:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d816:	2301      	movs	r3, #1
 800d818:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d81c:	bf00      	nop
    }

    if (pclk != 0U)
 800d81e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d820:	2b00      	cmp	r3, #0
 800d822:	d021      	beq.n	800d868 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d828:	4a1d      	ldr	r2, [pc, #116]	@ (800d8a0 <UART_SetConfig+0xacc>)
 800d82a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d82e:	461a      	mov	r2, r3
 800d830:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d832:	fbb3 f2f2 	udiv	r2, r3, r2
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	685b      	ldr	r3, [r3, #4]
 800d83a:	085b      	lsrs	r3, r3, #1
 800d83c:	441a      	add	r2, r3
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	685b      	ldr	r3, [r3, #4]
 800d842:	fbb2 f3f3 	udiv	r3, r2, r3
 800d846:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d84a:	2b0f      	cmp	r3, #15
 800d84c:	d909      	bls.n	800d862 <UART_SetConfig+0xa8e>
 800d84e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d850:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d854:	d205      	bcs.n	800d862 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d858:	b29a      	uxth	r2, r3
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	681b      	ldr	r3, [r3, #0]
 800d85e:	60da      	str	r2, [r3, #12]
 800d860:	e002      	b.n	800d868 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d862:	2301      	movs	r3, #1
 800d864:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d868:	697b      	ldr	r3, [r7, #20]
 800d86a:	2201      	movs	r2, #1
 800d86c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d870:	697b      	ldr	r3, [r7, #20]
 800d872:	2201      	movs	r2, #1
 800d874:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d878:	697b      	ldr	r3, [r7, #20]
 800d87a:	2200      	movs	r2, #0
 800d87c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d87e:	697b      	ldr	r3, [r7, #20]
 800d880:	2200      	movs	r2, #0
 800d882:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d884:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3748      	adds	r7, #72	@ 0x48
 800d88c:	46bd      	mov	sp, r7
 800d88e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d892:	bf00      	nop
 800d894:	58024400 	.word	0x58024400
 800d898:	03d09000 	.word	0x03d09000
 800d89c:	003d0900 	.word	0x003d0900
 800d8a0:	08014aa4 	.word	0x08014aa4

0800d8a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d8a4:	b480      	push	{r7}
 800d8a6:	b083      	sub	sp, #12
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8b0:	f003 0308 	and.w	r3, r3, #8
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d00a      	beq.n	800d8ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	430a      	orrs	r2, r1
 800d8cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8d2:	f003 0301 	and.w	r3, r3, #1
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d00a      	beq.n	800d8f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	685b      	ldr	r3, [r3, #4]
 800d8e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	430a      	orrs	r2, r1
 800d8ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8f4:	f003 0302 	and.w	r3, r3, #2
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d00a      	beq.n	800d912 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	685b      	ldr	r3, [r3, #4]
 800d902:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	430a      	orrs	r2, r1
 800d910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d916:	f003 0304 	and.w	r3, r3, #4
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d00a      	beq.n	800d934 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	685b      	ldr	r3, [r3, #4]
 800d924:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	430a      	orrs	r2, r1
 800d932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d938:	f003 0310 	and.w	r3, r3, #16
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d00a      	beq.n	800d956 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	689b      	ldr	r3, [r3, #8]
 800d946:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	681b      	ldr	r3, [r3, #0]
 800d952:	430a      	orrs	r2, r1
 800d954:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d95a:	f003 0320 	and.w	r3, r3, #32
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d00a      	beq.n	800d978 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	689b      	ldr	r3, [r3, #8]
 800d968:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	430a      	orrs	r2, r1
 800d976:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d97c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d980:	2b00      	cmp	r3, #0
 800d982:	d01a      	beq.n	800d9ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	685b      	ldr	r3, [r3, #4]
 800d98a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	430a      	orrs	r2, r1
 800d998:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d99e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d9a2:	d10a      	bne.n	800d9ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	685b      	ldr	r3, [r3, #4]
 800d9aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	430a      	orrs	r2, r1
 800d9b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d9be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d00a      	beq.n	800d9dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	685b      	ldr	r3, [r3, #4]
 800d9cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	430a      	orrs	r2, r1
 800d9da:	605a      	str	r2, [r3, #4]
  }
}
 800d9dc:	bf00      	nop
 800d9de:	370c      	adds	r7, #12
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e6:	4770      	bx	lr

0800d9e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b098      	sub	sp, #96	@ 0x60
 800d9ec:	af02      	add	r7, sp, #8
 800d9ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d9f8:	f7f4 fffa 	bl	80029f0 <HAL_GetTick>
 800d9fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	f003 0308 	and.w	r3, r3, #8
 800da08:	2b08      	cmp	r3, #8
 800da0a:	d12f      	bne.n	800da6c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800da0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800da10:	9300      	str	r3, [sp, #0]
 800da12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da14:	2200      	movs	r2, #0
 800da16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f000 f88e 	bl	800db3c <UART_WaitOnFlagUntilTimeout>
 800da20:	4603      	mov	r3, r0
 800da22:	2b00      	cmp	r3, #0
 800da24:	d022      	beq.n	800da6c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800da2e:	e853 3f00 	ldrex	r3, [r3]
 800da32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800da34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800da3a:	653b      	str	r3, [r7, #80]	@ 0x50
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	681b      	ldr	r3, [r3, #0]
 800da40:	461a      	mov	r2, r3
 800da42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800da44:	647b      	str	r3, [r7, #68]	@ 0x44
 800da46:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800da4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800da4c:	e841 2300 	strex	r3, r2, [r1]
 800da50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800da52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da54:	2b00      	cmp	r3, #0
 800da56:	d1e6      	bne.n	800da26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	2220      	movs	r2, #32
 800da5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	2200      	movs	r2, #0
 800da64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da68:	2303      	movs	r3, #3
 800da6a:	e063      	b.n	800db34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f003 0304 	and.w	r3, r3, #4
 800da76:	2b04      	cmp	r3, #4
 800da78:	d149      	bne.n	800db0e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800da7a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800da7e:	9300      	str	r3, [sp, #0]
 800da80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da82:	2200      	movs	r2, #0
 800da84:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f000 f857 	bl	800db3c <UART_WaitOnFlagUntilTimeout>
 800da8e:	4603      	mov	r3, r0
 800da90:	2b00      	cmp	r3, #0
 800da92:	d03c      	beq.n	800db0e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da9c:	e853 3f00 	ldrex	r3, [r3]
 800daa0:	623b      	str	r3, [r7, #32]
   return(result);
 800daa2:	6a3b      	ldr	r3, [r7, #32]
 800daa4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800daa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	461a      	mov	r2, r3
 800dab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dab2:	633b      	str	r3, [r7, #48]	@ 0x30
 800dab4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dab6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dab8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800daba:	e841 2300 	strex	r3, r2, [r1]
 800dabe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800dac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d1e6      	bne.n	800da94 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	3308      	adds	r3, #8
 800dacc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dace:	693b      	ldr	r3, [r7, #16]
 800dad0:	e853 3f00 	ldrex	r3, [r3]
 800dad4:	60fb      	str	r3, [r7, #12]
   return(result);
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	f023 0301 	bic.w	r3, r3, #1
 800dadc:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	3308      	adds	r3, #8
 800dae4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dae6:	61fa      	str	r2, [r7, #28]
 800dae8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daea:	69b9      	ldr	r1, [r7, #24]
 800daec:	69fa      	ldr	r2, [r7, #28]
 800daee:	e841 2300 	strex	r3, r2, [r1]
 800daf2:	617b      	str	r3, [r7, #20]
   return(result);
 800daf4:	697b      	ldr	r3, [r7, #20]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d1e5      	bne.n	800dac6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2220      	movs	r2, #32
 800dafe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	2200      	movs	r2, #0
 800db06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800db0a:	2303      	movs	r3, #3
 800db0c:	e012      	b.n	800db34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	2220      	movs	r2, #32
 800db12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	2220      	movs	r2, #32
 800db1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db1e:	687b      	ldr	r3, [r7, #4]
 800db20:	2200      	movs	r2, #0
 800db22:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2200      	movs	r2, #0
 800db28:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2200      	movs	r2, #0
 800db2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800db32:	2300      	movs	r3, #0
}
 800db34:	4618      	mov	r0, r3
 800db36:	3758      	adds	r7, #88	@ 0x58
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}

0800db3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b084      	sub	sp, #16
 800db40:	af00      	add	r7, sp, #0
 800db42:	60f8      	str	r0, [r7, #12]
 800db44:	60b9      	str	r1, [r7, #8]
 800db46:	603b      	str	r3, [r7, #0]
 800db48:	4613      	mov	r3, r2
 800db4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db4c:	e04f      	b.n	800dbee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800db4e:	69bb      	ldr	r3, [r7, #24]
 800db50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db54:	d04b      	beq.n	800dbee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800db56:	f7f4 ff4b 	bl	80029f0 <HAL_GetTick>
 800db5a:	4602      	mov	r2, r0
 800db5c:	683b      	ldr	r3, [r7, #0]
 800db5e:	1ad3      	subs	r3, r2, r3
 800db60:	69ba      	ldr	r2, [r7, #24]
 800db62:	429a      	cmp	r2, r3
 800db64:	d302      	bcc.n	800db6c <UART_WaitOnFlagUntilTimeout+0x30>
 800db66:	69bb      	ldr	r3, [r7, #24]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d101      	bne.n	800db70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800db6c:	2303      	movs	r3, #3
 800db6e:	e04e      	b.n	800dc0e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	681b      	ldr	r3, [r3, #0]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	f003 0304 	and.w	r3, r3, #4
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d037      	beq.n	800dbee <UART_WaitOnFlagUntilTimeout+0xb2>
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	2b80      	cmp	r3, #128	@ 0x80
 800db82:	d034      	beq.n	800dbee <UART_WaitOnFlagUntilTimeout+0xb2>
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	2b40      	cmp	r3, #64	@ 0x40
 800db88:	d031      	beq.n	800dbee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	69db      	ldr	r3, [r3, #28]
 800db90:	f003 0308 	and.w	r3, r3, #8
 800db94:	2b08      	cmp	r3, #8
 800db96:	d110      	bne.n	800dbba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	2208      	movs	r2, #8
 800db9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dba0:	68f8      	ldr	r0, [r7, #12]
 800dba2:	f000 f839 	bl	800dc18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	2208      	movs	r2, #8
 800dbaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	e029      	b.n	800dc0e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	681b      	ldr	r3, [r3, #0]
 800dbbe:	69db      	ldr	r3, [r3, #28]
 800dbc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800dbc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800dbc8:	d111      	bne.n	800dbee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800dbd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800dbd4:	68f8      	ldr	r0, [r7, #12]
 800dbd6:	f000 f81f 	bl	800dc18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2220      	movs	r2, #32
 800dbde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800dbea:	2303      	movs	r3, #3
 800dbec:	e00f      	b.n	800dc0e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	69da      	ldr	r2, [r3, #28]
 800dbf4:	68bb      	ldr	r3, [r7, #8]
 800dbf6:	4013      	ands	r3, r2
 800dbf8:	68ba      	ldr	r2, [r7, #8]
 800dbfa:	429a      	cmp	r2, r3
 800dbfc:	bf0c      	ite	eq
 800dbfe:	2301      	moveq	r3, #1
 800dc00:	2300      	movne	r3, #0
 800dc02:	b2db      	uxtb	r3, r3
 800dc04:	461a      	mov	r2, r3
 800dc06:	79fb      	ldrb	r3, [r7, #7]
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d0a0      	beq.n	800db4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800dc0c:	2300      	movs	r3, #0
}
 800dc0e:	4618      	mov	r0, r3
 800dc10:	3710      	adds	r7, #16
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
	...

0800dc18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b095      	sub	sp, #84	@ 0x54
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc28:	e853 3f00 	ldrex	r3, [r3]
 800dc2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dc2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dc34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	461a      	mov	r2, r3
 800dc3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc3e:	643b      	str	r3, [r7, #64]	@ 0x40
 800dc40:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dc44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dc46:	e841 2300 	strex	r3, r2, [r1]
 800dc4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dc4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d1e6      	bne.n	800dc20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	3308      	adds	r3, #8
 800dc58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc5a:	6a3b      	ldr	r3, [r7, #32]
 800dc5c:	e853 3f00 	ldrex	r3, [r3]
 800dc60:	61fb      	str	r3, [r7, #28]
   return(result);
 800dc62:	69fa      	ldr	r2, [r7, #28]
 800dc64:	4b1e      	ldr	r3, [pc, #120]	@ (800dce0 <UART_EndRxTransfer+0xc8>)
 800dc66:	4013      	ands	r3, r2
 800dc68:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	3308      	adds	r3, #8
 800dc70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dc72:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dc74:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dc78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc7a:	e841 2300 	strex	r3, r2, [r1]
 800dc7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dc80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d1e5      	bne.n	800dc52 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc8a:	2b01      	cmp	r3, #1
 800dc8c:	d118      	bne.n	800dcc0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	681b      	ldr	r3, [r3, #0]
 800dc92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	e853 3f00 	ldrex	r3, [r3]
 800dc9a:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	f023 0310 	bic.w	r3, r3, #16
 800dca2:	647b      	str	r3, [r7, #68]	@ 0x44
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	461a      	mov	r2, r3
 800dcaa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dcac:	61bb      	str	r3, [r7, #24]
 800dcae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcb0:	6979      	ldr	r1, [r7, #20]
 800dcb2:	69ba      	ldr	r2, [r7, #24]
 800dcb4:	e841 2300 	strex	r3, r2, [r1]
 800dcb8:	613b      	str	r3, [r7, #16]
   return(result);
 800dcba:	693b      	ldr	r3, [r7, #16]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d1e6      	bne.n	800dc8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2220      	movs	r2, #32
 800dcc4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2200      	movs	r2, #0
 800dccc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800dcd4:	bf00      	nop
 800dcd6:	3754      	adds	r7, #84	@ 0x54
 800dcd8:	46bd      	mov	sp, r7
 800dcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcde:	4770      	bx	lr
 800dce0:	effffffe 	.word	0xeffffffe

0800dce4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dce4:	b084      	sub	sp, #16
 800dce6:	b580      	push	{r7, lr}
 800dce8:	b084      	sub	sp, #16
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	6078      	str	r0, [r7, #4]
 800dcee:	f107 001c 	add.w	r0, r7, #28
 800dcf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dcf6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800dcfa:	2b01      	cmp	r3, #1
 800dcfc:	d121      	bne.n	800dd42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd02:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	68da      	ldr	r2, [r3, #12]
 800dd0e:	4b2c      	ldr	r3, [pc, #176]	@ (800ddc0 <USB_CoreInit+0xdc>)
 800dd10:	4013      	ands	r3, r2
 800dd12:	687a      	ldr	r2, [r7, #4]
 800dd14:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	68db      	ldr	r3, [r3, #12]
 800dd1a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dd22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dd26:	2b01      	cmp	r3, #1
 800dd28:	d105      	bne.n	800dd36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	68db      	ldr	r3, [r3, #12]
 800dd2e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dd36:	6878      	ldr	r0, [r7, #4]
 800dd38:	f001 faf6 	bl	800f328 <USB_CoreReset>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	73fb      	strb	r3, [r7, #15]
 800dd40:	e01b      	b.n	800dd7a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	68db      	ldr	r3, [r3, #12]
 800dd46:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dd4e:	6878      	ldr	r0, [r7, #4]
 800dd50:	f001 faea 	bl	800f328 <USB_CoreReset>
 800dd54:	4603      	mov	r3, r0
 800dd56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800dd58:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d106      	bne.n	800dd6e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd64:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	639a      	str	r2, [r3, #56]	@ 0x38
 800dd6c:	e005      	b.n	800dd7a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dd72:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800dd7a:	7fbb      	ldrb	r3, [r7, #30]
 800dd7c:	2b01      	cmp	r3, #1
 800dd7e:	d116      	bne.n	800ddae <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd84:	b29a      	uxth	r2, r3
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800dd8e:	4b0d      	ldr	r3, [pc, #52]	@ (800ddc4 <USB_CoreInit+0xe0>)
 800dd90:	4313      	orrs	r3, r2
 800dd92:	687a      	ldr	r2, [r7, #4]
 800dd94:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	689b      	ldr	r3, [r3, #8]
 800dd9a:	f043 0206 	orr.w	r2, r3, #6
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	689b      	ldr	r3, [r3, #8]
 800dda6:	f043 0220 	orr.w	r2, r3, #32
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ddae:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddb0:	4618      	mov	r0, r3
 800ddb2:	3710      	adds	r7, #16
 800ddb4:	46bd      	mov	sp, r7
 800ddb6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ddba:	b004      	add	sp, #16
 800ddbc:	4770      	bx	lr
 800ddbe:	bf00      	nop
 800ddc0:	ffbdffbf 	.word	0xffbdffbf
 800ddc4:	03ee0000 	.word	0x03ee0000

0800ddc8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b087      	sub	sp, #28
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	60f8      	str	r0, [r7, #12]
 800ddd0:	60b9      	str	r1, [r7, #8]
 800ddd2:	4613      	mov	r3, r2
 800ddd4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ddd6:	79fb      	ldrb	r3, [r7, #7]
 800ddd8:	2b02      	cmp	r3, #2
 800ddda:	d165      	bne.n	800dea8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800dddc:	68bb      	ldr	r3, [r7, #8]
 800ddde:	4a41      	ldr	r2, [pc, #260]	@ (800dee4 <USB_SetTurnaroundTime+0x11c>)
 800dde0:	4293      	cmp	r3, r2
 800dde2:	d906      	bls.n	800ddf2 <USB_SetTurnaroundTime+0x2a>
 800dde4:	68bb      	ldr	r3, [r7, #8]
 800dde6:	4a40      	ldr	r2, [pc, #256]	@ (800dee8 <USB_SetTurnaroundTime+0x120>)
 800dde8:	4293      	cmp	r3, r2
 800ddea:	d202      	bcs.n	800ddf2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ddec:	230f      	movs	r3, #15
 800ddee:	617b      	str	r3, [r7, #20]
 800ddf0:	e062      	b.n	800deb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ddf2:	68bb      	ldr	r3, [r7, #8]
 800ddf4:	4a3c      	ldr	r2, [pc, #240]	@ (800dee8 <USB_SetTurnaroundTime+0x120>)
 800ddf6:	4293      	cmp	r3, r2
 800ddf8:	d306      	bcc.n	800de08 <USB_SetTurnaroundTime+0x40>
 800ddfa:	68bb      	ldr	r3, [r7, #8]
 800ddfc:	4a3b      	ldr	r2, [pc, #236]	@ (800deec <USB_SetTurnaroundTime+0x124>)
 800ddfe:	4293      	cmp	r3, r2
 800de00:	d202      	bcs.n	800de08 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800de02:	230e      	movs	r3, #14
 800de04:	617b      	str	r3, [r7, #20]
 800de06:	e057      	b.n	800deb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800de08:	68bb      	ldr	r3, [r7, #8]
 800de0a:	4a38      	ldr	r2, [pc, #224]	@ (800deec <USB_SetTurnaroundTime+0x124>)
 800de0c:	4293      	cmp	r3, r2
 800de0e:	d306      	bcc.n	800de1e <USB_SetTurnaroundTime+0x56>
 800de10:	68bb      	ldr	r3, [r7, #8]
 800de12:	4a37      	ldr	r2, [pc, #220]	@ (800def0 <USB_SetTurnaroundTime+0x128>)
 800de14:	4293      	cmp	r3, r2
 800de16:	d202      	bcs.n	800de1e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800de18:	230d      	movs	r3, #13
 800de1a:	617b      	str	r3, [r7, #20]
 800de1c:	e04c      	b.n	800deb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800de1e:	68bb      	ldr	r3, [r7, #8]
 800de20:	4a33      	ldr	r2, [pc, #204]	@ (800def0 <USB_SetTurnaroundTime+0x128>)
 800de22:	4293      	cmp	r3, r2
 800de24:	d306      	bcc.n	800de34 <USB_SetTurnaroundTime+0x6c>
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	4a32      	ldr	r2, [pc, #200]	@ (800def4 <USB_SetTurnaroundTime+0x12c>)
 800de2a:	4293      	cmp	r3, r2
 800de2c:	d802      	bhi.n	800de34 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800de2e:	230c      	movs	r3, #12
 800de30:	617b      	str	r3, [r7, #20]
 800de32:	e041      	b.n	800deb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800de34:	68bb      	ldr	r3, [r7, #8]
 800de36:	4a2f      	ldr	r2, [pc, #188]	@ (800def4 <USB_SetTurnaroundTime+0x12c>)
 800de38:	4293      	cmp	r3, r2
 800de3a:	d906      	bls.n	800de4a <USB_SetTurnaroundTime+0x82>
 800de3c:	68bb      	ldr	r3, [r7, #8]
 800de3e:	4a2e      	ldr	r2, [pc, #184]	@ (800def8 <USB_SetTurnaroundTime+0x130>)
 800de40:	4293      	cmp	r3, r2
 800de42:	d802      	bhi.n	800de4a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800de44:	230b      	movs	r3, #11
 800de46:	617b      	str	r3, [r7, #20]
 800de48:	e036      	b.n	800deb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800de4a:	68bb      	ldr	r3, [r7, #8]
 800de4c:	4a2a      	ldr	r2, [pc, #168]	@ (800def8 <USB_SetTurnaroundTime+0x130>)
 800de4e:	4293      	cmp	r3, r2
 800de50:	d906      	bls.n	800de60 <USB_SetTurnaroundTime+0x98>
 800de52:	68bb      	ldr	r3, [r7, #8]
 800de54:	4a29      	ldr	r2, [pc, #164]	@ (800defc <USB_SetTurnaroundTime+0x134>)
 800de56:	4293      	cmp	r3, r2
 800de58:	d802      	bhi.n	800de60 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800de5a:	230a      	movs	r3, #10
 800de5c:	617b      	str	r3, [r7, #20]
 800de5e:	e02b      	b.n	800deb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	4a26      	ldr	r2, [pc, #152]	@ (800defc <USB_SetTurnaroundTime+0x134>)
 800de64:	4293      	cmp	r3, r2
 800de66:	d906      	bls.n	800de76 <USB_SetTurnaroundTime+0xae>
 800de68:	68bb      	ldr	r3, [r7, #8]
 800de6a:	4a25      	ldr	r2, [pc, #148]	@ (800df00 <USB_SetTurnaroundTime+0x138>)
 800de6c:	4293      	cmp	r3, r2
 800de6e:	d202      	bcs.n	800de76 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800de70:	2309      	movs	r3, #9
 800de72:	617b      	str	r3, [r7, #20]
 800de74:	e020      	b.n	800deb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	4a21      	ldr	r2, [pc, #132]	@ (800df00 <USB_SetTurnaroundTime+0x138>)
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d306      	bcc.n	800de8c <USB_SetTurnaroundTime+0xc4>
 800de7e:	68bb      	ldr	r3, [r7, #8]
 800de80:	4a20      	ldr	r2, [pc, #128]	@ (800df04 <USB_SetTurnaroundTime+0x13c>)
 800de82:	4293      	cmp	r3, r2
 800de84:	d802      	bhi.n	800de8c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800de86:	2308      	movs	r3, #8
 800de88:	617b      	str	r3, [r7, #20]
 800de8a:	e015      	b.n	800deb8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	4a1d      	ldr	r2, [pc, #116]	@ (800df04 <USB_SetTurnaroundTime+0x13c>)
 800de90:	4293      	cmp	r3, r2
 800de92:	d906      	bls.n	800dea2 <USB_SetTurnaroundTime+0xda>
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	4a1c      	ldr	r2, [pc, #112]	@ (800df08 <USB_SetTurnaroundTime+0x140>)
 800de98:	4293      	cmp	r3, r2
 800de9a:	d202      	bcs.n	800dea2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800de9c:	2307      	movs	r3, #7
 800de9e:	617b      	str	r3, [r7, #20]
 800dea0:	e00a      	b.n	800deb8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800dea2:	2306      	movs	r3, #6
 800dea4:	617b      	str	r3, [r7, #20]
 800dea6:	e007      	b.n	800deb8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800dea8:	79fb      	ldrb	r3, [r7, #7]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d102      	bne.n	800deb4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800deae:	2309      	movs	r3, #9
 800deb0:	617b      	str	r3, [r7, #20]
 800deb2:	e001      	b.n	800deb8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800deb4:	2309      	movs	r3, #9
 800deb6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	68db      	ldr	r3, [r3, #12]
 800debc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	68da      	ldr	r2, [r3, #12]
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	029b      	lsls	r3, r3, #10
 800decc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800ded0:	431a      	orrs	r2, r3
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ded6:	2300      	movs	r3, #0
}
 800ded8:	4618      	mov	r0, r3
 800deda:	371c      	adds	r7, #28
 800dedc:	46bd      	mov	sp, r7
 800dede:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dee2:	4770      	bx	lr
 800dee4:	00d8acbf 	.word	0x00d8acbf
 800dee8:	00e4e1c0 	.word	0x00e4e1c0
 800deec:	00f42400 	.word	0x00f42400
 800def0:	01067380 	.word	0x01067380
 800def4:	011a499f 	.word	0x011a499f
 800def8:	01312cff 	.word	0x01312cff
 800defc:	014ca43f 	.word	0x014ca43f
 800df00:	016e3600 	.word	0x016e3600
 800df04:	01a6ab1f 	.word	0x01a6ab1f
 800df08:	01e84800 	.word	0x01e84800

0800df0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800df0c:	b480      	push	{r7}
 800df0e:	b083      	sub	sp, #12
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	689b      	ldr	r3, [r3, #8]
 800df18:	f043 0201 	orr.w	r2, r3, #1
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800df20:	2300      	movs	r3, #0
}
 800df22:	4618      	mov	r0, r3
 800df24:	370c      	adds	r7, #12
 800df26:	46bd      	mov	sp, r7
 800df28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2c:	4770      	bx	lr

0800df2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800df2e:	b480      	push	{r7}
 800df30:	b083      	sub	sp, #12
 800df32:	af00      	add	r7, sp, #0
 800df34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	689b      	ldr	r3, [r3, #8]
 800df3a:	f023 0201 	bic.w	r2, r3, #1
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800df42:	2300      	movs	r3, #0
}
 800df44:	4618      	mov	r0, r3
 800df46:	370c      	adds	r7, #12
 800df48:	46bd      	mov	sp, r7
 800df4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4e:	4770      	bx	lr

0800df50 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800df50:	b580      	push	{r7, lr}
 800df52:	b084      	sub	sp, #16
 800df54:	af00      	add	r7, sp, #0
 800df56:	6078      	str	r0, [r7, #4]
 800df58:	460b      	mov	r3, r1
 800df5a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800df5c:	2300      	movs	r3, #0
 800df5e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	68db      	ldr	r3, [r3, #12]
 800df64:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800df6c:	78fb      	ldrb	r3, [r7, #3]
 800df6e:	2b01      	cmp	r3, #1
 800df70:	d115      	bne.n	800df9e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	68db      	ldr	r3, [r3, #12]
 800df76:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800df7e:	200a      	movs	r0, #10
 800df80:	f7f4 fd42 	bl	8002a08 <HAL_Delay>
      ms += 10U;
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	330a      	adds	r3, #10
 800df88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800df8a:	6878      	ldr	r0, [r7, #4]
 800df8c:	f001 f93b 	bl	800f206 <USB_GetMode>
 800df90:	4603      	mov	r3, r0
 800df92:	2b01      	cmp	r3, #1
 800df94:	d01e      	beq.n	800dfd4 <USB_SetCurrentMode+0x84>
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	2bc7      	cmp	r3, #199	@ 0xc7
 800df9a:	d9f0      	bls.n	800df7e <USB_SetCurrentMode+0x2e>
 800df9c:	e01a      	b.n	800dfd4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800df9e:	78fb      	ldrb	r3, [r7, #3]
 800dfa0:	2b00      	cmp	r3, #0
 800dfa2:	d115      	bne.n	800dfd0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	68db      	ldr	r3, [r3, #12]
 800dfa8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800dfb0:	200a      	movs	r0, #10
 800dfb2:	f7f4 fd29 	bl	8002a08 <HAL_Delay>
      ms += 10U;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	330a      	adds	r3, #10
 800dfba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f001 f922 	bl	800f206 <USB_GetMode>
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d005      	beq.n	800dfd4 <USB_SetCurrentMode+0x84>
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	2bc7      	cmp	r3, #199	@ 0xc7
 800dfcc:	d9f0      	bls.n	800dfb0 <USB_SetCurrentMode+0x60>
 800dfce:	e001      	b.n	800dfd4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	e005      	b.n	800dfe0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	2bc8      	cmp	r3, #200	@ 0xc8
 800dfd8:	d101      	bne.n	800dfde <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800dfda:	2301      	movs	r3, #1
 800dfdc:	e000      	b.n	800dfe0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800dfde:	2300      	movs	r3, #0
}
 800dfe0:	4618      	mov	r0, r3
 800dfe2:	3710      	adds	r7, #16
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	bd80      	pop	{r7, pc}

0800dfe8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dfe8:	b084      	sub	sp, #16
 800dfea:	b580      	push	{r7, lr}
 800dfec:	b086      	sub	sp, #24
 800dfee:	af00      	add	r7, sp, #0
 800dff0:	6078      	str	r0, [r7, #4]
 800dff2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800dff6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800dffa:	2300      	movs	r3, #0
 800dffc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e002:	2300      	movs	r3, #0
 800e004:	613b      	str	r3, [r7, #16]
 800e006:	e009      	b.n	800e01c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e008:	687a      	ldr	r2, [r7, #4]
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	3340      	adds	r3, #64	@ 0x40
 800e00e:	009b      	lsls	r3, r3, #2
 800e010:	4413      	add	r3, r2
 800e012:	2200      	movs	r2, #0
 800e014:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e016:	693b      	ldr	r3, [r7, #16]
 800e018:	3301      	adds	r3, #1
 800e01a:	613b      	str	r3, [r7, #16]
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	2b0e      	cmp	r3, #14
 800e020:	d9f2      	bls.n	800e008 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e022:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e026:	2b00      	cmp	r3, #0
 800e028:	d11c      	bne.n	800e064 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e030:	685b      	ldr	r3, [r3, #4]
 800e032:	68fa      	ldr	r2, [r7, #12]
 800e034:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e038:	f043 0302 	orr.w	r3, r3, #2
 800e03c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e042:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	681b      	ldr	r3, [r3, #0]
 800e05a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	601a      	str	r2, [r3, #0]
 800e062:	e005      	b.n	800e070 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e068:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e076:	461a      	mov	r2, r3
 800e078:	2300      	movs	r3, #0
 800e07a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e07c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800e080:	2b01      	cmp	r3, #1
 800e082:	d10d      	bne.n	800e0a0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e084:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d104      	bne.n	800e096 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e08c:	2100      	movs	r1, #0
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f000 f968 	bl	800e364 <USB_SetDevSpeed>
 800e094:	e008      	b.n	800e0a8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e096:	2101      	movs	r1, #1
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f000 f963 	bl	800e364 <USB_SetDevSpeed>
 800e09e:	e003      	b.n	800e0a8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e0a0:	2103      	movs	r1, #3
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f000 f95e 	bl	800e364 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e0a8:	2110      	movs	r1, #16
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f000 f8fa 	bl	800e2a4 <USB_FlushTxFifo>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d001      	beq.n	800e0ba <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e0ba:	6878      	ldr	r0, [r7, #4]
 800e0bc:	f000 f924 	bl	800e308 <USB_FlushRxFifo>
 800e0c0:	4603      	mov	r3, r0
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d001      	beq.n	800e0ca <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800e0c6:	2301      	movs	r3, #1
 800e0c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0d0:	461a      	mov	r2, r3
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0dc:	461a      	mov	r2, r3
 800e0de:	2300      	movs	r3, #0
 800e0e0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e0ee:	2300      	movs	r3, #0
 800e0f0:	613b      	str	r3, [r7, #16]
 800e0f2:	e043      	b.n	800e17c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	015a      	lsls	r2, r3, #5
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	4413      	add	r3, r2
 800e0fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e106:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e10a:	d118      	bne.n	800e13e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d10a      	bne.n	800e128 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e112:	693b      	ldr	r3, [r7, #16]
 800e114:	015a      	lsls	r2, r3, #5
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	4413      	add	r3, r2
 800e11a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e11e:	461a      	mov	r2, r3
 800e120:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e124:	6013      	str	r3, [r2, #0]
 800e126:	e013      	b.n	800e150 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e128:	693b      	ldr	r3, [r7, #16]
 800e12a:	015a      	lsls	r2, r3, #5
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	4413      	add	r3, r2
 800e130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e134:	461a      	mov	r2, r3
 800e136:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e13a:	6013      	str	r3, [r2, #0]
 800e13c:	e008      	b.n	800e150 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e13e:	693b      	ldr	r3, [r7, #16]
 800e140:	015a      	lsls	r2, r3, #5
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	4413      	add	r3, r2
 800e146:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e14a:	461a      	mov	r2, r3
 800e14c:	2300      	movs	r3, #0
 800e14e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e150:	693b      	ldr	r3, [r7, #16]
 800e152:	015a      	lsls	r2, r3, #5
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	4413      	add	r3, r2
 800e158:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e15c:	461a      	mov	r2, r3
 800e15e:	2300      	movs	r3, #0
 800e160:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e162:	693b      	ldr	r3, [r7, #16]
 800e164:	015a      	lsls	r2, r3, #5
 800e166:	68fb      	ldr	r3, [r7, #12]
 800e168:	4413      	add	r3, r2
 800e16a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e16e:	461a      	mov	r2, r3
 800e170:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e174:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	3301      	adds	r3, #1
 800e17a:	613b      	str	r3, [r7, #16]
 800e17c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e180:	461a      	mov	r2, r3
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	4293      	cmp	r3, r2
 800e186:	d3b5      	bcc.n	800e0f4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e188:	2300      	movs	r3, #0
 800e18a:	613b      	str	r3, [r7, #16]
 800e18c:	e043      	b.n	800e216 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	015a      	lsls	r2, r3, #5
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	4413      	add	r3, r2
 800e196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e1a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e1a4:	d118      	bne.n	800e1d8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800e1a6:	693b      	ldr	r3, [r7, #16]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d10a      	bne.n	800e1c2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e1ac:	693b      	ldr	r3, [r7, #16]
 800e1ae:	015a      	lsls	r2, r3, #5
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	4413      	add	r3, r2
 800e1b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1b8:	461a      	mov	r2, r3
 800e1ba:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e1be:	6013      	str	r3, [r2, #0]
 800e1c0:	e013      	b.n	800e1ea <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e1c2:	693b      	ldr	r3, [r7, #16]
 800e1c4:	015a      	lsls	r2, r3, #5
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	4413      	add	r3, r2
 800e1ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e1d4:	6013      	str	r3, [r2, #0]
 800e1d6:	e008      	b.n	800e1ea <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	015a      	lsls	r2, r3, #5
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	4413      	add	r3, r2
 800e1e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1e4:	461a      	mov	r2, r3
 800e1e6:	2300      	movs	r3, #0
 800e1e8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	015a      	lsls	r2, r3, #5
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	4413      	add	r3, r2
 800e1f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e1f6:	461a      	mov	r2, r3
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e1fc:	693b      	ldr	r3, [r7, #16]
 800e1fe:	015a      	lsls	r2, r3, #5
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	4413      	add	r3, r2
 800e204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e208:	461a      	mov	r2, r3
 800e20a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e20e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	3301      	adds	r3, #1
 800e214:	613b      	str	r3, [r7, #16]
 800e216:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e21a:	461a      	mov	r2, r3
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	4293      	cmp	r3, r2
 800e220:	d3b5      	bcc.n	800e18e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e228:	691b      	ldr	r3, [r3, #16]
 800e22a:	68fa      	ldr	r2, [r7, #12]
 800e22c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e230:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e234:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	2200      	movs	r2, #0
 800e23a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800e242:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e244:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d105      	bne.n	800e258 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	699b      	ldr	r3, [r3, #24]
 800e250:	f043 0210 	orr.w	r2, r3, #16
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	699a      	ldr	r2, [r3, #24]
 800e25c:	4b0f      	ldr	r3, [pc, #60]	@ (800e29c <USB_DevInit+0x2b4>)
 800e25e:	4313      	orrs	r3, r2
 800e260:	687a      	ldr	r2, [r7, #4]
 800e262:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e264:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d005      	beq.n	800e278 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	699b      	ldr	r3, [r3, #24]
 800e270:	f043 0208 	orr.w	r2, r3, #8
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e278:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e27c:	2b01      	cmp	r3, #1
 800e27e:	d105      	bne.n	800e28c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	699a      	ldr	r2, [r3, #24]
 800e284:	4b06      	ldr	r3, [pc, #24]	@ (800e2a0 <USB_DevInit+0x2b8>)
 800e286:	4313      	orrs	r3, r2
 800e288:	687a      	ldr	r2, [r7, #4]
 800e28a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e28c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e28e:	4618      	mov	r0, r3
 800e290:	3718      	adds	r7, #24
 800e292:	46bd      	mov	sp, r7
 800e294:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e298:	b004      	add	sp, #16
 800e29a:	4770      	bx	lr
 800e29c:	803c3800 	.word	0x803c3800
 800e2a0:	40000004 	.word	0x40000004

0800e2a4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e2a4:	b480      	push	{r7}
 800e2a6:	b085      	sub	sp, #20
 800e2a8:	af00      	add	r7, sp, #0
 800e2aa:	6078      	str	r0, [r7, #4]
 800e2ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e2ae:	2300      	movs	r3, #0
 800e2b0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	3301      	adds	r3, #1
 800e2b6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e2be:	d901      	bls.n	800e2c4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e2c0:	2303      	movs	r3, #3
 800e2c2:	e01b      	b.n	800e2fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	691b      	ldr	r3, [r3, #16]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	daf2      	bge.n	800e2b2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e2cc:	2300      	movs	r3, #0
 800e2ce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	019b      	lsls	r3, r3, #6
 800e2d4:	f043 0220 	orr.w	r2, r3, #32
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	3301      	adds	r3, #1
 800e2e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e2e2:	68fb      	ldr	r3, [r7, #12]
 800e2e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e2e8:	d901      	bls.n	800e2ee <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e2ea:	2303      	movs	r3, #3
 800e2ec:	e006      	b.n	800e2fc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	691b      	ldr	r3, [r3, #16]
 800e2f2:	f003 0320 	and.w	r3, r3, #32
 800e2f6:	2b20      	cmp	r3, #32
 800e2f8:	d0f0      	beq.n	800e2dc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e2fa:	2300      	movs	r3, #0
}
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	3714      	adds	r7, #20
 800e300:	46bd      	mov	sp, r7
 800e302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e306:	4770      	bx	lr

0800e308 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e308:	b480      	push	{r7}
 800e30a:	b085      	sub	sp, #20
 800e30c:	af00      	add	r7, sp, #0
 800e30e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e310:	2300      	movs	r3, #0
 800e312:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e314:	68fb      	ldr	r3, [r7, #12]
 800e316:	3301      	adds	r3, #1
 800e318:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e320:	d901      	bls.n	800e326 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e322:	2303      	movs	r3, #3
 800e324:	e018      	b.n	800e358 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	691b      	ldr	r3, [r3, #16]
 800e32a:	2b00      	cmp	r3, #0
 800e32c:	daf2      	bge.n	800e314 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e32e:	2300      	movs	r3, #0
 800e330:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2210      	movs	r2, #16
 800e336:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e338:	68fb      	ldr	r3, [r7, #12]
 800e33a:	3301      	adds	r3, #1
 800e33c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e344:	d901      	bls.n	800e34a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e346:	2303      	movs	r3, #3
 800e348:	e006      	b.n	800e358 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	691b      	ldr	r3, [r3, #16]
 800e34e:	f003 0310 	and.w	r3, r3, #16
 800e352:	2b10      	cmp	r3, #16
 800e354:	d0f0      	beq.n	800e338 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e356:	2300      	movs	r3, #0
}
 800e358:	4618      	mov	r0, r3
 800e35a:	3714      	adds	r7, #20
 800e35c:	46bd      	mov	sp, r7
 800e35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e362:	4770      	bx	lr

0800e364 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e364:	b480      	push	{r7}
 800e366:	b085      	sub	sp, #20
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	460b      	mov	r3, r1
 800e36e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e37a:	681a      	ldr	r2, [r3, #0]
 800e37c:	78fb      	ldrb	r3, [r7, #3]
 800e37e:	68f9      	ldr	r1, [r7, #12]
 800e380:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e384:	4313      	orrs	r3, r2
 800e386:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e388:	2300      	movs	r3, #0
}
 800e38a:	4618      	mov	r0, r3
 800e38c:	3714      	adds	r7, #20
 800e38e:	46bd      	mov	sp, r7
 800e390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e394:	4770      	bx	lr

0800e396 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800e396:	b480      	push	{r7}
 800e398:	b087      	sub	sp, #28
 800e39a:	af00      	add	r7, sp, #0
 800e39c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e3a2:	693b      	ldr	r3, [r7, #16]
 800e3a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e3a8:	689b      	ldr	r3, [r3, #8]
 800e3aa:	f003 0306 	and.w	r3, r3, #6
 800e3ae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d102      	bne.n	800e3bc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	75fb      	strb	r3, [r7, #23]
 800e3ba:	e00a      	b.n	800e3d2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	2b02      	cmp	r3, #2
 800e3c0:	d002      	beq.n	800e3c8 <USB_GetDevSpeed+0x32>
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	2b06      	cmp	r3, #6
 800e3c6:	d102      	bne.n	800e3ce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e3c8:	2302      	movs	r3, #2
 800e3ca:	75fb      	strb	r3, [r7, #23]
 800e3cc:	e001      	b.n	800e3d2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e3ce:	230f      	movs	r3, #15
 800e3d0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e3d2:	7dfb      	ldrb	r3, [r7, #23]
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	371c      	adds	r7, #28
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3de:	4770      	bx	lr

0800e3e0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e3e0:	b480      	push	{r7}
 800e3e2:	b085      	sub	sp, #20
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	6078      	str	r0, [r7, #4]
 800e3e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e3ee:	683b      	ldr	r3, [r7, #0]
 800e3f0:	781b      	ldrb	r3, [r3, #0]
 800e3f2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e3f4:	683b      	ldr	r3, [r7, #0]
 800e3f6:	785b      	ldrb	r3, [r3, #1]
 800e3f8:	2b01      	cmp	r3, #1
 800e3fa:	d139      	bne.n	800e470 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e402:	69da      	ldr	r2, [r3, #28]
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	f003 030f 	and.w	r3, r3, #15
 800e40c:	2101      	movs	r1, #1
 800e40e:	fa01 f303 	lsl.w	r3, r1, r3
 800e412:	b29b      	uxth	r3, r3
 800e414:	68f9      	ldr	r1, [r7, #12]
 800e416:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e41a:	4313      	orrs	r3, r2
 800e41c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	015a      	lsls	r2, r3, #5
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	4413      	add	r3, r2
 800e426:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e430:	2b00      	cmp	r3, #0
 800e432:	d153      	bne.n	800e4dc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	015a      	lsls	r2, r3, #5
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	4413      	add	r3, r2
 800e43c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e440:	681a      	ldr	r2, [r3, #0]
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	689b      	ldr	r3, [r3, #8]
 800e446:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	791b      	ldrb	r3, [r3, #4]
 800e44e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e450:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e452:	68bb      	ldr	r3, [r7, #8]
 800e454:	059b      	lsls	r3, r3, #22
 800e456:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e458:	431a      	orrs	r2, r3
 800e45a:	68bb      	ldr	r3, [r7, #8]
 800e45c:	0159      	lsls	r1, r3, #5
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	440b      	add	r3, r1
 800e462:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e466:	4619      	mov	r1, r3
 800e468:	4b20      	ldr	r3, [pc, #128]	@ (800e4ec <USB_ActivateEndpoint+0x10c>)
 800e46a:	4313      	orrs	r3, r2
 800e46c:	600b      	str	r3, [r1, #0]
 800e46e:	e035      	b.n	800e4dc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e476:	69da      	ldr	r2, [r3, #28]
 800e478:	683b      	ldr	r3, [r7, #0]
 800e47a:	781b      	ldrb	r3, [r3, #0]
 800e47c:	f003 030f 	and.w	r3, r3, #15
 800e480:	2101      	movs	r1, #1
 800e482:	fa01 f303 	lsl.w	r3, r1, r3
 800e486:	041b      	lsls	r3, r3, #16
 800e488:	68f9      	ldr	r1, [r7, #12]
 800e48a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e48e:	4313      	orrs	r3, r2
 800e490:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e492:	68bb      	ldr	r3, [r7, #8]
 800e494:	015a      	lsls	r2, r3, #5
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	4413      	add	r3, r2
 800e49a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d119      	bne.n	800e4dc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e4a8:	68bb      	ldr	r3, [r7, #8]
 800e4aa:	015a      	lsls	r2, r3, #5
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	4413      	add	r3, r2
 800e4b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4b4:	681a      	ldr	r2, [r3, #0]
 800e4b6:	683b      	ldr	r3, [r7, #0]
 800e4b8:	689b      	ldr	r3, [r3, #8]
 800e4ba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	791b      	ldrb	r3, [r3, #4]
 800e4c2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e4c4:	430b      	orrs	r3, r1
 800e4c6:	431a      	orrs	r2, r3
 800e4c8:	68bb      	ldr	r3, [r7, #8]
 800e4ca:	0159      	lsls	r1, r3, #5
 800e4cc:	68fb      	ldr	r3, [r7, #12]
 800e4ce:	440b      	add	r3, r1
 800e4d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e4d4:	4619      	mov	r1, r3
 800e4d6:	4b05      	ldr	r3, [pc, #20]	@ (800e4ec <USB_ActivateEndpoint+0x10c>)
 800e4d8:	4313      	orrs	r3, r2
 800e4da:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e4dc:	2300      	movs	r3, #0
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3714      	adds	r7, #20
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e8:	4770      	bx	lr
 800e4ea:	bf00      	nop
 800e4ec:	10008000 	.word	0x10008000

0800e4f0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b085      	sub	sp, #20
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
 800e4f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	781b      	ldrb	r3, [r3, #0]
 800e502:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	785b      	ldrb	r3, [r3, #1]
 800e508:	2b01      	cmp	r3, #1
 800e50a:	d161      	bne.n	800e5d0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	015a      	lsls	r2, r3, #5
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	4413      	add	r3, r2
 800e514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e51e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e522:	d11f      	bne.n	800e564 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	015a      	lsls	r2, r3, #5
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	4413      	add	r3, r2
 800e52c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	68ba      	ldr	r2, [r7, #8]
 800e534:	0151      	lsls	r1, r2, #5
 800e536:	68fa      	ldr	r2, [r7, #12]
 800e538:	440a      	add	r2, r1
 800e53a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e53e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e542:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	015a      	lsls	r2, r3, #5
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	4413      	add	r3, r2
 800e54c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	68ba      	ldr	r2, [r7, #8]
 800e554:	0151      	lsls	r1, r2, #5
 800e556:	68fa      	ldr	r2, [r7, #12]
 800e558:	440a      	add	r2, r1
 800e55a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e55e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e562:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e56a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e56c:	683b      	ldr	r3, [r7, #0]
 800e56e:	781b      	ldrb	r3, [r3, #0]
 800e570:	f003 030f 	and.w	r3, r3, #15
 800e574:	2101      	movs	r1, #1
 800e576:	fa01 f303 	lsl.w	r3, r1, r3
 800e57a:	b29b      	uxth	r3, r3
 800e57c:	43db      	mvns	r3, r3
 800e57e:	68f9      	ldr	r1, [r7, #12]
 800e580:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e584:	4013      	ands	r3, r2
 800e586:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e58e:	69da      	ldr	r2, [r3, #28]
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	781b      	ldrb	r3, [r3, #0]
 800e594:	f003 030f 	and.w	r3, r3, #15
 800e598:	2101      	movs	r1, #1
 800e59a:	fa01 f303 	lsl.w	r3, r1, r3
 800e59e:	b29b      	uxth	r3, r3
 800e5a0:	43db      	mvns	r3, r3
 800e5a2:	68f9      	ldr	r1, [r7, #12]
 800e5a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e5a8:	4013      	ands	r3, r2
 800e5aa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	015a      	lsls	r2, r3, #5
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	4413      	add	r3, r2
 800e5b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5b8:	681a      	ldr	r2, [r3, #0]
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	0159      	lsls	r1, r3, #5
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	440b      	add	r3, r1
 800e5c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5c6:	4619      	mov	r1, r3
 800e5c8:	4b35      	ldr	r3, [pc, #212]	@ (800e6a0 <USB_DeactivateEndpoint+0x1b0>)
 800e5ca:	4013      	ands	r3, r2
 800e5cc:	600b      	str	r3, [r1, #0]
 800e5ce:	e060      	b.n	800e692 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	015a      	lsls	r2, r3, #5
 800e5d4:	68fb      	ldr	r3, [r7, #12]
 800e5d6:	4413      	add	r3, r2
 800e5d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e5e2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e5e6:	d11f      	bne.n	800e628 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	015a      	lsls	r2, r3, #5
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	4413      	add	r3, r2
 800e5f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	68ba      	ldr	r2, [r7, #8]
 800e5f8:	0151      	lsls	r1, r2, #5
 800e5fa:	68fa      	ldr	r2, [r7, #12]
 800e5fc:	440a      	add	r2, r1
 800e5fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e602:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e606:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	015a      	lsls	r2, r3, #5
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	4413      	add	r3, r2
 800e610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	68ba      	ldr	r2, [r7, #8]
 800e618:	0151      	lsls	r1, r2, #5
 800e61a:	68fa      	ldr	r2, [r7, #12]
 800e61c:	440a      	add	r2, r1
 800e61e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e622:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e626:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e62e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	781b      	ldrb	r3, [r3, #0]
 800e634:	f003 030f 	and.w	r3, r3, #15
 800e638:	2101      	movs	r1, #1
 800e63a:	fa01 f303 	lsl.w	r3, r1, r3
 800e63e:	041b      	lsls	r3, r3, #16
 800e640:	43db      	mvns	r3, r3
 800e642:	68f9      	ldr	r1, [r7, #12]
 800e644:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e648:	4013      	ands	r3, r2
 800e64a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e652:	69da      	ldr	r2, [r3, #28]
 800e654:	683b      	ldr	r3, [r7, #0]
 800e656:	781b      	ldrb	r3, [r3, #0]
 800e658:	f003 030f 	and.w	r3, r3, #15
 800e65c:	2101      	movs	r1, #1
 800e65e:	fa01 f303 	lsl.w	r3, r1, r3
 800e662:	041b      	lsls	r3, r3, #16
 800e664:	43db      	mvns	r3, r3
 800e666:	68f9      	ldr	r1, [r7, #12]
 800e668:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e66c:	4013      	ands	r3, r2
 800e66e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	015a      	lsls	r2, r3, #5
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	4413      	add	r3, r2
 800e678:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e67c:	681a      	ldr	r2, [r3, #0]
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	0159      	lsls	r1, r3, #5
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	440b      	add	r3, r1
 800e686:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e68a:	4619      	mov	r1, r3
 800e68c:	4b05      	ldr	r3, [pc, #20]	@ (800e6a4 <USB_DeactivateEndpoint+0x1b4>)
 800e68e:	4013      	ands	r3, r2
 800e690:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e692:	2300      	movs	r3, #0
}
 800e694:	4618      	mov	r0, r3
 800e696:	3714      	adds	r7, #20
 800e698:	46bd      	mov	sp, r7
 800e69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e69e:	4770      	bx	lr
 800e6a0:	ec337800 	.word	0xec337800
 800e6a4:	eff37800 	.word	0xeff37800

0800e6a8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b08a      	sub	sp, #40	@ 0x28
 800e6ac:	af02      	add	r7, sp, #8
 800e6ae:	60f8      	str	r0, [r7, #12]
 800e6b0:	60b9      	str	r1, [r7, #8]
 800e6b2:	4613      	mov	r3, r2
 800e6b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e6ba:	68bb      	ldr	r3, [r7, #8]
 800e6bc:	781b      	ldrb	r3, [r3, #0]
 800e6be:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	785b      	ldrb	r3, [r3, #1]
 800e6c4:	2b01      	cmp	r3, #1
 800e6c6:	f040 8181 	bne.w	800e9cc <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e6ca:	68bb      	ldr	r3, [r7, #8]
 800e6cc:	691b      	ldr	r3, [r3, #16]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d132      	bne.n	800e738 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e6d2:	69bb      	ldr	r3, [r7, #24]
 800e6d4:	015a      	lsls	r2, r3, #5
 800e6d6:	69fb      	ldr	r3, [r7, #28]
 800e6d8:	4413      	add	r3, r2
 800e6da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6de:	691a      	ldr	r2, [r3, #16]
 800e6e0:	69bb      	ldr	r3, [r7, #24]
 800e6e2:	0159      	lsls	r1, r3, #5
 800e6e4:	69fb      	ldr	r3, [r7, #28]
 800e6e6:	440b      	add	r3, r1
 800e6e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6ec:	4619      	mov	r1, r3
 800e6ee:	4ba5      	ldr	r3, [pc, #660]	@ (800e984 <USB_EPStartXfer+0x2dc>)
 800e6f0:	4013      	ands	r3, r2
 800e6f2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e6f4:	69bb      	ldr	r3, [r7, #24]
 800e6f6:	015a      	lsls	r2, r3, #5
 800e6f8:	69fb      	ldr	r3, [r7, #28]
 800e6fa:	4413      	add	r3, r2
 800e6fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e700:	691b      	ldr	r3, [r3, #16]
 800e702:	69ba      	ldr	r2, [r7, #24]
 800e704:	0151      	lsls	r1, r2, #5
 800e706:	69fa      	ldr	r2, [r7, #28]
 800e708:	440a      	add	r2, r1
 800e70a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e70e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e712:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e714:	69bb      	ldr	r3, [r7, #24]
 800e716:	015a      	lsls	r2, r3, #5
 800e718:	69fb      	ldr	r3, [r7, #28]
 800e71a:	4413      	add	r3, r2
 800e71c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e720:	691a      	ldr	r2, [r3, #16]
 800e722:	69bb      	ldr	r3, [r7, #24]
 800e724:	0159      	lsls	r1, r3, #5
 800e726:	69fb      	ldr	r3, [r7, #28]
 800e728:	440b      	add	r3, r1
 800e72a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e72e:	4619      	mov	r1, r3
 800e730:	4b95      	ldr	r3, [pc, #596]	@ (800e988 <USB_EPStartXfer+0x2e0>)
 800e732:	4013      	ands	r3, r2
 800e734:	610b      	str	r3, [r1, #16]
 800e736:	e092      	b.n	800e85e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e738:	69bb      	ldr	r3, [r7, #24]
 800e73a:	015a      	lsls	r2, r3, #5
 800e73c:	69fb      	ldr	r3, [r7, #28]
 800e73e:	4413      	add	r3, r2
 800e740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e744:	691a      	ldr	r2, [r3, #16]
 800e746:	69bb      	ldr	r3, [r7, #24]
 800e748:	0159      	lsls	r1, r3, #5
 800e74a:	69fb      	ldr	r3, [r7, #28]
 800e74c:	440b      	add	r3, r1
 800e74e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e752:	4619      	mov	r1, r3
 800e754:	4b8c      	ldr	r3, [pc, #560]	@ (800e988 <USB_EPStartXfer+0x2e0>)
 800e756:	4013      	ands	r3, r2
 800e758:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e75a:	69bb      	ldr	r3, [r7, #24]
 800e75c:	015a      	lsls	r2, r3, #5
 800e75e:	69fb      	ldr	r3, [r7, #28]
 800e760:	4413      	add	r3, r2
 800e762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e766:	691a      	ldr	r2, [r3, #16]
 800e768:	69bb      	ldr	r3, [r7, #24]
 800e76a:	0159      	lsls	r1, r3, #5
 800e76c:	69fb      	ldr	r3, [r7, #28]
 800e76e:	440b      	add	r3, r1
 800e770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e774:	4619      	mov	r1, r3
 800e776:	4b83      	ldr	r3, [pc, #524]	@ (800e984 <USB_EPStartXfer+0x2dc>)
 800e778:	4013      	ands	r3, r2
 800e77a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800e77c:	69bb      	ldr	r3, [r7, #24]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d11a      	bne.n	800e7b8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e782:	68bb      	ldr	r3, [r7, #8]
 800e784:	691a      	ldr	r2, [r3, #16]
 800e786:	68bb      	ldr	r3, [r7, #8]
 800e788:	689b      	ldr	r3, [r3, #8]
 800e78a:	429a      	cmp	r2, r3
 800e78c:	d903      	bls.n	800e796 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e78e:	68bb      	ldr	r3, [r7, #8]
 800e790:	689a      	ldr	r2, [r3, #8]
 800e792:	68bb      	ldr	r3, [r7, #8]
 800e794:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e796:	69bb      	ldr	r3, [r7, #24]
 800e798:	015a      	lsls	r2, r3, #5
 800e79a:	69fb      	ldr	r3, [r7, #28]
 800e79c:	4413      	add	r3, r2
 800e79e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7a2:	691b      	ldr	r3, [r3, #16]
 800e7a4:	69ba      	ldr	r2, [r7, #24]
 800e7a6:	0151      	lsls	r1, r2, #5
 800e7a8:	69fa      	ldr	r2, [r7, #28]
 800e7aa:	440a      	add	r2, r1
 800e7ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e7b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e7b4:	6113      	str	r3, [r2, #16]
 800e7b6:	e01b      	b.n	800e7f0 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e7b8:	69bb      	ldr	r3, [r7, #24]
 800e7ba:	015a      	lsls	r2, r3, #5
 800e7bc:	69fb      	ldr	r3, [r7, #28]
 800e7be:	4413      	add	r3, r2
 800e7c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7c4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e7c6:	68bb      	ldr	r3, [r7, #8]
 800e7c8:	6919      	ldr	r1, [r3, #16]
 800e7ca:	68bb      	ldr	r3, [r7, #8]
 800e7cc:	689b      	ldr	r3, [r3, #8]
 800e7ce:	440b      	add	r3, r1
 800e7d0:	1e59      	subs	r1, r3, #1
 800e7d2:	68bb      	ldr	r3, [r7, #8]
 800e7d4:	689b      	ldr	r3, [r3, #8]
 800e7d6:	fbb1 f3f3 	udiv	r3, r1, r3
 800e7da:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e7dc:	4b6b      	ldr	r3, [pc, #428]	@ (800e98c <USB_EPStartXfer+0x2e4>)
 800e7de:	400b      	ands	r3, r1
 800e7e0:	69b9      	ldr	r1, [r7, #24]
 800e7e2:	0148      	lsls	r0, r1, #5
 800e7e4:	69f9      	ldr	r1, [r7, #28]
 800e7e6:	4401      	add	r1, r0
 800e7e8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e7ec:	4313      	orrs	r3, r2
 800e7ee:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e7f0:	69bb      	ldr	r3, [r7, #24]
 800e7f2:	015a      	lsls	r2, r3, #5
 800e7f4:	69fb      	ldr	r3, [r7, #28]
 800e7f6:	4413      	add	r3, r2
 800e7f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7fc:	691a      	ldr	r2, [r3, #16]
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	691b      	ldr	r3, [r3, #16]
 800e802:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e806:	69b9      	ldr	r1, [r7, #24]
 800e808:	0148      	lsls	r0, r1, #5
 800e80a:	69f9      	ldr	r1, [r7, #28]
 800e80c:	4401      	add	r1, r0
 800e80e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e812:	4313      	orrs	r3, r2
 800e814:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	791b      	ldrb	r3, [r3, #4]
 800e81a:	2b01      	cmp	r3, #1
 800e81c:	d11f      	bne.n	800e85e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e81e:	69bb      	ldr	r3, [r7, #24]
 800e820:	015a      	lsls	r2, r3, #5
 800e822:	69fb      	ldr	r3, [r7, #28]
 800e824:	4413      	add	r3, r2
 800e826:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e82a:	691b      	ldr	r3, [r3, #16]
 800e82c:	69ba      	ldr	r2, [r7, #24]
 800e82e:	0151      	lsls	r1, r2, #5
 800e830:	69fa      	ldr	r2, [r7, #28]
 800e832:	440a      	add	r2, r1
 800e834:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e838:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e83c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e83e:	69bb      	ldr	r3, [r7, #24]
 800e840:	015a      	lsls	r2, r3, #5
 800e842:	69fb      	ldr	r3, [r7, #28]
 800e844:	4413      	add	r3, r2
 800e846:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e84a:	691b      	ldr	r3, [r3, #16]
 800e84c:	69ba      	ldr	r2, [r7, #24]
 800e84e:	0151      	lsls	r1, r2, #5
 800e850:	69fa      	ldr	r2, [r7, #28]
 800e852:	440a      	add	r2, r1
 800e854:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e858:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e85c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e85e:	79fb      	ldrb	r3, [r7, #7]
 800e860:	2b01      	cmp	r3, #1
 800e862:	d14b      	bne.n	800e8fc <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	69db      	ldr	r3, [r3, #28]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d009      	beq.n	800e880 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e86c:	69bb      	ldr	r3, [r7, #24]
 800e86e:	015a      	lsls	r2, r3, #5
 800e870:	69fb      	ldr	r3, [r7, #28]
 800e872:	4413      	add	r3, r2
 800e874:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e878:	461a      	mov	r2, r3
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	69db      	ldr	r3, [r3, #28]
 800e87e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	791b      	ldrb	r3, [r3, #4]
 800e884:	2b01      	cmp	r3, #1
 800e886:	d128      	bne.n	800e8da <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e888:	69fb      	ldr	r3, [r7, #28]
 800e88a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e88e:	689b      	ldr	r3, [r3, #8]
 800e890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e894:	2b00      	cmp	r3, #0
 800e896:	d110      	bne.n	800e8ba <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e898:	69bb      	ldr	r3, [r7, #24]
 800e89a:	015a      	lsls	r2, r3, #5
 800e89c:	69fb      	ldr	r3, [r7, #28]
 800e89e:	4413      	add	r3, r2
 800e8a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8a4:	681b      	ldr	r3, [r3, #0]
 800e8a6:	69ba      	ldr	r2, [r7, #24]
 800e8a8:	0151      	lsls	r1, r2, #5
 800e8aa:	69fa      	ldr	r2, [r7, #28]
 800e8ac:	440a      	add	r2, r1
 800e8ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8b2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e8b6:	6013      	str	r3, [r2, #0]
 800e8b8:	e00f      	b.n	800e8da <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e8ba:	69bb      	ldr	r3, [r7, #24]
 800e8bc:	015a      	lsls	r2, r3, #5
 800e8be:	69fb      	ldr	r3, [r7, #28]
 800e8c0:	4413      	add	r3, r2
 800e8c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	69ba      	ldr	r2, [r7, #24]
 800e8ca:	0151      	lsls	r1, r2, #5
 800e8cc:	69fa      	ldr	r2, [r7, #28]
 800e8ce:	440a      	add	r2, r1
 800e8d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e8d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e8da:	69bb      	ldr	r3, [r7, #24]
 800e8dc:	015a      	lsls	r2, r3, #5
 800e8de:	69fb      	ldr	r3, [r7, #28]
 800e8e0:	4413      	add	r3, r2
 800e8e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8e6:	681b      	ldr	r3, [r3, #0]
 800e8e8:	69ba      	ldr	r2, [r7, #24]
 800e8ea:	0151      	lsls	r1, r2, #5
 800e8ec:	69fa      	ldr	r2, [r7, #28]
 800e8ee:	440a      	add	r2, r1
 800e8f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8f4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e8f8:	6013      	str	r3, [r2, #0]
 800e8fa:	e16a      	b.n	800ebd2 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e8fc:	69bb      	ldr	r3, [r7, #24]
 800e8fe:	015a      	lsls	r2, r3, #5
 800e900:	69fb      	ldr	r3, [r7, #28]
 800e902:	4413      	add	r3, r2
 800e904:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	69ba      	ldr	r2, [r7, #24]
 800e90c:	0151      	lsls	r1, r2, #5
 800e90e:	69fa      	ldr	r2, [r7, #28]
 800e910:	440a      	add	r2, r1
 800e912:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e916:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e91a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e91c:	68bb      	ldr	r3, [r7, #8]
 800e91e:	791b      	ldrb	r3, [r3, #4]
 800e920:	2b01      	cmp	r3, #1
 800e922:	d015      	beq.n	800e950 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e924:	68bb      	ldr	r3, [r7, #8]
 800e926:	691b      	ldr	r3, [r3, #16]
 800e928:	2b00      	cmp	r3, #0
 800e92a:	f000 8152 	beq.w	800ebd2 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e92e:	69fb      	ldr	r3, [r7, #28]
 800e930:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e934:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e936:	68bb      	ldr	r3, [r7, #8]
 800e938:	781b      	ldrb	r3, [r3, #0]
 800e93a:	f003 030f 	and.w	r3, r3, #15
 800e93e:	2101      	movs	r1, #1
 800e940:	fa01 f303 	lsl.w	r3, r1, r3
 800e944:	69f9      	ldr	r1, [r7, #28]
 800e946:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e94a:	4313      	orrs	r3, r2
 800e94c:	634b      	str	r3, [r1, #52]	@ 0x34
 800e94e:	e140      	b.n	800ebd2 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e950:	69fb      	ldr	r3, [r7, #28]
 800e952:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e956:	689b      	ldr	r3, [r3, #8]
 800e958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d117      	bne.n	800e990 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e960:	69bb      	ldr	r3, [r7, #24]
 800e962:	015a      	lsls	r2, r3, #5
 800e964:	69fb      	ldr	r3, [r7, #28]
 800e966:	4413      	add	r3, r2
 800e968:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	69ba      	ldr	r2, [r7, #24]
 800e970:	0151      	lsls	r1, r2, #5
 800e972:	69fa      	ldr	r2, [r7, #28]
 800e974:	440a      	add	r2, r1
 800e976:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e97a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e97e:	6013      	str	r3, [r2, #0]
 800e980:	e016      	b.n	800e9b0 <USB_EPStartXfer+0x308>
 800e982:	bf00      	nop
 800e984:	e007ffff 	.word	0xe007ffff
 800e988:	fff80000 	.word	0xfff80000
 800e98c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e990:	69bb      	ldr	r3, [r7, #24]
 800e992:	015a      	lsls	r2, r3, #5
 800e994:	69fb      	ldr	r3, [r7, #28]
 800e996:	4413      	add	r3, r2
 800e998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	69ba      	ldr	r2, [r7, #24]
 800e9a0:	0151      	lsls	r1, r2, #5
 800e9a2:	69fa      	ldr	r2, [r7, #28]
 800e9a4:	440a      	add	r2, r1
 800e9a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e9aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e9ae:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e9b0:	68bb      	ldr	r3, [r7, #8]
 800e9b2:	68d9      	ldr	r1, [r3, #12]
 800e9b4:	68bb      	ldr	r3, [r7, #8]
 800e9b6:	781a      	ldrb	r2, [r3, #0]
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	691b      	ldr	r3, [r3, #16]
 800e9bc:	b298      	uxth	r0, r3
 800e9be:	79fb      	ldrb	r3, [r7, #7]
 800e9c0:	9300      	str	r3, [sp, #0]
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	68f8      	ldr	r0, [r7, #12]
 800e9c6:	f000 f9b9 	bl	800ed3c <USB_WritePacket>
 800e9ca:	e102      	b.n	800ebd2 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e9cc:	69bb      	ldr	r3, [r7, #24]
 800e9ce:	015a      	lsls	r2, r3, #5
 800e9d0:	69fb      	ldr	r3, [r7, #28]
 800e9d2:	4413      	add	r3, r2
 800e9d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9d8:	691a      	ldr	r2, [r3, #16]
 800e9da:	69bb      	ldr	r3, [r7, #24]
 800e9dc:	0159      	lsls	r1, r3, #5
 800e9de:	69fb      	ldr	r3, [r7, #28]
 800e9e0:	440b      	add	r3, r1
 800e9e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9e6:	4619      	mov	r1, r3
 800e9e8:	4b7c      	ldr	r3, [pc, #496]	@ (800ebdc <USB_EPStartXfer+0x534>)
 800e9ea:	4013      	ands	r3, r2
 800e9ec:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e9ee:	69bb      	ldr	r3, [r7, #24]
 800e9f0:	015a      	lsls	r2, r3, #5
 800e9f2:	69fb      	ldr	r3, [r7, #28]
 800e9f4:	4413      	add	r3, r2
 800e9f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9fa:	691a      	ldr	r2, [r3, #16]
 800e9fc:	69bb      	ldr	r3, [r7, #24]
 800e9fe:	0159      	lsls	r1, r3, #5
 800ea00:	69fb      	ldr	r3, [r7, #28]
 800ea02:	440b      	add	r3, r1
 800ea04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea08:	4619      	mov	r1, r3
 800ea0a:	4b75      	ldr	r3, [pc, #468]	@ (800ebe0 <USB_EPStartXfer+0x538>)
 800ea0c:	4013      	ands	r3, r2
 800ea0e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800ea10:	69bb      	ldr	r3, [r7, #24]
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d12f      	bne.n	800ea76 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800ea16:	68bb      	ldr	r3, [r7, #8]
 800ea18:	691b      	ldr	r3, [r3, #16]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d003      	beq.n	800ea26 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800ea1e:	68bb      	ldr	r3, [r7, #8]
 800ea20:	689a      	ldr	r2, [r3, #8]
 800ea22:	68bb      	ldr	r3, [r7, #8]
 800ea24:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	689a      	ldr	r2, [r3, #8]
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ea2e:	69bb      	ldr	r3, [r7, #24]
 800ea30:	015a      	lsls	r2, r3, #5
 800ea32:	69fb      	ldr	r3, [r7, #28]
 800ea34:	4413      	add	r3, r2
 800ea36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea3a:	691a      	ldr	r2, [r3, #16]
 800ea3c:	68bb      	ldr	r3, [r7, #8]
 800ea3e:	6a1b      	ldr	r3, [r3, #32]
 800ea40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ea44:	69b9      	ldr	r1, [r7, #24]
 800ea46:	0148      	lsls	r0, r1, #5
 800ea48:	69f9      	ldr	r1, [r7, #28]
 800ea4a:	4401      	add	r1, r0
 800ea4c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ea50:	4313      	orrs	r3, r2
 800ea52:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ea54:	69bb      	ldr	r3, [r7, #24]
 800ea56:	015a      	lsls	r2, r3, #5
 800ea58:	69fb      	ldr	r3, [r7, #28]
 800ea5a:	4413      	add	r3, r2
 800ea5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea60:	691b      	ldr	r3, [r3, #16]
 800ea62:	69ba      	ldr	r2, [r7, #24]
 800ea64:	0151      	lsls	r1, r2, #5
 800ea66:	69fa      	ldr	r2, [r7, #28]
 800ea68:	440a      	add	r2, r1
 800ea6a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea6e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ea72:	6113      	str	r3, [r2, #16]
 800ea74:	e05f      	b.n	800eb36 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800ea76:	68bb      	ldr	r3, [r7, #8]
 800ea78:	691b      	ldr	r3, [r3, #16]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d123      	bne.n	800eac6 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ea7e:	69bb      	ldr	r3, [r7, #24]
 800ea80:	015a      	lsls	r2, r3, #5
 800ea82:	69fb      	ldr	r3, [r7, #28]
 800ea84:	4413      	add	r3, r2
 800ea86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea8a:	691a      	ldr	r2, [r3, #16]
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	689b      	ldr	r3, [r3, #8]
 800ea90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ea94:	69b9      	ldr	r1, [r7, #24]
 800ea96:	0148      	lsls	r0, r1, #5
 800ea98:	69f9      	ldr	r1, [r7, #28]
 800ea9a:	4401      	add	r1, r0
 800ea9c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eaa0:	4313      	orrs	r3, r2
 800eaa2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eaa4:	69bb      	ldr	r3, [r7, #24]
 800eaa6:	015a      	lsls	r2, r3, #5
 800eaa8:	69fb      	ldr	r3, [r7, #28]
 800eaaa:	4413      	add	r3, r2
 800eaac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eab0:	691b      	ldr	r3, [r3, #16]
 800eab2:	69ba      	ldr	r2, [r7, #24]
 800eab4:	0151      	lsls	r1, r2, #5
 800eab6:	69fa      	ldr	r2, [r7, #28]
 800eab8:	440a      	add	r2, r1
 800eaba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eabe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800eac2:	6113      	str	r3, [r2, #16]
 800eac4:	e037      	b.n	800eb36 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800eac6:	68bb      	ldr	r3, [r7, #8]
 800eac8:	691a      	ldr	r2, [r3, #16]
 800eaca:	68bb      	ldr	r3, [r7, #8]
 800eacc:	689b      	ldr	r3, [r3, #8]
 800eace:	4413      	add	r3, r2
 800ead0:	1e5a      	subs	r2, r3, #1
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	689b      	ldr	r3, [r3, #8]
 800ead6:	fbb2 f3f3 	udiv	r3, r2, r3
 800eada:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	689b      	ldr	r3, [r3, #8]
 800eae0:	8afa      	ldrh	r2, [r7, #22]
 800eae2:	fb03 f202 	mul.w	r2, r3, r2
 800eae6:	68bb      	ldr	r3, [r7, #8]
 800eae8:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800eaea:	69bb      	ldr	r3, [r7, #24]
 800eaec:	015a      	lsls	r2, r3, #5
 800eaee:	69fb      	ldr	r3, [r7, #28]
 800eaf0:	4413      	add	r3, r2
 800eaf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eaf6:	691a      	ldr	r2, [r3, #16]
 800eaf8:	8afb      	ldrh	r3, [r7, #22]
 800eafa:	04d9      	lsls	r1, r3, #19
 800eafc:	4b39      	ldr	r3, [pc, #228]	@ (800ebe4 <USB_EPStartXfer+0x53c>)
 800eafe:	400b      	ands	r3, r1
 800eb00:	69b9      	ldr	r1, [r7, #24]
 800eb02:	0148      	lsls	r0, r1, #5
 800eb04:	69f9      	ldr	r1, [r7, #28]
 800eb06:	4401      	add	r1, r0
 800eb08:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eb0c:	4313      	orrs	r3, r2
 800eb0e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800eb10:	69bb      	ldr	r3, [r7, #24]
 800eb12:	015a      	lsls	r2, r3, #5
 800eb14:	69fb      	ldr	r3, [r7, #28]
 800eb16:	4413      	add	r3, r2
 800eb18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb1c:	691a      	ldr	r2, [r3, #16]
 800eb1e:	68bb      	ldr	r3, [r7, #8]
 800eb20:	6a1b      	ldr	r3, [r3, #32]
 800eb22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eb26:	69b9      	ldr	r1, [r7, #24]
 800eb28:	0148      	lsls	r0, r1, #5
 800eb2a:	69f9      	ldr	r1, [r7, #28]
 800eb2c:	4401      	add	r1, r0
 800eb2e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eb32:	4313      	orrs	r3, r2
 800eb34:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800eb36:	79fb      	ldrb	r3, [r7, #7]
 800eb38:	2b01      	cmp	r3, #1
 800eb3a:	d10d      	bne.n	800eb58 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800eb3c:	68bb      	ldr	r3, [r7, #8]
 800eb3e:	68db      	ldr	r3, [r3, #12]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d009      	beq.n	800eb58 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800eb44:	68bb      	ldr	r3, [r7, #8]
 800eb46:	68d9      	ldr	r1, [r3, #12]
 800eb48:	69bb      	ldr	r3, [r7, #24]
 800eb4a:	015a      	lsls	r2, r3, #5
 800eb4c:	69fb      	ldr	r3, [r7, #28]
 800eb4e:	4413      	add	r3, r2
 800eb50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb54:	460a      	mov	r2, r1
 800eb56:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800eb58:	68bb      	ldr	r3, [r7, #8]
 800eb5a:	791b      	ldrb	r3, [r3, #4]
 800eb5c:	2b01      	cmp	r3, #1
 800eb5e:	d128      	bne.n	800ebb2 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800eb60:	69fb      	ldr	r3, [r7, #28]
 800eb62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eb66:	689b      	ldr	r3, [r3, #8]
 800eb68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d110      	bne.n	800eb92 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800eb70:	69bb      	ldr	r3, [r7, #24]
 800eb72:	015a      	lsls	r2, r3, #5
 800eb74:	69fb      	ldr	r3, [r7, #28]
 800eb76:	4413      	add	r3, r2
 800eb78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	69ba      	ldr	r2, [r7, #24]
 800eb80:	0151      	lsls	r1, r2, #5
 800eb82:	69fa      	ldr	r2, [r7, #28]
 800eb84:	440a      	add	r2, r1
 800eb86:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb8a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800eb8e:	6013      	str	r3, [r2, #0]
 800eb90:	e00f      	b.n	800ebb2 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800eb92:	69bb      	ldr	r3, [r7, #24]
 800eb94:	015a      	lsls	r2, r3, #5
 800eb96:	69fb      	ldr	r3, [r7, #28]
 800eb98:	4413      	add	r3, r2
 800eb9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	69ba      	ldr	r2, [r7, #24]
 800eba2:	0151      	lsls	r1, r2, #5
 800eba4:	69fa      	ldr	r2, [r7, #28]
 800eba6:	440a      	add	r2, r1
 800eba8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ebac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ebb0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ebb2:	69bb      	ldr	r3, [r7, #24]
 800ebb4:	015a      	lsls	r2, r3, #5
 800ebb6:	69fb      	ldr	r3, [r7, #28]
 800ebb8:	4413      	add	r3, r2
 800ebba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	69ba      	ldr	r2, [r7, #24]
 800ebc2:	0151      	lsls	r1, r2, #5
 800ebc4:	69fa      	ldr	r2, [r7, #28]
 800ebc6:	440a      	add	r2, r1
 800ebc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ebcc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ebd0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ebd2:	2300      	movs	r3, #0
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3720      	adds	r7, #32
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd80      	pop	{r7, pc}
 800ebdc:	fff80000 	.word	0xfff80000
 800ebe0:	e007ffff 	.word	0xe007ffff
 800ebe4:	1ff80000 	.word	0x1ff80000

0800ebe8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ebe8:	b480      	push	{r7}
 800ebea:	b087      	sub	sp, #28
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
 800ebf0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ebf6:	2300      	movs	r3, #0
 800ebf8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ebfe:	683b      	ldr	r3, [r7, #0]
 800ec00:	785b      	ldrb	r3, [r3, #1]
 800ec02:	2b01      	cmp	r3, #1
 800ec04:	d14a      	bne.n	800ec9c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	781b      	ldrb	r3, [r3, #0]
 800ec0a:	015a      	lsls	r2, r3, #5
 800ec0c:	693b      	ldr	r3, [r7, #16]
 800ec0e:	4413      	add	r3, r2
 800ec10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ec1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ec1e:	f040 8086 	bne.w	800ed2e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ec22:	683b      	ldr	r3, [r7, #0]
 800ec24:	781b      	ldrb	r3, [r3, #0]
 800ec26:	015a      	lsls	r2, r3, #5
 800ec28:	693b      	ldr	r3, [r7, #16]
 800ec2a:	4413      	add	r3, r2
 800ec2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	683a      	ldr	r2, [r7, #0]
 800ec34:	7812      	ldrb	r2, [r2, #0]
 800ec36:	0151      	lsls	r1, r2, #5
 800ec38:	693a      	ldr	r2, [r7, #16]
 800ec3a:	440a      	add	r2, r1
 800ec3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ec40:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ec44:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	781b      	ldrb	r3, [r3, #0]
 800ec4a:	015a      	lsls	r2, r3, #5
 800ec4c:	693b      	ldr	r3, [r7, #16]
 800ec4e:	4413      	add	r3, r2
 800ec50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	683a      	ldr	r2, [r7, #0]
 800ec58:	7812      	ldrb	r2, [r2, #0]
 800ec5a:	0151      	lsls	r1, r2, #5
 800ec5c:	693a      	ldr	r2, [r7, #16]
 800ec5e:	440a      	add	r2, r1
 800ec60:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ec64:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ec68:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	3301      	adds	r3, #1
 800ec6e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ec76:	4293      	cmp	r3, r2
 800ec78:	d902      	bls.n	800ec80 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ec7a:	2301      	movs	r3, #1
 800ec7c:	75fb      	strb	r3, [r7, #23]
          break;
 800ec7e:	e056      	b.n	800ed2e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ec80:	683b      	ldr	r3, [r7, #0]
 800ec82:	781b      	ldrb	r3, [r3, #0]
 800ec84:	015a      	lsls	r2, r3, #5
 800ec86:	693b      	ldr	r3, [r7, #16]
 800ec88:	4413      	add	r3, r2
 800ec8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ec94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ec98:	d0e7      	beq.n	800ec6a <USB_EPStopXfer+0x82>
 800ec9a:	e048      	b.n	800ed2e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ec9c:	683b      	ldr	r3, [r7, #0]
 800ec9e:	781b      	ldrb	r3, [r3, #0]
 800eca0:	015a      	lsls	r2, r3, #5
 800eca2:	693b      	ldr	r3, [r7, #16]
 800eca4:	4413      	add	r3, r2
 800eca6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecaa:	681b      	ldr	r3, [r3, #0]
 800ecac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ecb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ecb4:	d13b      	bne.n	800ed2e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	781b      	ldrb	r3, [r3, #0]
 800ecba:	015a      	lsls	r2, r3, #5
 800ecbc:	693b      	ldr	r3, [r7, #16]
 800ecbe:	4413      	add	r3, r2
 800ecc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	683a      	ldr	r2, [r7, #0]
 800ecc8:	7812      	ldrb	r2, [r2, #0]
 800ecca:	0151      	lsls	r1, r2, #5
 800eccc:	693a      	ldr	r2, [r7, #16]
 800ecce:	440a      	add	r2, r1
 800ecd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ecd4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ecd8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ecda:	683b      	ldr	r3, [r7, #0]
 800ecdc:	781b      	ldrb	r3, [r3, #0]
 800ecde:	015a      	lsls	r2, r3, #5
 800ece0:	693b      	ldr	r3, [r7, #16]
 800ece2:	4413      	add	r3, r2
 800ece4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	683a      	ldr	r2, [r7, #0]
 800ecec:	7812      	ldrb	r2, [r2, #0]
 800ecee:	0151      	lsls	r1, r2, #5
 800ecf0:	693a      	ldr	r2, [r7, #16]
 800ecf2:	440a      	add	r2, r1
 800ecf4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ecf8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ecfc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	3301      	adds	r3, #1
 800ed02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ed0a:	4293      	cmp	r3, r2
 800ed0c:	d902      	bls.n	800ed14 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ed0e:	2301      	movs	r3, #1
 800ed10:	75fb      	strb	r3, [r7, #23]
          break;
 800ed12:	e00c      	b.n	800ed2e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800ed14:	683b      	ldr	r3, [r7, #0]
 800ed16:	781b      	ldrb	r3, [r3, #0]
 800ed18:	015a      	lsls	r2, r3, #5
 800ed1a:	693b      	ldr	r3, [r7, #16]
 800ed1c:	4413      	add	r3, r2
 800ed1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ed28:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ed2c:	d0e7      	beq.n	800ecfe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ed2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed30:	4618      	mov	r0, r3
 800ed32:	371c      	adds	r7, #28
 800ed34:	46bd      	mov	sp, r7
 800ed36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3a:	4770      	bx	lr

0800ed3c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ed3c:	b480      	push	{r7}
 800ed3e:	b089      	sub	sp, #36	@ 0x24
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	60f8      	str	r0, [r7, #12]
 800ed44:	60b9      	str	r1, [r7, #8]
 800ed46:	4611      	mov	r1, r2
 800ed48:	461a      	mov	r2, r3
 800ed4a:	460b      	mov	r3, r1
 800ed4c:	71fb      	strb	r3, [r7, #7]
 800ed4e:	4613      	mov	r3, r2
 800ed50:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ed5a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d123      	bne.n	800edaa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ed62:	88bb      	ldrh	r3, [r7, #4]
 800ed64:	3303      	adds	r3, #3
 800ed66:	089b      	lsrs	r3, r3, #2
 800ed68:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	61bb      	str	r3, [r7, #24]
 800ed6e:	e018      	b.n	800eda2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ed70:	79fb      	ldrb	r3, [r7, #7]
 800ed72:	031a      	lsls	r2, r3, #12
 800ed74:	697b      	ldr	r3, [r7, #20]
 800ed76:	4413      	add	r3, r2
 800ed78:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ed7c:	461a      	mov	r2, r3
 800ed7e:	69fb      	ldr	r3, [r7, #28]
 800ed80:	681b      	ldr	r3, [r3, #0]
 800ed82:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ed84:	69fb      	ldr	r3, [r7, #28]
 800ed86:	3301      	adds	r3, #1
 800ed88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ed8a:	69fb      	ldr	r3, [r7, #28]
 800ed8c:	3301      	adds	r3, #1
 800ed8e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ed90:	69fb      	ldr	r3, [r7, #28]
 800ed92:	3301      	adds	r3, #1
 800ed94:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ed96:	69fb      	ldr	r3, [r7, #28]
 800ed98:	3301      	adds	r3, #1
 800ed9a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ed9c:	69bb      	ldr	r3, [r7, #24]
 800ed9e:	3301      	adds	r3, #1
 800eda0:	61bb      	str	r3, [r7, #24]
 800eda2:	69ba      	ldr	r2, [r7, #24]
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	429a      	cmp	r2, r3
 800eda8:	d3e2      	bcc.n	800ed70 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800edaa:	2300      	movs	r3, #0
}
 800edac:	4618      	mov	r0, r3
 800edae:	3724      	adds	r7, #36	@ 0x24
 800edb0:	46bd      	mov	sp, r7
 800edb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb6:	4770      	bx	lr

0800edb8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800edb8:	b480      	push	{r7}
 800edba:	b08b      	sub	sp, #44	@ 0x2c
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	60f8      	str	r0, [r7, #12]
 800edc0:	60b9      	str	r1, [r7, #8]
 800edc2:	4613      	mov	r3, r2
 800edc4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800edce:	88fb      	ldrh	r3, [r7, #6]
 800edd0:	089b      	lsrs	r3, r3, #2
 800edd2:	b29b      	uxth	r3, r3
 800edd4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800edd6:	88fb      	ldrh	r3, [r7, #6]
 800edd8:	f003 0303 	and.w	r3, r3, #3
 800eddc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800edde:	2300      	movs	r3, #0
 800ede0:	623b      	str	r3, [r7, #32]
 800ede2:	e014      	b.n	800ee0e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ede4:	69bb      	ldr	r3, [r7, #24]
 800ede6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800edea:	681a      	ldr	r2, [r3, #0]
 800edec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edee:	601a      	str	r2, [r3, #0]
    pDest++;
 800edf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edf2:	3301      	adds	r3, #1
 800edf4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800edf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edf8:	3301      	adds	r3, #1
 800edfa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800edfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edfe:	3301      	adds	r3, #1
 800ee00:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ee02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee04:	3301      	adds	r3, #1
 800ee06:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ee08:	6a3b      	ldr	r3, [r7, #32]
 800ee0a:	3301      	adds	r3, #1
 800ee0c:	623b      	str	r3, [r7, #32]
 800ee0e:	6a3a      	ldr	r2, [r7, #32]
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d3e6      	bcc.n	800ede4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ee16:	8bfb      	ldrh	r3, [r7, #30]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d01e      	beq.n	800ee5a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ee20:	69bb      	ldr	r3, [r7, #24]
 800ee22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ee26:	461a      	mov	r2, r3
 800ee28:	f107 0310 	add.w	r3, r7, #16
 800ee2c:	6812      	ldr	r2, [r2, #0]
 800ee2e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ee30:	693a      	ldr	r2, [r7, #16]
 800ee32:	6a3b      	ldr	r3, [r7, #32]
 800ee34:	b2db      	uxtb	r3, r3
 800ee36:	00db      	lsls	r3, r3, #3
 800ee38:	fa22 f303 	lsr.w	r3, r2, r3
 800ee3c:	b2da      	uxtb	r2, r3
 800ee3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee40:	701a      	strb	r2, [r3, #0]
      i++;
 800ee42:	6a3b      	ldr	r3, [r7, #32]
 800ee44:	3301      	adds	r3, #1
 800ee46:	623b      	str	r3, [r7, #32]
      pDest++;
 800ee48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ee4e:	8bfb      	ldrh	r3, [r7, #30]
 800ee50:	3b01      	subs	r3, #1
 800ee52:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ee54:	8bfb      	ldrh	r3, [r7, #30]
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d1ea      	bne.n	800ee30 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ee5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	372c      	adds	r7, #44	@ 0x2c
 800ee60:	46bd      	mov	sp, r7
 800ee62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee66:	4770      	bx	lr

0800ee68 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ee68:	b480      	push	{r7}
 800ee6a:	b085      	sub	sp, #20
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
 800ee70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	781b      	ldrb	r3, [r3, #0]
 800ee7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ee7c:	683b      	ldr	r3, [r7, #0]
 800ee7e:	785b      	ldrb	r3, [r3, #1]
 800ee80:	2b01      	cmp	r3, #1
 800ee82:	d12c      	bne.n	800eede <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ee84:	68bb      	ldr	r3, [r7, #8]
 800ee86:	015a      	lsls	r2, r3, #5
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	4413      	add	r3, r2
 800ee8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	db12      	blt.n	800eebc <USB_EPSetStall+0x54>
 800ee96:	68bb      	ldr	r3, [r7, #8]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d00f      	beq.n	800eebc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	015a      	lsls	r2, r3, #5
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	4413      	add	r3, r2
 800eea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	68ba      	ldr	r2, [r7, #8]
 800eeac:	0151      	lsls	r1, r2, #5
 800eeae:	68fa      	ldr	r2, [r7, #12]
 800eeb0:	440a      	add	r2, r1
 800eeb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eeb6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800eeba:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800eebc:	68bb      	ldr	r3, [r7, #8]
 800eebe:	015a      	lsls	r2, r3, #5
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	4413      	add	r3, r2
 800eec4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	68ba      	ldr	r2, [r7, #8]
 800eecc:	0151      	lsls	r1, r2, #5
 800eece:	68fa      	ldr	r2, [r7, #12]
 800eed0:	440a      	add	r2, r1
 800eed2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eed6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800eeda:	6013      	str	r3, [r2, #0]
 800eedc:	e02b      	b.n	800ef36 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800eede:	68bb      	ldr	r3, [r7, #8]
 800eee0:	015a      	lsls	r2, r3, #5
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	4413      	add	r3, r2
 800eee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	db12      	blt.n	800ef16 <USB_EPSetStall+0xae>
 800eef0:	68bb      	ldr	r3, [r7, #8]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d00f      	beq.n	800ef16 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	015a      	lsls	r2, r3, #5
 800eefa:	68fb      	ldr	r3, [r7, #12]
 800eefc:	4413      	add	r3, r2
 800eefe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	68ba      	ldr	r2, [r7, #8]
 800ef06:	0151      	lsls	r1, r2, #5
 800ef08:	68fa      	ldr	r2, [r7, #12]
 800ef0a:	440a      	add	r2, r1
 800ef0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef10:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ef14:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ef16:	68bb      	ldr	r3, [r7, #8]
 800ef18:	015a      	lsls	r2, r3, #5
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	4413      	add	r3, r2
 800ef1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	68ba      	ldr	r2, [r7, #8]
 800ef26:	0151      	lsls	r1, r2, #5
 800ef28:	68fa      	ldr	r2, [r7, #12]
 800ef2a:	440a      	add	r2, r1
 800ef2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef30:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ef34:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ef36:	2300      	movs	r3, #0
}
 800ef38:	4618      	mov	r0, r3
 800ef3a:	3714      	adds	r7, #20
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef42:	4770      	bx	lr

0800ef44 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ef44:	b480      	push	{r7}
 800ef46:	b085      	sub	sp, #20
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
 800ef4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	781b      	ldrb	r3, [r3, #0]
 800ef56:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ef58:	683b      	ldr	r3, [r7, #0]
 800ef5a:	785b      	ldrb	r3, [r3, #1]
 800ef5c:	2b01      	cmp	r3, #1
 800ef5e:	d128      	bne.n	800efb2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	015a      	lsls	r2, r3, #5
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	4413      	add	r3, r2
 800ef68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef6c:	681b      	ldr	r3, [r3, #0]
 800ef6e:	68ba      	ldr	r2, [r7, #8]
 800ef70:	0151      	lsls	r1, r2, #5
 800ef72:	68fa      	ldr	r2, [r7, #12]
 800ef74:	440a      	add	r2, r1
 800ef76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ef7e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	791b      	ldrb	r3, [r3, #4]
 800ef84:	2b03      	cmp	r3, #3
 800ef86:	d003      	beq.n	800ef90 <USB_EPClearStall+0x4c>
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	791b      	ldrb	r3, [r3, #4]
 800ef8c:	2b02      	cmp	r3, #2
 800ef8e:	d138      	bne.n	800f002 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ef90:	68bb      	ldr	r3, [r7, #8]
 800ef92:	015a      	lsls	r2, r3, #5
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	4413      	add	r3, r2
 800ef98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	68ba      	ldr	r2, [r7, #8]
 800efa0:	0151      	lsls	r1, r2, #5
 800efa2:	68fa      	ldr	r2, [r7, #12]
 800efa4:	440a      	add	r2, r1
 800efa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800efaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800efae:	6013      	str	r3, [r2, #0]
 800efb0:	e027      	b.n	800f002 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	015a      	lsls	r2, r3, #5
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	4413      	add	r3, r2
 800efba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	68ba      	ldr	r2, [r7, #8]
 800efc2:	0151      	lsls	r1, r2, #5
 800efc4:	68fa      	ldr	r2, [r7, #12]
 800efc6:	440a      	add	r2, r1
 800efc8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800efcc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800efd0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	791b      	ldrb	r3, [r3, #4]
 800efd6:	2b03      	cmp	r3, #3
 800efd8:	d003      	beq.n	800efe2 <USB_EPClearStall+0x9e>
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	791b      	ldrb	r3, [r3, #4]
 800efde:	2b02      	cmp	r3, #2
 800efe0:	d10f      	bne.n	800f002 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800efe2:	68bb      	ldr	r3, [r7, #8]
 800efe4:	015a      	lsls	r2, r3, #5
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	4413      	add	r3, r2
 800efea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	68ba      	ldr	r2, [r7, #8]
 800eff2:	0151      	lsls	r1, r2, #5
 800eff4:	68fa      	ldr	r2, [r7, #12]
 800eff6:	440a      	add	r2, r1
 800eff8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800effc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f000:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f002:	2300      	movs	r3, #0
}
 800f004:	4618      	mov	r0, r3
 800f006:	3714      	adds	r7, #20
 800f008:	46bd      	mov	sp, r7
 800f00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00e:	4770      	bx	lr

0800f010 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f010:	b480      	push	{r7}
 800f012:	b085      	sub	sp, #20
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
 800f018:	460b      	mov	r3, r1
 800f01a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	68fa      	ldr	r2, [r7, #12]
 800f02a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f02e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800f032:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f03a:	681a      	ldr	r2, [r3, #0]
 800f03c:	78fb      	ldrb	r3, [r7, #3]
 800f03e:	011b      	lsls	r3, r3, #4
 800f040:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800f044:	68f9      	ldr	r1, [r7, #12]
 800f046:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f04a:	4313      	orrs	r3, r2
 800f04c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f04e:	2300      	movs	r3, #0
}
 800f050:	4618      	mov	r0, r3
 800f052:	3714      	adds	r7, #20
 800f054:	46bd      	mov	sp, r7
 800f056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f05a:	4770      	bx	lr

0800f05c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f05c:	b480      	push	{r7}
 800f05e:	b085      	sub	sp, #20
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f068:	68fb      	ldr	r3, [r7, #12]
 800f06a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f06e:	681b      	ldr	r3, [r3, #0]
 800f070:	68fa      	ldr	r2, [r7, #12]
 800f072:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f076:	f023 0303 	bic.w	r3, r3, #3
 800f07a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f082:	685b      	ldr	r3, [r3, #4]
 800f084:	68fa      	ldr	r2, [r7, #12]
 800f086:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f08a:	f023 0302 	bic.w	r3, r3, #2
 800f08e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f090:	2300      	movs	r3, #0
}
 800f092:	4618      	mov	r0, r3
 800f094:	3714      	adds	r7, #20
 800f096:	46bd      	mov	sp, r7
 800f098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09c:	4770      	bx	lr

0800f09e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f09e:	b480      	push	{r7}
 800f0a0:	b085      	sub	sp, #20
 800f0a2:	af00      	add	r7, sp, #0
 800f0a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0a6:	687b      	ldr	r3, [r7, #4]
 800f0a8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	68fa      	ldr	r2, [r7, #12]
 800f0b4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f0b8:	f023 0303 	bic.w	r3, r3, #3
 800f0bc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0c4:	685b      	ldr	r3, [r3, #4]
 800f0c6:	68fa      	ldr	r2, [r7, #12]
 800f0c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f0cc:	f043 0302 	orr.w	r3, r3, #2
 800f0d0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f0d2:	2300      	movs	r3, #0
}
 800f0d4:	4618      	mov	r0, r3
 800f0d6:	3714      	adds	r7, #20
 800f0d8:	46bd      	mov	sp, r7
 800f0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0de:	4770      	bx	lr

0800f0e0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800f0e0:	b480      	push	{r7}
 800f0e2:	b085      	sub	sp, #20
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	695b      	ldr	r3, [r3, #20]
 800f0ec:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	699b      	ldr	r3, [r3, #24]
 800f0f2:	68fa      	ldr	r2, [r7, #12]
 800f0f4:	4013      	ands	r3, r2
 800f0f6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f0f8:	68fb      	ldr	r3, [r7, #12]
}
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	3714      	adds	r7, #20
 800f0fe:	46bd      	mov	sp, r7
 800f100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f104:	4770      	bx	lr

0800f106 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f106:	b480      	push	{r7}
 800f108:	b085      	sub	sp, #20
 800f10a:	af00      	add	r7, sp, #0
 800f10c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f118:	699b      	ldr	r3, [r3, #24]
 800f11a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f122:	69db      	ldr	r3, [r3, #28]
 800f124:	68ba      	ldr	r2, [r7, #8]
 800f126:	4013      	ands	r3, r2
 800f128:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	0c1b      	lsrs	r3, r3, #16
}
 800f12e:	4618      	mov	r0, r3
 800f130:	3714      	adds	r7, #20
 800f132:	46bd      	mov	sp, r7
 800f134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f138:	4770      	bx	lr

0800f13a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f13a:	b480      	push	{r7}
 800f13c:	b085      	sub	sp, #20
 800f13e:	af00      	add	r7, sp, #0
 800f140:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f14c:	699b      	ldr	r3, [r3, #24]
 800f14e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f156:	69db      	ldr	r3, [r3, #28]
 800f158:	68ba      	ldr	r2, [r7, #8]
 800f15a:	4013      	ands	r3, r2
 800f15c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f15e:	68bb      	ldr	r3, [r7, #8]
 800f160:	b29b      	uxth	r3, r3
}
 800f162:	4618      	mov	r0, r3
 800f164:	3714      	adds	r7, #20
 800f166:	46bd      	mov	sp, r7
 800f168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16c:	4770      	bx	lr

0800f16e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f16e:	b480      	push	{r7}
 800f170:	b085      	sub	sp, #20
 800f172:	af00      	add	r7, sp, #0
 800f174:	6078      	str	r0, [r7, #4]
 800f176:	460b      	mov	r3, r1
 800f178:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f17e:	78fb      	ldrb	r3, [r7, #3]
 800f180:	015a      	lsls	r2, r3, #5
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	4413      	add	r3, r2
 800f186:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f18a:	689b      	ldr	r3, [r3, #8]
 800f18c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f194:	695b      	ldr	r3, [r3, #20]
 800f196:	68ba      	ldr	r2, [r7, #8]
 800f198:	4013      	ands	r3, r2
 800f19a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f19c:	68bb      	ldr	r3, [r7, #8]
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3714      	adds	r7, #20
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1a8:	4770      	bx	lr

0800f1aa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f1aa:	b480      	push	{r7}
 800f1ac:	b087      	sub	sp, #28
 800f1ae:	af00      	add	r7, sp, #0
 800f1b0:	6078      	str	r0, [r7, #4]
 800f1b2:	460b      	mov	r3, r1
 800f1b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f1ba:	697b      	ldr	r3, [r7, #20]
 800f1bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1c0:	691b      	ldr	r3, [r3, #16]
 800f1c2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f1c4:	697b      	ldr	r3, [r7, #20]
 800f1c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f1cc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f1ce:	78fb      	ldrb	r3, [r7, #3]
 800f1d0:	f003 030f 	and.w	r3, r3, #15
 800f1d4:	68fa      	ldr	r2, [r7, #12]
 800f1d6:	fa22 f303 	lsr.w	r3, r2, r3
 800f1da:	01db      	lsls	r3, r3, #7
 800f1dc:	b2db      	uxtb	r3, r3
 800f1de:	693a      	ldr	r2, [r7, #16]
 800f1e0:	4313      	orrs	r3, r2
 800f1e2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f1e4:	78fb      	ldrb	r3, [r7, #3]
 800f1e6:	015a      	lsls	r2, r3, #5
 800f1e8:	697b      	ldr	r3, [r7, #20]
 800f1ea:	4413      	add	r3, r2
 800f1ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f1f0:	689b      	ldr	r3, [r3, #8]
 800f1f2:	693a      	ldr	r2, [r7, #16]
 800f1f4:	4013      	ands	r3, r2
 800f1f6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f1f8:	68bb      	ldr	r3, [r7, #8]
}
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	371c      	adds	r7, #28
 800f1fe:	46bd      	mov	sp, r7
 800f200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f204:	4770      	bx	lr

0800f206 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800f206:	b480      	push	{r7}
 800f208:	b083      	sub	sp, #12
 800f20a:	af00      	add	r7, sp, #0
 800f20c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	695b      	ldr	r3, [r3, #20]
 800f212:	f003 0301 	and.w	r3, r3, #1
}
 800f216:	4618      	mov	r0, r3
 800f218:	370c      	adds	r7, #12
 800f21a:	46bd      	mov	sp, r7
 800f21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f220:	4770      	bx	lr
	...

0800f224 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800f224:	b480      	push	{r7}
 800f226:	b085      	sub	sp, #20
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f236:	681a      	ldr	r2, [r3, #0]
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f23e:	4619      	mov	r1, r3
 800f240:	4b09      	ldr	r3, [pc, #36]	@ (800f268 <USB_ActivateSetup+0x44>)
 800f242:	4013      	ands	r3, r2
 800f244:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f246:	68fb      	ldr	r3, [r7, #12]
 800f248:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f24c:	685b      	ldr	r3, [r3, #4]
 800f24e:	68fa      	ldr	r2, [r7, #12]
 800f250:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f254:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f258:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f25a:	2300      	movs	r3, #0
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3714      	adds	r7, #20
 800f260:	46bd      	mov	sp, r7
 800f262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f266:	4770      	bx	lr
 800f268:	fffff800 	.word	0xfffff800

0800f26c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800f26c:	b480      	push	{r7}
 800f26e:	b087      	sub	sp, #28
 800f270:	af00      	add	r7, sp, #0
 800f272:	60f8      	str	r0, [r7, #12]
 800f274:	460b      	mov	r3, r1
 800f276:	607a      	str	r2, [r7, #4]
 800f278:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f27a:	68fb      	ldr	r3, [r7, #12]
 800f27c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	333c      	adds	r3, #60	@ 0x3c
 800f282:	3304      	adds	r3, #4
 800f284:	681b      	ldr	r3, [r3, #0]
 800f286:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f288:	693b      	ldr	r3, [r7, #16]
 800f28a:	4a26      	ldr	r2, [pc, #152]	@ (800f324 <USB_EP0_OutStart+0xb8>)
 800f28c:	4293      	cmp	r3, r2
 800f28e:	d90a      	bls.n	800f2a6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f290:	697b      	ldr	r3, [r7, #20]
 800f292:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f296:	681b      	ldr	r3, [r3, #0]
 800f298:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f29c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f2a0:	d101      	bne.n	800f2a6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f2a2:	2300      	movs	r3, #0
 800f2a4:	e037      	b.n	800f316 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2ac:	461a      	mov	r2, r3
 800f2ae:	2300      	movs	r3, #0
 800f2b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f2b2:	697b      	ldr	r3, [r7, #20]
 800f2b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2b8:	691b      	ldr	r3, [r3, #16]
 800f2ba:	697a      	ldr	r2, [r7, #20]
 800f2bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f2c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f2c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f2c6:	697b      	ldr	r3, [r7, #20]
 800f2c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2cc:	691b      	ldr	r3, [r3, #16]
 800f2ce:	697a      	ldr	r2, [r7, #20]
 800f2d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f2d4:	f043 0318 	orr.w	r3, r3, #24
 800f2d8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f2da:	697b      	ldr	r3, [r7, #20]
 800f2dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2e0:	691b      	ldr	r3, [r3, #16]
 800f2e2:	697a      	ldr	r2, [r7, #20]
 800f2e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f2e8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800f2ec:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f2ee:	7afb      	ldrb	r3, [r7, #11]
 800f2f0:	2b01      	cmp	r3, #1
 800f2f2:	d10f      	bne.n	800f314 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f2f4:	697b      	ldr	r3, [r7, #20]
 800f2f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f2fa:	461a      	mov	r2, r3
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f300:	697b      	ldr	r3, [r7, #20]
 800f302:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	697a      	ldr	r2, [r7, #20]
 800f30a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f30e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800f312:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f314:	2300      	movs	r3, #0
}
 800f316:	4618      	mov	r0, r3
 800f318:	371c      	adds	r7, #28
 800f31a:	46bd      	mov	sp, r7
 800f31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f320:	4770      	bx	lr
 800f322:	bf00      	nop
 800f324:	4f54300a 	.word	0x4f54300a

0800f328 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f328:	b480      	push	{r7}
 800f32a:	b085      	sub	sp, #20
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f330:	2300      	movs	r3, #0
 800f332:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f334:	68fb      	ldr	r3, [r7, #12]
 800f336:	3301      	adds	r3, #1
 800f338:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f33a:	68fb      	ldr	r3, [r7, #12]
 800f33c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f340:	d901      	bls.n	800f346 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f342:	2303      	movs	r3, #3
 800f344:	e01b      	b.n	800f37e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	691b      	ldr	r3, [r3, #16]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	daf2      	bge.n	800f334 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f34e:	2300      	movs	r3, #0
 800f350:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	691b      	ldr	r3, [r3, #16]
 800f356:	f043 0201 	orr.w	r2, r3, #1
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f35e:	68fb      	ldr	r3, [r7, #12]
 800f360:	3301      	adds	r3, #1
 800f362:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f36a:	d901      	bls.n	800f370 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f36c:	2303      	movs	r3, #3
 800f36e:	e006      	b.n	800f37e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	691b      	ldr	r3, [r3, #16]
 800f374:	f003 0301 	and.w	r3, r3, #1
 800f378:	2b01      	cmp	r3, #1
 800f37a:	d0f0      	beq.n	800f35e <USB_CoreReset+0x36>

  return HAL_OK;
 800f37c:	2300      	movs	r3, #0
}
 800f37e:	4618      	mov	r0, r3
 800f380:	3714      	adds	r7, #20
 800f382:	46bd      	mov	sp, r7
 800f384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f388:	4770      	bx	lr
	...

0800f38c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b084      	sub	sp, #16
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
 800f394:	460b      	mov	r3, r1
 800f396:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f398:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800f39c:	f002 fcfe 	bl	8011d9c <USBD_static_malloc>
 800f3a0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f3a2:	68fb      	ldr	r3, [r7, #12]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d109      	bne.n	800f3bc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	32b0      	adds	r2, #176	@ 0xb0
 800f3b2:	2100      	movs	r1, #0
 800f3b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f3b8:	2302      	movs	r3, #2
 800f3ba:	e0d4      	b.n	800f566 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800f3bc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800f3c0:	2100      	movs	r1, #0
 800f3c2:	68f8      	ldr	r0, [r7, #12]
 800f3c4:	f003 fa89 	bl	80128da <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	32b0      	adds	r2, #176	@ 0xb0
 800f3d2:	68f9      	ldr	r1, [r7, #12]
 800f3d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f3d8:	687b      	ldr	r3, [r7, #4]
 800f3da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	32b0      	adds	r2, #176	@ 0xb0
 800f3e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	7c1b      	ldrb	r3, [r3, #16]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d138      	bne.n	800f466 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f3f4:	4b5e      	ldr	r3, [pc, #376]	@ (800f570 <USBD_CDC_Init+0x1e4>)
 800f3f6:	7819      	ldrb	r1, [r3, #0]
 800f3f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f3fc:	2202      	movs	r2, #2
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f002 fba9 	bl	8011b56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f404:	4b5a      	ldr	r3, [pc, #360]	@ (800f570 <USBD_CDC_Init+0x1e4>)
 800f406:	781b      	ldrb	r3, [r3, #0]
 800f408:	f003 020f 	and.w	r2, r3, #15
 800f40c:	6879      	ldr	r1, [r7, #4]
 800f40e:	4613      	mov	r3, r2
 800f410:	009b      	lsls	r3, r3, #2
 800f412:	4413      	add	r3, r2
 800f414:	009b      	lsls	r3, r3, #2
 800f416:	440b      	add	r3, r1
 800f418:	3324      	adds	r3, #36	@ 0x24
 800f41a:	2201      	movs	r2, #1
 800f41c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f41e:	4b55      	ldr	r3, [pc, #340]	@ (800f574 <USBD_CDC_Init+0x1e8>)
 800f420:	7819      	ldrb	r1, [r3, #0]
 800f422:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f426:	2202      	movs	r2, #2
 800f428:	6878      	ldr	r0, [r7, #4]
 800f42a:	f002 fb94 	bl	8011b56 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f42e:	4b51      	ldr	r3, [pc, #324]	@ (800f574 <USBD_CDC_Init+0x1e8>)
 800f430:	781b      	ldrb	r3, [r3, #0]
 800f432:	f003 020f 	and.w	r2, r3, #15
 800f436:	6879      	ldr	r1, [r7, #4]
 800f438:	4613      	mov	r3, r2
 800f43a:	009b      	lsls	r3, r3, #2
 800f43c:	4413      	add	r3, r2
 800f43e:	009b      	lsls	r3, r3, #2
 800f440:	440b      	add	r3, r1
 800f442:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f446:	2201      	movs	r2, #1
 800f448:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f44a:	4b4b      	ldr	r3, [pc, #300]	@ (800f578 <USBD_CDC_Init+0x1ec>)
 800f44c:	781b      	ldrb	r3, [r3, #0]
 800f44e:	f003 020f 	and.w	r2, r3, #15
 800f452:	6879      	ldr	r1, [r7, #4]
 800f454:	4613      	mov	r3, r2
 800f456:	009b      	lsls	r3, r3, #2
 800f458:	4413      	add	r3, r2
 800f45a:	009b      	lsls	r3, r3, #2
 800f45c:	440b      	add	r3, r1
 800f45e:	3326      	adds	r3, #38	@ 0x26
 800f460:	2210      	movs	r2, #16
 800f462:	801a      	strh	r2, [r3, #0]
 800f464:	e035      	b.n	800f4d2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f466:	4b42      	ldr	r3, [pc, #264]	@ (800f570 <USBD_CDC_Init+0x1e4>)
 800f468:	7819      	ldrb	r1, [r3, #0]
 800f46a:	2340      	movs	r3, #64	@ 0x40
 800f46c:	2202      	movs	r2, #2
 800f46e:	6878      	ldr	r0, [r7, #4]
 800f470:	f002 fb71 	bl	8011b56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f474:	4b3e      	ldr	r3, [pc, #248]	@ (800f570 <USBD_CDC_Init+0x1e4>)
 800f476:	781b      	ldrb	r3, [r3, #0]
 800f478:	f003 020f 	and.w	r2, r3, #15
 800f47c:	6879      	ldr	r1, [r7, #4]
 800f47e:	4613      	mov	r3, r2
 800f480:	009b      	lsls	r3, r3, #2
 800f482:	4413      	add	r3, r2
 800f484:	009b      	lsls	r3, r3, #2
 800f486:	440b      	add	r3, r1
 800f488:	3324      	adds	r3, #36	@ 0x24
 800f48a:	2201      	movs	r2, #1
 800f48c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f48e:	4b39      	ldr	r3, [pc, #228]	@ (800f574 <USBD_CDC_Init+0x1e8>)
 800f490:	7819      	ldrb	r1, [r3, #0]
 800f492:	2340      	movs	r3, #64	@ 0x40
 800f494:	2202      	movs	r2, #2
 800f496:	6878      	ldr	r0, [r7, #4]
 800f498:	f002 fb5d 	bl	8011b56 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f49c:	4b35      	ldr	r3, [pc, #212]	@ (800f574 <USBD_CDC_Init+0x1e8>)
 800f49e:	781b      	ldrb	r3, [r3, #0]
 800f4a0:	f003 020f 	and.w	r2, r3, #15
 800f4a4:	6879      	ldr	r1, [r7, #4]
 800f4a6:	4613      	mov	r3, r2
 800f4a8:	009b      	lsls	r3, r3, #2
 800f4aa:	4413      	add	r3, r2
 800f4ac:	009b      	lsls	r3, r3, #2
 800f4ae:	440b      	add	r3, r1
 800f4b0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f4b4:	2201      	movs	r2, #1
 800f4b6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f4b8:	4b2f      	ldr	r3, [pc, #188]	@ (800f578 <USBD_CDC_Init+0x1ec>)
 800f4ba:	781b      	ldrb	r3, [r3, #0]
 800f4bc:	f003 020f 	and.w	r2, r3, #15
 800f4c0:	6879      	ldr	r1, [r7, #4]
 800f4c2:	4613      	mov	r3, r2
 800f4c4:	009b      	lsls	r3, r3, #2
 800f4c6:	4413      	add	r3, r2
 800f4c8:	009b      	lsls	r3, r3, #2
 800f4ca:	440b      	add	r3, r1
 800f4cc:	3326      	adds	r3, #38	@ 0x26
 800f4ce:	2210      	movs	r2, #16
 800f4d0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f4d2:	4b29      	ldr	r3, [pc, #164]	@ (800f578 <USBD_CDC_Init+0x1ec>)
 800f4d4:	7819      	ldrb	r1, [r3, #0]
 800f4d6:	2308      	movs	r3, #8
 800f4d8:	2203      	movs	r2, #3
 800f4da:	6878      	ldr	r0, [r7, #4]
 800f4dc:	f002 fb3b 	bl	8011b56 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800f4e0:	4b25      	ldr	r3, [pc, #148]	@ (800f578 <USBD_CDC_Init+0x1ec>)
 800f4e2:	781b      	ldrb	r3, [r3, #0]
 800f4e4:	f003 020f 	and.w	r2, r3, #15
 800f4e8:	6879      	ldr	r1, [r7, #4]
 800f4ea:	4613      	mov	r3, r2
 800f4ec:	009b      	lsls	r3, r3, #2
 800f4ee:	4413      	add	r3, r2
 800f4f0:	009b      	lsls	r3, r3, #2
 800f4f2:	440b      	add	r3, r1
 800f4f4:	3324      	adds	r3, #36	@ 0x24
 800f4f6:	2201      	movs	r2, #1
 800f4f8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f508:	687a      	ldr	r2, [r7, #4]
 800f50a:	33b0      	adds	r3, #176	@ 0xb0
 800f50c:	009b      	lsls	r3, r3, #2
 800f50e:	4413      	add	r3, r2
 800f510:	685b      	ldr	r3, [r3, #4]
 800f512:	681b      	ldr	r3, [r3, #0]
 800f514:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	2200      	movs	r2, #0
 800f51a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	2200      	movs	r2, #0
 800f522:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d101      	bne.n	800f534 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800f530:	2302      	movs	r3, #2
 800f532:	e018      	b.n	800f566 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	7c1b      	ldrb	r3, [r3, #16]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d10a      	bne.n	800f552 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f53c:	4b0d      	ldr	r3, [pc, #52]	@ (800f574 <USBD_CDC_Init+0x1e8>)
 800f53e:	7819      	ldrb	r1, [r3, #0]
 800f540:	68fb      	ldr	r3, [r7, #12]
 800f542:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f546:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f002 fbf2 	bl	8011d34 <USBD_LL_PrepareReceive>
 800f550:	e008      	b.n	800f564 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f552:	4b08      	ldr	r3, [pc, #32]	@ (800f574 <USBD_CDC_Init+0x1e8>)
 800f554:	7819      	ldrb	r1, [r3, #0]
 800f556:	68fb      	ldr	r3, [r7, #12]
 800f558:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f55c:	2340      	movs	r3, #64	@ 0x40
 800f55e:	6878      	ldr	r0, [r7, #4]
 800f560:	f002 fbe8 	bl	8011d34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f564:	2300      	movs	r3, #0
}
 800f566:	4618      	mov	r0, r3
 800f568:	3710      	adds	r7, #16
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd80      	pop	{r7, pc}
 800f56e:	bf00      	nop
 800f570:	240000bf 	.word	0x240000bf
 800f574:	240000c0 	.word	0x240000c0
 800f578:	240000c1 	.word	0x240000c1

0800f57c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b082      	sub	sp, #8
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
 800f584:	460b      	mov	r3, r1
 800f586:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800f588:	4b3a      	ldr	r3, [pc, #232]	@ (800f674 <USBD_CDC_DeInit+0xf8>)
 800f58a:	781b      	ldrb	r3, [r3, #0]
 800f58c:	4619      	mov	r1, r3
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	f002 fb07 	bl	8011ba2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800f594:	4b37      	ldr	r3, [pc, #220]	@ (800f674 <USBD_CDC_DeInit+0xf8>)
 800f596:	781b      	ldrb	r3, [r3, #0]
 800f598:	f003 020f 	and.w	r2, r3, #15
 800f59c:	6879      	ldr	r1, [r7, #4]
 800f59e:	4613      	mov	r3, r2
 800f5a0:	009b      	lsls	r3, r3, #2
 800f5a2:	4413      	add	r3, r2
 800f5a4:	009b      	lsls	r3, r3, #2
 800f5a6:	440b      	add	r3, r1
 800f5a8:	3324      	adds	r3, #36	@ 0x24
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800f5ae:	4b32      	ldr	r3, [pc, #200]	@ (800f678 <USBD_CDC_DeInit+0xfc>)
 800f5b0:	781b      	ldrb	r3, [r3, #0]
 800f5b2:	4619      	mov	r1, r3
 800f5b4:	6878      	ldr	r0, [r7, #4]
 800f5b6:	f002 faf4 	bl	8011ba2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800f5ba:	4b2f      	ldr	r3, [pc, #188]	@ (800f678 <USBD_CDC_DeInit+0xfc>)
 800f5bc:	781b      	ldrb	r3, [r3, #0]
 800f5be:	f003 020f 	and.w	r2, r3, #15
 800f5c2:	6879      	ldr	r1, [r7, #4]
 800f5c4:	4613      	mov	r3, r2
 800f5c6:	009b      	lsls	r3, r3, #2
 800f5c8:	4413      	add	r3, r2
 800f5ca:	009b      	lsls	r3, r3, #2
 800f5cc:	440b      	add	r3, r1
 800f5ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800f5d6:	4b29      	ldr	r3, [pc, #164]	@ (800f67c <USBD_CDC_DeInit+0x100>)
 800f5d8:	781b      	ldrb	r3, [r3, #0]
 800f5da:	4619      	mov	r1, r3
 800f5dc:	6878      	ldr	r0, [r7, #4]
 800f5de:	f002 fae0 	bl	8011ba2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800f5e2:	4b26      	ldr	r3, [pc, #152]	@ (800f67c <USBD_CDC_DeInit+0x100>)
 800f5e4:	781b      	ldrb	r3, [r3, #0]
 800f5e6:	f003 020f 	and.w	r2, r3, #15
 800f5ea:	6879      	ldr	r1, [r7, #4]
 800f5ec:	4613      	mov	r3, r2
 800f5ee:	009b      	lsls	r3, r3, #2
 800f5f0:	4413      	add	r3, r2
 800f5f2:	009b      	lsls	r3, r3, #2
 800f5f4:	440b      	add	r3, r1
 800f5f6:	3324      	adds	r3, #36	@ 0x24
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800f5fc:	4b1f      	ldr	r3, [pc, #124]	@ (800f67c <USBD_CDC_DeInit+0x100>)
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	f003 020f 	and.w	r2, r3, #15
 800f604:	6879      	ldr	r1, [r7, #4]
 800f606:	4613      	mov	r3, r2
 800f608:	009b      	lsls	r3, r3, #2
 800f60a:	4413      	add	r3, r2
 800f60c:	009b      	lsls	r3, r3, #2
 800f60e:	440b      	add	r3, r1
 800f610:	3326      	adds	r3, #38	@ 0x26
 800f612:	2200      	movs	r2, #0
 800f614:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	32b0      	adds	r2, #176	@ 0xb0
 800f620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f624:	2b00      	cmp	r3, #0
 800f626:	d01f      	beq.n	800f668 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f62e:	687a      	ldr	r2, [r7, #4]
 800f630:	33b0      	adds	r3, #176	@ 0xb0
 800f632:	009b      	lsls	r3, r3, #2
 800f634:	4413      	add	r3, r2
 800f636:	685b      	ldr	r3, [r3, #4]
 800f638:	685b      	ldr	r3, [r3, #4]
 800f63a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	32b0      	adds	r2, #176	@ 0xb0
 800f646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f64a:	4618      	mov	r0, r3
 800f64c:	f002 fbb4 	bl	8011db8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	32b0      	adds	r2, #176	@ 0xb0
 800f65a:	2100      	movs	r1, #0
 800f65c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	2200      	movs	r2, #0
 800f664:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f668:	2300      	movs	r3, #0
}
 800f66a:	4618      	mov	r0, r3
 800f66c:	3708      	adds	r7, #8
 800f66e:	46bd      	mov	sp, r7
 800f670:	bd80      	pop	{r7, pc}
 800f672:	bf00      	nop
 800f674:	240000bf 	.word	0x240000bf
 800f678:	240000c0 	.word	0x240000c0
 800f67c:	240000c1 	.word	0x240000c1

0800f680 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f680:	b580      	push	{r7, lr}
 800f682:	b086      	sub	sp, #24
 800f684:	af00      	add	r7, sp, #0
 800f686:	6078      	str	r0, [r7, #4]
 800f688:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	32b0      	adds	r2, #176	@ 0xb0
 800f694:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f698:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f69a:	2300      	movs	r3, #0
 800f69c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f69e:	2300      	movs	r3, #0
 800f6a0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f6a6:	693b      	ldr	r3, [r7, #16]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d101      	bne.n	800f6b0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800f6ac:	2303      	movs	r3, #3
 800f6ae:	e0bf      	b.n	800f830 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f6b0:	683b      	ldr	r3, [r7, #0]
 800f6b2:	781b      	ldrb	r3, [r3, #0]
 800f6b4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d050      	beq.n	800f75e <USBD_CDC_Setup+0xde>
 800f6bc:	2b20      	cmp	r3, #32
 800f6be:	f040 80af 	bne.w	800f820 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	88db      	ldrh	r3, [r3, #6]
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d03a      	beq.n	800f740 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f6ca:	683b      	ldr	r3, [r7, #0]
 800f6cc:	781b      	ldrb	r3, [r3, #0]
 800f6ce:	b25b      	sxtb	r3, r3
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	da1b      	bge.n	800f70c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f6da:	687a      	ldr	r2, [r7, #4]
 800f6dc:	33b0      	adds	r3, #176	@ 0xb0
 800f6de:	009b      	lsls	r3, r3, #2
 800f6e0:	4413      	add	r3, r2
 800f6e2:	685b      	ldr	r3, [r3, #4]
 800f6e4:	689b      	ldr	r3, [r3, #8]
 800f6e6:	683a      	ldr	r2, [r7, #0]
 800f6e8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800f6ea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f6ec:	683a      	ldr	r2, [r7, #0]
 800f6ee:	88d2      	ldrh	r2, [r2, #6]
 800f6f0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f6f2:	683b      	ldr	r3, [r7, #0]
 800f6f4:	88db      	ldrh	r3, [r3, #6]
 800f6f6:	2b07      	cmp	r3, #7
 800f6f8:	bf28      	it	cs
 800f6fa:	2307      	movcs	r3, #7
 800f6fc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f6fe:	693b      	ldr	r3, [r7, #16]
 800f700:	89fa      	ldrh	r2, [r7, #14]
 800f702:	4619      	mov	r1, r3
 800f704:	6878      	ldr	r0, [r7, #4]
 800f706:	f001 fdbd 	bl	8011284 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800f70a:	e090      	b.n	800f82e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800f70c:	683b      	ldr	r3, [r7, #0]
 800f70e:	785a      	ldrb	r2, [r3, #1]
 800f710:	693b      	ldr	r3, [r7, #16]
 800f712:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800f716:	683b      	ldr	r3, [r7, #0]
 800f718:	88db      	ldrh	r3, [r3, #6]
 800f71a:	2b3f      	cmp	r3, #63	@ 0x3f
 800f71c:	d803      	bhi.n	800f726 <USBD_CDC_Setup+0xa6>
 800f71e:	683b      	ldr	r3, [r7, #0]
 800f720:	88db      	ldrh	r3, [r3, #6]
 800f722:	b2da      	uxtb	r2, r3
 800f724:	e000      	b.n	800f728 <USBD_CDC_Setup+0xa8>
 800f726:	2240      	movs	r2, #64	@ 0x40
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800f72e:	6939      	ldr	r1, [r7, #16]
 800f730:	693b      	ldr	r3, [r7, #16]
 800f732:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800f736:	461a      	mov	r2, r3
 800f738:	6878      	ldr	r0, [r7, #4]
 800f73a:	f001 fdcf 	bl	80112dc <USBD_CtlPrepareRx>
      break;
 800f73e:	e076      	b.n	800f82e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f746:	687a      	ldr	r2, [r7, #4]
 800f748:	33b0      	adds	r3, #176	@ 0xb0
 800f74a:	009b      	lsls	r3, r3, #2
 800f74c:	4413      	add	r3, r2
 800f74e:	685b      	ldr	r3, [r3, #4]
 800f750:	689b      	ldr	r3, [r3, #8]
 800f752:	683a      	ldr	r2, [r7, #0]
 800f754:	7850      	ldrb	r0, [r2, #1]
 800f756:	2200      	movs	r2, #0
 800f758:	6839      	ldr	r1, [r7, #0]
 800f75a:	4798      	blx	r3
      break;
 800f75c:	e067      	b.n	800f82e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f75e:	683b      	ldr	r3, [r7, #0]
 800f760:	785b      	ldrb	r3, [r3, #1]
 800f762:	2b0b      	cmp	r3, #11
 800f764:	d851      	bhi.n	800f80a <USBD_CDC_Setup+0x18a>
 800f766:	a201      	add	r2, pc, #4	@ (adr r2, 800f76c <USBD_CDC_Setup+0xec>)
 800f768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f76c:	0800f79d 	.word	0x0800f79d
 800f770:	0800f819 	.word	0x0800f819
 800f774:	0800f80b 	.word	0x0800f80b
 800f778:	0800f80b 	.word	0x0800f80b
 800f77c:	0800f80b 	.word	0x0800f80b
 800f780:	0800f80b 	.word	0x0800f80b
 800f784:	0800f80b 	.word	0x0800f80b
 800f788:	0800f80b 	.word	0x0800f80b
 800f78c:	0800f80b 	.word	0x0800f80b
 800f790:	0800f80b 	.word	0x0800f80b
 800f794:	0800f7c7 	.word	0x0800f7c7
 800f798:	0800f7f1 	.word	0x0800f7f1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7a2:	b2db      	uxtb	r3, r3
 800f7a4:	2b03      	cmp	r3, #3
 800f7a6:	d107      	bne.n	800f7b8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f7a8:	f107 030a 	add.w	r3, r7, #10
 800f7ac:	2202      	movs	r2, #2
 800f7ae:	4619      	mov	r1, r3
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f001 fd67 	bl	8011284 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f7b6:	e032      	b.n	800f81e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f7b8:	6839      	ldr	r1, [r7, #0]
 800f7ba:	6878      	ldr	r0, [r7, #4]
 800f7bc:	f001 fce5 	bl	801118a <USBD_CtlError>
            ret = USBD_FAIL;
 800f7c0:	2303      	movs	r3, #3
 800f7c2:	75fb      	strb	r3, [r7, #23]
          break;
 800f7c4:	e02b      	b.n	800f81e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7cc:	b2db      	uxtb	r3, r3
 800f7ce:	2b03      	cmp	r3, #3
 800f7d0:	d107      	bne.n	800f7e2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f7d2:	f107 030d 	add.w	r3, r7, #13
 800f7d6:	2201      	movs	r2, #1
 800f7d8:	4619      	mov	r1, r3
 800f7da:	6878      	ldr	r0, [r7, #4]
 800f7dc:	f001 fd52 	bl	8011284 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f7e0:	e01d      	b.n	800f81e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f7e2:	6839      	ldr	r1, [r7, #0]
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f001 fcd0 	bl	801118a <USBD_CtlError>
            ret = USBD_FAIL;
 800f7ea:	2303      	movs	r3, #3
 800f7ec:	75fb      	strb	r3, [r7, #23]
          break;
 800f7ee:	e016      	b.n	800f81e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f7f6:	b2db      	uxtb	r3, r3
 800f7f8:	2b03      	cmp	r3, #3
 800f7fa:	d00f      	beq.n	800f81c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800f7fc:	6839      	ldr	r1, [r7, #0]
 800f7fe:	6878      	ldr	r0, [r7, #4]
 800f800:	f001 fcc3 	bl	801118a <USBD_CtlError>
            ret = USBD_FAIL;
 800f804:	2303      	movs	r3, #3
 800f806:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f808:	e008      	b.n	800f81c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f80a:	6839      	ldr	r1, [r7, #0]
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f001 fcbc 	bl	801118a <USBD_CtlError>
          ret = USBD_FAIL;
 800f812:	2303      	movs	r3, #3
 800f814:	75fb      	strb	r3, [r7, #23]
          break;
 800f816:	e002      	b.n	800f81e <USBD_CDC_Setup+0x19e>
          break;
 800f818:	bf00      	nop
 800f81a:	e008      	b.n	800f82e <USBD_CDC_Setup+0x1ae>
          break;
 800f81c:	bf00      	nop
      }
      break;
 800f81e:	e006      	b.n	800f82e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800f820:	6839      	ldr	r1, [r7, #0]
 800f822:	6878      	ldr	r0, [r7, #4]
 800f824:	f001 fcb1 	bl	801118a <USBD_CtlError>
      ret = USBD_FAIL;
 800f828:	2303      	movs	r3, #3
 800f82a:	75fb      	strb	r3, [r7, #23]
      break;
 800f82c:	bf00      	nop
  }

  return (uint8_t)ret;
 800f82e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f830:	4618      	mov	r0, r3
 800f832:	3718      	adds	r7, #24
 800f834:	46bd      	mov	sp, r7
 800f836:	bd80      	pop	{r7, pc}

0800f838 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b084      	sub	sp, #16
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	6078      	str	r0, [r7, #4]
 800f840:	460b      	mov	r3, r1
 800f842:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f84a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	32b0      	adds	r2, #176	@ 0xb0
 800f856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d101      	bne.n	800f862 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800f85e:	2303      	movs	r3, #3
 800f860:	e065      	b.n	800f92e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	32b0      	adds	r2, #176	@ 0xb0
 800f86c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f870:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f872:	78fb      	ldrb	r3, [r7, #3]
 800f874:	f003 020f 	and.w	r2, r3, #15
 800f878:	6879      	ldr	r1, [r7, #4]
 800f87a:	4613      	mov	r3, r2
 800f87c:	009b      	lsls	r3, r3, #2
 800f87e:	4413      	add	r3, r2
 800f880:	009b      	lsls	r3, r3, #2
 800f882:	440b      	add	r3, r1
 800f884:	3318      	adds	r3, #24
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d02f      	beq.n	800f8ec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800f88c:	78fb      	ldrb	r3, [r7, #3]
 800f88e:	f003 020f 	and.w	r2, r3, #15
 800f892:	6879      	ldr	r1, [r7, #4]
 800f894:	4613      	mov	r3, r2
 800f896:	009b      	lsls	r3, r3, #2
 800f898:	4413      	add	r3, r2
 800f89a:	009b      	lsls	r3, r3, #2
 800f89c:	440b      	add	r3, r1
 800f89e:	3318      	adds	r3, #24
 800f8a0:	681a      	ldr	r2, [r3, #0]
 800f8a2:	78fb      	ldrb	r3, [r7, #3]
 800f8a4:	f003 010f 	and.w	r1, r3, #15
 800f8a8:	68f8      	ldr	r0, [r7, #12]
 800f8aa:	460b      	mov	r3, r1
 800f8ac:	00db      	lsls	r3, r3, #3
 800f8ae:	440b      	add	r3, r1
 800f8b0:	009b      	lsls	r3, r3, #2
 800f8b2:	4403      	add	r3, r0
 800f8b4:	331c      	adds	r3, #28
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	fbb2 f1f3 	udiv	r1, r2, r3
 800f8bc:	fb01 f303 	mul.w	r3, r1, r3
 800f8c0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f8c2:	2b00      	cmp	r3, #0
 800f8c4:	d112      	bne.n	800f8ec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800f8c6:	78fb      	ldrb	r3, [r7, #3]
 800f8c8:	f003 020f 	and.w	r2, r3, #15
 800f8cc:	6879      	ldr	r1, [r7, #4]
 800f8ce:	4613      	mov	r3, r2
 800f8d0:	009b      	lsls	r3, r3, #2
 800f8d2:	4413      	add	r3, r2
 800f8d4:	009b      	lsls	r3, r3, #2
 800f8d6:	440b      	add	r3, r1
 800f8d8:	3318      	adds	r3, #24
 800f8da:	2200      	movs	r2, #0
 800f8dc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f8de:	78f9      	ldrb	r1, [r7, #3]
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	6878      	ldr	r0, [r7, #4]
 800f8e6:	f002 fa04 	bl	8011cf2 <USBD_LL_Transmit>
 800f8ea:	e01f      	b.n	800f92c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800f8ec:	68bb      	ldr	r3, [r7, #8]
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f8fa:	687a      	ldr	r2, [r7, #4]
 800f8fc:	33b0      	adds	r3, #176	@ 0xb0
 800f8fe:	009b      	lsls	r3, r3, #2
 800f900:	4413      	add	r3, r2
 800f902:	685b      	ldr	r3, [r3, #4]
 800f904:	691b      	ldr	r3, [r3, #16]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d010      	beq.n	800f92c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f910:	687a      	ldr	r2, [r7, #4]
 800f912:	33b0      	adds	r3, #176	@ 0xb0
 800f914:	009b      	lsls	r3, r3, #2
 800f916:	4413      	add	r3, r2
 800f918:	685b      	ldr	r3, [r3, #4]
 800f91a:	691b      	ldr	r3, [r3, #16]
 800f91c:	68ba      	ldr	r2, [r7, #8]
 800f91e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800f922:	68ba      	ldr	r2, [r7, #8]
 800f924:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800f928:	78fa      	ldrb	r2, [r7, #3]
 800f92a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f92c:	2300      	movs	r3, #0
}
 800f92e:	4618      	mov	r0, r3
 800f930:	3710      	adds	r7, #16
 800f932:	46bd      	mov	sp, r7
 800f934:	bd80      	pop	{r7, pc}

0800f936 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f936:	b580      	push	{r7, lr}
 800f938:	b084      	sub	sp, #16
 800f93a:	af00      	add	r7, sp, #0
 800f93c:	6078      	str	r0, [r7, #4]
 800f93e:	460b      	mov	r3, r1
 800f940:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	32b0      	adds	r2, #176	@ 0xb0
 800f94c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f950:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	32b0      	adds	r2, #176	@ 0xb0
 800f95c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d101      	bne.n	800f968 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800f964:	2303      	movs	r3, #3
 800f966:	e01a      	b.n	800f99e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f968:	78fb      	ldrb	r3, [r7, #3]
 800f96a:	4619      	mov	r1, r3
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f002 fa02 	bl	8011d76 <USBD_LL_GetRxDataSize>
 800f972:	4602      	mov	r2, r0
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f980:	687a      	ldr	r2, [r7, #4]
 800f982:	33b0      	adds	r3, #176	@ 0xb0
 800f984:	009b      	lsls	r3, r3, #2
 800f986:	4413      	add	r3, r2
 800f988:	685b      	ldr	r3, [r3, #4]
 800f98a:	68db      	ldr	r3, [r3, #12]
 800f98c:	68fa      	ldr	r2, [r7, #12]
 800f98e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800f992:	68fa      	ldr	r2, [r7, #12]
 800f994:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800f998:	4611      	mov	r1, r2
 800f99a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f99c:	2300      	movs	r3, #0
}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	3710      	adds	r7, #16
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}

0800f9a6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f9a6:	b580      	push	{r7, lr}
 800f9a8:	b084      	sub	sp, #16
 800f9aa:	af00      	add	r7, sp, #0
 800f9ac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	32b0      	adds	r2, #176	@ 0xb0
 800f9b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f9bc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f9be:	68fb      	ldr	r3, [r7, #12]
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	d101      	bne.n	800f9c8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f9c4:	2303      	movs	r3, #3
 800f9c6:	e024      	b.n	800fa12 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f9ce:	687a      	ldr	r2, [r7, #4]
 800f9d0:	33b0      	adds	r3, #176	@ 0xb0
 800f9d2:	009b      	lsls	r3, r3, #2
 800f9d4:	4413      	add	r3, r2
 800f9d6:	685b      	ldr	r3, [r3, #4]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d019      	beq.n	800fa10 <USBD_CDC_EP0_RxReady+0x6a>
 800f9dc:	68fb      	ldr	r3, [r7, #12]
 800f9de:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f9e2:	2bff      	cmp	r3, #255	@ 0xff
 800f9e4:	d014      	beq.n	800fa10 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f9ec:	687a      	ldr	r2, [r7, #4]
 800f9ee:	33b0      	adds	r3, #176	@ 0xb0
 800f9f0:	009b      	lsls	r3, r3, #2
 800f9f2:	4413      	add	r3, r2
 800f9f4:	685b      	ldr	r3, [r3, #4]
 800f9f6:	689b      	ldr	r3, [r3, #8]
 800f9f8:	68fa      	ldr	r2, [r7, #12]
 800f9fa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800f9fe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800fa00:	68fa      	ldr	r2, [r7, #12]
 800fa02:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800fa06:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	22ff      	movs	r2, #255	@ 0xff
 800fa0c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800fa10:	2300      	movs	r3, #0
}
 800fa12:	4618      	mov	r0, r3
 800fa14:	3710      	adds	r7, #16
 800fa16:	46bd      	mov	sp, r7
 800fa18:	bd80      	pop	{r7, pc}
	...

0800fa1c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800fa1c:	b580      	push	{r7, lr}
 800fa1e:	b086      	sub	sp, #24
 800fa20:	af00      	add	r7, sp, #0
 800fa22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fa24:	2182      	movs	r1, #130	@ 0x82
 800fa26:	4818      	ldr	r0, [pc, #96]	@ (800fa88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fa28:	f000 fd4f 	bl	80104ca <USBD_GetEpDesc>
 800fa2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fa2e:	2101      	movs	r1, #1
 800fa30:	4815      	ldr	r0, [pc, #84]	@ (800fa88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fa32:	f000 fd4a 	bl	80104ca <USBD_GetEpDesc>
 800fa36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fa38:	2181      	movs	r1, #129	@ 0x81
 800fa3a:	4813      	ldr	r0, [pc, #76]	@ (800fa88 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fa3c:	f000 fd45 	bl	80104ca <USBD_GetEpDesc>
 800fa40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fa42:	697b      	ldr	r3, [r7, #20]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d002      	beq.n	800fa4e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800fa48:	697b      	ldr	r3, [r7, #20]
 800fa4a:	2210      	movs	r2, #16
 800fa4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fa4e:	693b      	ldr	r3, [r7, #16]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d006      	beq.n	800fa62 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fa54:	693b      	ldr	r3, [r7, #16]
 800fa56:	2200      	movs	r2, #0
 800fa58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fa5c:	711a      	strb	r2, [r3, #4]
 800fa5e:	2200      	movs	r2, #0
 800fa60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	2b00      	cmp	r3, #0
 800fa66:	d006      	beq.n	800fa76 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fa70:	711a      	strb	r2, [r3, #4]
 800fa72:	2200      	movs	r2, #0
 800fa74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	2243      	movs	r2, #67	@ 0x43
 800fa7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fa7c:	4b02      	ldr	r3, [pc, #8]	@ (800fa88 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800fa7e:	4618      	mov	r0, r3
 800fa80:	3718      	adds	r7, #24
 800fa82:	46bd      	mov	sp, r7
 800fa84:	bd80      	pop	{r7, pc}
 800fa86:	bf00      	nop
 800fa88:	2400007c 	.word	0x2400007c

0800fa8c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800fa8c:	b580      	push	{r7, lr}
 800fa8e:	b086      	sub	sp, #24
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fa94:	2182      	movs	r1, #130	@ 0x82
 800fa96:	4818      	ldr	r0, [pc, #96]	@ (800faf8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fa98:	f000 fd17 	bl	80104ca <USBD_GetEpDesc>
 800fa9c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fa9e:	2101      	movs	r1, #1
 800faa0:	4815      	ldr	r0, [pc, #84]	@ (800faf8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800faa2:	f000 fd12 	bl	80104ca <USBD_GetEpDesc>
 800faa6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800faa8:	2181      	movs	r1, #129	@ 0x81
 800faaa:	4813      	ldr	r0, [pc, #76]	@ (800faf8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800faac:	f000 fd0d 	bl	80104ca <USBD_GetEpDesc>
 800fab0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fab2:	697b      	ldr	r3, [r7, #20]
 800fab4:	2b00      	cmp	r3, #0
 800fab6:	d002      	beq.n	800fabe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800fab8:	697b      	ldr	r3, [r7, #20]
 800faba:	2210      	movs	r2, #16
 800fabc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fabe:	693b      	ldr	r3, [r7, #16]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d006      	beq.n	800fad2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800fac4:	693b      	ldr	r3, [r7, #16]
 800fac6:	2200      	movs	r2, #0
 800fac8:	711a      	strb	r2, [r3, #4]
 800faca:	2200      	movs	r2, #0
 800facc:	f042 0202 	orr.w	r2, r2, #2
 800fad0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fad2:	68fb      	ldr	r3, [r7, #12]
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	d006      	beq.n	800fae6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800fad8:	68fb      	ldr	r3, [r7, #12]
 800fada:	2200      	movs	r2, #0
 800fadc:	711a      	strb	r2, [r3, #4]
 800fade:	2200      	movs	r2, #0
 800fae0:	f042 0202 	orr.w	r2, r2, #2
 800fae4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2243      	movs	r2, #67	@ 0x43
 800faea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800faec:	4b02      	ldr	r3, [pc, #8]	@ (800faf8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800faee:	4618      	mov	r0, r3
 800faf0:	3718      	adds	r7, #24
 800faf2:	46bd      	mov	sp, r7
 800faf4:	bd80      	pop	{r7, pc}
 800faf6:	bf00      	nop
 800faf8:	2400007c 	.word	0x2400007c

0800fafc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800fafc:	b580      	push	{r7, lr}
 800fafe:	b086      	sub	sp, #24
 800fb00:	af00      	add	r7, sp, #0
 800fb02:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fb04:	2182      	movs	r1, #130	@ 0x82
 800fb06:	4818      	ldr	r0, [pc, #96]	@ (800fb68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fb08:	f000 fcdf 	bl	80104ca <USBD_GetEpDesc>
 800fb0c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fb0e:	2101      	movs	r1, #1
 800fb10:	4815      	ldr	r0, [pc, #84]	@ (800fb68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fb12:	f000 fcda 	bl	80104ca <USBD_GetEpDesc>
 800fb16:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fb18:	2181      	movs	r1, #129	@ 0x81
 800fb1a:	4813      	ldr	r0, [pc, #76]	@ (800fb68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fb1c:	f000 fcd5 	bl	80104ca <USBD_GetEpDesc>
 800fb20:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fb22:	697b      	ldr	r3, [r7, #20]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d002      	beq.n	800fb2e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800fb28:	697b      	ldr	r3, [r7, #20]
 800fb2a:	2210      	movs	r2, #16
 800fb2c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fb2e:	693b      	ldr	r3, [r7, #16]
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d006      	beq.n	800fb42 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fb34:	693b      	ldr	r3, [r7, #16]
 800fb36:	2200      	movs	r2, #0
 800fb38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fb3c:	711a      	strb	r2, [r3, #4]
 800fb3e:	2200      	movs	r2, #0
 800fb40:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d006      	beq.n	800fb56 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fb50:	711a      	strb	r2, [r3, #4]
 800fb52:	2200      	movs	r2, #0
 800fb54:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	2243      	movs	r2, #67	@ 0x43
 800fb5a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fb5c:	4b02      	ldr	r3, [pc, #8]	@ (800fb68 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	3718      	adds	r7, #24
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}
 800fb66:	bf00      	nop
 800fb68:	2400007c 	.word	0x2400007c

0800fb6c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800fb6c:	b480      	push	{r7}
 800fb6e:	b083      	sub	sp, #12
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	220a      	movs	r2, #10
 800fb78:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800fb7a:	4b03      	ldr	r3, [pc, #12]	@ (800fb88 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800fb7c:	4618      	mov	r0, r3
 800fb7e:	370c      	adds	r7, #12
 800fb80:	46bd      	mov	sp, r7
 800fb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb86:	4770      	bx	lr
 800fb88:	24000038 	.word	0x24000038

0800fb8c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800fb8c:	b480      	push	{r7}
 800fb8e:	b083      	sub	sp, #12
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
 800fb94:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d101      	bne.n	800fba0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800fb9c:	2303      	movs	r3, #3
 800fb9e:	e009      	b.n	800fbb4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fba6:	687a      	ldr	r2, [r7, #4]
 800fba8:	33b0      	adds	r3, #176	@ 0xb0
 800fbaa:	009b      	lsls	r3, r3, #2
 800fbac:	4413      	add	r3, r2
 800fbae:	683a      	ldr	r2, [r7, #0]
 800fbb0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800fbb2:	2300      	movs	r3, #0
}
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	370c      	adds	r7, #12
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbbe:	4770      	bx	lr

0800fbc0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800fbc0:	b480      	push	{r7}
 800fbc2:	b087      	sub	sp, #28
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	60f8      	str	r0, [r7, #12]
 800fbc8:	60b9      	str	r1, [r7, #8]
 800fbca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	32b0      	adds	r2, #176	@ 0xb0
 800fbd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbda:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800fbdc:	697b      	ldr	r3, [r7, #20]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d101      	bne.n	800fbe6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800fbe2:	2303      	movs	r3, #3
 800fbe4:	e008      	b.n	800fbf8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	68ba      	ldr	r2, [r7, #8]
 800fbea:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800fbee:	697b      	ldr	r3, [r7, #20]
 800fbf0:	687a      	ldr	r2, [r7, #4]
 800fbf2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800fbf6:	2300      	movs	r3, #0
}
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	371c      	adds	r7, #28
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc02:	4770      	bx	lr

0800fc04 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800fc04:	b480      	push	{r7}
 800fc06:	b085      	sub	sp, #20
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
 800fc0c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	32b0      	adds	r2, #176	@ 0xb0
 800fc18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc1c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fc1e:	68fb      	ldr	r3, [r7, #12]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d101      	bne.n	800fc28 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800fc24:	2303      	movs	r3, #3
 800fc26:	e004      	b.n	800fc32 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	683a      	ldr	r2, [r7, #0]
 800fc2c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800fc30:	2300      	movs	r3, #0
}
 800fc32:	4618      	mov	r0, r3
 800fc34:	3714      	adds	r7, #20
 800fc36:	46bd      	mov	sp, r7
 800fc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc3c:	4770      	bx	lr
	...

0800fc40 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800fc40:	b580      	push	{r7, lr}
 800fc42:	b084      	sub	sp, #16
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	32b0      	adds	r2, #176	@ 0xb0
 800fc52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc56:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800fc58:	2301      	movs	r3, #1
 800fc5a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800fc5c:	68bb      	ldr	r3, [r7, #8]
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	d101      	bne.n	800fc66 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800fc62:	2303      	movs	r3, #3
 800fc64:	e025      	b.n	800fcb2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800fc66:	68bb      	ldr	r3, [r7, #8]
 800fc68:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d11f      	bne.n	800fcb0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800fc70:	68bb      	ldr	r3, [r7, #8]
 800fc72:	2201      	movs	r2, #1
 800fc74:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800fc78:	4b10      	ldr	r3, [pc, #64]	@ (800fcbc <USBD_CDC_TransmitPacket+0x7c>)
 800fc7a:	781b      	ldrb	r3, [r3, #0]
 800fc7c:	f003 020f 	and.w	r2, r3, #15
 800fc80:	68bb      	ldr	r3, [r7, #8]
 800fc82:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800fc86:	6878      	ldr	r0, [r7, #4]
 800fc88:	4613      	mov	r3, r2
 800fc8a:	009b      	lsls	r3, r3, #2
 800fc8c:	4413      	add	r3, r2
 800fc8e:	009b      	lsls	r3, r3, #2
 800fc90:	4403      	add	r3, r0
 800fc92:	3318      	adds	r3, #24
 800fc94:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800fc96:	4b09      	ldr	r3, [pc, #36]	@ (800fcbc <USBD_CDC_TransmitPacket+0x7c>)
 800fc98:	7819      	ldrb	r1, [r3, #0]
 800fc9a:	68bb      	ldr	r3, [r7, #8]
 800fc9c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800fca0:	68bb      	ldr	r3, [r7, #8]
 800fca2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800fca6:	6878      	ldr	r0, [r7, #4]
 800fca8:	f002 f823 	bl	8011cf2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800fcac:	2300      	movs	r3, #0
 800fcae:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800fcb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcb2:	4618      	mov	r0, r3
 800fcb4:	3710      	adds	r7, #16
 800fcb6:	46bd      	mov	sp, r7
 800fcb8:	bd80      	pop	{r7, pc}
 800fcba:	bf00      	nop
 800fcbc:	240000bf 	.word	0x240000bf

0800fcc0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800fcc0:	b580      	push	{r7, lr}
 800fcc2:	b084      	sub	sp, #16
 800fcc4:	af00      	add	r7, sp, #0
 800fcc6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	32b0      	adds	r2, #176	@ 0xb0
 800fcd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcd6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	32b0      	adds	r2, #176	@ 0xb0
 800fce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d101      	bne.n	800fcee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800fcea:	2303      	movs	r3, #3
 800fcec:	e018      	b.n	800fd20 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	7c1b      	ldrb	r3, [r3, #16]
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d10a      	bne.n	800fd0c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fcf6:	4b0c      	ldr	r3, [pc, #48]	@ (800fd28 <USBD_CDC_ReceivePacket+0x68>)
 800fcf8:	7819      	ldrb	r1, [r3, #0]
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fd00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fd04:	6878      	ldr	r0, [r7, #4]
 800fd06:	f002 f815 	bl	8011d34 <USBD_LL_PrepareReceive>
 800fd0a:	e008      	b.n	800fd1e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fd0c:	4b06      	ldr	r3, [pc, #24]	@ (800fd28 <USBD_CDC_ReceivePacket+0x68>)
 800fd0e:	7819      	ldrb	r1, [r3, #0]
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fd16:	2340      	movs	r3, #64	@ 0x40
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f002 f80b 	bl	8011d34 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fd1e:	2300      	movs	r3, #0
}
 800fd20:	4618      	mov	r0, r3
 800fd22:	3710      	adds	r7, #16
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}
 800fd28:	240000c0 	.word	0x240000c0

0800fd2c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800fd2c:	b580      	push	{r7, lr}
 800fd2e:	b086      	sub	sp, #24
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	60f8      	str	r0, [r7, #12]
 800fd34:	60b9      	str	r1, [r7, #8]
 800fd36:	4613      	mov	r3, r2
 800fd38:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d101      	bne.n	800fd44 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800fd40:	2303      	movs	r3, #3
 800fd42:	e01f      	b.n	800fd84 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	2200      	movs	r2, #0
 800fd48:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	2200      	movs	r2, #0
 800fd50:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800fd54:	68fb      	ldr	r3, [r7, #12]
 800fd56:	2200      	movs	r2, #0
 800fd58:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800fd5c:	68bb      	ldr	r3, [r7, #8]
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d003      	beq.n	800fd6a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	68ba      	ldr	r2, [r7, #8]
 800fd66:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	2201      	movs	r2, #1
 800fd6e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	79fa      	ldrb	r2, [r7, #7]
 800fd76:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800fd78:	68f8      	ldr	r0, [r7, #12]
 800fd7a:	f001 fe81 	bl	8011a80 <USBD_LL_Init>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	75fb      	strb	r3, [r7, #23]

  return ret;
 800fd82:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd84:	4618      	mov	r0, r3
 800fd86:	3718      	adds	r7, #24
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	bd80      	pop	{r7, pc}

0800fd8c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b084      	sub	sp, #16
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
 800fd94:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fd96:	2300      	movs	r3, #0
 800fd98:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800fd9a:	683b      	ldr	r3, [r7, #0]
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d101      	bne.n	800fda4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800fda0:	2303      	movs	r3, #3
 800fda2:	e025      	b.n	800fdf0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	683a      	ldr	r2, [r7, #0]
 800fda8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	32ae      	adds	r2, #174	@ 0xae
 800fdb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d00f      	beq.n	800fde0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	32ae      	adds	r2, #174	@ 0xae
 800fdca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fdd0:	f107 020e 	add.w	r2, r7, #14
 800fdd4:	4610      	mov	r0, r2
 800fdd6:	4798      	blx	r3
 800fdd8:	4602      	mov	r2, r0
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fde6:	1c5a      	adds	r2, r3, #1
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800fdee:	2300      	movs	r3, #0
}
 800fdf0:	4618      	mov	r0, r3
 800fdf2:	3710      	adds	r7, #16
 800fdf4:	46bd      	mov	sp, r7
 800fdf6:	bd80      	pop	{r7, pc}

0800fdf8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b082      	sub	sp, #8
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f001 fe8d 	bl	8011b20 <USBD_LL_Start>
 800fe06:	4603      	mov	r3, r0
}
 800fe08:	4618      	mov	r0, r3
 800fe0a:	3708      	adds	r7, #8
 800fe0c:	46bd      	mov	sp, r7
 800fe0e:	bd80      	pop	{r7, pc}

0800fe10 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800fe10:	b480      	push	{r7}
 800fe12:	b083      	sub	sp, #12
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fe18:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	370c      	adds	r7, #12
 800fe1e:	46bd      	mov	sp, r7
 800fe20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe24:	4770      	bx	lr

0800fe26 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fe26:	b580      	push	{r7, lr}
 800fe28:	b084      	sub	sp, #16
 800fe2a:	af00      	add	r7, sp, #0
 800fe2c:	6078      	str	r0, [r7, #4]
 800fe2e:	460b      	mov	r3, r1
 800fe30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fe32:	2300      	movs	r3, #0
 800fe34:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d009      	beq.n	800fe54 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fe46:	681b      	ldr	r3, [r3, #0]
 800fe48:	78fa      	ldrb	r2, [r7, #3]
 800fe4a:	4611      	mov	r1, r2
 800fe4c:	6878      	ldr	r0, [r7, #4]
 800fe4e:	4798      	blx	r3
 800fe50:	4603      	mov	r3, r0
 800fe52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fe54:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	3710      	adds	r7, #16
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	bd80      	pop	{r7, pc}

0800fe5e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fe5e:	b580      	push	{r7, lr}
 800fe60:	b084      	sub	sp, #16
 800fe62:	af00      	add	r7, sp, #0
 800fe64:	6078      	str	r0, [r7, #4]
 800fe66:	460b      	mov	r3, r1
 800fe68:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fe74:	685b      	ldr	r3, [r3, #4]
 800fe76:	78fa      	ldrb	r2, [r7, #3]
 800fe78:	4611      	mov	r1, r2
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	4798      	blx	r3
 800fe7e:	4603      	mov	r3, r0
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d001      	beq.n	800fe88 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800fe84:	2303      	movs	r3, #3
 800fe86:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fe88:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe8a:	4618      	mov	r0, r3
 800fe8c:	3710      	adds	r7, #16
 800fe8e:	46bd      	mov	sp, r7
 800fe90:	bd80      	pop	{r7, pc}

0800fe92 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fe92:	b580      	push	{r7, lr}
 800fe94:	b084      	sub	sp, #16
 800fe96:	af00      	add	r7, sp, #0
 800fe98:	6078      	str	r0, [r7, #4]
 800fe9a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fea2:	6839      	ldr	r1, [r7, #0]
 800fea4:	4618      	mov	r0, r3
 800fea6:	f001 f936 	bl	8011116 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	2201      	movs	r2, #1
 800feae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800feb8:	461a      	mov	r2, r3
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fec6:	f003 031f 	and.w	r3, r3, #31
 800feca:	2b02      	cmp	r3, #2
 800fecc:	d01a      	beq.n	800ff04 <USBD_LL_SetupStage+0x72>
 800fece:	2b02      	cmp	r3, #2
 800fed0:	d822      	bhi.n	800ff18 <USBD_LL_SetupStage+0x86>
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d002      	beq.n	800fedc <USBD_LL_SetupStage+0x4a>
 800fed6:	2b01      	cmp	r3, #1
 800fed8:	d00a      	beq.n	800fef0 <USBD_LL_SetupStage+0x5e>
 800feda:	e01d      	b.n	800ff18 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fee2:	4619      	mov	r1, r3
 800fee4:	6878      	ldr	r0, [r7, #4]
 800fee6:	f000 fb63 	bl	80105b0 <USBD_StdDevReq>
 800feea:	4603      	mov	r3, r0
 800feec:	73fb      	strb	r3, [r7, #15]
      break;
 800feee:	e020      	b.n	800ff32 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fef6:	4619      	mov	r1, r3
 800fef8:	6878      	ldr	r0, [r7, #4]
 800fefa:	f000 fbcb 	bl	8010694 <USBD_StdItfReq>
 800fefe:	4603      	mov	r3, r0
 800ff00:	73fb      	strb	r3, [r7, #15]
      break;
 800ff02:	e016      	b.n	800ff32 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ff0a:	4619      	mov	r1, r3
 800ff0c:	6878      	ldr	r0, [r7, #4]
 800ff0e:	f000 fc2d 	bl	801076c <USBD_StdEPReq>
 800ff12:	4603      	mov	r3, r0
 800ff14:	73fb      	strb	r3, [r7, #15]
      break;
 800ff16:	e00c      	b.n	800ff32 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ff1e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ff22:	b2db      	uxtb	r3, r3
 800ff24:	4619      	mov	r1, r3
 800ff26:	6878      	ldr	r0, [r7, #4]
 800ff28:	f001 fe5a 	bl	8011be0 <USBD_LL_StallEP>
 800ff2c:	4603      	mov	r3, r0
 800ff2e:	73fb      	strb	r3, [r7, #15]
      break;
 800ff30:	bf00      	nop
  }

  return ret;
 800ff32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ff34:	4618      	mov	r0, r3
 800ff36:	3710      	adds	r7, #16
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	bd80      	pop	{r7, pc}

0800ff3c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b086      	sub	sp, #24
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	60f8      	str	r0, [r7, #12]
 800ff44:	460b      	mov	r3, r1
 800ff46:	607a      	str	r2, [r7, #4]
 800ff48:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800ff4e:	7afb      	ldrb	r3, [r7, #11]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d16e      	bne.n	8010032 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ff5a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ff62:	2b03      	cmp	r3, #3
 800ff64:	f040 8098 	bne.w	8010098 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800ff68:	693b      	ldr	r3, [r7, #16]
 800ff6a:	689a      	ldr	r2, [r3, #8]
 800ff6c:	693b      	ldr	r3, [r7, #16]
 800ff6e:	68db      	ldr	r3, [r3, #12]
 800ff70:	429a      	cmp	r2, r3
 800ff72:	d913      	bls.n	800ff9c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ff74:	693b      	ldr	r3, [r7, #16]
 800ff76:	689a      	ldr	r2, [r3, #8]
 800ff78:	693b      	ldr	r3, [r7, #16]
 800ff7a:	68db      	ldr	r3, [r3, #12]
 800ff7c:	1ad2      	subs	r2, r2, r3
 800ff7e:	693b      	ldr	r3, [r7, #16]
 800ff80:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ff82:	693b      	ldr	r3, [r7, #16]
 800ff84:	68da      	ldr	r2, [r3, #12]
 800ff86:	693b      	ldr	r3, [r7, #16]
 800ff88:	689b      	ldr	r3, [r3, #8]
 800ff8a:	4293      	cmp	r3, r2
 800ff8c:	bf28      	it	cs
 800ff8e:	4613      	movcs	r3, r2
 800ff90:	461a      	mov	r2, r3
 800ff92:	6879      	ldr	r1, [r7, #4]
 800ff94:	68f8      	ldr	r0, [r7, #12]
 800ff96:	f001 f9be 	bl	8011316 <USBD_CtlContinueRx>
 800ff9a:	e07d      	b.n	8010098 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ffa2:	f003 031f 	and.w	r3, r3, #31
 800ffa6:	2b02      	cmp	r3, #2
 800ffa8:	d014      	beq.n	800ffd4 <USBD_LL_DataOutStage+0x98>
 800ffaa:	2b02      	cmp	r3, #2
 800ffac:	d81d      	bhi.n	800ffea <USBD_LL_DataOutStage+0xae>
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d002      	beq.n	800ffb8 <USBD_LL_DataOutStage+0x7c>
 800ffb2:	2b01      	cmp	r3, #1
 800ffb4:	d003      	beq.n	800ffbe <USBD_LL_DataOutStage+0x82>
 800ffb6:	e018      	b.n	800ffea <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ffb8:	2300      	movs	r3, #0
 800ffba:	75bb      	strb	r3, [r7, #22]
            break;
 800ffbc:	e018      	b.n	800fff0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ffc4:	b2db      	uxtb	r3, r3
 800ffc6:	4619      	mov	r1, r3
 800ffc8:	68f8      	ldr	r0, [r7, #12]
 800ffca:	f000 fa64 	bl	8010496 <USBD_CoreFindIF>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	75bb      	strb	r3, [r7, #22]
            break;
 800ffd2:	e00d      	b.n	800fff0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ffda:	b2db      	uxtb	r3, r3
 800ffdc:	4619      	mov	r1, r3
 800ffde:	68f8      	ldr	r0, [r7, #12]
 800ffe0:	f000 fa66 	bl	80104b0 <USBD_CoreFindEP>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	75bb      	strb	r3, [r7, #22]
            break;
 800ffe8:	e002      	b.n	800fff0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ffea:	2300      	movs	r3, #0
 800ffec:	75bb      	strb	r3, [r7, #22]
            break;
 800ffee:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800fff0:	7dbb      	ldrb	r3, [r7, #22]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d119      	bne.n	801002a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fffc:	b2db      	uxtb	r3, r3
 800fffe:	2b03      	cmp	r3, #3
 8010000:	d113      	bne.n	801002a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8010002:	7dba      	ldrb	r2, [r7, #22]
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	32ae      	adds	r2, #174	@ 0xae
 8010008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801000c:	691b      	ldr	r3, [r3, #16]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d00b      	beq.n	801002a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8010012:	7dba      	ldrb	r2, [r7, #22]
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801001a:	7dba      	ldrb	r2, [r7, #22]
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	32ae      	adds	r2, #174	@ 0xae
 8010020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010024:	691b      	ldr	r3, [r3, #16]
 8010026:	68f8      	ldr	r0, [r7, #12]
 8010028:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801002a:	68f8      	ldr	r0, [r7, #12]
 801002c:	f001 f984 	bl	8011338 <USBD_CtlSendStatus>
 8010030:	e032      	b.n	8010098 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8010032:	7afb      	ldrb	r3, [r7, #11]
 8010034:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010038:	b2db      	uxtb	r3, r3
 801003a:	4619      	mov	r1, r3
 801003c:	68f8      	ldr	r0, [r7, #12]
 801003e:	f000 fa37 	bl	80104b0 <USBD_CoreFindEP>
 8010042:	4603      	mov	r3, r0
 8010044:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010046:	7dbb      	ldrb	r3, [r7, #22]
 8010048:	2bff      	cmp	r3, #255	@ 0xff
 801004a:	d025      	beq.n	8010098 <USBD_LL_DataOutStage+0x15c>
 801004c:	7dbb      	ldrb	r3, [r7, #22]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d122      	bne.n	8010098 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010058:	b2db      	uxtb	r3, r3
 801005a:	2b03      	cmp	r3, #3
 801005c:	d117      	bne.n	801008e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801005e:	7dba      	ldrb	r2, [r7, #22]
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	32ae      	adds	r2, #174	@ 0xae
 8010064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010068:	699b      	ldr	r3, [r3, #24]
 801006a:	2b00      	cmp	r3, #0
 801006c:	d00f      	beq.n	801008e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801006e:	7dba      	ldrb	r2, [r7, #22]
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8010076:	7dba      	ldrb	r2, [r7, #22]
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	32ae      	adds	r2, #174	@ 0xae
 801007c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010080:	699b      	ldr	r3, [r3, #24]
 8010082:	7afa      	ldrb	r2, [r7, #11]
 8010084:	4611      	mov	r1, r2
 8010086:	68f8      	ldr	r0, [r7, #12]
 8010088:	4798      	blx	r3
 801008a:	4603      	mov	r3, r0
 801008c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801008e:	7dfb      	ldrb	r3, [r7, #23]
 8010090:	2b00      	cmp	r3, #0
 8010092:	d001      	beq.n	8010098 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8010094:	7dfb      	ldrb	r3, [r7, #23]
 8010096:	e000      	b.n	801009a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8010098:	2300      	movs	r3, #0
}
 801009a:	4618      	mov	r0, r3
 801009c:	3718      	adds	r7, #24
 801009e:	46bd      	mov	sp, r7
 80100a0:	bd80      	pop	{r7, pc}

080100a2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80100a2:	b580      	push	{r7, lr}
 80100a4:	b086      	sub	sp, #24
 80100a6:	af00      	add	r7, sp, #0
 80100a8:	60f8      	str	r0, [r7, #12]
 80100aa:	460b      	mov	r3, r1
 80100ac:	607a      	str	r2, [r7, #4]
 80100ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80100b0:	7afb      	ldrb	r3, [r7, #11]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d16f      	bne.n	8010196 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	3314      	adds	r3, #20
 80100ba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80100c2:	2b02      	cmp	r3, #2
 80100c4:	d15a      	bne.n	801017c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80100c6:	693b      	ldr	r3, [r7, #16]
 80100c8:	689a      	ldr	r2, [r3, #8]
 80100ca:	693b      	ldr	r3, [r7, #16]
 80100cc:	68db      	ldr	r3, [r3, #12]
 80100ce:	429a      	cmp	r2, r3
 80100d0:	d914      	bls.n	80100fc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	689a      	ldr	r2, [r3, #8]
 80100d6:	693b      	ldr	r3, [r7, #16]
 80100d8:	68db      	ldr	r3, [r3, #12]
 80100da:	1ad2      	subs	r2, r2, r3
 80100dc:	693b      	ldr	r3, [r7, #16]
 80100de:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80100e0:	693b      	ldr	r3, [r7, #16]
 80100e2:	689b      	ldr	r3, [r3, #8]
 80100e4:	461a      	mov	r2, r3
 80100e6:	6879      	ldr	r1, [r7, #4]
 80100e8:	68f8      	ldr	r0, [r7, #12]
 80100ea:	f001 f8e6 	bl	80112ba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80100ee:	2300      	movs	r3, #0
 80100f0:	2200      	movs	r2, #0
 80100f2:	2100      	movs	r1, #0
 80100f4:	68f8      	ldr	r0, [r7, #12]
 80100f6:	f001 fe1d 	bl	8011d34 <USBD_LL_PrepareReceive>
 80100fa:	e03f      	b.n	801017c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80100fc:	693b      	ldr	r3, [r7, #16]
 80100fe:	68da      	ldr	r2, [r3, #12]
 8010100:	693b      	ldr	r3, [r7, #16]
 8010102:	689b      	ldr	r3, [r3, #8]
 8010104:	429a      	cmp	r2, r3
 8010106:	d11c      	bne.n	8010142 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010108:	693b      	ldr	r3, [r7, #16]
 801010a:	685a      	ldr	r2, [r3, #4]
 801010c:	693b      	ldr	r3, [r7, #16]
 801010e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8010110:	429a      	cmp	r2, r3
 8010112:	d316      	bcc.n	8010142 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8010114:	693b      	ldr	r3, [r7, #16]
 8010116:	685a      	ldr	r2, [r3, #4]
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 801011e:	429a      	cmp	r2, r3
 8010120:	d20f      	bcs.n	8010142 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010122:	2200      	movs	r2, #0
 8010124:	2100      	movs	r1, #0
 8010126:	68f8      	ldr	r0, [r7, #12]
 8010128:	f001 f8c7 	bl	80112ba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	2200      	movs	r2, #0
 8010130:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010134:	2300      	movs	r3, #0
 8010136:	2200      	movs	r2, #0
 8010138:	2100      	movs	r1, #0
 801013a:	68f8      	ldr	r0, [r7, #12]
 801013c:	f001 fdfa 	bl	8011d34 <USBD_LL_PrepareReceive>
 8010140:	e01c      	b.n	801017c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010148:	b2db      	uxtb	r3, r3
 801014a:	2b03      	cmp	r3, #3
 801014c:	d10f      	bne.n	801016e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010154:	68db      	ldr	r3, [r3, #12]
 8010156:	2b00      	cmp	r3, #0
 8010158:	d009      	beq.n	801016e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	2200      	movs	r2, #0
 801015e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010168:	68db      	ldr	r3, [r3, #12]
 801016a:	68f8      	ldr	r0, [r7, #12]
 801016c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801016e:	2180      	movs	r1, #128	@ 0x80
 8010170:	68f8      	ldr	r0, [r7, #12]
 8010172:	f001 fd35 	bl	8011be0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010176:	68f8      	ldr	r0, [r7, #12]
 8010178:	f001 f8f1 	bl	801135e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8010182:	2b00      	cmp	r3, #0
 8010184:	d03a      	beq.n	80101fc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8010186:	68f8      	ldr	r0, [r7, #12]
 8010188:	f7ff fe42 	bl	800fe10 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801018c:	68fb      	ldr	r3, [r7, #12]
 801018e:	2200      	movs	r2, #0
 8010190:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8010194:	e032      	b.n	80101fc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8010196:	7afb      	ldrb	r3, [r7, #11]
 8010198:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801019c:	b2db      	uxtb	r3, r3
 801019e:	4619      	mov	r1, r3
 80101a0:	68f8      	ldr	r0, [r7, #12]
 80101a2:	f000 f985 	bl	80104b0 <USBD_CoreFindEP>
 80101a6:	4603      	mov	r3, r0
 80101a8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80101aa:	7dfb      	ldrb	r3, [r7, #23]
 80101ac:	2bff      	cmp	r3, #255	@ 0xff
 80101ae:	d025      	beq.n	80101fc <USBD_LL_DataInStage+0x15a>
 80101b0:	7dfb      	ldrb	r3, [r7, #23]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d122      	bne.n	80101fc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80101bc:	b2db      	uxtb	r3, r3
 80101be:	2b03      	cmp	r3, #3
 80101c0:	d11c      	bne.n	80101fc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80101c2:	7dfa      	ldrb	r2, [r7, #23]
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	32ae      	adds	r2, #174	@ 0xae
 80101c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101cc:	695b      	ldr	r3, [r3, #20]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d014      	beq.n	80101fc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80101d2:	7dfa      	ldrb	r2, [r7, #23]
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80101da:	7dfa      	ldrb	r2, [r7, #23]
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	32ae      	adds	r2, #174	@ 0xae
 80101e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101e4:	695b      	ldr	r3, [r3, #20]
 80101e6:	7afa      	ldrb	r2, [r7, #11]
 80101e8:	4611      	mov	r1, r2
 80101ea:	68f8      	ldr	r0, [r7, #12]
 80101ec:	4798      	blx	r3
 80101ee:	4603      	mov	r3, r0
 80101f0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80101f2:	7dbb      	ldrb	r3, [r7, #22]
 80101f4:	2b00      	cmp	r3, #0
 80101f6:	d001      	beq.n	80101fc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80101f8:	7dbb      	ldrb	r3, [r7, #22]
 80101fa:	e000      	b.n	80101fe <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80101fc:	2300      	movs	r3, #0
}
 80101fe:	4618      	mov	r0, r3
 8010200:	3718      	adds	r7, #24
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}

08010206 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010206:	b580      	push	{r7, lr}
 8010208:	b084      	sub	sp, #16
 801020a:	af00      	add	r7, sp, #0
 801020c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801020e:	2300      	movs	r3, #0
 8010210:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	2201      	movs	r2, #1
 8010216:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	2200      	movs	r2, #0
 801021e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8010222:	687b      	ldr	r3, [r7, #4]
 8010224:	2200      	movs	r2, #0
 8010226:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	2200      	movs	r2, #0
 801022c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	2200      	movs	r2, #0
 8010234:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801023e:	2b00      	cmp	r3, #0
 8010240:	d014      	beq.n	801026c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010248:	685b      	ldr	r3, [r3, #4]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d00e      	beq.n	801026c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010254:	685b      	ldr	r3, [r3, #4]
 8010256:	687a      	ldr	r2, [r7, #4]
 8010258:	6852      	ldr	r2, [r2, #4]
 801025a:	b2d2      	uxtb	r2, r2
 801025c:	4611      	mov	r1, r2
 801025e:	6878      	ldr	r0, [r7, #4]
 8010260:	4798      	blx	r3
 8010262:	4603      	mov	r3, r0
 8010264:	2b00      	cmp	r3, #0
 8010266:	d001      	beq.n	801026c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010268:	2303      	movs	r3, #3
 801026a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801026c:	2340      	movs	r3, #64	@ 0x40
 801026e:	2200      	movs	r2, #0
 8010270:	2100      	movs	r1, #0
 8010272:	6878      	ldr	r0, [r7, #4]
 8010274:	f001 fc6f 	bl	8011b56 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2201      	movs	r2, #1
 801027c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2240      	movs	r2, #64	@ 0x40
 8010284:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010288:	2340      	movs	r3, #64	@ 0x40
 801028a:	2200      	movs	r2, #0
 801028c:	2180      	movs	r1, #128	@ 0x80
 801028e:	6878      	ldr	r0, [r7, #4]
 8010290:	f001 fc61 	bl	8011b56 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010294:	687b      	ldr	r3, [r7, #4]
 8010296:	2201      	movs	r2, #1
 8010298:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	2240      	movs	r2, #64	@ 0x40
 801029e:	621a      	str	r2, [r3, #32]

  return ret;
 80102a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80102a2:	4618      	mov	r0, r3
 80102a4:	3710      	adds	r7, #16
 80102a6:	46bd      	mov	sp, r7
 80102a8:	bd80      	pop	{r7, pc}

080102aa <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80102aa:	b480      	push	{r7}
 80102ac:	b083      	sub	sp, #12
 80102ae:	af00      	add	r7, sp, #0
 80102b0:	6078      	str	r0, [r7, #4]
 80102b2:	460b      	mov	r3, r1
 80102b4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	78fa      	ldrb	r2, [r7, #3]
 80102ba:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80102bc:	2300      	movs	r3, #0
}
 80102be:	4618      	mov	r0, r3
 80102c0:	370c      	adds	r7, #12
 80102c2:	46bd      	mov	sp, r7
 80102c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c8:	4770      	bx	lr

080102ca <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80102ca:	b480      	push	{r7}
 80102cc:	b083      	sub	sp, #12
 80102ce:	af00      	add	r7, sp, #0
 80102d0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80102d8:	b2db      	uxtb	r3, r3
 80102da:	2b04      	cmp	r3, #4
 80102dc:	d006      	beq.n	80102ec <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80102e4:	b2da      	uxtb	r2, r3
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	2204      	movs	r2, #4
 80102f0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80102f4:	2300      	movs	r3, #0
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	370c      	adds	r7, #12
 80102fa:	46bd      	mov	sp, r7
 80102fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010300:	4770      	bx	lr

08010302 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8010302:	b480      	push	{r7}
 8010304:	b083      	sub	sp, #12
 8010306:	af00      	add	r7, sp, #0
 8010308:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010310:	b2db      	uxtb	r3, r3
 8010312:	2b04      	cmp	r3, #4
 8010314:	d106      	bne.n	8010324 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 801031c:	b2da      	uxtb	r2, r3
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8010324:	2300      	movs	r3, #0
}
 8010326:	4618      	mov	r0, r3
 8010328:	370c      	adds	r7, #12
 801032a:	46bd      	mov	sp, r7
 801032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010330:	4770      	bx	lr

08010332 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010332:	b580      	push	{r7, lr}
 8010334:	b082      	sub	sp, #8
 8010336:	af00      	add	r7, sp, #0
 8010338:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010340:	b2db      	uxtb	r3, r3
 8010342:	2b03      	cmp	r3, #3
 8010344:	d110      	bne.n	8010368 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801034c:	2b00      	cmp	r3, #0
 801034e:	d00b      	beq.n	8010368 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010356:	69db      	ldr	r3, [r3, #28]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d005      	beq.n	8010368 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010362:	69db      	ldr	r3, [r3, #28]
 8010364:	6878      	ldr	r0, [r7, #4]
 8010366:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8010368:	2300      	movs	r3, #0
}
 801036a:	4618      	mov	r0, r3
 801036c:	3708      	adds	r7, #8
 801036e:	46bd      	mov	sp, r7
 8010370:	bd80      	pop	{r7, pc}

08010372 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010372:	b580      	push	{r7, lr}
 8010374:	b082      	sub	sp, #8
 8010376:	af00      	add	r7, sp, #0
 8010378:	6078      	str	r0, [r7, #4]
 801037a:	460b      	mov	r3, r1
 801037c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	32ae      	adds	r2, #174	@ 0xae
 8010388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801038c:	2b00      	cmp	r3, #0
 801038e:	d101      	bne.n	8010394 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8010390:	2303      	movs	r3, #3
 8010392:	e01c      	b.n	80103ce <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801039a:	b2db      	uxtb	r3, r3
 801039c:	2b03      	cmp	r3, #3
 801039e:	d115      	bne.n	80103cc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	32ae      	adds	r2, #174	@ 0xae
 80103aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103ae:	6a1b      	ldr	r3, [r3, #32]
 80103b0:	2b00      	cmp	r3, #0
 80103b2:	d00b      	beq.n	80103cc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	32ae      	adds	r2, #174	@ 0xae
 80103be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103c2:	6a1b      	ldr	r3, [r3, #32]
 80103c4:	78fa      	ldrb	r2, [r7, #3]
 80103c6:	4611      	mov	r1, r2
 80103c8:	6878      	ldr	r0, [r7, #4]
 80103ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80103cc:	2300      	movs	r3, #0
}
 80103ce:	4618      	mov	r0, r3
 80103d0:	3708      	adds	r7, #8
 80103d2:	46bd      	mov	sp, r7
 80103d4:	bd80      	pop	{r7, pc}

080103d6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80103d6:	b580      	push	{r7, lr}
 80103d8:	b082      	sub	sp, #8
 80103da:	af00      	add	r7, sp, #0
 80103dc:	6078      	str	r0, [r7, #4]
 80103de:	460b      	mov	r3, r1
 80103e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	32ae      	adds	r2, #174	@ 0xae
 80103ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	d101      	bne.n	80103f8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80103f4:	2303      	movs	r3, #3
 80103f6:	e01c      	b.n	8010432 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80103fe:	b2db      	uxtb	r3, r3
 8010400:	2b03      	cmp	r3, #3
 8010402:	d115      	bne.n	8010430 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	32ae      	adds	r2, #174	@ 0xae
 801040e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010414:	2b00      	cmp	r3, #0
 8010416:	d00b      	beq.n	8010430 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	32ae      	adds	r2, #174	@ 0xae
 8010422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010428:	78fa      	ldrb	r2, [r7, #3]
 801042a:	4611      	mov	r1, r2
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010430:	2300      	movs	r3, #0
}
 8010432:	4618      	mov	r0, r3
 8010434:	3708      	adds	r7, #8
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}

0801043a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801043a:	b480      	push	{r7}
 801043c:	b083      	sub	sp, #12
 801043e:	af00      	add	r7, sp, #0
 8010440:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010442:	2300      	movs	r3, #0
}
 8010444:	4618      	mov	r0, r3
 8010446:	370c      	adds	r7, #12
 8010448:	46bd      	mov	sp, r7
 801044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801044e:	4770      	bx	lr

08010450 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010450:	b580      	push	{r7, lr}
 8010452:	b084      	sub	sp, #16
 8010454:	af00      	add	r7, sp, #0
 8010456:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8010458:	2300      	movs	r3, #0
 801045a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2201      	movs	r2, #1
 8010460:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801046a:	2b00      	cmp	r3, #0
 801046c:	d00e      	beq.n	801048c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010474:	685b      	ldr	r3, [r3, #4]
 8010476:	687a      	ldr	r2, [r7, #4]
 8010478:	6852      	ldr	r2, [r2, #4]
 801047a:	b2d2      	uxtb	r2, r2
 801047c:	4611      	mov	r1, r2
 801047e:	6878      	ldr	r0, [r7, #4]
 8010480:	4798      	blx	r3
 8010482:	4603      	mov	r3, r0
 8010484:	2b00      	cmp	r3, #0
 8010486:	d001      	beq.n	801048c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8010488:	2303      	movs	r3, #3
 801048a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801048c:	7bfb      	ldrb	r3, [r7, #15]
}
 801048e:	4618      	mov	r0, r3
 8010490:	3710      	adds	r7, #16
 8010492:	46bd      	mov	sp, r7
 8010494:	bd80      	pop	{r7, pc}

08010496 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010496:	b480      	push	{r7}
 8010498:	b083      	sub	sp, #12
 801049a:	af00      	add	r7, sp, #0
 801049c:	6078      	str	r0, [r7, #4]
 801049e:	460b      	mov	r3, r1
 80104a0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80104a2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80104a4:	4618      	mov	r0, r3
 80104a6:	370c      	adds	r7, #12
 80104a8:	46bd      	mov	sp, r7
 80104aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ae:	4770      	bx	lr

080104b0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80104b0:	b480      	push	{r7}
 80104b2:	b083      	sub	sp, #12
 80104b4:	af00      	add	r7, sp, #0
 80104b6:	6078      	str	r0, [r7, #4]
 80104b8:	460b      	mov	r3, r1
 80104ba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80104bc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80104be:	4618      	mov	r0, r3
 80104c0:	370c      	adds	r7, #12
 80104c2:	46bd      	mov	sp, r7
 80104c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104c8:	4770      	bx	lr

080104ca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80104ca:	b580      	push	{r7, lr}
 80104cc:	b086      	sub	sp, #24
 80104ce:	af00      	add	r7, sp, #0
 80104d0:	6078      	str	r0, [r7, #4]
 80104d2:	460b      	mov	r3, r1
 80104d4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80104de:	2300      	movs	r3, #0
 80104e0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	885b      	ldrh	r3, [r3, #2]
 80104e6:	b29b      	uxth	r3, r3
 80104e8:	68fa      	ldr	r2, [r7, #12]
 80104ea:	7812      	ldrb	r2, [r2, #0]
 80104ec:	4293      	cmp	r3, r2
 80104ee:	d91f      	bls.n	8010530 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	781b      	ldrb	r3, [r3, #0]
 80104f4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80104f6:	e013      	b.n	8010520 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80104f8:	f107 030a 	add.w	r3, r7, #10
 80104fc:	4619      	mov	r1, r3
 80104fe:	6978      	ldr	r0, [r7, #20]
 8010500:	f000 f81b 	bl	801053a <USBD_GetNextDesc>
 8010504:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010506:	697b      	ldr	r3, [r7, #20]
 8010508:	785b      	ldrb	r3, [r3, #1]
 801050a:	2b05      	cmp	r3, #5
 801050c:	d108      	bne.n	8010520 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801050e:	697b      	ldr	r3, [r7, #20]
 8010510:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8010512:	693b      	ldr	r3, [r7, #16]
 8010514:	789b      	ldrb	r3, [r3, #2]
 8010516:	78fa      	ldrb	r2, [r7, #3]
 8010518:	429a      	cmp	r2, r3
 801051a:	d008      	beq.n	801052e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 801051c:	2300      	movs	r3, #0
 801051e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	885b      	ldrh	r3, [r3, #2]
 8010524:	b29a      	uxth	r2, r3
 8010526:	897b      	ldrh	r3, [r7, #10]
 8010528:	429a      	cmp	r2, r3
 801052a:	d8e5      	bhi.n	80104f8 <USBD_GetEpDesc+0x2e>
 801052c:	e000      	b.n	8010530 <USBD_GetEpDesc+0x66>
          break;
 801052e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010530:	693b      	ldr	r3, [r7, #16]
}
 8010532:	4618      	mov	r0, r3
 8010534:	3718      	adds	r7, #24
 8010536:	46bd      	mov	sp, r7
 8010538:	bd80      	pop	{r7, pc}

0801053a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801053a:	b480      	push	{r7}
 801053c:	b085      	sub	sp, #20
 801053e:	af00      	add	r7, sp, #0
 8010540:	6078      	str	r0, [r7, #4]
 8010542:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010548:	683b      	ldr	r3, [r7, #0]
 801054a:	881b      	ldrh	r3, [r3, #0]
 801054c:	68fa      	ldr	r2, [r7, #12]
 801054e:	7812      	ldrb	r2, [r2, #0]
 8010550:	4413      	add	r3, r2
 8010552:	b29a      	uxth	r2, r3
 8010554:	683b      	ldr	r3, [r7, #0]
 8010556:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	781b      	ldrb	r3, [r3, #0]
 801055c:	461a      	mov	r2, r3
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	4413      	add	r3, r2
 8010562:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010564:	68fb      	ldr	r3, [r7, #12]
}
 8010566:	4618      	mov	r0, r3
 8010568:	3714      	adds	r7, #20
 801056a:	46bd      	mov	sp, r7
 801056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010570:	4770      	bx	lr

08010572 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010572:	b480      	push	{r7}
 8010574:	b087      	sub	sp, #28
 8010576:	af00      	add	r7, sp, #0
 8010578:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801057e:	697b      	ldr	r3, [r7, #20]
 8010580:	781b      	ldrb	r3, [r3, #0]
 8010582:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010584:	697b      	ldr	r3, [r7, #20]
 8010586:	3301      	adds	r3, #1
 8010588:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801058a:	697b      	ldr	r3, [r7, #20]
 801058c:	781b      	ldrb	r3, [r3, #0]
 801058e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010590:	8a3b      	ldrh	r3, [r7, #16]
 8010592:	021b      	lsls	r3, r3, #8
 8010594:	b21a      	sxth	r2, r3
 8010596:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801059a:	4313      	orrs	r3, r2
 801059c:	b21b      	sxth	r3, r3
 801059e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80105a0:	89fb      	ldrh	r3, [r7, #14]
}
 80105a2:	4618      	mov	r0, r3
 80105a4:	371c      	adds	r7, #28
 80105a6:	46bd      	mov	sp, r7
 80105a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ac:	4770      	bx	lr
	...

080105b0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b084      	sub	sp, #16
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	6078      	str	r0, [r7, #4]
 80105b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80105ba:	2300      	movs	r3, #0
 80105bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80105be:	683b      	ldr	r3, [r7, #0]
 80105c0:	781b      	ldrb	r3, [r3, #0]
 80105c2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80105c6:	2b40      	cmp	r3, #64	@ 0x40
 80105c8:	d005      	beq.n	80105d6 <USBD_StdDevReq+0x26>
 80105ca:	2b40      	cmp	r3, #64	@ 0x40
 80105cc:	d857      	bhi.n	801067e <USBD_StdDevReq+0xce>
 80105ce:	2b00      	cmp	r3, #0
 80105d0:	d00f      	beq.n	80105f2 <USBD_StdDevReq+0x42>
 80105d2:	2b20      	cmp	r3, #32
 80105d4:	d153      	bne.n	801067e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	32ae      	adds	r2, #174	@ 0xae
 80105e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105e4:	689b      	ldr	r3, [r3, #8]
 80105e6:	6839      	ldr	r1, [r7, #0]
 80105e8:	6878      	ldr	r0, [r7, #4]
 80105ea:	4798      	blx	r3
 80105ec:	4603      	mov	r3, r0
 80105ee:	73fb      	strb	r3, [r7, #15]
      break;
 80105f0:	e04a      	b.n	8010688 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80105f2:	683b      	ldr	r3, [r7, #0]
 80105f4:	785b      	ldrb	r3, [r3, #1]
 80105f6:	2b09      	cmp	r3, #9
 80105f8:	d83b      	bhi.n	8010672 <USBD_StdDevReq+0xc2>
 80105fa:	a201      	add	r2, pc, #4	@ (adr r2, 8010600 <USBD_StdDevReq+0x50>)
 80105fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010600:	08010655 	.word	0x08010655
 8010604:	08010669 	.word	0x08010669
 8010608:	08010673 	.word	0x08010673
 801060c:	0801065f 	.word	0x0801065f
 8010610:	08010673 	.word	0x08010673
 8010614:	08010633 	.word	0x08010633
 8010618:	08010629 	.word	0x08010629
 801061c:	08010673 	.word	0x08010673
 8010620:	0801064b 	.word	0x0801064b
 8010624:	0801063d 	.word	0x0801063d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010628:	6839      	ldr	r1, [r7, #0]
 801062a:	6878      	ldr	r0, [r7, #4]
 801062c:	f000 fa3c 	bl	8010aa8 <USBD_GetDescriptor>
          break;
 8010630:	e024      	b.n	801067c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010632:	6839      	ldr	r1, [r7, #0]
 8010634:	6878      	ldr	r0, [r7, #4]
 8010636:	f000 fbcb 	bl	8010dd0 <USBD_SetAddress>
          break;
 801063a:	e01f      	b.n	801067c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 801063c:	6839      	ldr	r1, [r7, #0]
 801063e:	6878      	ldr	r0, [r7, #4]
 8010640:	f000 fc0a 	bl	8010e58 <USBD_SetConfig>
 8010644:	4603      	mov	r3, r0
 8010646:	73fb      	strb	r3, [r7, #15]
          break;
 8010648:	e018      	b.n	801067c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801064a:	6839      	ldr	r1, [r7, #0]
 801064c:	6878      	ldr	r0, [r7, #4]
 801064e:	f000 fcad 	bl	8010fac <USBD_GetConfig>
          break;
 8010652:	e013      	b.n	801067c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010654:	6839      	ldr	r1, [r7, #0]
 8010656:	6878      	ldr	r0, [r7, #4]
 8010658:	f000 fcde 	bl	8011018 <USBD_GetStatus>
          break;
 801065c:	e00e      	b.n	801067c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 801065e:	6839      	ldr	r1, [r7, #0]
 8010660:	6878      	ldr	r0, [r7, #4]
 8010662:	f000 fd0d 	bl	8011080 <USBD_SetFeature>
          break;
 8010666:	e009      	b.n	801067c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010668:	6839      	ldr	r1, [r7, #0]
 801066a:	6878      	ldr	r0, [r7, #4]
 801066c:	f000 fd31 	bl	80110d2 <USBD_ClrFeature>
          break;
 8010670:	e004      	b.n	801067c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8010672:	6839      	ldr	r1, [r7, #0]
 8010674:	6878      	ldr	r0, [r7, #4]
 8010676:	f000 fd88 	bl	801118a <USBD_CtlError>
          break;
 801067a:	bf00      	nop
      }
      break;
 801067c:	e004      	b.n	8010688 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801067e:	6839      	ldr	r1, [r7, #0]
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f000 fd82 	bl	801118a <USBD_CtlError>
      break;
 8010686:	bf00      	nop
  }

  return ret;
 8010688:	7bfb      	ldrb	r3, [r7, #15]
}
 801068a:	4618      	mov	r0, r3
 801068c:	3710      	adds	r7, #16
 801068e:	46bd      	mov	sp, r7
 8010690:	bd80      	pop	{r7, pc}
 8010692:	bf00      	nop

08010694 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010694:	b580      	push	{r7, lr}
 8010696:	b084      	sub	sp, #16
 8010698:	af00      	add	r7, sp, #0
 801069a:	6078      	str	r0, [r7, #4]
 801069c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801069e:	2300      	movs	r3, #0
 80106a0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80106a2:	683b      	ldr	r3, [r7, #0]
 80106a4:	781b      	ldrb	r3, [r3, #0]
 80106a6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80106aa:	2b40      	cmp	r3, #64	@ 0x40
 80106ac:	d005      	beq.n	80106ba <USBD_StdItfReq+0x26>
 80106ae:	2b40      	cmp	r3, #64	@ 0x40
 80106b0:	d852      	bhi.n	8010758 <USBD_StdItfReq+0xc4>
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d001      	beq.n	80106ba <USBD_StdItfReq+0x26>
 80106b6:	2b20      	cmp	r3, #32
 80106b8:	d14e      	bne.n	8010758 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80106c0:	b2db      	uxtb	r3, r3
 80106c2:	3b01      	subs	r3, #1
 80106c4:	2b02      	cmp	r3, #2
 80106c6:	d840      	bhi.n	801074a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80106c8:	683b      	ldr	r3, [r7, #0]
 80106ca:	889b      	ldrh	r3, [r3, #4]
 80106cc:	b2db      	uxtb	r3, r3
 80106ce:	2b01      	cmp	r3, #1
 80106d0:	d836      	bhi.n	8010740 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80106d2:	683b      	ldr	r3, [r7, #0]
 80106d4:	889b      	ldrh	r3, [r3, #4]
 80106d6:	b2db      	uxtb	r3, r3
 80106d8:	4619      	mov	r1, r3
 80106da:	6878      	ldr	r0, [r7, #4]
 80106dc:	f7ff fedb 	bl	8010496 <USBD_CoreFindIF>
 80106e0:	4603      	mov	r3, r0
 80106e2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80106e4:	7bbb      	ldrb	r3, [r7, #14]
 80106e6:	2bff      	cmp	r3, #255	@ 0xff
 80106e8:	d01d      	beq.n	8010726 <USBD_StdItfReq+0x92>
 80106ea:	7bbb      	ldrb	r3, [r7, #14]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d11a      	bne.n	8010726 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80106f0:	7bba      	ldrb	r2, [r7, #14]
 80106f2:	687b      	ldr	r3, [r7, #4]
 80106f4:	32ae      	adds	r2, #174	@ 0xae
 80106f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80106fa:	689b      	ldr	r3, [r3, #8]
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	d00f      	beq.n	8010720 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8010700:	7bba      	ldrb	r2, [r7, #14]
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010708:	7bba      	ldrb	r2, [r7, #14]
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	32ae      	adds	r2, #174	@ 0xae
 801070e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010712:	689b      	ldr	r3, [r3, #8]
 8010714:	6839      	ldr	r1, [r7, #0]
 8010716:	6878      	ldr	r0, [r7, #4]
 8010718:	4798      	blx	r3
 801071a:	4603      	mov	r3, r0
 801071c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801071e:	e004      	b.n	801072a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8010720:	2303      	movs	r3, #3
 8010722:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010724:	e001      	b.n	801072a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8010726:	2303      	movs	r3, #3
 8010728:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801072a:	683b      	ldr	r3, [r7, #0]
 801072c:	88db      	ldrh	r3, [r3, #6]
 801072e:	2b00      	cmp	r3, #0
 8010730:	d110      	bne.n	8010754 <USBD_StdItfReq+0xc0>
 8010732:	7bfb      	ldrb	r3, [r7, #15]
 8010734:	2b00      	cmp	r3, #0
 8010736:	d10d      	bne.n	8010754 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010738:	6878      	ldr	r0, [r7, #4]
 801073a:	f000 fdfd 	bl	8011338 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801073e:	e009      	b.n	8010754 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8010740:	6839      	ldr	r1, [r7, #0]
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f000 fd21 	bl	801118a <USBD_CtlError>
          break;
 8010748:	e004      	b.n	8010754 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801074a:	6839      	ldr	r1, [r7, #0]
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f000 fd1c 	bl	801118a <USBD_CtlError>
          break;
 8010752:	e000      	b.n	8010756 <USBD_StdItfReq+0xc2>
          break;
 8010754:	bf00      	nop
      }
      break;
 8010756:	e004      	b.n	8010762 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010758:	6839      	ldr	r1, [r7, #0]
 801075a:	6878      	ldr	r0, [r7, #4]
 801075c:	f000 fd15 	bl	801118a <USBD_CtlError>
      break;
 8010760:	bf00      	nop
  }

  return ret;
 8010762:	7bfb      	ldrb	r3, [r7, #15]
}
 8010764:	4618      	mov	r0, r3
 8010766:	3710      	adds	r7, #16
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}

0801076c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801076c:	b580      	push	{r7, lr}
 801076e:	b084      	sub	sp, #16
 8010770:	af00      	add	r7, sp, #0
 8010772:	6078      	str	r0, [r7, #4]
 8010774:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8010776:	2300      	movs	r3, #0
 8010778:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 801077a:	683b      	ldr	r3, [r7, #0]
 801077c:	889b      	ldrh	r3, [r3, #4]
 801077e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010780:	683b      	ldr	r3, [r7, #0]
 8010782:	781b      	ldrb	r3, [r3, #0]
 8010784:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010788:	2b40      	cmp	r3, #64	@ 0x40
 801078a:	d007      	beq.n	801079c <USBD_StdEPReq+0x30>
 801078c:	2b40      	cmp	r3, #64	@ 0x40
 801078e:	f200 817f 	bhi.w	8010a90 <USBD_StdEPReq+0x324>
 8010792:	2b00      	cmp	r3, #0
 8010794:	d02a      	beq.n	80107ec <USBD_StdEPReq+0x80>
 8010796:	2b20      	cmp	r3, #32
 8010798:	f040 817a 	bne.w	8010a90 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 801079c:	7bbb      	ldrb	r3, [r7, #14]
 801079e:	4619      	mov	r1, r3
 80107a0:	6878      	ldr	r0, [r7, #4]
 80107a2:	f7ff fe85 	bl	80104b0 <USBD_CoreFindEP>
 80107a6:	4603      	mov	r3, r0
 80107a8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80107aa:	7b7b      	ldrb	r3, [r7, #13]
 80107ac:	2bff      	cmp	r3, #255	@ 0xff
 80107ae:	f000 8174 	beq.w	8010a9a <USBD_StdEPReq+0x32e>
 80107b2:	7b7b      	ldrb	r3, [r7, #13]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	f040 8170 	bne.w	8010a9a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80107ba:	7b7a      	ldrb	r2, [r7, #13]
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80107c2:	7b7a      	ldrb	r2, [r7, #13]
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	32ae      	adds	r2, #174	@ 0xae
 80107c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107cc:	689b      	ldr	r3, [r3, #8]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	f000 8163 	beq.w	8010a9a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80107d4:	7b7a      	ldrb	r2, [r7, #13]
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	32ae      	adds	r2, #174	@ 0xae
 80107da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107de:	689b      	ldr	r3, [r3, #8]
 80107e0:	6839      	ldr	r1, [r7, #0]
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	4798      	blx	r3
 80107e6:	4603      	mov	r3, r0
 80107e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80107ea:	e156      	b.n	8010a9a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80107ec:	683b      	ldr	r3, [r7, #0]
 80107ee:	785b      	ldrb	r3, [r3, #1]
 80107f0:	2b03      	cmp	r3, #3
 80107f2:	d008      	beq.n	8010806 <USBD_StdEPReq+0x9a>
 80107f4:	2b03      	cmp	r3, #3
 80107f6:	f300 8145 	bgt.w	8010a84 <USBD_StdEPReq+0x318>
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	f000 809b 	beq.w	8010936 <USBD_StdEPReq+0x1ca>
 8010800:	2b01      	cmp	r3, #1
 8010802:	d03c      	beq.n	801087e <USBD_StdEPReq+0x112>
 8010804:	e13e      	b.n	8010a84 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801080c:	b2db      	uxtb	r3, r3
 801080e:	2b02      	cmp	r3, #2
 8010810:	d002      	beq.n	8010818 <USBD_StdEPReq+0xac>
 8010812:	2b03      	cmp	r3, #3
 8010814:	d016      	beq.n	8010844 <USBD_StdEPReq+0xd8>
 8010816:	e02c      	b.n	8010872 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010818:	7bbb      	ldrb	r3, [r7, #14]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d00d      	beq.n	801083a <USBD_StdEPReq+0xce>
 801081e:	7bbb      	ldrb	r3, [r7, #14]
 8010820:	2b80      	cmp	r3, #128	@ 0x80
 8010822:	d00a      	beq.n	801083a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010824:	7bbb      	ldrb	r3, [r7, #14]
 8010826:	4619      	mov	r1, r3
 8010828:	6878      	ldr	r0, [r7, #4]
 801082a:	f001 f9d9 	bl	8011be0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801082e:	2180      	movs	r1, #128	@ 0x80
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	f001 f9d5 	bl	8011be0 <USBD_LL_StallEP>
 8010836:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010838:	e020      	b.n	801087c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801083a:	6839      	ldr	r1, [r7, #0]
 801083c:	6878      	ldr	r0, [r7, #4]
 801083e:	f000 fca4 	bl	801118a <USBD_CtlError>
              break;
 8010842:	e01b      	b.n	801087c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010844:	683b      	ldr	r3, [r7, #0]
 8010846:	885b      	ldrh	r3, [r3, #2]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d10e      	bne.n	801086a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801084c:	7bbb      	ldrb	r3, [r7, #14]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d00b      	beq.n	801086a <USBD_StdEPReq+0xfe>
 8010852:	7bbb      	ldrb	r3, [r7, #14]
 8010854:	2b80      	cmp	r3, #128	@ 0x80
 8010856:	d008      	beq.n	801086a <USBD_StdEPReq+0xfe>
 8010858:	683b      	ldr	r3, [r7, #0]
 801085a:	88db      	ldrh	r3, [r3, #6]
 801085c:	2b00      	cmp	r3, #0
 801085e:	d104      	bne.n	801086a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010860:	7bbb      	ldrb	r3, [r7, #14]
 8010862:	4619      	mov	r1, r3
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	f001 f9bb 	bl	8011be0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 801086a:	6878      	ldr	r0, [r7, #4]
 801086c:	f000 fd64 	bl	8011338 <USBD_CtlSendStatus>

              break;
 8010870:	e004      	b.n	801087c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8010872:	6839      	ldr	r1, [r7, #0]
 8010874:	6878      	ldr	r0, [r7, #4]
 8010876:	f000 fc88 	bl	801118a <USBD_CtlError>
              break;
 801087a:	bf00      	nop
          }
          break;
 801087c:	e107      	b.n	8010a8e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010884:	b2db      	uxtb	r3, r3
 8010886:	2b02      	cmp	r3, #2
 8010888:	d002      	beq.n	8010890 <USBD_StdEPReq+0x124>
 801088a:	2b03      	cmp	r3, #3
 801088c:	d016      	beq.n	80108bc <USBD_StdEPReq+0x150>
 801088e:	e04b      	b.n	8010928 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010890:	7bbb      	ldrb	r3, [r7, #14]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d00d      	beq.n	80108b2 <USBD_StdEPReq+0x146>
 8010896:	7bbb      	ldrb	r3, [r7, #14]
 8010898:	2b80      	cmp	r3, #128	@ 0x80
 801089a:	d00a      	beq.n	80108b2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 801089c:	7bbb      	ldrb	r3, [r7, #14]
 801089e:	4619      	mov	r1, r3
 80108a0:	6878      	ldr	r0, [r7, #4]
 80108a2:	f001 f99d 	bl	8011be0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80108a6:	2180      	movs	r1, #128	@ 0x80
 80108a8:	6878      	ldr	r0, [r7, #4]
 80108aa:	f001 f999 	bl	8011be0 <USBD_LL_StallEP>
 80108ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80108b0:	e040      	b.n	8010934 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80108b2:	6839      	ldr	r1, [r7, #0]
 80108b4:	6878      	ldr	r0, [r7, #4]
 80108b6:	f000 fc68 	bl	801118a <USBD_CtlError>
              break;
 80108ba:	e03b      	b.n	8010934 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80108bc:	683b      	ldr	r3, [r7, #0]
 80108be:	885b      	ldrh	r3, [r3, #2]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d136      	bne.n	8010932 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80108c4:	7bbb      	ldrb	r3, [r7, #14]
 80108c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80108ca:	2b00      	cmp	r3, #0
 80108cc:	d004      	beq.n	80108d8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80108ce:	7bbb      	ldrb	r3, [r7, #14]
 80108d0:	4619      	mov	r1, r3
 80108d2:	6878      	ldr	r0, [r7, #4]
 80108d4:	f001 f9a3 	bl	8011c1e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80108d8:	6878      	ldr	r0, [r7, #4]
 80108da:	f000 fd2d 	bl	8011338 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80108de:	7bbb      	ldrb	r3, [r7, #14]
 80108e0:	4619      	mov	r1, r3
 80108e2:	6878      	ldr	r0, [r7, #4]
 80108e4:	f7ff fde4 	bl	80104b0 <USBD_CoreFindEP>
 80108e8:	4603      	mov	r3, r0
 80108ea:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80108ec:	7b7b      	ldrb	r3, [r7, #13]
 80108ee:	2bff      	cmp	r3, #255	@ 0xff
 80108f0:	d01f      	beq.n	8010932 <USBD_StdEPReq+0x1c6>
 80108f2:	7b7b      	ldrb	r3, [r7, #13]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d11c      	bne.n	8010932 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80108f8:	7b7a      	ldrb	r2, [r7, #13]
 80108fa:	687b      	ldr	r3, [r7, #4]
 80108fc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8010900:	7b7a      	ldrb	r2, [r7, #13]
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	32ae      	adds	r2, #174	@ 0xae
 8010906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801090a:	689b      	ldr	r3, [r3, #8]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d010      	beq.n	8010932 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010910:	7b7a      	ldrb	r2, [r7, #13]
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	32ae      	adds	r2, #174	@ 0xae
 8010916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801091a:	689b      	ldr	r3, [r3, #8]
 801091c:	6839      	ldr	r1, [r7, #0]
 801091e:	6878      	ldr	r0, [r7, #4]
 8010920:	4798      	blx	r3
 8010922:	4603      	mov	r3, r0
 8010924:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8010926:	e004      	b.n	8010932 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8010928:	6839      	ldr	r1, [r7, #0]
 801092a:	6878      	ldr	r0, [r7, #4]
 801092c:	f000 fc2d 	bl	801118a <USBD_CtlError>
              break;
 8010930:	e000      	b.n	8010934 <USBD_StdEPReq+0x1c8>
              break;
 8010932:	bf00      	nop
          }
          break;
 8010934:	e0ab      	b.n	8010a8e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801093c:	b2db      	uxtb	r3, r3
 801093e:	2b02      	cmp	r3, #2
 8010940:	d002      	beq.n	8010948 <USBD_StdEPReq+0x1dc>
 8010942:	2b03      	cmp	r3, #3
 8010944:	d032      	beq.n	80109ac <USBD_StdEPReq+0x240>
 8010946:	e097      	b.n	8010a78 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010948:	7bbb      	ldrb	r3, [r7, #14]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d007      	beq.n	801095e <USBD_StdEPReq+0x1f2>
 801094e:	7bbb      	ldrb	r3, [r7, #14]
 8010950:	2b80      	cmp	r3, #128	@ 0x80
 8010952:	d004      	beq.n	801095e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010954:	6839      	ldr	r1, [r7, #0]
 8010956:	6878      	ldr	r0, [r7, #4]
 8010958:	f000 fc17 	bl	801118a <USBD_CtlError>
                break;
 801095c:	e091      	b.n	8010a82 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801095e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010962:	2b00      	cmp	r3, #0
 8010964:	da0b      	bge.n	801097e <USBD_StdEPReq+0x212>
 8010966:	7bbb      	ldrb	r3, [r7, #14]
 8010968:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801096c:	4613      	mov	r3, r2
 801096e:	009b      	lsls	r3, r3, #2
 8010970:	4413      	add	r3, r2
 8010972:	009b      	lsls	r3, r3, #2
 8010974:	3310      	adds	r3, #16
 8010976:	687a      	ldr	r2, [r7, #4]
 8010978:	4413      	add	r3, r2
 801097a:	3304      	adds	r3, #4
 801097c:	e00b      	b.n	8010996 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801097e:	7bbb      	ldrb	r3, [r7, #14]
 8010980:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010984:	4613      	mov	r3, r2
 8010986:	009b      	lsls	r3, r3, #2
 8010988:	4413      	add	r3, r2
 801098a:	009b      	lsls	r3, r3, #2
 801098c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010990:	687a      	ldr	r2, [r7, #4]
 8010992:	4413      	add	r3, r2
 8010994:	3304      	adds	r3, #4
 8010996:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	2200      	movs	r2, #0
 801099c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801099e:	68bb      	ldr	r3, [r7, #8]
 80109a0:	2202      	movs	r2, #2
 80109a2:	4619      	mov	r1, r3
 80109a4:	6878      	ldr	r0, [r7, #4]
 80109a6:	f000 fc6d 	bl	8011284 <USBD_CtlSendData>
              break;
 80109aa:	e06a      	b.n	8010a82 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80109ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	da11      	bge.n	80109d8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80109b4:	7bbb      	ldrb	r3, [r7, #14]
 80109b6:	f003 020f 	and.w	r2, r3, #15
 80109ba:	6879      	ldr	r1, [r7, #4]
 80109bc:	4613      	mov	r3, r2
 80109be:	009b      	lsls	r3, r3, #2
 80109c0:	4413      	add	r3, r2
 80109c2:	009b      	lsls	r3, r3, #2
 80109c4:	440b      	add	r3, r1
 80109c6:	3324      	adds	r3, #36	@ 0x24
 80109c8:	881b      	ldrh	r3, [r3, #0]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d117      	bne.n	80109fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80109ce:	6839      	ldr	r1, [r7, #0]
 80109d0:	6878      	ldr	r0, [r7, #4]
 80109d2:	f000 fbda 	bl	801118a <USBD_CtlError>
                  break;
 80109d6:	e054      	b.n	8010a82 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80109d8:	7bbb      	ldrb	r3, [r7, #14]
 80109da:	f003 020f 	and.w	r2, r3, #15
 80109de:	6879      	ldr	r1, [r7, #4]
 80109e0:	4613      	mov	r3, r2
 80109e2:	009b      	lsls	r3, r3, #2
 80109e4:	4413      	add	r3, r2
 80109e6:	009b      	lsls	r3, r3, #2
 80109e8:	440b      	add	r3, r1
 80109ea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80109ee:	881b      	ldrh	r3, [r3, #0]
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d104      	bne.n	80109fe <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80109f4:	6839      	ldr	r1, [r7, #0]
 80109f6:	6878      	ldr	r0, [r7, #4]
 80109f8:	f000 fbc7 	bl	801118a <USBD_CtlError>
                  break;
 80109fc:	e041      	b.n	8010a82 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80109fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	da0b      	bge.n	8010a1e <USBD_StdEPReq+0x2b2>
 8010a06:	7bbb      	ldrb	r3, [r7, #14]
 8010a08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010a0c:	4613      	mov	r3, r2
 8010a0e:	009b      	lsls	r3, r3, #2
 8010a10:	4413      	add	r3, r2
 8010a12:	009b      	lsls	r3, r3, #2
 8010a14:	3310      	adds	r3, #16
 8010a16:	687a      	ldr	r2, [r7, #4]
 8010a18:	4413      	add	r3, r2
 8010a1a:	3304      	adds	r3, #4
 8010a1c:	e00b      	b.n	8010a36 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010a1e:	7bbb      	ldrb	r3, [r7, #14]
 8010a20:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010a24:	4613      	mov	r3, r2
 8010a26:	009b      	lsls	r3, r3, #2
 8010a28:	4413      	add	r3, r2
 8010a2a:	009b      	lsls	r3, r3, #2
 8010a2c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010a30:	687a      	ldr	r2, [r7, #4]
 8010a32:	4413      	add	r3, r2
 8010a34:	3304      	adds	r3, #4
 8010a36:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010a38:	7bbb      	ldrb	r3, [r7, #14]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d002      	beq.n	8010a44 <USBD_StdEPReq+0x2d8>
 8010a3e:	7bbb      	ldrb	r3, [r7, #14]
 8010a40:	2b80      	cmp	r3, #128	@ 0x80
 8010a42:	d103      	bne.n	8010a4c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010a44:	68bb      	ldr	r3, [r7, #8]
 8010a46:	2200      	movs	r2, #0
 8010a48:	601a      	str	r2, [r3, #0]
 8010a4a:	e00e      	b.n	8010a6a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010a4c:	7bbb      	ldrb	r3, [r7, #14]
 8010a4e:	4619      	mov	r1, r3
 8010a50:	6878      	ldr	r0, [r7, #4]
 8010a52:	f001 f903 	bl	8011c5c <USBD_LL_IsStallEP>
 8010a56:	4603      	mov	r3, r0
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	d003      	beq.n	8010a64 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010a5c:	68bb      	ldr	r3, [r7, #8]
 8010a5e:	2201      	movs	r2, #1
 8010a60:	601a      	str	r2, [r3, #0]
 8010a62:	e002      	b.n	8010a6a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010a64:	68bb      	ldr	r3, [r7, #8]
 8010a66:	2200      	movs	r2, #0
 8010a68:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010a6a:	68bb      	ldr	r3, [r7, #8]
 8010a6c:	2202      	movs	r2, #2
 8010a6e:	4619      	mov	r1, r3
 8010a70:	6878      	ldr	r0, [r7, #4]
 8010a72:	f000 fc07 	bl	8011284 <USBD_CtlSendData>
              break;
 8010a76:	e004      	b.n	8010a82 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010a78:	6839      	ldr	r1, [r7, #0]
 8010a7a:	6878      	ldr	r0, [r7, #4]
 8010a7c:	f000 fb85 	bl	801118a <USBD_CtlError>
              break;
 8010a80:	bf00      	nop
          }
          break;
 8010a82:	e004      	b.n	8010a8e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010a84:	6839      	ldr	r1, [r7, #0]
 8010a86:	6878      	ldr	r0, [r7, #4]
 8010a88:	f000 fb7f 	bl	801118a <USBD_CtlError>
          break;
 8010a8c:	bf00      	nop
      }
      break;
 8010a8e:	e005      	b.n	8010a9c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010a90:	6839      	ldr	r1, [r7, #0]
 8010a92:	6878      	ldr	r0, [r7, #4]
 8010a94:	f000 fb79 	bl	801118a <USBD_CtlError>
      break;
 8010a98:	e000      	b.n	8010a9c <USBD_StdEPReq+0x330>
      break;
 8010a9a:	bf00      	nop
  }

  return ret;
 8010a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a9e:	4618      	mov	r0, r3
 8010aa0:	3710      	adds	r7, #16
 8010aa2:	46bd      	mov	sp, r7
 8010aa4:	bd80      	pop	{r7, pc}
	...

08010aa8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010aa8:	b580      	push	{r7, lr}
 8010aaa:	b084      	sub	sp, #16
 8010aac:	af00      	add	r7, sp, #0
 8010aae:	6078      	str	r0, [r7, #4]
 8010ab0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010ab2:	2300      	movs	r3, #0
 8010ab4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010aba:	2300      	movs	r3, #0
 8010abc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010abe:	683b      	ldr	r3, [r7, #0]
 8010ac0:	885b      	ldrh	r3, [r3, #2]
 8010ac2:	0a1b      	lsrs	r3, r3, #8
 8010ac4:	b29b      	uxth	r3, r3
 8010ac6:	3b01      	subs	r3, #1
 8010ac8:	2b0e      	cmp	r3, #14
 8010aca:	f200 8152 	bhi.w	8010d72 <USBD_GetDescriptor+0x2ca>
 8010ace:	a201      	add	r2, pc, #4	@ (adr r2, 8010ad4 <USBD_GetDescriptor+0x2c>)
 8010ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ad4:	08010b45 	.word	0x08010b45
 8010ad8:	08010b5d 	.word	0x08010b5d
 8010adc:	08010b9d 	.word	0x08010b9d
 8010ae0:	08010d73 	.word	0x08010d73
 8010ae4:	08010d73 	.word	0x08010d73
 8010ae8:	08010d13 	.word	0x08010d13
 8010aec:	08010d3f 	.word	0x08010d3f
 8010af0:	08010d73 	.word	0x08010d73
 8010af4:	08010d73 	.word	0x08010d73
 8010af8:	08010d73 	.word	0x08010d73
 8010afc:	08010d73 	.word	0x08010d73
 8010b00:	08010d73 	.word	0x08010d73
 8010b04:	08010d73 	.word	0x08010d73
 8010b08:	08010d73 	.word	0x08010d73
 8010b0c:	08010b11 	.word	0x08010b11
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b16:	69db      	ldr	r3, [r3, #28]
 8010b18:	2b00      	cmp	r3, #0
 8010b1a:	d00b      	beq.n	8010b34 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b22:	69db      	ldr	r3, [r3, #28]
 8010b24:	687a      	ldr	r2, [r7, #4]
 8010b26:	7c12      	ldrb	r2, [r2, #16]
 8010b28:	f107 0108 	add.w	r1, r7, #8
 8010b2c:	4610      	mov	r0, r2
 8010b2e:	4798      	blx	r3
 8010b30:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010b32:	e126      	b.n	8010d82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010b34:	6839      	ldr	r1, [r7, #0]
 8010b36:	6878      	ldr	r0, [r7, #4]
 8010b38:	f000 fb27 	bl	801118a <USBD_CtlError>
        err++;
 8010b3c:	7afb      	ldrb	r3, [r7, #11]
 8010b3e:	3301      	adds	r3, #1
 8010b40:	72fb      	strb	r3, [r7, #11]
      break;
 8010b42:	e11e      	b.n	8010d82 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	687a      	ldr	r2, [r7, #4]
 8010b4e:	7c12      	ldrb	r2, [r2, #16]
 8010b50:	f107 0108 	add.w	r1, r7, #8
 8010b54:	4610      	mov	r0, r2
 8010b56:	4798      	blx	r3
 8010b58:	60f8      	str	r0, [r7, #12]
      break;
 8010b5a:	e112      	b.n	8010d82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	7c1b      	ldrb	r3, [r3, #16]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d10d      	bne.n	8010b80 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010b6c:	f107 0208 	add.w	r2, r7, #8
 8010b70:	4610      	mov	r0, r2
 8010b72:	4798      	blx	r3
 8010b74:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	3301      	adds	r3, #1
 8010b7a:	2202      	movs	r2, #2
 8010b7c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010b7e:	e100      	b.n	8010d82 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b88:	f107 0208 	add.w	r2, r7, #8
 8010b8c:	4610      	mov	r0, r2
 8010b8e:	4798      	blx	r3
 8010b90:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010b92:	68fb      	ldr	r3, [r7, #12]
 8010b94:	3301      	adds	r3, #1
 8010b96:	2202      	movs	r2, #2
 8010b98:	701a      	strb	r2, [r3, #0]
      break;
 8010b9a:	e0f2      	b.n	8010d82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	885b      	ldrh	r3, [r3, #2]
 8010ba0:	b2db      	uxtb	r3, r3
 8010ba2:	2b05      	cmp	r3, #5
 8010ba4:	f200 80ac 	bhi.w	8010d00 <USBD_GetDescriptor+0x258>
 8010ba8:	a201      	add	r2, pc, #4	@ (adr r2, 8010bb0 <USBD_GetDescriptor+0x108>)
 8010baa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bae:	bf00      	nop
 8010bb0:	08010bc9 	.word	0x08010bc9
 8010bb4:	08010bfd 	.word	0x08010bfd
 8010bb8:	08010c31 	.word	0x08010c31
 8010bbc:	08010c65 	.word	0x08010c65
 8010bc0:	08010c99 	.word	0x08010c99
 8010bc4:	08010ccd 	.word	0x08010ccd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010bce:	685b      	ldr	r3, [r3, #4]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d00b      	beq.n	8010bec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010bda:	685b      	ldr	r3, [r3, #4]
 8010bdc:	687a      	ldr	r2, [r7, #4]
 8010bde:	7c12      	ldrb	r2, [r2, #16]
 8010be0:	f107 0108 	add.w	r1, r7, #8
 8010be4:	4610      	mov	r0, r2
 8010be6:	4798      	blx	r3
 8010be8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010bea:	e091      	b.n	8010d10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010bec:	6839      	ldr	r1, [r7, #0]
 8010bee:	6878      	ldr	r0, [r7, #4]
 8010bf0:	f000 facb 	bl	801118a <USBD_CtlError>
            err++;
 8010bf4:	7afb      	ldrb	r3, [r7, #11]
 8010bf6:	3301      	adds	r3, #1
 8010bf8:	72fb      	strb	r3, [r7, #11]
          break;
 8010bfa:	e089      	b.n	8010d10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c02:	689b      	ldr	r3, [r3, #8]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d00b      	beq.n	8010c20 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c0e:	689b      	ldr	r3, [r3, #8]
 8010c10:	687a      	ldr	r2, [r7, #4]
 8010c12:	7c12      	ldrb	r2, [r2, #16]
 8010c14:	f107 0108 	add.w	r1, r7, #8
 8010c18:	4610      	mov	r0, r2
 8010c1a:	4798      	blx	r3
 8010c1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010c1e:	e077      	b.n	8010d10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010c20:	6839      	ldr	r1, [r7, #0]
 8010c22:	6878      	ldr	r0, [r7, #4]
 8010c24:	f000 fab1 	bl	801118a <USBD_CtlError>
            err++;
 8010c28:	7afb      	ldrb	r3, [r7, #11]
 8010c2a:	3301      	adds	r3, #1
 8010c2c:	72fb      	strb	r3, [r7, #11]
          break;
 8010c2e:	e06f      	b.n	8010d10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c36:	68db      	ldr	r3, [r3, #12]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d00b      	beq.n	8010c54 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c42:	68db      	ldr	r3, [r3, #12]
 8010c44:	687a      	ldr	r2, [r7, #4]
 8010c46:	7c12      	ldrb	r2, [r2, #16]
 8010c48:	f107 0108 	add.w	r1, r7, #8
 8010c4c:	4610      	mov	r0, r2
 8010c4e:	4798      	blx	r3
 8010c50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010c52:	e05d      	b.n	8010d10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010c54:	6839      	ldr	r1, [r7, #0]
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f000 fa97 	bl	801118a <USBD_CtlError>
            err++;
 8010c5c:	7afb      	ldrb	r3, [r7, #11]
 8010c5e:	3301      	adds	r3, #1
 8010c60:	72fb      	strb	r3, [r7, #11]
          break;
 8010c62:	e055      	b.n	8010d10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c6a:	691b      	ldr	r3, [r3, #16]
 8010c6c:	2b00      	cmp	r3, #0
 8010c6e:	d00b      	beq.n	8010c88 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c76:	691b      	ldr	r3, [r3, #16]
 8010c78:	687a      	ldr	r2, [r7, #4]
 8010c7a:	7c12      	ldrb	r2, [r2, #16]
 8010c7c:	f107 0108 	add.w	r1, r7, #8
 8010c80:	4610      	mov	r0, r2
 8010c82:	4798      	blx	r3
 8010c84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010c86:	e043      	b.n	8010d10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010c88:	6839      	ldr	r1, [r7, #0]
 8010c8a:	6878      	ldr	r0, [r7, #4]
 8010c8c:	f000 fa7d 	bl	801118a <USBD_CtlError>
            err++;
 8010c90:	7afb      	ldrb	r3, [r7, #11]
 8010c92:	3301      	adds	r3, #1
 8010c94:	72fb      	strb	r3, [r7, #11]
          break;
 8010c96:	e03b      	b.n	8010d10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c9e:	695b      	ldr	r3, [r3, #20]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d00b      	beq.n	8010cbc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010caa:	695b      	ldr	r3, [r3, #20]
 8010cac:	687a      	ldr	r2, [r7, #4]
 8010cae:	7c12      	ldrb	r2, [r2, #16]
 8010cb0:	f107 0108 	add.w	r1, r7, #8
 8010cb4:	4610      	mov	r0, r2
 8010cb6:	4798      	blx	r3
 8010cb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010cba:	e029      	b.n	8010d10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010cbc:	6839      	ldr	r1, [r7, #0]
 8010cbe:	6878      	ldr	r0, [r7, #4]
 8010cc0:	f000 fa63 	bl	801118a <USBD_CtlError>
            err++;
 8010cc4:	7afb      	ldrb	r3, [r7, #11]
 8010cc6:	3301      	adds	r3, #1
 8010cc8:	72fb      	strb	r3, [r7, #11]
          break;
 8010cca:	e021      	b.n	8010d10 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010cd2:	699b      	ldr	r3, [r3, #24]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d00b      	beq.n	8010cf0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010cde:	699b      	ldr	r3, [r3, #24]
 8010ce0:	687a      	ldr	r2, [r7, #4]
 8010ce2:	7c12      	ldrb	r2, [r2, #16]
 8010ce4:	f107 0108 	add.w	r1, r7, #8
 8010ce8:	4610      	mov	r0, r2
 8010cea:	4798      	blx	r3
 8010cec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010cee:	e00f      	b.n	8010d10 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010cf0:	6839      	ldr	r1, [r7, #0]
 8010cf2:	6878      	ldr	r0, [r7, #4]
 8010cf4:	f000 fa49 	bl	801118a <USBD_CtlError>
            err++;
 8010cf8:	7afb      	ldrb	r3, [r7, #11]
 8010cfa:	3301      	adds	r3, #1
 8010cfc:	72fb      	strb	r3, [r7, #11]
          break;
 8010cfe:	e007      	b.n	8010d10 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010d00:	6839      	ldr	r1, [r7, #0]
 8010d02:	6878      	ldr	r0, [r7, #4]
 8010d04:	f000 fa41 	bl	801118a <USBD_CtlError>
          err++;
 8010d08:	7afb      	ldrb	r3, [r7, #11]
 8010d0a:	3301      	adds	r3, #1
 8010d0c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8010d0e:	bf00      	nop
      }
      break;
 8010d10:	e037      	b.n	8010d82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	7c1b      	ldrb	r3, [r3, #16]
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d109      	bne.n	8010d2e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010d20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010d22:	f107 0208 	add.w	r2, r7, #8
 8010d26:	4610      	mov	r0, r2
 8010d28:	4798      	blx	r3
 8010d2a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010d2c:	e029      	b.n	8010d82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010d2e:	6839      	ldr	r1, [r7, #0]
 8010d30:	6878      	ldr	r0, [r7, #4]
 8010d32:	f000 fa2a 	bl	801118a <USBD_CtlError>
        err++;
 8010d36:	7afb      	ldrb	r3, [r7, #11]
 8010d38:	3301      	adds	r3, #1
 8010d3a:	72fb      	strb	r3, [r7, #11]
      break;
 8010d3c:	e021      	b.n	8010d82 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	7c1b      	ldrb	r3, [r3, #16]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d10d      	bne.n	8010d62 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010d4e:	f107 0208 	add.w	r2, r7, #8
 8010d52:	4610      	mov	r0, r2
 8010d54:	4798      	blx	r3
 8010d56:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010d58:	68fb      	ldr	r3, [r7, #12]
 8010d5a:	3301      	adds	r3, #1
 8010d5c:	2207      	movs	r2, #7
 8010d5e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010d60:	e00f      	b.n	8010d82 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010d62:	6839      	ldr	r1, [r7, #0]
 8010d64:	6878      	ldr	r0, [r7, #4]
 8010d66:	f000 fa10 	bl	801118a <USBD_CtlError>
        err++;
 8010d6a:	7afb      	ldrb	r3, [r7, #11]
 8010d6c:	3301      	adds	r3, #1
 8010d6e:	72fb      	strb	r3, [r7, #11]
      break;
 8010d70:	e007      	b.n	8010d82 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010d72:	6839      	ldr	r1, [r7, #0]
 8010d74:	6878      	ldr	r0, [r7, #4]
 8010d76:	f000 fa08 	bl	801118a <USBD_CtlError>
      err++;
 8010d7a:	7afb      	ldrb	r3, [r7, #11]
 8010d7c:	3301      	adds	r3, #1
 8010d7e:	72fb      	strb	r3, [r7, #11]
      break;
 8010d80:	bf00      	nop
  }

  if (err != 0U)
 8010d82:	7afb      	ldrb	r3, [r7, #11]
 8010d84:	2b00      	cmp	r3, #0
 8010d86:	d11e      	bne.n	8010dc6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010d88:	683b      	ldr	r3, [r7, #0]
 8010d8a:	88db      	ldrh	r3, [r3, #6]
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d016      	beq.n	8010dbe <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010d90:	893b      	ldrh	r3, [r7, #8]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d00e      	beq.n	8010db4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8010d96:	683b      	ldr	r3, [r7, #0]
 8010d98:	88da      	ldrh	r2, [r3, #6]
 8010d9a:	893b      	ldrh	r3, [r7, #8]
 8010d9c:	4293      	cmp	r3, r2
 8010d9e:	bf28      	it	cs
 8010da0:	4613      	movcs	r3, r2
 8010da2:	b29b      	uxth	r3, r3
 8010da4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010da6:	893b      	ldrh	r3, [r7, #8]
 8010da8:	461a      	mov	r2, r3
 8010daa:	68f9      	ldr	r1, [r7, #12]
 8010dac:	6878      	ldr	r0, [r7, #4]
 8010dae:	f000 fa69 	bl	8011284 <USBD_CtlSendData>
 8010db2:	e009      	b.n	8010dc8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010db4:	6839      	ldr	r1, [r7, #0]
 8010db6:	6878      	ldr	r0, [r7, #4]
 8010db8:	f000 f9e7 	bl	801118a <USBD_CtlError>
 8010dbc:	e004      	b.n	8010dc8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010dbe:	6878      	ldr	r0, [r7, #4]
 8010dc0:	f000 faba 	bl	8011338 <USBD_CtlSendStatus>
 8010dc4:	e000      	b.n	8010dc8 <USBD_GetDescriptor+0x320>
    return;
 8010dc6:	bf00      	nop
  }
}
 8010dc8:	3710      	adds	r7, #16
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	bd80      	pop	{r7, pc}
 8010dce:	bf00      	nop

08010dd0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b084      	sub	sp, #16
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
 8010dd8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010dda:	683b      	ldr	r3, [r7, #0]
 8010ddc:	889b      	ldrh	r3, [r3, #4]
 8010dde:	2b00      	cmp	r3, #0
 8010de0:	d131      	bne.n	8010e46 <USBD_SetAddress+0x76>
 8010de2:	683b      	ldr	r3, [r7, #0]
 8010de4:	88db      	ldrh	r3, [r3, #6]
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d12d      	bne.n	8010e46 <USBD_SetAddress+0x76>
 8010dea:	683b      	ldr	r3, [r7, #0]
 8010dec:	885b      	ldrh	r3, [r3, #2]
 8010dee:	2b7f      	cmp	r3, #127	@ 0x7f
 8010df0:	d829      	bhi.n	8010e46 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010df2:	683b      	ldr	r3, [r7, #0]
 8010df4:	885b      	ldrh	r3, [r3, #2]
 8010df6:	b2db      	uxtb	r3, r3
 8010df8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010dfc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e04:	b2db      	uxtb	r3, r3
 8010e06:	2b03      	cmp	r3, #3
 8010e08:	d104      	bne.n	8010e14 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010e0a:	6839      	ldr	r1, [r7, #0]
 8010e0c:	6878      	ldr	r0, [r7, #4]
 8010e0e:	f000 f9bc 	bl	801118a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e12:	e01d      	b.n	8010e50 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	7bfa      	ldrb	r2, [r7, #15]
 8010e18:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010e1c:	7bfb      	ldrb	r3, [r7, #15]
 8010e1e:	4619      	mov	r1, r3
 8010e20:	6878      	ldr	r0, [r7, #4]
 8010e22:	f000 ff47 	bl	8011cb4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010e26:	6878      	ldr	r0, [r7, #4]
 8010e28:	f000 fa86 	bl	8011338 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010e2c:	7bfb      	ldrb	r3, [r7, #15]
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	d004      	beq.n	8010e3c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	2202      	movs	r2, #2
 8010e36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e3a:	e009      	b.n	8010e50 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	2201      	movs	r2, #1
 8010e40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010e44:	e004      	b.n	8010e50 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010e46:	6839      	ldr	r1, [r7, #0]
 8010e48:	6878      	ldr	r0, [r7, #4]
 8010e4a:	f000 f99e 	bl	801118a <USBD_CtlError>
  }
}
 8010e4e:	bf00      	nop
 8010e50:	bf00      	nop
 8010e52:	3710      	adds	r7, #16
 8010e54:	46bd      	mov	sp, r7
 8010e56:	bd80      	pop	{r7, pc}

08010e58 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b084      	sub	sp, #16
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
 8010e60:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010e62:	2300      	movs	r3, #0
 8010e64:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010e66:	683b      	ldr	r3, [r7, #0]
 8010e68:	885b      	ldrh	r3, [r3, #2]
 8010e6a:	b2da      	uxtb	r2, r3
 8010e6c:	4b4e      	ldr	r3, [pc, #312]	@ (8010fa8 <USBD_SetConfig+0x150>)
 8010e6e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010e70:	4b4d      	ldr	r3, [pc, #308]	@ (8010fa8 <USBD_SetConfig+0x150>)
 8010e72:	781b      	ldrb	r3, [r3, #0]
 8010e74:	2b01      	cmp	r3, #1
 8010e76:	d905      	bls.n	8010e84 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010e78:	6839      	ldr	r1, [r7, #0]
 8010e7a:	6878      	ldr	r0, [r7, #4]
 8010e7c:	f000 f985 	bl	801118a <USBD_CtlError>
    return USBD_FAIL;
 8010e80:	2303      	movs	r3, #3
 8010e82:	e08c      	b.n	8010f9e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e8a:	b2db      	uxtb	r3, r3
 8010e8c:	2b02      	cmp	r3, #2
 8010e8e:	d002      	beq.n	8010e96 <USBD_SetConfig+0x3e>
 8010e90:	2b03      	cmp	r3, #3
 8010e92:	d029      	beq.n	8010ee8 <USBD_SetConfig+0x90>
 8010e94:	e075      	b.n	8010f82 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010e96:	4b44      	ldr	r3, [pc, #272]	@ (8010fa8 <USBD_SetConfig+0x150>)
 8010e98:	781b      	ldrb	r3, [r3, #0]
 8010e9a:	2b00      	cmp	r3, #0
 8010e9c:	d020      	beq.n	8010ee0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8010e9e:	4b42      	ldr	r3, [pc, #264]	@ (8010fa8 <USBD_SetConfig+0x150>)
 8010ea0:	781b      	ldrb	r3, [r3, #0]
 8010ea2:	461a      	mov	r2, r3
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010ea8:	4b3f      	ldr	r3, [pc, #252]	@ (8010fa8 <USBD_SetConfig+0x150>)
 8010eaa:	781b      	ldrb	r3, [r3, #0]
 8010eac:	4619      	mov	r1, r3
 8010eae:	6878      	ldr	r0, [r7, #4]
 8010eb0:	f7fe ffb9 	bl	800fe26 <USBD_SetClassConfig>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010eb8:	7bfb      	ldrb	r3, [r7, #15]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d008      	beq.n	8010ed0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8010ebe:	6839      	ldr	r1, [r7, #0]
 8010ec0:	6878      	ldr	r0, [r7, #4]
 8010ec2:	f000 f962 	bl	801118a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	2202      	movs	r2, #2
 8010eca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010ece:	e065      	b.n	8010f9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010ed0:	6878      	ldr	r0, [r7, #4]
 8010ed2:	f000 fa31 	bl	8011338 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010ed6:	687b      	ldr	r3, [r7, #4]
 8010ed8:	2203      	movs	r2, #3
 8010eda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010ede:	e05d      	b.n	8010f9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010ee0:	6878      	ldr	r0, [r7, #4]
 8010ee2:	f000 fa29 	bl	8011338 <USBD_CtlSendStatus>
      break;
 8010ee6:	e059      	b.n	8010f9c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010ee8:	4b2f      	ldr	r3, [pc, #188]	@ (8010fa8 <USBD_SetConfig+0x150>)
 8010eea:	781b      	ldrb	r3, [r3, #0]
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d112      	bne.n	8010f16 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	2202      	movs	r2, #2
 8010ef4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8010ef8:	4b2b      	ldr	r3, [pc, #172]	@ (8010fa8 <USBD_SetConfig+0x150>)
 8010efa:	781b      	ldrb	r3, [r3, #0]
 8010efc:	461a      	mov	r2, r3
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010f02:	4b29      	ldr	r3, [pc, #164]	@ (8010fa8 <USBD_SetConfig+0x150>)
 8010f04:	781b      	ldrb	r3, [r3, #0]
 8010f06:	4619      	mov	r1, r3
 8010f08:	6878      	ldr	r0, [r7, #4]
 8010f0a:	f7fe ffa8 	bl	800fe5e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010f0e:	6878      	ldr	r0, [r7, #4]
 8010f10:	f000 fa12 	bl	8011338 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010f14:	e042      	b.n	8010f9c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8010f16:	4b24      	ldr	r3, [pc, #144]	@ (8010fa8 <USBD_SetConfig+0x150>)
 8010f18:	781b      	ldrb	r3, [r3, #0]
 8010f1a:	461a      	mov	r2, r3
 8010f1c:	687b      	ldr	r3, [r7, #4]
 8010f1e:	685b      	ldr	r3, [r3, #4]
 8010f20:	429a      	cmp	r2, r3
 8010f22:	d02a      	beq.n	8010f7a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	685b      	ldr	r3, [r3, #4]
 8010f28:	b2db      	uxtb	r3, r3
 8010f2a:	4619      	mov	r1, r3
 8010f2c:	6878      	ldr	r0, [r7, #4]
 8010f2e:	f7fe ff96 	bl	800fe5e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010f32:	4b1d      	ldr	r3, [pc, #116]	@ (8010fa8 <USBD_SetConfig+0x150>)
 8010f34:	781b      	ldrb	r3, [r3, #0]
 8010f36:	461a      	mov	r2, r3
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8010fa8 <USBD_SetConfig+0x150>)
 8010f3e:	781b      	ldrb	r3, [r3, #0]
 8010f40:	4619      	mov	r1, r3
 8010f42:	6878      	ldr	r0, [r7, #4]
 8010f44:	f7fe ff6f 	bl	800fe26 <USBD_SetClassConfig>
 8010f48:	4603      	mov	r3, r0
 8010f4a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010f4c:	7bfb      	ldrb	r3, [r7, #15]
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d00f      	beq.n	8010f72 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8010f52:	6839      	ldr	r1, [r7, #0]
 8010f54:	6878      	ldr	r0, [r7, #4]
 8010f56:	f000 f918 	bl	801118a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010f5a:	687b      	ldr	r3, [r7, #4]
 8010f5c:	685b      	ldr	r3, [r3, #4]
 8010f5e:	b2db      	uxtb	r3, r3
 8010f60:	4619      	mov	r1, r3
 8010f62:	6878      	ldr	r0, [r7, #4]
 8010f64:	f7fe ff7b 	bl	800fe5e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	2202      	movs	r2, #2
 8010f6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010f70:	e014      	b.n	8010f9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010f72:	6878      	ldr	r0, [r7, #4]
 8010f74:	f000 f9e0 	bl	8011338 <USBD_CtlSendStatus>
      break;
 8010f78:	e010      	b.n	8010f9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010f7a:	6878      	ldr	r0, [r7, #4]
 8010f7c:	f000 f9dc 	bl	8011338 <USBD_CtlSendStatus>
      break;
 8010f80:	e00c      	b.n	8010f9c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8010f82:	6839      	ldr	r1, [r7, #0]
 8010f84:	6878      	ldr	r0, [r7, #4]
 8010f86:	f000 f900 	bl	801118a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010f8a:	4b07      	ldr	r3, [pc, #28]	@ (8010fa8 <USBD_SetConfig+0x150>)
 8010f8c:	781b      	ldrb	r3, [r3, #0]
 8010f8e:	4619      	mov	r1, r3
 8010f90:	6878      	ldr	r0, [r7, #4]
 8010f92:	f7fe ff64 	bl	800fe5e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010f96:	2303      	movs	r3, #3
 8010f98:	73fb      	strb	r3, [r7, #15]
      break;
 8010f9a:	bf00      	nop
  }

  return ret;
 8010f9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	3710      	adds	r7, #16
 8010fa2:	46bd      	mov	sp, r7
 8010fa4:	bd80      	pop	{r7, pc}
 8010fa6:	bf00      	nop
 8010fa8:	24000a60 	.word	0x24000a60

08010fac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b082      	sub	sp, #8
 8010fb0:	af00      	add	r7, sp, #0
 8010fb2:	6078      	str	r0, [r7, #4]
 8010fb4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010fb6:	683b      	ldr	r3, [r7, #0]
 8010fb8:	88db      	ldrh	r3, [r3, #6]
 8010fba:	2b01      	cmp	r3, #1
 8010fbc:	d004      	beq.n	8010fc8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010fbe:	6839      	ldr	r1, [r7, #0]
 8010fc0:	6878      	ldr	r0, [r7, #4]
 8010fc2:	f000 f8e2 	bl	801118a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010fc6:	e023      	b.n	8011010 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010fce:	b2db      	uxtb	r3, r3
 8010fd0:	2b02      	cmp	r3, #2
 8010fd2:	dc02      	bgt.n	8010fda <USBD_GetConfig+0x2e>
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	dc03      	bgt.n	8010fe0 <USBD_GetConfig+0x34>
 8010fd8:	e015      	b.n	8011006 <USBD_GetConfig+0x5a>
 8010fda:	2b03      	cmp	r3, #3
 8010fdc:	d00b      	beq.n	8010ff6 <USBD_GetConfig+0x4a>
 8010fde:	e012      	b.n	8011006 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	2200      	movs	r2, #0
 8010fe4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	3308      	adds	r3, #8
 8010fea:	2201      	movs	r2, #1
 8010fec:	4619      	mov	r1, r3
 8010fee:	6878      	ldr	r0, [r7, #4]
 8010ff0:	f000 f948 	bl	8011284 <USBD_CtlSendData>
        break;
 8010ff4:	e00c      	b.n	8011010 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	3304      	adds	r3, #4
 8010ffa:	2201      	movs	r2, #1
 8010ffc:	4619      	mov	r1, r3
 8010ffe:	6878      	ldr	r0, [r7, #4]
 8011000:	f000 f940 	bl	8011284 <USBD_CtlSendData>
        break;
 8011004:	e004      	b.n	8011010 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8011006:	6839      	ldr	r1, [r7, #0]
 8011008:	6878      	ldr	r0, [r7, #4]
 801100a:	f000 f8be 	bl	801118a <USBD_CtlError>
        break;
 801100e:	bf00      	nop
}
 8011010:	bf00      	nop
 8011012:	3708      	adds	r7, #8
 8011014:	46bd      	mov	sp, r7
 8011016:	bd80      	pop	{r7, pc}

08011018 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011018:	b580      	push	{r7, lr}
 801101a:	b082      	sub	sp, #8
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
 8011020:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011028:	b2db      	uxtb	r3, r3
 801102a:	3b01      	subs	r3, #1
 801102c:	2b02      	cmp	r3, #2
 801102e:	d81e      	bhi.n	801106e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011030:	683b      	ldr	r3, [r7, #0]
 8011032:	88db      	ldrh	r3, [r3, #6]
 8011034:	2b02      	cmp	r3, #2
 8011036:	d004      	beq.n	8011042 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011038:	6839      	ldr	r1, [r7, #0]
 801103a:	6878      	ldr	r0, [r7, #4]
 801103c:	f000 f8a5 	bl	801118a <USBD_CtlError>
        break;
 8011040:	e01a      	b.n	8011078 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	2201      	movs	r2, #1
 8011046:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801104e:	2b00      	cmp	r3, #0
 8011050:	d005      	beq.n	801105e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	68db      	ldr	r3, [r3, #12]
 8011056:	f043 0202 	orr.w	r2, r3, #2
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	330c      	adds	r3, #12
 8011062:	2202      	movs	r2, #2
 8011064:	4619      	mov	r1, r3
 8011066:	6878      	ldr	r0, [r7, #4]
 8011068:	f000 f90c 	bl	8011284 <USBD_CtlSendData>
      break;
 801106c:	e004      	b.n	8011078 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801106e:	6839      	ldr	r1, [r7, #0]
 8011070:	6878      	ldr	r0, [r7, #4]
 8011072:	f000 f88a 	bl	801118a <USBD_CtlError>
      break;
 8011076:	bf00      	nop
  }
}
 8011078:	bf00      	nop
 801107a:	3708      	adds	r7, #8
 801107c:	46bd      	mov	sp, r7
 801107e:	bd80      	pop	{r7, pc}

08011080 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011080:	b580      	push	{r7, lr}
 8011082:	b082      	sub	sp, #8
 8011084:	af00      	add	r7, sp, #0
 8011086:	6078      	str	r0, [r7, #4]
 8011088:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801108a:	683b      	ldr	r3, [r7, #0]
 801108c:	885b      	ldrh	r3, [r3, #2]
 801108e:	2b01      	cmp	r3, #1
 8011090:	d107      	bne.n	80110a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	2201      	movs	r2, #1
 8011096:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801109a:	6878      	ldr	r0, [r7, #4]
 801109c:	f000 f94c 	bl	8011338 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80110a0:	e013      	b.n	80110ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80110a2:	683b      	ldr	r3, [r7, #0]
 80110a4:	885b      	ldrh	r3, [r3, #2]
 80110a6:	2b02      	cmp	r3, #2
 80110a8:	d10b      	bne.n	80110c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	889b      	ldrh	r3, [r3, #4]
 80110ae:	0a1b      	lsrs	r3, r3, #8
 80110b0:	b29b      	uxth	r3, r3
 80110b2:	b2da      	uxtb	r2, r3
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80110ba:	6878      	ldr	r0, [r7, #4]
 80110bc:	f000 f93c 	bl	8011338 <USBD_CtlSendStatus>
}
 80110c0:	e003      	b.n	80110ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80110c2:	6839      	ldr	r1, [r7, #0]
 80110c4:	6878      	ldr	r0, [r7, #4]
 80110c6:	f000 f860 	bl	801118a <USBD_CtlError>
}
 80110ca:	bf00      	nop
 80110cc:	3708      	adds	r7, #8
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}

080110d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80110d2:	b580      	push	{r7, lr}
 80110d4:	b082      	sub	sp, #8
 80110d6:	af00      	add	r7, sp, #0
 80110d8:	6078      	str	r0, [r7, #4]
 80110da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80110e2:	b2db      	uxtb	r3, r3
 80110e4:	3b01      	subs	r3, #1
 80110e6:	2b02      	cmp	r3, #2
 80110e8:	d80b      	bhi.n	8011102 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	885b      	ldrh	r3, [r3, #2]
 80110ee:	2b01      	cmp	r3, #1
 80110f0:	d10c      	bne.n	801110c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	2200      	movs	r2, #0
 80110f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80110fa:	6878      	ldr	r0, [r7, #4]
 80110fc:	f000 f91c 	bl	8011338 <USBD_CtlSendStatus>
      }
      break;
 8011100:	e004      	b.n	801110c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8011102:	6839      	ldr	r1, [r7, #0]
 8011104:	6878      	ldr	r0, [r7, #4]
 8011106:	f000 f840 	bl	801118a <USBD_CtlError>
      break;
 801110a:	e000      	b.n	801110e <USBD_ClrFeature+0x3c>
      break;
 801110c:	bf00      	nop
  }
}
 801110e:	bf00      	nop
 8011110:	3708      	adds	r7, #8
 8011112:	46bd      	mov	sp, r7
 8011114:	bd80      	pop	{r7, pc}

08011116 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8011116:	b580      	push	{r7, lr}
 8011118:	b084      	sub	sp, #16
 801111a:	af00      	add	r7, sp, #0
 801111c:	6078      	str	r0, [r7, #4]
 801111e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011120:	683b      	ldr	r3, [r7, #0]
 8011122:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011124:	68fb      	ldr	r3, [r7, #12]
 8011126:	781a      	ldrb	r2, [r3, #0]
 8011128:	687b      	ldr	r3, [r7, #4]
 801112a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	3301      	adds	r3, #1
 8011130:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	781a      	ldrb	r2, [r3, #0]
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	3301      	adds	r3, #1
 801113e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011140:	68f8      	ldr	r0, [r7, #12]
 8011142:	f7ff fa16 	bl	8010572 <SWAPBYTE>
 8011146:	4603      	mov	r3, r0
 8011148:	461a      	mov	r2, r3
 801114a:	687b      	ldr	r3, [r7, #4]
 801114c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	3301      	adds	r3, #1
 8011152:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	3301      	adds	r3, #1
 8011158:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801115a:	68f8      	ldr	r0, [r7, #12]
 801115c:	f7ff fa09 	bl	8010572 <SWAPBYTE>
 8011160:	4603      	mov	r3, r0
 8011162:	461a      	mov	r2, r3
 8011164:	687b      	ldr	r3, [r7, #4]
 8011166:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011168:	68fb      	ldr	r3, [r7, #12]
 801116a:	3301      	adds	r3, #1
 801116c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	3301      	adds	r3, #1
 8011172:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011174:	68f8      	ldr	r0, [r7, #12]
 8011176:	f7ff f9fc 	bl	8010572 <SWAPBYTE>
 801117a:	4603      	mov	r3, r0
 801117c:	461a      	mov	r2, r3
 801117e:	687b      	ldr	r3, [r7, #4]
 8011180:	80da      	strh	r2, [r3, #6]
}
 8011182:	bf00      	nop
 8011184:	3710      	adds	r7, #16
 8011186:	46bd      	mov	sp, r7
 8011188:	bd80      	pop	{r7, pc}

0801118a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801118a:	b580      	push	{r7, lr}
 801118c:	b082      	sub	sp, #8
 801118e:	af00      	add	r7, sp, #0
 8011190:	6078      	str	r0, [r7, #4]
 8011192:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011194:	2180      	movs	r1, #128	@ 0x80
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	f000 fd22 	bl	8011be0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801119c:	2100      	movs	r1, #0
 801119e:	6878      	ldr	r0, [r7, #4]
 80111a0:	f000 fd1e 	bl	8011be0 <USBD_LL_StallEP>
}
 80111a4:	bf00      	nop
 80111a6:	3708      	adds	r7, #8
 80111a8:	46bd      	mov	sp, r7
 80111aa:	bd80      	pop	{r7, pc}

080111ac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b086      	sub	sp, #24
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	60f8      	str	r0, [r7, #12]
 80111b4:	60b9      	str	r1, [r7, #8]
 80111b6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80111b8:	2300      	movs	r3, #0
 80111ba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d042      	beq.n	8011248 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80111c2:	68fb      	ldr	r3, [r7, #12]
 80111c4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80111c6:	6938      	ldr	r0, [r7, #16]
 80111c8:	f000 f842 	bl	8011250 <USBD_GetLen>
 80111cc:	4603      	mov	r3, r0
 80111ce:	3301      	adds	r3, #1
 80111d0:	005b      	lsls	r3, r3, #1
 80111d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80111d6:	d808      	bhi.n	80111ea <USBD_GetString+0x3e>
 80111d8:	6938      	ldr	r0, [r7, #16]
 80111da:	f000 f839 	bl	8011250 <USBD_GetLen>
 80111de:	4603      	mov	r3, r0
 80111e0:	3301      	adds	r3, #1
 80111e2:	b29b      	uxth	r3, r3
 80111e4:	005b      	lsls	r3, r3, #1
 80111e6:	b29a      	uxth	r2, r3
 80111e8:	e001      	b.n	80111ee <USBD_GetString+0x42>
 80111ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80111f2:	7dfb      	ldrb	r3, [r7, #23]
 80111f4:	68ba      	ldr	r2, [r7, #8]
 80111f6:	4413      	add	r3, r2
 80111f8:	687a      	ldr	r2, [r7, #4]
 80111fa:	7812      	ldrb	r2, [r2, #0]
 80111fc:	701a      	strb	r2, [r3, #0]
  idx++;
 80111fe:	7dfb      	ldrb	r3, [r7, #23]
 8011200:	3301      	adds	r3, #1
 8011202:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011204:	7dfb      	ldrb	r3, [r7, #23]
 8011206:	68ba      	ldr	r2, [r7, #8]
 8011208:	4413      	add	r3, r2
 801120a:	2203      	movs	r2, #3
 801120c:	701a      	strb	r2, [r3, #0]
  idx++;
 801120e:	7dfb      	ldrb	r3, [r7, #23]
 8011210:	3301      	adds	r3, #1
 8011212:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8011214:	e013      	b.n	801123e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8011216:	7dfb      	ldrb	r3, [r7, #23]
 8011218:	68ba      	ldr	r2, [r7, #8]
 801121a:	4413      	add	r3, r2
 801121c:	693a      	ldr	r2, [r7, #16]
 801121e:	7812      	ldrb	r2, [r2, #0]
 8011220:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011222:	693b      	ldr	r3, [r7, #16]
 8011224:	3301      	adds	r3, #1
 8011226:	613b      	str	r3, [r7, #16]
    idx++;
 8011228:	7dfb      	ldrb	r3, [r7, #23]
 801122a:	3301      	adds	r3, #1
 801122c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801122e:	7dfb      	ldrb	r3, [r7, #23]
 8011230:	68ba      	ldr	r2, [r7, #8]
 8011232:	4413      	add	r3, r2
 8011234:	2200      	movs	r2, #0
 8011236:	701a      	strb	r2, [r3, #0]
    idx++;
 8011238:	7dfb      	ldrb	r3, [r7, #23]
 801123a:	3301      	adds	r3, #1
 801123c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801123e:	693b      	ldr	r3, [r7, #16]
 8011240:	781b      	ldrb	r3, [r3, #0]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d1e7      	bne.n	8011216 <USBD_GetString+0x6a>
 8011246:	e000      	b.n	801124a <USBD_GetString+0x9e>
    return;
 8011248:	bf00      	nop
  }
}
 801124a:	3718      	adds	r7, #24
 801124c:	46bd      	mov	sp, r7
 801124e:	bd80      	pop	{r7, pc}

08011250 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011250:	b480      	push	{r7}
 8011252:	b085      	sub	sp, #20
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011258:	2300      	movs	r3, #0
 801125a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801125c:	687b      	ldr	r3, [r7, #4]
 801125e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011260:	e005      	b.n	801126e <USBD_GetLen+0x1e>
  {
    len++;
 8011262:	7bfb      	ldrb	r3, [r7, #15]
 8011264:	3301      	adds	r3, #1
 8011266:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011268:	68bb      	ldr	r3, [r7, #8]
 801126a:	3301      	adds	r3, #1
 801126c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801126e:	68bb      	ldr	r3, [r7, #8]
 8011270:	781b      	ldrb	r3, [r3, #0]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d1f5      	bne.n	8011262 <USBD_GetLen+0x12>
  }

  return len;
 8011276:	7bfb      	ldrb	r3, [r7, #15]
}
 8011278:	4618      	mov	r0, r3
 801127a:	3714      	adds	r7, #20
 801127c:	46bd      	mov	sp, r7
 801127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011282:	4770      	bx	lr

08011284 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	b084      	sub	sp, #16
 8011288:	af00      	add	r7, sp, #0
 801128a:	60f8      	str	r0, [r7, #12]
 801128c:	60b9      	str	r1, [r7, #8]
 801128e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011290:	68fb      	ldr	r3, [r7, #12]
 8011292:	2202      	movs	r2, #2
 8011294:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8011298:	68fb      	ldr	r3, [r7, #12]
 801129a:	687a      	ldr	r2, [r7, #4]
 801129c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	687a      	ldr	r2, [r7, #4]
 80112a2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	68ba      	ldr	r2, [r7, #8]
 80112a8:	2100      	movs	r1, #0
 80112aa:	68f8      	ldr	r0, [r7, #12]
 80112ac:	f000 fd21 	bl	8011cf2 <USBD_LL_Transmit>

  return USBD_OK;
 80112b0:	2300      	movs	r3, #0
}
 80112b2:	4618      	mov	r0, r3
 80112b4:	3710      	adds	r7, #16
 80112b6:	46bd      	mov	sp, r7
 80112b8:	bd80      	pop	{r7, pc}

080112ba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80112ba:	b580      	push	{r7, lr}
 80112bc:	b084      	sub	sp, #16
 80112be:	af00      	add	r7, sp, #0
 80112c0:	60f8      	str	r0, [r7, #12]
 80112c2:	60b9      	str	r1, [r7, #8]
 80112c4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	68ba      	ldr	r2, [r7, #8]
 80112ca:	2100      	movs	r1, #0
 80112cc:	68f8      	ldr	r0, [r7, #12]
 80112ce:	f000 fd10 	bl	8011cf2 <USBD_LL_Transmit>

  return USBD_OK;
 80112d2:	2300      	movs	r3, #0
}
 80112d4:	4618      	mov	r0, r3
 80112d6:	3710      	adds	r7, #16
 80112d8:	46bd      	mov	sp, r7
 80112da:	bd80      	pop	{r7, pc}

080112dc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80112dc:	b580      	push	{r7, lr}
 80112de:	b084      	sub	sp, #16
 80112e0:	af00      	add	r7, sp, #0
 80112e2:	60f8      	str	r0, [r7, #12]
 80112e4:	60b9      	str	r1, [r7, #8]
 80112e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	2203      	movs	r2, #3
 80112ec:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	687a      	ldr	r2, [r7, #4]
 80112f4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80112f8:	68fb      	ldr	r3, [r7, #12]
 80112fa:	687a      	ldr	r2, [r7, #4]
 80112fc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	68ba      	ldr	r2, [r7, #8]
 8011304:	2100      	movs	r1, #0
 8011306:	68f8      	ldr	r0, [r7, #12]
 8011308:	f000 fd14 	bl	8011d34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801130c:	2300      	movs	r3, #0
}
 801130e:	4618      	mov	r0, r3
 8011310:	3710      	adds	r7, #16
 8011312:	46bd      	mov	sp, r7
 8011314:	bd80      	pop	{r7, pc}

08011316 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8011316:	b580      	push	{r7, lr}
 8011318:	b084      	sub	sp, #16
 801131a:	af00      	add	r7, sp, #0
 801131c:	60f8      	str	r0, [r7, #12]
 801131e:	60b9      	str	r1, [r7, #8]
 8011320:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	68ba      	ldr	r2, [r7, #8]
 8011326:	2100      	movs	r1, #0
 8011328:	68f8      	ldr	r0, [r7, #12]
 801132a:	f000 fd03 	bl	8011d34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801132e:	2300      	movs	r3, #0
}
 8011330:	4618      	mov	r0, r3
 8011332:	3710      	adds	r7, #16
 8011334:	46bd      	mov	sp, r7
 8011336:	bd80      	pop	{r7, pc}

08011338 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b082      	sub	sp, #8
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	2204      	movs	r2, #4
 8011344:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011348:	2300      	movs	r3, #0
 801134a:	2200      	movs	r2, #0
 801134c:	2100      	movs	r1, #0
 801134e:	6878      	ldr	r0, [r7, #4]
 8011350:	f000 fccf 	bl	8011cf2 <USBD_LL_Transmit>

  return USBD_OK;
 8011354:	2300      	movs	r3, #0
}
 8011356:	4618      	mov	r0, r3
 8011358:	3708      	adds	r7, #8
 801135a:	46bd      	mov	sp, r7
 801135c:	bd80      	pop	{r7, pc}

0801135e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801135e:	b580      	push	{r7, lr}
 8011360:	b082      	sub	sp, #8
 8011362:	af00      	add	r7, sp, #0
 8011364:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011366:	687b      	ldr	r3, [r7, #4]
 8011368:	2205      	movs	r2, #5
 801136a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801136e:	2300      	movs	r3, #0
 8011370:	2200      	movs	r2, #0
 8011372:	2100      	movs	r1, #0
 8011374:	6878      	ldr	r0, [r7, #4]
 8011376:	f000 fcdd 	bl	8011d34 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801137a:	2300      	movs	r3, #0
}
 801137c:	4618      	mov	r0, r3
 801137e:	3708      	adds	r7, #8
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}

08011384 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011384:	b580      	push	{r7, lr}
 8011386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011388:	2200      	movs	r2, #0
 801138a:	4913      	ldr	r1, [pc, #76]	@ (80113d8 <MX_USB_DEVICE_Init+0x54>)
 801138c:	4813      	ldr	r0, [pc, #76]	@ (80113dc <MX_USB_DEVICE_Init+0x58>)
 801138e:	f7fe fccd 	bl	800fd2c <USBD_Init>
 8011392:	4603      	mov	r3, r0
 8011394:	2b00      	cmp	r3, #0
 8011396:	d001      	beq.n	801139c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011398:	f7ef ffd7 	bl	800134a <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801139c:	4910      	ldr	r1, [pc, #64]	@ (80113e0 <MX_USB_DEVICE_Init+0x5c>)
 801139e:	480f      	ldr	r0, [pc, #60]	@ (80113dc <MX_USB_DEVICE_Init+0x58>)
 80113a0:	f7fe fcf4 	bl	800fd8c <USBD_RegisterClass>
 80113a4:	4603      	mov	r3, r0
 80113a6:	2b00      	cmp	r3, #0
 80113a8:	d001      	beq.n	80113ae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80113aa:	f7ef ffce 	bl	800134a <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80113ae:	490d      	ldr	r1, [pc, #52]	@ (80113e4 <MX_USB_DEVICE_Init+0x60>)
 80113b0:	480a      	ldr	r0, [pc, #40]	@ (80113dc <MX_USB_DEVICE_Init+0x58>)
 80113b2:	f7fe fbeb 	bl	800fb8c <USBD_CDC_RegisterInterface>
 80113b6:	4603      	mov	r3, r0
 80113b8:	2b00      	cmp	r3, #0
 80113ba:	d001      	beq.n	80113c0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80113bc:	f7ef ffc5 	bl	800134a <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80113c0:	4806      	ldr	r0, [pc, #24]	@ (80113dc <MX_USB_DEVICE_Init+0x58>)
 80113c2:	f7fe fd19 	bl	800fdf8 <USBD_Start>
 80113c6:	4603      	mov	r3, r0
 80113c8:	2b00      	cmp	r3, #0
 80113ca:	d001      	beq.n	80113d0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80113cc:	f7ef ffbd 	bl	800134a <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80113d0:	f7f6 fb72 	bl	8007ab8 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80113d4:	bf00      	nop
 80113d6:	bd80      	pop	{r7, pc}
 80113d8:	240000d8 	.word	0x240000d8
 80113dc:	24000a64 	.word	0x24000a64
 80113e0:	24000044 	.word	0x24000044
 80113e4:	240000c4 	.word	0x240000c4

080113e8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80113e8:	b580      	push	{r7, lr}
 80113ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80113ec:	2200      	movs	r2, #0
 80113ee:	4905      	ldr	r1, [pc, #20]	@ (8011404 <CDC_Init_FS+0x1c>)
 80113f0:	4805      	ldr	r0, [pc, #20]	@ (8011408 <CDC_Init_FS+0x20>)
 80113f2:	f7fe fbe5 	bl	800fbc0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80113f6:	4905      	ldr	r1, [pc, #20]	@ (801140c <CDC_Init_FS+0x24>)
 80113f8:	4803      	ldr	r0, [pc, #12]	@ (8011408 <CDC_Init_FS+0x20>)
 80113fa:	f7fe fc03 	bl	800fc04 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80113fe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011400:	4618      	mov	r0, r3
 8011402:	bd80      	pop	{r7, pc}
 8011404:	24001540 	.word	0x24001540
 8011408:	24000a64 	.word	0x24000a64
 801140c:	24000d40 	.word	0x24000d40

08011410 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011410:	b480      	push	{r7}
 8011412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011414:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8011416:	4618      	mov	r0, r3
 8011418:	46bd      	mov	sp, r7
 801141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801141e:	4770      	bx	lr

08011420 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011420:	b480      	push	{r7}
 8011422:	b083      	sub	sp, #12
 8011424:	af00      	add	r7, sp, #0
 8011426:	4603      	mov	r3, r0
 8011428:	6039      	str	r1, [r7, #0]
 801142a:	71fb      	strb	r3, [r7, #7]
 801142c:	4613      	mov	r3, r2
 801142e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011430:	79fb      	ldrb	r3, [r7, #7]
 8011432:	2b23      	cmp	r3, #35	@ 0x23
 8011434:	d84a      	bhi.n	80114cc <CDC_Control_FS+0xac>
 8011436:	a201      	add	r2, pc, #4	@ (adr r2, 801143c <CDC_Control_FS+0x1c>)
 8011438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801143c:	080114cd 	.word	0x080114cd
 8011440:	080114cd 	.word	0x080114cd
 8011444:	080114cd 	.word	0x080114cd
 8011448:	080114cd 	.word	0x080114cd
 801144c:	080114cd 	.word	0x080114cd
 8011450:	080114cd 	.word	0x080114cd
 8011454:	080114cd 	.word	0x080114cd
 8011458:	080114cd 	.word	0x080114cd
 801145c:	080114cd 	.word	0x080114cd
 8011460:	080114cd 	.word	0x080114cd
 8011464:	080114cd 	.word	0x080114cd
 8011468:	080114cd 	.word	0x080114cd
 801146c:	080114cd 	.word	0x080114cd
 8011470:	080114cd 	.word	0x080114cd
 8011474:	080114cd 	.word	0x080114cd
 8011478:	080114cd 	.word	0x080114cd
 801147c:	080114cd 	.word	0x080114cd
 8011480:	080114cd 	.word	0x080114cd
 8011484:	080114cd 	.word	0x080114cd
 8011488:	080114cd 	.word	0x080114cd
 801148c:	080114cd 	.word	0x080114cd
 8011490:	080114cd 	.word	0x080114cd
 8011494:	080114cd 	.word	0x080114cd
 8011498:	080114cd 	.word	0x080114cd
 801149c:	080114cd 	.word	0x080114cd
 80114a0:	080114cd 	.word	0x080114cd
 80114a4:	080114cd 	.word	0x080114cd
 80114a8:	080114cd 	.word	0x080114cd
 80114ac:	080114cd 	.word	0x080114cd
 80114b0:	080114cd 	.word	0x080114cd
 80114b4:	080114cd 	.word	0x080114cd
 80114b8:	080114cd 	.word	0x080114cd
 80114bc:	080114cd 	.word	0x080114cd
 80114c0:	080114cd 	.word	0x080114cd
 80114c4:	080114cd 	.word	0x080114cd
 80114c8:	080114cd 	.word	0x080114cd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80114cc:	bf00      	nop
  }

  return (USBD_OK);
 80114ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80114d0:	4618      	mov	r0, r3
 80114d2:	370c      	adds	r7, #12
 80114d4:	46bd      	mov	sp, r7
 80114d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114da:	4770      	bx	lr

080114dc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80114dc:	b580      	push	{r7, lr}
 80114de:	b082      	sub	sp, #8
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	6078      	str	r0, [r7, #4]
 80114e4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80114e6:	6879      	ldr	r1, [r7, #4]
 80114e8:	4805      	ldr	r0, [pc, #20]	@ (8011500 <CDC_Receive_FS+0x24>)
 80114ea:	f7fe fb8b 	bl	800fc04 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80114ee:	4804      	ldr	r0, [pc, #16]	@ (8011500 <CDC_Receive_FS+0x24>)
 80114f0:	f7fe fbe6 	bl	800fcc0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80114f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80114f6:	4618      	mov	r0, r3
 80114f8:	3708      	adds	r7, #8
 80114fa:	46bd      	mov	sp, r7
 80114fc:	bd80      	pop	{r7, pc}
 80114fe:	bf00      	nop
 8011500:	24000a64 	.word	0x24000a64

08011504 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011504:	b580      	push	{r7, lr}
 8011506:	b084      	sub	sp, #16
 8011508:	af00      	add	r7, sp, #0
 801150a:	6078      	str	r0, [r7, #4]
 801150c:	460b      	mov	r3, r1
 801150e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011510:	2300      	movs	r3, #0
 8011512:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011514:	4b0d      	ldr	r3, [pc, #52]	@ (801154c <CDC_Transmit_FS+0x48>)
 8011516:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 801151a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801151c:	68bb      	ldr	r3, [r7, #8]
 801151e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8011522:	2b00      	cmp	r3, #0
 8011524:	d001      	beq.n	801152a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011526:	2301      	movs	r3, #1
 8011528:	e00b      	b.n	8011542 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801152a:	887b      	ldrh	r3, [r7, #2]
 801152c:	461a      	mov	r2, r3
 801152e:	6879      	ldr	r1, [r7, #4]
 8011530:	4806      	ldr	r0, [pc, #24]	@ (801154c <CDC_Transmit_FS+0x48>)
 8011532:	f7fe fb45 	bl	800fbc0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011536:	4805      	ldr	r0, [pc, #20]	@ (801154c <CDC_Transmit_FS+0x48>)
 8011538:	f7fe fb82 	bl	800fc40 <USBD_CDC_TransmitPacket>
 801153c:	4603      	mov	r3, r0
 801153e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011540:	7bfb      	ldrb	r3, [r7, #15]
}
 8011542:	4618      	mov	r0, r3
 8011544:	3710      	adds	r7, #16
 8011546:	46bd      	mov	sp, r7
 8011548:	bd80      	pop	{r7, pc}
 801154a:	bf00      	nop
 801154c:	24000a64 	.word	0x24000a64

08011550 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011550:	b480      	push	{r7}
 8011552:	b087      	sub	sp, #28
 8011554:	af00      	add	r7, sp, #0
 8011556:	60f8      	str	r0, [r7, #12]
 8011558:	60b9      	str	r1, [r7, #8]
 801155a:	4613      	mov	r3, r2
 801155c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801155e:	2300      	movs	r3, #0
 8011560:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011562:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011566:	4618      	mov	r0, r3
 8011568:	371c      	adds	r7, #28
 801156a:	46bd      	mov	sp, r7
 801156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011570:	4770      	bx	lr
	...

08011574 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011574:	b480      	push	{r7}
 8011576:	b083      	sub	sp, #12
 8011578:	af00      	add	r7, sp, #0
 801157a:	4603      	mov	r3, r0
 801157c:	6039      	str	r1, [r7, #0]
 801157e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011580:	683b      	ldr	r3, [r7, #0]
 8011582:	2212      	movs	r2, #18
 8011584:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011586:	4b03      	ldr	r3, [pc, #12]	@ (8011594 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011588:	4618      	mov	r0, r3
 801158a:	370c      	adds	r7, #12
 801158c:	46bd      	mov	sp, r7
 801158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011592:	4770      	bx	lr
 8011594:	240000f8 	.word	0x240000f8

08011598 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011598:	b480      	push	{r7}
 801159a:	b083      	sub	sp, #12
 801159c:	af00      	add	r7, sp, #0
 801159e:	4603      	mov	r3, r0
 80115a0:	6039      	str	r1, [r7, #0]
 80115a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80115a4:	683b      	ldr	r3, [r7, #0]
 80115a6:	2204      	movs	r2, #4
 80115a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80115aa:	4b03      	ldr	r3, [pc, #12]	@ (80115b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	370c      	adds	r7, #12
 80115b0:	46bd      	mov	sp, r7
 80115b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b6:	4770      	bx	lr
 80115b8:	2400010c 	.word	0x2400010c

080115bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b082      	sub	sp, #8
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	4603      	mov	r3, r0
 80115c4:	6039      	str	r1, [r7, #0]
 80115c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80115c8:	79fb      	ldrb	r3, [r7, #7]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d105      	bne.n	80115da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80115ce:	683a      	ldr	r2, [r7, #0]
 80115d0:	4907      	ldr	r1, [pc, #28]	@ (80115f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80115d2:	4808      	ldr	r0, [pc, #32]	@ (80115f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80115d4:	f7ff fdea 	bl	80111ac <USBD_GetString>
 80115d8:	e004      	b.n	80115e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80115da:	683a      	ldr	r2, [r7, #0]
 80115dc:	4904      	ldr	r1, [pc, #16]	@ (80115f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80115de:	4805      	ldr	r0, [pc, #20]	@ (80115f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80115e0:	f7ff fde4 	bl	80111ac <USBD_GetString>
  }
  return USBD_StrDesc;
 80115e4:	4b02      	ldr	r3, [pc, #8]	@ (80115f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80115e6:	4618      	mov	r0, r3
 80115e8:	3708      	adds	r7, #8
 80115ea:	46bd      	mov	sp, r7
 80115ec:	bd80      	pop	{r7, pc}
 80115ee:	bf00      	nop
 80115f0:	24001d40 	.word	0x24001d40
 80115f4:	08014a38 	.word	0x08014a38

080115f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b082      	sub	sp, #8
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	4603      	mov	r3, r0
 8011600:	6039      	str	r1, [r7, #0]
 8011602:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011604:	683a      	ldr	r2, [r7, #0]
 8011606:	4904      	ldr	r1, [pc, #16]	@ (8011618 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011608:	4804      	ldr	r0, [pc, #16]	@ (801161c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801160a:	f7ff fdcf 	bl	80111ac <USBD_GetString>
  return USBD_StrDesc;
 801160e:	4b02      	ldr	r3, [pc, #8]	@ (8011618 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8011610:	4618      	mov	r0, r3
 8011612:	3708      	adds	r7, #8
 8011614:	46bd      	mov	sp, r7
 8011616:	bd80      	pop	{r7, pc}
 8011618:	24001d40 	.word	0x24001d40
 801161c:	08014a50 	.word	0x08014a50

08011620 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011620:	b580      	push	{r7, lr}
 8011622:	b082      	sub	sp, #8
 8011624:	af00      	add	r7, sp, #0
 8011626:	4603      	mov	r3, r0
 8011628:	6039      	str	r1, [r7, #0]
 801162a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801162c:	683b      	ldr	r3, [r7, #0]
 801162e:	221a      	movs	r2, #26
 8011630:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011632:	f000 f843 	bl	80116bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011636:	4b02      	ldr	r3, [pc, #8]	@ (8011640 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011638:	4618      	mov	r0, r3
 801163a:	3708      	adds	r7, #8
 801163c:	46bd      	mov	sp, r7
 801163e:	bd80      	pop	{r7, pc}
 8011640:	24000110 	.word	0x24000110

08011644 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b082      	sub	sp, #8
 8011648:	af00      	add	r7, sp, #0
 801164a:	4603      	mov	r3, r0
 801164c:	6039      	str	r1, [r7, #0]
 801164e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011650:	79fb      	ldrb	r3, [r7, #7]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d105      	bne.n	8011662 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011656:	683a      	ldr	r2, [r7, #0]
 8011658:	4907      	ldr	r1, [pc, #28]	@ (8011678 <USBD_FS_ConfigStrDescriptor+0x34>)
 801165a:	4808      	ldr	r0, [pc, #32]	@ (801167c <USBD_FS_ConfigStrDescriptor+0x38>)
 801165c:	f7ff fda6 	bl	80111ac <USBD_GetString>
 8011660:	e004      	b.n	801166c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011662:	683a      	ldr	r2, [r7, #0]
 8011664:	4904      	ldr	r1, [pc, #16]	@ (8011678 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011666:	4805      	ldr	r0, [pc, #20]	@ (801167c <USBD_FS_ConfigStrDescriptor+0x38>)
 8011668:	f7ff fda0 	bl	80111ac <USBD_GetString>
  }
  return USBD_StrDesc;
 801166c:	4b02      	ldr	r3, [pc, #8]	@ (8011678 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801166e:	4618      	mov	r0, r3
 8011670:	3708      	adds	r7, #8
 8011672:	46bd      	mov	sp, r7
 8011674:	bd80      	pop	{r7, pc}
 8011676:	bf00      	nop
 8011678:	24001d40 	.word	0x24001d40
 801167c:	08014a64 	.word	0x08014a64

08011680 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011680:	b580      	push	{r7, lr}
 8011682:	b082      	sub	sp, #8
 8011684:	af00      	add	r7, sp, #0
 8011686:	4603      	mov	r3, r0
 8011688:	6039      	str	r1, [r7, #0]
 801168a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801168c:	79fb      	ldrb	r3, [r7, #7]
 801168e:	2b00      	cmp	r3, #0
 8011690:	d105      	bne.n	801169e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011692:	683a      	ldr	r2, [r7, #0]
 8011694:	4907      	ldr	r1, [pc, #28]	@ (80116b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011696:	4808      	ldr	r0, [pc, #32]	@ (80116b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011698:	f7ff fd88 	bl	80111ac <USBD_GetString>
 801169c:	e004      	b.n	80116a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801169e:	683a      	ldr	r2, [r7, #0]
 80116a0:	4904      	ldr	r1, [pc, #16]	@ (80116b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80116a2:	4805      	ldr	r0, [pc, #20]	@ (80116b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80116a4:	f7ff fd82 	bl	80111ac <USBD_GetString>
  }
  return USBD_StrDesc;
 80116a8:	4b02      	ldr	r3, [pc, #8]	@ (80116b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80116aa:	4618      	mov	r0, r3
 80116ac:	3708      	adds	r7, #8
 80116ae:	46bd      	mov	sp, r7
 80116b0:	bd80      	pop	{r7, pc}
 80116b2:	bf00      	nop
 80116b4:	24001d40 	.word	0x24001d40
 80116b8:	08014a70 	.word	0x08014a70

080116bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b084      	sub	sp, #16
 80116c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80116c2:	4b0f      	ldr	r3, [pc, #60]	@ (8011700 <Get_SerialNum+0x44>)
 80116c4:	681b      	ldr	r3, [r3, #0]
 80116c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80116c8:	4b0e      	ldr	r3, [pc, #56]	@ (8011704 <Get_SerialNum+0x48>)
 80116ca:	681b      	ldr	r3, [r3, #0]
 80116cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80116ce:	4b0e      	ldr	r3, [pc, #56]	@ (8011708 <Get_SerialNum+0x4c>)
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80116d4:	68fa      	ldr	r2, [r7, #12]
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	4413      	add	r3, r2
 80116da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d009      	beq.n	80116f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80116e2:	2208      	movs	r2, #8
 80116e4:	4909      	ldr	r1, [pc, #36]	@ (801170c <Get_SerialNum+0x50>)
 80116e6:	68f8      	ldr	r0, [r7, #12]
 80116e8:	f000 f814 	bl	8011714 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80116ec:	2204      	movs	r2, #4
 80116ee:	4908      	ldr	r1, [pc, #32]	@ (8011710 <Get_SerialNum+0x54>)
 80116f0:	68b8      	ldr	r0, [r7, #8]
 80116f2:	f000 f80f 	bl	8011714 <IntToUnicode>
  }
}
 80116f6:	bf00      	nop
 80116f8:	3710      	adds	r7, #16
 80116fa:	46bd      	mov	sp, r7
 80116fc:	bd80      	pop	{r7, pc}
 80116fe:	bf00      	nop
 8011700:	1ff1e800 	.word	0x1ff1e800
 8011704:	1ff1e804 	.word	0x1ff1e804
 8011708:	1ff1e808 	.word	0x1ff1e808
 801170c:	24000112 	.word	0x24000112
 8011710:	24000122 	.word	0x24000122

08011714 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011714:	b480      	push	{r7}
 8011716:	b087      	sub	sp, #28
 8011718:	af00      	add	r7, sp, #0
 801171a:	60f8      	str	r0, [r7, #12]
 801171c:	60b9      	str	r1, [r7, #8]
 801171e:	4613      	mov	r3, r2
 8011720:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011722:	2300      	movs	r3, #0
 8011724:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011726:	2300      	movs	r3, #0
 8011728:	75fb      	strb	r3, [r7, #23]
 801172a:	e027      	b.n	801177c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	0f1b      	lsrs	r3, r3, #28
 8011730:	2b09      	cmp	r3, #9
 8011732:	d80b      	bhi.n	801174c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	0f1b      	lsrs	r3, r3, #28
 8011738:	b2da      	uxtb	r2, r3
 801173a:	7dfb      	ldrb	r3, [r7, #23]
 801173c:	005b      	lsls	r3, r3, #1
 801173e:	4619      	mov	r1, r3
 8011740:	68bb      	ldr	r3, [r7, #8]
 8011742:	440b      	add	r3, r1
 8011744:	3230      	adds	r2, #48	@ 0x30
 8011746:	b2d2      	uxtb	r2, r2
 8011748:	701a      	strb	r2, [r3, #0]
 801174a:	e00a      	b.n	8011762 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	0f1b      	lsrs	r3, r3, #28
 8011750:	b2da      	uxtb	r2, r3
 8011752:	7dfb      	ldrb	r3, [r7, #23]
 8011754:	005b      	lsls	r3, r3, #1
 8011756:	4619      	mov	r1, r3
 8011758:	68bb      	ldr	r3, [r7, #8]
 801175a:	440b      	add	r3, r1
 801175c:	3237      	adds	r2, #55	@ 0x37
 801175e:	b2d2      	uxtb	r2, r2
 8011760:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	011b      	lsls	r3, r3, #4
 8011766:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011768:	7dfb      	ldrb	r3, [r7, #23]
 801176a:	005b      	lsls	r3, r3, #1
 801176c:	3301      	adds	r3, #1
 801176e:	68ba      	ldr	r2, [r7, #8]
 8011770:	4413      	add	r3, r2
 8011772:	2200      	movs	r2, #0
 8011774:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011776:	7dfb      	ldrb	r3, [r7, #23]
 8011778:	3301      	adds	r3, #1
 801177a:	75fb      	strb	r3, [r7, #23]
 801177c:	7dfa      	ldrb	r2, [r7, #23]
 801177e:	79fb      	ldrb	r3, [r7, #7]
 8011780:	429a      	cmp	r2, r3
 8011782:	d3d3      	bcc.n	801172c <IntToUnicode+0x18>
  }
}
 8011784:	bf00      	nop
 8011786:	bf00      	nop
 8011788:	371c      	adds	r7, #28
 801178a:	46bd      	mov	sp, r7
 801178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011790:	4770      	bx	lr
	...

08011794 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b0ba      	sub	sp, #232	@ 0xe8
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801179c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80117a0:	2200      	movs	r2, #0
 80117a2:	601a      	str	r2, [r3, #0]
 80117a4:	605a      	str	r2, [r3, #4]
 80117a6:	609a      	str	r2, [r3, #8]
 80117a8:	60da      	str	r2, [r3, #12]
 80117aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80117ac:	f107 0310 	add.w	r3, r7, #16
 80117b0:	22c0      	movs	r2, #192	@ 0xc0
 80117b2:	2100      	movs	r1, #0
 80117b4:	4618      	mov	r0, r3
 80117b6:	f001 f890 	bl	80128da <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80117ba:	687b      	ldr	r3, [r7, #4]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	4a34      	ldr	r2, [pc, #208]	@ (8011890 <HAL_PCD_MspInit+0xfc>)
 80117c0:	4293      	cmp	r3, r2
 80117c2:	d161      	bne.n	8011888 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80117c4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80117c8:	f04f 0300 	mov.w	r3, #0
 80117cc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80117d0:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 80117d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80117d8:	f107 0310 	add.w	r3, r7, #16
 80117dc:	4618      	mov	r0, r3
 80117de:	f7f7 f961 	bl	8008aa4 <HAL_RCCEx_PeriphCLKConfig>
 80117e2:	4603      	mov	r3, r0
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d001      	beq.n	80117ec <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 80117e8:	f7ef fdaf 	bl	800134a <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80117ec:	f7f6 f964 	bl	8007ab8 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80117f0:	4b28      	ldr	r3, [pc, #160]	@ (8011894 <HAL_PCD_MspInit+0x100>)
 80117f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80117f6:	4a27      	ldr	r2, [pc, #156]	@ (8011894 <HAL_PCD_MspInit+0x100>)
 80117f8:	f043 0301 	orr.w	r3, r3, #1
 80117fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011800:	4b24      	ldr	r3, [pc, #144]	@ (8011894 <HAL_PCD_MspInit+0x100>)
 8011802:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011806:	f003 0301 	and.w	r3, r3, #1
 801180a:	60fb      	str	r3, [r7, #12]
 801180c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 801180e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8011812:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011816:	2302      	movs	r3, #2
 8011818:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801181c:	2300      	movs	r3, #0
 801181e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011822:	2300      	movs	r3, #0
 8011824:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8011828:	230a      	movs	r3, #10
 801182a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801182e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011832:	4619      	mov	r1, r3
 8011834:	4818      	ldr	r0, [pc, #96]	@ (8011898 <HAL_PCD_MspInit+0x104>)
 8011836:	f7f4 fc1d 	bl	8006074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 801183a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801183e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011842:	2300      	movs	r3, #0
 8011844:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011848:	2300      	movs	r3, #0
 801184a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801184e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011852:	4619      	mov	r1, r3
 8011854:	4810      	ldr	r0, [pc, #64]	@ (8011898 <HAL_PCD_MspInit+0x104>)
 8011856:	f7f4 fc0d 	bl	8006074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801185a:	4b0e      	ldr	r3, [pc, #56]	@ (8011894 <HAL_PCD_MspInit+0x100>)
 801185c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011860:	4a0c      	ldr	r2, [pc, #48]	@ (8011894 <HAL_PCD_MspInit+0x100>)
 8011862:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011866:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 801186a:	4b0a      	ldr	r3, [pc, #40]	@ (8011894 <HAL_PCD_MspInit+0x100>)
 801186c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011870:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011874:	60bb      	str	r3, [r7, #8]
 8011876:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011878:	2200      	movs	r2, #0
 801187a:	2100      	movs	r1, #0
 801187c:	2065      	movs	r0, #101	@ 0x65
 801187e:	f7f2 fa68 	bl	8003d52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011882:	2065      	movs	r0, #101	@ 0x65
 8011884:	f7f2 fa7f 	bl	8003d86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011888:	bf00      	nop
 801188a:	37e8      	adds	r7, #232	@ 0xe8
 801188c:	46bd      	mov	sp, r7
 801188e:	bd80      	pop	{r7, pc}
 8011890:	40080000 	.word	0x40080000
 8011894:	58024400 	.word	0x58024400
 8011898:	58020000 	.word	0x58020000

0801189c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b082      	sub	sp, #8
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80118b0:	4619      	mov	r1, r3
 80118b2:	4610      	mov	r0, r2
 80118b4:	f7fe faed 	bl	800fe92 <USBD_LL_SetupStage>
}
 80118b8:	bf00      	nop
 80118ba:	3708      	adds	r7, #8
 80118bc:	46bd      	mov	sp, r7
 80118be:	bd80      	pop	{r7, pc}

080118c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118c0:	b580      	push	{r7, lr}
 80118c2:	b082      	sub	sp, #8
 80118c4:	af00      	add	r7, sp, #0
 80118c6:	6078      	str	r0, [r7, #4]
 80118c8:	460b      	mov	r3, r1
 80118ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80118d2:	78fa      	ldrb	r2, [r7, #3]
 80118d4:	6879      	ldr	r1, [r7, #4]
 80118d6:	4613      	mov	r3, r2
 80118d8:	00db      	lsls	r3, r3, #3
 80118da:	4413      	add	r3, r2
 80118dc:	009b      	lsls	r3, r3, #2
 80118de:	440b      	add	r3, r1
 80118e0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80118e4:	681a      	ldr	r2, [r3, #0]
 80118e6:	78fb      	ldrb	r3, [r7, #3]
 80118e8:	4619      	mov	r1, r3
 80118ea:	f7fe fb27 	bl	800ff3c <USBD_LL_DataOutStage>
}
 80118ee:	bf00      	nop
 80118f0:	3708      	adds	r7, #8
 80118f2:	46bd      	mov	sp, r7
 80118f4:	bd80      	pop	{r7, pc}

080118f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118f6:	b580      	push	{r7, lr}
 80118f8:	b082      	sub	sp, #8
 80118fa:	af00      	add	r7, sp, #0
 80118fc:	6078      	str	r0, [r7, #4]
 80118fe:	460b      	mov	r3, r1
 8011900:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011908:	78fa      	ldrb	r2, [r7, #3]
 801190a:	6879      	ldr	r1, [r7, #4]
 801190c:	4613      	mov	r3, r2
 801190e:	00db      	lsls	r3, r3, #3
 8011910:	4413      	add	r3, r2
 8011912:	009b      	lsls	r3, r3, #2
 8011914:	440b      	add	r3, r1
 8011916:	3320      	adds	r3, #32
 8011918:	681a      	ldr	r2, [r3, #0]
 801191a:	78fb      	ldrb	r3, [r7, #3]
 801191c:	4619      	mov	r1, r3
 801191e:	f7fe fbc0 	bl	80100a2 <USBD_LL_DataInStage>
}
 8011922:	bf00      	nop
 8011924:	3708      	adds	r7, #8
 8011926:	46bd      	mov	sp, r7
 8011928:	bd80      	pop	{r7, pc}

0801192a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801192a:	b580      	push	{r7, lr}
 801192c:	b082      	sub	sp, #8
 801192e:	af00      	add	r7, sp, #0
 8011930:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011938:	4618      	mov	r0, r3
 801193a:	f7fe fcfa 	bl	8010332 <USBD_LL_SOF>
}
 801193e:	bf00      	nop
 8011940:	3708      	adds	r7, #8
 8011942:	46bd      	mov	sp, r7
 8011944:	bd80      	pop	{r7, pc}

08011946 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011946:	b580      	push	{r7, lr}
 8011948:	b084      	sub	sp, #16
 801194a:	af00      	add	r7, sp, #0
 801194c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801194e:	2301      	movs	r3, #1
 8011950:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011952:	687b      	ldr	r3, [r7, #4]
 8011954:	79db      	ldrb	r3, [r3, #7]
 8011956:	2b00      	cmp	r3, #0
 8011958:	d102      	bne.n	8011960 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801195a:	2300      	movs	r3, #0
 801195c:	73fb      	strb	r3, [r7, #15]
 801195e:	e008      	b.n	8011972 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	79db      	ldrb	r3, [r3, #7]
 8011964:	2b02      	cmp	r3, #2
 8011966:	d102      	bne.n	801196e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011968:	2301      	movs	r3, #1
 801196a:	73fb      	strb	r3, [r7, #15]
 801196c:	e001      	b.n	8011972 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801196e:	f7ef fcec 	bl	800134a <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011978:	7bfa      	ldrb	r2, [r7, #15]
 801197a:	4611      	mov	r1, r2
 801197c:	4618      	mov	r0, r3
 801197e:	f7fe fc94 	bl	80102aa <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011988:	4618      	mov	r0, r3
 801198a:	f7fe fc3c 	bl	8010206 <USBD_LL_Reset>
}
 801198e:	bf00      	nop
 8011990:	3710      	adds	r7, #16
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}
	...

08011998 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b082      	sub	sp, #8
 801199c:	af00      	add	r7, sp, #0
 801199e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80119a6:	4618      	mov	r0, r3
 80119a8:	f7fe fc8f 	bl	80102ca <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80119b4:	681b      	ldr	r3, [r3, #0]
 80119b6:	687a      	ldr	r2, [r7, #4]
 80119b8:	6812      	ldr	r2, [r2, #0]
 80119ba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80119be:	f043 0301 	orr.w	r3, r3, #1
 80119c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	7adb      	ldrb	r3, [r3, #11]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d005      	beq.n	80119d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80119cc:	4b04      	ldr	r3, [pc, #16]	@ (80119e0 <HAL_PCD_SuspendCallback+0x48>)
 80119ce:	691b      	ldr	r3, [r3, #16]
 80119d0:	4a03      	ldr	r2, [pc, #12]	@ (80119e0 <HAL_PCD_SuspendCallback+0x48>)
 80119d2:	f043 0306 	orr.w	r3, r3, #6
 80119d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80119d8:	bf00      	nop
 80119da:	3708      	adds	r7, #8
 80119dc:	46bd      	mov	sp, r7
 80119de:	bd80      	pop	{r7, pc}
 80119e0:	e000ed00 	.word	0xe000ed00

080119e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119e4:	b580      	push	{r7, lr}
 80119e6:	b082      	sub	sp, #8
 80119e8:	af00      	add	r7, sp, #0
 80119ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80119ec:	687b      	ldr	r3, [r7, #4]
 80119ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80119f2:	4618      	mov	r0, r3
 80119f4:	f7fe fc85 	bl	8010302 <USBD_LL_Resume>
}
 80119f8:	bf00      	nop
 80119fa:	3708      	adds	r7, #8
 80119fc:	46bd      	mov	sp, r7
 80119fe:	bd80      	pop	{r7, pc}

08011a00 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b082      	sub	sp, #8
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
 8011a08:	460b      	mov	r3, r1
 8011a0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011a12:	78fa      	ldrb	r2, [r7, #3]
 8011a14:	4611      	mov	r1, r2
 8011a16:	4618      	mov	r0, r3
 8011a18:	f7fe fcdd 	bl	80103d6 <USBD_LL_IsoOUTIncomplete>
}
 8011a1c:	bf00      	nop
 8011a1e:	3708      	adds	r7, #8
 8011a20:	46bd      	mov	sp, r7
 8011a22:	bd80      	pop	{r7, pc}

08011a24 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b082      	sub	sp, #8
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
 8011a2c:	460b      	mov	r3, r1
 8011a2e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011a30:	687b      	ldr	r3, [r7, #4]
 8011a32:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011a36:	78fa      	ldrb	r2, [r7, #3]
 8011a38:	4611      	mov	r1, r2
 8011a3a:	4618      	mov	r0, r3
 8011a3c:	f7fe fc99 	bl	8010372 <USBD_LL_IsoINIncomplete>
}
 8011a40:	bf00      	nop
 8011a42:	3708      	adds	r7, #8
 8011a44:	46bd      	mov	sp, r7
 8011a46:	bd80      	pop	{r7, pc}

08011a48 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b082      	sub	sp, #8
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011a56:	4618      	mov	r0, r3
 8011a58:	f7fe fcef 	bl	801043a <USBD_LL_DevConnected>
}
 8011a5c:	bf00      	nop
 8011a5e:	3708      	adds	r7, #8
 8011a60:	46bd      	mov	sp, r7
 8011a62:	bd80      	pop	{r7, pc}

08011a64 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011a64:	b580      	push	{r7, lr}
 8011a66:	b082      	sub	sp, #8
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011a72:	4618      	mov	r0, r3
 8011a74:	f7fe fcec 	bl	8010450 <USBD_LL_DevDisconnected>
}
 8011a78:	bf00      	nop
 8011a7a:	3708      	adds	r7, #8
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	bd80      	pop	{r7, pc}

08011a80 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b082      	sub	sp, #8
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	781b      	ldrb	r3, [r3, #0]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d13e      	bne.n	8011b0e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011a90:	4a21      	ldr	r2, [pc, #132]	@ (8011b18 <USBD_LL_Init+0x98>)
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	4a1f      	ldr	r2, [pc, #124]	@ (8011b18 <USBD_LL_Init+0x98>)
 8011a9c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011aa0:	4b1d      	ldr	r3, [pc, #116]	@ (8011b18 <USBD_LL_Init+0x98>)
 8011aa2:	4a1e      	ldr	r2, [pc, #120]	@ (8011b1c <USBD_LL_Init+0x9c>)
 8011aa4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8011aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8011b18 <USBD_LL_Init+0x98>)
 8011aa8:	2209      	movs	r2, #9
 8011aaa:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011aac:	4b1a      	ldr	r3, [pc, #104]	@ (8011b18 <USBD_LL_Init+0x98>)
 8011aae:	2202      	movs	r2, #2
 8011ab0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011ab2:	4b19      	ldr	r3, [pc, #100]	@ (8011b18 <USBD_LL_Init+0x98>)
 8011ab4:	2200      	movs	r2, #0
 8011ab6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011ab8:	4b17      	ldr	r3, [pc, #92]	@ (8011b18 <USBD_LL_Init+0x98>)
 8011aba:	2202      	movs	r2, #2
 8011abc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8011abe:	4b16      	ldr	r3, [pc, #88]	@ (8011b18 <USBD_LL_Init+0x98>)
 8011ac0:	2201      	movs	r2, #1
 8011ac2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011ac4:	4b14      	ldr	r3, [pc, #80]	@ (8011b18 <USBD_LL_Init+0x98>)
 8011ac6:	2200      	movs	r2, #0
 8011ac8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011aca:	4b13      	ldr	r3, [pc, #76]	@ (8011b18 <USBD_LL_Init+0x98>)
 8011acc:	2200      	movs	r2, #0
 8011ace:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8011ad0:	4b11      	ldr	r3, [pc, #68]	@ (8011b18 <USBD_LL_Init+0x98>)
 8011ad2:	2201      	movs	r2, #1
 8011ad4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8011ad6:	4b10      	ldr	r3, [pc, #64]	@ (8011b18 <USBD_LL_Init+0x98>)
 8011ad8:	2201      	movs	r2, #1
 8011ada:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011adc:	4b0e      	ldr	r3, [pc, #56]	@ (8011b18 <USBD_LL_Init+0x98>)
 8011ade:	2200      	movs	r2, #0
 8011ae0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011ae2:	480d      	ldr	r0, [pc, #52]	@ (8011b18 <USBD_LL_Init+0x98>)
 8011ae4:	f7f4 fcf0 	bl	80064c8 <HAL_PCD_Init>
 8011ae8:	4603      	mov	r3, r0
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d001      	beq.n	8011af2 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8011aee:	f7ef fc2c 	bl	800134a <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011af2:	2180      	movs	r1, #128	@ 0x80
 8011af4:	4808      	ldr	r0, [pc, #32]	@ (8011b18 <USBD_LL_Init+0x98>)
 8011af6:	f7f5 ff44 	bl	8007982 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011afa:	2240      	movs	r2, #64	@ 0x40
 8011afc:	2100      	movs	r1, #0
 8011afe:	4806      	ldr	r0, [pc, #24]	@ (8011b18 <USBD_LL_Init+0x98>)
 8011b00:	f7f5 fef8 	bl	80078f4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011b04:	2280      	movs	r2, #128	@ 0x80
 8011b06:	2101      	movs	r1, #1
 8011b08:	4803      	ldr	r0, [pc, #12]	@ (8011b18 <USBD_LL_Init+0x98>)
 8011b0a:	f7f5 fef3 	bl	80078f4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8011b0e:	2300      	movs	r3, #0
}
 8011b10:	4618      	mov	r0, r3
 8011b12:	3708      	adds	r7, #8
 8011b14:	46bd      	mov	sp, r7
 8011b16:	bd80      	pop	{r7, pc}
 8011b18:	24001f40 	.word	0x24001f40
 8011b1c:	40080000 	.word	0x40080000

08011b20 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b084      	sub	sp, #16
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b28:	2300      	movs	r3, #0
 8011b2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b2c:	2300      	movs	r3, #0
 8011b2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011b36:	4618      	mov	r0, r3
 8011b38:	f7f4 fdd2 	bl	80066e0 <HAL_PCD_Start>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b40:	7bfb      	ldrb	r3, [r7, #15]
 8011b42:	4618      	mov	r0, r3
 8011b44:	f000 f942 	bl	8011dcc <USBD_Get_USB_Status>
 8011b48:	4603      	mov	r3, r0
 8011b4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b4e:	4618      	mov	r0, r3
 8011b50:	3710      	adds	r7, #16
 8011b52:	46bd      	mov	sp, r7
 8011b54:	bd80      	pop	{r7, pc}

08011b56 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011b56:	b580      	push	{r7, lr}
 8011b58:	b084      	sub	sp, #16
 8011b5a:	af00      	add	r7, sp, #0
 8011b5c:	6078      	str	r0, [r7, #4]
 8011b5e:	4608      	mov	r0, r1
 8011b60:	4611      	mov	r1, r2
 8011b62:	461a      	mov	r2, r3
 8011b64:	4603      	mov	r3, r0
 8011b66:	70fb      	strb	r3, [r7, #3]
 8011b68:	460b      	mov	r3, r1
 8011b6a:	70bb      	strb	r3, [r7, #2]
 8011b6c:	4613      	mov	r3, r2
 8011b6e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b70:	2300      	movs	r3, #0
 8011b72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b74:	2300      	movs	r3, #0
 8011b76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011b7e:	78bb      	ldrb	r3, [r7, #2]
 8011b80:	883a      	ldrh	r2, [r7, #0]
 8011b82:	78f9      	ldrb	r1, [r7, #3]
 8011b84:	f7f5 fad3 	bl	800712e <HAL_PCD_EP_Open>
 8011b88:	4603      	mov	r3, r0
 8011b8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b8c:	7bfb      	ldrb	r3, [r7, #15]
 8011b8e:	4618      	mov	r0, r3
 8011b90:	f000 f91c 	bl	8011dcc <USBD_Get_USB_Status>
 8011b94:	4603      	mov	r3, r0
 8011b96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b98:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b9a:	4618      	mov	r0, r3
 8011b9c:	3710      	adds	r7, #16
 8011b9e:	46bd      	mov	sp, r7
 8011ba0:	bd80      	pop	{r7, pc}

08011ba2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011ba2:	b580      	push	{r7, lr}
 8011ba4:	b084      	sub	sp, #16
 8011ba6:	af00      	add	r7, sp, #0
 8011ba8:	6078      	str	r0, [r7, #4]
 8011baa:	460b      	mov	r3, r1
 8011bac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bae:	2300      	movs	r3, #0
 8011bb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011bbc:	78fa      	ldrb	r2, [r7, #3]
 8011bbe:	4611      	mov	r1, r2
 8011bc0:	4618      	mov	r0, r3
 8011bc2:	f7f5 fb1c 	bl	80071fe <HAL_PCD_EP_Close>
 8011bc6:	4603      	mov	r3, r0
 8011bc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011bca:	7bfb      	ldrb	r3, [r7, #15]
 8011bcc:	4618      	mov	r0, r3
 8011bce:	f000 f8fd 	bl	8011dcc <USBD_Get_USB_Status>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011bd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8011bd8:	4618      	mov	r0, r3
 8011bda:	3710      	adds	r7, #16
 8011bdc:	46bd      	mov	sp, r7
 8011bde:	bd80      	pop	{r7, pc}

08011be0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011be0:	b580      	push	{r7, lr}
 8011be2:	b084      	sub	sp, #16
 8011be4:	af00      	add	r7, sp, #0
 8011be6:	6078      	str	r0, [r7, #4]
 8011be8:	460b      	mov	r3, r1
 8011bea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bec:	2300      	movs	r3, #0
 8011bee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011bfa:	78fa      	ldrb	r2, [r7, #3]
 8011bfc:	4611      	mov	r1, r2
 8011bfe:	4618      	mov	r0, r3
 8011c00:	f7f5 fbd4 	bl	80073ac <HAL_PCD_EP_SetStall>
 8011c04:	4603      	mov	r3, r0
 8011c06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c08:	7bfb      	ldrb	r3, [r7, #15]
 8011c0a:	4618      	mov	r0, r3
 8011c0c:	f000 f8de 	bl	8011dcc <USBD_Get_USB_Status>
 8011c10:	4603      	mov	r3, r0
 8011c12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c14:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c16:	4618      	mov	r0, r3
 8011c18:	3710      	adds	r7, #16
 8011c1a:	46bd      	mov	sp, r7
 8011c1c:	bd80      	pop	{r7, pc}

08011c1e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c1e:	b580      	push	{r7, lr}
 8011c20:	b084      	sub	sp, #16
 8011c22:	af00      	add	r7, sp, #0
 8011c24:	6078      	str	r0, [r7, #4]
 8011c26:	460b      	mov	r3, r1
 8011c28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c2a:	2300      	movs	r3, #0
 8011c2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c2e:	2300      	movs	r3, #0
 8011c30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011c38:	78fa      	ldrb	r2, [r7, #3]
 8011c3a:	4611      	mov	r1, r2
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f7f5 fc18 	bl	8007472 <HAL_PCD_EP_ClrStall>
 8011c42:	4603      	mov	r3, r0
 8011c44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c46:	7bfb      	ldrb	r3, [r7, #15]
 8011c48:	4618      	mov	r0, r3
 8011c4a:	f000 f8bf 	bl	8011dcc <USBD_Get_USB_Status>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c52:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c54:	4618      	mov	r0, r3
 8011c56:	3710      	adds	r7, #16
 8011c58:	46bd      	mov	sp, r7
 8011c5a:	bd80      	pop	{r7, pc}

08011c5c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011c5c:	b480      	push	{r7}
 8011c5e:	b085      	sub	sp, #20
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
 8011c64:	460b      	mov	r3, r1
 8011c66:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011c6e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011c70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	da0b      	bge.n	8011c90 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011c78:	78fb      	ldrb	r3, [r7, #3]
 8011c7a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011c7e:	68f9      	ldr	r1, [r7, #12]
 8011c80:	4613      	mov	r3, r2
 8011c82:	00db      	lsls	r3, r3, #3
 8011c84:	4413      	add	r3, r2
 8011c86:	009b      	lsls	r3, r3, #2
 8011c88:	440b      	add	r3, r1
 8011c8a:	3316      	adds	r3, #22
 8011c8c:	781b      	ldrb	r3, [r3, #0]
 8011c8e:	e00b      	b.n	8011ca8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011c90:	78fb      	ldrb	r3, [r7, #3]
 8011c92:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011c96:	68f9      	ldr	r1, [r7, #12]
 8011c98:	4613      	mov	r3, r2
 8011c9a:	00db      	lsls	r3, r3, #3
 8011c9c:	4413      	add	r3, r2
 8011c9e:	009b      	lsls	r3, r3, #2
 8011ca0:	440b      	add	r3, r1
 8011ca2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8011ca6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011ca8:	4618      	mov	r0, r3
 8011caa:	3714      	adds	r7, #20
 8011cac:	46bd      	mov	sp, r7
 8011cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cb2:	4770      	bx	lr

08011cb4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011cb4:	b580      	push	{r7, lr}
 8011cb6:	b084      	sub	sp, #16
 8011cb8:	af00      	add	r7, sp, #0
 8011cba:	6078      	str	r0, [r7, #4]
 8011cbc:	460b      	mov	r3, r1
 8011cbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011cce:	78fa      	ldrb	r2, [r7, #3]
 8011cd0:	4611      	mov	r1, r2
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f7f5 fa07 	bl	80070e6 <HAL_PCD_SetAddress>
 8011cd8:	4603      	mov	r3, r0
 8011cda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011cdc:	7bfb      	ldrb	r3, [r7, #15]
 8011cde:	4618      	mov	r0, r3
 8011ce0:	f000 f874 	bl	8011dcc <USBD_Get_USB_Status>
 8011ce4:	4603      	mov	r3, r0
 8011ce6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ce8:	7bbb      	ldrb	r3, [r7, #14]
}
 8011cea:	4618      	mov	r0, r3
 8011cec:	3710      	adds	r7, #16
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	bd80      	pop	{r7, pc}

08011cf2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011cf2:	b580      	push	{r7, lr}
 8011cf4:	b086      	sub	sp, #24
 8011cf6:	af00      	add	r7, sp, #0
 8011cf8:	60f8      	str	r0, [r7, #12]
 8011cfa:	607a      	str	r2, [r7, #4]
 8011cfc:	603b      	str	r3, [r7, #0]
 8011cfe:	460b      	mov	r3, r1
 8011d00:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d02:	2300      	movs	r3, #0
 8011d04:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d06:	2300      	movs	r3, #0
 8011d08:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011d10:	7af9      	ldrb	r1, [r7, #11]
 8011d12:	683b      	ldr	r3, [r7, #0]
 8011d14:	687a      	ldr	r2, [r7, #4]
 8011d16:	f7f5 fb0f 	bl	8007338 <HAL_PCD_EP_Transmit>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d1e:	7dfb      	ldrb	r3, [r7, #23]
 8011d20:	4618      	mov	r0, r3
 8011d22:	f000 f853 	bl	8011dcc <USBD_Get_USB_Status>
 8011d26:	4603      	mov	r3, r0
 8011d28:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011d2a:	7dbb      	ldrb	r3, [r7, #22]
}
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	3718      	adds	r7, #24
 8011d30:	46bd      	mov	sp, r7
 8011d32:	bd80      	pop	{r7, pc}

08011d34 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011d34:	b580      	push	{r7, lr}
 8011d36:	b086      	sub	sp, #24
 8011d38:	af00      	add	r7, sp, #0
 8011d3a:	60f8      	str	r0, [r7, #12]
 8011d3c:	607a      	str	r2, [r7, #4]
 8011d3e:	603b      	str	r3, [r7, #0]
 8011d40:	460b      	mov	r3, r1
 8011d42:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011d44:	2300      	movs	r3, #0
 8011d46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d48:	2300      	movs	r3, #0
 8011d4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011d52:	7af9      	ldrb	r1, [r7, #11]
 8011d54:	683b      	ldr	r3, [r7, #0]
 8011d56:	687a      	ldr	r2, [r7, #4]
 8011d58:	f7f5 fa9b 	bl	8007292 <HAL_PCD_EP_Receive>
 8011d5c:	4603      	mov	r3, r0
 8011d5e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011d60:	7dfb      	ldrb	r3, [r7, #23]
 8011d62:	4618      	mov	r0, r3
 8011d64:	f000 f832 	bl	8011dcc <USBD_Get_USB_Status>
 8011d68:	4603      	mov	r3, r0
 8011d6a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011d6c:	7dbb      	ldrb	r3, [r7, #22]
}
 8011d6e:	4618      	mov	r0, r3
 8011d70:	3718      	adds	r7, #24
 8011d72:	46bd      	mov	sp, r7
 8011d74:	bd80      	pop	{r7, pc}

08011d76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011d76:	b580      	push	{r7, lr}
 8011d78:	b082      	sub	sp, #8
 8011d7a:	af00      	add	r7, sp, #0
 8011d7c:	6078      	str	r0, [r7, #4]
 8011d7e:	460b      	mov	r3, r1
 8011d80:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011d88:	78fa      	ldrb	r2, [r7, #3]
 8011d8a:	4611      	mov	r1, r2
 8011d8c:	4618      	mov	r0, r3
 8011d8e:	f7f5 fabb 	bl	8007308 <HAL_PCD_EP_GetRxCount>
 8011d92:	4603      	mov	r3, r0
}
 8011d94:	4618      	mov	r0, r3
 8011d96:	3708      	adds	r7, #8
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	bd80      	pop	{r7, pc}

08011d9c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011d9c:	b480      	push	{r7}
 8011d9e:	b083      	sub	sp, #12
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011da4:	4b03      	ldr	r3, [pc, #12]	@ (8011db4 <USBD_static_malloc+0x18>)
}
 8011da6:	4618      	mov	r0, r3
 8011da8:	370c      	adds	r7, #12
 8011daa:	46bd      	mov	sp, r7
 8011dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db0:	4770      	bx	lr
 8011db2:	bf00      	nop
 8011db4:	24002424 	.word	0x24002424

08011db8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011db8:	b480      	push	{r7}
 8011dba:	b083      	sub	sp, #12
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8011dc0:	bf00      	nop
 8011dc2:	370c      	adds	r7, #12
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dca:	4770      	bx	lr

08011dcc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011dcc:	b480      	push	{r7}
 8011dce:	b085      	sub	sp, #20
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	4603      	mov	r3, r0
 8011dd4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011dd6:	2300      	movs	r3, #0
 8011dd8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011dda:	79fb      	ldrb	r3, [r7, #7]
 8011ddc:	2b03      	cmp	r3, #3
 8011dde:	d817      	bhi.n	8011e10 <USBD_Get_USB_Status+0x44>
 8011de0:	a201      	add	r2, pc, #4	@ (adr r2, 8011de8 <USBD_Get_USB_Status+0x1c>)
 8011de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011de6:	bf00      	nop
 8011de8:	08011df9 	.word	0x08011df9
 8011dec:	08011dff 	.word	0x08011dff
 8011df0:	08011e05 	.word	0x08011e05
 8011df4:	08011e0b 	.word	0x08011e0b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011df8:	2300      	movs	r3, #0
 8011dfa:	73fb      	strb	r3, [r7, #15]
    break;
 8011dfc:	e00b      	b.n	8011e16 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011dfe:	2303      	movs	r3, #3
 8011e00:	73fb      	strb	r3, [r7, #15]
    break;
 8011e02:	e008      	b.n	8011e16 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011e04:	2301      	movs	r3, #1
 8011e06:	73fb      	strb	r3, [r7, #15]
    break;
 8011e08:	e005      	b.n	8011e16 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011e0a:	2303      	movs	r3, #3
 8011e0c:	73fb      	strb	r3, [r7, #15]
    break;
 8011e0e:	e002      	b.n	8011e16 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011e10:	2303      	movs	r3, #3
 8011e12:	73fb      	strb	r3, [r7, #15]
    break;
 8011e14:	bf00      	nop
  }
  return usb_status;
 8011e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e18:	4618      	mov	r0, r3
 8011e1a:	3714      	adds	r7, #20
 8011e1c:	46bd      	mov	sp, r7
 8011e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e22:	4770      	bx	lr

08011e24 <__cvt>:
 8011e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e26:	ed2d 8b02 	vpush	{d8}
 8011e2a:	eeb0 8b40 	vmov.f64	d8, d0
 8011e2e:	b085      	sub	sp, #20
 8011e30:	4617      	mov	r7, r2
 8011e32:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8011e34:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011e36:	ee18 2a90 	vmov	r2, s17
 8011e3a:	f025 0520 	bic.w	r5, r5, #32
 8011e3e:	2a00      	cmp	r2, #0
 8011e40:	bfb6      	itet	lt
 8011e42:	222d      	movlt	r2, #45	@ 0x2d
 8011e44:	2200      	movge	r2, #0
 8011e46:	eeb1 8b40 	vneglt.f64	d8, d0
 8011e4a:	2d46      	cmp	r5, #70	@ 0x46
 8011e4c:	460c      	mov	r4, r1
 8011e4e:	701a      	strb	r2, [r3, #0]
 8011e50:	d004      	beq.n	8011e5c <__cvt+0x38>
 8011e52:	2d45      	cmp	r5, #69	@ 0x45
 8011e54:	d100      	bne.n	8011e58 <__cvt+0x34>
 8011e56:	3401      	adds	r4, #1
 8011e58:	2102      	movs	r1, #2
 8011e5a:	e000      	b.n	8011e5e <__cvt+0x3a>
 8011e5c:	2103      	movs	r1, #3
 8011e5e:	ab03      	add	r3, sp, #12
 8011e60:	9301      	str	r3, [sp, #4]
 8011e62:	ab02      	add	r3, sp, #8
 8011e64:	9300      	str	r3, [sp, #0]
 8011e66:	4622      	mov	r2, r4
 8011e68:	4633      	mov	r3, r6
 8011e6a:	eeb0 0b48 	vmov.f64	d0, d8
 8011e6e:	f000 fe3f 	bl	8012af0 <_dtoa_r>
 8011e72:	2d47      	cmp	r5, #71	@ 0x47
 8011e74:	d114      	bne.n	8011ea0 <__cvt+0x7c>
 8011e76:	07fb      	lsls	r3, r7, #31
 8011e78:	d50a      	bpl.n	8011e90 <__cvt+0x6c>
 8011e7a:	1902      	adds	r2, r0, r4
 8011e7c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011e80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e84:	bf08      	it	eq
 8011e86:	9203      	streq	r2, [sp, #12]
 8011e88:	2130      	movs	r1, #48	@ 0x30
 8011e8a:	9b03      	ldr	r3, [sp, #12]
 8011e8c:	4293      	cmp	r3, r2
 8011e8e:	d319      	bcc.n	8011ec4 <__cvt+0xa0>
 8011e90:	9b03      	ldr	r3, [sp, #12]
 8011e92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011e94:	1a1b      	subs	r3, r3, r0
 8011e96:	6013      	str	r3, [r2, #0]
 8011e98:	b005      	add	sp, #20
 8011e9a:	ecbd 8b02 	vpop	{d8}
 8011e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ea0:	2d46      	cmp	r5, #70	@ 0x46
 8011ea2:	eb00 0204 	add.w	r2, r0, r4
 8011ea6:	d1e9      	bne.n	8011e7c <__cvt+0x58>
 8011ea8:	7803      	ldrb	r3, [r0, #0]
 8011eaa:	2b30      	cmp	r3, #48	@ 0x30
 8011eac:	d107      	bne.n	8011ebe <__cvt+0x9a>
 8011eae:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011eb6:	bf1c      	itt	ne
 8011eb8:	f1c4 0401 	rsbne	r4, r4, #1
 8011ebc:	6034      	strne	r4, [r6, #0]
 8011ebe:	6833      	ldr	r3, [r6, #0]
 8011ec0:	441a      	add	r2, r3
 8011ec2:	e7db      	b.n	8011e7c <__cvt+0x58>
 8011ec4:	1c5c      	adds	r4, r3, #1
 8011ec6:	9403      	str	r4, [sp, #12]
 8011ec8:	7019      	strb	r1, [r3, #0]
 8011eca:	e7de      	b.n	8011e8a <__cvt+0x66>

08011ecc <__exponent>:
 8011ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011ece:	2900      	cmp	r1, #0
 8011ed0:	bfba      	itte	lt
 8011ed2:	4249      	neglt	r1, r1
 8011ed4:	232d      	movlt	r3, #45	@ 0x2d
 8011ed6:	232b      	movge	r3, #43	@ 0x2b
 8011ed8:	2909      	cmp	r1, #9
 8011eda:	7002      	strb	r2, [r0, #0]
 8011edc:	7043      	strb	r3, [r0, #1]
 8011ede:	dd29      	ble.n	8011f34 <__exponent+0x68>
 8011ee0:	f10d 0307 	add.w	r3, sp, #7
 8011ee4:	461d      	mov	r5, r3
 8011ee6:	270a      	movs	r7, #10
 8011ee8:	461a      	mov	r2, r3
 8011eea:	fbb1 f6f7 	udiv	r6, r1, r7
 8011eee:	fb07 1416 	mls	r4, r7, r6, r1
 8011ef2:	3430      	adds	r4, #48	@ 0x30
 8011ef4:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011ef8:	460c      	mov	r4, r1
 8011efa:	2c63      	cmp	r4, #99	@ 0x63
 8011efc:	f103 33ff 	add.w	r3, r3, #4294967295
 8011f00:	4631      	mov	r1, r6
 8011f02:	dcf1      	bgt.n	8011ee8 <__exponent+0x1c>
 8011f04:	3130      	adds	r1, #48	@ 0x30
 8011f06:	1e94      	subs	r4, r2, #2
 8011f08:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011f0c:	1c41      	adds	r1, r0, #1
 8011f0e:	4623      	mov	r3, r4
 8011f10:	42ab      	cmp	r3, r5
 8011f12:	d30a      	bcc.n	8011f2a <__exponent+0x5e>
 8011f14:	f10d 0309 	add.w	r3, sp, #9
 8011f18:	1a9b      	subs	r3, r3, r2
 8011f1a:	42ac      	cmp	r4, r5
 8011f1c:	bf88      	it	hi
 8011f1e:	2300      	movhi	r3, #0
 8011f20:	3302      	adds	r3, #2
 8011f22:	4403      	add	r3, r0
 8011f24:	1a18      	subs	r0, r3, r0
 8011f26:	b003      	add	sp, #12
 8011f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f2a:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011f2e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011f32:	e7ed      	b.n	8011f10 <__exponent+0x44>
 8011f34:	2330      	movs	r3, #48	@ 0x30
 8011f36:	3130      	adds	r1, #48	@ 0x30
 8011f38:	7083      	strb	r3, [r0, #2]
 8011f3a:	70c1      	strb	r1, [r0, #3]
 8011f3c:	1d03      	adds	r3, r0, #4
 8011f3e:	e7f1      	b.n	8011f24 <__exponent+0x58>

08011f40 <_printf_float>:
 8011f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f44:	b08d      	sub	sp, #52	@ 0x34
 8011f46:	460c      	mov	r4, r1
 8011f48:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011f4c:	4616      	mov	r6, r2
 8011f4e:	461f      	mov	r7, r3
 8011f50:	4605      	mov	r5, r0
 8011f52:	f000 fccb 	bl	80128ec <_localeconv_r>
 8011f56:	f8d0 b000 	ldr.w	fp, [r0]
 8011f5a:	4658      	mov	r0, fp
 8011f5c:	f7ee fa10 	bl	8000380 <strlen>
 8011f60:	2300      	movs	r3, #0
 8011f62:	930a      	str	r3, [sp, #40]	@ 0x28
 8011f64:	f8d8 3000 	ldr.w	r3, [r8]
 8011f68:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011f6c:	6822      	ldr	r2, [r4, #0]
 8011f6e:	9005      	str	r0, [sp, #20]
 8011f70:	3307      	adds	r3, #7
 8011f72:	f023 0307 	bic.w	r3, r3, #7
 8011f76:	f103 0108 	add.w	r1, r3, #8
 8011f7a:	f8c8 1000 	str.w	r1, [r8]
 8011f7e:	ed93 0b00 	vldr	d0, [r3]
 8011f82:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80121e0 <_printf_float+0x2a0>
 8011f86:	eeb0 7bc0 	vabs.f64	d7, d0
 8011f8a:	eeb4 7b46 	vcmp.f64	d7, d6
 8011f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f92:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8011f96:	dd24      	ble.n	8011fe2 <_printf_float+0xa2>
 8011f98:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fa0:	d502      	bpl.n	8011fa8 <_printf_float+0x68>
 8011fa2:	232d      	movs	r3, #45	@ 0x2d
 8011fa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011fa8:	498f      	ldr	r1, [pc, #572]	@ (80121e8 <_printf_float+0x2a8>)
 8011faa:	4b90      	ldr	r3, [pc, #576]	@ (80121ec <_printf_float+0x2ac>)
 8011fac:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8011fb0:	bf94      	ite	ls
 8011fb2:	4688      	movls	r8, r1
 8011fb4:	4698      	movhi	r8, r3
 8011fb6:	f022 0204 	bic.w	r2, r2, #4
 8011fba:	2303      	movs	r3, #3
 8011fbc:	6123      	str	r3, [r4, #16]
 8011fbe:	6022      	str	r2, [r4, #0]
 8011fc0:	f04f 0a00 	mov.w	sl, #0
 8011fc4:	9700      	str	r7, [sp, #0]
 8011fc6:	4633      	mov	r3, r6
 8011fc8:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011fca:	4621      	mov	r1, r4
 8011fcc:	4628      	mov	r0, r5
 8011fce:	f000 f9d1 	bl	8012374 <_printf_common>
 8011fd2:	3001      	adds	r0, #1
 8011fd4:	f040 8089 	bne.w	80120ea <_printf_float+0x1aa>
 8011fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8011fdc:	b00d      	add	sp, #52	@ 0x34
 8011fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fe2:	eeb4 0b40 	vcmp.f64	d0, d0
 8011fe6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011fea:	d709      	bvc.n	8012000 <_printf_float+0xc0>
 8011fec:	ee10 3a90 	vmov	r3, s1
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	bfbc      	itt	lt
 8011ff4:	232d      	movlt	r3, #45	@ 0x2d
 8011ff6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011ffa:	497d      	ldr	r1, [pc, #500]	@ (80121f0 <_printf_float+0x2b0>)
 8011ffc:	4b7d      	ldr	r3, [pc, #500]	@ (80121f4 <_printf_float+0x2b4>)
 8011ffe:	e7d5      	b.n	8011fac <_printf_float+0x6c>
 8012000:	6863      	ldr	r3, [r4, #4]
 8012002:	1c59      	adds	r1, r3, #1
 8012004:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8012008:	d139      	bne.n	801207e <_printf_float+0x13e>
 801200a:	2306      	movs	r3, #6
 801200c:	6063      	str	r3, [r4, #4]
 801200e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8012012:	2300      	movs	r3, #0
 8012014:	6022      	str	r2, [r4, #0]
 8012016:	9303      	str	r3, [sp, #12]
 8012018:	ab0a      	add	r3, sp, #40	@ 0x28
 801201a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801201e:	ab09      	add	r3, sp, #36	@ 0x24
 8012020:	9300      	str	r3, [sp, #0]
 8012022:	6861      	ldr	r1, [r4, #4]
 8012024:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012028:	4628      	mov	r0, r5
 801202a:	f7ff fefb 	bl	8011e24 <__cvt>
 801202e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012032:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012034:	4680      	mov	r8, r0
 8012036:	d129      	bne.n	801208c <_printf_float+0x14c>
 8012038:	1cc8      	adds	r0, r1, #3
 801203a:	db02      	blt.n	8012042 <_printf_float+0x102>
 801203c:	6863      	ldr	r3, [r4, #4]
 801203e:	4299      	cmp	r1, r3
 8012040:	dd41      	ble.n	80120c6 <_printf_float+0x186>
 8012042:	f1a9 0902 	sub.w	r9, r9, #2
 8012046:	fa5f f989 	uxtb.w	r9, r9
 801204a:	3901      	subs	r1, #1
 801204c:	464a      	mov	r2, r9
 801204e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012052:	9109      	str	r1, [sp, #36]	@ 0x24
 8012054:	f7ff ff3a 	bl	8011ecc <__exponent>
 8012058:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801205a:	1813      	adds	r3, r2, r0
 801205c:	2a01      	cmp	r2, #1
 801205e:	4682      	mov	sl, r0
 8012060:	6123      	str	r3, [r4, #16]
 8012062:	dc02      	bgt.n	801206a <_printf_float+0x12a>
 8012064:	6822      	ldr	r2, [r4, #0]
 8012066:	07d2      	lsls	r2, r2, #31
 8012068:	d501      	bpl.n	801206e <_printf_float+0x12e>
 801206a:	3301      	adds	r3, #1
 801206c:	6123      	str	r3, [r4, #16]
 801206e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012072:	2b00      	cmp	r3, #0
 8012074:	d0a6      	beq.n	8011fc4 <_printf_float+0x84>
 8012076:	232d      	movs	r3, #45	@ 0x2d
 8012078:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801207c:	e7a2      	b.n	8011fc4 <_printf_float+0x84>
 801207e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012082:	d1c4      	bne.n	801200e <_printf_float+0xce>
 8012084:	2b00      	cmp	r3, #0
 8012086:	d1c2      	bne.n	801200e <_printf_float+0xce>
 8012088:	2301      	movs	r3, #1
 801208a:	e7bf      	b.n	801200c <_printf_float+0xcc>
 801208c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012090:	d9db      	bls.n	801204a <_printf_float+0x10a>
 8012092:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8012096:	d118      	bne.n	80120ca <_printf_float+0x18a>
 8012098:	2900      	cmp	r1, #0
 801209a:	6863      	ldr	r3, [r4, #4]
 801209c:	dd0b      	ble.n	80120b6 <_printf_float+0x176>
 801209e:	6121      	str	r1, [r4, #16]
 80120a0:	b913      	cbnz	r3, 80120a8 <_printf_float+0x168>
 80120a2:	6822      	ldr	r2, [r4, #0]
 80120a4:	07d0      	lsls	r0, r2, #31
 80120a6:	d502      	bpl.n	80120ae <_printf_float+0x16e>
 80120a8:	3301      	adds	r3, #1
 80120aa:	440b      	add	r3, r1
 80120ac:	6123      	str	r3, [r4, #16]
 80120ae:	65a1      	str	r1, [r4, #88]	@ 0x58
 80120b0:	f04f 0a00 	mov.w	sl, #0
 80120b4:	e7db      	b.n	801206e <_printf_float+0x12e>
 80120b6:	b913      	cbnz	r3, 80120be <_printf_float+0x17e>
 80120b8:	6822      	ldr	r2, [r4, #0]
 80120ba:	07d2      	lsls	r2, r2, #31
 80120bc:	d501      	bpl.n	80120c2 <_printf_float+0x182>
 80120be:	3302      	adds	r3, #2
 80120c0:	e7f4      	b.n	80120ac <_printf_float+0x16c>
 80120c2:	2301      	movs	r3, #1
 80120c4:	e7f2      	b.n	80120ac <_printf_float+0x16c>
 80120c6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80120ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80120cc:	4299      	cmp	r1, r3
 80120ce:	db05      	blt.n	80120dc <_printf_float+0x19c>
 80120d0:	6823      	ldr	r3, [r4, #0]
 80120d2:	6121      	str	r1, [r4, #16]
 80120d4:	07d8      	lsls	r0, r3, #31
 80120d6:	d5ea      	bpl.n	80120ae <_printf_float+0x16e>
 80120d8:	1c4b      	adds	r3, r1, #1
 80120da:	e7e7      	b.n	80120ac <_printf_float+0x16c>
 80120dc:	2900      	cmp	r1, #0
 80120de:	bfd4      	ite	le
 80120e0:	f1c1 0202 	rsble	r2, r1, #2
 80120e4:	2201      	movgt	r2, #1
 80120e6:	4413      	add	r3, r2
 80120e8:	e7e0      	b.n	80120ac <_printf_float+0x16c>
 80120ea:	6823      	ldr	r3, [r4, #0]
 80120ec:	055a      	lsls	r2, r3, #21
 80120ee:	d407      	bmi.n	8012100 <_printf_float+0x1c0>
 80120f0:	6923      	ldr	r3, [r4, #16]
 80120f2:	4642      	mov	r2, r8
 80120f4:	4631      	mov	r1, r6
 80120f6:	4628      	mov	r0, r5
 80120f8:	47b8      	blx	r7
 80120fa:	3001      	adds	r0, #1
 80120fc:	d12a      	bne.n	8012154 <_printf_float+0x214>
 80120fe:	e76b      	b.n	8011fd8 <_printf_float+0x98>
 8012100:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012104:	f240 80e0 	bls.w	80122c8 <_printf_float+0x388>
 8012108:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801210c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012114:	d133      	bne.n	801217e <_printf_float+0x23e>
 8012116:	4a38      	ldr	r2, [pc, #224]	@ (80121f8 <_printf_float+0x2b8>)
 8012118:	2301      	movs	r3, #1
 801211a:	4631      	mov	r1, r6
 801211c:	4628      	mov	r0, r5
 801211e:	47b8      	blx	r7
 8012120:	3001      	adds	r0, #1
 8012122:	f43f af59 	beq.w	8011fd8 <_printf_float+0x98>
 8012126:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801212a:	4543      	cmp	r3, r8
 801212c:	db02      	blt.n	8012134 <_printf_float+0x1f4>
 801212e:	6823      	ldr	r3, [r4, #0]
 8012130:	07d8      	lsls	r0, r3, #31
 8012132:	d50f      	bpl.n	8012154 <_printf_float+0x214>
 8012134:	9b05      	ldr	r3, [sp, #20]
 8012136:	465a      	mov	r2, fp
 8012138:	4631      	mov	r1, r6
 801213a:	4628      	mov	r0, r5
 801213c:	47b8      	blx	r7
 801213e:	3001      	adds	r0, #1
 8012140:	f43f af4a 	beq.w	8011fd8 <_printf_float+0x98>
 8012144:	f04f 0900 	mov.w	r9, #0
 8012148:	f108 38ff 	add.w	r8, r8, #4294967295
 801214c:	f104 0a1a 	add.w	sl, r4, #26
 8012150:	45c8      	cmp	r8, r9
 8012152:	dc09      	bgt.n	8012168 <_printf_float+0x228>
 8012154:	6823      	ldr	r3, [r4, #0]
 8012156:	079b      	lsls	r3, r3, #30
 8012158:	f100 8107 	bmi.w	801236a <_printf_float+0x42a>
 801215c:	68e0      	ldr	r0, [r4, #12]
 801215e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012160:	4298      	cmp	r0, r3
 8012162:	bfb8      	it	lt
 8012164:	4618      	movlt	r0, r3
 8012166:	e739      	b.n	8011fdc <_printf_float+0x9c>
 8012168:	2301      	movs	r3, #1
 801216a:	4652      	mov	r2, sl
 801216c:	4631      	mov	r1, r6
 801216e:	4628      	mov	r0, r5
 8012170:	47b8      	blx	r7
 8012172:	3001      	adds	r0, #1
 8012174:	f43f af30 	beq.w	8011fd8 <_printf_float+0x98>
 8012178:	f109 0901 	add.w	r9, r9, #1
 801217c:	e7e8      	b.n	8012150 <_printf_float+0x210>
 801217e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012180:	2b00      	cmp	r3, #0
 8012182:	dc3b      	bgt.n	80121fc <_printf_float+0x2bc>
 8012184:	4a1c      	ldr	r2, [pc, #112]	@ (80121f8 <_printf_float+0x2b8>)
 8012186:	2301      	movs	r3, #1
 8012188:	4631      	mov	r1, r6
 801218a:	4628      	mov	r0, r5
 801218c:	47b8      	blx	r7
 801218e:	3001      	adds	r0, #1
 8012190:	f43f af22 	beq.w	8011fd8 <_printf_float+0x98>
 8012194:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012198:	ea59 0303 	orrs.w	r3, r9, r3
 801219c:	d102      	bne.n	80121a4 <_printf_float+0x264>
 801219e:	6823      	ldr	r3, [r4, #0]
 80121a0:	07d9      	lsls	r1, r3, #31
 80121a2:	d5d7      	bpl.n	8012154 <_printf_float+0x214>
 80121a4:	9b05      	ldr	r3, [sp, #20]
 80121a6:	465a      	mov	r2, fp
 80121a8:	4631      	mov	r1, r6
 80121aa:	4628      	mov	r0, r5
 80121ac:	47b8      	blx	r7
 80121ae:	3001      	adds	r0, #1
 80121b0:	f43f af12 	beq.w	8011fd8 <_printf_float+0x98>
 80121b4:	f04f 0a00 	mov.w	sl, #0
 80121b8:	f104 0b1a 	add.w	fp, r4, #26
 80121bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121be:	425b      	negs	r3, r3
 80121c0:	4553      	cmp	r3, sl
 80121c2:	dc01      	bgt.n	80121c8 <_printf_float+0x288>
 80121c4:	464b      	mov	r3, r9
 80121c6:	e794      	b.n	80120f2 <_printf_float+0x1b2>
 80121c8:	2301      	movs	r3, #1
 80121ca:	465a      	mov	r2, fp
 80121cc:	4631      	mov	r1, r6
 80121ce:	4628      	mov	r0, r5
 80121d0:	47b8      	blx	r7
 80121d2:	3001      	adds	r0, #1
 80121d4:	f43f af00 	beq.w	8011fd8 <_printf_float+0x98>
 80121d8:	f10a 0a01 	add.w	sl, sl, #1
 80121dc:	e7ee      	b.n	80121bc <_printf_float+0x27c>
 80121de:	bf00      	nop
 80121e0:	ffffffff 	.word	0xffffffff
 80121e4:	7fefffff 	.word	0x7fefffff
 80121e8:	08014abc 	.word	0x08014abc
 80121ec:	08014ac0 	.word	0x08014ac0
 80121f0:	08014ac4 	.word	0x08014ac4
 80121f4:	08014ac8 	.word	0x08014ac8
 80121f8:	08014acc 	.word	0x08014acc
 80121fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80121fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012202:	4553      	cmp	r3, sl
 8012204:	bfa8      	it	ge
 8012206:	4653      	movge	r3, sl
 8012208:	2b00      	cmp	r3, #0
 801220a:	4699      	mov	r9, r3
 801220c:	dc37      	bgt.n	801227e <_printf_float+0x33e>
 801220e:	2300      	movs	r3, #0
 8012210:	9307      	str	r3, [sp, #28]
 8012212:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012216:	f104 021a 	add.w	r2, r4, #26
 801221a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801221c:	9907      	ldr	r1, [sp, #28]
 801221e:	9306      	str	r3, [sp, #24]
 8012220:	eba3 0309 	sub.w	r3, r3, r9
 8012224:	428b      	cmp	r3, r1
 8012226:	dc31      	bgt.n	801228c <_printf_float+0x34c>
 8012228:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801222a:	459a      	cmp	sl, r3
 801222c:	dc3b      	bgt.n	80122a6 <_printf_float+0x366>
 801222e:	6823      	ldr	r3, [r4, #0]
 8012230:	07da      	lsls	r2, r3, #31
 8012232:	d438      	bmi.n	80122a6 <_printf_float+0x366>
 8012234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012236:	ebaa 0903 	sub.w	r9, sl, r3
 801223a:	9b06      	ldr	r3, [sp, #24]
 801223c:	ebaa 0303 	sub.w	r3, sl, r3
 8012240:	4599      	cmp	r9, r3
 8012242:	bfa8      	it	ge
 8012244:	4699      	movge	r9, r3
 8012246:	f1b9 0f00 	cmp.w	r9, #0
 801224a:	dc34      	bgt.n	80122b6 <_printf_float+0x376>
 801224c:	f04f 0800 	mov.w	r8, #0
 8012250:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012254:	f104 0b1a 	add.w	fp, r4, #26
 8012258:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801225a:	ebaa 0303 	sub.w	r3, sl, r3
 801225e:	eba3 0309 	sub.w	r3, r3, r9
 8012262:	4543      	cmp	r3, r8
 8012264:	f77f af76 	ble.w	8012154 <_printf_float+0x214>
 8012268:	2301      	movs	r3, #1
 801226a:	465a      	mov	r2, fp
 801226c:	4631      	mov	r1, r6
 801226e:	4628      	mov	r0, r5
 8012270:	47b8      	blx	r7
 8012272:	3001      	adds	r0, #1
 8012274:	f43f aeb0 	beq.w	8011fd8 <_printf_float+0x98>
 8012278:	f108 0801 	add.w	r8, r8, #1
 801227c:	e7ec      	b.n	8012258 <_printf_float+0x318>
 801227e:	4642      	mov	r2, r8
 8012280:	4631      	mov	r1, r6
 8012282:	4628      	mov	r0, r5
 8012284:	47b8      	blx	r7
 8012286:	3001      	adds	r0, #1
 8012288:	d1c1      	bne.n	801220e <_printf_float+0x2ce>
 801228a:	e6a5      	b.n	8011fd8 <_printf_float+0x98>
 801228c:	2301      	movs	r3, #1
 801228e:	4631      	mov	r1, r6
 8012290:	4628      	mov	r0, r5
 8012292:	9206      	str	r2, [sp, #24]
 8012294:	47b8      	blx	r7
 8012296:	3001      	adds	r0, #1
 8012298:	f43f ae9e 	beq.w	8011fd8 <_printf_float+0x98>
 801229c:	9b07      	ldr	r3, [sp, #28]
 801229e:	9a06      	ldr	r2, [sp, #24]
 80122a0:	3301      	adds	r3, #1
 80122a2:	9307      	str	r3, [sp, #28]
 80122a4:	e7b9      	b.n	801221a <_printf_float+0x2da>
 80122a6:	9b05      	ldr	r3, [sp, #20]
 80122a8:	465a      	mov	r2, fp
 80122aa:	4631      	mov	r1, r6
 80122ac:	4628      	mov	r0, r5
 80122ae:	47b8      	blx	r7
 80122b0:	3001      	adds	r0, #1
 80122b2:	d1bf      	bne.n	8012234 <_printf_float+0x2f4>
 80122b4:	e690      	b.n	8011fd8 <_printf_float+0x98>
 80122b6:	9a06      	ldr	r2, [sp, #24]
 80122b8:	464b      	mov	r3, r9
 80122ba:	4442      	add	r2, r8
 80122bc:	4631      	mov	r1, r6
 80122be:	4628      	mov	r0, r5
 80122c0:	47b8      	blx	r7
 80122c2:	3001      	adds	r0, #1
 80122c4:	d1c2      	bne.n	801224c <_printf_float+0x30c>
 80122c6:	e687      	b.n	8011fd8 <_printf_float+0x98>
 80122c8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80122cc:	f1b9 0f01 	cmp.w	r9, #1
 80122d0:	dc01      	bgt.n	80122d6 <_printf_float+0x396>
 80122d2:	07db      	lsls	r3, r3, #31
 80122d4:	d536      	bpl.n	8012344 <_printf_float+0x404>
 80122d6:	2301      	movs	r3, #1
 80122d8:	4642      	mov	r2, r8
 80122da:	4631      	mov	r1, r6
 80122dc:	4628      	mov	r0, r5
 80122de:	47b8      	blx	r7
 80122e0:	3001      	adds	r0, #1
 80122e2:	f43f ae79 	beq.w	8011fd8 <_printf_float+0x98>
 80122e6:	9b05      	ldr	r3, [sp, #20]
 80122e8:	465a      	mov	r2, fp
 80122ea:	4631      	mov	r1, r6
 80122ec:	4628      	mov	r0, r5
 80122ee:	47b8      	blx	r7
 80122f0:	3001      	adds	r0, #1
 80122f2:	f43f ae71 	beq.w	8011fd8 <_printf_float+0x98>
 80122f6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80122fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80122fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012302:	f109 39ff 	add.w	r9, r9, #4294967295
 8012306:	d018      	beq.n	801233a <_printf_float+0x3fa>
 8012308:	464b      	mov	r3, r9
 801230a:	f108 0201 	add.w	r2, r8, #1
 801230e:	4631      	mov	r1, r6
 8012310:	4628      	mov	r0, r5
 8012312:	47b8      	blx	r7
 8012314:	3001      	adds	r0, #1
 8012316:	d10c      	bne.n	8012332 <_printf_float+0x3f2>
 8012318:	e65e      	b.n	8011fd8 <_printf_float+0x98>
 801231a:	2301      	movs	r3, #1
 801231c:	465a      	mov	r2, fp
 801231e:	4631      	mov	r1, r6
 8012320:	4628      	mov	r0, r5
 8012322:	47b8      	blx	r7
 8012324:	3001      	adds	r0, #1
 8012326:	f43f ae57 	beq.w	8011fd8 <_printf_float+0x98>
 801232a:	f108 0801 	add.w	r8, r8, #1
 801232e:	45c8      	cmp	r8, r9
 8012330:	dbf3      	blt.n	801231a <_printf_float+0x3da>
 8012332:	4653      	mov	r3, sl
 8012334:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012338:	e6dc      	b.n	80120f4 <_printf_float+0x1b4>
 801233a:	f04f 0800 	mov.w	r8, #0
 801233e:	f104 0b1a 	add.w	fp, r4, #26
 8012342:	e7f4      	b.n	801232e <_printf_float+0x3ee>
 8012344:	2301      	movs	r3, #1
 8012346:	4642      	mov	r2, r8
 8012348:	e7e1      	b.n	801230e <_printf_float+0x3ce>
 801234a:	2301      	movs	r3, #1
 801234c:	464a      	mov	r2, r9
 801234e:	4631      	mov	r1, r6
 8012350:	4628      	mov	r0, r5
 8012352:	47b8      	blx	r7
 8012354:	3001      	adds	r0, #1
 8012356:	f43f ae3f 	beq.w	8011fd8 <_printf_float+0x98>
 801235a:	f108 0801 	add.w	r8, r8, #1
 801235e:	68e3      	ldr	r3, [r4, #12]
 8012360:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012362:	1a5b      	subs	r3, r3, r1
 8012364:	4543      	cmp	r3, r8
 8012366:	dcf0      	bgt.n	801234a <_printf_float+0x40a>
 8012368:	e6f8      	b.n	801215c <_printf_float+0x21c>
 801236a:	f04f 0800 	mov.w	r8, #0
 801236e:	f104 0919 	add.w	r9, r4, #25
 8012372:	e7f4      	b.n	801235e <_printf_float+0x41e>

08012374 <_printf_common>:
 8012374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012378:	4616      	mov	r6, r2
 801237a:	4698      	mov	r8, r3
 801237c:	688a      	ldr	r2, [r1, #8]
 801237e:	690b      	ldr	r3, [r1, #16]
 8012380:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012384:	4293      	cmp	r3, r2
 8012386:	bfb8      	it	lt
 8012388:	4613      	movlt	r3, r2
 801238a:	6033      	str	r3, [r6, #0]
 801238c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012390:	4607      	mov	r7, r0
 8012392:	460c      	mov	r4, r1
 8012394:	b10a      	cbz	r2, 801239a <_printf_common+0x26>
 8012396:	3301      	adds	r3, #1
 8012398:	6033      	str	r3, [r6, #0]
 801239a:	6823      	ldr	r3, [r4, #0]
 801239c:	0699      	lsls	r1, r3, #26
 801239e:	bf42      	ittt	mi
 80123a0:	6833      	ldrmi	r3, [r6, #0]
 80123a2:	3302      	addmi	r3, #2
 80123a4:	6033      	strmi	r3, [r6, #0]
 80123a6:	6825      	ldr	r5, [r4, #0]
 80123a8:	f015 0506 	ands.w	r5, r5, #6
 80123ac:	d106      	bne.n	80123bc <_printf_common+0x48>
 80123ae:	f104 0a19 	add.w	sl, r4, #25
 80123b2:	68e3      	ldr	r3, [r4, #12]
 80123b4:	6832      	ldr	r2, [r6, #0]
 80123b6:	1a9b      	subs	r3, r3, r2
 80123b8:	42ab      	cmp	r3, r5
 80123ba:	dc26      	bgt.n	801240a <_printf_common+0x96>
 80123bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80123c0:	6822      	ldr	r2, [r4, #0]
 80123c2:	3b00      	subs	r3, #0
 80123c4:	bf18      	it	ne
 80123c6:	2301      	movne	r3, #1
 80123c8:	0692      	lsls	r2, r2, #26
 80123ca:	d42b      	bmi.n	8012424 <_printf_common+0xb0>
 80123cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80123d0:	4641      	mov	r1, r8
 80123d2:	4638      	mov	r0, r7
 80123d4:	47c8      	blx	r9
 80123d6:	3001      	adds	r0, #1
 80123d8:	d01e      	beq.n	8012418 <_printf_common+0xa4>
 80123da:	6823      	ldr	r3, [r4, #0]
 80123dc:	6922      	ldr	r2, [r4, #16]
 80123de:	f003 0306 	and.w	r3, r3, #6
 80123e2:	2b04      	cmp	r3, #4
 80123e4:	bf02      	ittt	eq
 80123e6:	68e5      	ldreq	r5, [r4, #12]
 80123e8:	6833      	ldreq	r3, [r6, #0]
 80123ea:	1aed      	subeq	r5, r5, r3
 80123ec:	68a3      	ldr	r3, [r4, #8]
 80123ee:	bf0c      	ite	eq
 80123f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80123f4:	2500      	movne	r5, #0
 80123f6:	4293      	cmp	r3, r2
 80123f8:	bfc4      	itt	gt
 80123fa:	1a9b      	subgt	r3, r3, r2
 80123fc:	18ed      	addgt	r5, r5, r3
 80123fe:	2600      	movs	r6, #0
 8012400:	341a      	adds	r4, #26
 8012402:	42b5      	cmp	r5, r6
 8012404:	d11a      	bne.n	801243c <_printf_common+0xc8>
 8012406:	2000      	movs	r0, #0
 8012408:	e008      	b.n	801241c <_printf_common+0xa8>
 801240a:	2301      	movs	r3, #1
 801240c:	4652      	mov	r2, sl
 801240e:	4641      	mov	r1, r8
 8012410:	4638      	mov	r0, r7
 8012412:	47c8      	blx	r9
 8012414:	3001      	adds	r0, #1
 8012416:	d103      	bne.n	8012420 <_printf_common+0xac>
 8012418:	f04f 30ff 	mov.w	r0, #4294967295
 801241c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012420:	3501      	adds	r5, #1
 8012422:	e7c6      	b.n	80123b2 <_printf_common+0x3e>
 8012424:	18e1      	adds	r1, r4, r3
 8012426:	1c5a      	adds	r2, r3, #1
 8012428:	2030      	movs	r0, #48	@ 0x30
 801242a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801242e:	4422      	add	r2, r4
 8012430:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012434:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012438:	3302      	adds	r3, #2
 801243a:	e7c7      	b.n	80123cc <_printf_common+0x58>
 801243c:	2301      	movs	r3, #1
 801243e:	4622      	mov	r2, r4
 8012440:	4641      	mov	r1, r8
 8012442:	4638      	mov	r0, r7
 8012444:	47c8      	blx	r9
 8012446:	3001      	adds	r0, #1
 8012448:	d0e6      	beq.n	8012418 <_printf_common+0xa4>
 801244a:	3601      	adds	r6, #1
 801244c:	e7d9      	b.n	8012402 <_printf_common+0x8e>
	...

08012450 <_printf_i>:
 8012450:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012454:	7e0f      	ldrb	r7, [r1, #24]
 8012456:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012458:	2f78      	cmp	r7, #120	@ 0x78
 801245a:	4691      	mov	r9, r2
 801245c:	4680      	mov	r8, r0
 801245e:	460c      	mov	r4, r1
 8012460:	469a      	mov	sl, r3
 8012462:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012466:	d807      	bhi.n	8012478 <_printf_i+0x28>
 8012468:	2f62      	cmp	r7, #98	@ 0x62
 801246a:	d80a      	bhi.n	8012482 <_printf_i+0x32>
 801246c:	2f00      	cmp	r7, #0
 801246e:	f000 80d2 	beq.w	8012616 <_printf_i+0x1c6>
 8012472:	2f58      	cmp	r7, #88	@ 0x58
 8012474:	f000 80b9 	beq.w	80125ea <_printf_i+0x19a>
 8012478:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801247c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012480:	e03a      	b.n	80124f8 <_printf_i+0xa8>
 8012482:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012486:	2b15      	cmp	r3, #21
 8012488:	d8f6      	bhi.n	8012478 <_printf_i+0x28>
 801248a:	a101      	add	r1, pc, #4	@ (adr r1, 8012490 <_printf_i+0x40>)
 801248c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012490:	080124e9 	.word	0x080124e9
 8012494:	080124fd 	.word	0x080124fd
 8012498:	08012479 	.word	0x08012479
 801249c:	08012479 	.word	0x08012479
 80124a0:	08012479 	.word	0x08012479
 80124a4:	08012479 	.word	0x08012479
 80124a8:	080124fd 	.word	0x080124fd
 80124ac:	08012479 	.word	0x08012479
 80124b0:	08012479 	.word	0x08012479
 80124b4:	08012479 	.word	0x08012479
 80124b8:	08012479 	.word	0x08012479
 80124bc:	080125fd 	.word	0x080125fd
 80124c0:	08012527 	.word	0x08012527
 80124c4:	080125b7 	.word	0x080125b7
 80124c8:	08012479 	.word	0x08012479
 80124cc:	08012479 	.word	0x08012479
 80124d0:	0801261f 	.word	0x0801261f
 80124d4:	08012479 	.word	0x08012479
 80124d8:	08012527 	.word	0x08012527
 80124dc:	08012479 	.word	0x08012479
 80124e0:	08012479 	.word	0x08012479
 80124e4:	080125bf 	.word	0x080125bf
 80124e8:	6833      	ldr	r3, [r6, #0]
 80124ea:	1d1a      	adds	r2, r3, #4
 80124ec:	681b      	ldr	r3, [r3, #0]
 80124ee:	6032      	str	r2, [r6, #0]
 80124f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80124f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80124f8:	2301      	movs	r3, #1
 80124fa:	e09d      	b.n	8012638 <_printf_i+0x1e8>
 80124fc:	6833      	ldr	r3, [r6, #0]
 80124fe:	6820      	ldr	r0, [r4, #0]
 8012500:	1d19      	adds	r1, r3, #4
 8012502:	6031      	str	r1, [r6, #0]
 8012504:	0606      	lsls	r6, r0, #24
 8012506:	d501      	bpl.n	801250c <_printf_i+0xbc>
 8012508:	681d      	ldr	r5, [r3, #0]
 801250a:	e003      	b.n	8012514 <_printf_i+0xc4>
 801250c:	0645      	lsls	r5, r0, #25
 801250e:	d5fb      	bpl.n	8012508 <_printf_i+0xb8>
 8012510:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012514:	2d00      	cmp	r5, #0
 8012516:	da03      	bge.n	8012520 <_printf_i+0xd0>
 8012518:	232d      	movs	r3, #45	@ 0x2d
 801251a:	426d      	negs	r5, r5
 801251c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012520:	4859      	ldr	r0, [pc, #356]	@ (8012688 <_printf_i+0x238>)
 8012522:	230a      	movs	r3, #10
 8012524:	e011      	b.n	801254a <_printf_i+0xfa>
 8012526:	6821      	ldr	r1, [r4, #0]
 8012528:	6833      	ldr	r3, [r6, #0]
 801252a:	0608      	lsls	r0, r1, #24
 801252c:	f853 5b04 	ldr.w	r5, [r3], #4
 8012530:	d402      	bmi.n	8012538 <_printf_i+0xe8>
 8012532:	0649      	lsls	r1, r1, #25
 8012534:	bf48      	it	mi
 8012536:	b2ad      	uxthmi	r5, r5
 8012538:	2f6f      	cmp	r7, #111	@ 0x6f
 801253a:	4853      	ldr	r0, [pc, #332]	@ (8012688 <_printf_i+0x238>)
 801253c:	6033      	str	r3, [r6, #0]
 801253e:	bf14      	ite	ne
 8012540:	230a      	movne	r3, #10
 8012542:	2308      	moveq	r3, #8
 8012544:	2100      	movs	r1, #0
 8012546:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801254a:	6866      	ldr	r6, [r4, #4]
 801254c:	60a6      	str	r6, [r4, #8]
 801254e:	2e00      	cmp	r6, #0
 8012550:	bfa2      	ittt	ge
 8012552:	6821      	ldrge	r1, [r4, #0]
 8012554:	f021 0104 	bicge.w	r1, r1, #4
 8012558:	6021      	strge	r1, [r4, #0]
 801255a:	b90d      	cbnz	r5, 8012560 <_printf_i+0x110>
 801255c:	2e00      	cmp	r6, #0
 801255e:	d04b      	beq.n	80125f8 <_printf_i+0x1a8>
 8012560:	4616      	mov	r6, r2
 8012562:	fbb5 f1f3 	udiv	r1, r5, r3
 8012566:	fb03 5711 	mls	r7, r3, r1, r5
 801256a:	5dc7      	ldrb	r7, [r0, r7]
 801256c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012570:	462f      	mov	r7, r5
 8012572:	42bb      	cmp	r3, r7
 8012574:	460d      	mov	r5, r1
 8012576:	d9f4      	bls.n	8012562 <_printf_i+0x112>
 8012578:	2b08      	cmp	r3, #8
 801257a:	d10b      	bne.n	8012594 <_printf_i+0x144>
 801257c:	6823      	ldr	r3, [r4, #0]
 801257e:	07df      	lsls	r7, r3, #31
 8012580:	d508      	bpl.n	8012594 <_printf_i+0x144>
 8012582:	6923      	ldr	r3, [r4, #16]
 8012584:	6861      	ldr	r1, [r4, #4]
 8012586:	4299      	cmp	r1, r3
 8012588:	bfde      	ittt	le
 801258a:	2330      	movle	r3, #48	@ 0x30
 801258c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012590:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012594:	1b92      	subs	r2, r2, r6
 8012596:	6122      	str	r2, [r4, #16]
 8012598:	f8cd a000 	str.w	sl, [sp]
 801259c:	464b      	mov	r3, r9
 801259e:	aa03      	add	r2, sp, #12
 80125a0:	4621      	mov	r1, r4
 80125a2:	4640      	mov	r0, r8
 80125a4:	f7ff fee6 	bl	8012374 <_printf_common>
 80125a8:	3001      	adds	r0, #1
 80125aa:	d14a      	bne.n	8012642 <_printf_i+0x1f2>
 80125ac:	f04f 30ff 	mov.w	r0, #4294967295
 80125b0:	b004      	add	sp, #16
 80125b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125b6:	6823      	ldr	r3, [r4, #0]
 80125b8:	f043 0320 	orr.w	r3, r3, #32
 80125bc:	6023      	str	r3, [r4, #0]
 80125be:	4833      	ldr	r0, [pc, #204]	@ (801268c <_printf_i+0x23c>)
 80125c0:	2778      	movs	r7, #120	@ 0x78
 80125c2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80125c6:	6823      	ldr	r3, [r4, #0]
 80125c8:	6831      	ldr	r1, [r6, #0]
 80125ca:	061f      	lsls	r7, r3, #24
 80125cc:	f851 5b04 	ldr.w	r5, [r1], #4
 80125d0:	d402      	bmi.n	80125d8 <_printf_i+0x188>
 80125d2:	065f      	lsls	r7, r3, #25
 80125d4:	bf48      	it	mi
 80125d6:	b2ad      	uxthmi	r5, r5
 80125d8:	6031      	str	r1, [r6, #0]
 80125da:	07d9      	lsls	r1, r3, #31
 80125dc:	bf44      	itt	mi
 80125de:	f043 0320 	orrmi.w	r3, r3, #32
 80125e2:	6023      	strmi	r3, [r4, #0]
 80125e4:	b11d      	cbz	r5, 80125ee <_printf_i+0x19e>
 80125e6:	2310      	movs	r3, #16
 80125e8:	e7ac      	b.n	8012544 <_printf_i+0xf4>
 80125ea:	4827      	ldr	r0, [pc, #156]	@ (8012688 <_printf_i+0x238>)
 80125ec:	e7e9      	b.n	80125c2 <_printf_i+0x172>
 80125ee:	6823      	ldr	r3, [r4, #0]
 80125f0:	f023 0320 	bic.w	r3, r3, #32
 80125f4:	6023      	str	r3, [r4, #0]
 80125f6:	e7f6      	b.n	80125e6 <_printf_i+0x196>
 80125f8:	4616      	mov	r6, r2
 80125fa:	e7bd      	b.n	8012578 <_printf_i+0x128>
 80125fc:	6833      	ldr	r3, [r6, #0]
 80125fe:	6825      	ldr	r5, [r4, #0]
 8012600:	6961      	ldr	r1, [r4, #20]
 8012602:	1d18      	adds	r0, r3, #4
 8012604:	6030      	str	r0, [r6, #0]
 8012606:	062e      	lsls	r6, r5, #24
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	d501      	bpl.n	8012610 <_printf_i+0x1c0>
 801260c:	6019      	str	r1, [r3, #0]
 801260e:	e002      	b.n	8012616 <_printf_i+0x1c6>
 8012610:	0668      	lsls	r0, r5, #25
 8012612:	d5fb      	bpl.n	801260c <_printf_i+0x1bc>
 8012614:	8019      	strh	r1, [r3, #0]
 8012616:	2300      	movs	r3, #0
 8012618:	6123      	str	r3, [r4, #16]
 801261a:	4616      	mov	r6, r2
 801261c:	e7bc      	b.n	8012598 <_printf_i+0x148>
 801261e:	6833      	ldr	r3, [r6, #0]
 8012620:	1d1a      	adds	r2, r3, #4
 8012622:	6032      	str	r2, [r6, #0]
 8012624:	681e      	ldr	r6, [r3, #0]
 8012626:	6862      	ldr	r2, [r4, #4]
 8012628:	2100      	movs	r1, #0
 801262a:	4630      	mov	r0, r6
 801262c:	f7ed fe58 	bl	80002e0 <memchr>
 8012630:	b108      	cbz	r0, 8012636 <_printf_i+0x1e6>
 8012632:	1b80      	subs	r0, r0, r6
 8012634:	6060      	str	r0, [r4, #4]
 8012636:	6863      	ldr	r3, [r4, #4]
 8012638:	6123      	str	r3, [r4, #16]
 801263a:	2300      	movs	r3, #0
 801263c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012640:	e7aa      	b.n	8012598 <_printf_i+0x148>
 8012642:	6923      	ldr	r3, [r4, #16]
 8012644:	4632      	mov	r2, r6
 8012646:	4649      	mov	r1, r9
 8012648:	4640      	mov	r0, r8
 801264a:	47d0      	blx	sl
 801264c:	3001      	adds	r0, #1
 801264e:	d0ad      	beq.n	80125ac <_printf_i+0x15c>
 8012650:	6823      	ldr	r3, [r4, #0]
 8012652:	079b      	lsls	r3, r3, #30
 8012654:	d413      	bmi.n	801267e <_printf_i+0x22e>
 8012656:	68e0      	ldr	r0, [r4, #12]
 8012658:	9b03      	ldr	r3, [sp, #12]
 801265a:	4298      	cmp	r0, r3
 801265c:	bfb8      	it	lt
 801265e:	4618      	movlt	r0, r3
 8012660:	e7a6      	b.n	80125b0 <_printf_i+0x160>
 8012662:	2301      	movs	r3, #1
 8012664:	4632      	mov	r2, r6
 8012666:	4649      	mov	r1, r9
 8012668:	4640      	mov	r0, r8
 801266a:	47d0      	blx	sl
 801266c:	3001      	adds	r0, #1
 801266e:	d09d      	beq.n	80125ac <_printf_i+0x15c>
 8012670:	3501      	adds	r5, #1
 8012672:	68e3      	ldr	r3, [r4, #12]
 8012674:	9903      	ldr	r1, [sp, #12]
 8012676:	1a5b      	subs	r3, r3, r1
 8012678:	42ab      	cmp	r3, r5
 801267a:	dcf2      	bgt.n	8012662 <_printf_i+0x212>
 801267c:	e7eb      	b.n	8012656 <_printf_i+0x206>
 801267e:	2500      	movs	r5, #0
 8012680:	f104 0619 	add.w	r6, r4, #25
 8012684:	e7f5      	b.n	8012672 <_printf_i+0x222>
 8012686:	bf00      	nop
 8012688:	08014ace 	.word	0x08014ace
 801268c:	08014adf 	.word	0x08014adf

08012690 <std>:
 8012690:	2300      	movs	r3, #0
 8012692:	b510      	push	{r4, lr}
 8012694:	4604      	mov	r4, r0
 8012696:	e9c0 3300 	strd	r3, r3, [r0]
 801269a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801269e:	6083      	str	r3, [r0, #8]
 80126a0:	8181      	strh	r1, [r0, #12]
 80126a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80126a4:	81c2      	strh	r2, [r0, #14]
 80126a6:	6183      	str	r3, [r0, #24]
 80126a8:	4619      	mov	r1, r3
 80126aa:	2208      	movs	r2, #8
 80126ac:	305c      	adds	r0, #92	@ 0x5c
 80126ae:	f000 f914 	bl	80128da <memset>
 80126b2:	4b0d      	ldr	r3, [pc, #52]	@ (80126e8 <std+0x58>)
 80126b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80126b6:	4b0d      	ldr	r3, [pc, #52]	@ (80126ec <std+0x5c>)
 80126b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80126ba:	4b0d      	ldr	r3, [pc, #52]	@ (80126f0 <std+0x60>)
 80126bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80126be:	4b0d      	ldr	r3, [pc, #52]	@ (80126f4 <std+0x64>)
 80126c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80126c2:	4b0d      	ldr	r3, [pc, #52]	@ (80126f8 <std+0x68>)
 80126c4:	6224      	str	r4, [r4, #32]
 80126c6:	429c      	cmp	r4, r3
 80126c8:	d006      	beq.n	80126d8 <std+0x48>
 80126ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80126ce:	4294      	cmp	r4, r2
 80126d0:	d002      	beq.n	80126d8 <std+0x48>
 80126d2:	33d0      	adds	r3, #208	@ 0xd0
 80126d4:	429c      	cmp	r4, r3
 80126d6:	d105      	bne.n	80126e4 <std+0x54>
 80126d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80126dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126e0:	f000 b978 	b.w	80129d4 <__retarget_lock_init_recursive>
 80126e4:	bd10      	pop	{r4, pc}
 80126e6:	bf00      	nop
 80126e8:	08012855 	.word	0x08012855
 80126ec:	08012877 	.word	0x08012877
 80126f0:	080128af 	.word	0x080128af
 80126f4:	080128d3 	.word	0x080128d3
 80126f8:	24002644 	.word	0x24002644

080126fc <stdio_exit_handler>:
 80126fc:	4a02      	ldr	r2, [pc, #8]	@ (8012708 <stdio_exit_handler+0xc>)
 80126fe:	4903      	ldr	r1, [pc, #12]	@ (801270c <stdio_exit_handler+0x10>)
 8012700:	4803      	ldr	r0, [pc, #12]	@ (8012710 <stdio_exit_handler+0x14>)
 8012702:	f000 b869 	b.w	80127d8 <_fwalk_sglue>
 8012706:	bf00      	nop
 8012708:	2400012c 	.word	0x2400012c
 801270c:	08014259 	.word	0x08014259
 8012710:	2400013c 	.word	0x2400013c

08012714 <cleanup_stdio>:
 8012714:	6841      	ldr	r1, [r0, #4]
 8012716:	4b0c      	ldr	r3, [pc, #48]	@ (8012748 <cleanup_stdio+0x34>)
 8012718:	4299      	cmp	r1, r3
 801271a:	b510      	push	{r4, lr}
 801271c:	4604      	mov	r4, r0
 801271e:	d001      	beq.n	8012724 <cleanup_stdio+0x10>
 8012720:	f001 fd9a 	bl	8014258 <_fflush_r>
 8012724:	68a1      	ldr	r1, [r4, #8]
 8012726:	4b09      	ldr	r3, [pc, #36]	@ (801274c <cleanup_stdio+0x38>)
 8012728:	4299      	cmp	r1, r3
 801272a:	d002      	beq.n	8012732 <cleanup_stdio+0x1e>
 801272c:	4620      	mov	r0, r4
 801272e:	f001 fd93 	bl	8014258 <_fflush_r>
 8012732:	68e1      	ldr	r1, [r4, #12]
 8012734:	4b06      	ldr	r3, [pc, #24]	@ (8012750 <cleanup_stdio+0x3c>)
 8012736:	4299      	cmp	r1, r3
 8012738:	d004      	beq.n	8012744 <cleanup_stdio+0x30>
 801273a:	4620      	mov	r0, r4
 801273c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012740:	f001 bd8a 	b.w	8014258 <_fflush_r>
 8012744:	bd10      	pop	{r4, pc}
 8012746:	bf00      	nop
 8012748:	24002644 	.word	0x24002644
 801274c:	240026ac 	.word	0x240026ac
 8012750:	24002714 	.word	0x24002714

08012754 <global_stdio_init.part.0>:
 8012754:	b510      	push	{r4, lr}
 8012756:	4b0b      	ldr	r3, [pc, #44]	@ (8012784 <global_stdio_init.part.0+0x30>)
 8012758:	4c0b      	ldr	r4, [pc, #44]	@ (8012788 <global_stdio_init.part.0+0x34>)
 801275a:	4a0c      	ldr	r2, [pc, #48]	@ (801278c <global_stdio_init.part.0+0x38>)
 801275c:	601a      	str	r2, [r3, #0]
 801275e:	4620      	mov	r0, r4
 8012760:	2200      	movs	r2, #0
 8012762:	2104      	movs	r1, #4
 8012764:	f7ff ff94 	bl	8012690 <std>
 8012768:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801276c:	2201      	movs	r2, #1
 801276e:	2109      	movs	r1, #9
 8012770:	f7ff ff8e 	bl	8012690 <std>
 8012774:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012778:	2202      	movs	r2, #2
 801277a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801277e:	2112      	movs	r1, #18
 8012780:	f7ff bf86 	b.w	8012690 <std>
 8012784:	2400277c 	.word	0x2400277c
 8012788:	24002644 	.word	0x24002644
 801278c:	080126fd 	.word	0x080126fd

08012790 <__sfp_lock_acquire>:
 8012790:	4801      	ldr	r0, [pc, #4]	@ (8012798 <__sfp_lock_acquire+0x8>)
 8012792:	f000 b920 	b.w	80129d6 <__retarget_lock_acquire_recursive>
 8012796:	bf00      	nop
 8012798:	24002785 	.word	0x24002785

0801279c <__sfp_lock_release>:
 801279c:	4801      	ldr	r0, [pc, #4]	@ (80127a4 <__sfp_lock_release+0x8>)
 801279e:	f000 b91b 	b.w	80129d8 <__retarget_lock_release_recursive>
 80127a2:	bf00      	nop
 80127a4:	24002785 	.word	0x24002785

080127a8 <__sinit>:
 80127a8:	b510      	push	{r4, lr}
 80127aa:	4604      	mov	r4, r0
 80127ac:	f7ff fff0 	bl	8012790 <__sfp_lock_acquire>
 80127b0:	6a23      	ldr	r3, [r4, #32]
 80127b2:	b11b      	cbz	r3, 80127bc <__sinit+0x14>
 80127b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80127b8:	f7ff bff0 	b.w	801279c <__sfp_lock_release>
 80127bc:	4b04      	ldr	r3, [pc, #16]	@ (80127d0 <__sinit+0x28>)
 80127be:	6223      	str	r3, [r4, #32]
 80127c0:	4b04      	ldr	r3, [pc, #16]	@ (80127d4 <__sinit+0x2c>)
 80127c2:	681b      	ldr	r3, [r3, #0]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d1f5      	bne.n	80127b4 <__sinit+0xc>
 80127c8:	f7ff ffc4 	bl	8012754 <global_stdio_init.part.0>
 80127cc:	e7f2      	b.n	80127b4 <__sinit+0xc>
 80127ce:	bf00      	nop
 80127d0:	08012715 	.word	0x08012715
 80127d4:	2400277c 	.word	0x2400277c

080127d8 <_fwalk_sglue>:
 80127d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80127dc:	4607      	mov	r7, r0
 80127de:	4688      	mov	r8, r1
 80127e0:	4614      	mov	r4, r2
 80127e2:	2600      	movs	r6, #0
 80127e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80127e8:	f1b9 0901 	subs.w	r9, r9, #1
 80127ec:	d505      	bpl.n	80127fa <_fwalk_sglue+0x22>
 80127ee:	6824      	ldr	r4, [r4, #0]
 80127f0:	2c00      	cmp	r4, #0
 80127f2:	d1f7      	bne.n	80127e4 <_fwalk_sglue+0xc>
 80127f4:	4630      	mov	r0, r6
 80127f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80127fa:	89ab      	ldrh	r3, [r5, #12]
 80127fc:	2b01      	cmp	r3, #1
 80127fe:	d907      	bls.n	8012810 <_fwalk_sglue+0x38>
 8012800:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012804:	3301      	adds	r3, #1
 8012806:	d003      	beq.n	8012810 <_fwalk_sglue+0x38>
 8012808:	4629      	mov	r1, r5
 801280a:	4638      	mov	r0, r7
 801280c:	47c0      	blx	r8
 801280e:	4306      	orrs	r6, r0
 8012810:	3568      	adds	r5, #104	@ 0x68
 8012812:	e7e9      	b.n	80127e8 <_fwalk_sglue+0x10>

08012814 <siprintf>:
 8012814:	b40e      	push	{r1, r2, r3}
 8012816:	b500      	push	{lr}
 8012818:	b09c      	sub	sp, #112	@ 0x70
 801281a:	ab1d      	add	r3, sp, #116	@ 0x74
 801281c:	9002      	str	r0, [sp, #8]
 801281e:	9006      	str	r0, [sp, #24]
 8012820:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8012824:	4809      	ldr	r0, [pc, #36]	@ (801284c <siprintf+0x38>)
 8012826:	9107      	str	r1, [sp, #28]
 8012828:	9104      	str	r1, [sp, #16]
 801282a:	4909      	ldr	r1, [pc, #36]	@ (8012850 <siprintf+0x3c>)
 801282c:	f853 2b04 	ldr.w	r2, [r3], #4
 8012830:	9105      	str	r1, [sp, #20]
 8012832:	6800      	ldr	r0, [r0, #0]
 8012834:	9301      	str	r3, [sp, #4]
 8012836:	a902      	add	r1, sp, #8
 8012838:	f001 fb8e 	bl	8013f58 <_svfiprintf_r>
 801283c:	9b02      	ldr	r3, [sp, #8]
 801283e:	2200      	movs	r2, #0
 8012840:	701a      	strb	r2, [r3, #0]
 8012842:	b01c      	add	sp, #112	@ 0x70
 8012844:	f85d eb04 	ldr.w	lr, [sp], #4
 8012848:	b003      	add	sp, #12
 801284a:	4770      	bx	lr
 801284c:	24000138 	.word	0x24000138
 8012850:	ffff0208 	.word	0xffff0208

08012854 <__sread>:
 8012854:	b510      	push	{r4, lr}
 8012856:	460c      	mov	r4, r1
 8012858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801285c:	f000 f86c 	bl	8012938 <_read_r>
 8012860:	2800      	cmp	r0, #0
 8012862:	bfab      	itete	ge
 8012864:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012866:	89a3      	ldrhlt	r3, [r4, #12]
 8012868:	181b      	addge	r3, r3, r0
 801286a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801286e:	bfac      	ite	ge
 8012870:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012872:	81a3      	strhlt	r3, [r4, #12]
 8012874:	bd10      	pop	{r4, pc}

08012876 <__swrite>:
 8012876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801287a:	461f      	mov	r7, r3
 801287c:	898b      	ldrh	r3, [r1, #12]
 801287e:	05db      	lsls	r3, r3, #23
 8012880:	4605      	mov	r5, r0
 8012882:	460c      	mov	r4, r1
 8012884:	4616      	mov	r6, r2
 8012886:	d505      	bpl.n	8012894 <__swrite+0x1e>
 8012888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801288c:	2302      	movs	r3, #2
 801288e:	2200      	movs	r2, #0
 8012890:	f000 f840 	bl	8012914 <_lseek_r>
 8012894:	89a3      	ldrh	r3, [r4, #12]
 8012896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801289a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801289e:	81a3      	strh	r3, [r4, #12]
 80128a0:	4632      	mov	r2, r6
 80128a2:	463b      	mov	r3, r7
 80128a4:	4628      	mov	r0, r5
 80128a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80128aa:	f000 b857 	b.w	801295c <_write_r>

080128ae <__sseek>:
 80128ae:	b510      	push	{r4, lr}
 80128b0:	460c      	mov	r4, r1
 80128b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128b6:	f000 f82d 	bl	8012914 <_lseek_r>
 80128ba:	1c43      	adds	r3, r0, #1
 80128bc:	89a3      	ldrh	r3, [r4, #12]
 80128be:	bf15      	itete	ne
 80128c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80128c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80128c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80128ca:	81a3      	strheq	r3, [r4, #12]
 80128cc:	bf18      	it	ne
 80128ce:	81a3      	strhne	r3, [r4, #12]
 80128d0:	bd10      	pop	{r4, pc}

080128d2 <__sclose>:
 80128d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80128d6:	f000 b80d 	b.w	80128f4 <_close_r>

080128da <memset>:
 80128da:	4402      	add	r2, r0
 80128dc:	4603      	mov	r3, r0
 80128de:	4293      	cmp	r3, r2
 80128e0:	d100      	bne.n	80128e4 <memset+0xa>
 80128e2:	4770      	bx	lr
 80128e4:	f803 1b01 	strb.w	r1, [r3], #1
 80128e8:	e7f9      	b.n	80128de <memset+0x4>
	...

080128ec <_localeconv_r>:
 80128ec:	4800      	ldr	r0, [pc, #0]	@ (80128f0 <_localeconv_r+0x4>)
 80128ee:	4770      	bx	lr
 80128f0:	24000278 	.word	0x24000278

080128f4 <_close_r>:
 80128f4:	b538      	push	{r3, r4, r5, lr}
 80128f6:	4d06      	ldr	r5, [pc, #24]	@ (8012910 <_close_r+0x1c>)
 80128f8:	2300      	movs	r3, #0
 80128fa:	4604      	mov	r4, r0
 80128fc:	4608      	mov	r0, r1
 80128fe:	602b      	str	r3, [r5, #0]
 8012900:	f7ef f84e 	bl	80019a0 <_close>
 8012904:	1c43      	adds	r3, r0, #1
 8012906:	d102      	bne.n	801290e <_close_r+0x1a>
 8012908:	682b      	ldr	r3, [r5, #0]
 801290a:	b103      	cbz	r3, 801290e <_close_r+0x1a>
 801290c:	6023      	str	r3, [r4, #0]
 801290e:	bd38      	pop	{r3, r4, r5, pc}
 8012910:	24002780 	.word	0x24002780

08012914 <_lseek_r>:
 8012914:	b538      	push	{r3, r4, r5, lr}
 8012916:	4d07      	ldr	r5, [pc, #28]	@ (8012934 <_lseek_r+0x20>)
 8012918:	4604      	mov	r4, r0
 801291a:	4608      	mov	r0, r1
 801291c:	4611      	mov	r1, r2
 801291e:	2200      	movs	r2, #0
 8012920:	602a      	str	r2, [r5, #0]
 8012922:	461a      	mov	r2, r3
 8012924:	f7ef f863 	bl	80019ee <_lseek>
 8012928:	1c43      	adds	r3, r0, #1
 801292a:	d102      	bne.n	8012932 <_lseek_r+0x1e>
 801292c:	682b      	ldr	r3, [r5, #0]
 801292e:	b103      	cbz	r3, 8012932 <_lseek_r+0x1e>
 8012930:	6023      	str	r3, [r4, #0]
 8012932:	bd38      	pop	{r3, r4, r5, pc}
 8012934:	24002780 	.word	0x24002780

08012938 <_read_r>:
 8012938:	b538      	push	{r3, r4, r5, lr}
 801293a:	4d07      	ldr	r5, [pc, #28]	@ (8012958 <_read_r+0x20>)
 801293c:	4604      	mov	r4, r0
 801293e:	4608      	mov	r0, r1
 8012940:	4611      	mov	r1, r2
 8012942:	2200      	movs	r2, #0
 8012944:	602a      	str	r2, [r5, #0]
 8012946:	461a      	mov	r2, r3
 8012948:	f7ee fff1 	bl	800192e <_read>
 801294c:	1c43      	adds	r3, r0, #1
 801294e:	d102      	bne.n	8012956 <_read_r+0x1e>
 8012950:	682b      	ldr	r3, [r5, #0]
 8012952:	b103      	cbz	r3, 8012956 <_read_r+0x1e>
 8012954:	6023      	str	r3, [r4, #0]
 8012956:	bd38      	pop	{r3, r4, r5, pc}
 8012958:	24002780 	.word	0x24002780

0801295c <_write_r>:
 801295c:	b538      	push	{r3, r4, r5, lr}
 801295e:	4d07      	ldr	r5, [pc, #28]	@ (801297c <_write_r+0x20>)
 8012960:	4604      	mov	r4, r0
 8012962:	4608      	mov	r0, r1
 8012964:	4611      	mov	r1, r2
 8012966:	2200      	movs	r2, #0
 8012968:	602a      	str	r2, [r5, #0]
 801296a:	461a      	mov	r2, r3
 801296c:	f7ee fffc 	bl	8001968 <_write>
 8012970:	1c43      	adds	r3, r0, #1
 8012972:	d102      	bne.n	801297a <_write_r+0x1e>
 8012974:	682b      	ldr	r3, [r5, #0]
 8012976:	b103      	cbz	r3, 801297a <_write_r+0x1e>
 8012978:	6023      	str	r3, [r4, #0]
 801297a:	bd38      	pop	{r3, r4, r5, pc}
 801297c:	24002780 	.word	0x24002780

08012980 <__errno>:
 8012980:	4b01      	ldr	r3, [pc, #4]	@ (8012988 <__errno+0x8>)
 8012982:	6818      	ldr	r0, [r3, #0]
 8012984:	4770      	bx	lr
 8012986:	bf00      	nop
 8012988:	24000138 	.word	0x24000138

0801298c <__libc_init_array>:
 801298c:	b570      	push	{r4, r5, r6, lr}
 801298e:	4d0d      	ldr	r5, [pc, #52]	@ (80129c4 <__libc_init_array+0x38>)
 8012990:	4c0d      	ldr	r4, [pc, #52]	@ (80129c8 <__libc_init_array+0x3c>)
 8012992:	1b64      	subs	r4, r4, r5
 8012994:	10a4      	asrs	r4, r4, #2
 8012996:	2600      	movs	r6, #0
 8012998:	42a6      	cmp	r6, r4
 801299a:	d109      	bne.n	80129b0 <__libc_init_array+0x24>
 801299c:	4d0b      	ldr	r5, [pc, #44]	@ (80129cc <__libc_init_array+0x40>)
 801299e:	4c0c      	ldr	r4, [pc, #48]	@ (80129d0 <__libc_init_array+0x44>)
 80129a0:	f002 f838 	bl	8014a14 <_init>
 80129a4:	1b64      	subs	r4, r4, r5
 80129a6:	10a4      	asrs	r4, r4, #2
 80129a8:	2600      	movs	r6, #0
 80129aa:	42a6      	cmp	r6, r4
 80129ac:	d105      	bne.n	80129ba <__libc_init_array+0x2e>
 80129ae:	bd70      	pop	{r4, r5, r6, pc}
 80129b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80129b4:	4798      	blx	r3
 80129b6:	3601      	adds	r6, #1
 80129b8:	e7ee      	b.n	8012998 <__libc_init_array+0xc>
 80129ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80129be:	4798      	blx	r3
 80129c0:	3601      	adds	r6, #1
 80129c2:	e7f2      	b.n	80129aa <__libc_init_array+0x1e>
 80129c4:	08014e40 	.word	0x08014e40
 80129c8:	08014e40 	.word	0x08014e40
 80129cc:	08014e40 	.word	0x08014e40
 80129d0:	08014e44 	.word	0x08014e44

080129d4 <__retarget_lock_init_recursive>:
 80129d4:	4770      	bx	lr

080129d6 <__retarget_lock_acquire_recursive>:
 80129d6:	4770      	bx	lr

080129d8 <__retarget_lock_release_recursive>:
 80129d8:	4770      	bx	lr

080129da <quorem>:
 80129da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80129de:	6903      	ldr	r3, [r0, #16]
 80129e0:	690c      	ldr	r4, [r1, #16]
 80129e2:	42a3      	cmp	r3, r4
 80129e4:	4607      	mov	r7, r0
 80129e6:	db7e      	blt.n	8012ae6 <quorem+0x10c>
 80129e8:	3c01      	subs	r4, #1
 80129ea:	f101 0814 	add.w	r8, r1, #20
 80129ee:	00a3      	lsls	r3, r4, #2
 80129f0:	f100 0514 	add.w	r5, r0, #20
 80129f4:	9300      	str	r3, [sp, #0]
 80129f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80129fa:	9301      	str	r3, [sp, #4]
 80129fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012a00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012a04:	3301      	adds	r3, #1
 8012a06:	429a      	cmp	r2, r3
 8012a08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012a0c:	fbb2 f6f3 	udiv	r6, r2, r3
 8012a10:	d32e      	bcc.n	8012a70 <quorem+0x96>
 8012a12:	f04f 0a00 	mov.w	sl, #0
 8012a16:	46c4      	mov	ip, r8
 8012a18:	46ae      	mov	lr, r5
 8012a1a:	46d3      	mov	fp, sl
 8012a1c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012a20:	b298      	uxth	r0, r3
 8012a22:	fb06 a000 	mla	r0, r6, r0, sl
 8012a26:	0c02      	lsrs	r2, r0, #16
 8012a28:	0c1b      	lsrs	r3, r3, #16
 8012a2a:	fb06 2303 	mla	r3, r6, r3, r2
 8012a2e:	f8de 2000 	ldr.w	r2, [lr]
 8012a32:	b280      	uxth	r0, r0
 8012a34:	b292      	uxth	r2, r2
 8012a36:	1a12      	subs	r2, r2, r0
 8012a38:	445a      	add	r2, fp
 8012a3a:	f8de 0000 	ldr.w	r0, [lr]
 8012a3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012a42:	b29b      	uxth	r3, r3
 8012a44:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012a48:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012a4c:	b292      	uxth	r2, r2
 8012a4e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012a52:	45e1      	cmp	r9, ip
 8012a54:	f84e 2b04 	str.w	r2, [lr], #4
 8012a58:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012a5c:	d2de      	bcs.n	8012a1c <quorem+0x42>
 8012a5e:	9b00      	ldr	r3, [sp, #0]
 8012a60:	58eb      	ldr	r3, [r5, r3]
 8012a62:	b92b      	cbnz	r3, 8012a70 <quorem+0x96>
 8012a64:	9b01      	ldr	r3, [sp, #4]
 8012a66:	3b04      	subs	r3, #4
 8012a68:	429d      	cmp	r5, r3
 8012a6a:	461a      	mov	r2, r3
 8012a6c:	d32f      	bcc.n	8012ace <quorem+0xf4>
 8012a6e:	613c      	str	r4, [r7, #16]
 8012a70:	4638      	mov	r0, r7
 8012a72:	f001 f90d 	bl	8013c90 <__mcmp>
 8012a76:	2800      	cmp	r0, #0
 8012a78:	db25      	blt.n	8012ac6 <quorem+0xec>
 8012a7a:	4629      	mov	r1, r5
 8012a7c:	2000      	movs	r0, #0
 8012a7e:	f858 2b04 	ldr.w	r2, [r8], #4
 8012a82:	f8d1 c000 	ldr.w	ip, [r1]
 8012a86:	fa1f fe82 	uxth.w	lr, r2
 8012a8a:	fa1f f38c 	uxth.w	r3, ip
 8012a8e:	eba3 030e 	sub.w	r3, r3, lr
 8012a92:	4403      	add	r3, r0
 8012a94:	0c12      	lsrs	r2, r2, #16
 8012a96:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012a9a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012a9e:	b29b      	uxth	r3, r3
 8012aa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012aa4:	45c1      	cmp	r9, r8
 8012aa6:	f841 3b04 	str.w	r3, [r1], #4
 8012aaa:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012aae:	d2e6      	bcs.n	8012a7e <quorem+0xa4>
 8012ab0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012ab4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012ab8:	b922      	cbnz	r2, 8012ac4 <quorem+0xea>
 8012aba:	3b04      	subs	r3, #4
 8012abc:	429d      	cmp	r5, r3
 8012abe:	461a      	mov	r2, r3
 8012ac0:	d30b      	bcc.n	8012ada <quorem+0x100>
 8012ac2:	613c      	str	r4, [r7, #16]
 8012ac4:	3601      	adds	r6, #1
 8012ac6:	4630      	mov	r0, r6
 8012ac8:	b003      	add	sp, #12
 8012aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ace:	6812      	ldr	r2, [r2, #0]
 8012ad0:	3b04      	subs	r3, #4
 8012ad2:	2a00      	cmp	r2, #0
 8012ad4:	d1cb      	bne.n	8012a6e <quorem+0x94>
 8012ad6:	3c01      	subs	r4, #1
 8012ad8:	e7c6      	b.n	8012a68 <quorem+0x8e>
 8012ada:	6812      	ldr	r2, [r2, #0]
 8012adc:	3b04      	subs	r3, #4
 8012ade:	2a00      	cmp	r2, #0
 8012ae0:	d1ef      	bne.n	8012ac2 <quorem+0xe8>
 8012ae2:	3c01      	subs	r4, #1
 8012ae4:	e7ea      	b.n	8012abc <quorem+0xe2>
 8012ae6:	2000      	movs	r0, #0
 8012ae8:	e7ee      	b.n	8012ac8 <quorem+0xee>
 8012aea:	0000      	movs	r0, r0
 8012aec:	0000      	movs	r0, r0
	...

08012af0 <_dtoa_r>:
 8012af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012af4:	ed2d 8b02 	vpush	{d8}
 8012af8:	69c7      	ldr	r7, [r0, #28]
 8012afa:	b091      	sub	sp, #68	@ 0x44
 8012afc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012b00:	ec55 4b10 	vmov	r4, r5, d0
 8012b04:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8012b06:	9107      	str	r1, [sp, #28]
 8012b08:	4681      	mov	r9, r0
 8012b0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8012b0c:	930d      	str	r3, [sp, #52]	@ 0x34
 8012b0e:	b97f      	cbnz	r7, 8012b30 <_dtoa_r+0x40>
 8012b10:	2010      	movs	r0, #16
 8012b12:	f000 fd8d 	bl	8013630 <malloc>
 8012b16:	4602      	mov	r2, r0
 8012b18:	f8c9 001c 	str.w	r0, [r9, #28]
 8012b1c:	b920      	cbnz	r0, 8012b28 <_dtoa_r+0x38>
 8012b1e:	4ba0      	ldr	r3, [pc, #640]	@ (8012da0 <_dtoa_r+0x2b0>)
 8012b20:	21ef      	movs	r1, #239	@ 0xef
 8012b22:	48a0      	ldr	r0, [pc, #640]	@ (8012da4 <_dtoa_r+0x2b4>)
 8012b24:	f001 fbf8 	bl	8014318 <__assert_func>
 8012b28:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012b2c:	6007      	str	r7, [r0, #0]
 8012b2e:	60c7      	str	r7, [r0, #12]
 8012b30:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012b34:	6819      	ldr	r1, [r3, #0]
 8012b36:	b159      	cbz	r1, 8012b50 <_dtoa_r+0x60>
 8012b38:	685a      	ldr	r2, [r3, #4]
 8012b3a:	604a      	str	r2, [r1, #4]
 8012b3c:	2301      	movs	r3, #1
 8012b3e:	4093      	lsls	r3, r2
 8012b40:	608b      	str	r3, [r1, #8]
 8012b42:	4648      	mov	r0, r9
 8012b44:	f000 fe6a 	bl	801381c <_Bfree>
 8012b48:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012b4c:	2200      	movs	r2, #0
 8012b4e:	601a      	str	r2, [r3, #0]
 8012b50:	1e2b      	subs	r3, r5, #0
 8012b52:	bfbb      	ittet	lt
 8012b54:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012b58:	9303      	strlt	r3, [sp, #12]
 8012b5a:	2300      	movge	r3, #0
 8012b5c:	2201      	movlt	r2, #1
 8012b5e:	bfac      	ite	ge
 8012b60:	6033      	strge	r3, [r6, #0]
 8012b62:	6032      	strlt	r2, [r6, #0]
 8012b64:	4b90      	ldr	r3, [pc, #576]	@ (8012da8 <_dtoa_r+0x2b8>)
 8012b66:	9e03      	ldr	r6, [sp, #12]
 8012b68:	43b3      	bics	r3, r6
 8012b6a:	d110      	bne.n	8012b8e <_dtoa_r+0x9e>
 8012b6c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012b6e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012b72:	6013      	str	r3, [r2, #0]
 8012b74:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8012b78:	4323      	orrs	r3, r4
 8012b7a:	f000 84de 	beq.w	801353a <_dtoa_r+0xa4a>
 8012b7e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012b80:	4f8a      	ldr	r7, [pc, #552]	@ (8012dac <_dtoa_r+0x2bc>)
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	f000 84e0 	beq.w	8013548 <_dtoa_r+0xa58>
 8012b88:	1cfb      	adds	r3, r7, #3
 8012b8a:	f000 bcdb 	b.w	8013544 <_dtoa_r+0xa54>
 8012b8e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8012b92:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b9a:	d10a      	bne.n	8012bb2 <_dtoa_r+0xc2>
 8012b9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012b9e:	2301      	movs	r3, #1
 8012ba0:	6013      	str	r3, [r2, #0]
 8012ba2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012ba4:	b113      	cbz	r3, 8012bac <_dtoa_r+0xbc>
 8012ba6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012ba8:	4b81      	ldr	r3, [pc, #516]	@ (8012db0 <_dtoa_r+0x2c0>)
 8012baa:	6013      	str	r3, [r2, #0]
 8012bac:	4f81      	ldr	r7, [pc, #516]	@ (8012db4 <_dtoa_r+0x2c4>)
 8012bae:	f000 bccb 	b.w	8013548 <_dtoa_r+0xa58>
 8012bb2:	aa0e      	add	r2, sp, #56	@ 0x38
 8012bb4:	a90f      	add	r1, sp, #60	@ 0x3c
 8012bb6:	4648      	mov	r0, r9
 8012bb8:	eeb0 0b48 	vmov.f64	d0, d8
 8012bbc:	f001 f918 	bl	8013df0 <__d2b>
 8012bc0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8012bc4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012bc6:	9001      	str	r0, [sp, #4]
 8012bc8:	2b00      	cmp	r3, #0
 8012bca:	d045      	beq.n	8012c58 <_dtoa_r+0x168>
 8012bcc:	eeb0 7b48 	vmov.f64	d7, d8
 8012bd0:	ee18 1a90 	vmov	r1, s17
 8012bd4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012bd8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8012bdc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8012be0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8012be4:	2500      	movs	r5, #0
 8012be6:	ee07 1a90 	vmov	s15, r1
 8012bea:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8012bee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012d88 <_dtoa_r+0x298>
 8012bf2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012bf6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8012d90 <_dtoa_r+0x2a0>
 8012bfa:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012bfe:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012d98 <_dtoa_r+0x2a8>
 8012c02:	ee07 3a90 	vmov	s15, r3
 8012c06:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8012c0a:	eeb0 7b46 	vmov.f64	d7, d6
 8012c0e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8012c12:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012c16:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c1e:	ee16 8a90 	vmov	r8, s13
 8012c22:	d508      	bpl.n	8012c36 <_dtoa_r+0x146>
 8012c24:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012c28:	eeb4 6b47 	vcmp.f64	d6, d7
 8012c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c30:	bf18      	it	ne
 8012c32:	f108 38ff 	addne.w	r8, r8, #4294967295
 8012c36:	f1b8 0f16 	cmp.w	r8, #22
 8012c3a:	d82b      	bhi.n	8012c94 <_dtoa_r+0x1a4>
 8012c3c:	495e      	ldr	r1, [pc, #376]	@ (8012db8 <_dtoa_r+0x2c8>)
 8012c3e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8012c42:	ed91 7b00 	vldr	d7, [r1]
 8012c46:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012c4e:	d501      	bpl.n	8012c54 <_dtoa_r+0x164>
 8012c50:	f108 38ff 	add.w	r8, r8, #4294967295
 8012c54:	2100      	movs	r1, #0
 8012c56:	e01e      	b.n	8012c96 <_dtoa_r+0x1a6>
 8012c58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012c5a:	4413      	add	r3, r2
 8012c5c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8012c60:	2920      	cmp	r1, #32
 8012c62:	bfc1      	itttt	gt
 8012c64:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8012c68:	408e      	lslgt	r6, r1
 8012c6a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8012c6e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8012c72:	bfd6      	itet	le
 8012c74:	f1c1 0120 	rsble	r1, r1, #32
 8012c78:	4331      	orrgt	r1, r6
 8012c7a:	fa04 f101 	lslle.w	r1, r4, r1
 8012c7e:	ee07 1a90 	vmov	s15, r1
 8012c82:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012c86:	3b01      	subs	r3, #1
 8012c88:	ee17 1a90 	vmov	r1, s15
 8012c8c:	2501      	movs	r5, #1
 8012c8e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8012c92:	e7a8      	b.n	8012be6 <_dtoa_r+0xf6>
 8012c94:	2101      	movs	r1, #1
 8012c96:	1ad2      	subs	r2, r2, r3
 8012c98:	1e53      	subs	r3, r2, #1
 8012c9a:	9306      	str	r3, [sp, #24]
 8012c9c:	bf45      	ittet	mi
 8012c9e:	f1c2 0301 	rsbmi	r3, r2, #1
 8012ca2:	9305      	strmi	r3, [sp, #20]
 8012ca4:	2300      	movpl	r3, #0
 8012ca6:	2300      	movmi	r3, #0
 8012ca8:	bf4c      	ite	mi
 8012caa:	9306      	strmi	r3, [sp, #24]
 8012cac:	9305      	strpl	r3, [sp, #20]
 8012cae:	f1b8 0f00 	cmp.w	r8, #0
 8012cb2:	910c      	str	r1, [sp, #48]	@ 0x30
 8012cb4:	db18      	blt.n	8012ce8 <_dtoa_r+0x1f8>
 8012cb6:	9b06      	ldr	r3, [sp, #24]
 8012cb8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8012cbc:	4443      	add	r3, r8
 8012cbe:	9306      	str	r3, [sp, #24]
 8012cc0:	2300      	movs	r3, #0
 8012cc2:	9a07      	ldr	r2, [sp, #28]
 8012cc4:	2a09      	cmp	r2, #9
 8012cc6:	d849      	bhi.n	8012d5c <_dtoa_r+0x26c>
 8012cc8:	2a05      	cmp	r2, #5
 8012cca:	bfc4      	itt	gt
 8012ccc:	3a04      	subgt	r2, #4
 8012cce:	9207      	strgt	r2, [sp, #28]
 8012cd0:	9a07      	ldr	r2, [sp, #28]
 8012cd2:	f1a2 0202 	sub.w	r2, r2, #2
 8012cd6:	bfcc      	ite	gt
 8012cd8:	2400      	movgt	r4, #0
 8012cda:	2401      	movle	r4, #1
 8012cdc:	2a03      	cmp	r2, #3
 8012cde:	d848      	bhi.n	8012d72 <_dtoa_r+0x282>
 8012ce0:	e8df f002 	tbb	[pc, r2]
 8012ce4:	3a2c2e0b 	.word	0x3a2c2e0b
 8012ce8:	9b05      	ldr	r3, [sp, #20]
 8012cea:	2200      	movs	r2, #0
 8012cec:	eba3 0308 	sub.w	r3, r3, r8
 8012cf0:	9305      	str	r3, [sp, #20]
 8012cf2:	920a      	str	r2, [sp, #40]	@ 0x28
 8012cf4:	f1c8 0300 	rsb	r3, r8, #0
 8012cf8:	e7e3      	b.n	8012cc2 <_dtoa_r+0x1d2>
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	9208      	str	r2, [sp, #32]
 8012cfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012d00:	2a00      	cmp	r2, #0
 8012d02:	dc39      	bgt.n	8012d78 <_dtoa_r+0x288>
 8012d04:	f04f 0b01 	mov.w	fp, #1
 8012d08:	46da      	mov	sl, fp
 8012d0a:	465a      	mov	r2, fp
 8012d0c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8012d10:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8012d14:	2100      	movs	r1, #0
 8012d16:	2004      	movs	r0, #4
 8012d18:	f100 0614 	add.w	r6, r0, #20
 8012d1c:	4296      	cmp	r6, r2
 8012d1e:	d930      	bls.n	8012d82 <_dtoa_r+0x292>
 8012d20:	6079      	str	r1, [r7, #4]
 8012d22:	4648      	mov	r0, r9
 8012d24:	9304      	str	r3, [sp, #16]
 8012d26:	f000 fd39 	bl	801379c <_Balloc>
 8012d2a:	9b04      	ldr	r3, [sp, #16]
 8012d2c:	4607      	mov	r7, r0
 8012d2e:	2800      	cmp	r0, #0
 8012d30:	d146      	bne.n	8012dc0 <_dtoa_r+0x2d0>
 8012d32:	4b22      	ldr	r3, [pc, #136]	@ (8012dbc <_dtoa_r+0x2cc>)
 8012d34:	4602      	mov	r2, r0
 8012d36:	f240 11af 	movw	r1, #431	@ 0x1af
 8012d3a:	e6f2      	b.n	8012b22 <_dtoa_r+0x32>
 8012d3c:	2201      	movs	r2, #1
 8012d3e:	e7dd      	b.n	8012cfc <_dtoa_r+0x20c>
 8012d40:	2200      	movs	r2, #0
 8012d42:	9208      	str	r2, [sp, #32]
 8012d44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012d46:	eb08 0b02 	add.w	fp, r8, r2
 8012d4a:	f10b 0a01 	add.w	sl, fp, #1
 8012d4e:	4652      	mov	r2, sl
 8012d50:	2a01      	cmp	r2, #1
 8012d52:	bfb8      	it	lt
 8012d54:	2201      	movlt	r2, #1
 8012d56:	e7db      	b.n	8012d10 <_dtoa_r+0x220>
 8012d58:	2201      	movs	r2, #1
 8012d5a:	e7f2      	b.n	8012d42 <_dtoa_r+0x252>
 8012d5c:	2401      	movs	r4, #1
 8012d5e:	2200      	movs	r2, #0
 8012d60:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8012d64:	f04f 3bff 	mov.w	fp, #4294967295
 8012d68:	2100      	movs	r1, #0
 8012d6a:	46da      	mov	sl, fp
 8012d6c:	2212      	movs	r2, #18
 8012d6e:	9109      	str	r1, [sp, #36]	@ 0x24
 8012d70:	e7ce      	b.n	8012d10 <_dtoa_r+0x220>
 8012d72:	2201      	movs	r2, #1
 8012d74:	9208      	str	r2, [sp, #32]
 8012d76:	e7f5      	b.n	8012d64 <_dtoa_r+0x274>
 8012d78:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8012d7c:	46da      	mov	sl, fp
 8012d7e:	465a      	mov	r2, fp
 8012d80:	e7c6      	b.n	8012d10 <_dtoa_r+0x220>
 8012d82:	3101      	adds	r1, #1
 8012d84:	0040      	lsls	r0, r0, #1
 8012d86:	e7c7      	b.n	8012d18 <_dtoa_r+0x228>
 8012d88:	636f4361 	.word	0x636f4361
 8012d8c:	3fd287a7 	.word	0x3fd287a7
 8012d90:	8b60c8b3 	.word	0x8b60c8b3
 8012d94:	3fc68a28 	.word	0x3fc68a28
 8012d98:	509f79fb 	.word	0x509f79fb
 8012d9c:	3fd34413 	.word	0x3fd34413
 8012da0:	08014afd 	.word	0x08014afd
 8012da4:	08014b14 	.word	0x08014b14
 8012da8:	7ff00000 	.word	0x7ff00000
 8012dac:	08014af9 	.word	0x08014af9
 8012db0:	08014acd 	.word	0x08014acd
 8012db4:	08014acc 	.word	0x08014acc
 8012db8:	08014c10 	.word	0x08014c10
 8012dbc:	08014b6c 	.word	0x08014b6c
 8012dc0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8012dc4:	f1ba 0f0e 	cmp.w	sl, #14
 8012dc8:	6010      	str	r0, [r2, #0]
 8012dca:	d86f      	bhi.n	8012eac <_dtoa_r+0x3bc>
 8012dcc:	2c00      	cmp	r4, #0
 8012dce:	d06d      	beq.n	8012eac <_dtoa_r+0x3bc>
 8012dd0:	f1b8 0f00 	cmp.w	r8, #0
 8012dd4:	f340 80c2 	ble.w	8012f5c <_dtoa_r+0x46c>
 8012dd8:	4aca      	ldr	r2, [pc, #808]	@ (8013104 <_dtoa_r+0x614>)
 8012dda:	f008 010f 	and.w	r1, r8, #15
 8012dde:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012de2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8012de6:	ed92 7b00 	vldr	d7, [r2]
 8012dea:	ea4f 1128 	mov.w	r1, r8, asr #4
 8012dee:	f000 80a9 	beq.w	8012f44 <_dtoa_r+0x454>
 8012df2:	4ac5      	ldr	r2, [pc, #788]	@ (8013108 <_dtoa_r+0x618>)
 8012df4:	ed92 6b08 	vldr	d6, [r2, #32]
 8012df8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8012dfc:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012e00:	f001 010f 	and.w	r1, r1, #15
 8012e04:	2203      	movs	r2, #3
 8012e06:	48c0      	ldr	r0, [pc, #768]	@ (8013108 <_dtoa_r+0x618>)
 8012e08:	2900      	cmp	r1, #0
 8012e0a:	f040 809d 	bne.w	8012f48 <_dtoa_r+0x458>
 8012e0e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012e12:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012e16:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012e1a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012e1c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012e20:	2900      	cmp	r1, #0
 8012e22:	f000 80c1 	beq.w	8012fa8 <_dtoa_r+0x4b8>
 8012e26:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8012e2a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e32:	f140 80b9 	bpl.w	8012fa8 <_dtoa_r+0x4b8>
 8012e36:	f1ba 0f00 	cmp.w	sl, #0
 8012e3a:	f000 80b5 	beq.w	8012fa8 <_dtoa_r+0x4b8>
 8012e3e:	f1bb 0f00 	cmp.w	fp, #0
 8012e42:	dd31      	ble.n	8012ea8 <_dtoa_r+0x3b8>
 8012e44:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8012e48:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012e4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012e50:	f108 31ff 	add.w	r1, r8, #4294967295
 8012e54:	9104      	str	r1, [sp, #16]
 8012e56:	3201      	adds	r2, #1
 8012e58:	465c      	mov	r4, fp
 8012e5a:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012e5e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8012e62:	ee07 2a90 	vmov	s15, r2
 8012e66:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012e6a:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012e6e:	ee15 2a90 	vmov	r2, s11
 8012e72:	ec51 0b15 	vmov	r0, r1, d5
 8012e76:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8012e7a:	2c00      	cmp	r4, #0
 8012e7c:	f040 8098 	bne.w	8012fb0 <_dtoa_r+0x4c0>
 8012e80:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8012e84:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012e88:	ec41 0b17 	vmov	d7, r0, r1
 8012e8c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012e90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e94:	f300 8261 	bgt.w	801335a <_dtoa_r+0x86a>
 8012e98:	eeb1 7b47 	vneg.f64	d7, d7
 8012e9c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012ea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ea4:	f100 80f5 	bmi.w	8013092 <_dtoa_r+0x5a2>
 8012ea8:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012eac:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012eae:	2a00      	cmp	r2, #0
 8012eb0:	f2c0 812c 	blt.w	801310c <_dtoa_r+0x61c>
 8012eb4:	f1b8 0f0e 	cmp.w	r8, #14
 8012eb8:	f300 8128 	bgt.w	801310c <_dtoa_r+0x61c>
 8012ebc:	4b91      	ldr	r3, [pc, #580]	@ (8013104 <_dtoa_r+0x614>)
 8012ebe:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012ec2:	ed93 6b00 	vldr	d6, [r3]
 8012ec6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	da03      	bge.n	8012ed4 <_dtoa_r+0x3e4>
 8012ecc:	f1ba 0f00 	cmp.w	sl, #0
 8012ed0:	f340 80d2 	ble.w	8013078 <_dtoa_r+0x588>
 8012ed4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8012ed8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012edc:	463e      	mov	r6, r7
 8012ede:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012ee2:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012ee6:	ee15 3a10 	vmov	r3, s10
 8012eea:	3330      	adds	r3, #48	@ 0x30
 8012eec:	f806 3b01 	strb.w	r3, [r6], #1
 8012ef0:	1bf3      	subs	r3, r6, r7
 8012ef2:	459a      	cmp	sl, r3
 8012ef4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012ef8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012efc:	f040 80f8 	bne.w	80130f0 <_dtoa_r+0x600>
 8012f00:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012f04:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012f08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f0c:	f300 80dd 	bgt.w	80130ca <_dtoa_r+0x5da>
 8012f10:	eeb4 7b46 	vcmp.f64	d7, d6
 8012f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f18:	d104      	bne.n	8012f24 <_dtoa_r+0x434>
 8012f1a:	ee15 3a10 	vmov	r3, s10
 8012f1e:	07db      	lsls	r3, r3, #31
 8012f20:	f100 80d3 	bmi.w	80130ca <_dtoa_r+0x5da>
 8012f24:	9901      	ldr	r1, [sp, #4]
 8012f26:	4648      	mov	r0, r9
 8012f28:	f000 fc78 	bl	801381c <_Bfree>
 8012f2c:	2300      	movs	r3, #0
 8012f2e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012f30:	7033      	strb	r3, [r6, #0]
 8012f32:	f108 0301 	add.w	r3, r8, #1
 8012f36:	6013      	str	r3, [r2, #0]
 8012f38:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012f3a:	2b00      	cmp	r3, #0
 8012f3c:	f000 8304 	beq.w	8013548 <_dtoa_r+0xa58>
 8012f40:	601e      	str	r6, [r3, #0]
 8012f42:	e301      	b.n	8013548 <_dtoa_r+0xa58>
 8012f44:	2202      	movs	r2, #2
 8012f46:	e75e      	b.n	8012e06 <_dtoa_r+0x316>
 8012f48:	07cc      	lsls	r4, r1, #31
 8012f4a:	d504      	bpl.n	8012f56 <_dtoa_r+0x466>
 8012f4c:	ed90 6b00 	vldr	d6, [r0]
 8012f50:	3201      	adds	r2, #1
 8012f52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012f56:	1049      	asrs	r1, r1, #1
 8012f58:	3008      	adds	r0, #8
 8012f5a:	e755      	b.n	8012e08 <_dtoa_r+0x318>
 8012f5c:	d022      	beq.n	8012fa4 <_dtoa_r+0x4b4>
 8012f5e:	f1c8 0100 	rsb	r1, r8, #0
 8012f62:	4a68      	ldr	r2, [pc, #416]	@ (8013104 <_dtoa_r+0x614>)
 8012f64:	f001 000f 	and.w	r0, r1, #15
 8012f68:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012f6c:	ed92 7b00 	vldr	d7, [r2]
 8012f70:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012f74:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012f78:	4863      	ldr	r0, [pc, #396]	@ (8013108 <_dtoa_r+0x618>)
 8012f7a:	1109      	asrs	r1, r1, #4
 8012f7c:	2400      	movs	r4, #0
 8012f7e:	2202      	movs	r2, #2
 8012f80:	b929      	cbnz	r1, 8012f8e <_dtoa_r+0x49e>
 8012f82:	2c00      	cmp	r4, #0
 8012f84:	f43f af49 	beq.w	8012e1a <_dtoa_r+0x32a>
 8012f88:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012f8c:	e745      	b.n	8012e1a <_dtoa_r+0x32a>
 8012f8e:	07ce      	lsls	r6, r1, #31
 8012f90:	d505      	bpl.n	8012f9e <_dtoa_r+0x4ae>
 8012f92:	ed90 6b00 	vldr	d6, [r0]
 8012f96:	3201      	adds	r2, #1
 8012f98:	2401      	movs	r4, #1
 8012f9a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012f9e:	1049      	asrs	r1, r1, #1
 8012fa0:	3008      	adds	r0, #8
 8012fa2:	e7ed      	b.n	8012f80 <_dtoa_r+0x490>
 8012fa4:	2202      	movs	r2, #2
 8012fa6:	e738      	b.n	8012e1a <_dtoa_r+0x32a>
 8012fa8:	f8cd 8010 	str.w	r8, [sp, #16]
 8012fac:	4654      	mov	r4, sl
 8012fae:	e754      	b.n	8012e5a <_dtoa_r+0x36a>
 8012fb0:	4a54      	ldr	r2, [pc, #336]	@ (8013104 <_dtoa_r+0x614>)
 8012fb2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8012fb6:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012fba:	9a08      	ldr	r2, [sp, #32]
 8012fbc:	ec41 0b17 	vmov	d7, r0, r1
 8012fc0:	443c      	add	r4, r7
 8012fc2:	b34a      	cbz	r2, 8013018 <_dtoa_r+0x528>
 8012fc4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8012fc8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8012fcc:	463e      	mov	r6, r7
 8012fce:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012fd2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012fd6:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012fda:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012fde:	ee14 2a90 	vmov	r2, s9
 8012fe2:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012fe6:	3230      	adds	r2, #48	@ 0x30
 8012fe8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012fec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ff4:	f806 2b01 	strb.w	r2, [r6], #1
 8012ff8:	d438      	bmi.n	801306c <_dtoa_r+0x57c>
 8012ffa:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012ffe:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8013002:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013006:	d462      	bmi.n	80130ce <_dtoa_r+0x5de>
 8013008:	42a6      	cmp	r6, r4
 801300a:	f43f af4d 	beq.w	8012ea8 <_dtoa_r+0x3b8>
 801300e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8013012:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013016:	e7e0      	b.n	8012fda <_dtoa_r+0x4ea>
 8013018:	4621      	mov	r1, r4
 801301a:	463e      	mov	r6, r7
 801301c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013020:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8013024:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013028:	ee14 2a90 	vmov	r2, s9
 801302c:	3230      	adds	r2, #48	@ 0x30
 801302e:	f806 2b01 	strb.w	r2, [r6], #1
 8013032:	42a6      	cmp	r6, r4
 8013034:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013038:	ee36 6b45 	vsub.f64	d6, d6, d5
 801303c:	d119      	bne.n	8013072 <_dtoa_r+0x582>
 801303e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8013042:	ee37 4b05 	vadd.f64	d4, d7, d5
 8013046:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801304a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801304e:	dc3e      	bgt.n	80130ce <_dtoa_r+0x5de>
 8013050:	ee35 5b47 	vsub.f64	d5, d5, d7
 8013054:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8013058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801305c:	f57f af24 	bpl.w	8012ea8 <_dtoa_r+0x3b8>
 8013060:	460e      	mov	r6, r1
 8013062:	3901      	subs	r1, #1
 8013064:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8013068:	2b30      	cmp	r3, #48	@ 0x30
 801306a:	d0f9      	beq.n	8013060 <_dtoa_r+0x570>
 801306c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013070:	e758      	b.n	8012f24 <_dtoa_r+0x434>
 8013072:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013076:	e7d5      	b.n	8013024 <_dtoa_r+0x534>
 8013078:	d10b      	bne.n	8013092 <_dtoa_r+0x5a2>
 801307a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801307e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013082:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013086:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801308a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801308e:	f2c0 8161 	blt.w	8013354 <_dtoa_r+0x864>
 8013092:	2400      	movs	r4, #0
 8013094:	4625      	mov	r5, r4
 8013096:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013098:	43db      	mvns	r3, r3
 801309a:	9304      	str	r3, [sp, #16]
 801309c:	463e      	mov	r6, r7
 801309e:	f04f 0800 	mov.w	r8, #0
 80130a2:	4621      	mov	r1, r4
 80130a4:	4648      	mov	r0, r9
 80130a6:	f000 fbb9 	bl	801381c <_Bfree>
 80130aa:	2d00      	cmp	r5, #0
 80130ac:	d0de      	beq.n	801306c <_dtoa_r+0x57c>
 80130ae:	f1b8 0f00 	cmp.w	r8, #0
 80130b2:	d005      	beq.n	80130c0 <_dtoa_r+0x5d0>
 80130b4:	45a8      	cmp	r8, r5
 80130b6:	d003      	beq.n	80130c0 <_dtoa_r+0x5d0>
 80130b8:	4641      	mov	r1, r8
 80130ba:	4648      	mov	r0, r9
 80130bc:	f000 fbae 	bl	801381c <_Bfree>
 80130c0:	4629      	mov	r1, r5
 80130c2:	4648      	mov	r0, r9
 80130c4:	f000 fbaa 	bl	801381c <_Bfree>
 80130c8:	e7d0      	b.n	801306c <_dtoa_r+0x57c>
 80130ca:	f8cd 8010 	str.w	r8, [sp, #16]
 80130ce:	4633      	mov	r3, r6
 80130d0:	461e      	mov	r6, r3
 80130d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80130d6:	2a39      	cmp	r2, #57	@ 0x39
 80130d8:	d106      	bne.n	80130e8 <_dtoa_r+0x5f8>
 80130da:	429f      	cmp	r7, r3
 80130dc:	d1f8      	bne.n	80130d0 <_dtoa_r+0x5e0>
 80130de:	9a04      	ldr	r2, [sp, #16]
 80130e0:	3201      	adds	r2, #1
 80130e2:	9204      	str	r2, [sp, #16]
 80130e4:	2230      	movs	r2, #48	@ 0x30
 80130e6:	703a      	strb	r2, [r7, #0]
 80130e8:	781a      	ldrb	r2, [r3, #0]
 80130ea:	3201      	adds	r2, #1
 80130ec:	701a      	strb	r2, [r3, #0]
 80130ee:	e7bd      	b.n	801306c <_dtoa_r+0x57c>
 80130f0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80130f4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80130f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80130fc:	f47f aeef 	bne.w	8012ede <_dtoa_r+0x3ee>
 8013100:	e710      	b.n	8012f24 <_dtoa_r+0x434>
 8013102:	bf00      	nop
 8013104:	08014c10 	.word	0x08014c10
 8013108:	08014be8 	.word	0x08014be8
 801310c:	9908      	ldr	r1, [sp, #32]
 801310e:	2900      	cmp	r1, #0
 8013110:	f000 80e3 	beq.w	80132da <_dtoa_r+0x7ea>
 8013114:	9907      	ldr	r1, [sp, #28]
 8013116:	2901      	cmp	r1, #1
 8013118:	f300 80c8 	bgt.w	80132ac <_dtoa_r+0x7bc>
 801311c:	2d00      	cmp	r5, #0
 801311e:	f000 80c1 	beq.w	80132a4 <_dtoa_r+0x7b4>
 8013122:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013126:	9e05      	ldr	r6, [sp, #20]
 8013128:	461c      	mov	r4, r3
 801312a:	9304      	str	r3, [sp, #16]
 801312c:	9b05      	ldr	r3, [sp, #20]
 801312e:	4413      	add	r3, r2
 8013130:	9305      	str	r3, [sp, #20]
 8013132:	9b06      	ldr	r3, [sp, #24]
 8013134:	2101      	movs	r1, #1
 8013136:	4413      	add	r3, r2
 8013138:	4648      	mov	r0, r9
 801313a:	9306      	str	r3, [sp, #24]
 801313c:	f000 fc22 	bl	8013984 <__i2b>
 8013140:	9b04      	ldr	r3, [sp, #16]
 8013142:	4605      	mov	r5, r0
 8013144:	b166      	cbz	r6, 8013160 <_dtoa_r+0x670>
 8013146:	9a06      	ldr	r2, [sp, #24]
 8013148:	2a00      	cmp	r2, #0
 801314a:	dd09      	ble.n	8013160 <_dtoa_r+0x670>
 801314c:	42b2      	cmp	r2, r6
 801314e:	9905      	ldr	r1, [sp, #20]
 8013150:	bfa8      	it	ge
 8013152:	4632      	movge	r2, r6
 8013154:	1a89      	subs	r1, r1, r2
 8013156:	9105      	str	r1, [sp, #20]
 8013158:	9906      	ldr	r1, [sp, #24]
 801315a:	1ab6      	subs	r6, r6, r2
 801315c:	1a8a      	subs	r2, r1, r2
 801315e:	9206      	str	r2, [sp, #24]
 8013160:	b1fb      	cbz	r3, 80131a2 <_dtoa_r+0x6b2>
 8013162:	9a08      	ldr	r2, [sp, #32]
 8013164:	2a00      	cmp	r2, #0
 8013166:	f000 80bc 	beq.w	80132e2 <_dtoa_r+0x7f2>
 801316a:	b19c      	cbz	r4, 8013194 <_dtoa_r+0x6a4>
 801316c:	4629      	mov	r1, r5
 801316e:	4622      	mov	r2, r4
 8013170:	4648      	mov	r0, r9
 8013172:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013174:	f000 fcc6 	bl	8013b04 <__pow5mult>
 8013178:	9a01      	ldr	r2, [sp, #4]
 801317a:	4601      	mov	r1, r0
 801317c:	4605      	mov	r5, r0
 801317e:	4648      	mov	r0, r9
 8013180:	f000 fc16 	bl	80139b0 <__multiply>
 8013184:	9901      	ldr	r1, [sp, #4]
 8013186:	9004      	str	r0, [sp, #16]
 8013188:	4648      	mov	r0, r9
 801318a:	f000 fb47 	bl	801381c <_Bfree>
 801318e:	9a04      	ldr	r2, [sp, #16]
 8013190:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013192:	9201      	str	r2, [sp, #4]
 8013194:	1b1a      	subs	r2, r3, r4
 8013196:	d004      	beq.n	80131a2 <_dtoa_r+0x6b2>
 8013198:	9901      	ldr	r1, [sp, #4]
 801319a:	4648      	mov	r0, r9
 801319c:	f000 fcb2 	bl	8013b04 <__pow5mult>
 80131a0:	9001      	str	r0, [sp, #4]
 80131a2:	2101      	movs	r1, #1
 80131a4:	4648      	mov	r0, r9
 80131a6:	f000 fbed 	bl	8013984 <__i2b>
 80131aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80131ac:	4604      	mov	r4, r0
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	f000 81d0 	beq.w	8013554 <_dtoa_r+0xa64>
 80131b4:	461a      	mov	r2, r3
 80131b6:	4601      	mov	r1, r0
 80131b8:	4648      	mov	r0, r9
 80131ba:	f000 fca3 	bl	8013b04 <__pow5mult>
 80131be:	9b07      	ldr	r3, [sp, #28]
 80131c0:	2b01      	cmp	r3, #1
 80131c2:	4604      	mov	r4, r0
 80131c4:	f300 8095 	bgt.w	80132f2 <_dtoa_r+0x802>
 80131c8:	9b02      	ldr	r3, [sp, #8]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	f040 808b 	bne.w	80132e6 <_dtoa_r+0x7f6>
 80131d0:	9b03      	ldr	r3, [sp, #12]
 80131d2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80131d6:	2a00      	cmp	r2, #0
 80131d8:	f040 8087 	bne.w	80132ea <_dtoa_r+0x7fa>
 80131dc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80131e0:	0d12      	lsrs	r2, r2, #20
 80131e2:	0512      	lsls	r2, r2, #20
 80131e4:	2a00      	cmp	r2, #0
 80131e6:	f000 8082 	beq.w	80132ee <_dtoa_r+0x7fe>
 80131ea:	9b05      	ldr	r3, [sp, #20]
 80131ec:	3301      	adds	r3, #1
 80131ee:	9305      	str	r3, [sp, #20]
 80131f0:	9b06      	ldr	r3, [sp, #24]
 80131f2:	3301      	adds	r3, #1
 80131f4:	9306      	str	r3, [sp, #24]
 80131f6:	2301      	movs	r3, #1
 80131f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80131fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	f000 81af 	beq.w	8013560 <_dtoa_r+0xa70>
 8013202:	6922      	ldr	r2, [r4, #16]
 8013204:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013208:	6910      	ldr	r0, [r2, #16]
 801320a:	f000 fb6f 	bl	80138ec <__hi0bits>
 801320e:	f1c0 0020 	rsb	r0, r0, #32
 8013212:	9b06      	ldr	r3, [sp, #24]
 8013214:	4418      	add	r0, r3
 8013216:	f010 001f 	ands.w	r0, r0, #31
 801321a:	d076      	beq.n	801330a <_dtoa_r+0x81a>
 801321c:	f1c0 0220 	rsb	r2, r0, #32
 8013220:	2a04      	cmp	r2, #4
 8013222:	dd69      	ble.n	80132f8 <_dtoa_r+0x808>
 8013224:	9b05      	ldr	r3, [sp, #20]
 8013226:	f1c0 001c 	rsb	r0, r0, #28
 801322a:	4403      	add	r3, r0
 801322c:	9305      	str	r3, [sp, #20]
 801322e:	9b06      	ldr	r3, [sp, #24]
 8013230:	4406      	add	r6, r0
 8013232:	4403      	add	r3, r0
 8013234:	9306      	str	r3, [sp, #24]
 8013236:	9b05      	ldr	r3, [sp, #20]
 8013238:	2b00      	cmp	r3, #0
 801323a:	dd05      	ble.n	8013248 <_dtoa_r+0x758>
 801323c:	9901      	ldr	r1, [sp, #4]
 801323e:	461a      	mov	r2, r3
 8013240:	4648      	mov	r0, r9
 8013242:	f000 fcb9 	bl	8013bb8 <__lshift>
 8013246:	9001      	str	r0, [sp, #4]
 8013248:	9b06      	ldr	r3, [sp, #24]
 801324a:	2b00      	cmp	r3, #0
 801324c:	dd05      	ble.n	801325a <_dtoa_r+0x76a>
 801324e:	4621      	mov	r1, r4
 8013250:	461a      	mov	r2, r3
 8013252:	4648      	mov	r0, r9
 8013254:	f000 fcb0 	bl	8013bb8 <__lshift>
 8013258:	4604      	mov	r4, r0
 801325a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801325c:	2b00      	cmp	r3, #0
 801325e:	d056      	beq.n	801330e <_dtoa_r+0x81e>
 8013260:	9801      	ldr	r0, [sp, #4]
 8013262:	4621      	mov	r1, r4
 8013264:	f000 fd14 	bl	8013c90 <__mcmp>
 8013268:	2800      	cmp	r0, #0
 801326a:	da50      	bge.n	801330e <_dtoa_r+0x81e>
 801326c:	f108 33ff 	add.w	r3, r8, #4294967295
 8013270:	9304      	str	r3, [sp, #16]
 8013272:	9901      	ldr	r1, [sp, #4]
 8013274:	2300      	movs	r3, #0
 8013276:	220a      	movs	r2, #10
 8013278:	4648      	mov	r0, r9
 801327a:	f000 faf1 	bl	8013860 <__multadd>
 801327e:	9b08      	ldr	r3, [sp, #32]
 8013280:	9001      	str	r0, [sp, #4]
 8013282:	2b00      	cmp	r3, #0
 8013284:	f000 816e 	beq.w	8013564 <_dtoa_r+0xa74>
 8013288:	4629      	mov	r1, r5
 801328a:	2300      	movs	r3, #0
 801328c:	220a      	movs	r2, #10
 801328e:	4648      	mov	r0, r9
 8013290:	f000 fae6 	bl	8013860 <__multadd>
 8013294:	f1bb 0f00 	cmp.w	fp, #0
 8013298:	4605      	mov	r5, r0
 801329a:	dc64      	bgt.n	8013366 <_dtoa_r+0x876>
 801329c:	9b07      	ldr	r3, [sp, #28]
 801329e:	2b02      	cmp	r3, #2
 80132a0:	dc3e      	bgt.n	8013320 <_dtoa_r+0x830>
 80132a2:	e060      	b.n	8013366 <_dtoa_r+0x876>
 80132a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80132a6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80132aa:	e73c      	b.n	8013126 <_dtoa_r+0x636>
 80132ac:	f10a 34ff 	add.w	r4, sl, #4294967295
 80132b0:	42a3      	cmp	r3, r4
 80132b2:	bfbf      	itttt	lt
 80132b4:	1ae2      	sublt	r2, r4, r3
 80132b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80132b8:	189b      	addlt	r3, r3, r2
 80132ba:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80132bc:	bfae      	itee	ge
 80132be:	1b1c      	subge	r4, r3, r4
 80132c0:	4623      	movlt	r3, r4
 80132c2:	2400      	movlt	r4, #0
 80132c4:	f1ba 0f00 	cmp.w	sl, #0
 80132c8:	bfb5      	itete	lt
 80132ca:	9a05      	ldrlt	r2, [sp, #20]
 80132cc:	9e05      	ldrge	r6, [sp, #20]
 80132ce:	eba2 060a 	sublt.w	r6, r2, sl
 80132d2:	4652      	movge	r2, sl
 80132d4:	bfb8      	it	lt
 80132d6:	2200      	movlt	r2, #0
 80132d8:	e727      	b.n	801312a <_dtoa_r+0x63a>
 80132da:	9e05      	ldr	r6, [sp, #20]
 80132dc:	9d08      	ldr	r5, [sp, #32]
 80132de:	461c      	mov	r4, r3
 80132e0:	e730      	b.n	8013144 <_dtoa_r+0x654>
 80132e2:	461a      	mov	r2, r3
 80132e4:	e758      	b.n	8013198 <_dtoa_r+0x6a8>
 80132e6:	2300      	movs	r3, #0
 80132e8:	e786      	b.n	80131f8 <_dtoa_r+0x708>
 80132ea:	9b02      	ldr	r3, [sp, #8]
 80132ec:	e784      	b.n	80131f8 <_dtoa_r+0x708>
 80132ee:	920b      	str	r2, [sp, #44]	@ 0x2c
 80132f0:	e783      	b.n	80131fa <_dtoa_r+0x70a>
 80132f2:	2300      	movs	r3, #0
 80132f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80132f6:	e784      	b.n	8013202 <_dtoa_r+0x712>
 80132f8:	d09d      	beq.n	8013236 <_dtoa_r+0x746>
 80132fa:	9b05      	ldr	r3, [sp, #20]
 80132fc:	321c      	adds	r2, #28
 80132fe:	4413      	add	r3, r2
 8013300:	9305      	str	r3, [sp, #20]
 8013302:	9b06      	ldr	r3, [sp, #24]
 8013304:	4416      	add	r6, r2
 8013306:	4413      	add	r3, r2
 8013308:	e794      	b.n	8013234 <_dtoa_r+0x744>
 801330a:	4602      	mov	r2, r0
 801330c:	e7f5      	b.n	80132fa <_dtoa_r+0x80a>
 801330e:	f1ba 0f00 	cmp.w	sl, #0
 8013312:	f8cd 8010 	str.w	r8, [sp, #16]
 8013316:	46d3      	mov	fp, sl
 8013318:	dc21      	bgt.n	801335e <_dtoa_r+0x86e>
 801331a:	9b07      	ldr	r3, [sp, #28]
 801331c:	2b02      	cmp	r3, #2
 801331e:	dd1e      	ble.n	801335e <_dtoa_r+0x86e>
 8013320:	f1bb 0f00 	cmp.w	fp, #0
 8013324:	f47f aeb7 	bne.w	8013096 <_dtoa_r+0x5a6>
 8013328:	4621      	mov	r1, r4
 801332a:	465b      	mov	r3, fp
 801332c:	2205      	movs	r2, #5
 801332e:	4648      	mov	r0, r9
 8013330:	f000 fa96 	bl	8013860 <__multadd>
 8013334:	4601      	mov	r1, r0
 8013336:	4604      	mov	r4, r0
 8013338:	9801      	ldr	r0, [sp, #4]
 801333a:	f000 fca9 	bl	8013c90 <__mcmp>
 801333e:	2800      	cmp	r0, #0
 8013340:	f77f aea9 	ble.w	8013096 <_dtoa_r+0x5a6>
 8013344:	463e      	mov	r6, r7
 8013346:	2331      	movs	r3, #49	@ 0x31
 8013348:	f806 3b01 	strb.w	r3, [r6], #1
 801334c:	9b04      	ldr	r3, [sp, #16]
 801334e:	3301      	adds	r3, #1
 8013350:	9304      	str	r3, [sp, #16]
 8013352:	e6a4      	b.n	801309e <_dtoa_r+0x5ae>
 8013354:	f8cd 8010 	str.w	r8, [sp, #16]
 8013358:	4654      	mov	r4, sl
 801335a:	4625      	mov	r5, r4
 801335c:	e7f2      	b.n	8013344 <_dtoa_r+0x854>
 801335e:	9b08      	ldr	r3, [sp, #32]
 8013360:	2b00      	cmp	r3, #0
 8013362:	f000 8103 	beq.w	801356c <_dtoa_r+0xa7c>
 8013366:	2e00      	cmp	r6, #0
 8013368:	dd05      	ble.n	8013376 <_dtoa_r+0x886>
 801336a:	4629      	mov	r1, r5
 801336c:	4632      	mov	r2, r6
 801336e:	4648      	mov	r0, r9
 8013370:	f000 fc22 	bl	8013bb8 <__lshift>
 8013374:	4605      	mov	r5, r0
 8013376:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013378:	2b00      	cmp	r3, #0
 801337a:	d058      	beq.n	801342e <_dtoa_r+0x93e>
 801337c:	6869      	ldr	r1, [r5, #4]
 801337e:	4648      	mov	r0, r9
 8013380:	f000 fa0c 	bl	801379c <_Balloc>
 8013384:	4606      	mov	r6, r0
 8013386:	b928      	cbnz	r0, 8013394 <_dtoa_r+0x8a4>
 8013388:	4b82      	ldr	r3, [pc, #520]	@ (8013594 <_dtoa_r+0xaa4>)
 801338a:	4602      	mov	r2, r0
 801338c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013390:	f7ff bbc7 	b.w	8012b22 <_dtoa_r+0x32>
 8013394:	692a      	ldr	r2, [r5, #16]
 8013396:	3202      	adds	r2, #2
 8013398:	0092      	lsls	r2, r2, #2
 801339a:	f105 010c 	add.w	r1, r5, #12
 801339e:	300c      	adds	r0, #12
 80133a0:	f000 ffac 	bl	80142fc <memcpy>
 80133a4:	2201      	movs	r2, #1
 80133a6:	4631      	mov	r1, r6
 80133a8:	4648      	mov	r0, r9
 80133aa:	f000 fc05 	bl	8013bb8 <__lshift>
 80133ae:	1c7b      	adds	r3, r7, #1
 80133b0:	9305      	str	r3, [sp, #20]
 80133b2:	eb07 030b 	add.w	r3, r7, fp
 80133b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80133b8:	9b02      	ldr	r3, [sp, #8]
 80133ba:	f003 0301 	and.w	r3, r3, #1
 80133be:	46a8      	mov	r8, r5
 80133c0:	9308      	str	r3, [sp, #32]
 80133c2:	4605      	mov	r5, r0
 80133c4:	9b05      	ldr	r3, [sp, #20]
 80133c6:	9801      	ldr	r0, [sp, #4]
 80133c8:	4621      	mov	r1, r4
 80133ca:	f103 3bff 	add.w	fp, r3, #4294967295
 80133ce:	f7ff fb04 	bl	80129da <quorem>
 80133d2:	4641      	mov	r1, r8
 80133d4:	9002      	str	r0, [sp, #8]
 80133d6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80133da:	9801      	ldr	r0, [sp, #4]
 80133dc:	f000 fc58 	bl	8013c90 <__mcmp>
 80133e0:	462a      	mov	r2, r5
 80133e2:	9006      	str	r0, [sp, #24]
 80133e4:	4621      	mov	r1, r4
 80133e6:	4648      	mov	r0, r9
 80133e8:	f000 fc6e 	bl	8013cc8 <__mdiff>
 80133ec:	68c2      	ldr	r2, [r0, #12]
 80133ee:	4606      	mov	r6, r0
 80133f0:	b9fa      	cbnz	r2, 8013432 <_dtoa_r+0x942>
 80133f2:	4601      	mov	r1, r0
 80133f4:	9801      	ldr	r0, [sp, #4]
 80133f6:	f000 fc4b 	bl	8013c90 <__mcmp>
 80133fa:	4602      	mov	r2, r0
 80133fc:	4631      	mov	r1, r6
 80133fe:	4648      	mov	r0, r9
 8013400:	920a      	str	r2, [sp, #40]	@ 0x28
 8013402:	f000 fa0b 	bl	801381c <_Bfree>
 8013406:	9b07      	ldr	r3, [sp, #28]
 8013408:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801340a:	9e05      	ldr	r6, [sp, #20]
 801340c:	ea43 0102 	orr.w	r1, r3, r2
 8013410:	9b08      	ldr	r3, [sp, #32]
 8013412:	4319      	orrs	r1, r3
 8013414:	d10f      	bne.n	8013436 <_dtoa_r+0x946>
 8013416:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801341a:	d028      	beq.n	801346e <_dtoa_r+0x97e>
 801341c:	9b06      	ldr	r3, [sp, #24]
 801341e:	2b00      	cmp	r3, #0
 8013420:	dd02      	ble.n	8013428 <_dtoa_r+0x938>
 8013422:	9b02      	ldr	r3, [sp, #8]
 8013424:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8013428:	f88b a000 	strb.w	sl, [fp]
 801342c:	e639      	b.n	80130a2 <_dtoa_r+0x5b2>
 801342e:	4628      	mov	r0, r5
 8013430:	e7bd      	b.n	80133ae <_dtoa_r+0x8be>
 8013432:	2201      	movs	r2, #1
 8013434:	e7e2      	b.n	80133fc <_dtoa_r+0x90c>
 8013436:	9b06      	ldr	r3, [sp, #24]
 8013438:	2b00      	cmp	r3, #0
 801343a:	db04      	blt.n	8013446 <_dtoa_r+0x956>
 801343c:	9907      	ldr	r1, [sp, #28]
 801343e:	430b      	orrs	r3, r1
 8013440:	9908      	ldr	r1, [sp, #32]
 8013442:	430b      	orrs	r3, r1
 8013444:	d120      	bne.n	8013488 <_dtoa_r+0x998>
 8013446:	2a00      	cmp	r2, #0
 8013448:	ddee      	ble.n	8013428 <_dtoa_r+0x938>
 801344a:	9901      	ldr	r1, [sp, #4]
 801344c:	2201      	movs	r2, #1
 801344e:	4648      	mov	r0, r9
 8013450:	f000 fbb2 	bl	8013bb8 <__lshift>
 8013454:	4621      	mov	r1, r4
 8013456:	9001      	str	r0, [sp, #4]
 8013458:	f000 fc1a 	bl	8013c90 <__mcmp>
 801345c:	2800      	cmp	r0, #0
 801345e:	dc03      	bgt.n	8013468 <_dtoa_r+0x978>
 8013460:	d1e2      	bne.n	8013428 <_dtoa_r+0x938>
 8013462:	f01a 0f01 	tst.w	sl, #1
 8013466:	d0df      	beq.n	8013428 <_dtoa_r+0x938>
 8013468:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 801346c:	d1d9      	bne.n	8013422 <_dtoa_r+0x932>
 801346e:	2339      	movs	r3, #57	@ 0x39
 8013470:	f88b 3000 	strb.w	r3, [fp]
 8013474:	4633      	mov	r3, r6
 8013476:	461e      	mov	r6, r3
 8013478:	3b01      	subs	r3, #1
 801347a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801347e:	2a39      	cmp	r2, #57	@ 0x39
 8013480:	d053      	beq.n	801352a <_dtoa_r+0xa3a>
 8013482:	3201      	adds	r2, #1
 8013484:	701a      	strb	r2, [r3, #0]
 8013486:	e60c      	b.n	80130a2 <_dtoa_r+0x5b2>
 8013488:	2a00      	cmp	r2, #0
 801348a:	dd07      	ble.n	801349c <_dtoa_r+0x9ac>
 801348c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013490:	d0ed      	beq.n	801346e <_dtoa_r+0x97e>
 8013492:	f10a 0301 	add.w	r3, sl, #1
 8013496:	f88b 3000 	strb.w	r3, [fp]
 801349a:	e602      	b.n	80130a2 <_dtoa_r+0x5b2>
 801349c:	9b05      	ldr	r3, [sp, #20]
 801349e:	9a05      	ldr	r2, [sp, #20]
 80134a0:	f803 ac01 	strb.w	sl, [r3, #-1]
 80134a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80134a6:	4293      	cmp	r3, r2
 80134a8:	d029      	beq.n	80134fe <_dtoa_r+0xa0e>
 80134aa:	9901      	ldr	r1, [sp, #4]
 80134ac:	2300      	movs	r3, #0
 80134ae:	220a      	movs	r2, #10
 80134b0:	4648      	mov	r0, r9
 80134b2:	f000 f9d5 	bl	8013860 <__multadd>
 80134b6:	45a8      	cmp	r8, r5
 80134b8:	9001      	str	r0, [sp, #4]
 80134ba:	f04f 0300 	mov.w	r3, #0
 80134be:	f04f 020a 	mov.w	r2, #10
 80134c2:	4641      	mov	r1, r8
 80134c4:	4648      	mov	r0, r9
 80134c6:	d107      	bne.n	80134d8 <_dtoa_r+0x9e8>
 80134c8:	f000 f9ca 	bl	8013860 <__multadd>
 80134cc:	4680      	mov	r8, r0
 80134ce:	4605      	mov	r5, r0
 80134d0:	9b05      	ldr	r3, [sp, #20]
 80134d2:	3301      	adds	r3, #1
 80134d4:	9305      	str	r3, [sp, #20]
 80134d6:	e775      	b.n	80133c4 <_dtoa_r+0x8d4>
 80134d8:	f000 f9c2 	bl	8013860 <__multadd>
 80134dc:	4629      	mov	r1, r5
 80134de:	4680      	mov	r8, r0
 80134e0:	2300      	movs	r3, #0
 80134e2:	220a      	movs	r2, #10
 80134e4:	4648      	mov	r0, r9
 80134e6:	f000 f9bb 	bl	8013860 <__multadd>
 80134ea:	4605      	mov	r5, r0
 80134ec:	e7f0      	b.n	80134d0 <_dtoa_r+0x9e0>
 80134ee:	f1bb 0f00 	cmp.w	fp, #0
 80134f2:	bfcc      	ite	gt
 80134f4:	465e      	movgt	r6, fp
 80134f6:	2601      	movle	r6, #1
 80134f8:	443e      	add	r6, r7
 80134fa:	f04f 0800 	mov.w	r8, #0
 80134fe:	9901      	ldr	r1, [sp, #4]
 8013500:	2201      	movs	r2, #1
 8013502:	4648      	mov	r0, r9
 8013504:	f000 fb58 	bl	8013bb8 <__lshift>
 8013508:	4621      	mov	r1, r4
 801350a:	9001      	str	r0, [sp, #4]
 801350c:	f000 fbc0 	bl	8013c90 <__mcmp>
 8013510:	2800      	cmp	r0, #0
 8013512:	dcaf      	bgt.n	8013474 <_dtoa_r+0x984>
 8013514:	d102      	bne.n	801351c <_dtoa_r+0xa2c>
 8013516:	f01a 0f01 	tst.w	sl, #1
 801351a:	d1ab      	bne.n	8013474 <_dtoa_r+0x984>
 801351c:	4633      	mov	r3, r6
 801351e:	461e      	mov	r6, r3
 8013520:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013524:	2a30      	cmp	r2, #48	@ 0x30
 8013526:	d0fa      	beq.n	801351e <_dtoa_r+0xa2e>
 8013528:	e5bb      	b.n	80130a2 <_dtoa_r+0x5b2>
 801352a:	429f      	cmp	r7, r3
 801352c:	d1a3      	bne.n	8013476 <_dtoa_r+0x986>
 801352e:	9b04      	ldr	r3, [sp, #16]
 8013530:	3301      	adds	r3, #1
 8013532:	9304      	str	r3, [sp, #16]
 8013534:	2331      	movs	r3, #49	@ 0x31
 8013536:	703b      	strb	r3, [r7, #0]
 8013538:	e5b3      	b.n	80130a2 <_dtoa_r+0x5b2>
 801353a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801353c:	4f16      	ldr	r7, [pc, #88]	@ (8013598 <_dtoa_r+0xaa8>)
 801353e:	b11b      	cbz	r3, 8013548 <_dtoa_r+0xa58>
 8013540:	f107 0308 	add.w	r3, r7, #8
 8013544:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013546:	6013      	str	r3, [r2, #0]
 8013548:	4638      	mov	r0, r7
 801354a:	b011      	add	sp, #68	@ 0x44
 801354c:	ecbd 8b02 	vpop	{d8}
 8013550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013554:	9b07      	ldr	r3, [sp, #28]
 8013556:	2b01      	cmp	r3, #1
 8013558:	f77f ae36 	ble.w	80131c8 <_dtoa_r+0x6d8>
 801355c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801355e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013560:	2001      	movs	r0, #1
 8013562:	e656      	b.n	8013212 <_dtoa_r+0x722>
 8013564:	f1bb 0f00 	cmp.w	fp, #0
 8013568:	f77f aed7 	ble.w	801331a <_dtoa_r+0x82a>
 801356c:	463e      	mov	r6, r7
 801356e:	9801      	ldr	r0, [sp, #4]
 8013570:	4621      	mov	r1, r4
 8013572:	f7ff fa32 	bl	80129da <quorem>
 8013576:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801357a:	f806 ab01 	strb.w	sl, [r6], #1
 801357e:	1bf2      	subs	r2, r6, r7
 8013580:	4593      	cmp	fp, r2
 8013582:	ddb4      	ble.n	80134ee <_dtoa_r+0x9fe>
 8013584:	9901      	ldr	r1, [sp, #4]
 8013586:	2300      	movs	r3, #0
 8013588:	220a      	movs	r2, #10
 801358a:	4648      	mov	r0, r9
 801358c:	f000 f968 	bl	8013860 <__multadd>
 8013590:	9001      	str	r0, [sp, #4]
 8013592:	e7ec      	b.n	801356e <_dtoa_r+0xa7e>
 8013594:	08014b6c 	.word	0x08014b6c
 8013598:	08014af0 	.word	0x08014af0

0801359c <_free_r>:
 801359c:	b538      	push	{r3, r4, r5, lr}
 801359e:	4605      	mov	r5, r0
 80135a0:	2900      	cmp	r1, #0
 80135a2:	d041      	beq.n	8013628 <_free_r+0x8c>
 80135a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80135a8:	1f0c      	subs	r4, r1, #4
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	bfb8      	it	lt
 80135ae:	18e4      	addlt	r4, r4, r3
 80135b0:	f000 f8e8 	bl	8013784 <__malloc_lock>
 80135b4:	4a1d      	ldr	r2, [pc, #116]	@ (801362c <_free_r+0x90>)
 80135b6:	6813      	ldr	r3, [r2, #0]
 80135b8:	b933      	cbnz	r3, 80135c8 <_free_r+0x2c>
 80135ba:	6063      	str	r3, [r4, #4]
 80135bc:	6014      	str	r4, [r2, #0]
 80135be:	4628      	mov	r0, r5
 80135c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80135c4:	f000 b8e4 	b.w	8013790 <__malloc_unlock>
 80135c8:	42a3      	cmp	r3, r4
 80135ca:	d908      	bls.n	80135de <_free_r+0x42>
 80135cc:	6820      	ldr	r0, [r4, #0]
 80135ce:	1821      	adds	r1, r4, r0
 80135d0:	428b      	cmp	r3, r1
 80135d2:	bf01      	itttt	eq
 80135d4:	6819      	ldreq	r1, [r3, #0]
 80135d6:	685b      	ldreq	r3, [r3, #4]
 80135d8:	1809      	addeq	r1, r1, r0
 80135da:	6021      	streq	r1, [r4, #0]
 80135dc:	e7ed      	b.n	80135ba <_free_r+0x1e>
 80135de:	461a      	mov	r2, r3
 80135e0:	685b      	ldr	r3, [r3, #4]
 80135e2:	b10b      	cbz	r3, 80135e8 <_free_r+0x4c>
 80135e4:	42a3      	cmp	r3, r4
 80135e6:	d9fa      	bls.n	80135de <_free_r+0x42>
 80135e8:	6811      	ldr	r1, [r2, #0]
 80135ea:	1850      	adds	r0, r2, r1
 80135ec:	42a0      	cmp	r0, r4
 80135ee:	d10b      	bne.n	8013608 <_free_r+0x6c>
 80135f0:	6820      	ldr	r0, [r4, #0]
 80135f2:	4401      	add	r1, r0
 80135f4:	1850      	adds	r0, r2, r1
 80135f6:	4283      	cmp	r3, r0
 80135f8:	6011      	str	r1, [r2, #0]
 80135fa:	d1e0      	bne.n	80135be <_free_r+0x22>
 80135fc:	6818      	ldr	r0, [r3, #0]
 80135fe:	685b      	ldr	r3, [r3, #4]
 8013600:	6053      	str	r3, [r2, #4]
 8013602:	4408      	add	r0, r1
 8013604:	6010      	str	r0, [r2, #0]
 8013606:	e7da      	b.n	80135be <_free_r+0x22>
 8013608:	d902      	bls.n	8013610 <_free_r+0x74>
 801360a:	230c      	movs	r3, #12
 801360c:	602b      	str	r3, [r5, #0]
 801360e:	e7d6      	b.n	80135be <_free_r+0x22>
 8013610:	6820      	ldr	r0, [r4, #0]
 8013612:	1821      	adds	r1, r4, r0
 8013614:	428b      	cmp	r3, r1
 8013616:	bf04      	itt	eq
 8013618:	6819      	ldreq	r1, [r3, #0]
 801361a:	685b      	ldreq	r3, [r3, #4]
 801361c:	6063      	str	r3, [r4, #4]
 801361e:	bf04      	itt	eq
 8013620:	1809      	addeq	r1, r1, r0
 8013622:	6021      	streq	r1, [r4, #0]
 8013624:	6054      	str	r4, [r2, #4]
 8013626:	e7ca      	b.n	80135be <_free_r+0x22>
 8013628:	bd38      	pop	{r3, r4, r5, pc}
 801362a:	bf00      	nop
 801362c:	2400278c 	.word	0x2400278c

08013630 <malloc>:
 8013630:	4b02      	ldr	r3, [pc, #8]	@ (801363c <malloc+0xc>)
 8013632:	4601      	mov	r1, r0
 8013634:	6818      	ldr	r0, [r3, #0]
 8013636:	f000 b825 	b.w	8013684 <_malloc_r>
 801363a:	bf00      	nop
 801363c:	24000138 	.word	0x24000138

08013640 <sbrk_aligned>:
 8013640:	b570      	push	{r4, r5, r6, lr}
 8013642:	4e0f      	ldr	r6, [pc, #60]	@ (8013680 <sbrk_aligned+0x40>)
 8013644:	460c      	mov	r4, r1
 8013646:	6831      	ldr	r1, [r6, #0]
 8013648:	4605      	mov	r5, r0
 801364a:	b911      	cbnz	r1, 8013652 <sbrk_aligned+0x12>
 801364c:	f000 fe46 	bl	80142dc <_sbrk_r>
 8013650:	6030      	str	r0, [r6, #0]
 8013652:	4621      	mov	r1, r4
 8013654:	4628      	mov	r0, r5
 8013656:	f000 fe41 	bl	80142dc <_sbrk_r>
 801365a:	1c43      	adds	r3, r0, #1
 801365c:	d103      	bne.n	8013666 <sbrk_aligned+0x26>
 801365e:	f04f 34ff 	mov.w	r4, #4294967295
 8013662:	4620      	mov	r0, r4
 8013664:	bd70      	pop	{r4, r5, r6, pc}
 8013666:	1cc4      	adds	r4, r0, #3
 8013668:	f024 0403 	bic.w	r4, r4, #3
 801366c:	42a0      	cmp	r0, r4
 801366e:	d0f8      	beq.n	8013662 <sbrk_aligned+0x22>
 8013670:	1a21      	subs	r1, r4, r0
 8013672:	4628      	mov	r0, r5
 8013674:	f000 fe32 	bl	80142dc <_sbrk_r>
 8013678:	3001      	adds	r0, #1
 801367a:	d1f2      	bne.n	8013662 <sbrk_aligned+0x22>
 801367c:	e7ef      	b.n	801365e <sbrk_aligned+0x1e>
 801367e:	bf00      	nop
 8013680:	24002788 	.word	0x24002788

08013684 <_malloc_r>:
 8013684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013688:	1ccd      	adds	r5, r1, #3
 801368a:	f025 0503 	bic.w	r5, r5, #3
 801368e:	3508      	adds	r5, #8
 8013690:	2d0c      	cmp	r5, #12
 8013692:	bf38      	it	cc
 8013694:	250c      	movcc	r5, #12
 8013696:	2d00      	cmp	r5, #0
 8013698:	4606      	mov	r6, r0
 801369a:	db01      	blt.n	80136a0 <_malloc_r+0x1c>
 801369c:	42a9      	cmp	r1, r5
 801369e:	d904      	bls.n	80136aa <_malloc_r+0x26>
 80136a0:	230c      	movs	r3, #12
 80136a2:	6033      	str	r3, [r6, #0]
 80136a4:	2000      	movs	r0, #0
 80136a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80136aa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013780 <_malloc_r+0xfc>
 80136ae:	f000 f869 	bl	8013784 <__malloc_lock>
 80136b2:	f8d8 3000 	ldr.w	r3, [r8]
 80136b6:	461c      	mov	r4, r3
 80136b8:	bb44      	cbnz	r4, 801370c <_malloc_r+0x88>
 80136ba:	4629      	mov	r1, r5
 80136bc:	4630      	mov	r0, r6
 80136be:	f7ff ffbf 	bl	8013640 <sbrk_aligned>
 80136c2:	1c43      	adds	r3, r0, #1
 80136c4:	4604      	mov	r4, r0
 80136c6:	d158      	bne.n	801377a <_malloc_r+0xf6>
 80136c8:	f8d8 4000 	ldr.w	r4, [r8]
 80136cc:	4627      	mov	r7, r4
 80136ce:	2f00      	cmp	r7, #0
 80136d0:	d143      	bne.n	801375a <_malloc_r+0xd6>
 80136d2:	2c00      	cmp	r4, #0
 80136d4:	d04b      	beq.n	801376e <_malloc_r+0xea>
 80136d6:	6823      	ldr	r3, [r4, #0]
 80136d8:	4639      	mov	r1, r7
 80136da:	4630      	mov	r0, r6
 80136dc:	eb04 0903 	add.w	r9, r4, r3
 80136e0:	f000 fdfc 	bl	80142dc <_sbrk_r>
 80136e4:	4581      	cmp	r9, r0
 80136e6:	d142      	bne.n	801376e <_malloc_r+0xea>
 80136e8:	6821      	ldr	r1, [r4, #0]
 80136ea:	1a6d      	subs	r5, r5, r1
 80136ec:	4629      	mov	r1, r5
 80136ee:	4630      	mov	r0, r6
 80136f0:	f7ff ffa6 	bl	8013640 <sbrk_aligned>
 80136f4:	3001      	adds	r0, #1
 80136f6:	d03a      	beq.n	801376e <_malloc_r+0xea>
 80136f8:	6823      	ldr	r3, [r4, #0]
 80136fa:	442b      	add	r3, r5
 80136fc:	6023      	str	r3, [r4, #0]
 80136fe:	f8d8 3000 	ldr.w	r3, [r8]
 8013702:	685a      	ldr	r2, [r3, #4]
 8013704:	bb62      	cbnz	r2, 8013760 <_malloc_r+0xdc>
 8013706:	f8c8 7000 	str.w	r7, [r8]
 801370a:	e00f      	b.n	801372c <_malloc_r+0xa8>
 801370c:	6822      	ldr	r2, [r4, #0]
 801370e:	1b52      	subs	r2, r2, r5
 8013710:	d420      	bmi.n	8013754 <_malloc_r+0xd0>
 8013712:	2a0b      	cmp	r2, #11
 8013714:	d917      	bls.n	8013746 <_malloc_r+0xc2>
 8013716:	1961      	adds	r1, r4, r5
 8013718:	42a3      	cmp	r3, r4
 801371a:	6025      	str	r5, [r4, #0]
 801371c:	bf18      	it	ne
 801371e:	6059      	strne	r1, [r3, #4]
 8013720:	6863      	ldr	r3, [r4, #4]
 8013722:	bf08      	it	eq
 8013724:	f8c8 1000 	streq.w	r1, [r8]
 8013728:	5162      	str	r2, [r4, r5]
 801372a:	604b      	str	r3, [r1, #4]
 801372c:	4630      	mov	r0, r6
 801372e:	f000 f82f 	bl	8013790 <__malloc_unlock>
 8013732:	f104 000b 	add.w	r0, r4, #11
 8013736:	1d23      	adds	r3, r4, #4
 8013738:	f020 0007 	bic.w	r0, r0, #7
 801373c:	1ac2      	subs	r2, r0, r3
 801373e:	bf1c      	itt	ne
 8013740:	1a1b      	subne	r3, r3, r0
 8013742:	50a3      	strne	r3, [r4, r2]
 8013744:	e7af      	b.n	80136a6 <_malloc_r+0x22>
 8013746:	6862      	ldr	r2, [r4, #4]
 8013748:	42a3      	cmp	r3, r4
 801374a:	bf0c      	ite	eq
 801374c:	f8c8 2000 	streq.w	r2, [r8]
 8013750:	605a      	strne	r2, [r3, #4]
 8013752:	e7eb      	b.n	801372c <_malloc_r+0xa8>
 8013754:	4623      	mov	r3, r4
 8013756:	6864      	ldr	r4, [r4, #4]
 8013758:	e7ae      	b.n	80136b8 <_malloc_r+0x34>
 801375a:	463c      	mov	r4, r7
 801375c:	687f      	ldr	r7, [r7, #4]
 801375e:	e7b6      	b.n	80136ce <_malloc_r+0x4a>
 8013760:	461a      	mov	r2, r3
 8013762:	685b      	ldr	r3, [r3, #4]
 8013764:	42a3      	cmp	r3, r4
 8013766:	d1fb      	bne.n	8013760 <_malloc_r+0xdc>
 8013768:	2300      	movs	r3, #0
 801376a:	6053      	str	r3, [r2, #4]
 801376c:	e7de      	b.n	801372c <_malloc_r+0xa8>
 801376e:	230c      	movs	r3, #12
 8013770:	6033      	str	r3, [r6, #0]
 8013772:	4630      	mov	r0, r6
 8013774:	f000 f80c 	bl	8013790 <__malloc_unlock>
 8013778:	e794      	b.n	80136a4 <_malloc_r+0x20>
 801377a:	6005      	str	r5, [r0, #0]
 801377c:	e7d6      	b.n	801372c <_malloc_r+0xa8>
 801377e:	bf00      	nop
 8013780:	2400278c 	.word	0x2400278c

08013784 <__malloc_lock>:
 8013784:	4801      	ldr	r0, [pc, #4]	@ (801378c <__malloc_lock+0x8>)
 8013786:	f7ff b926 	b.w	80129d6 <__retarget_lock_acquire_recursive>
 801378a:	bf00      	nop
 801378c:	24002784 	.word	0x24002784

08013790 <__malloc_unlock>:
 8013790:	4801      	ldr	r0, [pc, #4]	@ (8013798 <__malloc_unlock+0x8>)
 8013792:	f7ff b921 	b.w	80129d8 <__retarget_lock_release_recursive>
 8013796:	bf00      	nop
 8013798:	24002784 	.word	0x24002784

0801379c <_Balloc>:
 801379c:	b570      	push	{r4, r5, r6, lr}
 801379e:	69c6      	ldr	r6, [r0, #28]
 80137a0:	4604      	mov	r4, r0
 80137a2:	460d      	mov	r5, r1
 80137a4:	b976      	cbnz	r6, 80137c4 <_Balloc+0x28>
 80137a6:	2010      	movs	r0, #16
 80137a8:	f7ff ff42 	bl	8013630 <malloc>
 80137ac:	4602      	mov	r2, r0
 80137ae:	61e0      	str	r0, [r4, #28]
 80137b0:	b920      	cbnz	r0, 80137bc <_Balloc+0x20>
 80137b2:	4b18      	ldr	r3, [pc, #96]	@ (8013814 <_Balloc+0x78>)
 80137b4:	4818      	ldr	r0, [pc, #96]	@ (8013818 <_Balloc+0x7c>)
 80137b6:	216b      	movs	r1, #107	@ 0x6b
 80137b8:	f000 fdae 	bl	8014318 <__assert_func>
 80137bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80137c0:	6006      	str	r6, [r0, #0]
 80137c2:	60c6      	str	r6, [r0, #12]
 80137c4:	69e6      	ldr	r6, [r4, #28]
 80137c6:	68f3      	ldr	r3, [r6, #12]
 80137c8:	b183      	cbz	r3, 80137ec <_Balloc+0x50>
 80137ca:	69e3      	ldr	r3, [r4, #28]
 80137cc:	68db      	ldr	r3, [r3, #12]
 80137ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80137d2:	b9b8      	cbnz	r0, 8013804 <_Balloc+0x68>
 80137d4:	2101      	movs	r1, #1
 80137d6:	fa01 f605 	lsl.w	r6, r1, r5
 80137da:	1d72      	adds	r2, r6, #5
 80137dc:	0092      	lsls	r2, r2, #2
 80137de:	4620      	mov	r0, r4
 80137e0:	f000 fdb8 	bl	8014354 <_calloc_r>
 80137e4:	b160      	cbz	r0, 8013800 <_Balloc+0x64>
 80137e6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80137ea:	e00e      	b.n	801380a <_Balloc+0x6e>
 80137ec:	2221      	movs	r2, #33	@ 0x21
 80137ee:	2104      	movs	r1, #4
 80137f0:	4620      	mov	r0, r4
 80137f2:	f000 fdaf 	bl	8014354 <_calloc_r>
 80137f6:	69e3      	ldr	r3, [r4, #28]
 80137f8:	60f0      	str	r0, [r6, #12]
 80137fa:	68db      	ldr	r3, [r3, #12]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d1e4      	bne.n	80137ca <_Balloc+0x2e>
 8013800:	2000      	movs	r0, #0
 8013802:	bd70      	pop	{r4, r5, r6, pc}
 8013804:	6802      	ldr	r2, [r0, #0]
 8013806:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801380a:	2300      	movs	r3, #0
 801380c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013810:	e7f7      	b.n	8013802 <_Balloc+0x66>
 8013812:	bf00      	nop
 8013814:	08014afd 	.word	0x08014afd
 8013818:	08014b7d 	.word	0x08014b7d

0801381c <_Bfree>:
 801381c:	b570      	push	{r4, r5, r6, lr}
 801381e:	69c6      	ldr	r6, [r0, #28]
 8013820:	4605      	mov	r5, r0
 8013822:	460c      	mov	r4, r1
 8013824:	b976      	cbnz	r6, 8013844 <_Bfree+0x28>
 8013826:	2010      	movs	r0, #16
 8013828:	f7ff ff02 	bl	8013630 <malloc>
 801382c:	4602      	mov	r2, r0
 801382e:	61e8      	str	r0, [r5, #28]
 8013830:	b920      	cbnz	r0, 801383c <_Bfree+0x20>
 8013832:	4b09      	ldr	r3, [pc, #36]	@ (8013858 <_Bfree+0x3c>)
 8013834:	4809      	ldr	r0, [pc, #36]	@ (801385c <_Bfree+0x40>)
 8013836:	218f      	movs	r1, #143	@ 0x8f
 8013838:	f000 fd6e 	bl	8014318 <__assert_func>
 801383c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013840:	6006      	str	r6, [r0, #0]
 8013842:	60c6      	str	r6, [r0, #12]
 8013844:	b13c      	cbz	r4, 8013856 <_Bfree+0x3a>
 8013846:	69eb      	ldr	r3, [r5, #28]
 8013848:	6862      	ldr	r2, [r4, #4]
 801384a:	68db      	ldr	r3, [r3, #12]
 801384c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013850:	6021      	str	r1, [r4, #0]
 8013852:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013856:	bd70      	pop	{r4, r5, r6, pc}
 8013858:	08014afd 	.word	0x08014afd
 801385c:	08014b7d 	.word	0x08014b7d

08013860 <__multadd>:
 8013860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013864:	690d      	ldr	r5, [r1, #16]
 8013866:	4607      	mov	r7, r0
 8013868:	460c      	mov	r4, r1
 801386a:	461e      	mov	r6, r3
 801386c:	f101 0c14 	add.w	ip, r1, #20
 8013870:	2000      	movs	r0, #0
 8013872:	f8dc 3000 	ldr.w	r3, [ip]
 8013876:	b299      	uxth	r1, r3
 8013878:	fb02 6101 	mla	r1, r2, r1, r6
 801387c:	0c1e      	lsrs	r6, r3, #16
 801387e:	0c0b      	lsrs	r3, r1, #16
 8013880:	fb02 3306 	mla	r3, r2, r6, r3
 8013884:	b289      	uxth	r1, r1
 8013886:	3001      	adds	r0, #1
 8013888:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801388c:	4285      	cmp	r5, r0
 801388e:	f84c 1b04 	str.w	r1, [ip], #4
 8013892:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013896:	dcec      	bgt.n	8013872 <__multadd+0x12>
 8013898:	b30e      	cbz	r6, 80138de <__multadd+0x7e>
 801389a:	68a3      	ldr	r3, [r4, #8]
 801389c:	42ab      	cmp	r3, r5
 801389e:	dc19      	bgt.n	80138d4 <__multadd+0x74>
 80138a0:	6861      	ldr	r1, [r4, #4]
 80138a2:	4638      	mov	r0, r7
 80138a4:	3101      	adds	r1, #1
 80138a6:	f7ff ff79 	bl	801379c <_Balloc>
 80138aa:	4680      	mov	r8, r0
 80138ac:	b928      	cbnz	r0, 80138ba <__multadd+0x5a>
 80138ae:	4602      	mov	r2, r0
 80138b0:	4b0c      	ldr	r3, [pc, #48]	@ (80138e4 <__multadd+0x84>)
 80138b2:	480d      	ldr	r0, [pc, #52]	@ (80138e8 <__multadd+0x88>)
 80138b4:	21ba      	movs	r1, #186	@ 0xba
 80138b6:	f000 fd2f 	bl	8014318 <__assert_func>
 80138ba:	6922      	ldr	r2, [r4, #16]
 80138bc:	3202      	adds	r2, #2
 80138be:	f104 010c 	add.w	r1, r4, #12
 80138c2:	0092      	lsls	r2, r2, #2
 80138c4:	300c      	adds	r0, #12
 80138c6:	f000 fd19 	bl	80142fc <memcpy>
 80138ca:	4621      	mov	r1, r4
 80138cc:	4638      	mov	r0, r7
 80138ce:	f7ff ffa5 	bl	801381c <_Bfree>
 80138d2:	4644      	mov	r4, r8
 80138d4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80138d8:	3501      	adds	r5, #1
 80138da:	615e      	str	r6, [r3, #20]
 80138dc:	6125      	str	r5, [r4, #16]
 80138de:	4620      	mov	r0, r4
 80138e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80138e4:	08014b6c 	.word	0x08014b6c
 80138e8:	08014b7d 	.word	0x08014b7d

080138ec <__hi0bits>:
 80138ec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80138f0:	4603      	mov	r3, r0
 80138f2:	bf36      	itet	cc
 80138f4:	0403      	lslcc	r3, r0, #16
 80138f6:	2000      	movcs	r0, #0
 80138f8:	2010      	movcc	r0, #16
 80138fa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80138fe:	bf3c      	itt	cc
 8013900:	021b      	lslcc	r3, r3, #8
 8013902:	3008      	addcc	r0, #8
 8013904:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013908:	bf3c      	itt	cc
 801390a:	011b      	lslcc	r3, r3, #4
 801390c:	3004      	addcc	r0, #4
 801390e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013912:	bf3c      	itt	cc
 8013914:	009b      	lslcc	r3, r3, #2
 8013916:	3002      	addcc	r0, #2
 8013918:	2b00      	cmp	r3, #0
 801391a:	db05      	blt.n	8013928 <__hi0bits+0x3c>
 801391c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013920:	f100 0001 	add.w	r0, r0, #1
 8013924:	bf08      	it	eq
 8013926:	2020      	moveq	r0, #32
 8013928:	4770      	bx	lr

0801392a <__lo0bits>:
 801392a:	6803      	ldr	r3, [r0, #0]
 801392c:	4602      	mov	r2, r0
 801392e:	f013 0007 	ands.w	r0, r3, #7
 8013932:	d00b      	beq.n	801394c <__lo0bits+0x22>
 8013934:	07d9      	lsls	r1, r3, #31
 8013936:	d421      	bmi.n	801397c <__lo0bits+0x52>
 8013938:	0798      	lsls	r0, r3, #30
 801393a:	bf49      	itett	mi
 801393c:	085b      	lsrmi	r3, r3, #1
 801393e:	089b      	lsrpl	r3, r3, #2
 8013940:	2001      	movmi	r0, #1
 8013942:	6013      	strmi	r3, [r2, #0]
 8013944:	bf5c      	itt	pl
 8013946:	6013      	strpl	r3, [r2, #0]
 8013948:	2002      	movpl	r0, #2
 801394a:	4770      	bx	lr
 801394c:	b299      	uxth	r1, r3
 801394e:	b909      	cbnz	r1, 8013954 <__lo0bits+0x2a>
 8013950:	0c1b      	lsrs	r3, r3, #16
 8013952:	2010      	movs	r0, #16
 8013954:	b2d9      	uxtb	r1, r3
 8013956:	b909      	cbnz	r1, 801395c <__lo0bits+0x32>
 8013958:	3008      	adds	r0, #8
 801395a:	0a1b      	lsrs	r3, r3, #8
 801395c:	0719      	lsls	r1, r3, #28
 801395e:	bf04      	itt	eq
 8013960:	091b      	lsreq	r3, r3, #4
 8013962:	3004      	addeq	r0, #4
 8013964:	0799      	lsls	r1, r3, #30
 8013966:	bf04      	itt	eq
 8013968:	089b      	lsreq	r3, r3, #2
 801396a:	3002      	addeq	r0, #2
 801396c:	07d9      	lsls	r1, r3, #31
 801396e:	d403      	bmi.n	8013978 <__lo0bits+0x4e>
 8013970:	085b      	lsrs	r3, r3, #1
 8013972:	f100 0001 	add.w	r0, r0, #1
 8013976:	d003      	beq.n	8013980 <__lo0bits+0x56>
 8013978:	6013      	str	r3, [r2, #0]
 801397a:	4770      	bx	lr
 801397c:	2000      	movs	r0, #0
 801397e:	4770      	bx	lr
 8013980:	2020      	movs	r0, #32
 8013982:	4770      	bx	lr

08013984 <__i2b>:
 8013984:	b510      	push	{r4, lr}
 8013986:	460c      	mov	r4, r1
 8013988:	2101      	movs	r1, #1
 801398a:	f7ff ff07 	bl	801379c <_Balloc>
 801398e:	4602      	mov	r2, r0
 8013990:	b928      	cbnz	r0, 801399e <__i2b+0x1a>
 8013992:	4b05      	ldr	r3, [pc, #20]	@ (80139a8 <__i2b+0x24>)
 8013994:	4805      	ldr	r0, [pc, #20]	@ (80139ac <__i2b+0x28>)
 8013996:	f240 1145 	movw	r1, #325	@ 0x145
 801399a:	f000 fcbd 	bl	8014318 <__assert_func>
 801399e:	2301      	movs	r3, #1
 80139a0:	6144      	str	r4, [r0, #20]
 80139a2:	6103      	str	r3, [r0, #16]
 80139a4:	bd10      	pop	{r4, pc}
 80139a6:	bf00      	nop
 80139a8:	08014b6c 	.word	0x08014b6c
 80139ac:	08014b7d 	.word	0x08014b7d

080139b0 <__multiply>:
 80139b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139b4:	4614      	mov	r4, r2
 80139b6:	690a      	ldr	r2, [r1, #16]
 80139b8:	6923      	ldr	r3, [r4, #16]
 80139ba:	429a      	cmp	r2, r3
 80139bc:	bfa8      	it	ge
 80139be:	4623      	movge	r3, r4
 80139c0:	460f      	mov	r7, r1
 80139c2:	bfa4      	itt	ge
 80139c4:	460c      	movge	r4, r1
 80139c6:	461f      	movge	r7, r3
 80139c8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80139cc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80139d0:	68a3      	ldr	r3, [r4, #8]
 80139d2:	6861      	ldr	r1, [r4, #4]
 80139d4:	eb0a 0609 	add.w	r6, sl, r9
 80139d8:	42b3      	cmp	r3, r6
 80139da:	b085      	sub	sp, #20
 80139dc:	bfb8      	it	lt
 80139de:	3101      	addlt	r1, #1
 80139e0:	f7ff fedc 	bl	801379c <_Balloc>
 80139e4:	b930      	cbnz	r0, 80139f4 <__multiply+0x44>
 80139e6:	4602      	mov	r2, r0
 80139e8:	4b44      	ldr	r3, [pc, #272]	@ (8013afc <__multiply+0x14c>)
 80139ea:	4845      	ldr	r0, [pc, #276]	@ (8013b00 <__multiply+0x150>)
 80139ec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80139f0:	f000 fc92 	bl	8014318 <__assert_func>
 80139f4:	f100 0514 	add.w	r5, r0, #20
 80139f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80139fc:	462b      	mov	r3, r5
 80139fe:	2200      	movs	r2, #0
 8013a00:	4543      	cmp	r3, r8
 8013a02:	d321      	bcc.n	8013a48 <__multiply+0x98>
 8013a04:	f107 0114 	add.w	r1, r7, #20
 8013a08:	f104 0214 	add.w	r2, r4, #20
 8013a0c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013a10:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013a14:	9302      	str	r3, [sp, #8]
 8013a16:	1b13      	subs	r3, r2, r4
 8013a18:	3b15      	subs	r3, #21
 8013a1a:	f023 0303 	bic.w	r3, r3, #3
 8013a1e:	3304      	adds	r3, #4
 8013a20:	f104 0715 	add.w	r7, r4, #21
 8013a24:	42ba      	cmp	r2, r7
 8013a26:	bf38      	it	cc
 8013a28:	2304      	movcc	r3, #4
 8013a2a:	9301      	str	r3, [sp, #4]
 8013a2c:	9b02      	ldr	r3, [sp, #8]
 8013a2e:	9103      	str	r1, [sp, #12]
 8013a30:	428b      	cmp	r3, r1
 8013a32:	d80c      	bhi.n	8013a4e <__multiply+0x9e>
 8013a34:	2e00      	cmp	r6, #0
 8013a36:	dd03      	ble.n	8013a40 <__multiply+0x90>
 8013a38:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d05b      	beq.n	8013af8 <__multiply+0x148>
 8013a40:	6106      	str	r6, [r0, #16]
 8013a42:	b005      	add	sp, #20
 8013a44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a48:	f843 2b04 	str.w	r2, [r3], #4
 8013a4c:	e7d8      	b.n	8013a00 <__multiply+0x50>
 8013a4e:	f8b1 a000 	ldrh.w	sl, [r1]
 8013a52:	f1ba 0f00 	cmp.w	sl, #0
 8013a56:	d024      	beq.n	8013aa2 <__multiply+0xf2>
 8013a58:	f104 0e14 	add.w	lr, r4, #20
 8013a5c:	46a9      	mov	r9, r5
 8013a5e:	f04f 0c00 	mov.w	ip, #0
 8013a62:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013a66:	f8d9 3000 	ldr.w	r3, [r9]
 8013a6a:	fa1f fb87 	uxth.w	fp, r7
 8013a6e:	b29b      	uxth	r3, r3
 8013a70:	fb0a 330b 	mla	r3, sl, fp, r3
 8013a74:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013a78:	f8d9 7000 	ldr.w	r7, [r9]
 8013a7c:	4463      	add	r3, ip
 8013a7e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013a82:	fb0a c70b 	mla	r7, sl, fp, ip
 8013a86:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013a8a:	b29b      	uxth	r3, r3
 8013a8c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013a90:	4572      	cmp	r2, lr
 8013a92:	f849 3b04 	str.w	r3, [r9], #4
 8013a96:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013a9a:	d8e2      	bhi.n	8013a62 <__multiply+0xb2>
 8013a9c:	9b01      	ldr	r3, [sp, #4]
 8013a9e:	f845 c003 	str.w	ip, [r5, r3]
 8013aa2:	9b03      	ldr	r3, [sp, #12]
 8013aa4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013aa8:	3104      	adds	r1, #4
 8013aaa:	f1b9 0f00 	cmp.w	r9, #0
 8013aae:	d021      	beq.n	8013af4 <__multiply+0x144>
 8013ab0:	682b      	ldr	r3, [r5, #0]
 8013ab2:	f104 0c14 	add.w	ip, r4, #20
 8013ab6:	46ae      	mov	lr, r5
 8013ab8:	f04f 0a00 	mov.w	sl, #0
 8013abc:	f8bc b000 	ldrh.w	fp, [ip]
 8013ac0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013ac4:	fb09 770b 	mla	r7, r9, fp, r7
 8013ac8:	4457      	add	r7, sl
 8013aca:	b29b      	uxth	r3, r3
 8013acc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013ad0:	f84e 3b04 	str.w	r3, [lr], #4
 8013ad4:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013ad8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013adc:	f8be 3000 	ldrh.w	r3, [lr]
 8013ae0:	fb09 330a 	mla	r3, r9, sl, r3
 8013ae4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013ae8:	4562      	cmp	r2, ip
 8013aea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013aee:	d8e5      	bhi.n	8013abc <__multiply+0x10c>
 8013af0:	9f01      	ldr	r7, [sp, #4]
 8013af2:	51eb      	str	r3, [r5, r7]
 8013af4:	3504      	adds	r5, #4
 8013af6:	e799      	b.n	8013a2c <__multiply+0x7c>
 8013af8:	3e01      	subs	r6, #1
 8013afa:	e79b      	b.n	8013a34 <__multiply+0x84>
 8013afc:	08014b6c 	.word	0x08014b6c
 8013b00:	08014b7d 	.word	0x08014b7d

08013b04 <__pow5mult>:
 8013b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013b08:	4615      	mov	r5, r2
 8013b0a:	f012 0203 	ands.w	r2, r2, #3
 8013b0e:	4607      	mov	r7, r0
 8013b10:	460e      	mov	r6, r1
 8013b12:	d007      	beq.n	8013b24 <__pow5mult+0x20>
 8013b14:	4c25      	ldr	r4, [pc, #148]	@ (8013bac <__pow5mult+0xa8>)
 8013b16:	3a01      	subs	r2, #1
 8013b18:	2300      	movs	r3, #0
 8013b1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013b1e:	f7ff fe9f 	bl	8013860 <__multadd>
 8013b22:	4606      	mov	r6, r0
 8013b24:	10ad      	asrs	r5, r5, #2
 8013b26:	d03d      	beq.n	8013ba4 <__pow5mult+0xa0>
 8013b28:	69fc      	ldr	r4, [r7, #28]
 8013b2a:	b97c      	cbnz	r4, 8013b4c <__pow5mult+0x48>
 8013b2c:	2010      	movs	r0, #16
 8013b2e:	f7ff fd7f 	bl	8013630 <malloc>
 8013b32:	4602      	mov	r2, r0
 8013b34:	61f8      	str	r0, [r7, #28]
 8013b36:	b928      	cbnz	r0, 8013b44 <__pow5mult+0x40>
 8013b38:	4b1d      	ldr	r3, [pc, #116]	@ (8013bb0 <__pow5mult+0xac>)
 8013b3a:	481e      	ldr	r0, [pc, #120]	@ (8013bb4 <__pow5mult+0xb0>)
 8013b3c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013b40:	f000 fbea 	bl	8014318 <__assert_func>
 8013b44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013b48:	6004      	str	r4, [r0, #0]
 8013b4a:	60c4      	str	r4, [r0, #12]
 8013b4c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013b50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013b54:	b94c      	cbnz	r4, 8013b6a <__pow5mult+0x66>
 8013b56:	f240 2171 	movw	r1, #625	@ 0x271
 8013b5a:	4638      	mov	r0, r7
 8013b5c:	f7ff ff12 	bl	8013984 <__i2b>
 8013b60:	2300      	movs	r3, #0
 8013b62:	f8c8 0008 	str.w	r0, [r8, #8]
 8013b66:	4604      	mov	r4, r0
 8013b68:	6003      	str	r3, [r0, #0]
 8013b6a:	f04f 0900 	mov.w	r9, #0
 8013b6e:	07eb      	lsls	r3, r5, #31
 8013b70:	d50a      	bpl.n	8013b88 <__pow5mult+0x84>
 8013b72:	4631      	mov	r1, r6
 8013b74:	4622      	mov	r2, r4
 8013b76:	4638      	mov	r0, r7
 8013b78:	f7ff ff1a 	bl	80139b0 <__multiply>
 8013b7c:	4631      	mov	r1, r6
 8013b7e:	4680      	mov	r8, r0
 8013b80:	4638      	mov	r0, r7
 8013b82:	f7ff fe4b 	bl	801381c <_Bfree>
 8013b86:	4646      	mov	r6, r8
 8013b88:	106d      	asrs	r5, r5, #1
 8013b8a:	d00b      	beq.n	8013ba4 <__pow5mult+0xa0>
 8013b8c:	6820      	ldr	r0, [r4, #0]
 8013b8e:	b938      	cbnz	r0, 8013ba0 <__pow5mult+0x9c>
 8013b90:	4622      	mov	r2, r4
 8013b92:	4621      	mov	r1, r4
 8013b94:	4638      	mov	r0, r7
 8013b96:	f7ff ff0b 	bl	80139b0 <__multiply>
 8013b9a:	6020      	str	r0, [r4, #0]
 8013b9c:	f8c0 9000 	str.w	r9, [r0]
 8013ba0:	4604      	mov	r4, r0
 8013ba2:	e7e4      	b.n	8013b6e <__pow5mult+0x6a>
 8013ba4:	4630      	mov	r0, r6
 8013ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013baa:	bf00      	nop
 8013bac:	08014bd8 	.word	0x08014bd8
 8013bb0:	08014afd 	.word	0x08014afd
 8013bb4:	08014b7d 	.word	0x08014b7d

08013bb8 <__lshift>:
 8013bb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013bbc:	460c      	mov	r4, r1
 8013bbe:	6849      	ldr	r1, [r1, #4]
 8013bc0:	6923      	ldr	r3, [r4, #16]
 8013bc2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013bc6:	68a3      	ldr	r3, [r4, #8]
 8013bc8:	4607      	mov	r7, r0
 8013bca:	4691      	mov	r9, r2
 8013bcc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013bd0:	f108 0601 	add.w	r6, r8, #1
 8013bd4:	42b3      	cmp	r3, r6
 8013bd6:	db0b      	blt.n	8013bf0 <__lshift+0x38>
 8013bd8:	4638      	mov	r0, r7
 8013bda:	f7ff fddf 	bl	801379c <_Balloc>
 8013bde:	4605      	mov	r5, r0
 8013be0:	b948      	cbnz	r0, 8013bf6 <__lshift+0x3e>
 8013be2:	4602      	mov	r2, r0
 8013be4:	4b28      	ldr	r3, [pc, #160]	@ (8013c88 <__lshift+0xd0>)
 8013be6:	4829      	ldr	r0, [pc, #164]	@ (8013c8c <__lshift+0xd4>)
 8013be8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013bec:	f000 fb94 	bl	8014318 <__assert_func>
 8013bf0:	3101      	adds	r1, #1
 8013bf2:	005b      	lsls	r3, r3, #1
 8013bf4:	e7ee      	b.n	8013bd4 <__lshift+0x1c>
 8013bf6:	2300      	movs	r3, #0
 8013bf8:	f100 0114 	add.w	r1, r0, #20
 8013bfc:	f100 0210 	add.w	r2, r0, #16
 8013c00:	4618      	mov	r0, r3
 8013c02:	4553      	cmp	r3, sl
 8013c04:	db33      	blt.n	8013c6e <__lshift+0xb6>
 8013c06:	6920      	ldr	r0, [r4, #16]
 8013c08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013c0c:	f104 0314 	add.w	r3, r4, #20
 8013c10:	f019 091f 	ands.w	r9, r9, #31
 8013c14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013c18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013c1c:	d02b      	beq.n	8013c76 <__lshift+0xbe>
 8013c1e:	f1c9 0e20 	rsb	lr, r9, #32
 8013c22:	468a      	mov	sl, r1
 8013c24:	2200      	movs	r2, #0
 8013c26:	6818      	ldr	r0, [r3, #0]
 8013c28:	fa00 f009 	lsl.w	r0, r0, r9
 8013c2c:	4310      	orrs	r0, r2
 8013c2e:	f84a 0b04 	str.w	r0, [sl], #4
 8013c32:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c36:	459c      	cmp	ip, r3
 8013c38:	fa22 f20e 	lsr.w	r2, r2, lr
 8013c3c:	d8f3      	bhi.n	8013c26 <__lshift+0x6e>
 8013c3e:	ebac 0304 	sub.w	r3, ip, r4
 8013c42:	3b15      	subs	r3, #21
 8013c44:	f023 0303 	bic.w	r3, r3, #3
 8013c48:	3304      	adds	r3, #4
 8013c4a:	f104 0015 	add.w	r0, r4, #21
 8013c4e:	4584      	cmp	ip, r0
 8013c50:	bf38      	it	cc
 8013c52:	2304      	movcc	r3, #4
 8013c54:	50ca      	str	r2, [r1, r3]
 8013c56:	b10a      	cbz	r2, 8013c5c <__lshift+0xa4>
 8013c58:	f108 0602 	add.w	r6, r8, #2
 8013c5c:	3e01      	subs	r6, #1
 8013c5e:	4638      	mov	r0, r7
 8013c60:	612e      	str	r6, [r5, #16]
 8013c62:	4621      	mov	r1, r4
 8013c64:	f7ff fdda 	bl	801381c <_Bfree>
 8013c68:	4628      	mov	r0, r5
 8013c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8013c72:	3301      	adds	r3, #1
 8013c74:	e7c5      	b.n	8013c02 <__lshift+0x4a>
 8013c76:	3904      	subs	r1, #4
 8013c78:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013c80:	459c      	cmp	ip, r3
 8013c82:	d8f9      	bhi.n	8013c78 <__lshift+0xc0>
 8013c84:	e7ea      	b.n	8013c5c <__lshift+0xa4>
 8013c86:	bf00      	nop
 8013c88:	08014b6c 	.word	0x08014b6c
 8013c8c:	08014b7d 	.word	0x08014b7d

08013c90 <__mcmp>:
 8013c90:	690a      	ldr	r2, [r1, #16]
 8013c92:	4603      	mov	r3, r0
 8013c94:	6900      	ldr	r0, [r0, #16]
 8013c96:	1a80      	subs	r0, r0, r2
 8013c98:	b530      	push	{r4, r5, lr}
 8013c9a:	d10e      	bne.n	8013cba <__mcmp+0x2a>
 8013c9c:	3314      	adds	r3, #20
 8013c9e:	3114      	adds	r1, #20
 8013ca0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013ca4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013ca8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013cac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013cb0:	4295      	cmp	r5, r2
 8013cb2:	d003      	beq.n	8013cbc <__mcmp+0x2c>
 8013cb4:	d205      	bcs.n	8013cc2 <__mcmp+0x32>
 8013cb6:	f04f 30ff 	mov.w	r0, #4294967295
 8013cba:	bd30      	pop	{r4, r5, pc}
 8013cbc:	42a3      	cmp	r3, r4
 8013cbe:	d3f3      	bcc.n	8013ca8 <__mcmp+0x18>
 8013cc0:	e7fb      	b.n	8013cba <__mcmp+0x2a>
 8013cc2:	2001      	movs	r0, #1
 8013cc4:	e7f9      	b.n	8013cba <__mcmp+0x2a>
	...

08013cc8 <__mdiff>:
 8013cc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ccc:	4689      	mov	r9, r1
 8013cce:	4606      	mov	r6, r0
 8013cd0:	4611      	mov	r1, r2
 8013cd2:	4648      	mov	r0, r9
 8013cd4:	4614      	mov	r4, r2
 8013cd6:	f7ff ffdb 	bl	8013c90 <__mcmp>
 8013cda:	1e05      	subs	r5, r0, #0
 8013cdc:	d112      	bne.n	8013d04 <__mdiff+0x3c>
 8013cde:	4629      	mov	r1, r5
 8013ce0:	4630      	mov	r0, r6
 8013ce2:	f7ff fd5b 	bl	801379c <_Balloc>
 8013ce6:	4602      	mov	r2, r0
 8013ce8:	b928      	cbnz	r0, 8013cf6 <__mdiff+0x2e>
 8013cea:	4b3f      	ldr	r3, [pc, #252]	@ (8013de8 <__mdiff+0x120>)
 8013cec:	f240 2137 	movw	r1, #567	@ 0x237
 8013cf0:	483e      	ldr	r0, [pc, #248]	@ (8013dec <__mdiff+0x124>)
 8013cf2:	f000 fb11 	bl	8014318 <__assert_func>
 8013cf6:	2301      	movs	r3, #1
 8013cf8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013cfc:	4610      	mov	r0, r2
 8013cfe:	b003      	add	sp, #12
 8013d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d04:	bfbc      	itt	lt
 8013d06:	464b      	movlt	r3, r9
 8013d08:	46a1      	movlt	r9, r4
 8013d0a:	4630      	mov	r0, r6
 8013d0c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013d10:	bfba      	itte	lt
 8013d12:	461c      	movlt	r4, r3
 8013d14:	2501      	movlt	r5, #1
 8013d16:	2500      	movge	r5, #0
 8013d18:	f7ff fd40 	bl	801379c <_Balloc>
 8013d1c:	4602      	mov	r2, r0
 8013d1e:	b918      	cbnz	r0, 8013d28 <__mdiff+0x60>
 8013d20:	4b31      	ldr	r3, [pc, #196]	@ (8013de8 <__mdiff+0x120>)
 8013d22:	f240 2145 	movw	r1, #581	@ 0x245
 8013d26:	e7e3      	b.n	8013cf0 <__mdiff+0x28>
 8013d28:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013d2c:	6926      	ldr	r6, [r4, #16]
 8013d2e:	60c5      	str	r5, [r0, #12]
 8013d30:	f109 0310 	add.w	r3, r9, #16
 8013d34:	f109 0514 	add.w	r5, r9, #20
 8013d38:	f104 0e14 	add.w	lr, r4, #20
 8013d3c:	f100 0b14 	add.w	fp, r0, #20
 8013d40:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013d44:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013d48:	9301      	str	r3, [sp, #4]
 8013d4a:	46d9      	mov	r9, fp
 8013d4c:	f04f 0c00 	mov.w	ip, #0
 8013d50:	9b01      	ldr	r3, [sp, #4]
 8013d52:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013d56:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013d5a:	9301      	str	r3, [sp, #4]
 8013d5c:	fa1f f38a 	uxth.w	r3, sl
 8013d60:	4619      	mov	r1, r3
 8013d62:	b283      	uxth	r3, r0
 8013d64:	1acb      	subs	r3, r1, r3
 8013d66:	0c00      	lsrs	r0, r0, #16
 8013d68:	4463      	add	r3, ip
 8013d6a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013d6e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013d72:	b29b      	uxth	r3, r3
 8013d74:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013d78:	4576      	cmp	r6, lr
 8013d7a:	f849 3b04 	str.w	r3, [r9], #4
 8013d7e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013d82:	d8e5      	bhi.n	8013d50 <__mdiff+0x88>
 8013d84:	1b33      	subs	r3, r6, r4
 8013d86:	3b15      	subs	r3, #21
 8013d88:	f023 0303 	bic.w	r3, r3, #3
 8013d8c:	3415      	adds	r4, #21
 8013d8e:	3304      	adds	r3, #4
 8013d90:	42a6      	cmp	r6, r4
 8013d92:	bf38      	it	cc
 8013d94:	2304      	movcc	r3, #4
 8013d96:	441d      	add	r5, r3
 8013d98:	445b      	add	r3, fp
 8013d9a:	461e      	mov	r6, r3
 8013d9c:	462c      	mov	r4, r5
 8013d9e:	4544      	cmp	r4, r8
 8013da0:	d30e      	bcc.n	8013dc0 <__mdiff+0xf8>
 8013da2:	f108 0103 	add.w	r1, r8, #3
 8013da6:	1b49      	subs	r1, r1, r5
 8013da8:	f021 0103 	bic.w	r1, r1, #3
 8013dac:	3d03      	subs	r5, #3
 8013dae:	45a8      	cmp	r8, r5
 8013db0:	bf38      	it	cc
 8013db2:	2100      	movcc	r1, #0
 8013db4:	440b      	add	r3, r1
 8013db6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013dba:	b191      	cbz	r1, 8013de2 <__mdiff+0x11a>
 8013dbc:	6117      	str	r7, [r2, #16]
 8013dbe:	e79d      	b.n	8013cfc <__mdiff+0x34>
 8013dc0:	f854 1b04 	ldr.w	r1, [r4], #4
 8013dc4:	46e6      	mov	lr, ip
 8013dc6:	0c08      	lsrs	r0, r1, #16
 8013dc8:	fa1c fc81 	uxtah	ip, ip, r1
 8013dcc:	4471      	add	r1, lr
 8013dce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013dd2:	b289      	uxth	r1, r1
 8013dd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013dd8:	f846 1b04 	str.w	r1, [r6], #4
 8013ddc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013de0:	e7dd      	b.n	8013d9e <__mdiff+0xd6>
 8013de2:	3f01      	subs	r7, #1
 8013de4:	e7e7      	b.n	8013db6 <__mdiff+0xee>
 8013de6:	bf00      	nop
 8013de8:	08014b6c 	.word	0x08014b6c
 8013dec:	08014b7d 	.word	0x08014b7d

08013df0 <__d2b>:
 8013df0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013df4:	460f      	mov	r7, r1
 8013df6:	2101      	movs	r1, #1
 8013df8:	ec59 8b10 	vmov	r8, r9, d0
 8013dfc:	4616      	mov	r6, r2
 8013dfe:	f7ff fccd 	bl	801379c <_Balloc>
 8013e02:	4604      	mov	r4, r0
 8013e04:	b930      	cbnz	r0, 8013e14 <__d2b+0x24>
 8013e06:	4602      	mov	r2, r0
 8013e08:	4b23      	ldr	r3, [pc, #140]	@ (8013e98 <__d2b+0xa8>)
 8013e0a:	4824      	ldr	r0, [pc, #144]	@ (8013e9c <__d2b+0xac>)
 8013e0c:	f240 310f 	movw	r1, #783	@ 0x30f
 8013e10:	f000 fa82 	bl	8014318 <__assert_func>
 8013e14:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013e18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013e1c:	b10d      	cbz	r5, 8013e22 <__d2b+0x32>
 8013e1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013e22:	9301      	str	r3, [sp, #4]
 8013e24:	f1b8 0300 	subs.w	r3, r8, #0
 8013e28:	d023      	beq.n	8013e72 <__d2b+0x82>
 8013e2a:	4668      	mov	r0, sp
 8013e2c:	9300      	str	r3, [sp, #0]
 8013e2e:	f7ff fd7c 	bl	801392a <__lo0bits>
 8013e32:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013e36:	b1d0      	cbz	r0, 8013e6e <__d2b+0x7e>
 8013e38:	f1c0 0320 	rsb	r3, r0, #32
 8013e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8013e40:	430b      	orrs	r3, r1
 8013e42:	40c2      	lsrs	r2, r0
 8013e44:	6163      	str	r3, [r4, #20]
 8013e46:	9201      	str	r2, [sp, #4]
 8013e48:	9b01      	ldr	r3, [sp, #4]
 8013e4a:	61a3      	str	r3, [r4, #24]
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	bf0c      	ite	eq
 8013e50:	2201      	moveq	r2, #1
 8013e52:	2202      	movne	r2, #2
 8013e54:	6122      	str	r2, [r4, #16]
 8013e56:	b1a5      	cbz	r5, 8013e82 <__d2b+0x92>
 8013e58:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013e5c:	4405      	add	r5, r0
 8013e5e:	603d      	str	r5, [r7, #0]
 8013e60:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013e64:	6030      	str	r0, [r6, #0]
 8013e66:	4620      	mov	r0, r4
 8013e68:	b003      	add	sp, #12
 8013e6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013e6e:	6161      	str	r1, [r4, #20]
 8013e70:	e7ea      	b.n	8013e48 <__d2b+0x58>
 8013e72:	a801      	add	r0, sp, #4
 8013e74:	f7ff fd59 	bl	801392a <__lo0bits>
 8013e78:	9b01      	ldr	r3, [sp, #4]
 8013e7a:	6163      	str	r3, [r4, #20]
 8013e7c:	3020      	adds	r0, #32
 8013e7e:	2201      	movs	r2, #1
 8013e80:	e7e8      	b.n	8013e54 <__d2b+0x64>
 8013e82:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013e86:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013e8a:	6038      	str	r0, [r7, #0]
 8013e8c:	6918      	ldr	r0, [r3, #16]
 8013e8e:	f7ff fd2d 	bl	80138ec <__hi0bits>
 8013e92:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013e96:	e7e5      	b.n	8013e64 <__d2b+0x74>
 8013e98:	08014b6c 	.word	0x08014b6c
 8013e9c:	08014b7d 	.word	0x08014b7d

08013ea0 <__ssputs_r>:
 8013ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013ea4:	688e      	ldr	r6, [r1, #8]
 8013ea6:	461f      	mov	r7, r3
 8013ea8:	42be      	cmp	r6, r7
 8013eaa:	680b      	ldr	r3, [r1, #0]
 8013eac:	4682      	mov	sl, r0
 8013eae:	460c      	mov	r4, r1
 8013eb0:	4690      	mov	r8, r2
 8013eb2:	d82d      	bhi.n	8013f10 <__ssputs_r+0x70>
 8013eb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013eb8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013ebc:	d026      	beq.n	8013f0c <__ssputs_r+0x6c>
 8013ebe:	6965      	ldr	r5, [r4, #20]
 8013ec0:	6909      	ldr	r1, [r1, #16]
 8013ec2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013ec6:	eba3 0901 	sub.w	r9, r3, r1
 8013eca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013ece:	1c7b      	adds	r3, r7, #1
 8013ed0:	444b      	add	r3, r9
 8013ed2:	106d      	asrs	r5, r5, #1
 8013ed4:	429d      	cmp	r5, r3
 8013ed6:	bf38      	it	cc
 8013ed8:	461d      	movcc	r5, r3
 8013eda:	0553      	lsls	r3, r2, #21
 8013edc:	d527      	bpl.n	8013f2e <__ssputs_r+0x8e>
 8013ede:	4629      	mov	r1, r5
 8013ee0:	f7ff fbd0 	bl	8013684 <_malloc_r>
 8013ee4:	4606      	mov	r6, r0
 8013ee6:	b360      	cbz	r0, 8013f42 <__ssputs_r+0xa2>
 8013ee8:	6921      	ldr	r1, [r4, #16]
 8013eea:	464a      	mov	r2, r9
 8013eec:	f000 fa06 	bl	80142fc <memcpy>
 8013ef0:	89a3      	ldrh	r3, [r4, #12]
 8013ef2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013ef6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013efa:	81a3      	strh	r3, [r4, #12]
 8013efc:	6126      	str	r6, [r4, #16]
 8013efe:	6165      	str	r5, [r4, #20]
 8013f00:	444e      	add	r6, r9
 8013f02:	eba5 0509 	sub.w	r5, r5, r9
 8013f06:	6026      	str	r6, [r4, #0]
 8013f08:	60a5      	str	r5, [r4, #8]
 8013f0a:	463e      	mov	r6, r7
 8013f0c:	42be      	cmp	r6, r7
 8013f0e:	d900      	bls.n	8013f12 <__ssputs_r+0x72>
 8013f10:	463e      	mov	r6, r7
 8013f12:	6820      	ldr	r0, [r4, #0]
 8013f14:	4632      	mov	r2, r6
 8013f16:	4641      	mov	r1, r8
 8013f18:	f000 f9c6 	bl	80142a8 <memmove>
 8013f1c:	68a3      	ldr	r3, [r4, #8]
 8013f1e:	1b9b      	subs	r3, r3, r6
 8013f20:	60a3      	str	r3, [r4, #8]
 8013f22:	6823      	ldr	r3, [r4, #0]
 8013f24:	4433      	add	r3, r6
 8013f26:	6023      	str	r3, [r4, #0]
 8013f28:	2000      	movs	r0, #0
 8013f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013f2e:	462a      	mov	r2, r5
 8013f30:	f000 fa36 	bl	80143a0 <_realloc_r>
 8013f34:	4606      	mov	r6, r0
 8013f36:	2800      	cmp	r0, #0
 8013f38:	d1e0      	bne.n	8013efc <__ssputs_r+0x5c>
 8013f3a:	6921      	ldr	r1, [r4, #16]
 8013f3c:	4650      	mov	r0, sl
 8013f3e:	f7ff fb2d 	bl	801359c <_free_r>
 8013f42:	230c      	movs	r3, #12
 8013f44:	f8ca 3000 	str.w	r3, [sl]
 8013f48:	89a3      	ldrh	r3, [r4, #12]
 8013f4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013f4e:	81a3      	strh	r3, [r4, #12]
 8013f50:	f04f 30ff 	mov.w	r0, #4294967295
 8013f54:	e7e9      	b.n	8013f2a <__ssputs_r+0x8a>
	...

08013f58 <_svfiprintf_r>:
 8013f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013f5c:	4698      	mov	r8, r3
 8013f5e:	898b      	ldrh	r3, [r1, #12]
 8013f60:	061b      	lsls	r3, r3, #24
 8013f62:	b09d      	sub	sp, #116	@ 0x74
 8013f64:	4607      	mov	r7, r0
 8013f66:	460d      	mov	r5, r1
 8013f68:	4614      	mov	r4, r2
 8013f6a:	d510      	bpl.n	8013f8e <_svfiprintf_r+0x36>
 8013f6c:	690b      	ldr	r3, [r1, #16]
 8013f6e:	b973      	cbnz	r3, 8013f8e <_svfiprintf_r+0x36>
 8013f70:	2140      	movs	r1, #64	@ 0x40
 8013f72:	f7ff fb87 	bl	8013684 <_malloc_r>
 8013f76:	6028      	str	r0, [r5, #0]
 8013f78:	6128      	str	r0, [r5, #16]
 8013f7a:	b930      	cbnz	r0, 8013f8a <_svfiprintf_r+0x32>
 8013f7c:	230c      	movs	r3, #12
 8013f7e:	603b      	str	r3, [r7, #0]
 8013f80:	f04f 30ff 	mov.w	r0, #4294967295
 8013f84:	b01d      	add	sp, #116	@ 0x74
 8013f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f8a:	2340      	movs	r3, #64	@ 0x40
 8013f8c:	616b      	str	r3, [r5, #20]
 8013f8e:	2300      	movs	r3, #0
 8013f90:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f92:	2320      	movs	r3, #32
 8013f94:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013f98:	f8cd 800c 	str.w	r8, [sp, #12]
 8013f9c:	2330      	movs	r3, #48	@ 0x30
 8013f9e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801413c <_svfiprintf_r+0x1e4>
 8013fa2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013fa6:	f04f 0901 	mov.w	r9, #1
 8013faa:	4623      	mov	r3, r4
 8013fac:	469a      	mov	sl, r3
 8013fae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013fb2:	b10a      	cbz	r2, 8013fb8 <_svfiprintf_r+0x60>
 8013fb4:	2a25      	cmp	r2, #37	@ 0x25
 8013fb6:	d1f9      	bne.n	8013fac <_svfiprintf_r+0x54>
 8013fb8:	ebba 0b04 	subs.w	fp, sl, r4
 8013fbc:	d00b      	beq.n	8013fd6 <_svfiprintf_r+0x7e>
 8013fbe:	465b      	mov	r3, fp
 8013fc0:	4622      	mov	r2, r4
 8013fc2:	4629      	mov	r1, r5
 8013fc4:	4638      	mov	r0, r7
 8013fc6:	f7ff ff6b 	bl	8013ea0 <__ssputs_r>
 8013fca:	3001      	adds	r0, #1
 8013fcc:	f000 80a7 	beq.w	801411e <_svfiprintf_r+0x1c6>
 8013fd0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013fd2:	445a      	add	r2, fp
 8013fd4:	9209      	str	r2, [sp, #36]	@ 0x24
 8013fd6:	f89a 3000 	ldrb.w	r3, [sl]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	f000 809f 	beq.w	801411e <_svfiprintf_r+0x1c6>
 8013fe0:	2300      	movs	r3, #0
 8013fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8013fe6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013fea:	f10a 0a01 	add.w	sl, sl, #1
 8013fee:	9304      	str	r3, [sp, #16]
 8013ff0:	9307      	str	r3, [sp, #28]
 8013ff2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013ff6:	931a      	str	r3, [sp, #104]	@ 0x68
 8013ff8:	4654      	mov	r4, sl
 8013ffa:	2205      	movs	r2, #5
 8013ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014000:	484e      	ldr	r0, [pc, #312]	@ (801413c <_svfiprintf_r+0x1e4>)
 8014002:	f7ec f96d 	bl	80002e0 <memchr>
 8014006:	9a04      	ldr	r2, [sp, #16]
 8014008:	b9d8      	cbnz	r0, 8014042 <_svfiprintf_r+0xea>
 801400a:	06d0      	lsls	r0, r2, #27
 801400c:	bf44      	itt	mi
 801400e:	2320      	movmi	r3, #32
 8014010:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014014:	0711      	lsls	r1, r2, #28
 8014016:	bf44      	itt	mi
 8014018:	232b      	movmi	r3, #43	@ 0x2b
 801401a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801401e:	f89a 3000 	ldrb.w	r3, [sl]
 8014022:	2b2a      	cmp	r3, #42	@ 0x2a
 8014024:	d015      	beq.n	8014052 <_svfiprintf_r+0xfa>
 8014026:	9a07      	ldr	r2, [sp, #28]
 8014028:	4654      	mov	r4, sl
 801402a:	2000      	movs	r0, #0
 801402c:	f04f 0c0a 	mov.w	ip, #10
 8014030:	4621      	mov	r1, r4
 8014032:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014036:	3b30      	subs	r3, #48	@ 0x30
 8014038:	2b09      	cmp	r3, #9
 801403a:	d94b      	bls.n	80140d4 <_svfiprintf_r+0x17c>
 801403c:	b1b0      	cbz	r0, 801406c <_svfiprintf_r+0x114>
 801403e:	9207      	str	r2, [sp, #28]
 8014040:	e014      	b.n	801406c <_svfiprintf_r+0x114>
 8014042:	eba0 0308 	sub.w	r3, r0, r8
 8014046:	fa09 f303 	lsl.w	r3, r9, r3
 801404a:	4313      	orrs	r3, r2
 801404c:	9304      	str	r3, [sp, #16]
 801404e:	46a2      	mov	sl, r4
 8014050:	e7d2      	b.n	8013ff8 <_svfiprintf_r+0xa0>
 8014052:	9b03      	ldr	r3, [sp, #12]
 8014054:	1d19      	adds	r1, r3, #4
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	9103      	str	r1, [sp, #12]
 801405a:	2b00      	cmp	r3, #0
 801405c:	bfbb      	ittet	lt
 801405e:	425b      	neglt	r3, r3
 8014060:	f042 0202 	orrlt.w	r2, r2, #2
 8014064:	9307      	strge	r3, [sp, #28]
 8014066:	9307      	strlt	r3, [sp, #28]
 8014068:	bfb8      	it	lt
 801406a:	9204      	strlt	r2, [sp, #16]
 801406c:	7823      	ldrb	r3, [r4, #0]
 801406e:	2b2e      	cmp	r3, #46	@ 0x2e
 8014070:	d10a      	bne.n	8014088 <_svfiprintf_r+0x130>
 8014072:	7863      	ldrb	r3, [r4, #1]
 8014074:	2b2a      	cmp	r3, #42	@ 0x2a
 8014076:	d132      	bne.n	80140de <_svfiprintf_r+0x186>
 8014078:	9b03      	ldr	r3, [sp, #12]
 801407a:	1d1a      	adds	r2, r3, #4
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	9203      	str	r2, [sp, #12]
 8014080:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014084:	3402      	adds	r4, #2
 8014086:	9305      	str	r3, [sp, #20]
 8014088:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801414c <_svfiprintf_r+0x1f4>
 801408c:	7821      	ldrb	r1, [r4, #0]
 801408e:	2203      	movs	r2, #3
 8014090:	4650      	mov	r0, sl
 8014092:	f7ec f925 	bl	80002e0 <memchr>
 8014096:	b138      	cbz	r0, 80140a8 <_svfiprintf_r+0x150>
 8014098:	9b04      	ldr	r3, [sp, #16]
 801409a:	eba0 000a 	sub.w	r0, r0, sl
 801409e:	2240      	movs	r2, #64	@ 0x40
 80140a0:	4082      	lsls	r2, r0
 80140a2:	4313      	orrs	r3, r2
 80140a4:	3401      	adds	r4, #1
 80140a6:	9304      	str	r3, [sp, #16]
 80140a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80140ac:	4824      	ldr	r0, [pc, #144]	@ (8014140 <_svfiprintf_r+0x1e8>)
 80140ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80140b2:	2206      	movs	r2, #6
 80140b4:	f7ec f914 	bl	80002e0 <memchr>
 80140b8:	2800      	cmp	r0, #0
 80140ba:	d036      	beq.n	801412a <_svfiprintf_r+0x1d2>
 80140bc:	4b21      	ldr	r3, [pc, #132]	@ (8014144 <_svfiprintf_r+0x1ec>)
 80140be:	bb1b      	cbnz	r3, 8014108 <_svfiprintf_r+0x1b0>
 80140c0:	9b03      	ldr	r3, [sp, #12]
 80140c2:	3307      	adds	r3, #7
 80140c4:	f023 0307 	bic.w	r3, r3, #7
 80140c8:	3308      	adds	r3, #8
 80140ca:	9303      	str	r3, [sp, #12]
 80140cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80140ce:	4433      	add	r3, r6
 80140d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80140d2:	e76a      	b.n	8013faa <_svfiprintf_r+0x52>
 80140d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80140d8:	460c      	mov	r4, r1
 80140da:	2001      	movs	r0, #1
 80140dc:	e7a8      	b.n	8014030 <_svfiprintf_r+0xd8>
 80140de:	2300      	movs	r3, #0
 80140e0:	3401      	adds	r4, #1
 80140e2:	9305      	str	r3, [sp, #20]
 80140e4:	4619      	mov	r1, r3
 80140e6:	f04f 0c0a 	mov.w	ip, #10
 80140ea:	4620      	mov	r0, r4
 80140ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80140f0:	3a30      	subs	r2, #48	@ 0x30
 80140f2:	2a09      	cmp	r2, #9
 80140f4:	d903      	bls.n	80140fe <_svfiprintf_r+0x1a6>
 80140f6:	2b00      	cmp	r3, #0
 80140f8:	d0c6      	beq.n	8014088 <_svfiprintf_r+0x130>
 80140fa:	9105      	str	r1, [sp, #20]
 80140fc:	e7c4      	b.n	8014088 <_svfiprintf_r+0x130>
 80140fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8014102:	4604      	mov	r4, r0
 8014104:	2301      	movs	r3, #1
 8014106:	e7f0      	b.n	80140ea <_svfiprintf_r+0x192>
 8014108:	ab03      	add	r3, sp, #12
 801410a:	9300      	str	r3, [sp, #0]
 801410c:	462a      	mov	r2, r5
 801410e:	4b0e      	ldr	r3, [pc, #56]	@ (8014148 <_svfiprintf_r+0x1f0>)
 8014110:	a904      	add	r1, sp, #16
 8014112:	4638      	mov	r0, r7
 8014114:	f7fd ff14 	bl	8011f40 <_printf_float>
 8014118:	1c42      	adds	r2, r0, #1
 801411a:	4606      	mov	r6, r0
 801411c:	d1d6      	bne.n	80140cc <_svfiprintf_r+0x174>
 801411e:	89ab      	ldrh	r3, [r5, #12]
 8014120:	065b      	lsls	r3, r3, #25
 8014122:	f53f af2d 	bmi.w	8013f80 <_svfiprintf_r+0x28>
 8014126:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014128:	e72c      	b.n	8013f84 <_svfiprintf_r+0x2c>
 801412a:	ab03      	add	r3, sp, #12
 801412c:	9300      	str	r3, [sp, #0]
 801412e:	462a      	mov	r2, r5
 8014130:	4b05      	ldr	r3, [pc, #20]	@ (8014148 <_svfiprintf_r+0x1f0>)
 8014132:	a904      	add	r1, sp, #16
 8014134:	4638      	mov	r0, r7
 8014136:	f7fe f98b 	bl	8012450 <_printf_i>
 801413a:	e7ed      	b.n	8014118 <_svfiprintf_r+0x1c0>
 801413c:	08014cd8 	.word	0x08014cd8
 8014140:	08014ce2 	.word	0x08014ce2
 8014144:	08011f41 	.word	0x08011f41
 8014148:	08013ea1 	.word	0x08013ea1
 801414c:	08014cde 	.word	0x08014cde

08014150 <__sflush_r>:
 8014150:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8014154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014158:	0716      	lsls	r6, r2, #28
 801415a:	4605      	mov	r5, r0
 801415c:	460c      	mov	r4, r1
 801415e:	d454      	bmi.n	801420a <__sflush_r+0xba>
 8014160:	684b      	ldr	r3, [r1, #4]
 8014162:	2b00      	cmp	r3, #0
 8014164:	dc02      	bgt.n	801416c <__sflush_r+0x1c>
 8014166:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014168:	2b00      	cmp	r3, #0
 801416a:	dd48      	ble.n	80141fe <__sflush_r+0xae>
 801416c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801416e:	2e00      	cmp	r6, #0
 8014170:	d045      	beq.n	80141fe <__sflush_r+0xae>
 8014172:	2300      	movs	r3, #0
 8014174:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014178:	682f      	ldr	r7, [r5, #0]
 801417a:	6a21      	ldr	r1, [r4, #32]
 801417c:	602b      	str	r3, [r5, #0]
 801417e:	d030      	beq.n	80141e2 <__sflush_r+0x92>
 8014180:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014182:	89a3      	ldrh	r3, [r4, #12]
 8014184:	0759      	lsls	r1, r3, #29
 8014186:	d505      	bpl.n	8014194 <__sflush_r+0x44>
 8014188:	6863      	ldr	r3, [r4, #4]
 801418a:	1ad2      	subs	r2, r2, r3
 801418c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801418e:	b10b      	cbz	r3, 8014194 <__sflush_r+0x44>
 8014190:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014192:	1ad2      	subs	r2, r2, r3
 8014194:	2300      	movs	r3, #0
 8014196:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014198:	6a21      	ldr	r1, [r4, #32]
 801419a:	4628      	mov	r0, r5
 801419c:	47b0      	blx	r6
 801419e:	1c43      	adds	r3, r0, #1
 80141a0:	89a3      	ldrh	r3, [r4, #12]
 80141a2:	d106      	bne.n	80141b2 <__sflush_r+0x62>
 80141a4:	6829      	ldr	r1, [r5, #0]
 80141a6:	291d      	cmp	r1, #29
 80141a8:	d82b      	bhi.n	8014202 <__sflush_r+0xb2>
 80141aa:	4a2a      	ldr	r2, [pc, #168]	@ (8014254 <__sflush_r+0x104>)
 80141ac:	410a      	asrs	r2, r1
 80141ae:	07d6      	lsls	r6, r2, #31
 80141b0:	d427      	bmi.n	8014202 <__sflush_r+0xb2>
 80141b2:	2200      	movs	r2, #0
 80141b4:	6062      	str	r2, [r4, #4]
 80141b6:	04d9      	lsls	r1, r3, #19
 80141b8:	6922      	ldr	r2, [r4, #16]
 80141ba:	6022      	str	r2, [r4, #0]
 80141bc:	d504      	bpl.n	80141c8 <__sflush_r+0x78>
 80141be:	1c42      	adds	r2, r0, #1
 80141c0:	d101      	bne.n	80141c6 <__sflush_r+0x76>
 80141c2:	682b      	ldr	r3, [r5, #0]
 80141c4:	b903      	cbnz	r3, 80141c8 <__sflush_r+0x78>
 80141c6:	6560      	str	r0, [r4, #84]	@ 0x54
 80141c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80141ca:	602f      	str	r7, [r5, #0]
 80141cc:	b1b9      	cbz	r1, 80141fe <__sflush_r+0xae>
 80141ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80141d2:	4299      	cmp	r1, r3
 80141d4:	d002      	beq.n	80141dc <__sflush_r+0x8c>
 80141d6:	4628      	mov	r0, r5
 80141d8:	f7ff f9e0 	bl	801359c <_free_r>
 80141dc:	2300      	movs	r3, #0
 80141de:	6363      	str	r3, [r4, #52]	@ 0x34
 80141e0:	e00d      	b.n	80141fe <__sflush_r+0xae>
 80141e2:	2301      	movs	r3, #1
 80141e4:	4628      	mov	r0, r5
 80141e6:	47b0      	blx	r6
 80141e8:	4602      	mov	r2, r0
 80141ea:	1c50      	adds	r0, r2, #1
 80141ec:	d1c9      	bne.n	8014182 <__sflush_r+0x32>
 80141ee:	682b      	ldr	r3, [r5, #0]
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d0c6      	beq.n	8014182 <__sflush_r+0x32>
 80141f4:	2b1d      	cmp	r3, #29
 80141f6:	d001      	beq.n	80141fc <__sflush_r+0xac>
 80141f8:	2b16      	cmp	r3, #22
 80141fa:	d11e      	bne.n	801423a <__sflush_r+0xea>
 80141fc:	602f      	str	r7, [r5, #0]
 80141fe:	2000      	movs	r0, #0
 8014200:	e022      	b.n	8014248 <__sflush_r+0xf8>
 8014202:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014206:	b21b      	sxth	r3, r3
 8014208:	e01b      	b.n	8014242 <__sflush_r+0xf2>
 801420a:	690f      	ldr	r7, [r1, #16]
 801420c:	2f00      	cmp	r7, #0
 801420e:	d0f6      	beq.n	80141fe <__sflush_r+0xae>
 8014210:	0793      	lsls	r3, r2, #30
 8014212:	680e      	ldr	r6, [r1, #0]
 8014214:	bf08      	it	eq
 8014216:	694b      	ldreq	r3, [r1, #20]
 8014218:	600f      	str	r7, [r1, #0]
 801421a:	bf18      	it	ne
 801421c:	2300      	movne	r3, #0
 801421e:	eba6 0807 	sub.w	r8, r6, r7
 8014222:	608b      	str	r3, [r1, #8]
 8014224:	f1b8 0f00 	cmp.w	r8, #0
 8014228:	dde9      	ble.n	80141fe <__sflush_r+0xae>
 801422a:	6a21      	ldr	r1, [r4, #32]
 801422c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801422e:	4643      	mov	r3, r8
 8014230:	463a      	mov	r2, r7
 8014232:	4628      	mov	r0, r5
 8014234:	47b0      	blx	r6
 8014236:	2800      	cmp	r0, #0
 8014238:	dc08      	bgt.n	801424c <__sflush_r+0xfc>
 801423a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801423e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014242:	81a3      	strh	r3, [r4, #12]
 8014244:	f04f 30ff 	mov.w	r0, #4294967295
 8014248:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801424c:	4407      	add	r7, r0
 801424e:	eba8 0800 	sub.w	r8, r8, r0
 8014252:	e7e7      	b.n	8014224 <__sflush_r+0xd4>
 8014254:	dfbffffe 	.word	0xdfbffffe

08014258 <_fflush_r>:
 8014258:	b538      	push	{r3, r4, r5, lr}
 801425a:	690b      	ldr	r3, [r1, #16]
 801425c:	4605      	mov	r5, r0
 801425e:	460c      	mov	r4, r1
 8014260:	b913      	cbnz	r3, 8014268 <_fflush_r+0x10>
 8014262:	2500      	movs	r5, #0
 8014264:	4628      	mov	r0, r5
 8014266:	bd38      	pop	{r3, r4, r5, pc}
 8014268:	b118      	cbz	r0, 8014272 <_fflush_r+0x1a>
 801426a:	6a03      	ldr	r3, [r0, #32]
 801426c:	b90b      	cbnz	r3, 8014272 <_fflush_r+0x1a>
 801426e:	f7fe fa9b 	bl	80127a8 <__sinit>
 8014272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014276:	2b00      	cmp	r3, #0
 8014278:	d0f3      	beq.n	8014262 <_fflush_r+0xa>
 801427a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801427c:	07d0      	lsls	r0, r2, #31
 801427e:	d404      	bmi.n	801428a <_fflush_r+0x32>
 8014280:	0599      	lsls	r1, r3, #22
 8014282:	d402      	bmi.n	801428a <_fflush_r+0x32>
 8014284:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014286:	f7fe fba6 	bl	80129d6 <__retarget_lock_acquire_recursive>
 801428a:	4628      	mov	r0, r5
 801428c:	4621      	mov	r1, r4
 801428e:	f7ff ff5f 	bl	8014150 <__sflush_r>
 8014292:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014294:	07da      	lsls	r2, r3, #31
 8014296:	4605      	mov	r5, r0
 8014298:	d4e4      	bmi.n	8014264 <_fflush_r+0xc>
 801429a:	89a3      	ldrh	r3, [r4, #12]
 801429c:	059b      	lsls	r3, r3, #22
 801429e:	d4e1      	bmi.n	8014264 <_fflush_r+0xc>
 80142a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80142a2:	f7fe fb99 	bl	80129d8 <__retarget_lock_release_recursive>
 80142a6:	e7dd      	b.n	8014264 <_fflush_r+0xc>

080142a8 <memmove>:
 80142a8:	4288      	cmp	r0, r1
 80142aa:	b510      	push	{r4, lr}
 80142ac:	eb01 0402 	add.w	r4, r1, r2
 80142b0:	d902      	bls.n	80142b8 <memmove+0x10>
 80142b2:	4284      	cmp	r4, r0
 80142b4:	4623      	mov	r3, r4
 80142b6:	d807      	bhi.n	80142c8 <memmove+0x20>
 80142b8:	1e43      	subs	r3, r0, #1
 80142ba:	42a1      	cmp	r1, r4
 80142bc:	d008      	beq.n	80142d0 <memmove+0x28>
 80142be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80142c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80142c6:	e7f8      	b.n	80142ba <memmove+0x12>
 80142c8:	4402      	add	r2, r0
 80142ca:	4601      	mov	r1, r0
 80142cc:	428a      	cmp	r2, r1
 80142ce:	d100      	bne.n	80142d2 <memmove+0x2a>
 80142d0:	bd10      	pop	{r4, pc}
 80142d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80142d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80142da:	e7f7      	b.n	80142cc <memmove+0x24>

080142dc <_sbrk_r>:
 80142dc:	b538      	push	{r3, r4, r5, lr}
 80142de:	4d06      	ldr	r5, [pc, #24]	@ (80142f8 <_sbrk_r+0x1c>)
 80142e0:	2300      	movs	r3, #0
 80142e2:	4604      	mov	r4, r0
 80142e4:	4608      	mov	r0, r1
 80142e6:	602b      	str	r3, [r5, #0]
 80142e8:	f7ed fb8e 	bl	8001a08 <_sbrk>
 80142ec:	1c43      	adds	r3, r0, #1
 80142ee:	d102      	bne.n	80142f6 <_sbrk_r+0x1a>
 80142f0:	682b      	ldr	r3, [r5, #0]
 80142f2:	b103      	cbz	r3, 80142f6 <_sbrk_r+0x1a>
 80142f4:	6023      	str	r3, [r4, #0]
 80142f6:	bd38      	pop	{r3, r4, r5, pc}
 80142f8:	24002780 	.word	0x24002780

080142fc <memcpy>:
 80142fc:	440a      	add	r2, r1
 80142fe:	4291      	cmp	r1, r2
 8014300:	f100 33ff 	add.w	r3, r0, #4294967295
 8014304:	d100      	bne.n	8014308 <memcpy+0xc>
 8014306:	4770      	bx	lr
 8014308:	b510      	push	{r4, lr}
 801430a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801430e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014312:	4291      	cmp	r1, r2
 8014314:	d1f9      	bne.n	801430a <memcpy+0xe>
 8014316:	bd10      	pop	{r4, pc}

08014318 <__assert_func>:
 8014318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801431a:	4614      	mov	r4, r2
 801431c:	461a      	mov	r2, r3
 801431e:	4b09      	ldr	r3, [pc, #36]	@ (8014344 <__assert_func+0x2c>)
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	4605      	mov	r5, r0
 8014324:	68d8      	ldr	r0, [r3, #12]
 8014326:	b954      	cbnz	r4, 801433e <__assert_func+0x26>
 8014328:	4b07      	ldr	r3, [pc, #28]	@ (8014348 <__assert_func+0x30>)
 801432a:	461c      	mov	r4, r3
 801432c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8014330:	9100      	str	r1, [sp, #0]
 8014332:	462b      	mov	r3, r5
 8014334:	4905      	ldr	r1, [pc, #20]	@ (801434c <__assert_func+0x34>)
 8014336:	f000 f86f 	bl	8014418 <fiprintf>
 801433a:	f000 f87f 	bl	801443c <abort>
 801433e:	4b04      	ldr	r3, [pc, #16]	@ (8014350 <__assert_func+0x38>)
 8014340:	e7f4      	b.n	801432c <__assert_func+0x14>
 8014342:	bf00      	nop
 8014344:	24000138 	.word	0x24000138
 8014348:	08014d2e 	.word	0x08014d2e
 801434c:	08014d00 	.word	0x08014d00
 8014350:	08014cf3 	.word	0x08014cf3

08014354 <_calloc_r>:
 8014354:	b570      	push	{r4, r5, r6, lr}
 8014356:	fba1 5402 	umull	r5, r4, r1, r2
 801435a:	b93c      	cbnz	r4, 801436c <_calloc_r+0x18>
 801435c:	4629      	mov	r1, r5
 801435e:	f7ff f991 	bl	8013684 <_malloc_r>
 8014362:	4606      	mov	r6, r0
 8014364:	b928      	cbnz	r0, 8014372 <_calloc_r+0x1e>
 8014366:	2600      	movs	r6, #0
 8014368:	4630      	mov	r0, r6
 801436a:	bd70      	pop	{r4, r5, r6, pc}
 801436c:	220c      	movs	r2, #12
 801436e:	6002      	str	r2, [r0, #0]
 8014370:	e7f9      	b.n	8014366 <_calloc_r+0x12>
 8014372:	462a      	mov	r2, r5
 8014374:	4621      	mov	r1, r4
 8014376:	f7fe fab0 	bl	80128da <memset>
 801437a:	e7f5      	b.n	8014368 <_calloc_r+0x14>

0801437c <__ascii_mbtowc>:
 801437c:	b082      	sub	sp, #8
 801437e:	b901      	cbnz	r1, 8014382 <__ascii_mbtowc+0x6>
 8014380:	a901      	add	r1, sp, #4
 8014382:	b142      	cbz	r2, 8014396 <__ascii_mbtowc+0x1a>
 8014384:	b14b      	cbz	r3, 801439a <__ascii_mbtowc+0x1e>
 8014386:	7813      	ldrb	r3, [r2, #0]
 8014388:	600b      	str	r3, [r1, #0]
 801438a:	7812      	ldrb	r2, [r2, #0]
 801438c:	1e10      	subs	r0, r2, #0
 801438e:	bf18      	it	ne
 8014390:	2001      	movne	r0, #1
 8014392:	b002      	add	sp, #8
 8014394:	4770      	bx	lr
 8014396:	4610      	mov	r0, r2
 8014398:	e7fb      	b.n	8014392 <__ascii_mbtowc+0x16>
 801439a:	f06f 0001 	mvn.w	r0, #1
 801439e:	e7f8      	b.n	8014392 <__ascii_mbtowc+0x16>

080143a0 <_realloc_r>:
 80143a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80143a4:	4680      	mov	r8, r0
 80143a6:	4615      	mov	r5, r2
 80143a8:	460c      	mov	r4, r1
 80143aa:	b921      	cbnz	r1, 80143b6 <_realloc_r+0x16>
 80143ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80143b0:	4611      	mov	r1, r2
 80143b2:	f7ff b967 	b.w	8013684 <_malloc_r>
 80143b6:	b92a      	cbnz	r2, 80143c4 <_realloc_r+0x24>
 80143b8:	f7ff f8f0 	bl	801359c <_free_r>
 80143bc:	2400      	movs	r4, #0
 80143be:	4620      	mov	r0, r4
 80143c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80143c4:	f000 f841 	bl	801444a <_malloc_usable_size_r>
 80143c8:	4285      	cmp	r5, r0
 80143ca:	4606      	mov	r6, r0
 80143cc:	d802      	bhi.n	80143d4 <_realloc_r+0x34>
 80143ce:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80143d2:	d8f4      	bhi.n	80143be <_realloc_r+0x1e>
 80143d4:	4629      	mov	r1, r5
 80143d6:	4640      	mov	r0, r8
 80143d8:	f7ff f954 	bl	8013684 <_malloc_r>
 80143dc:	4607      	mov	r7, r0
 80143de:	2800      	cmp	r0, #0
 80143e0:	d0ec      	beq.n	80143bc <_realloc_r+0x1c>
 80143e2:	42b5      	cmp	r5, r6
 80143e4:	462a      	mov	r2, r5
 80143e6:	4621      	mov	r1, r4
 80143e8:	bf28      	it	cs
 80143ea:	4632      	movcs	r2, r6
 80143ec:	f7ff ff86 	bl	80142fc <memcpy>
 80143f0:	4621      	mov	r1, r4
 80143f2:	4640      	mov	r0, r8
 80143f4:	f7ff f8d2 	bl	801359c <_free_r>
 80143f8:	463c      	mov	r4, r7
 80143fa:	e7e0      	b.n	80143be <_realloc_r+0x1e>

080143fc <__ascii_wctomb>:
 80143fc:	4603      	mov	r3, r0
 80143fe:	4608      	mov	r0, r1
 8014400:	b141      	cbz	r1, 8014414 <__ascii_wctomb+0x18>
 8014402:	2aff      	cmp	r2, #255	@ 0xff
 8014404:	d904      	bls.n	8014410 <__ascii_wctomb+0x14>
 8014406:	228a      	movs	r2, #138	@ 0x8a
 8014408:	601a      	str	r2, [r3, #0]
 801440a:	f04f 30ff 	mov.w	r0, #4294967295
 801440e:	4770      	bx	lr
 8014410:	700a      	strb	r2, [r1, #0]
 8014412:	2001      	movs	r0, #1
 8014414:	4770      	bx	lr
	...

08014418 <fiprintf>:
 8014418:	b40e      	push	{r1, r2, r3}
 801441a:	b503      	push	{r0, r1, lr}
 801441c:	4601      	mov	r1, r0
 801441e:	ab03      	add	r3, sp, #12
 8014420:	4805      	ldr	r0, [pc, #20]	@ (8014438 <fiprintf+0x20>)
 8014422:	f853 2b04 	ldr.w	r2, [r3], #4
 8014426:	6800      	ldr	r0, [r0, #0]
 8014428:	9301      	str	r3, [sp, #4]
 801442a:	f000 f83f 	bl	80144ac <_vfiprintf_r>
 801442e:	b002      	add	sp, #8
 8014430:	f85d eb04 	ldr.w	lr, [sp], #4
 8014434:	b003      	add	sp, #12
 8014436:	4770      	bx	lr
 8014438:	24000138 	.word	0x24000138

0801443c <abort>:
 801443c:	b508      	push	{r3, lr}
 801443e:	2006      	movs	r0, #6
 8014440:	f000 fa08 	bl	8014854 <raise>
 8014444:	2001      	movs	r0, #1
 8014446:	f7ed fa67 	bl	8001918 <_exit>

0801444a <_malloc_usable_size_r>:
 801444a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801444e:	1f18      	subs	r0, r3, #4
 8014450:	2b00      	cmp	r3, #0
 8014452:	bfbc      	itt	lt
 8014454:	580b      	ldrlt	r3, [r1, r0]
 8014456:	18c0      	addlt	r0, r0, r3
 8014458:	4770      	bx	lr

0801445a <__sfputc_r>:
 801445a:	6893      	ldr	r3, [r2, #8]
 801445c:	3b01      	subs	r3, #1
 801445e:	2b00      	cmp	r3, #0
 8014460:	b410      	push	{r4}
 8014462:	6093      	str	r3, [r2, #8]
 8014464:	da08      	bge.n	8014478 <__sfputc_r+0x1e>
 8014466:	6994      	ldr	r4, [r2, #24]
 8014468:	42a3      	cmp	r3, r4
 801446a:	db01      	blt.n	8014470 <__sfputc_r+0x16>
 801446c:	290a      	cmp	r1, #10
 801446e:	d103      	bne.n	8014478 <__sfputc_r+0x1e>
 8014470:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014474:	f000 b932 	b.w	80146dc <__swbuf_r>
 8014478:	6813      	ldr	r3, [r2, #0]
 801447a:	1c58      	adds	r0, r3, #1
 801447c:	6010      	str	r0, [r2, #0]
 801447e:	7019      	strb	r1, [r3, #0]
 8014480:	4608      	mov	r0, r1
 8014482:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014486:	4770      	bx	lr

08014488 <__sfputs_r>:
 8014488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801448a:	4606      	mov	r6, r0
 801448c:	460f      	mov	r7, r1
 801448e:	4614      	mov	r4, r2
 8014490:	18d5      	adds	r5, r2, r3
 8014492:	42ac      	cmp	r4, r5
 8014494:	d101      	bne.n	801449a <__sfputs_r+0x12>
 8014496:	2000      	movs	r0, #0
 8014498:	e007      	b.n	80144aa <__sfputs_r+0x22>
 801449a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801449e:	463a      	mov	r2, r7
 80144a0:	4630      	mov	r0, r6
 80144a2:	f7ff ffda 	bl	801445a <__sfputc_r>
 80144a6:	1c43      	adds	r3, r0, #1
 80144a8:	d1f3      	bne.n	8014492 <__sfputs_r+0xa>
 80144aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080144ac <_vfiprintf_r>:
 80144ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144b0:	460d      	mov	r5, r1
 80144b2:	b09d      	sub	sp, #116	@ 0x74
 80144b4:	4614      	mov	r4, r2
 80144b6:	4698      	mov	r8, r3
 80144b8:	4606      	mov	r6, r0
 80144ba:	b118      	cbz	r0, 80144c4 <_vfiprintf_r+0x18>
 80144bc:	6a03      	ldr	r3, [r0, #32]
 80144be:	b90b      	cbnz	r3, 80144c4 <_vfiprintf_r+0x18>
 80144c0:	f7fe f972 	bl	80127a8 <__sinit>
 80144c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80144c6:	07d9      	lsls	r1, r3, #31
 80144c8:	d405      	bmi.n	80144d6 <_vfiprintf_r+0x2a>
 80144ca:	89ab      	ldrh	r3, [r5, #12]
 80144cc:	059a      	lsls	r2, r3, #22
 80144ce:	d402      	bmi.n	80144d6 <_vfiprintf_r+0x2a>
 80144d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80144d2:	f7fe fa80 	bl	80129d6 <__retarget_lock_acquire_recursive>
 80144d6:	89ab      	ldrh	r3, [r5, #12]
 80144d8:	071b      	lsls	r3, r3, #28
 80144da:	d501      	bpl.n	80144e0 <_vfiprintf_r+0x34>
 80144dc:	692b      	ldr	r3, [r5, #16]
 80144de:	b99b      	cbnz	r3, 8014508 <_vfiprintf_r+0x5c>
 80144e0:	4629      	mov	r1, r5
 80144e2:	4630      	mov	r0, r6
 80144e4:	f000 f938 	bl	8014758 <__swsetup_r>
 80144e8:	b170      	cbz	r0, 8014508 <_vfiprintf_r+0x5c>
 80144ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80144ec:	07dc      	lsls	r4, r3, #31
 80144ee:	d504      	bpl.n	80144fa <_vfiprintf_r+0x4e>
 80144f0:	f04f 30ff 	mov.w	r0, #4294967295
 80144f4:	b01d      	add	sp, #116	@ 0x74
 80144f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80144fa:	89ab      	ldrh	r3, [r5, #12]
 80144fc:	0598      	lsls	r0, r3, #22
 80144fe:	d4f7      	bmi.n	80144f0 <_vfiprintf_r+0x44>
 8014500:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014502:	f7fe fa69 	bl	80129d8 <__retarget_lock_release_recursive>
 8014506:	e7f3      	b.n	80144f0 <_vfiprintf_r+0x44>
 8014508:	2300      	movs	r3, #0
 801450a:	9309      	str	r3, [sp, #36]	@ 0x24
 801450c:	2320      	movs	r3, #32
 801450e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014512:	f8cd 800c 	str.w	r8, [sp, #12]
 8014516:	2330      	movs	r3, #48	@ 0x30
 8014518:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80146c8 <_vfiprintf_r+0x21c>
 801451c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014520:	f04f 0901 	mov.w	r9, #1
 8014524:	4623      	mov	r3, r4
 8014526:	469a      	mov	sl, r3
 8014528:	f813 2b01 	ldrb.w	r2, [r3], #1
 801452c:	b10a      	cbz	r2, 8014532 <_vfiprintf_r+0x86>
 801452e:	2a25      	cmp	r2, #37	@ 0x25
 8014530:	d1f9      	bne.n	8014526 <_vfiprintf_r+0x7a>
 8014532:	ebba 0b04 	subs.w	fp, sl, r4
 8014536:	d00b      	beq.n	8014550 <_vfiprintf_r+0xa4>
 8014538:	465b      	mov	r3, fp
 801453a:	4622      	mov	r2, r4
 801453c:	4629      	mov	r1, r5
 801453e:	4630      	mov	r0, r6
 8014540:	f7ff ffa2 	bl	8014488 <__sfputs_r>
 8014544:	3001      	adds	r0, #1
 8014546:	f000 80a7 	beq.w	8014698 <_vfiprintf_r+0x1ec>
 801454a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801454c:	445a      	add	r2, fp
 801454e:	9209      	str	r2, [sp, #36]	@ 0x24
 8014550:	f89a 3000 	ldrb.w	r3, [sl]
 8014554:	2b00      	cmp	r3, #0
 8014556:	f000 809f 	beq.w	8014698 <_vfiprintf_r+0x1ec>
 801455a:	2300      	movs	r3, #0
 801455c:	f04f 32ff 	mov.w	r2, #4294967295
 8014560:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014564:	f10a 0a01 	add.w	sl, sl, #1
 8014568:	9304      	str	r3, [sp, #16]
 801456a:	9307      	str	r3, [sp, #28]
 801456c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014570:	931a      	str	r3, [sp, #104]	@ 0x68
 8014572:	4654      	mov	r4, sl
 8014574:	2205      	movs	r2, #5
 8014576:	f814 1b01 	ldrb.w	r1, [r4], #1
 801457a:	4853      	ldr	r0, [pc, #332]	@ (80146c8 <_vfiprintf_r+0x21c>)
 801457c:	f7eb feb0 	bl	80002e0 <memchr>
 8014580:	9a04      	ldr	r2, [sp, #16]
 8014582:	b9d8      	cbnz	r0, 80145bc <_vfiprintf_r+0x110>
 8014584:	06d1      	lsls	r1, r2, #27
 8014586:	bf44      	itt	mi
 8014588:	2320      	movmi	r3, #32
 801458a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801458e:	0713      	lsls	r3, r2, #28
 8014590:	bf44      	itt	mi
 8014592:	232b      	movmi	r3, #43	@ 0x2b
 8014594:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014598:	f89a 3000 	ldrb.w	r3, [sl]
 801459c:	2b2a      	cmp	r3, #42	@ 0x2a
 801459e:	d015      	beq.n	80145cc <_vfiprintf_r+0x120>
 80145a0:	9a07      	ldr	r2, [sp, #28]
 80145a2:	4654      	mov	r4, sl
 80145a4:	2000      	movs	r0, #0
 80145a6:	f04f 0c0a 	mov.w	ip, #10
 80145aa:	4621      	mov	r1, r4
 80145ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80145b0:	3b30      	subs	r3, #48	@ 0x30
 80145b2:	2b09      	cmp	r3, #9
 80145b4:	d94b      	bls.n	801464e <_vfiprintf_r+0x1a2>
 80145b6:	b1b0      	cbz	r0, 80145e6 <_vfiprintf_r+0x13a>
 80145b8:	9207      	str	r2, [sp, #28]
 80145ba:	e014      	b.n	80145e6 <_vfiprintf_r+0x13a>
 80145bc:	eba0 0308 	sub.w	r3, r0, r8
 80145c0:	fa09 f303 	lsl.w	r3, r9, r3
 80145c4:	4313      	orrs	r3, r2
 80145c6:	9304      	str	r3, [sp, #16]
 80145c8:	46a2      	mov	sl, r4
 80145ca:	e7d2      	b.n	8014572 <_vfiprintf_r+0xc6>
 80145cc:	9b03      	ldr	r3, [sp, #12]
 80145ce:	1d19      	adds	r1, r3, #4
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	9103      	str	r1, [sp, #12]
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	bfbb      	ittet	lt
 80145d8:	425b      	neglt	r3, r3
 80145da:	f042 0202 	orrlt.w	r2, r2, #2
 80145de:	9307      	strge	r3, [sp, #28]
 80145e0:	9307      	strlt	r3, [sp, #28]
 80145e2:	bfb8      	it	lt
 80145e4:	9204      	strlt	r2, [sp, #16]
 80145e6:	7823      	ldrb	r3, [r4, #0]
 80145e8:	2b2e      	cmp	r3, #46	@ 0x2e
 80145ea:	d10a      	bne.n	8014602 <_vfiprintf_r+0x156>
 80145ec:	7863      	ldrb	r3, [r4, #1]
 80145ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80145f0:	d132      	bne.n	8014658 <_vfiprintf_r+0x1ac>
 80145f2:	9b03      	ldr	r3, [sp, #12]
 80145f4:	1d1a      	adds	r2, r3, #4
 80145f6:	681b      	ldr	r3, [r3, #0]
 80145f8:	9203      	str	r2, [sp, #12]
 80145fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80145fe:	3402      	adds	r4, #2
 8014600:	9305      	str	r3, [sp, #20]
 8014602:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80146d8 <_vfiprintf_r+0x22c>
 8014606:	7821      	ldrb	r1, [r4, #0]
 8014608:	2203      	movs	r2, #3
 801460a:	4650      	mov	r0, sl
 801460c:	f7eb fe68 	bl	80002e0 <memchr>
 8014610:	b138      	cbz	r0, 8014622 <_vfiprintf_r+0x176>
 8014612:	9b04      	ldr	r3, [sp, #16]
 8014614:	eba0 000a 	sub.w	r0, r0, sl
 8014618:	2240      	movs	r2, #64	@ 0x40
 801461a:	4082      	lsls	r2, r0
 801461c:	4313      	orrs	r3, r2
 801461e:	3401      	adds	r4, #1
 8014620:	9304      	str	r3, [sp, #16]
 8014622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014626:	4829      	ldr	r0, [pc, #164]	@ (80146cc <_vfiprintf_r+0x220>)
 8014628:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801462c:	2206      	movs	r2, #6
 801462e:	f7eb fe57 	bl	80002e0 <memchr>
 8014632:	2800      	cmp	r0, #0
 8014634:	d03f      	beq.n	80146b6 <_vfiprintf_r+0x20a>
 8014636:	4b26      	ldr	r3, [pc, #152]	@ (80146d0 <_vfiprintf_r+0x224>)
 8014638:	bb1b      	cbnz	r3, 8014682 <_vfiprintf_r+0x1d6>
 801463a:	9b03      	ldr	r3, [sp, #12]
 801463c:	3307      	adds	r3, #7
 801463e:	f023 0307 	bic.w	r3, r3, #7
 8014642:	3308      	adds	r3, #8
 8014644:	9303      	str	r3, [sp, #12]
 8014646:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014648:	443b      	add	r3, r7
 801464a:	9309      	str	r3, [sp, #36]	@ 0x24
 801464c:	e76a      	b.n	8014524 <_vfiprintf_r+0x78>
 801464e:	fb0c 3202 	mla	r2, ip, r2, r3
 8014652:	460c      	mov	r4, r1
 8014654:	2001      	movs	r0, #1
 8014656:	e7a8      	b.n	80145aa <_vfiprintf_r+0xfe>
 8014658:	2300      	movs	r3, #0
 801465a:	3401      	adds	r4, #1
 801465c:	9305      	str	r3, [sp, #20]
 801465e:	4619      	mov	r1, r3
 8014660:	f04f 0c0a 	mov.w	ip, #10
 8014664:	4620      	mov	r0, r4
 8014666:	f810 2b01 	ldrb.w	r2, [r0], #1
 801466a:	3a30      	subs	r2, #48	@ 0x30
 801466c:	2a09      	cmp	r2, #9
 801466e:	d903      	bls.n	8014678 <_vfiprintf_r+0x1cc>
 8014670:	2b00      	cmp	r3, #0
 8014672:	d0c6      	beq.n	8014602 <_vfiprintf_r+0x156>
 8014674:	9105      	str	r1, [sp, #20]
 8014676:	e7c4      	b.n	8014602 <_vfiprintf_r+0x156>
 8014678:	fb0c 2101 	mla	r1, ip, r1, r2
 801467c:	4604      	mov	r4, r0
 801467e:	2301      	movs	r3, #1
 8014680:	e7f0      	b.n	8014664 <_vfiprintf_r+0x1b8>
 8014682:	ab03      	add	r3, sp, #12
 8014684:	9300      	str	r3, [sp, #0]
 8014686:	462a      	mov	r2, r5
 8014688:	4b12      	ldr	r3, [pc, #72]	@ (80146d4 <_vfiprintf_r+0x228>)
 801468a:	a904      	add	r1, sp, #16
 801468c:	4630      	mov	r0, r6
 801468e:	f7fd fc57 	bl	8011f40 <_printf_float>
 8014692:	4607      	mov	r7, r0
 8014694:	1c78      	adds	r0, r7, #1
 8014696:	d1d6      	bne.n	8014646 <_vfiprintf_r+0x19a>
 8014698:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801469a:	07d9      	lsls	r1, r3, #31
 801469c:	d405      	bmi.n	80146aa <_vfiprintf_r+0x1fe>
 801469e:	89ab      	ldrh	r3, [r5, #12]
 80146a0:	059a      	lsls	r2, r3, #22
 80146a2:	d402      	bmi.n	80146aa <_vfiprintf_r+0x1fe>
 80146a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80146a6:	f7fe f997 	bl	80129d8 <__retarget_lock_release_recursive>
 80146aa:	89ab      	ldrh	r3, [r5, #12]
 80146ac:	065b      	lsls	r3, r3, #25
 80146ae:	f53f af1f 	bmi.w	80144f0 <_vfiprintf_r+0x44>
 80146b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80146b4:	e71e      	b.n	80144f4 <_vfiprintf_r+0x48>
 80146b6:	ab03      	add	r3, sp, #12
 80146b8:	9300      	str	r3, [sp, #0]
 80146ba:	462a      	mov	r2, r5
 80146bc:	4b05      	ldr	r3, [pc, #20]	@ (80146d4 <_vfiprintf_r+0x228>)
 80146be:	a904      	add	r1, sp, #16
 80146c0:	4630      	mov	r0, r6
 80146c2:	f7fd fec5 	bl	8012450 <_printf_i>
 80146c6:	e7e4      	b.n	8014692 <_vfiprintf_r+0x1e6>
 80146c8:	08014cd8 	.word	0x08014cd8
 80146cc:	08014ce2 	.word	0x08014ce2
 80146d0:	08011f41 	.word	0x08011f41
 80146d4:	08014489 	.word	0x08014489
 80146d8:	08014cde 	.word	0x08014cde

080146dc <__swbuf_r>:
 80146dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146de:	460e      	mov	r6, r1
 80146e0:	4614      	mov	r4, r2
 80146e2:	4605      	mov	r5, r0
 80146e4:	b118      	cbz	r0, 80146ee <__swbuf_r+0x12>
 80146e6:	6a03      	ldr	r3, [r0, #32]
 80146e8:	b90b      	cbnz	r3, 80146ee <__swbuf_r+0x12>
 80146ea:	f7fe f85d 	bl	80127a8 <__sinit>
 80146ee:	69a3      	ldr	r3, [r4, #24]
 80146f0:	60a3      	str	r3, [r4, #8]
 80146f2:	89a3      	ldrh	r3, [r4, #12]
 80146f4:	071a      	lsls	r2, r3, #28
 80146f6:	d501      	bpl.n	80146fc <__swbuf_r+0x20>
 80146f8:	6923      	ldr	r3, [r4, #16]
 80146fa:	b943      	cbnz	r3, 801470e <__swbuf_r+0x32>
 80146fc:	4621      	mov	r1, r4
 80146fe:	4628      	mov	r0, r5
 8014700:	f000 f82a 	bl	8014758 <__swsetup_r>
 8014704:	b118      	cbz	r0, 801470e <__swbuf_r+0x32>
 8014706:	f04f 37ff 	mov.w	r7, #4294967295
 801470a:	4638      	mov	r0, r7
 801470c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801470e:	6823      	ldr	r3, [r4, #0]
 8014710:	6922      	ldr	r2, [r4, #16]
 8014712:	1a98      	subs	r0, r3, r2
 8014714:	6963      	ldr	r3, [r4, #20]
 8014716:	b2f6      	uxtb	r6, r6
 8014718:	4283      	cmp	r3, r0
 801471a:	4637      	mov	r7, r6
 801471c:	dc05      	bgt.n	801472a <__swbuf_r+0x4e>
 801471e:	4621      	mov	r1, r4
 8014720:	4628      	mov	r0, r5
 8014722:	f7ff fd99 	bl	8014258 <_fflush_r>
 8014726:	2800      	cmp	r0, #0
 8014728:	d1ed      	bne.n	8014706 <__swbuf_r+0x2a>
 801472a:	68a3      	ldr	r3, [r4, #8]
 801472c:	3b01      	subs	r3, #1
 801472e:	60a3      	str	r3, [r4, #8]
 8014730:	6823      	ldr	r3, [r4, #0]
 8014732:	1c5a      	adds	r2, r3, #1
 8014734:	6022      	str	r2, [r4, #0]
 8014736:	701e      	strb	r6, [r3, #0]
 8014738:	6962      	ldr	r2, [r4, #20]
 801473a:	1c43      	adds	r3, r0, #1
 801473c:	429a      	cmp	r2, r3
 801473e:	d004      	beq.n	801474a <__swbuf_r+0x6e>
 8014740:	89a3      	ldrh	r3, [r4, #12]
 8014742:	07db      	lsls	r3, r3, #31
 8014744:	d5e1      	bpl.n	801470a <__swbuf_r+0x2e>
 8014746:	2e0a      	cmp	r6, #10
 8014748:	d1df      	bne.n	801470a <__swbuf_r+0x2e>
 801474a:	4621      	mov	r1, r4
 801474c:	4628      	mov	r0, r5
 801474e:	f7ff fd83 	bl	8014258 <_fflush_r>
 8014752:	2800      	cmp	r0, #0
 8014754:	d0d9      	beq.n	801470a <__swbuf_r+0x2e>
 8014756:	e7d6      	b.n	8014706 <__swbuf_r+0x2a>

08014758 <__swsetup_r>:
 8014758:	b538      	push	{r3, r4, r5, lr}
 801475a:	4b29      	ldr	r3, [pc, #164]	@ (8014800 <__swsetup_r+0xa8>)
 801475c:	4605      	mov	r5, r0
 801475e:	6818      	ldr	r0, [r3, #0]
 8014760:	460c      	mov	r4, r1
 8014762:	b118      	cbz	r0, 801476c <__swsetup_r+0x14>
 8014764:	6a03      	ldr	r3, [r0, #32]
 8014766:	b90b      	cbnz	r3, 801476c <__swsetup_r+0x14>
 8014768:	f7fe f81e 	bl	80127a8 <__sinit>
 801476c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014770:	0719      	lsls	r1, r3, #28
 8014772:	d422      	bmi.n	80147ba <__swsetup_r+0x62>
 8014774:	06da      	lsls	r2, r3, #27
 8014776:	d407      	bmi.n	8014788 <__swsetup_r+0x30>
 8014778:	2209      	movs	r2, #9
 801477a:	602a      	str	r2, [r5, #0]
 801477c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014780:	81a3      	strh	r3, [r4, #12]
 8014782:	f04f 30ff 	mov.w	r0, #4294967295
 8014786:	e033      	b.n	80147f0 <__swsetup_r+0x98>
 8014788:	0758      	lsls	r0, r3, #29
 801478a:	d512      	bpl.n	80147b2 <__swsetup_r+0x5a>
 801478c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801478e:	b141      	cbz	r1, 80147a2 <__swsetup_r+0x4a>
 8014790:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014794:	4299      	cmp	r1, r3
 8014796:	d002      	beq.n	801479e <__swsetup_r+0x46>
 8014798:	4628      	mov	r0, r5
 801479a:	f7fe feff 	bl	801359c <_free_r>
 801479e:	2300      	movs	r3, #0
 80147a0:	6363      	str	r3, [r4, #52]	@ 0x34
 80147a2:	89a3      	ldrh	r3, [r4, #12]
 80147a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80147a8:	81a3      	strh	r3, [r4, #12]
 80147aa:	2300      	movs	r3, #0
 80147ac:	6063      	str	r3, [r4, #4]
 80147ae:	6923      	ldr	r3, [r4, #16]
 80147b0:	6023      	str	r3, [r4, #0]
 80147b2:	89a3      	ldrh	r3, [r4, #12]
 80147b4:	f043 0308 	orr.w	r3, r3, #8
 80147b8:	81a3      	strh	r3, [r4, #12]
 80147ba:	6923      	ldr	r3, [r4, #16]
 80147bc:	b94b      	cbnz	r3, 80147d2 <__swsetup_r+0x7a>
 80147be:	89a3      	ldrh	r3, [r4, #12]
 80147c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80147c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80147c8:	d003      	beq.n	80147d2 <__swsetup_r+0x7a>
 80147ca:	4621      	mov	r1, r4
 80147cc:	4628      	mov	r0, r5
 80147ce:	f000 f883 	bl	80148d8 <__smakebuf_r>
 80147d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147d6:	f013 0201 	ands.w	r2, r3, #1
 80147da:	d00a      	beq.n	80147f2 <__swsetup_r+0x9a>
 80147dc:	2200      	movs	r2, #0
 80147de:	60a2      	str	r2, [r4, #8]
 80147e0:	6962      	ldr	r2, [r4, #20]
 80147e2:	4252      	negs	r2, r2
 80147e4:	61a2      	str	r2, [r4, #24]
 80147e6:	6922      	ldr	r2, [r4, #16]
 80147e8:	b942      	cbnz	r2, 80147fc <__swsetup_r+0xa4>
 80147ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80147ee:	d1c5      	bne.n	801477c <__swsetup_r+0x24>
 80147f0:	bd38      	pop	{r3, r4, r5, pc}
 80147f2:	0799      	lsls	r1, r3, #30
 80147f4:	bf58      	it	pl
 80147f6:	6962      	ldrpl	r2, [r4, #20]
 80147f8:	60a2      	str	r2, [r4, #8]
 80147fa:	e7f4      	b.n	80147e6 <__swsetup_r+0x8e>
 80147fc:	2000      	movs	r0, #0
 80147fe:	e7f7      	b.n	80147f0 <__swsetup_r+0x98>
 8014800:	24000138 	.word	0x24000138

08014804 <_raise_r>:
 8014804:	291f      	cmp	r1, #31
 8014806:	b538      	push	{r3, r4, r5, lr}
 8014808:	4605      	mov	r5, r0
 801480a:	460c      	mov	r4, r1
 801480c:	d904      	bls.n	8014818 <_raise_r+0x14>
 801480e:	2316      	movs	r3, #22
 8014810:	6003      	str	r3, [r0, #0]
 8014812:	f04f 30ff 	mov.w	r0, #4294967295
 8014816:	bd38      	pop	{r3, r4, r5, pc}
 8014818:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801481a:	b112      	cbz	r2, 8014822 <_raise_r+0x1e>
 801481c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014820:	b94b      	cbnz	r3, 8014836 <_raise_r+0x32>
 8014822:	4628      	mov	r0, r5
 8014824:	f000 f830 	bl	8014888 <_getpid_r>
 8014828:	4622      	mov	r2, r4
 801482a:	4601      	mov	r1, r0
 801482c:	4628      	mov	r0, r5
 801482e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014832:	f000 b817 	b.w	8014864 <_kill_r>
 8014836:	2b01      	cmp	r3, #1
 8014838:	d00a      	beq.n	8014850 <_raise_r+0x4c>
 801483a:	1c59      	adds	r1, r3, #1
 801483c:	d103      	bne.n	8014846 <_raise_r+0x42>
 801483e:	2316      	movs	r3, #22
 8014840:	6003      	str	r3, [r0, #0]
 8014842:	2001      	movs	r0, #1
 8014844:	e7e7      	b.n	8014816 <_raise_r+0x12>
 8014846:	2100      	movs	r1, #0
 8014848:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801484c:	4620      	mov	r0, r4
 801484e:	4798      	blx	r3
 8014850:	2000      	movs	r0, #0
 8014852:	e7e0      	b.n	8014816 <_raise_r+0x12>

08014854 <raise>:
 8014854:	4b02      	ldr	r3, [pc, #8]	@ (8014860 <raise+0xc>)
 8014856:	4601      	mov	r1, r0
 8014858:	6818      	ldr	r0, [r3, #0]
 801485a:	f7ff bfd3 	b.w	8014804 <_raise_r>
 801485e:	bf00      	nop
 8014860:	24000138 	.word	0x24000138

08014864 <_kill_r>:
 8014864:	b538      	push	{r3, r4, r5, lr}
 8014866:	4d07      	ldr	r5, [pc, #28]	@ (8014884 <_kill_r+0x20>)
 8014868:	2300      	movs	r3, #0
 801486a:	4604      	mov	r4, r0
 801486c:	4608      	mov	r0, r1
 801486e:	4611      	mov	r1, r2
 8014870:	602b      	str	r3, [r5, #0]
 8014872:	f7ed f841 	bl	80018f8 <_kill>
 8014876:	1c43      	adds	r3, r0, #1
 8014878:	d102      	bne.n	8014880 <_kill_r+0x1c>
 801487a:	682b      	ldr	r3, [r5, #0]
 801487c:	b103      	cbz	r3, 8014880 <_kill_r+0x1c>
 801487e:	6023      	str	r3, [r4, #0]
 8014880:	bd38      	pop	{r3, r4, r5, pc}
 8014882:	bf00      	nop
 8014884:	24002780 	.word	0x24002780

08014888 <_getpid_r>:
 8014888:	f7ed b82e 	b.w	80018e8 <_getpid>

0801488c <__swhatbuf_r>:
 801488c:	b570      	push	{r4, r5, r6, lr}
 801488e:	460c      	mov	r4, r1
 8014890:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014894:	2900      	cmp	r1, #0
 8014896:	b096      	sub	sp, #88	@ 0x58
 8014898:	4615      	mov	r5, r2
 801489a:	461e      	mov	r6, r3
 801489c:	da0d      	bge.n	80148ba <__swhatbuf_r+0x2e>
 801489e:	89a3      	ldrh	r3, [r4, #12]
 80148a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80148a4:	f04f 0100 	mov.w	r1, #0
 80148a8:	bf14      	ite	ne
 80148aa:	2340      	movne	r3, #64	@ 0x40
 80148ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80148b0:	2000      	movs	r0, #0
 80148b2:	6031      	str	r1, [r6, #0]
 80148b4:	602b      	str	r3, [r5, #0]
 80148b6:	b016      	add	sp, #88	@ 0x58
 80148b8:	bd70      	pop	{r4, r5, r6, pc}
 80148ba:	466a      	mov	r2, sp
 80148bc:	f000 f848 	bl	8014950 <_fstat_r>
 80148c0:	2800      	cmp	r0, #0
 80148c2:	dbec      	blt.n	801489e <__swhatbuf_r+0x12>
 80148c4:	9901      	ldr	r1, [sp, #4]
 80148c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80148ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80148ce:	4259      	negs	r1, r3
 80148d0:	4159      	adcs	r1, r3
 80148d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80148d6:	e7eb      	b.n	80148b0 <__swhatbuf_r+0x24>

080148d8 <__smakebuf_r>:
 80148d8:	898b      	ldrh	r3, [r1, #12]
 80148da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80148dc:	079d      	lsls	r5, r3, #30
 80148de:	4606      	mov	r6, r0
 80148e0:	460c      	mov	r4, r1
 80148e2:	d507      	bpl.n	80148f4 <__smakebuf_r+0x1c>
 80148e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80148e8:	6023      	str	r3, [r4, #0]
 80148ea:	6123      	str	r3, [r4, #16]
 80148ec:	2301      	movs	r3, #1
 80148ee:	6163      	str	r3, [r4, #20]
 80148f0:	b003      	add	sp, #12
 80148f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148f4:	ab01      	add	r3, sp, #4
 80148f6:	466a      	mov	r2, sp
 80148f8:	f7ff ffc8 	bl	801488c <__swhatbuf_r>
 80148fc:	9f00      	ldr	r7, [sp, #0]
 80148fe:	4605      	mov	r5, r0
 8014900:	4639      	mov	r1, r7
 8014902:	4630      	mov	r0, r6
 8014904:	f7fe febe 	bl	8013684 <_malloc_r>
 8014908:	b948      	cbnz	r0, 801491e <__smakebuf_r+0x46>
 801490a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801490e:	059a      	lsls	r2, r3, #22
 8014910:	d4ee      	bmi.n	80148f0 <__smakebuf_r+0x18>
 8014912:	f023 0303 	bic.w	r3, r3, #3
 8014916:	f043 0302 	orr.w	r3, r3, #2
 801491a:	81a3      	strh	r3, [r4, #12]
 801491c:	e7e2      	b.n	80148e4 <__smakebuf_r+0xc>
 801491e:	89a3      	ldrh	r3, [r4, #12]
 8014920:	6020      	str	r0, [r4, #0]
 8014922:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014926:	81a3      	strh	r3, [r4, #12]
 8014928:	9b01      	ldr	r3, [sp, #4]
 801492a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801492e:	b15b      	cbz	r3, 8014948 <__smakebuf_r+0x70>
 8014930:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014934:	4630      	mov	r0, r6
 8014936:	f000 f81d 	bl	8014974 <_isatty_r>
 801493a:	b128      	cbz	r0, 8014948 <__smakebuf_r+0x70>
 801493c:	89a3      	ldrh	r3, [r4, #12]
 801493e:	f023 0303 	bic.w	r3, r3, #3
 8014942:	f043 0301 	orr.w	r3, r3, #1
 8014946:	81a3      	strh	r3, [r4, #12]
 8014948:	89a3      	ldrh	r3, [r4, #12]
 801494a:	431d      	orrs	r5, r3
 801494c:	81a5      	strh	r5, [r4, #12]
 801494e:	e7cf      	b.n	80148f0 <__smakebuf_r+0x18>

08014950 <_fstat_r>:
 8014950:	b538      	push	{r3, r4, r5, lr}
 8014952:	4d07      	ldr	r5, [pc, #28]	@ (8014970 <_fstat_r+0x20>)
 8014954:	2300      	movs	r3, #0
 8014956:	4604      	mov	r4, r0
 8014958:	4608      	mov	r0, r1
 801495a:	4611      	mov	r1, r2
 801495c:	602b      	str	r3, [r5, #0]
 801495e:	f7ed f82b 	bl	80019b8 <_fstat>
 8014962:	1c43      	adds	r3, r0, #1
 8014964:	d102      	bne.n	801496c <_fstat_r+0x1c>
 8014966:	682b      	ldr	r3, [r5, #0]
 8014968:	b103      	cbz	r3, 801496c <_fstat_r+0x1c>
 801496a:	6023      	str	r3, [r4, #0]
 801496c:	bd38      	pop	{r3, r4, r5, pc}
 801496e:	bf00      	nop
 8014970:	24002780 	.word	0x24002780

08014974 <_isatty_r>:
 8014974:	b538      	push	{r3, r4, r5, lr}
 8014976:	4d06      	ldr	r5, [pc, #24]	@ (8014990 <_isatty_r+0x1c>)
 8014978:	2300      	movs	r3, #0
 801497a:	4604      	mov	r4, r0
 801497c:	4608      	mov	r0, r1
 801497e:	602b      	str	r3, [r5, #0]
 8014980:	f7ed f82a 	bl	80019d8 <_isatty>
 8014984:	1c43      	adds	r3, r0, #1
 8014986:	d102      	bne.n	801498e <_isatty_r+0x1a>
 8014988:	682b      	ldr	r3, [r5, #0]
 801498a:	b103      	cbz	r3, 801498e <_isatty_r+0x1a>
 801498c:	6023      	str	r3, [r4, #0]
 801498e:	bd38      	pop	{r3, r4, r5, pc}
 8014990:	24002780 	.word	0x24002780

08014994 <lrintf>:
 8014994:	ee10 3a10 	vmov	r3, s0
 8014998:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801499c:	f1a2 007f 	sub.w	r0, r2, #127	@ 0x7f
 80149a0:	281e      	cmp	r0, #30
 80149a2:	b082      	sub	sp, #8
 80149a4:	dc2f      	bgt.n	8014a06 <lrintf+0x72>
 80149a6:	1c41      	adds	r1, r0, #1
 80149a8:	da02      	bge.n	80149b0 <lrintf+0x1c>
 80149aa:	2000      	movs	r0, #0
 80149ac:	b002      	add	sp, #8
 80149ae:	4770      	bx	lr
 80149b0:	2816      	cmp	r0, #22
 80149b2:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 80149b6:	dd0a      	ble.n	80149ce <lrintf+0x3a>
 80149b8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80149bc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80149c0:	3a96      	subs	r2, #150	@ 0x96
 80149c2:	fa03 f002 	lsl.w	r0, r3, r2
 80149c6:	2900      	cmp	r1, #0
 80149c8:	d0f0      	beq.n	80149ac <lrintf+0x18>
 80149ca:	4240      	negs	r0, r0
 80149cc:	e7ee      	b.n	80149ac <lrintf+0x18>
 80149ce:	4b10      	ldr	r3, [pc, #64]	@ (8014a10 <lrintf+0x7c>)
 80149d0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80149d4:	ed93 7a00 	vldr	s14, [r3]
 80149d8:	ee37 0a00 	vadd.f32	s0, s14, s0
 80149dc:	ed8d 0a01 	vstr	s0, [sp, #4]
 80149e0:	eddd 7a01 	vldr	s15, [sp, #4]
 80149e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80149e8:	ee17 3a90 	vmov	r3, s15
 80149ec:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80149f0:	d0db      	beq.n	80149aa <lrintf+0x16>
 80149f2:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80149f6:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 80149fa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80149fe:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8014a02:	40d8      	lsrs	r0, r3
 8014a04:	e7df      	b.n	80149c6 <lrintf+0x32>
 8014a06:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014a0a:	ee17 0a90 	vmov	r0, s15
 8014a0e:	e7cd      	b.n	80149ac <lrintf+0x18>
 8014a10:	08014e30 	.word	0x08014e30

08014a14 <_init>:
 8014a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a16:	bf00      	nop
 8014a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a1a:	bc08      	pop	{r3}
 8014a1c:	469e      	mov	lr, r3
 8014a1e:	4770      	bx	lr

08014a20 <_fini>:
 8014a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a22:	bf00      	nop
 8014a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a26:	bc08      	pop	{r3}
 8014a28:	469e      	mov	lr, r3
 8014a2a:	4770      	bx	lr
