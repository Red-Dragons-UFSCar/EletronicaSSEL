
Rx_M4_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001471c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000418  080149c0  080149c0  000159c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014dd8  08014dd8  000162f0  2**0
                  CONTENTS
  4 .ARM          00000008  08014dd8  08014dd8  00015dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014de0  08014de0  000162f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014de0  08014de0  00015de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014de4  08014de4  00015de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f0  24000000  08014de8  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002448  240002f0  080150d8  000162f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24002738  080150d8  00016738  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000162f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000296e6  00000000  00000000  0001631e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000560d  00000000  00000000  0003fa04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f58  00000000  00000000  00045018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001811  00000000  00000000  00046f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00042913  00000000  00000000  00048781  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d9ba  00000000  00000000  0008b094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a2dd1  00000000  00000000  000b8a4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0025b81f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000093fc  00000000  00000000  0025b864  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00264c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002f0 	.word	0x240002f0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080149a4 	.word	0x080149a4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002f4 	.word	0x240002f4
 80002dc:	080149a4 	.word	0x080149a4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	@ 0x28
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007be:	463b      	mov	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
 80007cc:	615a      	str	r2, [r3, #20]
 80007ce:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007d0:	4b30      	ldr	r3, [pc, #192]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007d2:	4a31      	ldr	r2, [pc, #196]	@ (8000898 <MX_ADC1_Init+0xec>)
 80007d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80007d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007d8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007de:	4b2d      	ldr	r3, [pc, #180]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e4:	4b2b      	ldr	r3, [pc, #172]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007ec:	2204      	movs	r2, #4
 80007ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007f0:	4b28      	ldr	r3, [pc, #160]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f6:	4b27      	ldr	r3, [pc, #156]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80007fc:	4b25      	ldr	r3, [pc, #148]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007fe:	2201      	movs	r2, #1
 8000800:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000802:	4b24      	ldr	r3, [pc, #144]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000804:	2200      	movs	r2, #0
 8000806:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000808:	4b22      	ldr	r3, [pc, #136]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800080a:	2200      	movs	r2, #0
 800080c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080e:	4b21      	ldr	r3, [pc, #132]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000810:	2200      	movs	r2, #0
 8000812:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000814:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000816:	2200      	movs	r2, #0
 8000818:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800081a:	4b1e      	ldr	r3, [pc, #120]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800081c:	2200      	movs	r2, #0
 800081e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000820:	4b1c      	ldr	r3, [pc, #112]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000822:	2200      	movs	r2, #0
 8000824:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000826:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000828:	2200      	movs	r2, #0
 800082a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800082e:	4819      	ldr	r0, [pc, #100]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000830:	f002 fa6c 	bl	8002d0c <HAL_ADC_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800083a:	f000 fd52 	bl	80012e2 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	4812      	ldr	r0, [pc, #72]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800084a:	f003 f88f 	bl	800396c <HAL_ADCEx_MultiModeConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000854:	f000 fd45 	bl	80012e2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000858:	4b10      	ldr	r3, [pc, #64]	@ (800089c <MX_ADC1_Init+0xf0>)
 800085a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085c:	2306      	movs	r3, #6
 800085e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000864:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000868:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800086a:	2304      	movs	r3, #4
 800086c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000876:	463b      	mov	r3, r7
 8000878:	4619      	mov	r1, r3
 800087a:	4806      	ldr	r0, [pc, #24]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800087c:	f002 fbe8 	bl	8003050 <HAL_ADC_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000886:	f000 fd2c 	bl	80012e2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	3728      	adds	r7, #40	@ 0x28
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2400030c 	.word	0x2400030c
 8000898:	40022000 	.word	0x40022000
 800089c:	2a000400 	.word	0x2a000400

080008a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	@ 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a18      	ldr	r2, [pc, #96]	@ (8000920 <HAL_ADC_MspInit+0x80>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d129      	bne.n	8000916 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008c2:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008c8:	4a16      	ldr	r2, [pc, #88]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008ca:	f043 0320 	orr.w	r3, r3, #32
 80008ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80008d2:	4b14      	ldr	r3, [pc, #80]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008d8:	f003 0320 	and.w	r3, r3, #32
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e0:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008fe:	2301      	movs	r3, #1
 8000900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000902:	2303      	movs	r3, #3
 8000904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4805      	ldr	r0, [pc, #20]	@ (8000928 <HAL_ADC_MspInit+0x88>)
 8000912:	f005 fb75 	bl	8006000 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	@ 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40022000 	.word	0x40022000
 8000924:	58024400 	.word	0x58024400
 8000928:	58020800 	.word	0x58020800

0800092c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000932:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <MX_DMA_Init+0x6c>)
 8000934:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000938:	4a17      	ldr	r2, [pc, #92]	@ (8000998 <MX_DMA_Init+0x6c>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000942:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <MX_DMA_Init+0x6c>)
 8000944:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	200c      	movs	r0, #12
 8000956:	f003 f9c2 	bl	8003cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800095a:	200c      	movs	r0, #12
 800095c:	f003 f9d9 	bl	8003d12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2100      	movs	r1, #0
 8000964:	200e      	movs	r0, #14
 8000966:	f003 f9ba 	bl	8003cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800096a:	200e      	movs	r0, #14
 800096c:	f003 f9d1 	bl	8003d12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	2100      	movs	r1, #0
 8000974:	200f      	movs	r0, #15
 8000976:	f003 f9b2 	bl	8003cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800097a:	200f      	movs	r0, #15
 800097c:	f003 f9c9 	bl	8003d12 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2010      	movs	r0, #16
 8000986:	f003 f9aa 	bl	8003cde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800098a:	2010      	movs	r0, #16
 800098c:	f003 f9c1 	bl	8003d12 <HAL_NVIC_EnableIRQ>

}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	58024400 	.word	0x58024400

0800099c <dshot_init>:
static void dshot_enable_dma_request();


/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 f833 	bl	8000a14 <dshot_set_timer>
	dshot_put_tc_callback_function();
 80009ae:	f000 f8d3 	bl	8000b58 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 80009b2:	f000 f8ef 	bl	8000b94 <dshot_start_pwm>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <dshot_write>:

void dshot_write(uint16_t* motor_value)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer_all(motor_value);
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f000 f962 	bl	8000c90 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 80009cc:	f000 f98c 	bl	8000ce8 <dshot_dma_start>
	dshot_enable_dma_request();
 80009d0:	f000 f9c2 	bl	8000d58 <dshot_enable_dma_request>
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <dshot_choose_type>:


/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d003      	beq.n	80009f4 <dshot_choose_type+0x18>
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d103      	bne.n	80009f8 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return DSHOT600_HZ;
 80009f0:	4b05      	ldr	r3, [pc, #20]	@ (8000a08 <dshot_choose_type+0x2c>)
 80009f2:	e002      	b.n	80009fa <dshot_choose_type+0x1e>

		case(DSHOT300):
				return DSHOT300_HZ;
 80009f4:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <dshot_choose_type+0x30>)
 80009f6:	e000      	b.n	80009fa <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return DSHOT150_HZ;
 80009f8:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <dshot_choose_type+0x34>)
	}
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	00b71b00 	.word	0x00b71b00
 8000a0c:	005b8d80 	.word	0x005b8d80
 8000a10:	002dc6c0 	.word	0x002dc6c0

08000a14 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	ed2d 8b02 	vpush	{d8}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 8000a22:	4b27      	ldr	r3, [pc, #156]	@ (8000ac0 <dshot_set_timer+0xac>)
 8000a24:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	ee07 3a90 	vmov	s15, r3
 8000a2c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ffd2 	bl	80009dc <dshot_choose_type>
 8000a38:	ee07 0a90 	vmov	s15, r0
 8000a3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a40:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000a44:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000ac4 <dshot_set_timer+0xb0>
 8000a48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a50:	f013 ff68 	bl	8014924 <lrintf>
 8000a54:	4603      	mov	r3, r0
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	897a      	ldrh	r2, [r7, #10]
 8000a62:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 8000a64:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2214      	movs	r2, #20
 8000a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000a6e:	2214      	movs	r2, #20
 8000a70:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 8000a72:	4b16      	ldr	r3, [pc, #88]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	897a      	ldrh	r2, [r7, #10]
 8000a78:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 8000a7a:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2214      	movs	r2, #20
 8000a80:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a82:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a84:	2214      	movs	r2, #20
 8000a86:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8000a88:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	897a      	ldrh	r2, [r7, #10]
 8000a8e:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 8000a90:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2214      	movs	r2, #20
 8000a96:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a9a:	2214      	movs	r2, #20
 8000a9c:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	897a      	ldrh	r2, [r7, #10]
 8000aa4:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 8000aa6:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2214      	movs	r2, #20
 8000aac:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000aae:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000ab0:	2214      	movs	r2, #20
 8000ab2:	60da      	str	r2, [r3, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	ecbd 8b02 	vpop	{d8}
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	0bebc200 	.word	0x0bebc200
 8000ac4:	3c23d70a 	.word	0x3c23d70a
 8000ac8:	240006a0 	.word	0x240006a0
 8000acc:	240005bc 	.word	0x240005bc

08000ad0 <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000adc:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d108      	bne.n	8000afa <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	68da      	ldr	r2, [r3, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000af6:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 8000af8:	e028      	b.n	8000b4c <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d108      	bne.n	8000b16 <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	68da      	ldr	r2, [r3, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000b12:	60da      	str	r2, [r3, #12]
}
 8000b14:	e01a      	b.n	8000b4c <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d108      	bne.n	8000b32 <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	68da      	ldr	r2, [r3, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000b2e:	60da      	str	r2, [r3, #12]
}
 8000b30:	e00c      	b.n	8000b4c <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d107      	bne.n	8000b4c <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000b4a:	60da      	str	r2, [r3, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <dshot_put_tc_callback_function+0x30>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b60:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <dshot_put_tc_callback_function+0x34>)
 8000b62:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <dshot_put_tc_callback_function+0x38>)
 8000b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b68:	4a08      	ldr	r2, [pc, #32]	@ (8000b8c <dshot_put_tc_callback_function+0x34>)
 8000b6a:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <dshot_put_tc_callback_function+0x38>)
 8000b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b70:	4a06      	ldr	r2, [pc, #24]	@ (8000b8c <dshot_put_tc_callback_function+0x34>)
 8000b72:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 8000b74:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <dshot_put_tc_callback_function+0x30>)
 8000b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b78:	4a04      	ldr	r2, [pc, #16]	@ (8000b8c <dshot_put_tc_callback_function+0x34>)
 8000b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	240006a0 	.word	0x240006a0
 8000b8c:	08000ad1 	.word	0x08000ad1
 8000b90:	240005bc 	.word	0x240005bc

08000b94 <dshot_start_pwm>:

static void dshot_start_pwm()
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 8000b98:	210c      	movs	r1, #12
 8000b9a:	4808      	ldr	r0, [pc, #32]	@ (8000bbc <dshot_start_pwm+0x28>)
 8000b9c:	f00a fd6e 	bl	800b67c <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 8000ba0:	2108      	movs	r1, #8
 8000ba2:	4807      	ldr	r0, [pc, #28]	@ (8000bc0 <dshot_start_pwm+0x2c>)
 8000ba4:	f00a fd6a 	bl	800b67c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <dshot_start_pwm+0x2c>)
 8000bac:	f00a fd66 	bl	800b67c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 8000bb0:	2104      	movs	r1, #4
 8000bb2:	4802      	ldr	r0, [pc, #8]	@ (8000bbc <dshot_start_pwm+0x28>)
 8000bb4:	f00a fd62 	bl	800b67c <HAL_TIM_PWM_Start>
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	240006a0 	.word	0x240006a0
 8000bc0:	240005bc 	.word	0x240005bc

08000bc4 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b087      	sub	sp, #28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 8000bd2:	88fb      	ldrh	r3, [r7, #6]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	b21a      	sxth	r2, r3
 8000bd8:	7afb      	ldrb	r3, [r7, #11]
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 8000be6:	893b      	ldrh	r3, [r7, #8]
 8000be8:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	e009      	b.n	8000c04 <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	4053      	eors	r3, r2
 8000bf6:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	091b      	lsrs	r3, r3, #4
 8000bfc:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	3301      	adds	r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	ddf2      	ble.n	8000bf0 <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	f003 030f 	and.w	r3, r3, #15
 8000c10:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 8000c12:	893b      	ldrh	r3, [r7, #8]
 8000c14:	011b      	lsls	r3, r3, #4
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	813b      	strh	r3, [r7, #8]

	return packet;
 8000c20:	893b      	ldrh	r3, [r7, #8]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	371c      	adds	r7, #28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b084      	sub	sp, #16
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
 8000c36:	460b      	mov	r3, r1
 8000c38:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ffc1 	bl	8000bc4 <dshot_prepare_packet>
 8000c42:	4603      	mov	r3, r0
 8000c44:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	e011      	b.n	8000c70 <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 8000c4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	da01      	bge.n	8000c58 <dshot_prepare_dmabuffer+0x2a>
 8000c54:	220e      	movs	r2, #14
 8000c56:	e000      	b.n	8000c5a <dshot_prepare_dmabuffer+0x2c>
 8000c58:	2207      	movs	r2, #7
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	440b      	add	r3, r1
 8000c62:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8000c64:	89fb      	ldrh	r3, [r7, #14]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b0f      	cmp	r3, #15
 8000c74:	ddea      	ble.n	8000c4c <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3340      	adds	r3, #64	@ 0x40
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	3344      	adds	r3, #68	@ 0x44
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
}
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480e      	ldr	r0, [pc, #56]	@ (8000cd8 <dshot_prepare_dmabuffer_all+0x48>)
 8000ca0:	f7ff ffc5 	bl	8000c2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3302      	adds	r3, #2
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	4619      	mov	r1, r3
 8000cac:	480b      	ldr	r0, [pc, #44]	@ (8000cdc <dshot_prepare_dmabuffer_all+0x4c>)
 8000cae:	f7ff ffbe 	bl	8000c2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4809      	ldr	r0, [pc, #36]	@ (8000ce0 <dshot_prepare_dmabuffer_all+0x50>)
 8000cbc:	f7ff ffb7 	bl	8000c2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3306      	adds	r3, #6
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4806      	ldr	r0, [pc, #24]	@ (8000ce4 <dshot_prepare_dmabuffer_all+0x54>)
 8000cca:	f7ff ffb0 	bl	8000c2e <dshot_prepare_dmabuffer>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	24000370 	.word	0x24000370
 8000cdc:	240003b8 	.word	0x240003b8
 8000ce0:	24000400 	.word	0x24000400
 8000ce4:	24000448 	.word	0x24000448

08000ce8 <dshot_dma_start>:

static void dshot_dma_start()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 8000cec:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <dshot_dma_start+0x58>)
 8000cee:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000cf0:	4914      	ldr	r1, [pc, #80]	@ (8000d44 <dshot_dma_start+0x5c>)
 8000cf2:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <dshot_dma_start+0x58>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	3340      	adds	r3, #64	@ 0x40
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	2312      	movs	r3, #18
 8000cfc:	f003 fb94 	bl	8004428 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
 8000d00:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <dshot_dma_start+0x60>)
 8000d02:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8000d04:	4911      	ldr	r1, [pc, #68]	@ (8000d4c <dshot_dma_start+0x64>)
 8000d06:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <dshot_dma_start+0x60>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	333c      	adds	r3, #60	@ 0x3c
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	2312      	movs	r3, #18
 8000d10:	f003 fb8a 	bl	8004428 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR1, DSHOT_DMA_BUFFER_SIZE);
 8000d14:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <dshot_dma_start+0x60>)
 8000d16:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000d18:	490d      	ldr	r1, [pc, #52]	@ (8000d50 <dshot_dma_start+0x68>)
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <dshot_dma_start+0x60>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3334      	adds	r3, #52	@ 0x34
 8000d20:	461a      	mov	r2, r3
 8000d22:	2312      	movs	r3, #18
 8000d24:	f003 fb80 	bl	8004428 <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
 8000d28:	4b05      	ldr	r3, [pc, #20]	@ (8000d40 <dshot_dma_start+0x58>)
 8000d2a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000d2c:	4909      	ldr	r1, [pc, #36]	@ (8000d54 <dshot_dma_start+0x6c>)
 8000d2e:	4b04      	ldr	r3, [pc, #16]	@ (8000d40 <dshot_dma_start+0x58>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	3338      	adds	r3, #56	@ 0x38
 8000d34:	461a      	mov	r2, r3
 8000d36:	2312      	movs	r3, #18
 8000d38:	f003 fb76 	bl	8004428 <HAL_DMA_Start_IT>
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	240006a0 	.word	0x240006a0
 8000d44:	24000370 	.word	0x24000370
 8000d48:	240005bc 	.word	0x240005bc
 8000d4c:	240003b8 	.word	0x240003b8
 8000d50:	24000400 	.word	0x24000400
 8000d54:	24000448 	.word	0x24000448

08000d58 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC4);
 8000d5c:	4b12      	ldr	r3, [pc, #72]	@ (8000da8 <dshot_enable_dma_request+0x50>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	68da      	ldr	r2, [r3, #12]
 8000d62:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <dshot_enable_dma_request+0x50>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000d6a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <dshot_enable_dma_request+0x54>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <dshot_enable_dma_request+0x54>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000d7a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC1);
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <dshot_enable_dma_request+0x54>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	68da      	ldr	r2, [r3, #12]
 8000d82:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <dshot_enable_dma_request+0x54>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000d8a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC2);
 8000d8c:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <dshot_enable_dma_request+0x50>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	68da      	ldr	r2, [r3, #12]
 8000d92:	4b05      	ldr	r3, [pc, #20]	@ (8000da8 <dshot_enable_dma_request+0x50>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000d9a:	60da      	str	r2, [r3, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	240006a0 	.word	0x240006a0
 8000dac:	240005bc 	.word	0x240005bc

08000db0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b087      	sub	sp, #28
 8000db4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db6:	4b28      	ldr	r3, [pc, #160]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dbc:	4a26      	ldr	r2, [pc, #152]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000dbe:	f043 0304 	orr.w	r3, r3, #4
 8000dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc6:	4b24      	ldr	r3, [pc, #144]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd4:	4b20      	ldr	r3, [pc, #128]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dda:	4a1f      	ldr	r2, [pc, #124]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000df2:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df8:	4a17      	ldr	r2, [pc, #92]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000dfa:	f043 0310 	orr.w	r3, r3, #16
 8000dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e02:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e08:	f003 0310 	and.w	r3, r3, #16
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e10:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e16:	4a10      	ldr	r2, [pc, #64]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e18:	f043 0308 	orr.w	r3, r3, #8
 8000e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e20:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e26:	f003 0308 	and.w	r3, r3, #8
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e34:	4a08      	ldr	r2, [pc, #32]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]

}
 8000e4c:	bf00      	nop
 8000e4e:	371c      	adds	r7, #28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	58024400 	.word	0x58024400

08000e5c <HAL_TIM_IC_CaptureCallback>:
		}
		xfr_ptr->sts_4to7 = 0; // M4 to M7 buffer is empty
	}
	return buffer; // return the buffer (pointer)
}
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
	contador = __HAL_TIM_GET_COUNTER(&htim4);
 8000e64:	4b05      	ldr	r3, [pc, #20]	@ (8000e7c <HAL_TIM_IC_CaptureCallback+0x20>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e6a:	4a05      	ldr	r2, [pc, #20]	@ (8000e80 <HAL_TIM_IC_CaptureCallback+0x24>)
 8000e6c:	6013      	str	r3, [r2, #0]
}
 8000e6e:	bf00      	nop
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	24000654 	.word	0x24000654
 8000e80:	240004a0 	.word	0x240004a0

08000e84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b0a8      	sub	sp, #160	@ 0xa0
 8000e88:	af06      	add	r7, sp, #24
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000e8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e8e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000e92:	bf00      	nop
 8000e94:	4baa      	ldr	r3, [pc, #680]	@ (8001140 <main+0x2bc>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d006      	beq.n	8000eae <main+0x2a>
 8000ea0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000ea4:	1e5a      	subs	r2, r3, #1
 8000ea6:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	dcf2      	bgt.n	8000e94 <main+0x10>
  if ( timeout < 0 )
 8000eae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	da01      	bge.n	8000eba <main+0x36>
  {
  Error_Handler();
 8000eb6:	f000 fa14 	bl	80012e2 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eba:	f001 fcd9 	bl	8002870 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ebe:	f000 f95d 	bl	800117c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ec2:	f000 f9db 	bl	800127c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000ec6:	4b9e      	ldr	r3, [pc, #632]	@ (8001140 <main+0x2bc>)
 8000ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ecc:	4a9c      	ldr	r2, [pc, #624]	@ (8001140 <main+0x2bc>)
 8000ece:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ed2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ed6:	4b9a      	ldr	r3, [pc, #616]	@ (8001140 <main+0x2bc>)
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000edc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ee0:	603b      	str	r3, [r7, #0]
 8000ee2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f005 fa87 	bl	80063f8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000eea:	2100      	movs	r1, #0
 8000eec:	2000      	movs	r0, #0
 8000eee:	f005 fa9d 	bl	800642c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000ef2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ef6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000efa:	bf00      	nop
 8000efc:	4b90      	ldr	r3, [pc, #576]	@ (8001140 <main+0x2bc>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d106      	bne.n	8000f16 <main+0x92>
 8000f08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f0c:	1e5a      	subs	r2, r3, #1
 8000f0e:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	dcf2      	bgt.n	8000efc <main+0x78>
if ( timeout < 0 )
 8000f16:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	da01      	bge.n	8000f22 <main+0x9e>
{
Error_Handler();
 8000f1e:	f000 f9e0 	bl	80012e2 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f22:	f7ff ff45 	bl	8000db0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f26:	f7ff fd01 	bl	800092c <MX_DMA_Init>
  MX_TIM2_Init();
 8000f2a:	f000 fdc3 	bl	8001ab4 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000f2e:	f000 fed1 	bl	8001cd4 <MX_TIM5_Init>
  MX_TIM3_Init();
 8000f32:	f000 fe23 	bl	8001b7c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f36:	f000 fe77 	bl	8001c28 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000f3a:	f010 f9e9 	bl	8011310 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000f3e:	f000 fd5f 	bl	8001a00 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000f42:	f000 ff2b 	bl	8001d9c <MX_TIM8_Init>
  MX_TIM15_Init();
 8000f46:	f000 ff83 	bl	8001e50 <MX_TIM15_Init>
  MX_ADC1_Init();
 8000f4a:	f7ff fc2f 	bl	80007ac <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  int count = 0;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000f54:	213c      	movs	r1, #60	@ 0x3c
 8000f56:	487b      	ldr	r0, [pc, #492]	@ (8001144 <main+0x2c0>)
 8000f58:	f00a fd44 	bl	800b9e4 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8000f5c:	213c      	movs	r1, #60	@ 0x3c
 8000f5e:	487a      	ldr	r0, [pc, #488]	@ (8001148 <main+0x2c4>)
 8000f60:	f00a fd40 	bl	800b9e4 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 8000f64:	213c      	movs	r1, #60	@ 0x3c
 8000f66:	4879      	ldr	r0, [pc, #484]	@ (800114c <main+0x2c8>)
 8000f68:	f00a fd3c 	bl	800b9e4 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000f6c:	213c      	movs	r1, #60	@ 0x3c
 8000f6e:	4878      	ldr	r0, [pc, #480]	@ (8001150 <main+0x2cc>)
 8000f70:	f00a fd38 	bl	800b9e4 <HAL_TIM_Encoder_Start_IT>
	uint8_t * xfr_data; // pointer to transfer data


	//initialize inter-core status pointers
	xfr_ptr->sts_4to7 = 0;
 8000f74:	4b77      	ldr	r3, [pc, #476]	@ (8001154 <main+0x2d0>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
	xfr_ptr->sts_7to4 = 0;
 8000f7a:	4b76      	ldr	r3, [pc, #472]	@ (8001154 <main+0x2d0>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	705a      	strb	r2, [r3, #1]
	extern uint16_t D[4];

	dshot_init(DSHOT300);
 8000f80:	2001      	movs	r0, #1
 8000f82:	f7ff fd0b 	bl	800099c <dshot_init>
	  if (HAL_TIM_Base_Start_IT(&htim15) != HAL_OK)
 8000f86:	4874      	ldr	r0, [pc, #464]	@ (8001158 <main+0x2d4>)
 8000f88:	f00a faa8 	bl	800b4dc <HAL_TIM_Base_Start_IT>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <main+0x112>
	    {
	      /* Starting Error */
	      Error_Handler();
 8000f92:	f000 f9a6 	bl	80012e2 <Error_Handler>
	    }
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000f96:	2000      	movs	r0, #0
 8000f98:	f001 fa86 	bl	80024a8 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f001 fa83 	bl	80024a8 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000fa2:	2002      	movs	r0, #2
 8000fa4:	f001 fa80 	bl	80024a8 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000fa8:	2101      	movs	r1, #1
 8000faa:	2000      	movs	r0, #0
 8000fac:	f001 faf2 	bl	8002594 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000fb0:	4b6a      	ldr	r3, [pc, #424]	@ (800115c <main+0x2d8>)
 8000fb2:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000fb6:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000fb8:	4b68      	ldr	r3, [pc, #416]	@ (800115c <main+0x2d8>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000fbe:	4b67      	ldr	r3, [pc, #412]	@ (800115c <main+0x2d8>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000fc4:	4b65      	ldr	r3, [pc, #404]	@ (800115c <main+0x2d8>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000fca:	4b64      	ldr	r3, [pc, #400]	@ (800115c <main+0x2d8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000fd0:	4962      	ldr	r1, [pc, #392]	@ (800115c <main+0x2d8>)
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f001 fb6e 	bl	80026b4 <BSP_COM_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <main+0x15e>
  {
    Error_Handler();
 8000fde:	f000 f980 	bl	80012e2 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char message[100]={'\0'};
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
 8000fe6:	f107 031c 	add.w	r3, r7, #28
 8000fea:	2260      	movs	r2, #96	@ 0x60
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f011 fc3b 	bl	801286a <memset>
  uint16_t zero[4] = {0,0,0,0};
 8000ff4:	f107 0310 	add.w	r3, r7, #16
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
  uint16_t bi[4] = {2045,0,0,0};
 8000ffe:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 8001002:	813b      	strh	r3, [r7, #8]
 8001004:	2300      	movs	r3, #0
 8001006:	817b      	strh	r3, [r7, #10]
 8001008:	2300      	movs	r3, #0
 800100a:	81bb      	strh	r3, [r7, #12]
 800100c:	2300      	movs	r3, #0
 800100e:	81fb      	strh	r3, [r7, #14]
  uint8_t robonum;
  GPIO_PinState PinState[2];
  //definicao do robo por meio da entrada de tensao no pinc10 e Pinc11//
  PinState[0]= HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_10);
 8001010:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001014:	4852      	ldr	r0, [pc, #328]	@ (8001160 <main+0x2dc>)
 8001016:	f005 f9a3 	bl	8006360 <HAL_GPIO_ReadPin>
 800101a:	4603      	mov	r3, r0
 800101c:	713b      	strb	r3, [r7, #4]
  PinState[1]= HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_11);
 800101e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001022:	484f      	ldr	r0, [pc, #316]	@ (8001160 <main+0x2dc>)
 8001024:	f005 f99c 	bl	8006360 <HAL_GPIO_ReadPin>
 8001028:	4603      	mov	r3, r0
 800102a:	717b      	strb	r3, [r7, #5]
  if((PinState[0]==0)&&(PinState[1]==0))
 800102c:	793b      	ldrb	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d105      	bne.n	800103e <main+0x1ba>
 8001032:	797b      	ldrb	r3, [r7, #5]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d102      	bne.n	800103e <main+0x1ba>
	  robonum=0;
 8001038:	2300      	movs	r3, #0
 800103a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
  if(PinState[0]==1)
 800103e:	793b      	ldrb	r3, [r7, #4]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d102      	bne.n	800104a <main+0x1c6>
	  robonum=1;
 8001044:	2301      	movs	r3, #1
 8001046:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
  if(PinState[1]==1)
 800104a:	797b      	ldrb	r3, [r7, #5]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d102      	bne.n	8001056 <main+0x1d2>
	  robonum=2;
 8001050:	2302      	movs	r3, #2
 8001052:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
	  	  for(int n=0;n<4;n++){
	  		  motores[n] = (Mensagem[n]*2048)/255;

	  	  }
	  	  */
	  	  motores[0]=0;
 8001056:	4b43      	ldr	r3, [pc, #268]	@ (8001164 <main+0x2e0>)
 8001058:	2200      	movs	r2, #0
 800105a:	801a      	strh	r2, [r3, #0]
	  	  for(uint8_t i=0;i<4;i++){
 800105c:	2300      	movs	r3, #0
 800105e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8001062:	e036      	b.n	80010d2 <main+0x24e>
			  if(count<5000){
 8001064:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001068:	f241 3287 	movw	r2, #4999	@ 0x1387
 800106c:	4293      	cmp	r3, r2
 800106e:	dc08      	bgt.n	8001082 <main+0x1fe>
				  ref[i] = 0;
 8001070:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001074:	4a3c      	ldr	r2, [pc, #240]	@ (8001168 <main+0x2e4>)
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	4413      	add	r3, r2
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	e022      	b.n	80010c8 <main+0x244>

			  } else if(count>=5000){
 8001082:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001086:	f241 3287 	movw	r2, #4999	@ 0x1387
 800108a:	4293      	cmp	r3, r2
 800108c:	dd0b      	ble.n	80010a6 <main+0x222>
				  ref[i] = 0;
 800108e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8001092:	4a35      	ldr	r2, [pc, #212]	@ (8001168 <main+0x2e4>)
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	4413      	add	r3, r2
 8001098:	f04f 0200 	mov.w	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
				  ref[3] = 6;
 800109e:	4b32      	ldr	r3, [pc, #200]	@ (8001168 <main+0x2e4>)
 80010a0:	4a32      	ldr	r2, [pc, #200]	@ (800116c <main+0x2e8>)
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	e010      	b.n	80010c8 <main+0x244>

			  } else if(count >= 15000){
 80010a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80010aa:	f643 2297 	movw	r2, #14999	@ 0x3a97
 80010ae:	4293      	cmp	r3, r2
 80010b0:	dd0a      	ble.n	80010c8 <main+0x244>
				  ref[i] = 0;
 80010b2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80010b6:	4a2c      	ldr	r2, [pc, #176]	@ (8001168 <main+0x2e4>)
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
				  ref[3] = 6;
 80010c2:	4b29      	ldr	r3, [pc, #164]	@ (8001168 <main+0x2e4>)
 80010c4:	4a29      	ldr	r2, [pc, #164]	@ (800116c <main+0x2e8>)
 80010c6:	60da      	str	r2, [r3, #12]
	  	  for(uint8_t i=0;i<4;i++){
 80010c8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80010cc:	3301      	adds	r3, #1
 80010ce:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80010d2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d9c4      	bls.n	8001064 <main+0x1e0>
			  }
	  	  }
	  	  dshot_write(D);
 80010da:	4825      	ldr	r0, [pc, #148]	@ (8001170 <main+0x2ec>)
 80010dc:	f7ff fc6f 	bl	80009be <dshot_write>
	  	  count++;
 80010e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80010e4:	3301      	adds	r3, #1
 80010e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
	  	  sprintf(message, "%f oi %f oi %f io %f \n \r",velocidade[0],velocidade[1],velocidade[2],velocidade[3]);
 80010ea:	4b22      	ldr	r3, [pc, #136]	@ (8001174 <main+0x2f0>)
 80010ec:	edd3 7a00 	vldr	s15, [r3]
 80010f0:	eeb7 4ae7 	vcvt.f64.f32	d4, s15
 80010f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001174 <main+0x2f0>)
 80010f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80010fa:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80010fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001174 <main+0x2f0>)
 8001100:	edd3 6a02 	vldr	s13, [r3, #8]
 8001104:	eeb7 6ae6 	vcvt.f64.f32	d6, s13
 8001108:	4b1a      	ldr	r3, [pc, #104]	@ (8001174 <main+0x2f0>)
 800110a:	edd3 5a03 	vldr	s11, [r3, #12]
 800110e:	eeb7 5ae5 	vcvt.f64.f32	d5, s11
 8001112:	f107 0018 	add.w	r0, r7, #24
 8001116:	ed8d 5b04 	vstr	d5, [sp, #16]
 800111a:	ed8d 6b02 	vstr	d6, [sp, #8]
 800111e:	ed8d 7b00 	vstr	d7, [sp]
 8001122:	ec53 2b14 	vmov	r2, r3, d4
 8001126:	4914      	ldr	r1, [pc, #80]	@ (8001178 <main+0x2f4>)
 8001128:	f011 fb3c 	bl	80127a4 <siprintf>
	  	  CDC_Transmit_FS(message,sizeof(message));
 800112c:	f107 0318 	add.w	r3, r7, #24
 8001130:	2164      	movs	r1, #100	@ 0x64
 8001132:	4618      	mov	r0, r3
 8001134:	f010 f9ac 	bl	8011490 <CDC_Transmit_FS>
	  	  HAL_Delay(1);
 8001138:	2001      	movs	r0, #1
 800113a:	f001 fc2b 	bl	8002994 <HAL_Delay>
  {
 800113e:	e78a      	b.n	8001056 <main+0x1d2>
 8001140:	58024400 	.word	0x58024400
 8001144:	24000654 	.word	0x24000654
 8001148:	24000570 	.word	0x24000570
 800114c:	240006ec 	.word	0x240006ec
 8001150:	24000608 	.word	0x24000608
 8001154:	38001000 	.word	0x38001000
 8001158:	24000738 	.word	0x24000738
 800115c:	24000490 	.word	0x24000490
 8001160:	58020800 	.word	0x58020800
 8001164:	240004c4 	.word	0x240004c4
 8001168:	240004b4 	.word	0x240004b4
 800116c:	40c00000 	.word	0x40c00000
 8001170:	24000534 	.word	0x24000534
 8001174:	240004a4 	.word	0x240004a4
 8001178:	080149c0 	.word	0x080149c0

0800117c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b09c      	sub	sp, #112	@ 0x70
 8001180:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001182:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001186:	224c      	movs	r2, #76	@ 0x4c
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f011 fb6d 	bl	801286a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	2220      	movs	r2, #32
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f011 fb67 	bl	801286a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800119c:	2004      	movs	r0, #4
 800119e:	f006 fbf7 	bl	8007990 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	4b33      	ldr	r3, [pc, #204]	@ (8001274 <SystemClock_Config+0xf8>)
 80011a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011aa:	4a32      	ldr	r2, [pc, #200]	@ (8001274 <SystemClock_Config+0xf8>)
 80011ac:	f023 0301 	bic.w	r3, r3, #1
 80011b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80011b2:	4b30      	ldr	r3, [pc, #192]	@ (8001274 <SystemClock_Config+0xf8>)
 80011b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	4b2e      	ldr	r3, [pc, #184]	@ (8001278 <SystemClock_Config+0xfc>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80011c4:	4a2c      	ldr	r2, [pc, #176]	@ (8001278 <SystemClock_Config+0xfc>)
 80011c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001278 <SystemClock_Config+0xfc>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80011d8:	bf00      	nop
 80011da:	4b27      	ldr	r3, [pc, #156]	@ (8001278 <SystemClock_Config+0xfc>)
 80011dc:	699b      	ldr	r3, [r3, #24]
 80011de:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80011e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80011e6:	d1f8      	bne.n	80011da <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 80011e8:	2322      	movs	r3, #34	@ 0x22
 80011ea:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80011ec:	2301      	movs	r3, #1
 80011ee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f0:	2340      	movs	r3, #64	@ 0x40
 80011f2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80011f4:	2301      	movs	r3, #1
 80011f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f8:	2302      	movs	r3, #2
 80011fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011fc:	2300      	movs	r3, #0
 80011fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001200:	2304      	movs	r3, #4
 8001202:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8001204:	2319      	movs	r3, #25
 8001206:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001208:	2302      	movs	r3, #2
 800120a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800120c:	2305      	movs	r3, #5
 800120e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001210:	2302      	movs	r3, #2
 8001212:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001214:	230c      	movs	r3, #12
 8001216:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001218:	2300      	movs	r3, #0
 800121a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800121c:	2300      	movs	r3, #0
 800121e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001220:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001224:	4618      	mov	r0, r3
 8001226:	f006 fc1d 	bl	8007a64 <HAL_RCC_OscConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001230:	f000 f857 	bl	80012e2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001234:	233f      	movs	r3, #63	@ 0x3f
 8001236:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001238:	2303      	movs	r3, #3
 800123a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800123c:	2300      	movs	r3, #0
 800123e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001240:	2300      	movs	r3, #0
 8001242:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001244:	2340      	movs	r3, #64	@ 0x40
 8001246:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001248:	2340      	movs	r3, #64	@ 0x40
 800124a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800124c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001250:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001252:	2340      	movs	r3, #64	@ 0x40
 8001254:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2104      	movs	r1, #4
 800125a:	4618      	mov	r0, r3
 800125c:	f007 f85c 	bl	8008318 <HAL_RCC_ClockConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001266:	f000 f83c 	bl	80012e2 <Error_Handler>
  }
}
 800126a:	bf00      	nop
 800126c:	3770      	adds	r7, #112	@ 0x70
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	58000400 	.word	0x58000400
 8001278:	58024800 	.word	0x58024800

0800127c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b0b0      	sub	sp, #192	@ 0xc0
 8001280:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001282:	463b      	mov	r3, r7
 8001284:	22c0      	movs	r2, #192	@ 0xc0
 8001286:	2100      	movs	r1, #0
 8001288:	4618      	mov	r0, r3
 800128a:	f011 faee 	bl	801286a <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI1;
 800128e:	f44f 2201 	mov.w	r2, #528384	@ 0x81000
 8001292:	f04f 0300 	mov.w	r3, #0
 8001296:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800129a:	2304      	movs	r3, #4
 800129c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 800129e:	2309      	movs	r3, #9
 80012a0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80012a2:	2302      	movs	r3, #2
 80012a4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80012a6:	2302      	movs	r3, #2
 80012a8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 80012aa:	2302      	movs	r3, #2
 80012ac:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80012ae:	23c0      	movs	r3, #192	@ 0xc0
 80012b0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80012b2:	2320      	movs	r3, #32
 80012b4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 80012b6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80012ba:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 80012bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012c0:	663b      	str	r3, [r7, #96]	@ 0x60
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80012c2:	2300      	movs	r3, #0
 80012c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012c8:	463b      	mov	r3, r7
 80012ca:	4618      	mov	r0, r3
 80012cc:	f007 fbb0 	bl	8008a30 <HAL_RCCEx_PeriphCLKConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 80012d6:	f000 f804 	bl	80012e2 <Error_Handler>
  }
}
 80012da:	bf00      	nop
 80012dc:	37c0      	adds	r7, #192	@ 0xc0
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e6:	b672      	cpsid	i
}
 80012e8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ea:	bf00      	nop
 80012ec:	e7fd      	b.n	80012ea <Error_Handler+0x8>
	...

080012f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001320 <HAL_MspInit+0x30>)
 80012f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012fc:	4a08      	ldr	r2, [pc, #32]	@ (8001320 <HAL_MspInit+0x30>)
 80012fe:	f043 0302 	orr.w	r3, r3, #2
 8001302:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001306:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <HAL_MspInit+0x30>)
 8001308:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	58024400 	.word	0x58024400

08001324 <map>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Função de mapeamento
uint16_t map(float x, int in_min, int in_max, int out_min, int out_max) {
 8001324:	b480      	push	{r7}
 8001326:	b087      	sub	sp, #28
 8001328:	af00      	add	r7, sp, #0
 800132a:	ed87 0a05 	vstr	s0, [r7, #20]
 800132e:	6138      	str	r0, [r7, #16]
 8001330:	60f9      	str	r1, [r7, #12]
 8001332:	60ba      	str	r2, [r7, #8]
 8001334:	607b      	str	r3, [r7, #4]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	ee07 3a90 	vmov	s15, r3
 800133c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001340:	ed97 7a05 	vldr	s14, [r7, #20]
 8001344:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	68bb      	ldr	r3, [r7, #8]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	ee07 3a90 	vmov	s15, r3
 8001352:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001356:	ee67 6a27 	vmul.f32	s13, s14, s15
 800135a:	68fa      	ldr	r2, [r7, #12]
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	ee07 3a90 	vmov	s15, r3
 8001364:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001368:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	ee07 3a90 	vmov	s15, r3
 8001372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800137a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800137e:	ee17 3a90 	vmov	r3, s15
 8001382:	b29b      	uxth	r3, r3
}
 8001384:	4618      	mov	r0, r3
 8001386:	371c      	adds	r7, #28
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <Controle>:

void Controle(){
 8001390:	b590      	push	{r4, r7, lr}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0

	for(uint8_t n=0;n<4;n++){
 8001396:	2300      	movs	r3, #0
 8001398:	71fb      	strb	r3, [r7, #7]
 800139a:	e0e9      	b.n	8001570 <Controle+0x1e0>
		//Calculo de erro
		error[n] =ref[n] -  speed[n];
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	4aa3      	ldr	r2, [pc, #652]	@ (800162c <Controle+0x29c>)
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	ed93 7a00 	vldr	s14, [r3]
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	4aa1      	ldr	r2, [pc, #644]	@ (8001630 <Controle+0x2a0>)
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	edd3 7a00 	vldr	s15, [r3]
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013ba:	4a9e      	ldr	r2, [pc, #632]	@ (8001634 <Controle+0x2a4>)
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	4413      	add	r3, r2
 80013c0:	edc3 7a00 	vstr	s15, [r3]
		//Variação da ação de controle para esta iteração
		deltaU[n] = Kc*(error[n]- preverror[n]) + error[n]*Ki -Kd*(speed[n]-2*prevspeed[n] + prevspeed2[n]);
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	4a9b      	ldr	r2, [pc, #620]	@ (8001634 <Controle+0x2a4>)
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	ed93 7a00 	vldr	s14, [r3]
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	4a99      	ldr	r2, [pc, #612]	@ (8001638 <Controle+0x2a8>)
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	4413      	add	r3, r2
 80013d8:	edd3 7a00 	vldr	s15, [r3]
 80013dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013e0:	4b96      	ldr	r3, [pc, #600]	@ (800163c <Controle+0x2ac>)
 80013e2:	edd3 7a00 	vldr	s15, [r3]
 80013e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	4a91      	ldr	r2, [pc, #580]	@ (8001634 <Controle+0x2a4>)
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	4413      	add	r3, r2
 80013f2:	edd3 6a00 	vldr	s13, [r3]
 80013f6:	4b92      	ldr	r3, [pc, #584]	@ (8001640 <Controle+0x2b0>)
 80013f8:	edd3 7a00 	vldr	s15, [r3]
 80013fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001400:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	4a8a      	ldr	r2, [pc, #552]	@ (8001630 <Controle+0x2a0>)
 8001408:	009b      	lsls	r3, r3, #2
 800140a:	4413      	add	r3, r2
 800140c:	edd3 6a00 	vldr	s13, [r3]
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	4a8c      	ldr	r2, [pc, #560]	@ (8001644 <Controle+0x2b4>)
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	4413      	add	r3, r2
 8001418:	edd3 7a00 	vldr	s15, [r3]
 800141c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001420:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001424:	79fb      	ldrb	r3, [r7, #7]
 8001426:	4a88      	ldr	r2, [pc, #544]	@ (8001648 <Controle+0x2b8>)
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	edd3 7a00 	vldr	s15, [r3]
 8001430:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001434:	4b85      	ldr	r3, [pc, #532]	@ (800164c <Controle+0x2bc>)
 8001436:	edd3 7a00 	vldr	s15, [r3]
 800143a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001444:	4a82      	ldr	r2, [pc, #520]	@ (8001650 <Controle+0x2c0>)
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	4413      	add	r3, r2
 800144a:	edc3 7a00 	vstr	s15, [r3]
		//Ação de controle
		uM[n] = uM[n] + deltaU[n];
 800144e:	79fb      	ldrb	r3, [r7, #7]
 8001450:	4a80      	ldr	r2, [pc, #512]	@ (8001654 <Controle+0x2c4>)
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	ed93 7a00 	vldr	s14, [r3]
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	4a7c      	ldr	r2, [pc, #496]	@ (8001650 <Controle+0x2c0>)
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	edd3 7a00 	vldr	s15, [r3]
 8001466:	79fb      	ldrb	r3, [r7, #7]
 8001468:	ee77 7a27 	vadd.f32	s15, s14, s15
 800146c:	4a79      	ldr	r2, [pc, #484]	@ (8001654 <Controle+0x2c4>)
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	edc3 7a00 	vstr	s15, [r3]
		//Saturado para evitar que a ação de controle ultrapasse o limite
		if( uM[n] < -1023){
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	4a76      	ldr	r2, [pc, #472]	@ (8001654 <Controle+0x2c4>)
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	4413      	add	r3, r2
 800147e:	edd3 7a00 	vldr	s15, [r3]
 8001482:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 8001658 <Controle+0x2c8>
 8001486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148e:	d505      	bpl.n	800149c <Controle+0x10c>
			uM[n]= -1023;
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	4a70      	ldr	r2, [pc, #448]	@ (8001654 <Controle+0x2c4>)
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	4a70      	ldr	r2, [pc, #448]	@ (800165c <Controle+0x2cc>)
 800149a:	601a      	str	r2, [r3, #0]
		}
		if(uM[n]>1023){
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	4a6d      	ldr	r2, [pc, #436]	@ (8001654 <Controle+0x2c4>)
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	4413      	add	r3, r2
 80014a4:	edd3 7a00 	vldr	s15, [r3]
 80014a8:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8001660 <Controle+0x2d0>
 80014ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b4:	dd05      	ble.n	80014c2 <Controle+0x132>
			uM[n]= 1023;
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	4a66      	ldr	r2, [pc, #408]	@ (8001654 <Controle+0x2c4>)
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	4413      	add	r3, r2
 80014be:	4a69      	ldr	r2, [pc, #420]	@ (8001664 <Controle+0x2d4>)
 80014c0:	601a      	str	r2, [r3, #0]
		}
		//Mapeamento da variavel de ação de controle no alcançe dado
		if(ref[n]==0){
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	4a59      	ldr	r2, [pc, #356]	@ (800162c <Controle+0x29c>)
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	edd3 7a00 	vldr	s15, [r3]
 80014ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80014d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d6:	d105      	bne.n	80014e4 <Controle+0x154>
			D[n]=0;
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	4a63      	ldr	r2, [pc, #396]	@ (8001668 <Controle+0x2d8>)
 80014dc:	2100      	movs	r1, #0
 80014de:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80014e2:	e042      	b.n	800156a <Controle+0x1da>
		}else if(uM[n]>=0 ){
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	4a5b      	ldr	r2, [pc, #364]	@ (8001654 <Controle+0x2c4>)
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	4413      	add	r3, r2
 80014ec:	edd3 7a00 	vldr	s15, [r3]
 80014f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f8:	db16      	blt.n	8001528 <Controle+0x198>
			D[n] = map(uM[n],0,1023,0,1023);
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	4a55      	ldr	r2, [pc, #340]	@ (8001654 <Controle+0x2c4>)
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	4413      	add	r3, r2
 8001502:	edd3 7a00 	vldr	s15, [r3]
 8001506:	79fc      	ldrb	r4, [r7, #7]
 8001508:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800150c:	2200      	movs	r2, #0
 800150e:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8001512:	2000      	movs	r0, #0
 8001514:	eeb0 0a67 	vmov.f32	s0, s15
 8001518:	f7ff ff04 	bl	8001324 <map>
 800151c:	4603      	mov	r3, r0
 800151e:	461a      	mov	r2, r3
 8001520:	4b51      	ldr	r3, [pc, #324]	@ (8001668 <Controle+0x2d8>)
 8001522:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 8001526:	e020      	b.n	800156a <Controle+0x1da>
		}else if(uM[n]<0){
 8001528:	79fb      	ldrb	r3, [r7, #7]
 800152a:	4a4a      	ldr	r2, [pc, #296]	@ (8001654 <Controle+0x2c4>)
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4413      	add	r3, r2
 8001530:	edd3 7a00 	vldr	s15, [r3]
 8001534:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001538:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800153c:	d515      	bpl.n	800156a <Controle+0x1da>
			D[n]= map(uM[n],-1023,0,2047,1023);
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	4a44      	ldr	r2, [pc, #272]	@ (8001654 <Controle+0x2c4>)
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4413      	add	r3, r2
 8001546:	edd3 7a00 	vldr	s15, [r3]
 800154a:	79fc      	ldrb	r4, [r7, #7]
 800154c:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8001550:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001554:	2100      	movs	r1, #0
 8001556:	4845      	ldr	r0, [pc, #276]	@ (800166c <Controle+0x2dc>)
 8001558:	eeb0 0a67 	vmov.f32	s0, s15
 800155c:	f7ff fee2 	bl	8001324 <map>
 8001560:	4603      	mov	r3, r0
 8001562:	461a      	mov	r2, r3
 8001564:	4b40      	ldr	r3, [pc, #256]	@ (8001668 <Controle+0x2d8>)
 8001566:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for(uint8_t n=0;n<4;n++){
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	3301      	adds	r3, #1
 800156e:	71fb      	strb	r3, [r7, #7]
 8001570:	79fb      	ldrb	r3, [r7, #7]
 8001572:	2b03      	cmp	r3, #3
 8001574:	f67f af12 	bls.w	800139c <Controle+0xc>
		}
	}

	//Logica para salvar o erro e a velocidade anterior
	cont = cont +1;
 8001578:	4b3d      	ldr	r3, [pc, #244]	@ (8001670 <Controle+0x2e0>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	3301      	adds	r3, #1
 800157e:	b2da      	uxtb	r2, r3
 8001580:	4b3b      	ldr	r3, [pc, #236]	@ (8001670 <Controle+0x2e0>)
 8001582:	701a      	strb	r2, [r3, #0]
	if(cont == 1){
 8001584:	4b3a      	ldr	r3, [pc, #232]	@ (8001670 <Controle+0x2e0>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d11d      	bne.n	80015c8 <Controle+0x238>
		for(uint8_t n=0;n<4;n++){
 800158c:	2300      	movs	r3, #0
 800158e:	71bb      	strb	r3, [r7, #6]
 8001590:	e016      	b.n	80015c0 <Controle+0x230>
			prevspeed[n] = speed[n];
 8001592:	79ba      	ldrb	r2, [r7, #6]
 8001594:	79bb      	ldrb	r3, [r7, #6]
 8001596:	4926      	ldr	r1, [pc, #152]	@ (8001630 <Controle+0x2a0>)
 8001598:	0092      	lsls	r2, r2, #2
 800159a:	440a      	add	r2, r1
 800159c:	6812      	ldr	r2, [r2, #0]
 800159e:	4929      	ldr	r1, [pc, #164]	@ (8001644 <Controle+0x2b4>)
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	440b      	add	r3, r1
 80015a4:	601a      	str	r2, [r3, #0]
			preverror[n] = error[n];
 80015a6:	79ba      	ldrb	r2, [r7, #6]
 80015a8:	79bb      	ldrb	r3, [r7, #6]
 80015aa:	4922      	ldr	r1, [pc, #136]	@ (8001634 <Controle+0x2a4>)
 80015ac:	0092      	lsls	r2, r2, #2
 80015ae:	440a      	add	r2, r1
 80015b0:	6812      	ldr	r2, [r2, #0]
 80015b2:	4921      	ldr	r1, [pc, #132]	@ (8001638 <Controle+0x2a8>)
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	440b      	add	r3, r1
 80015b8:	601a      	str	r2, [r3, #0]
		for(uint8_t n=0;n<4;n++){
 80015ba:	79bb      	ldrb	r3, [r7, #6]
 80015bc:	3301      	adds	r3, #1
 80015be:	71bb      	strb	r3, [r7, #6]
 80015c0:	79bb      	ldrb	r3, [r7, #6]
 80015c2:	2b03      	cmp	r3, #3
 80015c4:	d9e5      	bls.n	8001592 <Controle+0x202>
			prevspeed[n] = speed[n];
			preverror[n] = error[n];
		}
		cont = 1;
	}
}
 80015c6:	e02d      	b.n	8001624 <Controle+0x294>
	} else if(cont ==2){
 80015c8:	4b29      	ldr	r3, [pc, #164]	@ (8001670 <Controle+0x2e0>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d129      	bne.n	8001624 <Controle+0x294>
		for(uint8_t n=0;n<4;n++){
 80015d0:	2300      	movs	r3, #0
 80015d2:	717b      	strb	r3, [r7, #5]
 80015d4:	e020      	b.n	8001618 <Controle+0x288>
			prevspeed2[n] = prevspeed[n];
 80015d6:	797a      	ldrb	r2, [r7, #5]
 80015d8:	797b      	ldrb	r3, [r7, #5]
 80015da:	491a      	ldr	r1, [pc, #104]	@ (8001644 <Controle+0x2b4>)
 80015dc:	0092      	lsls	r2, r2, #2
 80015de:	440a      	add	r2, r1
 80015e0:	6812      	ldr	r2, [r2, #0]
 80015e2:	4919      	ldr	r1, [pc, #100]	@ (8001648 <Controle+0x2b8>)
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	440b      	add	r3, r1
 80015e8:	601a      	str	r2, [r3, #0]
			prevspeed[n] = speed[n];
 80015ea:	797a      	ldrb	r2, [r7, #5]
 80015ec:	797b      	ldrb	r3, [r7, #5]
 80015ee:	4910      	ldr	r1, [pc, #64]	@ (8001630 <Controle+0x2a0>)
 80015f0:	0092      	lsls	r2, r2, #2
 80015f2:	440a      	add	r2, r1
 80015f4:	6812      	ldr	r2, [r2, #0]
 80015f6:	4913      	ldr	r1, [pc, #76]	@ (8001644 <Controle+0x2b4>)
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	440b      	add	r3, r1
 80015fc:	601a      	str	r2, [r3, #0]
			preverror[n] = error[n];
 80015fe:	797a      	ldrb	r2, [r7, #5]
 8001600:	797b      	ldrb	r3, [r7, #5]
 8001602:	490c      	ldr	r1, [pc, #48]	@ (8001634 <Controle+0x2a4>)
 8001604:	0092      	lsls	r2, r2, #2
 8001606:	440a      	add	r2, r1
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	490b      	ldr	r1, [pc, #44]	@ (8001638 <Controle+0x2a8>)
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	440b      	add	r3, r1
 8001610:	601a      	str	r2, [r3, #0]
		for(uint8_t n=0;n<4;n++){
 8001612:	797b      	ldrb	r3, [r7, #5]
 8001614:	3301      	adds	r3, #1
 8001616:	717b      	strb	r3, [r7, #5]
 8001618:	797b      	ldrb	r3, [r7, #5]
 800161a:	2b03      	cmp	r3, #3
 800161c:	d9db      	bls.n	80015d6 <Controle+0x246>
		cont = 1;
 800161e:	4b14      	ldr	r3, [pc, #80]	@ (8001670 <Controle+0x2e0>)
 8001620:	2201      	movs	r2, #1
 8001622:	701a      	strb	r2, [r3, #0]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	bd90      	pop	{r4, r7, pc}
 800162c:	240004b4 	.word	0x240004b4
 8001630:	2400055c 	.word	0x2400055c
 8001634:	240004d0 	.word	0x240004d0
 8001638:	24000520 	.word	0x24000520
 800163c:	24000008 	.word	0x24000008
 8001640:	2400000c 	.word	0x2400000c
 8001644:	24000500 	.word	0x24000500
 8001648:	24000510 	.word	0x24000510
 800164c:	240004cc 	.word	0x240004cc
 8001650:	240004e0 	.word	0x240004e0
 8001654:	240004f0 	.word	0x240004f0
 8001658:	c47fc000 	.word	0xc47fc000
 800165c:	c47fc000 	.word	0xc47fc000
 8001660:	447fc000 	.word	0x447fc000
 8001664:	447fc000 	.word	0x447fc000
 8001668:	24000534 	.word	0x24000534
 800166c:	fffffc01 	.word	0xfffffc01
 8001670:	24000530 	.word	0x24000530

08001674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001678:	bf00      	nop
 800167a:	e7fd      	b.n	8001678 <NMI_Handler+0x4>

0800167c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <HardFault_Handler+0x4>

08001684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <MemManage_Handler+0x4>

0800168c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001690:	bf00      	nop
 8001692:	e7fd      	b.n	8001690 <BusFault_Handler+0x4>

08001694 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001698:	bf00      	nop
 800169a:	e7fd      	b.n	8001698 <UsageFault_Handler+0x4>

0800169c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016bc:	bf00      	nop
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c6:	b580      	push	{r7, lr}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016ca:	f001 f943 	bl	8002954 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80016d8:	4802      	ldr	r0, [pc, #8]	@ (80016e4 <DMA1_Stream1_IRQHandler+0x10>)
 80016da:	f003 f90f 	bl	80048fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	240007fc 	.word	0x240007fc

080016e8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 80016ec:	4802      	ldr	r0, [pc, #8]	@ (80016f8 <DMA1_Stream3_IRQHandler+0x10>)
 80016ee:	f003 f905 	bl	80048fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	24000874 	.word	0x24000874

080016fc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8001700:	4802      	ldr	r0, [pc, #8]	@ (800170c <DMA1_Stream4_IRQHandler+0x10>)
 8001702:	f003 f8fb 	bl	80048fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	240008ec 	.word	0x240008ec

08001710 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001714:	4802      	ldr	r0, [pc, #8]	@ (8001720 <DMA1_Stream5_IRQHandler+0x10>)
 8001716:	f003 f8f1 	bl	80048fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	24000784 	.word	0x24000784

08001724 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001728:	4802      	ldr	r0, [pc, #8]	@ (8001734 <TIM4_IRQHandler+0x10>)
 800172a:	f00a fa09 	bl	800bb40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	24000654 	.word	0x24000654

08001738 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800173c:	2000      	movs	r0, #0
 800173e:	f000 ff9b 	bl	8002678 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
	...

08001748 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800174c:	4802      	ldr	r0, [pc, #8]	@ (8001758 <OTG_FS_IRQHandler+0x10>)
 800174e:	f004 ffc2 	bl	80066d6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	24001ee8 	.word	0x24001ee8
 800175c:	00000000 	.word	0x00000000

08001760 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001766:	4838      	ldr	r0, [pc, #224]	@ (8001848 <TIM15_IRQHandler+0xe8>)
 8001768:	f00a f9ea 	bl	800bb40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */
  //
  Enc[0] = TIM4->CNT;
 800176c:	4b37      	ldr	r3, [pc, #220]	@ (800184c <TIM15_IRQHandler+0xec>)
 800176e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001770:	4a37      	ldr	r2, [pc, #220]	@ (8001850 <TIM15_IRQHandler+0xf0>)
 8001772:	6013      	str	r3, [r2, #0]
  Enc[1] = TIM1->CNT;
 8001774:	4b37      	ldr	r3, [pc, #220]	@ (8001854 <TIM15_IRQHandler+0xf4>)
 8001776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001778:	4a35      	ldr	r2, [pc, #212]	@ (8001850 <TIM15_IRQHandler+0xf0>)
 800177a:	6053      	str	r3, [r2, #4]
  Enc[2] = TIM8->CNT;
 800177c:	4b36      	ldr	r3, [pc, #216]	@ (8001858 <TIM15_IRQHandler+0xf8>)
 800177e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001780:	4a33      	ldr	r2, [pc, #204]	@ (8001850 <TIM15_IRQHandler+0xf0>)
 8001782:	6093      	str	r3, [r2, #8]
  Enc[3] = TIM3->CNT;
 8001784:	4b35      	ldr	r3, [pc, #212]	@ (800185c <TIM15_IRQHandler+0xfc>)
 8001786:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001788:	4a31      	ldr	r2, [pc, #196]	@ (8001850 <TIM15_IRQHandler+0xf0>)
 800178a:	60d3      	str	r3, [r2, #12]
  TIM4->CNT = 0;
 800178c:	4b2f      	ldr	r3, [pc, #188]	@ (800184c <TIM15_IRQHandler+0xec>)
 800178e:	2200      	movs	r2, #0
 8001790:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM1->CNT = 0;
 8001792:	4b30      	ldr	r3, [pc, #192]	@ (8001854 <TIM15_IRQHandler+0xf4>)
 8001794:	2200      	movs	r2, #0
 8001796:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM8->CNT = 0;
 8001798:	4b2f      	ldr	r3, [pc, #188]	@ (8001858 <TIM15_IRQHandler+0xf8>)
 800179a:	2200      	movs	r2, #0
 800179c:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM3->CNT = 0;
 800179e:	4b2f      	ldr	r3, [pc, #188]	@ (800185c <TIM15_IRQHandler+0xfc>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	625a      	str	r2, [r3, #36]	@ 0x24

  for(uint8_t i=0;i<4;i++){
 80017a4:	2300      	movs	r3, #0
 80017a6:	71fb      	strb	r3, [r7, #7]
 80017a8:	e03b      	b.n	8001822 <TIM15_IRQHandler+0xc2>
	  vel[i] = Enc[i];
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	4a28      	ldr	r2, [pc, #160]	@ (8001850 <TIM15_IRQHandler+0xf0>)
 80017ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	4611      	mov	r1, r2
 80017b6:	4a2a      	ldr	r2, [pc, #168]	@ (8001860 <TIM15_IRQHandler+0x100>)
 80017b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  if(vel[i]>60000){
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	4a28      	ldr	r2, [pc, #160]	@ (8001860 <TIM15_IRQHandler+0x100>)
 80017c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017c4:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80017c8:	4293      	cmp	r3, r2
 80017ca:	dd09      	ble.n	80017e0 <TIM15_IRQHandler+0x80>
			  vel[i] = vel[i] - 65356;
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	4a24      	ldr	r2, [pc, #144]	@ (8001860 <TIM15_IRQHandler+0x100>)
 80017d0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80017d4:	79fa      	ldrb	r2, [r7, #7]
 80017d6:	4b23      	ldr	r3, [pc, #140]	@ (8001864 <TIM15_IRQHandler+0x104>)
 80017d8:	440b      	add	r3, r1
 80017da:	4921      	ldr	r1, [pc, #132]	@ (8001860 <TIM15_IRQHandler+0x100>)
 80017dc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	  }
	  speed[i] = vel[i]/(81.92);
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	4a1f      	ldr	r2, [pc, #124]	@ (8001860 <TIM15_IRQHandler+0x100>)
 80017e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017e8:	ee07 3a90 	vmov	s15, r3
 80017ec:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80017f0:	ed9f 5b13 	vldr	d5, [pc, #76]	@ 8001840 <TIM15_IRQHandler+0xe0>
 80017f4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80017fe:	4a1a      	ldr	r2, [pc, #104]	@ (8001868 <TIM15_IRQHandler+0x108>)
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	4413      	add	r3, r2
 8001804:	edc3 7a00 	vstr	s15, [r3]
	  velocidade[i] = speed[i];
 8001808:	79fa      	ldrb	r2, [r7, #7]
 800180a:	79fb      	ldrb	r3, [r7, #7]
 800180c:	4916      	ldr	r1, [pc, #88]	@ (8001868 <TIM15_IRQHandler+0x108>)
 800180e:	0092      	lsls	r2, r2, #2
 8001810:	440a      	add	r2, r1
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	4915      	ldr	r1, [pc, #84]	@ (800186c <TIM15_IRQHandler+0x10c>)
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0;i<4;i++){
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	3301      	adds	r3, #1
 8001820:	71fb      	strb	r3, [r7, #7]
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	2b03      	cmp	r3, #3
 8001826:	d9c0      	bls.n	80017aa <TIM15_IRQHandler+0x4a>
  }



  //velocidade = speed[0];
  Controle();
 8001828:	f7ff fdb2 	bl	8001390 <Controle>

  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 800182c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001830:	480f      	ldr	r0, [pc, #60]	@ (8001870 <TIM15_IRQHandler+0x110>)
 8001832:	f004 fdc6 	bl	80063c2 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM15_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	47ae147b 	.word	0x47ae147b
 8001844:	40547ae1 	.word	0x40547ae1
 8001848:	24000738 	.word	0x24000738
 800184c:	40000800 	.word	0x40000800
 8001850:	2400053c 	.word	0x2400053c
 8001854:	40010000 	.word	0x40010000
 8001858:	40010400 	.word	0x40010400
 800185c:	40000400 	.word	0x40000400
 8001860:	2400054c 	.word	0x2400054c
 8001864:	ffff00b4 	.word	0xffff00b4
 8001868:	2400055c 	.word	0x2400055c
 800186c:	240004a4 	.word	0x240004a4
 8001870:	58020400 	.word	0x58020400

08001874 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return 1;
 8001878:	2301      	movs	r3, #1
}
 800187a:	4618      	mov	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr

08001884 <_kill>:

int _kill(int pid, int sig)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800188e:	f011 f83f 	bl	8012910 <__errno>
 8001892:	4603      	mov	r3, r0
 8001894:	2216      	movs	r2, #22
 8001896:	601a      	str	r2, [r3, #0]
  return -1;
 8001898:	f04f 33ff 	mov.w	r3, #4294967295
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <_exit>:

void _exit (int status)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018ac:	f04f 31ff 	mov.w	r1, #4294967295
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f7ff ffe7 	bl	8001884 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018b6:	bf00      	nop
 80018b8:	e7fd      	b.n	80018b6 <_exit+0x12>

080018ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	b086      	sub	sp, #24
 80018be:	af00      	add	r7, sp, #0
 80018c0:	60f8      	str	r0, [r7, #12]
 80018c2:	60b9      	str	r1, [r7, #8]
 80018c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
 80018ca:	e00a      	b.n	80018e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018cc:	f3af 8000 	nop.w
 80018d0:	4601      	mov	r1, r0
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	1c5a      	adds	r2, r3, #1
 80018d6:	60ba      	str	r2, [r7, #8]
 80018d8:	b2ca      	uxtb	r2, r1
 80018da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	3301      	adds	r3, #1
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	697a      	ldr	r2, [r7, #20]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	429a      	cmp	r2, r3
 80018e8:	dbf0      	blt.n	80018cc <_read+0x12>
  }

  return len;
 80018ea:	687b      	ldr	r3, [r7, #4]
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3718      	adds	r7, #24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b086      	sub	sp, #24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
 8001904:	e009      	b.n	800191a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	60ba      	str	r2, [r7, #8]
 800190c:	781b      	ldrb	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f000 ff32 	bl	8002778 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	3301      	adds	r3, #1
 8001918:	617b      	str	r3, [r7, #20]
 800191a:	697a      	ldr	r2, [r7, #20]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	429a      	cmp	r2, r3
 8001920:	dbf1      	blt.n	8001906 <_write+0x12>
  }
  return len;
 8001922:	687b      	ldr	r3, [r7, #4]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3718      	adds	r7, #24
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <_close>:

int _close(int file)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001934:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001938:	4618      	mov	r0, r3
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
 800194c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001954:	605a      	str	r2, [r3, #4]
  return 0;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <_isatty>:

int _isatty(int file)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800196c:	2301      	movs	r3, #1
}
 800196e:	4618      	mov	r0, r3
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800197a:	b480      	push	{r7}
 800197c:	b085      	sub	sp, #20
 800197e:	af00      	add	r7, sp, #0
 8001980:	60f8      	str	r0, [r7, #12]
 8001982:	60b9      	str	r1, [r7, #8]
 8001984:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3714      	adds	r7, #20
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800199c:	4a14      	ldr	r2, [pc, #80]	@ (80019f0 <_sbrk+0x5c>)
 800199e:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <_sbrk+0x60>)
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a8:	4b13      	ldr	r3, [pc, #76]	@ (80019f8 <_sbrk+0x64>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d102      	bne.n	80019b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b0:	4b11      	ldr	r3, [pc, #68]	@ (80019f8 <_sbrk+0x64>)
 80019b2:	4a12      	ldr	r2, [pc, #72]	@ (80019fc <_sbrk+0x68>)
 80019b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019b6:	4b10      	ldr	r3, [pc, #64]	@ (80019f8 <_sbrk+0x64>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d207      	bcs.n	80019d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c4:	f010 ffa4 	bl	8012910 <__errno>
 80019c8:	4603      	mov	r3, r0
 80019ca:	220c      	movs	r2, #12
 80019cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295
 80019d2:	e009      	b.n	80019e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d4:	4b08      	ldr	r3, [pc, #32]	@ (80019f8 <_sbrk+0x64>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019da:	4b07      	ldr	r3, [pc, #28]	@ (80019f8 <_sbrk+0x64>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	4a05      	ldr	r2, [pc, #20]	@ (80019f8 <_sbrk+0x64>)
 80019e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019e6:	68fb      	ldr	r3, [r7, #12]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	24080000 	.word	0x24080000
 80019f4:	00000400 	.word	0x00000400
 80019f8:	2400056c 	.word	0x2400056c
 80019fc:	24002738 	.word	0x24002738

08001a00 <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim5_ch4;
DMA_HandleTypeDef hdma_tim5_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08c      	sub	sp, #48	@ 0x30
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a06:	f107 030c 	add.w	r3, r7, #12
 8001a0a:	2224      	movs	r2, #36	@ 0x24
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f010 ff2b 	bl	801286a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a14:	463b      	mov	r3, r7
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]
 8001a1a:	605a      	str	r2, [r3, #4]
 8001a1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a1e:	4b23      	ldr	r3, [pc, #140]	@ (8001aac <MX_TIM1_Init+0xac>)
 8001a20:	4a23      	ldr	r2, [pc, #140]	@ (8001ab0 <MX_TIM1_Init+0xb0>)
 8001a22:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001a24:	4b21      	ldr	r3, [pc, #132]	@ (8001aac <MX_TIM1_Init+0xac>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a2a:	4b20      	ldr	r3, [pc, #128]	@ (8001aac <MX_TIM1_Init+0xac>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a30:	4b1e      	ldr	r3, [pc, #120]	@ (8001aac <MX_TIM1_Init+0xac>)
 8001a32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a38:	4b1c      	ldr	r3, [pc, #112]	@ (8001aac <MX_TIM1_Init+0xac>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001aac <MX_TIM1_Init+0xac>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a44:	4b19      	ldr	r3, [pc, #100]	@ (8001aac <MX_TIM1_Init+0xac>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a52:	2301      	movs	r3, #1
 8001a54:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a56:	2300      	movs	r3, #0
 8001a58:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a62:	2301      	movs	r3, #1
 8001a64:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a66:	2300      	movs	r3, #0
 8001a68:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001a6e:	f107 030c 	add.w	r3, r7, #12
 8001a72:	4619      	mov	r1, r3
 8001a74:	480d      	ldr	r0, [pc, #52]	@ (8001aac <MX_TIM1_Init+0xac>)
 8001a76:	f009 ff0f 	bl	800b898 <HAL_TIM_Encoder_Init>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001a80:	f7ff fc2f 	bl	80012e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a84:	2300      	movs	r3, #0
 8001a86:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a90:	463b      	mov	r3, r7
 8001a92:	4619      	mov	r1, r3
 8001a94:	4805      	ldr	r0, [pc, #20]	@ (8001aac <MX_TIM1_Init+0xac>)
 8001a96:	f00a ffcf 	bl	800ca38 <HAL_TIMEx_MasterConfigSynchronization>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d001      	beq.n	8001aa4 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001aa0:	f7ff fc1f 	bl	80012e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001aa4:	bf00      	nop
 8001aa6:	3730      	adds	r7, #48	@ 0x30
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	24000570 	.word	0x24000570
 8001ab0:	40010000 	.word	0x40010000

08001ab4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08a      	sub	sp, #40	@ 0x28
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aba:	f107 031c 	add.w	r3, r7, #28
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
 8001acc:	605a      	str	r2, [r3, #4]
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	60da      	str	r2, [r3, #12]
 8001ad2:	611a      	str	r2, [r3, #16]
 8001ad4:	615a      	str	r2, [r3, #20]
 8001ad6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ad8:	4b27      	ldr	r3, [pc, #156]	@ (8001b78 <MX_TIM2_Init+0xc4>)
 8001ada:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ade:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001ae0:	4b25      	ldr	r3, [pc, #148]	@ (8001b78 <MX_TIM2_Init+0xc4>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ae6:	4b24      	ldr	r3, [pc, #144]	@ (8001b78 <MX_TIM2_Init+0xc4>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001aec:	4b22      	ldr	r3, [pc, #136]	@ (8001b78 <MX_TIM2_Init+0xc4>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af2:	4b21      	ldr	r3, [pc, #132]	@ (8001b78 <MX_TIM2_Init+0xc4>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af8:	4b1f      	ldr	r3, [pc, #124]	@ (8001b78 <MX_TIM2_Init+0xc4>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001afe:	481e      	ldr	r0, [pc, #120]	@ (8001b78 <MX_TIM2_Init+0xc4>)
 8001b00:	f009 fd64 	bl	800b5cc <HAL_TIM_PWM_Init>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001b0a:	f7ff fbea 	bl	80012e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b12:	2300      	movs	r3, #0
 8001b14:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b16:	f107 031c 	add.w	r3, r7, #28
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4816      	ldr	r0, [pc, #88]	@ (8001b78 <MX_TIM2_Init+0xc4>)
 8001b1e:	f00a ff8b 	bl	800ca38 <HAL_TIMEx_MasterConfigSynchronization>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001b28:	f7ff fbdb 	bl	80012e2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b2c:	2360      	movs	r3, #96	@ 0x60
 8001b2e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b30:	2300      	movs	r3, #0
 8001b32:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	2200      	movs	r2, #0
 8001b40:	4619      	mov	r1, r3
 8001b42:	480d      	ldr	r0, [pc, #52]	@ (8001b78 <MX_TIM2_Init+0xc4>)
 8001b44:	f00a f904 	bl	800bd50 <HAL_TIM_PWM_ConfigChannel>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001b4e:	f7ff fbc8 	bl	80012e2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b52:	463b      	mov	r3, r7
 8001b54:	2208      	movs	r2, #8
 8001b56:	4619      	mov	r1, r3
 8001b58:	4807      	ldr	r0, [pc, #28]	@ (8001b78 <MX_TIM2_Init+0xc4>)
 8001b5a:	f00a f8f9 	bl	800bd50 <HAL_TIM_PWM_ConfigChannel>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b64:	f7ff fbbd 	bl	80012e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b68:	4803      	ldr	r0, [pc, #12]	@ (8001b78 <MX_TIM2_Init+0xc4>)
 8001b6a:	f000 fc13 	bl	8002394 <HAL_TIM_MspPostInit>

}
 8001b6e:	bf00      	nop
 8001b70:	3728      	adds	r7, #40	@ 0x28
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	240005bc 	.word	0x240005bc

08001b7c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b08c      	sub	sp, #48	@ 0x30
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b82:	f107 030c 	add.w	r3, r7, #12
 8001b86:	2224      	movs	r2, #36	@ 0x24
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f010 fe6d 	bl	801286a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b90:	463b      	mov	r3, r7
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
 8001b98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b9a:	4b21      	ldr	r3, [pc, #132]	@ (8001c20 <MX_TIM3_Init+0xa4>)
 8001b9c:	4a21      	ldr	r2, [pc, #132]	@ (8001c24 <MX_TIM3_Init+0xa8>)
 8001b9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ba0:	4b1f      	ldr	r3, [pc, #124]	@ (8001c20 <MX_TIM3_Init+0xa4>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c20 <MX_TIM3_Init+0xa4>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bac:	4b1c      	ldr	r3, [pc, #112]	@ (8001c20 <MX_TIM3_Init+0xa4>)
 8001bae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001bb2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c20 <MX_TIM3_Init+0xa4>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bba:	4b19      	ldr	r3, [pc, #100]	@ (8001c20 <MX_TIM3_Init+0xa4>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001be4:	f107 030c 	add.w	r3, r7, #12
 8001be8:	4619      	mov	r1, r3
 8001bea:	480d      	ldr	r0, [pc, #52]	@ (8001c20 <MX_TIM3_Init+0xa4>)
 8001bec:	f009 fe54 	bl	800b898 <HAL_TIM_Encoder_Init>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001bf6:	f7ff fb74 	bl	80012e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c02:	463b      	mov	r3, r7
 8001c04:	4619      	mov	r1, r3
 8001c06:	4806      	ldr	r0, [pc, #24]	@ (8001c20 <MX_TIM3_Init+0xa4>)
 8001c08:	f00a ff16 	bl	800ca38 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001c12:	f7ff fb66 	bl	80012e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c16:	bf00      	nop
 8001c18:	3730      	adds	r7, #48	@ 0x30
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	24000608 	.word	0x24000608
 8001c24:	40000400 	.word	0x40000400

08001c28 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08c      	sub	sp, #48	@ 0x30
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c2e:	f107 030c 	add.w	r3, r7, #12
 8001c32:	2224      	movs	r2, #36	@ 0x24
 8001c34:	2100      	movs	r1, #0
 8001c36:	4618      	mov	r0, r3
 8001c38:	f010 fe17 	bl	801286a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c3c:	463b      	mov	r3, r7
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c46:	4b21      	ldr	r3, [pc, #132]	@ (8001ccc <MX_TIM4_Init+0xa4>)
 8001c48:	4a21      	ldr	r2, [pc, #132]	@ (8001cd0 <MX_TIM4_Init+0xa8>)
 8001c4a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ccc <MX_TIM4_Init+0xa4>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c52:	4b1e      	ldr	r3, [pc, #120]	@ (8001ccc <MX_TIM4_Init+0xa4>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c58:	4b1c      	ldr	r3, [pc, #112]	@ (8001ccc <MX_TIM4_Init+0xa4>)
 8001c5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c5e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c60:	4b1a      	ldr	r3, [pc, #104]	@ (8001ccc <MX_TIM4_Init+0xa4>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c66:	4b19      	ldr	r3, [pc, #100]	@ (8001ccc <MX_TIM4_Init+0xa4>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001c70:	2302      	movs	r3, #2
 8001c72:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c74:	2301      	movs	r3, #1
 8001c76:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001c80:	2302      	movs	r3, #2
 8001c82:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c84:	2301      	movs	r3, #1
 8001c86:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001c90:	f107 030c 	add.w	r3, r7, #12
 8001c94:	4619      	mov	r1, r3
 8001c96:	480d      	ldr	r0, [pc, #52]	@ (8001ccc <MX_TIM4_Init+0xa4>)
 8001c98:	f009 fdfe 	bl	800b898 <HAL_TIM_Encoder_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001ca2:	f7ff fb1e 	bl	80012e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001caa:	2300      	movs	r3, #0
 8001cac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cae:	463b      	mov	r3, r7
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4806      	ldr	r0, [pc, #24]	@ (8001ccc <MX_TIM4_Init+0xa4>)
 8001cb4:	f00a fec0 	bl	800ca38 <HAL_TIMEx_MasterConfigSynchronization>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001cbe:	f7ff fb10 	bl	80012e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001cc2:	bf00      	nop
 8001cc4:	3730      	adds	r7, #48	@ 0x30
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	24000654 	.word	0x24000654
 8001cd0:	40000800 	.word	0x40000800

08001cd4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b08a      	sub	sp, #40	@ 0x28
 8001cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cda:	f107 031c 	add.w	r3, r7, #28
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ce6:	463b      	mov	r3, r7
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	609a      	str	r2, [r3, #8]
 8001cf0:	60da      	str	r2, [r3, #12]
 8001cf2:	611a      	str	r2, [r3, #16]
 8001cf4:	615a      	str	r2, [r3, #20]
 8001cf6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001cf8:	4b26      	ldr	r3, [pc, #152]	@ (8001d94 <MX_TIM5_Init+0xc0>)
 8001cfa:	4a27      	ldr	r2, [pc, #156]	@ (8001d98 <MX_TIM5_Init+0xc4>)
 8001cfc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001cfe:	4b25      	ldr	r3, [pc, #148]	@ (8001d94 <MX_TIM5_Init+0xc0>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d04:	4b23      	ldr	r3, [pc, #140]	@ (8001d94 <MX_TIM5_Init+0xc0>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001d0a:	4b22      	ldr	r3, [pc, #136]	@ (8001d94 <MX_TIM5_Init+0xc0>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d10:	4b20      	ldr	r3, [pc, #128]	@ (8001d94 <MX_TIM5_Init+0xc0>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d16:	4b1f      	ldr	r3, [pc, #124]	@ (8001d94 <MX_TIM5_Init+0xc0>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001d1c:	481d      	ldr	r0, [pc, #116]	@ (8001d94 <MX_TIM5_Init+0xc0>)
 8001d1e:	f009 fc55 	bl	800b5cc <HAL_TIM_PWM_Init>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001d28:	f7ff fadb 	bl	80012e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001d34:	f107 031c 	add.w	r3, r7, #28
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4816      	ldr	r0, [pc, #88]	@ (8001d94 <MX_TIM5_Init+0xc0>)
 8001d3c:	f00a fe7c 	bl	800ca38 <HAL_TIMEx_MasterConfigSynchronization>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001d46:	f7ff facc 	bl	80012e2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d4a:	2360      	movs	r3, #96	@ 0x60
 8001d4c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d5a:	463b      	mov	r3, r7
 8001d5c:	2204      	movs	r2, #4
 8001d5e:	4619      	mov	r1, r3
 8001d60:	480c      	ldr	r0, [pc, #48]	@ (8001d94 <MX_TIM5_Init+0xc0>)
 8001d62:	f009 fff5 	bl	800bd50 <HAL_TIM_PWM_ConfigChannel>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001d6c:	f7ff fab9 	bl	80012e2 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d70:	463b      	mov	r3, r7
 8001d72:	220c      	movs	r2, #12
 8001d74:	4619      	mov	r1, r3
 8001d76:	4807      	ldr	r0, [pc, #28]	@ (8001d94 <MX_TIM5_Init+0xc0>)
 8001d78:	f009 ffea 	bl	800bd50 <HAL_TIM_PWM_ConfigChannel>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001d82:	f7ff faae 	bl	80012e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001d86:	4803      	ldr	r0, [pc, #12]	@ (8001d94 <MX_TIM5_Init+0xc0>)
 8001d88:	f000 fb04 	bl	8002394 <HAL_TIM_MspPostInit>

}
 8001d8c:	bf00      	nop
 8001d8e:	3728      	adds	r7, #40	@ 0x28
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	240006a0 	.word	0x240006a0
 8001d98:	40000c00 	.word	0x40000c00

08001d9c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08c      	sub	sp, #48	@ 0x30
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001da2:	f107 030c 	add.w	r3, r7, #12
 8001da6:	2224      	movs	r2, #36	@ 0x24
 8001da8:	2100      	movs	r1, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f010 fd5d 	bl	801286a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001db0:	463b      	mov	r3, r7
 8001db2:	2200      	movs	r2, #0
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	605a      	str	r2, [r3, #4]
 8001db8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001dba:	4b23      	ldr	r3, [pc, #140]	@ (8001e48 <MX_TIM8_Init+0xac>)
 8001dbc:	4a23      	ldr	r2, [pc, #140]	@ (8001e4c <MX_TIM8_Init+0xb0>)
 8001dbe:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001dc0:	4b21      	ldr	r3, [pc, #132]	@ (8001e48 <MX_TIM8_Init+0xac>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc6:	4b20      	ldr	r3, [pc, #128]	@ (8001e48 <MX_TIM8_Init+0xac>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001dcc:	4b1e      	ldr	r3, [pc, #120]	@ (8001e48 <MX_TIM8_Init+0xac>)
 8001dce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001dd2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e48 <MX_TIM8_Init+0xac>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001dda:	4b1b      	ldr	r3, [pc, #108]	@ (8001e48 <MX_TIM8_Init+0xac>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de0:	4b19      	ldr	r3, [pc, #100]	@ (8001e48 <MX_TIM8_Init+0xac>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001de6:	2303      	movs	r3, #3
 8001de8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001dea:	2302      	movs	r3, #2
 8001dec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001dee:	2301      	movs	r3, #1
 8001df0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001df2:	2300      	movs	r3, #0
 8001df4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001e02:	2300      	movs	r3, #0
 8001e04:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001e06:	2300      	movs	r3, #0
 8001e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001e0a:	f107 030c 	add.w	r3, r7, #12
 8001e0e:	4619      	mov	r1, r3
 8001e10:	480d      	ldr	r0, [pc, #52]	@ (8001e48 <MX_TIM8_Init+0xac>)
 8001e12:	f009 fd41 	bl	800b898 <HAL_TIM_Encoder_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001e1c:	f7ff fa61 	bl	80012e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e20:	2300      	movs	r3, #0
 8001e22:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e24:	2300      	movs	r3, #0
 8001e26:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001e2c:	463b      	mov	r3, r7
 8001e2e:	4619      	mov	r1, r3
 8001e30:	4805      	ldr	r0, [pc, #20]	@ (8001e48 <MX_TIM8_Init+0xac>)
 8001e32:	f00a fe01 	bl	800ca38 <HAL_TIMEx_MasterConfigSynchronization>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d001      	beq.n	8001e40 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001e3c:	f7ff fa51 	bl	80012e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001e40:	bf00      	nop
 8001e42:	3730      	adds	r7, #48	@ 0x30
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	240006ec 	.word	0x240006ec
 8001e4c:	40010400 	.word	0x40010400

08001e50 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e56:	f107 0310 	add.w	r3, r7, #16
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	605a      	str	r2, [r3, #4]
 8001e60:	609a      	str	r2, [r3, #8]
 8001e62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e64:	1d3b      	adds	r3, r7, #4
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	605a      	str	r2, [r3, #4]
 8001e6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8001eec <MX_TIM15_Init+0x9c>)
 8001e70:	4a1f      	ldr	r2, [pc, #124]	@ (8001ef0 <MX_TIM15_Init+0xa0>)
 8001e72:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 19999;
 8001e74:	4b1d      	ldr	r3, [pc, #116]	@ (8001eec <MX_TIM15_Init+0x9c>)
 8001e76:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001e7a:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001eec <MX_TIM15_Init+0x9c>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 99;
 8001e82:	4b1a      	ldr	r3, [pc, #104]	@ (8001eec <MX_TIM15_Init+0x9c>)
 8001e84:	2263      	movs	r2, #99	@ 0x63
 8001e86:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e88:	4b18      	ldr	r3, [pc, #96]	@ (8001eec <MX_TIM15_Init+0x9c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001e8e:	4b17      	ldr	r3, [pc, #92]	@ (8001eec <MX_TIM15_Init+0x9c>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e94:	4b15      	ldr	r3, [pc, #84]	@ (8001eec <MX_TIM15_Init+0x9c>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001e9a:	4814      	ldr	r0, [pc, #80]	@ (8001eec <MX_TIM15_Init+0x9c>)
 8001e9c:	f009 fac6 	bl	800b42c <HAL_TIM_Base_Init>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001ea6:	f7ff fa1c 	bl	80012e2 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001eaa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001eae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001eb0:	f107 0310 	add.w	r3, r7, #16
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	480d      	ldr	r0, [pc, #52]	@ (8001eec <MX_TIM15_Init+0x9c>)
 8001eb8:	f00a f85e 	bl	800bf78 <HAL_TIM_ConfigClockSource>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001ec2:	f7ff fa0e 	bl	80012e2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4806      	ldr	r0, [pc, #24]	@ (8001eec <MX_TIM15_Init+0x9c>)
 8001ed4:	f00a fdb0 	bl	800ca38 <HAL_TIMEx_MasterConfigSynchronization>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8001ede:	f7ff fa00 	bl	80012e2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001ee2:	bf00      	nop
 8001ee4:	3720      	adds	r7, #32
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	24000738 	.word	0x24000738
 8001ef0:	40014000 	.word	0x40014000

08001ef4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b090      	sub	sp, #64	@ 0x40
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a6d      	ldr	r2, [pc, #436]	@ (80020c8 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d12f      	bne.n	8001f76 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f16:	4b6d      	ldr	r3, [pc, #436]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001f18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f1c:	4a6b      	ldr	r2, [pc, #428]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001f26:	4b69      	ldr	r3, [pc, #420]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001f28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001f2c:	f003 0301 	and.w	r3, r3, #1
 8001f30:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f34:	4b65      	ldr	r3, [pc, #404]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f3a:	4a64      	ldr	r2, [pc, #400]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001f3c:	f043 0310 	orr.w	r3, r3, #16
 8001f40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f44:	4b61      	ldr	r3, [pc, #388]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001f46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f4a:	f003 0310 	and.w	r3, r3, #16
 8001f4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC2_A_Pin|ENC2_B_Pin;
 8001f52:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001f56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f60:	2300      	movs	r3, #0
 8001f62:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f64:	2301      	movs	r3, #1
 8001f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4858      	ldr	r0, [pc, #352]	@ (80020d0 <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001f70:	f004 f846 	bl	8006000 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001f74:	e0a3      	b.n	80020be <HAL_TIM_Encoder_MspInit+0x1ca>
  else if(tim_encoderHandle->Instance==TIM3)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a56      	ldr	r2, [pc, #344]	@ (80020d4 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d12e      	bne.n	8001fde <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f80:	4b52      	ldr	r3, [pc, #328]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001f82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f86:	4a51      	ldr	r2, [pc, #324]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001f88:	f043 0302 	orr.w	r3, r3, #2
 8001f8c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f90:	4b4e      	ldr	r3, [pc, #312]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001f92:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	623b      	str	r3, [r7, #32]
 8001f9c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9e:	4b4b      	ldr	r3, [pc, #300]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001fa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fa4:	4a49      	ldr	r2, [pc, #292]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001fa6:	f043 0302 	orr.w	r3, r3, #2
 8001faa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fae:	4b47      	ldr	r3, [pc, #284]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001fb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ENC4_A_Pin|ENC4_B_Pin;
 8001fbc:	2330      	movs	r3, #48	@ 0x30
 8001fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fcc:	2302      	movs	r3, #2
 8001fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4840      	ldr	r0, [pc, #256]	@ (80020d8 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8001fd8:	f004 f812 	bl	8006000 <HAL_GPIO_Init>
}
 8001fdc:	e06f      	b.n	80020be <HAL_TIM_Encoder_MspInit+0x1ca>
  else if(tim_encoderHandle->Instance==TIM4)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a3e      	ldr	r2, [pc, #248]	@ (80020dc <HAL_TIM_Encoder_MspInit+0x1e8>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d137      	bne.n	8002058 <HAL_TIM_Encoder_MspInit+0x164>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fe8:	4b38      	ldr	r3, [pc, #224]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001fea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001fee:	4a37      	ldr	r2, [pc, #220]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001ff0:	f043 0304 	orr.w	r3, r3, #4
 8001ff4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001ff8:	4b34      	ldr	r3, [pc, #208]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001ffa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	61bb      	str	r3, [r7, #24]
 8002004:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002006:	4b31      	ldr	r3, [pc, #196]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800200c:	4a2f      	ldr	r2, [pc, #188]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x1d8>)
 800200e:	f043 0308 	orr.w	r3, r3, #8
 8002012:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002016:	4b2d      	ldr	r3, [pc, #180]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002018:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC1_A_Pin|ENC1_B_Pin;
 8002024:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8002028:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800202a:	2302      	movs	r3, #2
 800202c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202e:	2300      	movs	r3, #0
 8002030:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002032:	2300      	movs	r3, #0
 8002034:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002036:	2302      	movs	r3, #2
 8002038:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800203a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800203e:	4619      	mov	r1, r3
 8002040:	4827      	ldr	r0, [pc, #156]	@ (80020e0 <HAL_TIM_Encoder_MspInit+0x1ec>)
 8002042:	f003 ffdd 	bl	8006000 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2100      	movs	r1, #0
 800204a:	201e      	movs	r0, #30
 800204c:	f001 fe47 	bl	8003cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002050:	201e      	movs	r0, #30
 8002052:	f001 fe5e 	bl	8003d12 <HAL_NVIC_EnableIRQ>
}
 8002056:	e032      	b.n	80020be <HAL_TIM_Encoder_MspInit+0x1ca>
  else if(tim_encoderHandle->Instance==TIM8)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a21      	ldr	r2, [pc, #132]	@ (80020e4 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d12d      	bne.n	80020be <HAL_TIM_Encoder_MspInit+0x1ca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002062:	4b1a      	ldr	r3, [pc, #104]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002064:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002068:	4a18      	ldr	r2, [pc, #96]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x1d8>)
 800206a:	f043 0302 	orr.w	r3, r3, #2
 800206e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002072:	4b16      	ldr	r3, [pc, #88]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002074:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002078:	f003 0302 	and.w	r3, r3, #2
 800207c:	613b      	str	r3, [r7, #16]
 800207e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002080:	4b12      	ldr	r3, [pc, #72]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002082:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002086:	4a11      	ldr	r2, [pc, #68]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002088:	f043 0304 	orr.w	r3, r3, #4
 800208c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002090:	4b0e      	ldr	r3, [pc, #56]	@ (80020cc <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	60fb      	str	r3, [r7, #12]
 800209c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC3_A_Pin|ENC3_B_Pin;
 800209e:	23c0      	movs	r3, #192	@ 0xc0
 80020a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a2:	2302      	movs	r3, #2
 80020a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a6:	2300      	movs	r3, #0
 80020a8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020aa:	2300      	movs	r3, #0
 80020ac:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80020ae:	2303      	movs	r3, #3
 80020b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80020b6:	4619      	mov	r1, r3
 80020b8:	480b      	ldr	r0, [pc, #44]	@ (80020e8 <HAL_TIM_Encoder_MspInit+0x1f4>)
 80020ba:	f003 ffa1 	bl	8006000 <HAL_GPIO_Init>
}
 80020be:	bf00      	nop
 80020c0:	3740      	adds	r7, #64	@ 0x40
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40010000 	.word	0x40010000
 80020cc:	58024400 	.word	0x58024400
 80020d0:	58021000 	.word	0x58021000
 80020d4:	40000400 	.word	0x40000400
 80020d8:	58020400 	.word	0x58020400
 80020dc:	40000800 	.word	0x40000800
 80020e0:	58020c00 	.word	0x58020c00
 80020e4:	40010400 	.word	0x40010400
 80020e8:	58020800 	.word	0x58020800

080020ec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020fc:	f040 8082 	bne.w	8002204 <HAL_TIM_PWM_MspInit+0x118>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002100:	4b86      	ldr	r3, [pc, #536]	@ (800231c <HAL_TIM_PWM_MspInit+0x230>)
 8002102:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002106:	4a85      	ldr	r2, [pc, #532]	@ (800231c <HAL_TIM_PWM_MspInit+0x230>)
 8002108:	f043 0301 	orr.w	r3, r3, #1
 800210c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002110:	4b82      	ldr	r3, [pc, #520]	@ (800231c <HAL_TIM_PWM_MspInit+0x230>)
 8002112:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002116:	f003 0301 	and.w	r3, r3, #1
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 800211e:	4b80      	ldr	r3, [pc, #512]	@ (8002320 <HAL_TIM_PWM_MspInit+0x234>)
 8002120:	4a80      	ldr	r2, [pc, #512]	@ (8002324 <HAL_TIM_PWM_MspInit+0x238>)
 8002122:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8002124:	4b7e      	ldr	r3, [pc, #504]	@ (8002320 <HAL_TIM_PWM_MspInit+0x234>)
 8002126:	2212      	movs	r2, #18
 8002128:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800212a:	4b7d      	ldr	r3, [pc, #500]	@ (8002320 <HAL_TIM_PWM_MspInit+0x234>)
 800212c:	2240      	movs	r2, #64	@ 0x40
 800212e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002130:	4b7b      	ldr	r3, [pc, #492]	@ (8002320 <HAL_TIM_PWM_MspInit+0x234>)
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002136:	4b7a      	ldr	r3, [pc, #488]	@ (8002320 <HAL_TIM_PWM_MspInit+0x234>)
 8002138:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800213c:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800213e:	4b78      	ldr	r3, [pc, #480]	@ (8002320 <HAL_TIM_PWM_MspInit+0x234>)
 8002140:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002144:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002146:	4b76      	ldr	r3, [pc, #472]	@ (8002320 <HAL_TIM_PWM_MspInit+0x234>)
 8002148:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800214c:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 800214e:	4b74      	ldr	r3, [pc, #464]	@ (8002320 <HAL_TIM_PWM_MspInit+0x234>)
 8002150:	2200      	movs	r2, #0
 8002152:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002154:	4b72      	ldr	r3, [pc, #456]	@ (8002320 <HAL_TIM_PWM_MspInit+0x234>)
 8002156:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800215a:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800215c:	4b70      	ldr	r3, [pc, #448]	@ (8002320 <HAL_TIM_PWM_MspInit+0x234>)
 800215e:	2204      	movs	r2, #4
 8002160:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim2_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002162:	4b6f      	ldr	r3, [pc, #444]	@ (8002320 <HAL_TIM_PWM_MspInit+0x234>)
 8002164:	2200      	movs	r2, #0
 8002166:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim2_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8002168:	4b6d      	ldr	r3, [pc, #436]	@ (8002320 <HAL_TIM_PWM_MspInit+0x234>)
 800216a:	2200      	movs	r2, #0
 800216c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim2_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800216e:	4b6c      	ldr	r3, [pc, #432]	@ (8002320 <HAL_TIM_PWM_MspInit+0x234>)
 8002170:	2200      	movs	r2, #0
 8002172:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002174:	486a      	ldr	r0, [pc, #424]	@ (8002320 <HAL_TIM_PWM_MspInit+0x234>)
 8002176:	f001 fdfb 	bl	8003d70 <HAL_DMA_Init>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <HAL_TIM_PWM_MspInit+0x98>
    {
      Error_Handler();
 8002180:	f7ff f8af 	bl	80012e2 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a66      	ldr	r2, [pc, #408]	@ (8002320 <HAL_TIM_PWM_MspInit+0x234>)
 8002188:	625a      	str	r2, [r3, #36]	@ 0x24
 800218a:	4a65      	ldr	r2, [pc, #404]	@ (8002320 <HAL_TIM_PWM_MspInit+0x234>)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8002190:	4b65      	ldr	r3, [pc, #404]	@ (8002328 <HAL_TIM_PWM_MspInit+0x23c>)
 8002192:	4a66      	ldr	r2, [pc, #408]	@ (800232c <HAL_TIM_PWM_MspInit+0x240>)
 8002194:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8002196:	4b64      	ldr	r3, [pc, #400]	@ (8002328 <HAL_TIM_PWM_MspInit+0x23c>)
 8002198:	2214      	movs	r2, #20
 800219a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800219c:	4b62      	ldr	r3, [pc, #392]	@ (8002328 <HAL_TIM_PWM_MspInit+0x23c>)
 800219e:	2240      	movs	r2, #64	@ 0x40
 80021a0:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80021a2:	4b61      	ldr	r3, [pc, #388]	@ (8002328 <HAL_TIM_PWM_MspInit+0x23c>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80021a8:	4b5f      	ldr	r3, [pc, #380]	@ (8002328 <HAL_TIM_PWM_MspInit+0x23c>)
 80021aa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021ae:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80021b0:	4b5d      	ldr	r3, [pc, #372]	@ (8002328 <HAL_TIM_PWM_MspInit+0x23c>)
 80021b2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80021b6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80021b8:	4b5b      	ldr	r3, [pc, #364]	@ (8002328 <HAL_TIM_PWM_MspInit+0x23c>)
 80021ba:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80021be:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80021c0:	4b59      	ldr	r3, [pc, #356]	@ (8002328 <HAL_TIM_PWM_MspInit+0x23c>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 80021c6:	4b58      	ldr	r3, [pc, #352]	@ (8002328 <HAL_TIM_PWM_MspInit+0x23c>)
 80021c8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80021cc:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80021ce:	4b56      	ldr	r3, [pc, #344]	@ (8002328 <HAL_TIM_PWM_MspInit+0x23c>)
 80021d0:	2204      	movs	r2, #4
 80021d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim2_ch3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80021d4:	4b54      	ldr	r3, [pc, #336]	@ (8002328 <HAL_TIM_PWM_MspInit+0x23c>)
 80021d6:	2200      	movs	r2, #0
 80021d8:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim2_ch3.Init.MemBurst = DMA_MBURST_SINGLE;
 80021da:	4b53      	ldr	r3, [pc, #332]	@ (8002328 <HAL_TIM_PWM_MspInit+0x23c>)
 80021dc:	2200      	movs	r2, #0
 80021de:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim2_ch3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80021e0:	4b51      	ldr	r3, [pc, #324]	@ (8002328 <HAL_TIM_PWM_MspInit+0x23c>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 80021e6:	4850      	ldr	r0, [pc, #320]	@ (8002328 <HAL_TIM_PWM_MspInit+0x23c>)
 80021e8:	f001 fdc2 	bl	8003d70 <HAL_DMA_Init>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_TIM_PWM_MspInit+0x10a>
    {
      Error_Handler();
 80021f2:	f7ff f876 	bl	80012e2 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a4b      	ldr	r2, [pc, #300]	@ (8002328 <HAL_TIM_PWM_MspInit+0x23c>)
 80021fa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80021fc:	4a4a      	ldr	r2, [pc, #296]	@ (8002328 <HAL_TIM_PWM_MspInit+0x23c>)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002202:	e086      	b.n	8002312 <HAL_TIM_PWM_MspInit+0x226>
  else if(tim_pwmHandle->Instance==TIM5)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a49      	ldr	r2, [pc, #292]	@ (8002330 <HAL_TIM_PWM_MspInit+0x244>)
 800220a:	4293      	cmp	r3, r2
 800220c:	f040 8081 	bne.w	8002312 <HAL_TIM_PWM_MspInit+0x226>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002210:	4b42      	ldr	r3, [pc, #264]	@ (800231c <HAL_TIM_PWM_MspInit+0x230>)
 8002212:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002216:	4a41      	ldr	r2, [pc, #260]	@ (800231c <HAL_TIM_PWM_MspInit+0x230>)
 8002218:	f043 0308 	orr.w	r3, r3, #8
 800221c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002220:	4b3e      	ldr	r3, [pc, #248]	@ (800231c <HAL_TIM_PWM_MspInit+0x230>)
 8002222:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	60bb      	str	r3, [r7, #8]
 800222c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream3;
 800222e:	4b41      	ldr	r3, [pc, #260]	@ (8002334 <HAL_TIM_PWM_MspInit+0x248>)
 8002230:	4a41      	ldr	r2, [pc, #260]	@ (8002338 <HAL_TIM_PWM_MspInit+0x24c>)
 8002232:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8002234:	4b3f      	ldr	r3, [pc, #252]	@ (8002334 <HAL_TIM_PWM_MspInit+0x248>)
 8002236:	223a      	movs	r2, #58	@ 0x3a
 8002238:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800223a:	4b3e      	ldr	r3, [pc, #248]	@ (8002334 <HAL_TIM_PWM_MspInit+0x248>)
 800223c:	2240      	movs	r2, #64	@ 0x40
 800223e:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8002240:	4b3c      	ldr	r3, [pc, #240]	@ (8002334 <HAL_TIM_PWM_MspInit+0x248>)
 8002242:	2200      	movs	r2, #0
 8002244:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8002246:	4b3b      	ldr	r3, [pc, #236]	@ (8002334 <HAL_TIM_PWM_MspInit+0x248>)
 8002248:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800224c:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800224e:	4b39      	ldr	r3, [pc, #228]	@ (8002334 <HAL_TIM_PWM_MspInit+0x248>)
 8002250:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002254:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002256:	4b37      	ldr	r3, [pc, #220]	@ (8002334 <HAL_TIM_PWM_MspInit+0x248>)
 8002258:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800225c:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 800225e:	4b35      	ldr	r3, [pc, #212]	@ (8002334 <HAL_TIM_PWM_MspInit+0x248>)
 8002260:	2200      	movs	r2, #0
 8002262:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8002264:	4b33      	ldr	r3, [pc, #204]	@ (8002334 <HAL_TIM_PWM_MspInit+0x248>)
 8002266:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800226a:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800226c:	4b31      	ldr	r3, [pc, #196]	@ (8002334 <HAL_TIM_PWM_MspInit+0x248>)
 800226e:	2204      	movs	r2, #4
 8002270:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002272:	4b30      	ldr	r3, [pc, #192]	@ (8002334 <HAL_TIM_PWM_MspInit+0x248>)
 8002274:	2200      	movs	r2, #0
 8002276:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch4.Init.MemBurst = DMA_MBURST_SINGLE;
 8002278:	4b2e      	ldr	r3, [pc, #184]	@ (8002334 <HAL_TIM_PWM_MspInit+0x248>)
 800227a:	2200      	movs	r2, #0
 800227c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800227e:	4b2d      	ldr	r3, [pc, #180]	@ (8002334 <HAL_TIM_PWM_MspInit+0x248>)
 8002280:	2200      	movs	r2, #0
 8002282:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8002284:	482b      	ldr	r0, [pc, #172]	@ (8002334 <HAL_TIM_PWM_MspInit+0x248>)
 8002286:	f001 fd73 	bl	8003d70 <HAL_DMA_Init>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <HAL_TIM_PWM_MspInit+0x1a8>
      Error_Handler();
 8002290:	f7ff f827 	bl	80012e2 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a27      	ldr	r2, [pc, #156]	@ (8002334 <HAL_TIM_PWM_MspInit+0x248>)
 8002298:	631a      	str	r2, [r3, #48]	@ 0x30
 800229a:	4a26      	ldr	r2, [pc, #152]	@ (8002334 <HAL_TIM_PWM_MspInit+0x248>)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 80022a0:	4b26      	ldr	r3, [pc, #152]	@ (800233c <HAL_TIM_PWM_MspInit+0x250>)
 80022a2:	4a27      	ldr	r2, [pc, #156]	@ (8002340 <HAL_TIM_PWM_MspInit+0x254>)
 80022a4:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Request = DMA_REQUEST_TIM5_CH2;
 80022a6:	4b25      	ldr	r3, [pc, #148]	@ (800233c <HAL_TIM_PWM_MspInit+0x250>)
 80022a8:	2238      	movs	r2, #56	@ 0x38
 80022aa:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022ac:	4b23      	ldr	r3, [pc, #140]	@ (800233c <HAL_TIM_PWM_MspInit+0x250>)
 80022ae:	2240      	movs	r2, #64	@ 0x40
 80022b0:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80022b2:	4b22      	ldr	r3, [pc, #136]	@ (800233c <HAL_TIM_PWM_MspInit+0x250>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80022b8:	4b20      	ldr	r3, [pc, #128]	@ (800233c <HAL_TIM_PWM_MspInit+0x250>)
 80022ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022be:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80022c0:	4b1e      	ldr	r3, [pc, #120]	@ (800233c <HAL_TIM_PWM_MspInit+0x250>)
 80022c2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80022c6:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80022c8:	4b1c      	ldr	r3, [pc, #112]	@ (800233c <HAL_TIM_PWM_MspInit+0x250>)
 80022ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80022ce:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 80022d0:	4b1a      	ldr	r3, [pc, #104]	@ (800233c <HAL_TIM_PWM_MspInit+0x250>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 80022d6:	4b19      	ldr	r3, [pc, #100]	@ (800233c <HAL_TIM_PWM_MspInit+0x250>)
 80022d8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80022dc:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80022de:	4b17      	ldr	r3, [pc, #92]	@ (800233c <HAL_TIM_PWM_MspInit+0x250>)
 80022e0:	2204      	movs	r2, #4
 80022e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 80022e4:	4b15      	ldr	r3, [pc, #84]	@ (800233c <HAL_TIM_PWM_MspInit+0x250>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 80022ea:	4b14      	ldr	r3, [pc, #80]	@ (800233c <HAL_TIM_PWM_MspInit+0x250>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80022f0:	4b12      	ldr	r3, [pc, #72]	@ (800233c <HAL_TIM_PWM_MspInit+0x250>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 80022f6:	4811      	ldr	r0, [pc, #68]	@ (800233c <HAL_TIM_PWM_MspInit+0x250>)
 80022f8:	f001 fd3a 	bl	8003d70 <HAL_DMA_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_TIM_PWM_MspInit+0x21a>
      Error_Handler();
 8002302:	f7fe ffee 	bl	80012e2 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a0c      	ldr	r2, [pc, #48]	@ (800233c <HAL_TIM_PWM_MspInit+0x250>)
 800230a:	629a      	str	r2, [r3, #40]	@ 0x28
 800230c:	4a0b      	ldr	r2, [pc, #44]	@ (800233c <HAL_TIM_PWM_MspInit+0x250>)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	58024400 	.word	0x58024400
 8002320:	24000784 	.word	0x24000784
 8002324:	40020088 	.word	0x40020088
 8002328:	240007fc 	.word	0x240007fc
 800232c:	40020028 	.word	0x40020028
 8002330:	40000c00 	.word	0x40000c00
 8002334:	24000874 	.word	0x24000874
 8002338:	40020058 	.word	0x40020058
 800233c:	240008ec 	.word	0x240008ec
 8002340:	40020070 	.word	0x40020070

08002344 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM15)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a0e      	ldr	r2, [pc, #56]	@ (800238c <HAL_TIM_Base_MspInit+0x48>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d116      	bne.n	8002384 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002356:	4b0e      	ldr	r3, [pc, #56]	@ (8002390 <HAL_TIM_Base_MspInit+0x4c>)
 8002358:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800235c:	4a0c      	ldr	r2, [pc, #48]	@ (8002390 <HAL_TIM_Base_MspInit+0x4c>)
 800235e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002362:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002366:	4b0a      	ldr	r3, [pc, #40]	@ (8002390 <HAL_TIM_Base_MspInit+0x4c>)
 8002368:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800236c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8002374:	2200      	movs	r2, #0
 8002376:	2100      	movs	r1, #0
 8002378:	2074      	movs	r0, #116	@ 0x74
 800237a:	f001 fcb0 	bl	8003cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800237e:	2074      	movs	r0, #116	@ 0x74
 8002380:	f001 fcc7 	bl	8003d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002384:	bf00      	nop
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40014000 	.word	0x40014000
 8002390:	58024400 	.word	0x58024400

08002394 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08a      	sub	sp, #40	@ 0x28
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800239c:	f107 0314 	add.w	r3, r7, #20
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023b4:	d11f      	bne.n	80023f6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023b6:	4b24      	ldr	r3, [pc, #144]	@ (8002448 <HAL_TIM_MspPostInit+0xb4>)
 80023b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023bc:	4a22      	ldr	r2, [pc, #136]	@ (8002448 <HAL_TIM_MspPostInit+0xb4>)
 80023be:	f043 0301 	orr.w	r3, r3, #1
 80023c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023c6:	4b20      	ldr	r3, [pc, #128]	@ (8002448 <HAL_TIM_MspPostInit+0xb4>)
 80023c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	613b      	str	r3, [r7, #16]
 80023d2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = M3_Pin|M2_Pin;
 80023d4:	2305      	movs	r3, #5
 80023d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023d8:	2302      	movs	r3, #2
 80023da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023dc:	2300      	movs	r3, #0
 80023de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e0:	2300      	movs	r3, #0
 80023e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023e4:	2301      	movs	r3, #1
 80023e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	4619      	mov	r1, r3
 80023ee:	4817      	ldr	r0, [pc, #92]	@ (800244c <HAL_TIM_MspPostInit+0xb8>)
 80023f0:	f003 fe06 	bl	8006000 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80023f4:	e023      	b.n	800243e <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM5)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a15      	ldr	r2, [pc, #84]	@ (8002450 <HAL_TIM_MspPostInit+0xbc>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d11e      	bne.n	800243e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002400:	4b11      	ldr	r3, [pc, #68]	@ (8002448 <HAL_TIM_MspPostInit+0xb4>)
 8002402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002406:	4a10      	ldr	r2, [pc, #64]	@ (8002448 <HAL_TIM_MspPostInit+0xb4>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002410:	4b0d      	ldr	r3, [pc, #52]	@ (8002448 <HAL_TIM_MspPostInit+0xb4>)
 8002412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	60fb      	str	r3, [r7, #12]
 800241c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M4_Pin|M1_Pin;
 800241e:	230a      	movs	r3, #10
 8002420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002422:	2302      	movs	r3, #2
 8002424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002426:	2300      	movs	r3, #0
 8002428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800242a:	2300      	movs	r3, #0
 800242c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800242e:	2302      	movs	r3, #2
 8002430:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002432:	f107 0314 	add.w	r3, r7, #20
 8002436:	4619      	mov	r1, r3
 8002438:	4804      	ldr	r0, [pc, #16]	@ (800244c <HAL_TIM_MspPostInit+0xb8>)
 800243a:	f003 fde1 	bl	8006000 <HAL_GPIO_Init>
}
 800243e:	bf00      	nop
 8002440:	3728      	adds	r7, #40	@ 0x28
 8002442:	46bd      	mov	sp, r7
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	58024400 	.word	0x58024400
 800244c:	58020000 	.word	0x58020000
 8002450:	40000c00 	.word	0x40000c00

08002454 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002454:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800248c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002458:	f7fe f912 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800245c:	480c      	ldr	r0, [pc, #48]	@ (8002490 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800245e:	490d      	ldr	r1, [pc, #52]	@ (8002494 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002460:	4a0d      	ldr	r2, [pc, #52]	@ (8002498 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002464:	e002      	b.n	800246c <LoopCopyDataInit>

08002466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800246a:	3304      	adds	r3, #4

0800246c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800246c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800246e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002470:	d3f9      	bcc.n	8002466 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002472:	4a0a      	ldr	r2, [pc, #40]	@ (800249c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002474:	4c0a      	ldr	r4, [pc, #40]	@ (80024a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002478:	e001      	b.n	800247e <LoopFillZerobss>

0800247a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800247a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800247c:	3204      	adds	r2, #4

0800247e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800247e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002480:	d3fb      	bcc.n	800247a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002482:	f010 fa4b 	bl	801291c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002486:	f7fe fcfd 	bl	8000e84 <main>
  bx  lr
 800248a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800248c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002490:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002494:	240002f0 	.word	0x240002f0
  ldr r2, =_sidata
 8002498:	08014de8 	.word	0x08014de8
  ldr r2, =_sbss
 800249c:	240002f0 	.word	0x240002f0
  ldr r4, =_ebss
 80024a0:	24002738 	.word	0x24002738

080024a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024a4:	e7fe      	b.n	80024a4 <ADC3_IRQHandler>
	...

080024a8 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08c      	sub	sp, #48	@ 0x30
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80024b6:	79fb      	ldrb	r3, [r7, #7]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d009      	beq.n	80024d0 <BSP_LED_Init+0x28>
 80024bc:	79fb      	ldrb	r3, [r7, #7]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d006      	beq.n	80024d0 <BSP_LED_Init+0x28>
 80024c2:	79fb      	ldrb	r3, [r7, #7]
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d003      	beq.n	80024d0 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80024c8:	f06f 0301 	mvn.w	r3, #1
 80024cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024ce:	e055      	b.n	800257c <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80024d0:	79fb      	ldrb	r3, [r7, #7]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d10f      	bne.n	80024f6 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80024d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002588 <BSP_LED_Init+0xe0>)
 80024d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024dc:	4a2a      	ldr	r2, [pc, #168]	@ (8002588 <BSP_LED_Init+0xe0>)
 80024de:	f043 0302 	orr.w	r3, r3, #2
 80024e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024e6:	4b28      	ldr	r3, [pc, #160]	@ (8002588 <BSP_LED_Init+0xe0>)
 80024e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	617b      	str	r3, [r7, #20]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	e021      	b.n	800253a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d10f      	bne.n	800251c <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80024fc:	4b22      	ldr	r3, [pc, #136]	@ (8002588 <BSP_LED_Init+0xe0>)
 80024fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002502:	4a21      	ldr	r2, [pc, #132]	@ (8002588 <BSP_LED_Init+0xe0>)
 8002504:	f043 0310 	orr.w	r3, r3, #16
 8002508:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800250c:	4b1e      	ldr	r3, [pc, #120]	@ (8002588 <BSP_LED_Init+0xe0>)
 800250e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002512:	f003 0310 	and.w	r3, r3, #16
 8002516:	613b      	str	r3, [r7, #16]
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	e00e      	b.n	800253a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 800251c:	4b1a      	ldr	r3, [pc, #104]	@ (8002588 <BSP_LED_Init+0xe0>)
 800251e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002522:	4a19      	ldr	r2, [pc, #100]	@ (8002588 <BSP_LED_Init+0xe0>)
 8002524:	f043 0302 	orr.w	r3, r3, #2
 8002528:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800252c:	4b16      	ldr	r3, [pc, #88]	@ (8002588 <BSP_LED_Init+0xe0>)
 800252e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800253a:	79fb      	ldrb	r3, [r7, #7]
 800253c:	4a13      	ldr	r2, [pc, #76]	@ (800258c <BSP_LED_Init+0xe4>)
 800253e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002542:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002544:	2301      	movs	r3, #1
 8002546:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8002548:	2300      	movs	r3, #0
 800254a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800254c:	2303      	movs	r3, #3
 800254e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	4a0f      	ldr	r2, [pc, #60]	@ (8002590 <BSP_LED_Init+0xe8>)
 8002554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002558:	f107 0218 	add.w	r2, r7, #24
 800255c:	4611      	mov	r1, r2
 800255e:	4618      	mov	r0, r3
 8002560:	f003 fd4e 	bl	8006000 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002564:	79fb      	ldrb	r3, [r7, #7]
 8002566:	4a0a      	ldr	r2, [pc, #40]	@ (8002590 <BSP_LED_Init+0xe8>)
 8002568:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	4a07      	ldr	r2, [pc, #28]	@ (800258c <BSP_LED_Init+0xe4>)
 8002570:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002574:	2200      	movs	r2, #0
 8002576:	4619      	mov	r1, r3
 8002578:	f003 ff0a 	bl	8006390 <HAL_GPIO_WritePin>
  }

  return ret;
 800257c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800257e:	4618      	mov	r0, r3
 8002580:	3730      	adds	r7, #48	@ 0x30
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	58024400 	.word	0x58024400
 800258c:	08014a34 	.word	0x08014a34
 8002590:	24000014 	.word	0x24000014

08002594 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b088      	sub	sp, #32
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	460a      	mov	r2, r1
 800259e:	71fb      	strb	r3, [r7, #7]
 80025a0:	4613      	mov	r3, r2
 80025a2:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 80025a4:	4b2e      	ldr	r3, [pc, #184]	@ (8002660 <BSP_PB_Init+0xcc>)
 80025a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025aa:	4a2d      	ldr	r2, [pc, #180]	@ (8002660 <BSP_PB_Init+0xcc>)
 80025ac:	f043 0304 	orr.w	r3, r3, #4
 80025b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80025b4:	4b2a      	ldr	r3, [pc, #168]	@ (8002660 <BSP_PB_Init+0xcc>)
 80025b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80025ba:	f003 0304 	and.w	r3, r3, #4
 80025be:	60bb      	str	r3, [r7, #8]
 80025c0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80025c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80025c6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80025c8:	2302      	movs	r3, #2
 80025ca:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80025cc:	2302      	movs	r3, #2
 80025ce:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80025d0:	79bb      	ldrb	r3, [r7, #6]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10c      	bne.n	80025f0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80025d6:	2300      	movs	r3, #0
 80025d8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	4a21      	ldr	r2, [pc, #132]	@ (8002664 <BSP_PB_Init+0xd0>)
 80025de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e2:	f107 020c 	add.w	r2, r7, #12
 80025e6:	4611      	mov	r1, r2
 80025e8:	4618      	mov	r0, r3
 80025ea:	f003 fd09 	bl	8006000 <HAL_GPIO_Init>
 80025ee:	e031      	b.n	8002654 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80025f0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80025f4:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80025f6:	79fb      	ldrb	r3, [r7, #7]
 80025f8:	4a1a      	ldr	r2, [pc, #104]	@ (8002664 <BSP_PB_Init+0xd0>)
 80025fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025fe:	f107 020c 	add.w	r2, r7, #12
 8002602:	4611      	mov	r1, r2
 8002604:	4618      	mov	r0, r3
 8002606:	f003 fcfb 	bl	8006000 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800260a:	79fb      	ldrb	r3, [r7, #7]
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	4a16      	ldr	r2, [pc, #88]	@ (8002668 <BSP_PB_Init+0xd4>)
 8002610:	441a      	add	r2, r3
 8002612:	79fb      	ldrb	r3, [r7, #7]
 8002614:	4915      	ldr	r1, [pc, #84]	@ (800266c <BSP_PB_Init+0xd8>)
 8002616:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800261a:	4619      	mov	r1, r3
 800261c:	4610      	mov	r0, r2
 800261e:	f003 fc9e 	bl	8005f5e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8002622:	79fb      	ldrb	r3, [r7, #7]
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	4a10      	ldr	r2, [pc, #64]	@ (8002668 <BSP_PB_Init+0xd4>)
 8002628:	1898      	adds	r0, r3, r2
 800262a:	79fb      	ldrb	r3, [r7, #7]
 800262c:	4a10      	ldr	r2, [pc, #64]	@ (8002670 <BSP_PB_Init+0xdc>)
 800262e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002632:	461a      	mov	r2, r3
 8002634:	2100      	movs	r1, #0
 8002636:	f003 fc73 	bl	8005f20 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800263a:	2028      	movs	r0, #40	@ 0x28
 800263c:	79fb      	ldrb	r3, [r7, #7]
 800263e:	4a0d      	ldr	r2, [pc, #52]	@ (8002674 <BSP_PB_Init+0xe0>)
 8002640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002644:	2200      	movs	r2, #0
 8002646:	4619      	mov	r1, r3
 8002648:	f001 fb49 	bl	8003cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800264c:	2328      	movs	r3, #40	@ 0x28
 800264e:	4618      	mov	r0, r3
 8002650:	f001 fb5f 	bl	8003d12 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002654:	2300      	movs	r3, #0
}
 8002656:	4618      	mov	r0, r3
 8002658:	3720      	adds	r7, #32
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	58024400 	.word	0x58024400
 8002664:	24000020 	.word	0x24000020
 8002668:	24000964 	.word	0x24000964
 800266c:	08014a3c 	.word	0x08014a3c
 8002670:	24000024 	.word	0x24000024
 8002674:	24000028 	.word	0x24000028

08002678 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	4603      	mov	r3, r0
 8002680:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8002682:	79fb      	ldrb	r3, [r7, #7]
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4a04      	ldr	r2, [pc, #16]	@ (8002698 <BSP_PB_IRQHandler+0x20>)
 8002688:	4413      	add	r3, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f003 fc7c 	bl	8005f88 <HAL_EXTI_IRQHandler>
}
 8002690:	bf00      	nop
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	24000964 	.word	0x24000964

0800269c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	4603      	mov	r3, r0
 80026a4:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 80026a6:	bf00      	nop
 80026a8:	370c      	adds	r7, #12
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	4603      	mov	r3, r0
 80026bc:	6039      	str	r1, [r7, #0]
 80026be:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80026c0:	2300      	movs	r3, #0
 80026c2:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80026c4:	79fb      	ldrb	r3, [r7, #7]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d003      	beq.n	80026d2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80026ca:	f06f 0301 	mvn.w	r3, #1
 80026ce:	60fb      	str	r3, [r7, #12]
 80026d0:	e018      	b.n	8002704 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	2294      	movs	r2, #148	@ 0x94
 80026d6:	fb02 f303 	mul.w	r3, r2, r3
 80026da:	4a0d      	ldr	r2, [pc, #52]	@ (8002710 <BSP_COM_Init+0x5c>)
 80026dc:	4413      	add	r3, r2
 80026de:	4618      	mov	r0, r3
 80026e0:	f000 f86e 	bl	80027c0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	2294      	movs	r2, #148	@ 0x94
 80026e8:	fb02 f303 	mul.w	r3, r2, r3
 80026ec:	4a08      	ldr	r2, [pc, #32]	@ (8002710 <BSP_COM_Init+0x5c>)
 80026ee:	4413      	add	r3, r2
 80026f0:	6839      	ldr	r1, [r7, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 f80e 	bl	8002714 <MX_USART3_Init>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80026fe:	f06f 0303 	mvn.w	r3, #3
 8002702:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8002704:	68fb      	ldr	r3, [r7, #12]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	2400096c 	.word	0x2400096c

08002714 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800271e:	4b15      	ldr	r3, [pc, #84]	@ (8002774 <MX_USART3_Init+0x60>)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681a      	ldr	r2, [r3, #0]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	220c      	movs	r2, #12
 8002732:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	895b      	ldrh	r3, [r3, #10]
 8002738:	461a      	mov	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	891b      	ldrh	r3, [r3, #8]
 800274a:	461a      	mov	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	899b      	ldrh	r3, [r3, #12]
 8002754:	461a      	mov	r2, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8002760:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f00a fa14 	bl	800cb90 <HAL_UART_Init>
 8002768:	4603      	mov	r3, r0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	24000010 	.word	0x24000010

08002778 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8002780:	4b09      	ldr	r3, [pc, #36]	@ (80027a8 <__io_putchar+0x30>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	461a      	mov	r2, r3
 8002786:	2394      	movs	r3, #148	@ 0x94
 8002788:	fb02 f303 	mul.w	r3, r2, r3
 800278c:	4a07      	ldr	r2, [pc, #28]	@ (80027ac <__io_putchar+0x34>)
 800278e:	1898      	adds	r0, r3, r2
 8002790:	1d39      	adds	r1, r7, #4
 8002792:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002796:	2201      	movs	r2, #1
 8002798:	f00a fa54 	bl	800cc44 <HAL_UART_Transmit>
  return ch;
 800279c:	687b      	ldr	r3, [r7, #4]
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3708      	adds	r7, #8
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	24000a00 	.word	0x24000a00
 80027ac:	2400096c 	.word	0x2400096c

080027b0 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 80027b4:	2000      	movs	r0, #0
 80027b6:	f7ff ff71 	bl	800269c <BSP_PB_Callback>
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08a      	sub	sp, #40	@ 0x28
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80027c8:	4b27      	ldr	r3, [pc, #156]	@ (8002868 <COM1_MspInit+0xa8>)
 80027ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027ce:	4a26      	ldr	r2, [pc, #152]	@ (8002868 <COM1_MspInit+0xa8>)
 80027d0:	f043 0308 	orr.w	r3, r3, #8
 80027d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027d8:	4b23      	ldr	r3, [pc, #140]	@ (8002868 <COM1_MspInit+0xa8>)
 80027da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80027e6:	4b20      	ldr	r3, [pc, #128]	@ (8002868 <COM1_MspInit+0xa8>)
 80027e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027ec:	4a1e      	ldr	r2, [pc, #120]	@ (8002868 <COM1_MspInit+0xa8>)
 80027ee:	f043 0308 	orr.w	r3, r3, #8
 80027f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002868 <COM1_MspInit+0xa8>)
 80027f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027fc:	f003 0308 	and.w	r3, r3, #8
 8002800:	60fb      	str	r3, [r7, #12]
 8002802:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8002804:	4b18      	ldr	r3, [pc, #96]	@ (8002868 <COM1_MspInit+0xa8>)
 8002806:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800280a:	4a17      	ldr	r2, [pc, #92]	@ (8002868 <COM1_MspInit+0xa8>)
 800280c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002810:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002814:	4b14      	ldr	r3, [pc, #80]	@ (8002868 <COM1_MspInit+0xa8>)
 8002816:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800281a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800281e:	60bb      	str	r3, [r7, #8]
 8002820:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8002822:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002826:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002828:	2302      	movs	r3, #2
 800282a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800282c:	2302      	movs	r3, #2
 800282e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8002830:	2301      	movs	r3, #1
 8002832:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8002834:	2307      	movs	r3, #7
 8002836:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8002838:	f107 0314 	add.w	r3, r7, #20
 800283c:	4619      	mov	r1, r3
 800283e:	480b      	ldr	r0, [pc, #44]	@ (800286c <COM1_MspInit+0xac>)
 8002840:	f003 fbde 	bl	8006000 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8002844:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002848:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800284a:	2302      	movs	r3, #2
 800284c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800284e:	2307      	movs	r3, #7
 8002850:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8002852:	f107 0314 	add.w	r3, r7, #20
 8002856:	4619      	mov	r1, r3
 8002858:	4804      	ldr	r0, [pc, #16]	@ (800286c <COM1_MspInit+0xac>)
 800285a:	f003 fbd1 	bl	8006000 <HAL_GPIO_Init>
}
 800285e:	bf00      	nop
 8002860:	3728      	adds	r7, #40	@ 0x28
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	58024400 	.word	0x58024400
 800286c:	58020c00 	.word	0x58020c00

08002870 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002876:	2003      	movs	r0, #3
 8002878:	f001 fa26 	bl	8003cc8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800287c:	f005 ff02 	bl	8008684 <HAL_RCC_GetSysClockFreq>
 8002880:	4602      	mov	r2, r0
 8002882:	4b15      	ldr	r3, [pc, #84]	@ (80028d8 <HAL_Init+0x68>)
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	0a1b      	lsrs	r3, r3, #8
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	4913      	ldr	r1, [pc, #76]	@ (80028dc <HAL_Init+0x6c>)
 800288e:	5ccb      	ldrb	r3, [r1, r3]
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
 8002898:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800289a:	4b0f      	ldr	r3, [pc, #60]	@ (80028d8 <HAL_Init+0x68>)
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	4a0e      	ldr	r2, [pc, #56]	@ (80028dc <HAL_Init+0x6c>)
 80028a4:	5cd3      	ldrb	r3, [r2, r3]
 80028a6:	f003 031f 	and.w	r3, r3, #31
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	fa22 f303 	lsr.w	r3, r2, r3
 80028b0:	4a0b      	ldr	r2, [pc, #44]	@ (80028e0 <HAL_Init+0x70>)
 80028b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028b4:	4a0b      	ldr	r2, [pc, #44]	@ (80028e4 <HAL_Init+0x74>)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028ba:	2000      	movs	r0, #0
 80028bc:	f000 f814 	bl	80028e8 <HAL_InitTick>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d001      	beq.n	80028ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e002      	b.n	80028d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80028ca:	f7fe fd11 	bl	80012f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	58024400 	.word	0x58024400
 80028dc:	08014a24 	.word	0x08014a24
 80028e0:	24000004 	.word	0x24000004
 80028e4:	24000000 	.word	0x24000000

080028e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80028f0:	4b15      	ldr	r3, [pc, #84]	@ (8002948 <HAL_InitTick+0x60>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e021      	b.n	8002940 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80028fc:	4b13      	ldr	r3, [pc, #76]	@ (800294c <HAL_InitTick+0x64>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4b11      	ldr	r3, [pc, #68]	@ (8002948 <HAL_InitTick+0x60>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	4619      	mov	r1, r3
 8002906:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800290a:	fbb3 f3f1 	udiv	r3, r3, r1
 800290e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002912:	4618      	mov	r0, r3
 8002914:	f001 fa0b 	bl	8003d2e <HAL_SYSTICK_Config>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d001      	beq.n	8002922 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e00e      	b.n	8002940 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2b0f      	cmp	r3, #15
 8002926:	d80a      	bhi.n	800293e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002928:	2200      	movs	r2, #0
 800292a:	6879      	ldr	r1, [r7, #4]
 800292c:	f04f 30ff 	mov.w	r0, #4294967295
 8002930:	f001 f9d5 	bl	8003cde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002934:	4a06      	ldr	r2, [pc, #24]	@ (8002950 <HAL_InitTick+0x68>)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800293a:	2300      	movs	r3, #0
 800293c:	e000      	b.n	8002940 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
}
 8002940:	4618      	mov	r0, r3
 8002942:	3708      	adds	r7, #8
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}
 8002948:	24000030 	.word	0x24000030
 800294c:	24000000 	.word	0x24000000
 8002950:	2400002c 	.word	0x2400002c

08002954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002954:	b480      	push	{r7}
 8002956:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002958:	4b06      	ldr	r3, [pc, #24]	@ (8002974 <HAL_IncTick+0x20>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	461a      	mov	r2, r3
 800295e:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <HAL_IncTick+0x24>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4413      	add	r3, r2
 8002964:	4a04      	ldr	r2, [pc, #16]	@ (8002978 <HAL_IncTick+0x24>)
 8002966:	6013      	str	r3, [r2, #0]
}
 8002968:	bf00      	nop
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	24000030 	.word	0x24000030
 8002978:	24000a04 	.word	0x24000a04

0800297c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800297c:	b480      	push	{r7}
 800297e:	af00      	add	r7, sp, #0
  return uwTick;
 8002980:	4b03      	ldr	r3, [pc, #12]	@ (8002990 <HAL_GetTick+0x14>)
 8002982:	681b      	ldr	r3, [r3, #0]
}
 8002984:	4618      	mov	r0, r3
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	24000a04 	.word	0x24000a04

08002994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b084      	sub	sp, #16
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800299c:	f7ff ffee 	bl	800297c <HAL_GetTick>
 80029a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ac:	d005      	beq.n	80029ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ae:	4b0a      	ldr	r3, [pc, #40]	@ (80029d8 <HAL_Delay+0x44>)
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	461a      	mov	r2, r3
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	4413      	add	r3, r2
 80029b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80029ba:	bf00      	nop
 80029bc:	f7ff ffde 	bl	800297c <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d8f7      	bhi.n	80029bc <HAL_Delay+0x28>
  {
  }
}
 80029cc:	bf00      	nop
 80029ce:	bf00      	nop
 80029d0:	3710      	adds	r7, #16
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	24000030 	.word	0x24000030

080029dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80029e0:	4b03      	ldr	r3, [pc, #12]	@ (80029f0 <HAL_GetREVID+0x14>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	0c1b      	lsrs	r3, r3, #16
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	5c001000 	.word	0x5c001000

080029f4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	609a      	str	r2, [r3, #8]
}
 8002a0e:	bf00      	nop
 8002a10:	370c      	adds	r7, #12
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b083      	sub	sp, #12
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	609a      	str	r2, [r3, #8]
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b087      	sub	sp, #28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
 8002a68:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	3360      	adds	r3, #96	@ 0x60
 8002a6e:	461a      	mov	r2, r3
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	009b      	lsls	r3, r3, #2
 8002a74:	4413      	add	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	430b      	orrs	r3, r1
 8002a8a:	431a      	orrs	r2, r3
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002a90:	bf00      	nop
 8002a92:	371c      	adds	r7, #28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	f003 031f 	and.w	r3, r3, #31
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8002abc:	431a      	orrs	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	611a      	str	r2, [r3, #16]
}
 8002ac2:	bf00      	nop
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr

08002ace <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002ace:	b480      	push	{r7}
 8002ad0:	b087      	sub	sp, #28
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	60f8      	str	r0, [r7, #12]
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	3360      	adds	r3, #96	@ 0x60
 8002ade:	461a      	mov	r2, r3
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	4413      	add	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	431a      	orrs	r2, r3
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	601a      	str	r2, [r3, #0]
  }
}
 8002af8:	bf00      	nop
 8002afa:	371c      	adds	r7, #28
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	3330      	adds	r3, #48	@ 0x30
 8002b14:	461a      	mov	r2, r3
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	0a1b      	lsrs	r3, r3, #8
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	f003 030c 	and.w	r3, r3, #12
 8002b20:	4413      	add	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	f003 031f 	and.w	r3, r3, #31
 8002b2e:	211f      	movs	r1, #31
 8002b30:	fa01 f303 	lsl.w	r3, r1, r3
 8002b34:	43db      	mvns	r3, r3
 8002b36:	401a      	ands	r2, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	0e9b      	lsrs	r3, r3, #26
 8002b3c:	f003 011f 	and.w	r1, r3, #31
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	f003 031f 	and.w	r3, r3, #31
 8002b46:	fa01 f303 	lsl.w	r3, r1, r3
 8002b4a:	431a      	orrs	r2, r3
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b50:	bf00      	nop
 8002b52:	371c      	adds	r7, #28
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b087      	sub	sp, #28
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	60f8      	str	r0, [r7, #12]
 8002b64:	60b9      	str	r1, [r7, #8]
 8002b66:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	3314      	adds	r3, #20
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	0e5b      	lsrs	r3, r3, #25
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	4413      	add	r3, r2
 8002b7a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	0d1b      	lsrs	r3, r3, #20
 8002b84:	f003 031f 	and.w	r3, r3, #31
 8002b88:	2107      	movs	r1, #7
 8002b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8e:	43db      	mvns	r3, r3
 8002b90:	401a      	ands	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	0d1b      	lsrs	r3, r3, #20
 8002b96:	f003 031f 	and.w	r3, r3, #31
 8002b9a:	6879      	ldr	r1, [r7, #4]
 8002b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002ba0:	431a      	orrs	r2, r3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ba6:	bf00      	nop
 8002ba8:	371c      	adds	r7, #28
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
	...

08002bb4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b085      	sub	sp, #20
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	401a      	ands	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f003 0318 	and.w	r3, r3, #24
 8002bd6:	4908      	ldr	r1, [pc, #32]	@ (8002bf8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002bd8:	40d9      	lsrs	r1, r3
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	400b      	ands	r3, r1
 8002bde:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002be2:	431a      	orrs	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002bea:	bf00      	nop
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	000fffff 	.word	0x000fffff

08002bfc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	4b04      	ldr	r3, [pc, #16]	@ (8002c1c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6093      	str	r3, [r2, #8]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	5fffffc0 	.word	0x5fffffc0

08002c20 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c34:	d101      	bne.n	8002c3a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr

08002c48 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b083      	sub	sp, #12
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	4b05      	ldr	r3, [pc, #20]	@ (8002c6c <LL_ADC_EnableInternalRegulator+0x24>)
 8002c56:	4013      	ands	r3, r2
 8002c58:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr
 8002c6c:	6fffffc0 	.word	0x6fffffc0

08002c70 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c84:	d101      	bne.n	8002c8a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c86:	2301      	movs	r3, #1
 8002c88:	e000      	b.n	8002c8c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c8a:	2300      	movs	r3, #0
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	370c      	adds	r7, #12
 8002c90:	46bd      	mov	sp, r7
 8002c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c96:	4770      	bx	lr

08002c98 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d101      	bne.n	8002cb0 <LL_ADC_IsEnabled+0x18>
 8002cac:	2301      	movs	r3, #1
 8002cae:	e000      	b.n	8002cb2 <LL_ADC_IsEnabled+0x1a>
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	370c      	adds	r7, #12
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr

08002cbe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d101      	bne.n	8002cd6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 0308 	and.w	r3, r3, #8
 8002cf4:	2b08      	cmp	r3, #8
 8002cf6:	d101      	bne.n	8002cfc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e000      	b.n	8002cfe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
	...

08002d0c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b089      	sub	sp, #36	@ 0x24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d14:	2300      	movs	r3, #0
 8002d16:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e18f      	b.n	8003046 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d109      	bne.n	8002d48 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7fd fdb3 	bl	80008a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff ff67 	bl	8002c20 <LL_ADC_IsDeepPowerDownEnabled>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d004      	beq.n	8002d62 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7ff ff4d 	bl	8002bfc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4618      	mov	r0, r3
 8002d68:	f7ff ff82 	bl	8002c70 <LL_ADC_IsInternalRegulatorEnabled>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d114      	bne.n	8002d9c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff ff66 	bl	8002c48 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d7c:	4b87      	ldr	r3, [pc, #540]	@ (8002f9c <HAL_ADC_Init+0x290>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	099b      	lsrs	r3, r3, #6
 8002d82:	4a87      	ldr	r2, [pc, #540]	@ (8002fa0 <HAL_ADC_Init+0x294>)
 8002d84:	fba2 2303 	umull	r2, r3, r2, r3
 8002d88:	099b      	lsrs	r3, r3, #6
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d8e:	e002      	b.n	8002d96 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1f9      	bne.n	8002d90 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff ff65 	bl	8002c70 <LL_ADC_IsInternalRegulatorEnabled>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d10d      	bne.n	8002dc8 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db0:	f043 0210 	orr.w	r2, r3, #16
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dbc:	f043 0201 	orr.w	r2, r3, #1
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f7ff ff76 	bl	8002cbe <LL_ADC_REG_IsConversionOngoing>
 8002dd2:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dd8:	f003 0310 	and.w	r3, r3, #16
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f040 8129 	bne.w	8003034 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002de2:	697b      	ldr	r3, [r7, #20]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f040 8125 	bne.w	8003034 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dee:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002df2:	f043 0202 	orr.w	r2, r3, #2
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff ff4a 	bl	8002c98 <LL_ADC_IsEnabled>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d136      	bne.n	8002e78 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a65      	ldr	r2, [pc, #404]	@ (8002fa4 <HAL_ADC_Init+0x298>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d004      	beq.n	8002e1e <HAL_ADC_Init+0x112>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a63      	ldr	r2, [pc, #396]	@ (8002fa8 <HAL_ADC_Init+0x29c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d10e      	bne.n	8002e3c <HAL_ADC_Init+0x130>
 8002e1e:	4861      	ldr	r0, [pc, #388]	@ (8002fa4 <HAL_ADC_Init+0x298>)
 8002e20:	f7ff ff3a 	bl	8002c98 <LL_ADC_IsEnabled>
 8002e24:	4604      	mov	r4, r0
 8002e26:	4860      	ldr	r0, [pc, #384]	@ (8002fa8 <HAL_ADC_Init+0x29c>)
 8002e28:	f7ff ff36 	bl	8002c98 <LL_ADC_IsEnabled>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	4323      	orrs	r3, r4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	bf0c      	ite	eq
 8002e34:	2301      	moveq	r3, #1
 8002e36:	2300      	movne	r3, #0
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	e008      	b.n	8002e4e <HAL_ADC_Init+0x142>
 8002e3c:	485b      	ldr	r0, [pc, #364]	@ (8002fac <HAL_ADC_Init+0x2a0>)
 8002e3e:	f7ff ff2b 	bl	8002c98 <LL_ADC_IsEnabled>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	bf0c      	ite	eq
 8002e48:	2301      	moveq	r3, #1
 8002e4a:	2300      	movne	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d012      	beq.n	8002e78 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a53      	ldr	r2, [pc, #332]	@ (8002fa4 <HAL_ADC_Init+0x298>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d004      	beq.n	8002e66 <HAL_ADC_Init+0x15a>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a51      	ldr	r2, [pc, #324]	@ (8002fa8 <HAL_ADC_Init+0x29c>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d101      	bne.n	8002e6a <HAL_ADC_Init+0x15e>
 8002e66:	4a52      	ldr	r2, [pc, #328]	@ (8002fb0 <HAL_ADC_Init+0x2a4>)
 8002e68:	e000      	b.n	8002e6c <HAL_ADC_Init+0x160>
 8002e6a:	4a52      	ldr	r2, [pc, #328]	@ (8002fb4 <HAL_ADC_Init+0x2a8>)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	4619      	mov	r1, r3
 8002e72:	4610      	mov	r0, r2
 8002e74:	f7ff fdbe 	bl	80029f4 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002e78:	f7ff fdb0 	bl	80029dc <HAL_GetREVID>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d914      	bls.n	8002eb0 <HAL_ADC_Init+0x1a4>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2b10      	cmp	r3, #16
 8002e8c:	d110      	bne.n	8002eb0 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	7d5b      	ldrb	r3, [r3, #21]
 8002e92:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e98:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e9e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	7f1b      	ldrb	r3, [r3, #28]
 8002ea4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002ea6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ea8:	f043 030c 	orr.w	r3, r3, #12
 8002eac:	61bb      	str	r3, [r7, #24]
 8002eae:	e00d      	b.n	8002ecc <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	7d5b      	ldrb	r3, [r3, #21]
 8002eb4:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002eba:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002ec0:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	7f1b      	ldrb	r3, [r3, #28]
 8002ec6:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	7f1b      	ldrb	r3, [r3, #28]
 8002ed0:	2b01      	cmp	r3, #1
 8002ed2:	d106      	bne.n	8002ee2 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	045b      	lsls	r3, r3, #17
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d009      	beq.n	8002efe <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eee:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ef6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	4b2c      	ldr	r3, [pc, #176]	@ (8002fb8 <HAL_ADC_Init+0x2ac>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6812      	ldr	r2, [r2, #0]
 8002f0c:	69b9      	ldr	r1, [r7, #24]
 8002f0e:	430b      	orrs	r3, r1
 8002f10:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7ff fed1 	bl	8002cbe <LL_ADC_REG_IsConversionOngoing>
 8002f1c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7ff fede 	bl	8002ce4 <LL_ADC_INJ_IsConversionOngoing>
 8002f28:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d15f      	bne.n	8002ff0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d15c      	bne.n	8002ff0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	7d1b      	ldrb	r3, [r3, #20]
 8002f3a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002f40:	4313      	orrs	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	4b1c      	ldr	r3, [pc, #112]	@ (8002fbc <HAL_ADC_Init+0x2b0>)
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	6812      	ldr	r2, [r2, #0]
 8002f52:	69b9      	ldr	r1, [r7, #24]
 8002f54:	430b      	orrs	r3, r1
 8002f56:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d130      	bne.n	8002fc4 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f66:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	4b14      	ldr	r3, [pc, #80]	@ (8002fc0 <HAL_ADC_Init+0x2b4>)
 8002f70:	4013      	ands	r3, r2
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f76:	3a01      	subs	r2, #1
 8002f78:	0411      	lsls	r1, r2, #16
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002f7e:	4311      	orrs	r1, r2
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002f84:	4311      	orrs	r1, r2
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0201 	orr.w	r2, r2, #1
 8002f96:	611a      	str	r2, [r3, #16]
 8002f98:	e01c      	b.n	8002fd4 <HAL_ADC_Init+0x2c8>
 8002f9a:	bf00      	nop
 8002f9c:	24000000 	.word	0x24000000
 8002fa0:	053e2d63 	.word	0x053e2d63
 8002fa4:	40022000 	.word	0x40022000
 8002fa8:	40022100 	.word	0x40022100
 8002fac:	58026000 	.word	0x58026000
 8002fb0:	40022300 	.word	0x40022300
 8002fb4:	58026300 	.word	0x58026300
 8002fb8:	fff0c003 	.word	0xfff0c003
 8002fbc:	ffffbffc 	.word	0xffffbffc
 8002fc0:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	691a      	ldr	r2, [r3, #16]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0201 	bic.w	r2, r2, #1
 8002fd2:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f000 fb8c 	bl	8003708 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d10c      	bne.n	8003012 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ffe:	f023 010f 	bic.w	r1, r3, #15
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	1e5a      	subs	r2, r3, #1
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	430a      	orrs	r2, r1
 800300e:	631a      	str	r2, [r3, #48]	@ 0x30
 8003010:	e007      	b.n	8003022 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 020f 	bic.w	r2, r2, #15
 8003020:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003026:	f023 0303 	bic.w	r3, r3, #3
 800302a:	f043 0201 	orr.w	r2, r3, #1
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	655a      	str	r2, [r3, #84]	@ 0x54
 8003032:	e007      	b.n	8003044 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003038:	f043 0210 	orr.w	r2, r3, #16
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003044:	7ffb      	ldrb	r3, [r7, #31]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3724      	adds	r7, #36	@ 0x24
 800304a:	46bd      	mov	sp, r7
 800304c:	bd90      	pop	{r4, r7, pc}
 800304e:	bf00      	nop

08003050 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003050:	b590      	push	{r4, r7, lr}
 8003052:	b0a1      	sub	sp, #132	@ 0x84
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800305a:	2300      	movs	r3, #0
 800305c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003060:	2300      	movs	r3, #0
 8003062:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	4a65      	ldr	r2, [pc, #404]	@ (8003200 <HAL_ADC_ConfigChannel+0x1b0>)
 800306a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003072:	2b01      	cmp	r3, #1
 8003074:	d101      	bne.n	800307a <HAL_ADC_ConfigChannel+0x2a>
 8003076:	2302      	movs	r3, #2
 8003078:	e32e      	b.n	80036d8 <HAL_ADC_ConfigChannel+0x688>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2201      	movs	r2, #1
 800307e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff fe19 	bl	8002cbe <LL_ADC_REG_IsConversionOngoing>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	f040 8313 	bne.w	80036ba <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	db2c      	blt.n	80030f6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d108      	bne.n	80030ba <HAL_ADC_ConfigChannel+0x6a>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	0e9b      	lsrs	r3, r3, #26
 80030ae:	f003 031f 	and.w	r3, r3, #31
 80030b2:	2201      	movs	r2, #1
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	e016      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x98>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030c2:	fa93 f3a3 	rbit	r3, r3
 80030c6:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80030c8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030ca:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80030cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80030d2:	2320      	movs	r3, #32
 80030d4:	e003      	b.n	80030de <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80030d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80030d8:	fab3 f383 	clz	r3, r3
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	f003 031f 	and.w	r3, r3, #31
 80030e2:	2201      	movs	r2, #1
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6812      	ldr	r2, [r2, #0]
 80030ec:	69d1      	ldr	r1, [r2, #28]
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	6812      	ldr	r2, [r2, #0]
 80030f2:	430b      	orrs	r3, r1
 80030f4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6818      	ldr	r0, [r3, #0]
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	6859      	ldr	r1, [r3, #4]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	461a      	mov	r2, r3
 8003104:	f7ff fcfe 	bl	8002b04 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f7ff fdd6 	bl	8002cbe <LL_ADC_REG_IsConversionOngoing>
 8003112:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4618      	mov	r0, r3
 800311a:	f7ff fde3 	bl	8002ce4 <LL_ADC_INJ_IsConversionOngoing>
 800311e:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003120:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003122:	2b00      	cmp	r3, #0
 8003124:	f040 80b8 	bne.w	8003298 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003128:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800312a:	2b00      	cmp	r3, #0
 800312c:	f040 80b4 	bne.w	8003298 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6818      	ldr	r0, [r3, #0]
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	6819      	ldr	r1, [r3, #0]
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	461a      	mov	r2, r3
 800313e:	f7ff fd0d 	bl	8002b5c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003142:	4b30      	ldr	r3, [pc, #192]	@ (8003204 <HAL_ADC_ConfigChannel+0x1b4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800314a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800314e:	d10b      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x118>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	695a      	ldr	r2, [r3, #20]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	089b      	lsrs	r3, r3, #2
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	e01d      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x154>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f003 0310 	and.w	r3, r3, #16
 8003172:	2b00      	cmp	r3, #0
 8003174:	d10b      	bne.n	800318e <HAL_ADC_ConfigChannel+0x13e>
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	695a      	ldr	r2, [r3, #20]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	089b      	lsrs	r3, r3, #2
 8003182:	f003 0307 	and.w	r3, r3, #7
 8003186:	005b      	lsls	r3, r3, #1
 8003188:	fa02 f303 	lsl.w	r3, r2, r3
 800318c:	e00a      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x154>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	695a      	ldr	r2, [r3, #20]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68db      	ldr	r3, [r3, #12]
 8003198:	089b      	lsrs	r3, r3, #2
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	005b      	lsls	r3, r3, #1
 80031a0:	fa02 f303 	lsl.w	r3, r2, r3
 80031a4:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	d02c      	beq.n	8003208 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6818      	ldr	r0, [r3, #0]
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	6919      	ldr	r1, [r3, #16]
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80031bc:	f7ff fc4e 	bl	8002a5c <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6818      	ldr	r0, [r3, #0]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	6919      	ldr	r1, [r3, #16]
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	7e5b      	ldrb	r3, [r3, #25]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d102      	bne.n	80031d6 <HAL_ADC_ConfigChannel+0x186>
 80031d0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80031d4:	e000      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x188>
 80031d6:	2300      	movs	r3, #0
 80031d8:	461a      	mov	r2, r3
 80031da:	f7ff fc78 	bl	8002ace <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	6919      	ldr	r1, [r3, #16]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	7e1b      	ldrb	r3, [r3, #24]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d102      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x1a4>
 80031ee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80031f2:	e000      	b.n	80031f6 <HAL_ADC_ConfigChannel+0x1a6>
 80031f4:	2300      	movs	r3, #0
 80031f6:	461a      	mov	r2, r3
 80031f8:	f7ff fc50 	bl	8002a9c <LL_ADC_SetDataRightShift>
 80031fc:	e04c      	b.n	8003298 <HAL_ADC_ConfigChannel+0x248>
 80031fe:	bf00      	nop
 8003200:	47ff0000 	.word	0x47ff0000
 8003204:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800320e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	069b      	lsls	r3, r3, #26
 8003218:	429a      	cmp	r2, r3
 800321a:	d107      	bne.n	800322c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800322a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003232:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	069b      	lsls	r3, r3, #26
 800323c:	429a      	cmp	r2, r3
 800323e:	d107      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800324e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003256:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	069b      	lsls	r3, r3, #26
 8003260:	429a      	cmp	r2, r3
 8003262:	d107      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003272:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800327a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	069b      	lsls	r3, r3, #26
 8003284:	429a      	cmp	r2, r3
 8003286:	d107      	bne.n	8003298 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003296:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff fcfb 	bl	8002c98 <LL_ADC_IsEnabled>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f040 8211 	bne.w	80036cc <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	6819      	ldr	r1, [r3, #0]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	461a      	mov	r2, r3
 80032b8:	f7ff fc7c 	bl	8002bb4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	4aa1      	ldr	r2, [pc, #644]	@ (8003548 <HAL_ADC_ConfigChannel+0x4f8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	f040 812e 	bne.w	8003524 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10b      	bne.n	80032f0 <HAL_ADC_ConfigChannel+0x2a0>
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	0e9b      	lsrs	r3, r3, #26
 80032de:	3301      	adds	r3, #1
 80032e0:	f003 031f 	and.w	r3, r3, #31
 80032e4:	2b09      	cmp	r3, #9
 80032e6:	bf94      	ite	ls
 80032e8:	2301      	movls	r3, #1
 80032ea:	2300      	movhi	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	e019      	b.n	8003324 <HAL_ADC_ConfigChannel+0x2d4>
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80032f8:	fa93 f3a3 	rbit	r3, r3
 80032fc:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80032fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003300:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003302:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003304:	2b00      	cmp	r3, #0
 8003306:	d101      	bne.n	800330c <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8003308:	2320      	movs	r3, #32
 800330a:	e003      	b.n	8003314 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 800330c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800330e:	fab3 f383 	clz	r3, r3
 8003312:	b2db      	uxtb	r3, r3
 8003314:	3301      	adds	r3, #1
 8003316:	f003 031f 	and.w	r3, r3, #31
 800331a:	2b09      	cmp	r3, #9
 800331c:	bf94      	ite	ls
 800331e:	2301      	movls	r3, #1
 8003320:	2300      	movhi	r3, #0
 8003322:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003324:	2b00      	cmp	r3, #0
 8003326:	d079      	beq.n	800341c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003330:	2b00      	cmp	r3, #0
 8003332:	d107      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x2f4>
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	0e9b      	lsrs	r3, r3, #26
 800333a:	3301      	adds	r3, #1
 800333c:	069b      	lsls	r3, r3, #26
 800333e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003342:	e015      	b.n	8003370 <HAL_ADC_ConfigChannel+0x320>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800334c:	fa93 f3a3 	rbit	r3, r3
 8003350:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003352:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003354:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003356:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003358:	2b00      	cmp	r3, #0
 800335a:	d101      	bne.n	8003360 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 800335c:	2320      	movs	r3, #32
 800335e:	e003      	b.n	8003368 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003360:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003362:	fab3 f383 	clz	r3, r3
 8003366:	b2db      	uxtb	r3, r3
 8003368:	3301      	adds	r3, #1
 800336a:	069b      	lsls	r3, r3, #26
 800336c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003378:	2b00      	cmp	r3, #0
 800337a:	d109      	bne.n	8003390 <HAL_ADC_ConfigChannel+0x340>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	0e9b      	lsrs	r3, r3, #26
 8003382:	3301      	adds	r3, #1
 8003384:	f003 031f 	and.w	r3, r3, #31
 8003388:	2101      	movs	r1, #1
 800338a:	fa01 f303 	lsl.w	r3, r1, r3
 800338e:	e017      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x370>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003396:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003398:	fa93 f3a3 	rbit	r3, r3
 800339c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800339e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033a0:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80033a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80033a8:	2320      	movs	r3, #32
 80033aa:	e003      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80033ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80033ae:	fab3 f383 	clz	r3, r3
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	3301      	adds	r3, #1
 80033b6:	f003 031f 	and.w	r3, r3, #31
 80033ba:	2101      	movs	r1, #1
 80033bc:	fa01 f303 	lsl.w	r3, r1, r3
 80033c0:	ea42 0103 	orr.w	r1, r2, r3
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10a      	bne.n	80033e6 <HAL_ADC_ConfigChannel+0x396>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	0e9b      	lsrs	r3, r3, #26
 80033d6:	3301      	adds	r3, #1
 80033d8:	f003 021f 	and.w	r2, r3, #31
 80033dc:	4613      	mov	r3, r2
 80033de:	005b      	lsls	r3, r3, #1
 80033e0:	4413      	add	r3, r2
 80033e2:	051b      	lsls	r3, r3, #20
 80033e4:	e018      	b.n	8003418 <HAL_ADC_ConfigChannel+0x3c8>
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ee:	fa93 f3a3 	rbit	r3, r3
 80033f2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80033f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80033f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d101      	bne.n	8003402 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80033fe:	2320      	movs	r3, #32
 8003400:	e003      	b.n	800340a <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 8003402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003404:	fab3 f383 	clz	r3, r3
 8003408:	b2db      	uxtb	r3, r3
 800340a:	3301      	adds	r3, #1
 800340c:	f003 021f 	and.w	r2, r3, #31
 8003410:	4613      	mov	r3, r2
 8003412:	005b      	lsls	r3, r3, #1
 8003414:	4413      	add	r3, r2
 8003416:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003418:	430b      	orrs	r3, r1
 800341a:	e07e      	b.n	800351a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003424:	2b00      	cmp	r3, #0
 8003426:	d107      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x3e8>
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	0e9b      	lsrs	r3, r3, #26
 800342e:	3301      	adds	r3, #1
 8003430:	069b      	lsls	r3, r3, #26
 8003432:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003436:	e015      	b.n	8003464 <HAL_ADC_ConfigChannel+0x414>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800343e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003440:	fa93 f3a3 	rbit	r3, r3
 8003444:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003448:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800344a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800344c:	2b00      	cmp	r3, #0
 800344e:	d101      	bne.n	8003454 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003450:	2320      	movs	r3, #32
 8003452:	e003      	b.n	800345c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003454:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003456:	fab3 f383 	clz	r3, r3
 800345a:	b2db      	uxtb	r3, r3
 800345c:	3301      	adds	r3, #1
 800345e:	069b      	lsls	r3, r3, #26
 8003460:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800346c:	2b00      	cmp	r3, #0
 800346e:	d109      	bne.n	8003484 <HAL_ADC_ConfigChannel+0x434>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	0e9b      	lsrs	r3, r3, #26
 8003476:	3301      	adds	r3, #1
 8003478:	f003 031f 	and.w	r3, r3, #31
 800347c:	2101      	movs	r1, #1
 800347e:	fa01 f303 	lsl.w	r3, r1, r3
 8003482:	e017      	b.n	80034b4 <HAL_ADC_ConfigChannel+0x464>
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	fa93 f3a3 	rbit	r3, r3
 8003490:	61bb      	str	r3, [r7, #24]
  return result;
 8003492:	69bb      	ldr	r3, [r7, #24]
 8003494:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003496:	6a3b      	ldr	r3, [r7, #32]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d101      	bne.n	80034a0 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 800349c:	2320      	movs	r3, #32
 800349e:	e003      	b.n	80034a8 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80034a0:	6a3b      	ldr	r3, [r7, #32]
 80034a2:	fab3 f383 	clz	r3, r3
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	3301      	adds	r3, #1
 80034aa:	f003 031f 	and.w	r3, r3, #31
 80034ae:	2101      	movs	r1, #1
 80034b0:	fa01 f303 	lsl.w	r3, r1, r3
 80034b4:	ea42 0103 	orr.w	r1, r2, r3
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d10d      	bne.n	80034e0 <HAL_ADC_ConfigChannel+0x490>
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	0e9b      	lsrs	r3, r3, #26
 80034ca:	3301      	adds	r3, #1
 80034cc:	f003 021f 	and.w	r2, r3, #31
 80034d0:	4613      	mov	r3, r2
 80034d2:	005b      	lsls	r3, r3, #1
 80034d4:	4413      	add	r3, r2
 80034d6:	3b1e      	subs	r3, #30
 80034d8:	051b      	lsls	r3, r3, #20
 80034da:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80034de:	e01b      	b.n	8003518 <HAL_ADC_ConfigChannel+0x4c8>
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	fa93 f3a3 	rbit	r3, r3
 80034ec:	60fb      	str	r3, [r7, #12]
  return result;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80034f8:	2320      	movs	r3, #32
 80034fa:	e003      	b.n	8003504 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	fab3 f383 	clz	r3, r3
 8003502:	b2db      	uxtb	r3, r3
 8003504:	3301      	adds	r3, #1
 8003506:	f003 021f 	and.w	r2, r3, #31
 800350a:	4613      	mov	r3, r2
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	4413      	add	r3, r2
 8003510:	3b1e      	subs	r3, #30
 8003512:	051b      	lsls	r3, r3, #20
 8003514:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003518:	430b      	orrs	r3, r1
 800351a:	683a      	ldr	r2, [r7, #0]
 800351c:	6892      	ldr	r2, [r2, #8]
 800351e:	4619      	mov	r1, r3
 8003520:	f7ff fb1c 	bl	8002b5c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	f280 80cf 	bge.w	80036cc <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a06      	ldr	r2, [pc, #24]	@ (800354c <HAL_ADC_ConfigChannel+0x4fc>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d004      	beq.n	8003542 <HAL_ADC_ConfigChannel+0x4f2>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a04      	ldr	r2, [pc, #16]	@ (8003550 <HAL_ADC_ConfigChannel+0x500>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d10a      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x508>
 8003542:	4b04      	ldr	r3, [pc, #16]	@ (8003554 <HAL_ADC_ConfigChannel+0x504>)
 8003544:	e009      	b.n	800355a <HAL_ADC_ConfigChannel+0x50a>
 8003546:	bf00      	nop
 8003548:	47ff0000 	.word	0x47ff0000
 800354c:	40022000 	.word	0x40022000
 8003550:	40022100 	.word	0x40022100
 8003554:	40022300 	.word	0x40022300
 8003558:	4b61      	ldr	r3, [pc, #388]	@ (80036e0 <HAL_ADC_ConfigChannel+0x690>)
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff fa70 	bl	8002a40 <LL_ADC_GetCommonPathInternalCh>
 8003560:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a5f      	ldr	r2, [pc, #380]	@ (80036e4 <HAL_ADC_ConfigChannel+0x694>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d004      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x526>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a5d      	ldr	r2, [pc, #372]	@ (80036e8 <HAL_ADC_ConfigChannel+0x698>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d10e      	bne.n	8003594 <HAL_ADC_ConfigChannel+0x544>
 8003576:	485b      	ldr	r0, [pc, #364]	@ (80036e4 <HAL_ADC_ConfigChannel+0x694>)
 8003578:	f7ff fb8e 	bl	8002c98 <LL_ADC_IsEnabled>
 800357c:	4604      	mov	r4, r0
 800357e:	485a      	ldr	r0, [pc, #360]	@ (80036e8 <HAL_ADC_ConfigChannel+0x698>)
 8003580:	f7ff fb8a 	bl	8002c98 <LL_ADC_IsEnabled>
 8003584:	4603      	mov	r3, r0
 8003586:	4323      	orrs	r3, r4
 8003588:	2b00      	cmp	r3, #0
 800358a:	bf0c      	ite	eq
 800358c:	2301      	moveq	r3, #1
 800358e:	2300      	movne	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	e008      	b.n	80035a6 <HAL_ADC_ConfigChannel+0x556>
 8003594:	4855      	ldr	r0, [pc, #340]	@ (80036ec <HAL_ADC_ConfigChannel+0x69c>)
 8003596:	f7ff fb7f 	bl	8002c98 <LL_ADC_IsEnabled>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	bf0c      	ite	eq
 80035a0:	2301      	moveq	r3, #1
 80035a2:	2300      	movne	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d07d      	beq.n	80036a6 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a50      	ldr	r2, [pc, #320]	@ (80036f0 <HAL_ADC_ConfigChannel+0x6a0>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d130      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x5c6>
 80035b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d12b      	bne.n	8003616 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a4a      	ldr	r2, [pc, #296]	@ (80036ec <HAL_ADC_ConfigChannel+0x69c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	f040 8081 	bne.w	80036cc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a45      	ldr	r2, [pc, #276]	@ (80036e4 <HAL_ADC_ConfigChannel+0x694>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d004      	beq.n	80035de <HAL_ADC_ConfigChannel+0x58e>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a43      	ldr	r2, [pc, #268]	@ (80036e8 <HAL_ADC_ConfigChannel+0x698>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d101      	bne.n	80035e2 <HAL_ADC_ConfigChannel+0x592>
 80035de:	4a45      	ldr	r2, [pc, #276]	@ (80036f4 <HAL_ADC_ConfigChannel+0x6a4>)
 80035e0:	e000      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x594>
 80035e2:	4a3f      	ldr	r2, [pc, #252]	@ (80036e0 <HAL_ADC_ConfigChannel+0x690>)
 80035e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035e6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80035ea:	4619      	mov	r1, r3
 80035ec:	4610      	mov	r0, r2
 80035ee:	f7ff fa14 	bl	8002a1a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035f2:	4b41      	ldr	r3, [pc, #260]	@ (80036f8 <HAL_ADC_ConfigChannel+0x6a8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	099b      	lsrs	r3, r3, #6
 80035f8:	4a40      	ldr	r2, [pc, #256]	@ (80036fc <HAL_ADC_ConfigChannel+0x6ac>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	099b      	lsrs	r3, r3, #6
 8003600:	3301      	adds	r3, #1
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8003606:	e002      	b.n	800360e <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	3b01      	subs	r3, #1
 800360c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d1f9      	bne.n	8003608 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003614:	e05a      	b.n	80036cc <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a39      	ldr	r2, [pc, #228]	@ (8003700 <HAL_ADC_ConfigChannel+0x6b0>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d11e      	bne.n	800365e <HAL_ADC_ConfigChannel+0x60e>
 8003620:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003622:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d119      	bne.n	800365e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a2f      	ldr	r2, [pc, #188]	@ (80036ec <HAL_ADC_ConfigChannel+0x69c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d14b      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a2a      	ldr	r2, [pc, #168]	@ (80036e4 <HAL_ADC_ConfigChannel+0x694>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d004      	beq.n	8003648 <HAL_ADC_ConfigChannel+0x5f8>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a29      	ldr	r2, [pc, #164]	@ (80036e8 <HAL_ADC_ConfigChannel+0x698>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d101      	bne.n	800364c <HAL_ADC_ConfigChannel+0x5fc>
 8003648:	4a2a      	ldr	r2, [pc, #168]	@ (80036f4 <HAL_ADC_ConfigChannel+0x6a4>)
 800364a:	e000      	b.n	800364e <HAL_ADC_ConfigChannel+0x5fe>
 800364c:	4a24      	ldr	r2, [pc, #144]	@ (80036e0 <HAL_ADC_ConfigChannel+0x690>)
 800364e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003650:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003654:	4619      	mov	r1, r3
 8003656:	4610      	mov	r0, r2
 8003658:	f7ff f9df 	bl	8002a1a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800365c:	e036      	b.n	80036cc <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a28      	ldr	r2, [pc, #160]	@ (8003704 <HAL_ADC_ConfigChannel+0x6b4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d131      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x67c>
 8003668:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800366a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d12c      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a1d      	ldr	r2, [pc, #116]	@ (80036ec <HAL_ADC_ConfigChannel+0x69c>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d127      	bne.n	80036cc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a18      	ldr	r2, [pc, #96]	@ (80036e4 <HAL_ADC_ConfigChannel+0x694>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d004      	beq.n	8003690 <HAL_ADC_ConfigChannel+0x640>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4a17      	ldr	r2, [pc, #92]	@ (80036e8 <HAL_ADC_ConfigChannel+0x698>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d101      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x644>
 8003690:	4a18      	ldr	r2, [pc, #96]	@ (80036f4 <HAL_ADC_ConfigChannel+0x6a4>)
 8003692:	e000      	b.n	8003696 <HAL_ADC_ConfigChannel+0x646>
 8003694:	4a12      	ldr	r2, [pc, #72]	@ (80036e0 <HAL_ADC_ConfigChannel+0x690>)
 8003696:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003698:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800369c:	4619      	mov	r1, r3
 800369e:	4610      	mov	r0, r2
 80036a0:	f7ff f9bb 	bl	8002a1a <LL_ADC_SetCommonPathInternalCh>
 80036a4:	e012      	b.n	80036cc <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036aa:	f043 0220 	orr.w	r2, r3, #32
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 80036b8:	e008      	b.n	80036cc <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036be:	f043 0220 	orr.w	r2, r3, #32
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80036d4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3784      	adds	r7, #132	@ 0x84
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd90      	pop	{r4, r7, pc}
 80036e0:	58026300 	.word	0x58026300
 80036e4:	40022000 	.word	0x40022000
 80036e8:	40022100 	.word	0x40022100
 80036ec:	58026000 	.word	0x58026000
 80036f0:	cb840000 	.word	0xcb840000
 80036f4:	40022300 	.word	0x40022300
 80036f8:	24000000 	.word	0x24000000
 80036fc:	053e2d63 	.word	0x053e2d63
 8003700:	c7520000 	.word	0xc7520000
 8003704:	cfb80000 	.word	0xcfb80000

08003708 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a7a      	ldr	r2, [pc, #488]	@ (8003900 <ADC_ConfigureBoostMode+0x1f8>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d004      	beq.n	8003724 <ADC_ConfigureBoostMode+0x1c>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a79      	ldr	r2, [pc, #484]	@ (8003904 <ADC_ConfigureBoostMode+0x1fc>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d109      	bne.n	8003738 <ADC_ConfigureBoostMode+0x30>
 8003724:	4b78      	ldr	r3, [pc, #480]	@ (8003908 <ADC_ConfigureBoostMode+0x200>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800372c:	2b00      	cmp	r3, #0
 800372e:	bf14      	ite	ne
 8003730:	2301      	movne	r3, #1
 8003732:	2300      	moveq	r3, #0
 8003734:	b2db      	uxtb	r3, r3
 8003736:	e008      	b.n	800374a <ADC_ConfigureBoostMode+0x42>
 8003738:	4b74      	ldr	r3, [pc, #464]	@ (800390c <ADC_ConfigureBoostMode+0x204>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003740:	2b00      	cmp	r3, #0
 8003742:	bf14      	ite	ne
 8003744:	2301      	movne	r3, #1
 8003746:	2300      	moveq	r3, #0
 8003748:	b2db      	uxtb	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d01c      	beq.n	8003788 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800374e:	f005 f913 	bl	8008978 <HAL_RCC_GetHCLKFreq>
 8003752:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800375c:	d010      	beq.n	8003780 <ADC_ConfigureBoostMode+0x78>
 800375e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003762:	d873      	bhi.n	800384c <ADC_ConfigureBoostMode+0x144>
 8003764:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003768:	d002      	beq.n	8003770 <ADC_ConfigureBoostMode+0x68>
 800376a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800376e:	d16d      	bne.n	800384c <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	0c1b      	lsrs	r3, r3, #16
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	fbb2 f3f3 	udiv	r3, r2, r3
 800377c:	60fb      	str	r3, [r7, #12]
        break;
 800377e:	e068      	b.n	8003852 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	089b      	lsrs	r3, r3, #2
 8003784:	60fb      	str	r3, [r7, #12]
        break;
 8003786:	e064      	b.n	8003852 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003788:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 800378c:	f04f 0100 	mov.w	r1, #0
 8003790:	f006 fb58 	bl	8009e44 <HAL_RCCEx_GetPeriphCLKFreq>
 8003794:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800379e:	d051      	beq.n	8003844 <ADC_ConfigureBoostMode+0x13c>
 80037a0:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 80037a4:	d854      	bhi.n	8003850 <ADC_ConfigureBoostMode+0x148>
 80037a6:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80037aa:	d047      	beq.n	800383c <ADC_ConfigureBoostMode+0x134>
 80037ac:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 80037b0:	d84e      	bhi.n	8003850 <ADC_ConfigureBoostMode+0x148>
 80037b2:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80037b6:	d03d      	beq.n	8003834 <ADC_ConfigureBoostMode+0x12c>
 80037b8:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80037bc:	d848      	bhi.n	8003850 <ADC_ConfigureBoostMode+0x148>
 80037be:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037c2:	d033      	beq.n	800382c <ADC_ConfigureBoostMode+0x124>
 80037c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037c8:	d842      	bhi.n	8003850 <ADC_ConfigureBoostMode+0x148>
 80037ca:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80037ce:	d029      	beq.n	8003824 <ADC_ConfigureBoostMode+0x11c>
 80037d0:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80037d4:	d83c      	bhi.n	8003850 <ADC_ConfigureBoostMode+0x148>
 80037d6:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80037da:	d01a      	beq.n	8003812 <ADC_ConfigureBoostMode+0x10a>
 80037dc:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80037e0:	d836      	bhi.n	8003850 <ADC_ConfigureBoostMode+0x148>
 80037e2:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80037e6:	d014      	beq.n	8003812 <ADC_ConfigureBoostMode+0x10a>
 80037e8:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80037ec:	d830      	bhi.n	8003850 <ADC_ConfigureBoostMode+0x148>
 80037ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037f2:	d00e      	beq.n	8003812 <ADC_ConfigureBoostMode+0x10a>
 80037f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037f8:	d82a      	bhi.n	8003850 <ADC_ConfigureBoostMode+0x148>
 80037fa:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80037fe:	d008      	beq.n	8003812 <ADC_ConfigureBoostMode+0x10a>
 8003800:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003804:	d824      	bhi.n	8003850 <ADC_ConfigureBoostMode+0x148>
 8003806:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800380a:	d002      	beq.n	8003812 <ADC_ConfigureBoostMode+0x10a>
 800380c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003810:	d11e      	bne.n	8003850 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	0c9b      	lsrs	r3, r3, #18
 8003818:	005b      	lsls	r3, r3, #1
 800381a:	68fa      	ldr	r2, [r7, #12]
 800381c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003820:	60fb      	str	r3, [r7, #12]
        break;
 8003822:	e016      	b.n	8003852 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	091b      	lsrs	r3, r3, #4
 8003828:	60fb      	str	r3, [r7, #12]
        break;
 800382a:	e012      	b.n	8003852 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	095b      	lsrs	r3, r3, #5
 8003830:	60fb      	str	r3, [r7, #12]
        break;
 8003832:	e00e      	b.n	8003852 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	099b      	lsrs	r3, r3, #6
 8003838:	60fb      	str	r3, [r7, #12]
        break;
 800383a:	e00a      	b.n	8003852 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	09db      	lsrs	r3, r3, #7
 8003840:	60fb      	str	r3, [r7, #12]
        break;
 8003842:	e006      	b.n	8003852 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	0a1b      	lsrs	r3, r3, #8
 8003848:	60fb      	str	r3, [r7, #12]
        break;
 800384a:	e002      	b.n	8003852 <ADC_ConfigureBoostMode+0x14a>
        break;
 800384c:	bf00      	nop
 800384e:	e000      	b.n	8003852 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003850:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003852:	f7ff f8c3 	bl	80029dc <HAL_GetREVID>
 8003856:	4603      	mov	r3, r0
 8003858:	f241 0203 	movw	r2, #4099	@ 0x1003
 800385c:	4293      	cmp	r3, r2
 800385e:	d815      	bhi.n	800388c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	4a2b      	ldr	r2, [pc, #172]	@ (8003910 <ADC_ConfigureBoostMode+0x208>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d908      	bls.n	800387a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003876:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003878:	e03e      	b.n	80038f8 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	689a      	ldr	r2, [r3, #8]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003888:	609a      	str	r2, [r3, #8]
}
 800388a:	e035      	b.n	80038f8 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	085b      	lsrs	r3, r3, #1
 8003890:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4a1f      	ldr	r2, [pc, #124]	@ (8003914 <ADC_ConfigureBoostMode+0x20c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d808      	bhi.n	80038ac <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80038a8:	609a      	str	r2, [r3, #8]
}
 80038aa:	e025      	b.n	80038f8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003918 <ADC_ConfigureBoostMode+0x210>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d80a      	bhi.n	80038ca <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038c6:	609a      	str	r2, [r3, #8]
}
 80038c8:	e016      	b.n	80038f8 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	4a13      	ldr	r2, [pc, #76]	@ (800391c <ADC_ConfigureBoostMode+0x214>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d80a      	bhi.n	80038e8 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038e4:	609a      	str	r2, [r3, #8]
}
 80038e6:	e007      	b.n	80038f8 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80038f6:	609a      	str	r2, [r3, #8]
}
 80038f8:	bf00      	nop
 80038fa:	3710      	adds	r7, #16
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40022000 	.word	0x40022000
 8003904:	40022100 	.word	0x40022100
 8003908:	40022300 	.word	0x40022300
 800390c:	58026300 	.word	0x58026300
 8003910:	01312d00 	.word	0x01312d00
 8003914:	005f5e10 	.word	0x005f5e10
 8003918:	00bebc20 	.word	0x00bebc20
 800391c:	017d7840 	.word	0x017d7840

08003920 <LL_ADC_IsEnabled>:
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 0301 	and.w	r3, r3, #1
 8003930:	2b01      	cmp	r3, #1
 8003932:	d101      	bne.n	8003938 <LL_ADC_IsEnabled+0x18>
 8003934:	2301      	movs	r3, #1
 8003936:	e000      	b.n	800393a <LL_ADC_IsEnabled+0x1a>
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	370c      	adds	r7, #12
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <LL_ADC_REG_IsConversionOngoing>:
{
 8003946:	b480      	push	{r7}
 8003948:	b083      	sub	sp, #12
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	689b      	ldr	r3, [r3, #8]
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	2b04      	cmp	r3, #4
 8003958:	d101      	bne.n	800395e <LL_ADC_REG_IsConversionOngoing+0x18>
 800395a:	2301      	movs	r3, #1
 800395c:	e000      	b.n	8003960 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800396c:	b590      	push	{r4, r7, lr}
 800396e:	b09f      	sub	sp, #124	@ 0x7c
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003976:	2300      	movs	r3, #0
 8003978:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003982:	2b01      	cmp	r3, #1
 8003984:	d101      	bne.n	800398a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003986:	2302      	movs	r3, #2
 8003988:	e0be      	b.n	8003b08 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2201      	movs	r2, #1
 800398e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003992:	2300      	movs	r3, #0
 8003994:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003996:	2300      	movs	r3, #0
 8003998:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a5c      	ldr	r2, [pc, #368]	@ (8003b10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d102      	bne.n	80039aa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80039a4:	4b5b      	ldr	r3, [pc, #364]	@ (8003b14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80039a6:	60bb      	str	r3, [r7, #8]
 80039a8:	e001      	b.n	80039ae <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80039aa:	2300      	movs	r3, #0
 80039ac:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10b      	bne.n	80039cc <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039b8:	f043 0220 	orr.w	r2, r3, #32
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e09d      	b.n	8003b08 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff ffb9 	bl	8003946 <LL_ADC_REG_IsConversionOngoing>
 80039d4:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff ffb3 	bl	8003946 <LL_ADC_REG_IsConversionOngoing>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d17f      	bne.n	8003ae6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80039e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d17c      	bne.n	8003ae6 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a47      	ldr	r2, [pc, #284]	@ (8003b10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d004      	beq.n	8003a00 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a46      	ldr	r2, [pc, #280]	@ (8003b14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d101      	bne.n	8003a04 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003a00:	4b45      	ldr	r3, [pc, #276]	@ (8003b18 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003a02:	e000      	b.n	8003a06 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003a04:	4b45      	ldr	r3, [pc, #276]	@ (8003b1c <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003a06:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d039      	beq.n	8003a84 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003a10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a20:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a3a      	ldr	r2, [pc, #232]	@ (8003b10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d004      	beq.n	8003a36 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a38      	ldr	r2, [pc, #224]	@ (8003b14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d10e      	bne.n	8003a54 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003a36:	4836      	ldr	r0, [pc, #216]	@ (8003b10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003a38:	f7ff ff72 	bl	8003920 <LL_ADC_IsEnabled>
 8003a3c:	4604      	mov	r4, r0
 8003a3e:	4835      	ldr	r0, [pc, #212]	@ (8003b14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003a40:	f7ff ff6e 	bl	8003920 <LL_ADC_IsEnabled>
 8003a44:	4603      	mov	r3, r0
 8003a46:	4323      	orrs	r3, r4
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	bf0c      	ite	eq
 8003a4c:	2301      	moveq	r3, #1
 8003a4e:	2300      	movne	r3, #0
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	e008      	b.n	8003a66 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003a54:	4832      	ldr	r0, [pc, #200]	@ (8003b20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003a56:	f7ff ff63 	bl	8003920 <LL_ADC_IsEnabled>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	bf0c      	ite	eq
 8003a60:	2301      	moveq	r3, #1
 8003a62:	2300      	movne	r3, #0
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d047      	beq.n	8003afa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003a6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a6c:	689a      	ldr	r2, [r3, #8]
 8003a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	6811      	ldr	r1, [r2, #0]
 8003a76:	683a      	ldr	r2, [r7, #0]
 8003a78:	6892      	ldr	r2, [r2, #8]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	431a      	orrs	r2, r3
 8003a7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a80:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a82:	e03a      	b.n	8003afa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003a84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a8e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a1e      	ldr	r2, [pc, #120]	@ (8003b10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d004      	beq.n	8003aa4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1d      	ldr	r2, [pc, #116]	@ (8003b14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d10e      	bne.n	8003ac2 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003aa4:	481a      	ldr	r0, [pc, #104]	@ (8003b10 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003aa6:	f7ff ff3b 	bl	8003920 <LL_ADC_IsEnabled>
 8003aaa:	4604      	mov	r4, r0
 8003aac:	4819      	ldr	r0, [pc, #100]	@ (8003b14 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003aae:	f7ff ff37 	bl	8003920 <LL_ADC_IsEnabled>
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	4323      	orrs	r3, r4
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	bf0c      	ite	eq
 8003aba:	2301      	moveq	r3, #1
 8003abc:	2300      	movne	r3, #0
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	e008      	b.n	8003ad4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003ac2:	4817      	ldr	r0, [pc, #92]	@ (8003b20 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003ac4:	f7ff ff2c 	bl	8003920 <LL_ADC_IsEnabled>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	bf0c      	ite	eq
 8003ace:	2301      	moveq	r3, #1
 8003ad0:	2300      	movne	r3, #0
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d010      	beq.n	8003afa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ad8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ada:	689a      	ldr	r2, [r3, #8]
 8003adc:	4b11      	ldr	r3, [pc, #68]	@ (8003b24 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003ade:	4013      	ands	r3, r2
 8003ae0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ae2:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ae4:	e009      	b.n	8003afa <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aea:	f043 0220 	orr.w	r2, r3, #32
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003af2:	2301      	movs	r3, #1
 8003af4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003af8:	e000      	b.n	8003afc <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003afa:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003b04:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	377c      	adds	r7, #124	@ 0x7c
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd90      	pop	{r4, r7, pc}
 8003b10:	40022000 	.word	0x40022000
 8003b14:	40022100 	.word	0x40022100
 8003b18:	40022300 	.word	0x40022300
 8003b1c:	58026300 	.word	0x58026300
 8003b20:	58026000 	.word	0x58026000
 8003b24:	fffff0e0 	.word	0xfffff0e0

08003b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b38:	4b0b      	ldr	r3, [pc, #44]	@ (8003b68 <__NVIC_SetPriorityGrouping+0x40>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b44:	4013      	ands	r3, r2
 8003b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b4c:	68bb      	ldr	r3, [r7, #8]
 8003b4e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003b50:	4b06      	ldr	r3, [pc, #24]	@ (8003b6c <__NVIC_SetPriorityGrouping+0x44>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b56:	4a04      	ldr	r2, [pc, #16]	@ (8003b68 <__NVIC_SetPriorityGrouping+0x40>)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	60d3      	str	r3, [r2, #12]
}
 8003b5c:	bf00      	nop
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	e000ed00 	.word	0xe000ed00
 8003b6c:	05fa0000 	.word	0x05fa0000

08003b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b70:	b480      	push	{r7}
 8003b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b74:	4b04      	ldr	r3, [pc, #16]	@ (8003b88 <__NVIC_GetPriorityGrouping+0x18>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	0a1b      	lsrs	r3, r3, #8
 8003b7a:	f003 0307 	and.w	r3, r3, #7
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	e000ed00 	.word	0xe000ed00

08003b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	4603      	mov	r3, r0
 8003b94:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	db0b      	blt.n	8003bb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b9e:	88fb      	ldrh	r3, [r7, #6]
 8003ba0:	f003 021f 	and.w	r2, r3, #31
 8003ba4:	4907      	ldr	r1, [pc, #28]	@ (8003bc4 <__NVIC_EnableIRQ+0x38>)
 8003ba6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	2001      	movs	r0, #1
 8003bae:	fa00 f202 	lsl.w	r2, r0, r2
 8003bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	e000e100 	.word	0xe000e100

08003bc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	4603      	mov	r3, r0
 8003bd0:	6039      	str	r1, [r7, #0]
 8003bd2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003bd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	db0a      	blt.n	8003bf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	b2da      	uxtb	r2, r3
 8003be0:	490c      	ldr	r1, [pc, #48]	@ (8003c14 <__NVIC_SetPriority+0x4c>)
 8003be2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003be6:	0112      	lsls	r2, r2, #4
 8003be8:	b2d2      	uxtb	r2, r2
 8003bea:	440b      	add	r3, r1
 8003bec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bf0:	e00a      	b.n	8003c08 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	b2da      	uxtb	r2, r3
 8003bf6:	4908      	ldr	r1, [pc, #32]	@ (8003c18 <__NVIC_SetPriority+0x50>)
 8003bf8:	88fb      	ldrh	r3, [r7, #6]
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	3b04      	subs	r3, #4
 8003c00:	0112      	lsls	r2, r2, #4
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	440b      	add	r3, r1
 8003c06:	761a      	strb	r2, [r3, #24]
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr
 8003c14:	e000e100 	.word	0xe000e100
 8003c18:	e000ed00 	.word	0xe000ed00

08003c1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b089      	sub	sp, #36	@ 0x24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	60f8      	str	r0, [r7, #12]
 8003c24:	60b9      	str	r1, [r7, #8]
 8003c26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f003 0307 	and.w	r3, r3, #7
 8003c2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f1c3 0307 	rsb	r3, r3, #7
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	bf28      	it	cs
 8003c3a:	2304      	movcs	r3, #4
 8003c3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	3304      	adds	r3, #4
 8003c42:	2b06      	cmp	r3, #6
 8003c44:	d902      	bls.n	8003c4c <NVIC_EncodePriority+0x30>
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	3b03      	subs	r3, #3
 8003c4a:	e000      	b.n	8003c4e <NVIC_EncodePriority+0x32>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c50:	f04f 32ff 	mov.w	r2, #4294967295
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5a:	43da      	mvns	r2, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	401a      	ands	r2, r3
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c64:	f04f 31ff 	mov.w	r1, #4294967295
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6e:	43d9      	mvns	r1, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c74:	4313      	orrs	r3, r2
         );
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3724      	adds	r7, #36	@ 0x24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
	...

08003c84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	3b01      	subs	r3, #1
 8003c90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003c94:	d301      	bcc.n	8003c9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c96:	2301      	movs	r3, #1
 8003c98:	e00f      	b.n	8003cba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c9a:	4a0a      	ldr	r2, [pc, #40]	@ (8003cc4 <SysTick_Config+0x40>)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ca2:	210f      	movs	r1, #15
 8003ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca8:	f7ff ff8e 	bl	8003bc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cac:	4b05      	ldr	r3, [pc, #20]	@ (8003cc4 <SysTick_Config+0x40>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cb2:	4b04      	ldr	r3, [pc, #16]	@ (8003cc4 <SysTick_Config+0x40>)
 8003cb4:	2207      	movs	r2, #7
 8003cb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	e000e010 	.word	0xe000e010

08003cc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cd0:	6878      	ldr	r0, [r7, #4]
 8003cd2:	f7ff ff29 	bl	8003b28 <__NVIC_SetPriorityGrouping>
}
 8003cd6:	bf00      	nop
 8003cd8:	3708      	adds	r7, #8
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b086      	sub	sp, #24
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	60b9      	str	r1, [r7, #8]
 8003ce8:	607a      	str	r2, [r7, #4]
 8003cea:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003cec:	f7ff ff40 	bl	8003b70 <__NVIC_GetPriorityGrouping>
 8003cf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	6978      	ldr	r0, [r7, #20]
 8003cf8:	f7ff ff90 	bl	8003c1c <NVIC_EncodePriority>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003d02:	4611      	mov	r1, r2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff ff5f 	bl	8003bc8 <__NVIC_SetPriority>
}
 8003d0a:	bf00      	nop
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b082      	sub	sp, #8
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	4603      	mov	r3, r0
 8003d1a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d1c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff ff33 	bl	8003b8c <__NVIC_EnableIRQ>
}
 8003d26:	bf00      	nop
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7ff ffa4 	bl	8003c84 <SysTick_Config>
 8003d3c:	4603      	mov	r3, r0
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
	...

08003d48 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8003d4c:	4b07      	ldr	r3, [pc, #28]	@ (8003d6c <HAL_GetCurrentCPUID+0x24>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	091b      	lsrs	r3, r3, #4
 8003d52:	f003 030f 	and.w	r3, r3, #15
 8003d56:	2b07      	cmp	r3, #7
 8003d58:	d101      	bne.n	8003d5e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e000      	b.n	8003d60 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8003d5e:	2301      	movs	r3, #1
  }
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	e000ed00 	.word	0xe000ed00

08003d70 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003d78:	f7fe fe00 	bl	800297c <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d101      	bne.n	8003d88 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e316      	b.n	80043b6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a66      	ldr	r2, [pc, #408]	@ (8003f28 <HAL_DMA_Init+0x1b8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d04a      	beq.n	8003e28 <HAL_DMA_Init+0xb8>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a65      	ldr	r2, [pc, #404]	@ (8003f2c <HAL_DMA_Init+0x1bc>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d045      	beq.n	8003e28 <HAL_DMA_Init+0xb8>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a63      	ldr	r2, [pc, #396]	@ (8003f30 <HAL_DMA_Init+0x1c0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d040      	beq.n	8003e28 <HAL_DMA_Init+0xb8>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a62      	ldr	r2, [pc, #392]	@ (8003f34 <HAL_DMA_Init+0x1c4>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d03b      	beq.n	8003e28 <HAL_DMA_Init+0xb8>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a60      	ldr	r2, [pc, #384]	@ (8003f38 <HAL_DMA_Init+0x1c8>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d036      	beq.n	8003e28 <HAL_DMA_Init+0xb8>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a5f      	ldr	r2, [pc, #380]	@ (8003f3c <HAL_DMA_Init+0x1cc>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d031      	beq.n	8003e28 <HAL_DMA_Init+0xb8>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a5d      	ldr	r2, [pc, #372]	@ (8003f40 <HAL_DMA_Init+0x1d0>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d02c      	beq.n	8003e28 <HAL_DMA_Init+0xb8>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a5c      	ldr	r2, [pc, #368]	@ (8003f44 <HAL_DMA_Init+0x1d4>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d027      	beq.n	8003e28 <HAL_DMA_Init+0xb8>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a5a      	ldr	r2, [pc, #360]	@ (8003f48 <HAL_DMA_Init+0x1d8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d022      	beq.n	8003e28 <HAL_DMA_Init+0xb8>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a59      	ldr	r2, [pc, #356]	@ (8003f4c <HAL_DMA_Init+0x1dc>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d01d      	beq.n	8003e28 <HAL_DMA_Init+0xb8>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a57      	ldr	r2, [pc, #348]	@ (8003f50 <HAL_DMA_Init+0x1e0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d018      	beq.n	8003e28 <HAL_DMA_Init+0xb8>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a56      	ldr	r2, [pc, #344]	@ (8003f54 <HAL_DMA_Init+0x1e4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d013      	beq.n	8003e28 <HAL_DMA_Init+0xb8>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a54      	ldr	r2, [pc, #336]	@ (8003f58 <HAL_DMA_Init+0x1e8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d00e      	beq.n	8003e28 <HAL_DMA_Init+0xb8>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a53      	ldr	r2, [pc, #332]	@ (8003f5c <HAL_DMA_Init+0x1ec>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d009      	beq.n	8003e28 <HAL_DMA_Init+0xb8>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a51      	ldr	r2, [pc, #324]	@ (8003f60 <HAL_DMA_Init+0x1f0>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d004      	beq.n	8003e28 <HAL_DMA_Init+0xb8>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4a50      	ldr	r2, [pc, #320]	@ (8003f64 <HAL_DMA_Init+0x1f4>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d101      	bne.n	8003e2c <HAL_DMA_Init+0xbc>
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e000      	b.n	8003e2e <HAL_DMA_Init+0xbe>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 813b 	beq.w	80040aa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a37      	ldr	r2, [pc, #220]	@ (8003f28 <HAL_DMA_Init+0x1b8>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d04a      	beq.n	8003ee4 <HAL_DMA_Init+0x174>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a36      	ldr	r2, [pc, #216]	@ (8003f2c <HAL_DMA_Init+0x1bc>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d045      	beq.n	8003ee4 <HAL_DMA_Init+0x174>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a34      	ldr	r2, [pc, #208]	@ (8003f30 <HAL_DMA_Init+0x1c0>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d040      	beq.n	8003ee4 <HAL_DMA_Init+0x174>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a33      	ldr	r2, [pc, #204]	@ (8003f34 <HAL_DMA_Init+0x1c4>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d03b      	beq.n	8003ee4 <HAL_DMA_Init+0x174>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a31      	ldr	r2, [pc, #196]	@ (8003f38 <HAL_DMA_Init+0x1c8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d036      	beq.n	8003ee4 <HAL_DMA_Init+0x174>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a30      	ldr	r2, [pc, #192]	@ (8003f3c <HAL_DMA_Init+0x1cc>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d031      	beq.n	8003ee4 <HAL_DMA_Init+0x174>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a2e      	ldr	r2, [pc, #184]	@ (8003f40 <HAL_DMA_Init+0x1d0>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d02c      	beq.n	8003ee4 <HAL_DMA_Init+0x174>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a2d      	ldr	r2, [pc, #180]	@ (8003f44 <HAL_DMA_Init+0x1d4>)
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d027      	beq.n	8003ee4 <HAL_DMA_Init+0x174>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a2b      	ldr	r2, [pc, #172]	@ (8003f48 <HAL_DMA_Init+0x1d8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d022      	beq.n	8003ee4 <HAL_DMA_Init+0x174>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a2a      	ldr	r2, [pc, #168]	@ (8003f4c <HAL_DMA_Init+0x1dc>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d01d      	beq.n	8003ee4 <HAL_DMA_Init+0x174>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a28      	ldr	r2, [pc, #160]	@ (8003f50 <HAL_DMA_Init+0x1e0>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d018      	beq.n	8003ee4 <HAL_DMA_Init+0x174>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a27      	ldr	r2, [pc, #156]	@ (8003f54 <HAL_DMA_Init+0x1e4>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d013      	beq.n	8003ee4 <HAL_DMA_Init+0x174>
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a25      	ldr	r2, [pc, #148]	@ (8003f58 <HAL_DMA_Init+0x1e8>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d00e      	beq.n	8003ee4 <HAL_DMA_Init+0x174>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a24      	ldr	r2, [pc, #144]	@ (8003f5c <HAL_DMA_Init+0x1ec>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d009      	beq.n	8003ee4 <HAL_DMA_Init+0x174>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a22      	ldr	r2, [pc, #136]	@ (8003f60 <HAL_DMA_Init+0x1f0>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d004      	beq.n	8003ee4 <HAL_DMA_Init+0x174>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a21      	ldr	r2, [pc, #132]	@ (8003f64 <HAL_DMA_Init+0x1f4>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d108      	bne.n	8003ef6 <HAL_DMA_Init+0x186>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0201 	bic.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]
 8003ef4:	e007      	b.n	8003f06 <HAL_DMA_Init+0x196>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f022 0201 	bic.w	r2, r2, #1
 8003f04:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f06:	e02f      	b.n	8003f68 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f08:	f7fe fd38 	bl	800297c <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b05      	cmp	r3, #5
 8003f14:	d928      	bls.n	8003f68 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2220      	movs	r2, #32
 8003f1a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2203      	movs	r2, #3
 8003f20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e246      	b.n	80043b6 <HAL_DMA_Init+0x646>
 8003f28:	40020010 	.word	0x40020010
 8003f2c:	40020028 	.word	0x40020028
 8003f30:	40020040 	.word	0x40020040
 8003f34:	40020058 	.word	0x40020058
 8003f38:	40020070 	.word	0x40020070
 8003f3c:	40020088 	.word	0x40020088
 8003f40:	400200a0 	.word	0x400200a0
 8003f44:	400200b8 	.word	0x400200b8
 8003f48:	40020410 	.word	0x40020410
 8003f4c:	40020428 	.word	0x40020428
 8003f50:	40020440 	.word	0x40020440
 8003f54:	40020458 	.word	0x40020458
 8003f58:	40020470 	.word	0x40020470
 8003f5c:	40020488 	.word	0x40020488
 8003f60:	400204a0 	.word	0x400204a0
 8003f64:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1c8      	bne.n	8003f08 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003f7e:	697a      	ldr	r2, [r7, #20]
 8003f80:	4b83      	ldr	r3, [pc, #524]	@ (8004190 <HAL_DMA_Init+0x420>)
 8003f82:	4013      	ands	r3, r2
 8003f84:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003f8e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	691b      	ldr	r3, [r3, #16]
 8003f94:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f9a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fa6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6a1b      	ldr	r3, [r3, #32]
 8003fac:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d107      	bne.n	8003fcc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	697a      	ldr	r2, [r7, #20]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8003fcc:	4b71      	ldr	r3, [pc, #452]	@ (8004194 <HAL_DMA_Init+0x424>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	4b71      	ldr	r3, [pc, #452]	@ (8004198 <HAL_DMA_Init+0x428>)
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003fd8:	d328      	bcc.n	800402c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	2b28      	cmp	r3, #40	@ 0x28
 8003fe0:	d903      	bls.n	8003fea <HAL_DMA_Init+0x27a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2b2e      	cmp	r3, #46	@ 0x2e
 8003fe8:	d917      	bls.n	800401a <HAL_DMA_Init+0x2aa>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b3e      	cmp	r3, #62	@ 0x3e
 8003ff0:	d903      	bls.n	8003ffa <HAL_DMA_Init+0x28a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	2b42      	cmp	r3, #66	@ 0x42
 8003ff8:	d90f      	bls.n	800401a <HAL_DMA_Init+0x2aa>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	2b46      	cmp	r3, #70	@ 0x46
 8004000:	d903      	bls.n	800400a <HAL_DMA_Init+0x29a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b48      	cmp	r3, #72	@ 0x48
 8004008:	d907      	bls.n	800401a <HAL_DMA_Init+0x2aa>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	2b4e      	cmp	r3, #78	@ 0x4e
 8004010:	d905      	bls.n	800401e <HAL_DMA_Init+0x2ae>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	2b52      	cmp	r3, #82	@ 0x52
 8004018:	d801      	bhi.n	800401e <HAL_DMA_Init+0x2ae>
 800401a:	2301      	movs	r3, #1
 800401c:	e000      	b.n	8004020 <HAL_DMA_Init+0x2b0>
 800401e:	2300      	movs	r3, #0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d003      	beq.n	800402c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800402a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	f023 0307 	bic.w	r3, r3, #7
 8004042:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	4313      	orrs	r3, r2
 800404c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004052:	2b04      	cmp	r3, #4
 8004054:	d117      	bne.n	8004086 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	4313      	orrs	r3, r2
 800405e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004064:	2b00      	cmp	r3, #0
 8004066:	d00e      	beq.n	8004086 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f001 fdcf 	bl	8005c0c <DMA_CheckFifoParam>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d008      	beq.n	8004086 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2240      	movs	r2, #64	@ 0x40
 8004078:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2201      	movs	r2, #1
 800407e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e197      	b.n	80043b6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f001 fd0a 	bl	8005aa8 <DMA_CalcBaseAndBitshift>
 8004094:	4603      	mov	r3, r0
 8004096:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800409c:	f003 031f 	and.w	r3, r3, #31
 80040a0:	223f      	movs	r2, #63	@ 0x3f
 80040a2:	409a      	lsls	r2, r3
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	609a      	str	r2, [r3, #8]
 80040a8:	e0cd      	b.n	8004246 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a3b      	ldr	r2, [pc, #236]	@ (800419c <HAL_DMA_Init+0x42c>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d022      	beq.n	80040fa <HAL_DMA_Init+0x38a>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a39      	ldr	r2, [pc, #228]	@ (80041a0 <HAL_DMA_Init+0x430>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d01d      	beq.n	80040fa <HAL_DMA_Init+0x38a>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a38      	ldr	r2, [pc, #224]	@ (80041a4 <HAL_DMA_Init+0x434>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d018      	beq.n	80040fa <HAL_DMA_Init+0x38a>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a36      	ldr	r2, [pc, #216]	@ (80041a8 <HAL_DMA_Init+0x438>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d013      	beq.n	80040fa <HAL_DMA_Init+0x38a>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a35      	ldr	r2, [pc, #212]	@ (80041ac <HAL_DMA_Init+0x43c>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d00e      	beq.n	80040fa <HAL_DMA_Init+0x38a>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a33      	ldr	r2, [pc, #204]	@ (80041b0 <HAL_DMA_Init+0x440>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d009      	beq.n	80040fa <HAL_DMA_Init+0x38a>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a32      	ldr	r2, [pc, #200]	@ (80041b4 <HAL_DMA_Init+0x444>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d004      	beq.n	80040fa <HAL_DMA_Init+0x38a>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a30      	ldr	r2, [pc, #192]	@ (80041b8 <HAL_DMA_Init+0x448>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d101      	bne.n	80040fe <HAL_DMA_Init+0x38e>
 80040fa:	2301      	movs	r3, #1
 80040fc:	e000      	b.n	8004100 <HAL_DMA_Init+0x390>
 80040fe:	2300      	movs	r3, #0
 8004100:	2b00      	cmp	r3, #0
 8004102:	f000 8097 	beq.w	8004234 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a24      	ldr	r2, [pc, #144]	@ (800419c <HAL_DMA_Init+0x42c>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d021      	beq.n	8004154 <HAL_DMA_Init+0x3e4>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a22      	ldr	r2, [pc, #136]	@ (80041a0 <HAL_DMA_Init+0x430>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d01c      	beq.n	8004154 <HAL_DMA_Init+0x3e4>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a21      	ldr	r2, [pc, #132]	@ (80041a4 <HAL_DMA_Init+0x434>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d017      	beq.n	8004154 <HAL_DMA_Init+0x3e4>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a1f      	ldr	r2, [pc, #124]	@ (80041a8 <HAL_DMA_Init+0x438>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d012      	beq.n	8004154 <HAL_DMA_Init+0x3e4>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a1e      	ldr	r2, [pc, #120]	@ (80041ac <HAL_DMA_Init+0x43c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d00d      	beq.n	8004154 <HAL_DMA_Init+0x3e4>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a1c      	ldr	r2, [pc, #112]	@ (80041b0 <HAL_DMA_Init+0x440>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d008      	beq.n	8004154 <HAL_DMA_Init+0x3e4>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a1b      	ldr	r2, [pc, #108]	@ (80041b4 <HAL_DMA_Init+0x444>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d003      	beq.n	8004154 <HAL_DMA_Init+0x3e4>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a19      	ldr	r2, [pc, #100]	@ (80041b8 <HAL_DMA_Init+0x448>)
 8004152:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2202      	movs	r2, #2
 8004158:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800416c:	697a      	ldr	r2, [r7, #20]
 800416e:	4b13      	ldr	r3, [pc, #76]	@ (80041bc <HAL_DMA_Init+0x44c>)
 8004170:	4013      	ands	r3, r2
 8004172:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	2b40      	cmp	r3, #64	@ 0x40
 800417a:	d021      	beq.n	80041c0 <HAL_DMA_Init+0x450>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	2b80      	cmp	r3, #128	@ 0x80
 8004182:	d102      	bne.n	800418a <HAL_DMA_Init+0x41a>
 8004184:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004188:	e01b      	b.n	80041c2 <HAL_DMA_Init+0x452>
 800418a:	2300      	movs	r3, #0
 800418c:	e019      	b.n	80041c2 <HAL_DMA_Init+0x452>
 800418e:	bf00      	nop
 8004190:	fe10803f 	.word	0xfe10803f
 8004194:	5c001000 	.word	0x5c001000
 8004198:	ffff0000 	.word	0xffff0000
 800419c:	58025408 	.word	0x58025408
 80041a0:	5802541c 	.word	0x5802541c
 80041a4:	58025430 	.word	0x58025430
 80041a8:	58025444 	.word	0x58025444
 80041ac:	58025458 	.word	0x58025458
 80041b0:	5802546c 	.word	0x5802546c
 80041b4:	58025480 	.word	0x58025480
 80041b8:	58025494 	.word	0x58025494
 80041bc:	fffe000f 	.word	0xfffe000f
 80041c0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	68d2      	ldr	r2, [r2, #12]
 80041c6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80041c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	691b      	ldr	r3, [r3, #16]
 80041ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80041d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80041d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	699b      	ldr	r3, [r3, #24]
 80041de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80041e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80041e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80041f0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	461a      	mov	r2, r3
 8004206:	4b6e      	ldr	r3, [pc, #440]	@ (80043c0 <HAL_DMA_Init+0x650>)
 8004208:	4413      	add	r3, r2
 800420a:	4a6e      	ldr	r2, [pc, #440]	@ (80043c4 <HAL_DMA_Init+0x654>)
 800420c:	fba2 2303 	umull	r2, r3, r2, r3
 8004210:	091b      	lsrs	r3, r3, #4
 8004212:	009a      	lsls	r2, r3, #2
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f001 fc45 	bl	8005aa8 <DMA_CalcBaseAndBitshift>
 800421e:	4603      	mov	r3, r0
 8004220:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004226:	f003 031f 	and.w	r3, r3, #31
 800422a:	2201      	movs	r2, #1
 800422c:	409a      	lsls	r2, r3
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	605a      	str	r2, [r3, #4]
 8004232:	e008      	b.n	8004246 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2240      	movs	r2, #64	@ 0x40
 8004238:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2203      	movs	r2, #3
 800423e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e0b7      	b.n	80043b6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a5f      	ldr	r2, [pc, #380]	@ (80043c8 <HAL_DMA_Init+0x658>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d072      	beq.n	8004336 <HAL_DMA_Init+0x5c6>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a5d      	ldr	r2, [pc, #372]	@ (80043cc <HAL_DMA_Init+0x65c>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d06d      	beq.n	8004336 <HAL_DMA_Init+0x5c6>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a5c      	ldr	r2, [pc, #368]	@ (80043d0 <HAL_DMA_Init+0x660>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d068      	beq.n	8004336 <HAL_DMA_Init+0x5c6>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a5a      	ldr	r2, [pc, #360]	@ (80043d4 <HAL_DMA_Init+0x664>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d063      	beq.n	8004336 <HAL_DMA_Init+0x5c6>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a59      	ldr	r2, [pc, #356]	@ (80043d8 <HAL_DMA_Init+0x668>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d05e      	beq.n	8004336 <HAL_DMA_Init+0x5c6>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a57      	ldr	r2, [pc, #348]	@ (80043dc <HAL_DMA_Init+0x66c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d059      	beq.n	8004336 <HAL_DMA_Init+0x5c6>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a56      	ldr	r2, [pc, #344]	@ (80043e0 <HAL_DMA_Init+0x670>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d054      	beq.n	8004336 <HAL_DMA_Init+0x5c6>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a54      	ldr	r2, [pc, #336]	@ (80043e4 <HAL_DMA_Init+0x674>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d04f      	beq.n	8004336 <HAL_DMA_Init+0x5c6>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a53      	ldr	r2, [pc, #332]	@ (80043e8 <HAL_DMA_Init+0x678>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d04a      	beq.n	8004336 <HAL_DMA_Init+0x5c6>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a51      	ldr	r2, [pc, #324]	@ (80043ec <HAL_DMA_Init+0x67c>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d045      	beq.n	8004336 <HAL_DMA_Init+0x5c6>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a50      	ldr	r2, [pc, #320]	@ (80043f0 <HAL_DMA_Init+0x680>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d040      	beq.n	8004336 <HAL_DMA_Init+0x5c6>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a4e      	ldr	r2, [pc, #312]	@ (80043f4 <HAL_DMA_Init+0x684>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d03b      	beq.n	8004336 <HAL_DMA_Init+0x5c6>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a4d      	ldr	r2, [pc, #308]	@ (80043f8 <HAL_DMA_Init+0x688>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d036      	beq.n	8004336 <HAL_DMA_Init+0x5c6>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a4b      	ldr	r2, [pc, #300]	@ (80043fc <HAL_DMA_Init+0x68c>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d031      	beq.n	8004336 <HAL_DMA_Init+0x5c6>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a4a      	ldr	r2, [pc, #296]	@ (8004400 <HAL_DMA_Init+0x690>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d02c      	beq.n	8004336 <HAL_DMA_Init+0x5c6>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a48      	ldr	r2, [pc, #288]	@ (8004404 <HAL_DMA_Init+0x694>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d027      	beq.n	8004336 <HAL_DMA_Init+0x5c6>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a47      	ldr	r2, [pc, #284]	@ (8004408 <HAL_DMA_Init+0x698>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d022      	beq.n	8004336 <HAL_DMA_Init+0x5c6>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a45      	ldr	r2, [pc, #276]	@ (800440c <HAL_DMA_Init+0x69c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d01d      	beq.n	8004336 <HAL_DMA_Init+0x5c6>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a44      	ldr	r2, [pc, #272]	@ (8004410 <HAL_DMA_Init+0x6a0>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d018      	beq.n	8004336 <HAL_DMA_Init+0x5c6>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a42      	ldr	r2, [pc, #264]	@ (8004414 <HAL_DMA_Init+0x6a4>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d013      	beq.n	8004336 <HAL_DMA_Init+0x5c6>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a41      	ldr	r2, [pc, #260]	@ (8004418 <HAL_DMA_Init+0x6a8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d00e      	beq.n	8004336 <HAL_DMA_Init+0x5c6>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a3f      	ldr	r2, [pc, #252]	@ (800441c <HAL_DMA_Init+0x6ac>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d009      	beq.n	8004336 <HAL_DMA_Init+0x5c6>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a3e      	ldr	r2, [pc, #248]	@ (8004420 <HAL_DMA_Init+0x6b0>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d004      	beq.n	8004336 <HAL_DMA_Init+0x5c6>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a3c      	ldr	r2, [pc, #240]	@ (8004424 <HAL_DMA_Init+0x6b4>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d101      	bne.n	800433a <HAL_DMA_Init+0x5ca>
 8004336:	2301      	movs	r3, #1
 8004338:	e000      	b.n	800433c <HAL_DMA_Init+0x5cc>
 800433a:	2300      	movs	r3, #0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d032      	beq.n	80043a6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f001 fcdf 	bl	8005d04 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	2b80      	cmp	r3, #128	@ 0x80
 800434c:	d102      	bne.n	8004354 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004368:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d010      	beq.n	8004394 <HAL_DMA_Init+0x624>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2b08      	cmp	r3, #8
 8004378:	d80c      	bhi.n	8004394 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f001 fd5c 	bl	8005e38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004390:	605a      	str	r2, [r3, #4]
 8004392:	e008      	b.n	80043a6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	a7fdabf8 	.word	0xa7fdabf8
 80043c4:	cccccccd 	.word	0xcccccccd
 80043c8:	40020010 	.word	0x40020010
 80043cc:	40020028 	.word	0x40020028
 80043d0:	40020040 	.word	0x40020040
 80043d4:	40020058 	.word	0x40020058
 80043d8:	40020070 	.word	0x40020070
 80043dc:	40020088 	.word	0x40020088
 80043e0:	400200a0 	.word	0x400200a0
 80043e4:	400200b8 	.word	0x400200b8
 80043e8:	40020410 	.word	0x40020410
 80043ec:	40020428 	.word	0x40020428
 80043f0:	40020440 	.word	0x40020440
 80043f4:	40020458 	.word	0x40020458
 80043f8:	40020470 	.word	0x40020470
 80043fc:	40020488 	.word	0x40020488
 8004400:	400204a0 	.word	0x400204a0
 8004404:	400204b8 	.word	0x400204b8
 8004408:	58025408 	.word	0x58025408
 800440c:	5802541c 	.word	0x5802541c
 8004410:	58025430 	.word	0x58025430
 8004414:	58025444 	.word	0x58025444
 8004418:	58025458 	.word	0x58025458
 800441c:	5802546c 	.word	0x5802546c
 8004420:	58025480 	.word	0x58025480
 8004424:	58025494 	.word	0x58025494

08004428 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b086      	sub	sp, #24
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	607a      	str	r2, [r7, #4]
 8004434:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004436:	2300      	movs	r3, #0
 8004438:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e226      	b.n	8004892 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800444a:	2b01      	cmp	r3, #1
 800444c:	d101      	bne.n	8004452 <HAL_DMA_Start_IT+0x2a>
 800444e:	2302      	movs	r3, #2
 8004450:	e21f      	b.n	8004892 <HAL_DMA_Start_IT+0x46a>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b01      	cmp	r3, #1
 8004464:	f040 820a 	bne.w	800487c <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2202      	movs	r2, #2
 800446c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2200      	movs	r2, #0
 8004474:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a68      	ldr	r2, [pc, #416]	@ (800461c <HAL_DMA_Start_IT+0x1f4>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d04a      	beq.n	8004516 <HAL_DMA_Start_IT+0xee>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a66      	ldr	r2, [pc, #408]	@ (8004620 <HAL_DMA_Start_IT+0x1f8>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d045      	beq.n	8004516 <HAL_DMA_Start_IT+0xee>
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a65      	ldr	r2, [pc, #404]	@ (8004624 <HAL_DMA_Start_IT+0x1fc>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d040      	beq.n	8004516 <HAL_DMA_Start_IT+0xee>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a63      	ldr	r2, [pc, #396]	@ (8004628 <HAL_DMA_Start_IT+0x200>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d03b      	beq.n	8004516 <HAL_DMA_Start_IT+0xee>
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a62      	ldr	r2, [pc, #392]	@ (800462c <HAL_DMA_Start_IT+0x204>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d036      	beq.n	8004516 <HAL_DMA_Start_IT+0xee>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a60      	ldr	r2, [pc, #384]	@ (8004630 <HAL_DMA_Start_IT+0x208>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d031      	beq.n	8004516 <HAL_DMA_Start_IT+0xee>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a5f      	ldr	r2, [pc, #380]	@ (8004634 <HAL_DMA_Start_IT+0x20c>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d02c      	beq.n	8004516 <HAL_DMA_Start_IT+0xee>
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a5d      	ldr	r2, [pc, #372]	@ (8004638 <HAL_DMA_Start_IT+0x210>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d027      	beq.n	8004516 <HAL_DMA_Start_IT+0xee>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a5c      	ldr	r2, [pc, #368]	@ (800463c <HAL_DMA_Start_IT+0x214>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d022      	beq.n	8004516 <HAL_DMA_Start_IT+0xee>
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a5a      	ldr	r2, [pc, #360]	@ (8004640 <HAL_DMA_Start_IT+0x218>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d01d      	beq.n	8004516 <HAL_DMA_Start_IT+0xee>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a59      	ldr	r2, [pc, #356]	@ (8004644 <HAL_DMA_Start_IT+0x21c>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d018      	beq.n	8004516 <HAL_DMA_Start_IT+0xee>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a57      	ldr	r2, [pc, #348]	@ (8004648 <HAL_DMA_Start_IT+0x220>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d013      	beq.n	8004516 <HAL_DMA_Start_IT+0xee>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a56      	ldr	r2, [pc, #344]	@ (800464c <HAL_DMA_Start_IT+0x224>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d00e      	beq.n	8004516 <HAL_DMA_Start_IT+0xee>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a54      	ldr	r2, [pc, #336]	@ (8004650 <HAL_DMA_Start_IT+0x228>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d009      	beq.n	8004516 <HAL_DMA_Start_IT+0xee>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a53      	ldr	r2, [pc, #332]	@ (8004654 <HAL_DMA_Start_IT+0x22c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d004      	beq.n	8004516 <HAL_DMA_Start_IT+0xee>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a51      	ldr	r2, [pc, #324]	@ (8004658 <HAL_DMA_Start_IT+0x230>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d108      	bne.n	8004528 <HAL_DMA_Start_IT+0x100>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	681a      	ldr	r2, [r3, #0]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f022 0201 	bic.w	r2, r2, #1
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	e007      	b.n	8004538 <HAL_DMA_Start_IT+0x110>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f022 0201 	bic.w	r2, r2, #1
 8004536:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	68b9      	ldr	r1, [r7, #8]
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f001 f906 	bl	8005750 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a34      	ldr	r2, [pc, #208]	@ (800461c <HAL_DMA_Start_IT+0x1f4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d04a      	beq.n	80045e4 <HAL_DMA_Start_IT+0x1bc>
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a33      	ldr	r2, [pc, #204]	@ (8004620 <HAL_DMA_Start_IT+0x1f8>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d045      	beq.n	80045e4 <HAL_DMA_Start_IT+0x1bc>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a31      	ldr	r2, [pc, #196]	@ (8004624 <HAL_DMA_Start_IT+0x1fc>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d040      	beq.n	80045e4 <HAL_DMA_Start_IT+0x1bc>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a30      	ldr	r2, [pc, #192]	@ (8004628 <HAL_DMA_Start_IT+0x200>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d03b      	beq.n	80045e4 <HAL_DMA_Start_IT+0x1bc>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a2e      	ldr	r2, [pc, #184]	@ (800462c <HAL_DMA_Start_IT+0x204>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d036      	beq.n	80045e4 <HAL_DMA_Start_IT+0x1bc>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a2d      	ldr	r2, [pc, #180]	@ (8004630 <HAL_DMA_Start_IT+0x208>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d031      	beq.n	80045e4 <HAL_DMA_Start_IT+0x1bc>
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a2b      	ldr	r2, [pc, #172]	@ (8004634 <HAL_DMA_Start_IT+0x20c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d02c      	beq.n	80045e4 <HAL_DMA_Start_IT+0x1bc>
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a2a      	ldr	r2, [pc, #168]	@ (8004638 <HAL_DMA_Start_IT+0x210>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d027      	beq.n	80045e4 <HAL_DMA_Start_IT+0x1bc>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a28      	ldr	r2, [pc, #160]	@ (800463c <HAL_DMA_Start_IT+0x214>)
 800459a:	4293      	cmp	r3, r2
 800459c:	d022      	beq.n	80045e4 <HAL_DMA_Start_IT+0x1bc>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a27      	ldr	r2, [pc, #156]	@ (8004640 <HAL_DMA_Start_IT+0x218>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d01d      	beq.n	80045e4 <HAL_DMA_Start_IT+0x1bc>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a25      	ldr	r2, [pc, #148]	@ (8004644 <HAL_DMA_Start_IT+0x21c>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d018      	beq.n	80045e4 <HAL_DMA_Start_IT+0x1bc>
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a24      	ldr	r2, [pc, #144]	@ (8004648 <HAL_DMA_Start_IT+0x220>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d013      	beq.n	80045e4 <HAL_DMA_Start_IT+0x1bc>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a22      	ldr	r2, [pc, #136]	@ (800464c <HAL_DMA_Start_IT+0x224>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d00e      	beq.n	80045e4 <HAL_DMA_Start_IT+0x1bc>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a21      	ldr	r2, [pc, #132]	@ (8004650 <HAL_DMA_Start_IT+0x228>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d009      	beq.n	80045e4 <HAL_DMA_Start_IT+0x1bc>
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a1f      	ldr	r2, [pc, #124]	@ (8004654 <HAL_DMA_Start_IT+0x22c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d004      	beq.n	80045e4 <HAL_DMA_Start_IT+0x1bc>
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a1e      	ldr	r2, [pc, #120]	@ (8004658 <HAL_DMA_Start_IT+0x230>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d101      	bne.n	80045e8 <HAL_DMA_Start_IT+0x1c0>
 80045e4:	2301      	movs	r3, #1
 80045e6:	e000      	b.n	80045ea <HAL_DMA_Start_IT+0x1c2>
 80045e8:	2300      	movs	r3, #0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d036      	beq.n	800465c <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f023 021e 	bic.w	r2, r3, #30
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f042 0216 	orr.w	r2, r2, #22
 8004600:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004606:	2b00      	cmp	r3, #0
 8004608:	d03e      	beq.n	8004688 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681a      	ldr	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f042 0208 	orr.w	r2, r2, #8
 8004618:	601a      	str	r2, [r3, #0]
 800461a:	e035      	b.n	8004688 <HAL_DMA_Start_IT+0x260>
 800461c:	40020010 	.word	0x40020010
 8004620:	40020028 	.word	0x40020028
 8004624:	40020040 	.word	0x40020040
 8004628:	40020058 	.word	0x40020058
 800462c:	40020070 	.word	0x40020070
 8004630:	40020088 	.word	0x40020088
 8004634:	400200a0 	.word	0x400200a0
 8004638:	400200b8 	.word	0x400200b8
 800463c:	40020410 	.word	0x40020410
 8004640:	40020428 	.word	0x40020428
 8004644:	40020440 	.word	0x40020440
 8004648:	40020458 	.word	0x40020458
 800464c:	40020470 	.word	0x40020470
 8004650:	40020488 	.word	0x40020488
 8004654:	400204a0 	.word	0x400204a0
 8004658:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f023 020e 	bic.w	r2, r3, #14
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f042 020a 	orr.w	r2, r2, #10
 800466e:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004674:	2b00      	cmp	r3, #0
 8004676:	d007      	beq.n	8004688 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f042 0204 	orr.w	r2, r2, #4
 8004686:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a83      	ldr	r2, [pc, #524]	@ (800489c <HAL_DMA_Start_IT+0x474>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d072      	beq.n	8004778 <HAL_DMA_Start_IT+0x350>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a82      	ldr	r2, [pc, #520]	@ (80048a0 <HAL_DMA_Start_IT+0x478>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d06d      	beq.n	8004778 <HAL_DMA_Start_IT+0x350>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a80      	ldr	r2, [pc, #512]	@ (80048a4 <HAL_DMA_Start_IT+0x47c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d068      	beq.n	8004778 <HAL_DMA_Start_IT+0x350>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a7f      	ldr	r2, [pc, #508]	@ (80048a8 <HAL_DMA_Start_IT+0x480>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d063      	beq.n	8004778 <HAL_DMA_Start_IT+0x350>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a7d      	ldr	r2, [pc, #500]	@ (80048ac <HAL_DMA_Start_IT+0x484>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d05e      	beq.n	8004778 <HAL_DMA_Start_IT+0x350>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a7c      	ldr	r2, [pc, #496]	@ (80048b0 <HAL_DMA_Start_IT+0x488>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d059      	beq.n	8004778 <HAL_DMA_Start_IT+0x350>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a7a      	ldr	r2, [pc, #488]	@ (80048b4 <HAL_DMA_Start_IT+0x48c>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d054      	beq.n	8004778 <HAL_DMA_Start_IT+0x350>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4a79      	ldr	r2, [pc, #484]	@ (80048b8 <HAL_DMA_Start_IT+0x490>)
 80046d4:	4293      	cmp	r3, r2
 80046d6:	d04f      	beq.n	8004778 <HAL_DMA_Start_IT+0x350>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4a77      	ldr	r2, [pc, #476]	@ (80048bc <HAL_DMA_Start_IT+0x494>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d04a      	beq.n	8004778 <HAL_DMA_Start_IT+0x350>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a76      	ldr	r2, [pc, #472]	@ (80048c0 <HAL_DMA_Start_IT+0x498>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d045      	beq.n	8004778 <HAL_DMA_Start_IT+0x350>
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a74      	ldr	r2, [pc, #464]	@ (80048c4 <HAL_DMA_Start_IT+0x49c>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d040      	beq.n	8004778 <HAL_DMA_Start_IT+0x350>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a73      	ldr	r2, [pc, #460]	@ (80048c8 <HAL_DMA_Start_IT+0x4a0>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d03b      	beq.n	8004778 <HAL_DMA_Start_IT+0x350>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a71      	ldr	r2, [pc, #452]	@ (80048cc <HAL_DMA_Start_IT+0x4a4>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d036      	beq.n	8004778 <HAL_DMA_Start_IT+0x350>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a70      	ldr	r2, [pc, #448]	@ (80048d0 <HAL_DMA_Start_IT+0x4a8>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d031      	beq.n	8004778 <HAL_DMA_Start_IT+0x350>
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a6e      	ldr	r2, [pc, #440]	@ (80048d4 <HAL_DMA_Start_IT+0x4ac>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d02c      	beq.n	8004778 <HAL_DMA_Start_IT+0x350>
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a6d      	ldr	r2, [pc, #436]	@ (80048d8 <HAL_DMA_Start_IT+0x4b0>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d027      	beq.n	8004778 <HAL_DMA_Start_IT+0x350>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a6b      	ldr	r2, [pc, #428]	@ (80048dc <HAL_DMA_Start_IT+0x4b4>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d022      	beq.n	8004778 <HAL_DMA_Start_IT+0x350>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a6a      	ldr	r2, [pc, #424]	@ (80048e0 <HAL_DMA_Start_IT+0x4b8>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d01d      	beq.n	8004778 <HAL_DMA_Start_IT+0x350>
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a68      	ldr	r2, [pc, #416]	@ (80048e4 <HAL_DMA_Start_IT+0x4bc>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d018      	beq.n	8004778 <HAL_DMA_Start_IT+0x350>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a67      	ldr	r2, [pc, #412]	@ (80048e8 <HAL_DMA_Start_IT+0x4c0>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d013      	beq.n	8004778 <HAL_DMA_Start_IT+0x350>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a65      	ldr	r2, [pc, #404]	@ (80048ec <HAL_DMA_Start_IT+0x4c4>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d00e      	beq.n	8004778 <HAL_DMA_Start_IT+0x350>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a64      	ldr	r2, [pc, #400]	@ (80048f0 <HAL_DMA_Start_IT+0x4c8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d009      	beq.n	8004778 <HAL_DMA_Start_IT+0x350>
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a62      	ldr	r2, [pc, #392]	@ (80048f4 <HAL_DMA_Start_IT+0x4cc>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d004      	beq.n	8004778 <HAL_DMA_Start_IT+0x350>
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a61      	ldr	r2, [pc, #388]	@ (80048f8 <HAL_DMA_Start_IT+0x4d0>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d101      	bne.n	800477c <HAL_DMA_Start_IT+0x354>
 8004778:	2301      	movs	r3, #1
 800477a:	e000      	b.n	800477e <HAL_DMA_Start_IT+0x356>
 800477c:	2300      	movs	r3, #0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d01a      	beq.n	80047b8 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800478c:	2b00      	cmp	r3, #0
 800478e:	d007      	beq.n	80047a0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800479a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800479e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d007      	beq.n	80047b8 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80047b2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047b6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a37      	ldr	r2, [pc, #220]	@ (800489c <HAL_DMA_Start_IT+0x474>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d04a      	beq.n	8004858 <HAL_DMA_Start_IT+0x430>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a36      	ldr	r2, [pc, #216]	@ (80048a0 <HAL_DMA_Start_IT+0x478>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d045      	beq.n	8004858 <HAL_DMA_Start_IT+0x430>
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a34      	ldr	r2, [pc, #208]	@ (80048a4 <HAL_DMA_Start_IT+0x47c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d040      	beq.n	8004858 <HAL_DMA_Start_IT+0x430>
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a33      	ldr	r2, [pc, #204]	@ (80048a8 <HAL_DMA_Start_IT+0x480>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d03b      	beq.n	8004858 <HAL_DMA_Start_IT+0x430>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a31      	ldr	r2, [pc, #196]	@ (80048ac <HAL_DMA_Start_IT+0x484>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d036      	beq.n	8004858 <HAL_DMA_Start_IT+0x430>
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a30      	ldr	r2, [pc, #192]	@ (80048b0 <HAL_DMA_Start_IT+0x488>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d031      	beq.n	8004858 <HAL_DMA_Start_IT+0x430>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a2e      	ldr	r2, [pc, #184]	@ (80048b4 <HAL_DMA_Start_IT+0x48c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d02c      	beq.n	8004858 <HAL_DMA_Start_IT+0x430>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a2d      	ldr	r2, [pc, #180]	@ (80048b8 <HAL_DMA_Start_IT+0x490>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d027      	beq.n	8004858 <HAL_DMA_Start_IT+0x430>
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a2b      	ldr	r2, [pc, #172]	@ (80048bc <HAL_DMA_Start_IT+0x494>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d022      	beq.n	8004858 <HAL_DMA_Start_IT+0x430>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a2a      	ldr	r2, [pc, #168]	@ (80048c0 <HAL_DMA_Start_IT+0x498>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d01d      	beq.n	8004858 <HAL_DMA_Start_IT+0x430>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a28      	ldr	r2, [pc, #160]	@ (80048c4 <HAL_DMA_Start_IT+0x49c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d018      	beq.n	8004858 <HAL_DMA_Start_IT+0x430>
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a27      	ldr	r2, [pc, #156]	@ (80048c8 <HAL_DMA_Start_IT+0x4a0>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d013      	beq.n	8004858 <HAL_DMA_Start_IT+0x430>
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a25      	ldr	r2, [pc, #148]	@ (80048cc <HAL_DMA_Start_IT+0x4a4>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d00e      	beq.n	8004858 <HAL_DMA_Start_IT+0x430>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a24      	ldr	r2, [pc, #144]	@ (80048d0 <HAL_DMA_Start_IT+0x4a8>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d009      	beq.n	8004858 <HAL_DMA_Start_IT+0x430>
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a22      	ldr	r2, [pc, #136]	@ (80048d4 <HAL_DMA_Start_IT+0x4ac>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d004      	beq.n	8004858 <HAL_DMA_Start_IT+0x430>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a21      	ldr	r2, [pc, #132]	@ (80048d8 <HAL_DMA_Start_IT+0x4b0>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d108      	bne.n	800486a <HAL_DMA_Start_IT+0x442>
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f042 0201 	orr.w	r2, r2, #1
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	e012      	b.n	8004890 <HAL_DMA_Start_IT+0x468>
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 0201 	orr.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	e009      	b.n	8004890 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004882:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004890:	7dfb      	ldrb	r3, [r7, #23]
}
 8004892:	4618      	mov	r0, r3
 8004894:	3718      	adds	r7, #24
 8004896:	46bd      	mov	sp, r7
 8004898:	bd80      	pop	{r7, pc}
 800489a:	bf00      	nop
 800489c:	40020010 	.word	0x40020010
 80048a0:	40020028 	.word	0x40020028
 80048a4:	40020040 	.word	0x40020040
 80048a8:	40020058 	.word	0x40020058
 80048ac:	40020070 	.word	0x40020070
 80048b0:	40020088 	.word	0x40020088
 80048b4:	400200a0 	.word	0x400200a0
 80048b8:	400200b8 	.word	0x400200b8
 80048bc:	40020410 	.word	0x40020410
 80048c0:	40020428 	.word	0x40020428
 80048c4:	40020440 	.word	0x40020440
 80048c8:	40020458 	.word	0x40020458
 80048cc:	40020470 	.word	0x40020470
 80048d0:	40020488 	.word	0x40020488
 80048d4:	400204a0 	.word	0x400204a0
 80048d8:	400204b8 	.word	0x400204b8
 80048dc:	58025408 	.word	0x58025408
 80048e0:	5802541c 	.word	0x5802541c
 80048e4:	58025430 	.word	0x58025430
 80048e8:	58025444 	.word	0x58025444
 80048ec:	58025458 	.word	0x58025458
 80048f0:	5802546c 	.word	0x5802546c
 80048f4:	58025480 	.word	0x58025480
 80048f8:	58025494 	.word	0x58025494

080048fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b08a      	sub	sp, #40	@ 0x28
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004904:	2300      	movs	r3, #0
 8004906:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004908:	4b67      	ldr	r3, [pc, #412]	@ (8004aa8 <HAL_DMA_IRQHandler+0x1ac>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a67      	ldr	r2, [pc, #412]	@ (8004aac <HAL_DMA_IRQHandler+0x1b0>)
 800490e:	fba2 2303 	umull	r2, r3, r2, r3
 8004912:	0a9b      	lsrs	r3, r3, #10
 8004914:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800491a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004920:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004922:	6a3b      	ldr	r3, [r7, #32]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a5f      	ldr	r2, [pc, #380]	@ (8004ab0 <HAL_DMA_IRQHandler+0x1b4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d04a      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a5d      	ldr	r2, [pc, #372]	@ (8004ab4 <HAL_DMA_IRQHandler+0x1b8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d045      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a5c      	ldr	r2, [pc, #368]	@ (8004ab8 <HAL_DMA_IRQHandler+0x1bc>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d040      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a5a      	ldr	r2, [pc, #360]	@ (8004abc <HAL_DMA_IRQHandler+0x1c0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d03b      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a59      	ldr	r2, [pc, #356]	@ (8004ac0 <HAL_DMA_IRQHandler+0x1c4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d036      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a57      	ldr	r2, [pc, #348]	@ (8004ac4 <HAL_DMA_IRQHandler+0x1c8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d031      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a56      	ldr	r2, [pc, #344]	@ (8004ac8 <HAL_DMA_IRQHandler+0x1cc>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d02c      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a54      	ldr	r2, [pc, #336]	@ (8004acc <HAL_DMA_IRQHandler+0x1d0>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d027      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a53      	ldr	r2, [pc, #332]	@ (8004ad0 <HAL_DMA_IRQHandler+0x1d4>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d022      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a51      	ldr	r2, [pc, #324]	@ (8004ad4 <HAL_DMA_IRQHandler+0x1d8>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d01d      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a50      	ldr	r2, [pc, #320]	@ (8004ad8 <HAL_DMA_IRQHandler+0x1dc>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d018      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a4e      	ldr	r2, [pc, #312]	@ (8004adc <HAL_DMA_IRQHandler+0x1e0>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d013      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a4d      	ldr	r2, [pc, #308]	@ (8004ae0 <HAL_DMA_IRQHandler+0x1e4>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d00e      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a4b      	ldr	r2, [pc, #300]	@ (8004ae4 <HAL_DMA_IRQHandler+0x1e8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d009      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a4a      	ldr	r2, [pc, #296]	@ (8004ae8 <HAL_DMA_IRQHandler+0x1ec>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d004      	beq.n	80049ce <HAL_DMA_IRQHandler+0xd2>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a48      	ldr	r2, [pc, #288]	@ (8004aec <HAL_DMA_IRQHandler+0x1f0>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d101      	bne.n	80049d2 <HAL_DMA_IRQHandler+0xd6>
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <HAL_DMA_IRQHandler+0xd8>
 80049d2:	2300      	movs	r3, #0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 842b 	beq.w	8005230 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049de:	f003 031f 	and.w	r3, r3, #31
 80049e2:	2208      	movs	r2, #8
 80049e4:	409a      	lsls	r2, r3
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	4013      	ands	r3, r2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 80a2 	beq.w	8004b34 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	4a2e      	ldr	r2, [pc, #184]	@ (8004ab0 <HAL_DMA_IRQHandler+0x1b4>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d04a      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a2d      	ldr	r2, [pc, #180]	@ (8004ab4 <HAL_DMA_IRQHandler+0x1b8>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d045      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a2b      	ldr	r2, [pc, #172]	@ (8004ab8 <HAL_DMA_IRQHandler+0x1bc>)
 8004a0a:	4293      	cmp	r3, r2
 8004a0c:	d040      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a2a      	ldr	r2, [pc, #168]	@ (8004abc <HAL_DMA_IRQHandler+0x1c0>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d03b      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a28      	ldr	r2, [pc, #160]	@ (8004ac0 <HAL_DMA_IRQHandler+0x1c4>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d036      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a27      	ldr	r2, [pc, #156]	@ (8004ac4 <HAL_DMA_IRQHandler+0x1c8>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d031      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a25      	ldr	r2, [pc, #148]	@ (8004ac8 <HAL_DMA_IRQHandler+0x1cc>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d02c      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a24      	ldr	r2, [pc, #144]	@ (8004acc <HAL_DMA_IRQHandler+0x1d0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d027      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a22      	ldr	r2, [pc, #136]	@ (8004ad0 <HAL_DMA_IRQHandler+0x1d4>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d022      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a21      	ldr	r2, [pc, #132]	@ (8004ad4 <HAL_DMA_IRQHandler+0x1d8>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d01d      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a1f      	ldr	r2, [pc, #124]	@ (8004ad8 <HAL_DMA_IRQHandler+0x1dc>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d018      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a1e      	ldr	r2, [pc, #120]	@ (8004adc <HAL_DMA_IRQHandler+0x1e0>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d013      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a1c      	ldr	r2, [pc, #112]	@ (8004ae0 <HAL_DMA_IRQHandler+0x1e4>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d00e      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a1b      	ldr	r2, [pc, #108]	@ (8004ae4 <HAL_DMA_IRQHandler+0x1e8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d009      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a19      	ldr	r2, [pc, #100]	@ (8004ae8 <HAL_DMA_IRQHandler+0x1ec>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d004      	beq.n	8004a90 <HAL_DMA_IRQHandler+0x194>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a18      	ldr	r2, [pc, #96]	@ (8004aec <HAL_DMA_IRQHandler+0x1f0>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d12f      	bne.n	8004af0 <HAL_DMA_IRQHandler+0x1f4>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0304 	and.w	r3, r3, #4
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	bf14      	ite	ne
 8004a9e:	2301      	movne	r3, #1
 8004aa0:	2300      	moveq	r3, #0
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	e02e      	b.n	8004b04 <HAL_DMA_IRQHandler+0x208>
 8004aa6:	bf00      	nop
 8004aa8:	24000000 	.word	0x24000000
 8004aac:	1b4e81b5 	.word	0x1b4e81b5
 8004ab0:	40020010 	.word	0x40020010
 8004ab4:	40020028 	.word	0x40020028
 8004ab8:	40020040 	.word	0x40020040
 8004abc:	40020058 	.word	0x40020058
 8004ac0:	40020070 	.word	0x40020070
 8004ac4:	40020088 	.word	0x40020088
 8004ac8:	400200a0 	.word	0x400200a0
 8004acc:	400200b8 	.word	0x400200b8
 8004ad0:	40020410 	.word	0x40020410
 8004ad4:	40020428 	.word	0x40020428
 8004ad8:	40020440 	.word	0x40020440
 8004adc:	40020458 	.word	0x40020458
 8004ae0:	40020470 	.word	0x40020470
 8004ae4:	40020488 	.word	0x40020488
 8004ae8:	400204a0 	.word	0x400204a0
 8004aec:	400204b8 	.word	0x400204b8
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0308 	and.w	r3, r3, #8
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	bf14      	ite	ne
 8004afe:	2301      	movne	r3, #1
 8004b00:	2300      	moveq	r3, #0
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d015      	beq.n	8004b34 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f022 0204 	bic.w	r2, r2, #4
 8004b16:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b1c:	f003 031f 	and.w	r3, r3, #31
 8004b20:	2208      	movs	r2, #8
 8004b22:	409a      	lsls	r2, r3
 8004b24:	6a3b      	ldr	r3, [r7, #32]
 8004b26:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b2c:	f043 0201 	orr.w	r2, r3, #1
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b38:	f003 031f 	and.w	r3, r3, #31
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d06e      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a69      	ldr	r2, [pc, #420]	@ (8004cf4 <HAL_DMA_IRQHandler+0x3f8>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d04a      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a67      	ldr	r2, [pc, #412]	@ (8004cf8 <HAL_DMA_IRQHandler+0x3fc>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d045      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a66      	ldr	r2, [pc, #408]	@ (8004cfc <HAL_DMA_IRQHandler+0x400>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d040      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a64      	ldr	r2, [pc, #400]	@ (8004d00 <HAL_DMA_IRQHandler+0x404>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d03b      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a63      	ldr	r2, [pc, #396]	@ (8004d04 <HAL_DMA_IRQHandler+0x408>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d036      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a61      	ldr	r2, [pc, #388]	@ (8004d08 <HAL_DMA_IRQHandler+0x40c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d031      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4a60      	ldr	r2, [pc, #384]	@ (8004d0c <HAL_DMA_IRQHandler+0x410>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d02c      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a5e      	ldr	r2, [pc, #376]	@ (8004d10 <HAL_DMA_IRQHandler+0x414>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d027      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4a5d      	ldr	r2, [pc, #372]	@ (8004d14 <HAL_DMA_IRQHandler+0x418>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d022      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a5b      	ldr	r2, [pc, #364]	@ (8004d18 <HAL_DMA_IRQHandler+0x41c>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d01d      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a5a      	ldr	r2, [pc, #360]	@ (8004d1c <HAL_DMA_IRQHandler+0x420>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d018      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a58      	ldr	r2, [pc, #352]	@ (8004d20 <HAL_DMA_IRQHandler+0x424>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d013      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a57      	ldr	r2, [pc, #348]	@ (8004d24 <HAL_DMA_IRQHandler+0x428>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d00e      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a55      	ldr	r2, [pc, #340]	@ (8004d28 <HAL_DMA_IRQHandler+0x42c>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d009      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a54      	ldr	r2, [pc, #336]	@ (8004d2c <HAL_DMA_IRQHandler+0x430>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d004      	beq.n	8004bea <HAL_DMA_IRQHandler+0x2ee>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a52      	ldr	r2, [pc, #328]	@ (8004d30 <HAL_DMA_IRQHandler+0x434>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d10a      	bne.n	8004c00 <HAL_DMA_IRQHandler+0x304>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	695b      	ldr	r3, [r3, #20]
 8004bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	bf14      	ite	ne
 8004bf8:	2301      	movne	r3, #1
 8004bfa:	2300      	moveq	r3, #0
 8004bfc:	b2db      	uxtb	r3, r3
 8004bfe:	e003      	b.n	8004c08 <HAL_DMA_IRQHandler+0x30c>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2300      	movs	r3, #0
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d00d      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c10:	f003 031f 	and.w	r3, r3, #31
 8004c14:	2201      	movs	r2, #1
 8004c16:	409a      	lsls	r2, r3
 8004c18:	6a3b      	ldr	r3, [r7, #32]
 8004c1a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c20:	f043 0202 	orr.w	r2, r3, #2
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c2c:	f003 031f 	and.w	r3, r3, #31
 8004c30:	2204      	movs	r2, #4
 8004c32:	409a      	lsls	r2, r3
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	4013      	ands	r3, r2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 808f 	beq.w	8004d5c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a2c      	ldr	r2, [pc, #176]	@ (8004cf4 <HAL_DMA_IRQHandler+0x3f8>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d04a      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a2a      	ldr	r2, [pc, #168]	@ (8004cf8 <HAL_DMA_IRQHandler+0x3fc>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d045      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a29      	ldr	r2, [pc, #164]	@ (8004cfc <HAL_DMA_IRQHandler+0x400>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d040      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a27      	ldr	r2, [pc, #156]	@ (8004d00 <HAL_DMA_IRQHandler+0x404>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d03b      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a26      	ldr	r2, [pc, #152]	@ (8004d04 <HAL_DMA_IRQHandler+0x408>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d036      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a24      	ldr	r2, [pc, #144]	@ (8004d08 <HAL_DMA_IRQHandler+0x40c>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d031      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a23      	ldr	r2, [pc, #140]	@ (8004d0c <HAL_DMA_IRQHandler+0x410>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d02c      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a21      	ldr	r2, [pc, #132]	@ (8004d10 <HAL_DMA_IRQHandler+0x414>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d027      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a20      	ldr	r2, [pc, #128]	@ (8004d14 <HAL_DMA_IRQHandler+0x418>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d022      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a1e      	ldr	r2, [pc, #120]	@ (8004d18 <HAL_DMA_IRQHandler+0x41c>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d01d      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a1d      	ldr	r2, [pc, #116]	@ (8004d1c <HAL_DMA_IRQHandler+0x420>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d018      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8004d20 <HAL_DMA_IRQHandler+0x424>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d013      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a1a      	ldr	r2, [pc, #104]	@ (8004d24 <HAL_DMA_IRQHandler+0x428>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d00e      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a18      	ldr	r2, [pc, #96]	@ (8004d28 <HAL_DMA_IRQHandler+0x42c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d009      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a17      	ldr	r2, [pc, #92]	@ (8004d2c <HAL_DMA_IRQHandler+0x430>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d004      	beq.n	8004cde <HAL_DMA_IRQHandler+0x3e2>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a15      	ldr	r2, [pc, #84]	@ (8004d30 <HAL_DMA_IRQHandler+0x434>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d12a      	bne.n	8004d34 <HAL_DMA_IRQHandler+0x438>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	bf14      	ite	ne
 8004cec:	2301      	movne	r3, #1
 8004cee:	2300      	moveq	r3, #0
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	e023      	b.n	8004d3c <HAL_DMA_IRQHandler+0x440>
 8004cf4:	40020010 	.word	0x40020010
 8004cf8:	40020028 	.word	0x40020028
 8004cfc:	40020040 	.word	0x40020040
 8004d00:	40020058 	.word	0x40020058
 8004d04:	40020070 	.word	0x40020070
 8004d08:	40020088 	.word	0x40020088
 8004d0c:	400200a0 	.word	0x400200a0
 8004d10:	400200b8 	.word	0x400200b8
 8004d14:	40020410 	.word	0x40020410
 8004d18:	40020428 	.word	0x40020428
 8004d1c:	40020440 	.word	0x40020440
 8004d20:	40020458 	.word	0x40020458
 8004d24:	40020470 	.word	0x40020470
 8004d28:	40020488 	.word	0x40020488
 8004d2c:	400204a0 	.word	0x400204a0
 8004d30:	400204b8 	.word	0x400204b8
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00d      	beq.n	8004d5c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d44:	f003 031f 	and.w	r3, r3, #31
 8004d48:	2204      	movs	r2, #4
 8004d4a:	409a      	lsls	r2, r3
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d54:	f043 0204 	orr.w	r2, r3, #4
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d60:	f003 031f 	and.w	r3, r3, #31
 8004d64:	2210      	movs	r2, #16
 8004d66:	409a      	lsls	r2, r3
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	4013      	ands	r3, r2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	f000 80a6 	beq.w	8004ebe <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a85      	ldr	r2, [pc, #532]	@ (8004f8c <HAL_DMA_IRQHandler+0x690>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d04a      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a83      	ldr	r2, [pc, #524]	@ (8004f90 <HAL_DMA_IRQHandler+0x694>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d045      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a82      	ldr	r2, [pc, #520]	@ (8004f94 <HAL_DMA_IRQHandler+0x698>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d040      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a80      	ldr	r2, [pc, #512]	@ (8004f98 <HAL_DMA_IRQHandler+0x69c>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d03b      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a7f      	ldr	r2, [pc, #508]	@ (8004f9c <HAL_DMA_IRQHandler+0x6a0>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d036      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a7d      	ldr	r2, [pc, #500]	@ (8004fa0 <HAL_DMA_IRQHandler+0x6a4>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d031      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a7c      	ldr	r2, [pc, #496]	@ (8004fa4 <HAL_DMA_IRQHandler+0x6a8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d02c      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a7a      	ldr	r2, [pc, #488]	@ (8004fa8 <HAL_DMA_IRQHandler+0x6ac>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d027      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a79      	ldr	r2, [pc, #484]	@ (8004fac <HAL_DMA_IRQHandler+0x6b0>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d022      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a77      	ldr	r2, [pc, #476]	@ (8004fb0 <HAL_DMA_IRQHandler+0x6b4>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d01d      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a76      	ldr	r2, [pc, #472]	@ (8004fb4 <HAL_DMA_IRQHandler+0x6b8>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d018      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a74      	ldr	r2, [pc, #464]	@ (8004fb8 <HAL_DMA_IRQHandler+0x6bc>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d013      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a73      	ldr	r2, [pc, #460]	@ (8004fbc <HAL_DMA_IRQHandler+0x6c0>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00e      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a71      	ldr	r2, [pc, #452]	@ (8004fc0 <HAL_DMA_IRQHandler+0x6c4>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d009      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a70      	ldr	r2, [pc, #448]	@ (8004fc4 <HAL_DMA_IRQHandler+0x6c8>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d004      	beq.n	8004e12 <HAL_DMA_IRQHandler+0x516>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a6e      	ldr	r2, [pc, #440]	@ (8004fc8 <HAL_DMA_IRQHandler+0x6cc>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d10a      	bne.n	8004e28 <HAL_DMA_IRQHandler+0x52c>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0308 	and.w	r3, r3, #8
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	bf14      	ite	ne
 8004e20:	2301      	movne	r3, #1
 8004e22:	2300      	moveq	r3, #0
 8004e24:	b2db      	uxtb	r3, r3
 8004e26:	e009      	b.n	8004e3c <HAL_DMA_IRQHandler+0x540>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0304 	and.w	r3, r3, #4
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	bf14      	ite	ne
 8004e36:	2301      	movne	r3, #1
 8004e38:	2300      	moveq	r3, #0
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d03e      	beq.n	8004ebe <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e44:	f003 031f 	and.w	r3, r3, #31
 8004e48:	2210      	movs	r2, #16
 8004e4a:	409a      	lsls	r2, r3
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d018      	beq.n	8004e90 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d108      	bne.n	8004e7e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d024      	beq.n	8004ebe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	4798      	blx	r3
 8004e7c:	e01f      	b.n	8004ebe <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d01b      	beq.n	8004ebe <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	4798      	blx	r3
 8004e8e:	e016      	b.n	8004ebe <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d107      	bne.n	8004eae <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 0208 	bic.w	r2, r2, #8
 8004eac:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d003      	beq.n	8004ebe <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eba:	6878      	ldr	r0, [r7, #4]
 8004ebc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ec2:	f003 031f 	and.w	r3, r3, #31
 8004ec6:	2220      	movs	r2, #32
 8004ec8:	409a      	lsls	r2, r3
 8004eca:	69bb      	ldr	r3, [r7, #24]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	f000 8110 	beq.w	80050f4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a2c      	ldr	r2, [pc, #176]	@ (8004f8c <HAL_DMA_IRQHandler+0x690>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d04a      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a2b      	ldr	r2, [pc, #172]	@ (8004f90 <HAL_DMA_IRQHandler+0x694>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d045      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a29      	ldr	r2, [pc, #164]	@ (8004f94 <HAL_DMA_IRQHandler+0x698>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d040      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a28      	ldr	r2, [pc, #160]	@ (8004f98 <HAL_DMA_IRQHandler+0x69c>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d03b      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a26      	ldr	r2, [pc, #152]	@ (8004f9c <HAL_DMA_IRQHandler+0x6a0>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d036      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a25      	ldr	r2, [pc, #148]	@ (8004fa0 <HAL_DMA_IRQHandler+0x6a4>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d031      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a23      	ldr	r2, [pc, #140]	@ (8004fa4 <HAL_DMA_IRQHandler+0x6a8>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d02c      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a22      	ldr	r2, [pc, #136]	@ (8004fa8 <HAL_DMA_IRQHandler+0x6ac>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d027      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a20      	ldr	r2, [pc, #128]	@ (8004fac <HAL_DMA_IRQHandler+0x6b0>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d022      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a1f      	ldr	r2, [pc, #124]	@ (8004fb0 <HAL_DMA_IRQHandler+0x6b4>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d01d      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a1d      	ldr	r2, [pc, #116]	@ (8004fb4 <HAL_DMA_IRQHandler+0x6b8>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d018      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4a1c      	ldr	r2, [pc, #112]	@ (8004fb8 <HAL_DMA_IRQHandler+0x6bc>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d013      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a1a      	ldr	r2, [pc, #104]	@ (8004fbc <HAL_DMA_IRQHandler+0x6c0>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d00e      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a19      	ldr	r2, [pc, #100]	@ (8004fc0 <HAL_DMA_IRQHandler+0x6c4>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d009      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a17      	ldr	r2, [pc, #92]	@ (8004fc4 <HAL_DMA_IRQHandler+0x6c8>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d004      	beq.n	8004f74 <HAL_DMA_IRQHandler+0x678>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a16      	ldr	r2, [pc, #88]	@ (8004fc8 <HAL_DMA_IRQHandler+0x6cc>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d12b      	bne.n	8004fcc <HAL_DMA_IRQHandler+0x6d0>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0310 	and.w	r3, r3, #16
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	bf14      	ite	ne
 8004f82:	2301      	movne	r3, #1
 8004f84:	2300      	moveq	r3, #0
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	e02a      	b.n	8004fe0 <HAL_DMA_IRQHandler+0x6e4>
 8004f8a:	bf00      	nop
 8004f8c:	40020010 	.word	0x40020010
 8004f90:	40020028 	.word	0x40020028
 8004f94:	40020040 	.word	0x40020040
 8004f98:	40020058 	.word	0x40020058
 8004f9c:	40020070 	.word	0x40020070
 8004fa0:	40020088 	.word	0x40020088
 8004fa4:	400200a0 	.word	0x400200a0
 8004fa8:	400200b8 	.word	0x400200b8
 8004fac:	40020410 	.word	0x40020410
 8004fb0:	40020428 	.word	0x40020428
 8004fb4:	40020440 	.word	0x40020440
 8004fb8:	40020458 	.word	0x40020458
 8004fbc:	40020470 	.word	0x40020470
 8004fc0:	40020488 	.word	0x40020488
 8004fc4:	400204a0 	.word	0x400204a0
 8004fc8:	400204b8 	.word	0x400204b8
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 0302 	and.w	r3, r3, #2
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	bf14      	ite	ne
 8004fda:	2301      	movne	r3, #1
 8004fdc:	2300      	moveq	r3, #0
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 8087 	beq.w	80050f4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fea:	f003 031f 	and.w	r3, r3, #31
 8004fee:	2220      	movs	r2, #32
 8004ff0:	409a      	lsls	r2, r3
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b04      	cmp	r3, #4
 8005000:	d139      	bne.n	8005076 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f022 0216 	bic.w	r2, r2, #22
 8005010:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	695a      	ldr	r2, [r3, #20]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005020:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005026:	2b00      	cmp	r3, #0
 8005028:	d103      	bne.n	8005032 <HAL_DMA_IRQHandler+0x736>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800502e:	2b00      	cmp	r3, #0
 8005030:	d007      	beq.n	8005042 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f022 0208 	bic.w	r2, r2, #8
 8005040:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005046:	f003 031f 	and.w	r3, r3, #31
 800504a:	223f      	movs	r2, #63	@ 0x3f
 800504c:	409a      	lsls	r2, r3
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 834a 	beq.w	8005700 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	4798      	blx	r3
          }
          return;
 8005074:	e344      	b.n	8005700 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d018      	beq.n	80050b6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d108      	bne.n	80050a4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005096:	2b00      	cmp	r3, #0
 8005098:	d02c      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	4798      	blx	r3
 80050a2:	e027      	b.n	80050f4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d023      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	4798      	blx	r3
 80050b4:	e01e      	b.n	80050f4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10f      	bne.n	80050e4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f022 0210 	bic.w	r2, r2, #16
 80050d2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2200      	movs	r2, #0
 80050e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	f000 8306 	beq.w	800570a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005102:	f003 0301 	and.w	r3, r3, #1
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 8088 	beq.w	800521c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2204      	movs	r2, #4
 8005110:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a7a      	ldr	r2, [pc, #488]	@ (8005304 <HAL_DMA_IRQHandler+0xa08>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d04a      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a79      	ldr	r2, [pc, #484]	@ (8005308 <HAL_DMA_IRQHandler+0xa0c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d045      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a77      	ldr	r2, [pc, #476]	@ (800530c <HAL_DMA_IRQHandler+0xa10>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d040      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a76      	ldr	r2, [pc, #472]	@ (8005310 <HAL_DMA_IRQHandler+0xa14>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d03b      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a74      	ldr	r2, [pc, #464]	@ (8005314 <HAL_DMA_IRQHandler+0xa18>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d036      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a73      	ldr	r2, [pc, #460]	@ (8005318 <HAL_DMA_IRQHandler+0xa1c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d031      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a71      	ldr	r2, [pc, #452]	@ (800531c <HAL_DMA_IRQHandler+0xa20>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d02c      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a70      	ldr	r2, [pc, #448]	@ (8005320 <HAL_DMA_IRQHandler+0xa24>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d027      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a6e      	ldr	r2, [pc, #440]	@ (8005324 <HAL_DMA_IRQHandler+0xa28>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d022      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a6d      	ldr	r2, [pc, #436]	@ (8005328 <HAL_DMA_IRQHandler+0xa2c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d01d      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a6b      	ldr	r2, [pc, #428]	@ (800532c <HAL_DMA_IRQHandler+0xa30>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d018      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a6a      	ldr	r2, [pc, #424]	@ (8005330 <HAL_DMA_IRQHandler+0xa34>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d013      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a68      	ldr	r2, [pc, #416]	@ (8005334 <HAL_DMA_IRQHandler+0xa38>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d00e      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a67      	ldr	r2, [pc, #412]	@ (8005338 <HAL_DMA_IRQHandler+0xa3c>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d009      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a65      	ldr	r2, [pc, #404]	@ (800533c <HAL_DMA_IRQHandler+0xa40>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d004      	beq.n	80051b4 <HAL_DMA_IRQHandler+0x8b8>
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a64      	ldr	r2, [pc, #400]	@ (8005340 <HAL_DMA_IRQHandler+0xa44>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d108      	bne.n	80051c6 <HAL_DMA_IRQHandler+0x8ca>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 0201 	bic.w	r2, r2, #1
 80051c2:	601a      	str	r2, [r3, #0]
 80051c4:	e007      	b.n	80051d6 <HAL_DMA_IRQHandler+0x8da>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f022 0201 	bic.w	r2, r2, #1
 80051d4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	3301      	adds	r3, #1
 80051da:	60fb      	str	r3, [r7, #12]
 80051dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051de:	429a      	cmp	r2, r3
 80051e0:	d307      	bcc.n	80051f2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1f2      	bne.n	80051d6 <HAL_DMA_IRQHandler+0x8da>
 80051f0:	e000      	b.n	80051f4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80051f2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0301 	and.w	r3, r3, #1
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d004      	beq.n	800520c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2203      	movs	r2, #3
 8005206:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800520a:	e003      	b.n	8005214 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 8272 	beq.w	800570a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	4798      	blx	r3
 800522e:	e26c      	b.n	800570a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a43      	ldr	r2, [pc, #268]	@ (8005344 <HAL_DMA_IRQHandler+0xa48>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d022      	beq.n	8005280 <HAL_DMA_IRQHandler+0x984>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a42      	ldr	r2, [pc, #264]	@ (8005348 <HAL_DMA_IRQHandler+0xa4c>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d01d      	beq.n	8005280 <HAL_DMA_IRQHandler+0x984>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a40      	ldr	r2, [pc, #256]	@ (800534c <HAL_DMA_IRQHandler+0xa50>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d018      	beq.n	8005280 <HAL_DMA_IRQHandler+0x984>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a3f      	ldr	r2, [pc, #252]	@ (8005350 <HAL_DMA_IRQHandler+0xa54>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d013      	beq.n	8005280 <HAL_DMA_IRQHandler+0x984>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a3d      	ldr	r2, [pc, #244]	@ (8005354 <HAL_DMA_IRQHandler+0xa58>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d00e      	beq.n	8005280 <HAL_DMA_IRQHandler+0x984>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a3c      	ldr	r2, [pc, #240]	@ (8005358 <HAL_DMA_IRQHandler+0xa5c>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d009      	beq.n	8005280 <HAL_DMA_IRQHandler+0x984>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a3a      	ldr	r2, [pc, #232]	@ (800535c <HAL_DMA_IRQHandler+0xa60>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d004      	beq.n	8005280 <HAL_DMA_IRQHandler+0x984>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a39      	ldr	r2, [pc, #228]	@ (8005360 <HAL_DMA_IRQHandler+0xa64>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d101      	bne.n	8005284 <HAL_DMA_IRQHandler+0x988>
 8005280:	2301      	movs	r3, #1
 8005282:	e000      	b.n	8005286 <HAL_DMA_IRQHandler+0x98a>
 8005284:	2300      	movs	r3, #0
 8005286:	2b00      	cmp	r3, #0
 8005288:	f000 823f 	beq.w	800570a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005298:	f003 031f 	and.w	r3, r3, #31
 800529c:	2204      	movs	r2, #4
 800529e:	409a      	lsls	r2, r3
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	4013      	ands	r3, r2
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 80cd 	beq.w	8005444 <HAL_DMA_IRQHandler+0xb48>
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f003 0304 	and.w	r3, r3, #4
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	f000 80c7 	beq.w	8005444 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80052ba:	f003 031f 	and.w	r3, r3, #31
 80052be:	2204      	movs	r2, #4
 80052c0:	409a      	lsls	r2, r3
 80052c2:	69fb      	ldr	r3, [r7, #28]
 80052c4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d049      	beq.n	8005364 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d109      	bne.n	80052ee <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f000 8210 	beq.w	8005704 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052ec:	e20a      	b.n	8005704 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	f000 8206 	beq.w	8005704 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005300:	e200      	b.n	8005704 <HAL_DMA_IRQHandler+0xe08>
 8005302:	bf00      	nop
 8005304:	40020010 	.word	0x40020010
 8005308:	40020028 	.word	0x40020028
 800530c:	40020040 	.word	0x40020040
 8005310:	40020058 	.word	0x40020058
 8005314:	40020070 	.word	0x40020070
 8005318:	40020088 	.word	0x40020088
 800531c:	400200a0 	.word	0x400200a0
 8005320:	400200b8 	.word	0x400200b8
 8005324:	40020410 	.word	0x40020410
 8005328:	40020428 	.word	0x40020428
 800532c:	40020440 	.word	0x40020440
 8005330:	40020458 	.word	0x40020458
 8005334:	40020470 	.word	0x40020470
 8005338:	40020488 	.word	0x40020488
 800533c:	400204a0 	.word	0x400204a0
 8005340:	400204b8 	.word	0x400204b8
 8005344:	58025408 	.word	0x58025408
 8005348:	5802541c 	.word	0x5802541c
 800534c:	58025430 	.word	0x58025430
 8005350:	58025444 	.word	0x58025444
 8005354:	58025458 	.word	0x58025458
 8005358:	5802546c 	.word	0x5802546c
 800535c:	58025480 	.word	0x58025480
 8005360:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	f003 0320 	and.w	r3, r3, #32
 800536a:	2b00      	cmp	r3, #0
 800536c:	d160      	bne.n	8005430 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a7f      	ldr	r2, [pc, #508]	@ (8005570 <HAL_DMA_IRQHandler+0xc74>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d04a      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a7d      	ldr	r2, [pc, #500]	@ (8005574 <HAL_DMA_IRQHandler+0xc78>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d045      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a7c      	ldr	r2, [pc, #496]	@ (8005578 <HAL_DMA_IRQHandler+0xc7c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d040      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a7a      	ldr	r2, [pc, #488]	@ (800557c <HAL_DMA_IRQHandler+0xc80>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d03b      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a79      	ldr	r2, [pc, #484]	@ (8005580 <HAL_DMA_IRQHandler+0xc84>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d036      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a77      	ldr	r2, [pc, #476]	@ (8005584 <HAL_DMA_IRQHandler+0xc88>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d031      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	4a76      	ldr	r2, [pc, #472]	@ (8005588 <HAL_DMA_IRQHandler+0xc8c>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d02c      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a74      	ldr	r2, [pc, #464]	@ (800558c <HAL_DMA_IRQHandler+0xc90>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d027      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	4a73      	ldr	r2, [pc, #460]	@ (8005590 <HAL_DMA_IRQHandler+0xc94>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d022      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	4a71      	ldr	r2, [pc, #452]	@ (8005594 <HAL_DMA_IRQHandler+0xc98>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d01d      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a70      	ldr	r2, [pc, #448]	@ (8005598 <HAL_DMA_IRQHandler+0xc9c>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d018      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a6e      	ldr	r2, [pc, #440]	@ (800559c <HAL_DMA_IRQHandler+0xca0>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d013      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a6d      	ldr	r2, [pc, #436]	@ (80055a0 <HAL_DMA_IRQHandler+0xca4>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d00e      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a6b      	ldr	r2, [pc, #428]	@ (80055a4 <HAL_DMA_IRQHandler+0xca8>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d009      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	4a6a      	ldr	r2, [pc, #424]	@ (80055a8 <HAL_DMA_IRQHandler+0xcac>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d004      	beq.n	800540e <HAL_DMA_IRQHandler+0xb12>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a68      	ldr	r2, [pc, #416]	@ (80055ac <HAL_DMA_IRQHandler+0xcb0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d108      	bne.n	8005420 <HAL_DMA_IRQHandler+0xb24>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f022 0208 	bic.w	r2, r2, #8
 800541c:	601a      	str	r2, [r3, #0]
 800541e:	e007      	b.n	8005430 <HAL_DMA_IRQHandler+0xb34>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0204 	bic.w	r2, r2, #4
 800542e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005434:	2b00      	cmp	r3, #0
 8005436:	f000 8165 	beq.w	8005704 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005442:	e15f      	b.n	8005704 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005448:	f003 031f 	and.w	r3, r3, #31
 800544c:	2202      	movs	r2, #2
 800544e:	409a      	lsls	r2, r3
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	4013      	ands	r3, r2
 8005454:	2b00      	cmp	r3, #0
 8005456:	f000 80c5 	beq.w	80055e4 <HAL_DMA_IRQHandler+0xce8>
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f003 0302 	and.w	r3, r3, #2
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 80bf 	beq.w	80055e4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800546a:	f003 031f 	and.w	r3, r3, #31
 800546e:	2202      	movs	r2, #2
 8005470:	409a      	lsls	r2, r3
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d018      	beq.n	80054b2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d109      	bne.n	800549e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800548e:	2b00      	cmp	r3, #0
 8005490:	f000 813a 	beq.w	8005708 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800549c:	e134      	b.n	8005708 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 8130 	beq.w	8005708 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80054b0:	e12a      	b.n	8005708 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	f003 0320 	and.w	r3, r3, #32
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f040 8089 	bne.w	80055d0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a2b      	ldr	r2, [pc, #172]	@ (8005570 <HAL_DMA_IRQHandler+0xc74>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d04a      	beq.n	800555e <HAL_DMA_IRQHandler+0xc62>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a29      	ldr	r2, [pc, #164]	@ (8005574 <HAL_DMA_IRQHandler+0xc78>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d045      	beq.n	800555e <HAL_DMA_IRQHandler+0xc62>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a28      	ldr	r2, [pc, #160]	@ (8005578 <HAL_DMA_IRQHandler+0xc7c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d040      	beq.n	800555e <HAL_DMA_IRQHandler+0xc62>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a26      	ldr	r2, [pc, #152]	@ (800557c <HAL_DMA_IRQHandler+0xc80>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d03b      	beq.n	800555e <HAL_DMA_IRQHandler+0xc62>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a25      	ldr	r2, [pc, #148]	@ (8005580 <HAL_DMA_IRQHandler+0xc84>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d036      	beq.n	800555e <HAL_DMA_IRQHandler+0xc62>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a23      	ldr	r2, [pc, #140]	@ (8005584 <HAL_DMA_IRQHandler+0xc88>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d031      	beq.n	800555e <HAL_DMA_IRQHandler+0xc62>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a22      	ldr	r2, [pc, #136]	@ (8005588 <HAL_DMA_IRQHandler+0xc8c>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d02c      	beq.n	800555e <HAL_DMA_IRQHandler+0xc62>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a20      	ldr	r2, [pc, #128]	@ (800558c <HAL_DMA_IRQHandler+0xc90>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d027      	beq.n	800555e <HAL_DMA_IRQHandler+0xc62>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a1f      	ldr	r2, [pc, #124]	@ (8005590 <HAL_DMA_IRQHandler+0xc94>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d022      	beq.n	800555e <HAL_DMA_IRQHandler+0xc62>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a1d      	ldr	r2, [pc, #116]	@ (8005594 <HAL_DMA_IRQHandler+0xc98>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d01d      	beq.n	800555e <HAL_DMA_IRQHandler+0xc62>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a1c      	ldr	r2, [pc, #112]	@ (8005598 <HAL_DMA_IRQHandler+0xc9c>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d018      	beq.n	800555e <HAL_DMA_IRQHandler+0xc62>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a1a      	ldr	r2, [pc, #104]	@ (800559c <HAL_DMA_IRQHandler+0xca0>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d013      	beq.n	800555e <HAL_DMA_IRQHandler+0xc62>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a19      	ldr	r2, [pc, #100]	@ (80055a0 <HAL_DMA_IRQHandler+0xca4>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d00e      	beq.n	800555e <HAL_DMA_IRQHandler+0xc62>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a17      	ldr	r2, [pc, #92]	@ (80055a4 <HAL_DMA_IRQHandler+0xca8>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d009      	beq.n	800555e <HAL_DMA_IRQHandler+0xc62>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a16      	ldr	r2, [pc, #88]	@ (80055a8 <HAL_DMA_IRQHandler+0xcac>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d004      	beq.n	800555e <HAL_DMA_IRQHandler+0xc62>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a14      	ldr	r2, [pc, #80]	@ (80055ac <HAL_DMA_IRQHandler+0xcb0>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d128      	bne.n	80055b0 <HAL_DMA_IRQHandler+0xcb4>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0214 	bic.w	r2, r2, #20
 800556c:	601a      	str	r2, [r3, #0]
 800556e:	e027      	b.n	80055c0 <HAL_DMA_IRQHandler+0xcc4>
 8005570:	40020010 	.word	0x40020010
 8005574:	40020028 	.word	0x40020028
 8005578:	40020040 	.word	0x40020040
 800557c:	40020058 	.word	0x40020058
 8005580:	40020070 	.word	0x40020070
 8005584:	40020088 	.word	0x40020088
 8005588:	400200a0 	.word	0x400200a0
 800558c:	400200b8 	.word	0x400200b8
 8005590:	40020410 	.word	0x40020410
 8005594:	40020428 	.word	0x40020428
 8005598:	40020440 	.word	0x40020440
 800559c:	40020458 	.word	0x40020458
 80055a0:	40020470 	.word	0x40020470
 80055a4:	40020488 	.word	0x40020488
 80055a8:	400204a0 	.word	0x400204a0
 80055ac:	400204b8 	.word	0x400204b8
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 020a 	bic.w	r2, r2, #10
 80055be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 8097 	beq.w	8005708 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80055e2:	e091      	b.n	8005708 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80055e8:	f003 031f 	and.w	r3, r3, #31
 80055ec:	2208      	movs	r2, #8
 80055ee:	409a      	lsls	r2, r3
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	4013      	ands	r3, r2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	f000 8088 	beq.w	800570a <HAL_DMA_IRQHandler+0xe0e>
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f003 0308 	and.w	r3, r3, #8
 8005600:	2b00      	cmp	r3, #0
 8005602:	f000 8082 	beq.w	800570a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	4a41      	ldr	r2, [pc, #260]	@ (8005710 <HAL_DMA_IRQHandler+0xe14>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d04a      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a3f      	ldr	r2, [pc, #252]	@ (8005714 <HAL_DMA_IRQHandler+0xe18>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d045      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a3e      	ldr	r2, [pc, #248]	@ (8005718 <HAL_DMA_IRQHandler+0xe1c>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d040      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a3c      	ldr	r2, [pc, #240]	@ (800571c <HAL_DMA_IRQHandler+0xe20>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d03b      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a3b      	ldr	r2, [pc, #236]	@ (8005720 <HAL_DMA_IRQHandler+0xe24>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d036      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a39      	ldr	r2, [pc, #228]	@ (8005724 <HAL_DMA_IRQHandler+0xe28>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d031      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a38      	ldr	r2, [pc, #224]	@ (8005728 <HAL_DMA_IRQHandler+0xe2c>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d02c      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a36      	ldr	r2, [pc, #216]	@ (800572c <HAL_DMA_IRQHandler+0xe30>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d027      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a35      	ldr	r2, [pc, #212]	@ (8005730 <HAL_DMA_IRQHandler+0xe34>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d022      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a33      	ldr	r2, [pc, #204]	@ (8005734 <HAL_DMA_IRQHandler+0xe38>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d01d      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a32      	ldr	r2, [pc, #200]	@ (8005738 <HAL_DMA_IRQHandler+0xe3c>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d018      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a30      	ldr	r2, [pc, #192]	@ (800573c <HAL_DMA_IRQHandler+0xe40>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d013      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a2f      	ldr	r2, [pc, #188]	@ (8005740 <HAL_DMA_IRQHandler+0xe44>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d00e      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a2d      	ldr	r2, [pc, #180]	@ (8005744 <HAL_DMA_IRQHandler+0xe48>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d009      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a2c      	ldr	r2, [pc, #176]	@ (8005748 <HAL_DMA_IRQHandler+0xe4c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d004      	beq.n	80056a6 <HAL_DMA_IRQHandler+0xdaa>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a2a      	ldr	r2, [pc, #168]	@ (800574c <HAL_DMA_IRQHandler+0xe50>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d108      	bne.n	80056b8 <HAL_DMA_IRQHandler+0xdbc>
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f022 021c 	bic.w	r2, r2, #28
 80056b4:	601a      	str	r2, [r3, #0]
 80056b6:	e007      	b.n	80056c8 <HAL_DMA_IRQHandler+0xdcc>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 020e 	bic.w	r2, r2, #14
 80056c6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056cc:	f003 031f 	and.w	r3, r3, #31
 80056d0:	2201      	movs	r2, #1
 80056d2:	409a      	lsls	r2, r3
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2201      	movs	r2, #1
 80056e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d009      	beq.n	800570a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	4798      	blx	r3
 80056fe:	e004      	b.n	800570a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005700:	bf00      	nop
 8005702:	e002      	b.n	800570a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005704:	bf00      	nop
 8005706:	e000      	b.n	800570a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005708:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800570a:	3728      	adds	r7, #40	@ 0x28
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	40020010 	.word	0x40020010
 8005714:	40020028 	.word	0x40020028
 8005718:	40020040 	.word	0x40020040
 800571c:	40020058 	.word	0x40020058
 8005720:	40020070 	.word	0x40020070
 8005724:	40020088 	.word	0x40020088
 8005728:	400200a0 	.word	0x400200a0
 800572c:	400200b8 	.word	0x400200b8
 8005730:	40020410 	.word	0x40020410
 8005734:	40020428 	.word	0x40020428
 8005738:	40020440 	.word	0x40020440
 800573c:	40020458 	.word	0x40020458
 8005740:	40020470 	.word	0x40020470
 8005744:	40020488 	.word	0x40020488
 8005748:	400204a0 	.word	0x400204a0
 800574c:	400204b8 	.word	0x400204b8

08005750 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	607a      	str	r2, [r7, #4]
 800575c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005762:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005768:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a7f      	ldr	r2, [pc, #508]	@ (800596c <DMA_SetConfig+0x21c>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d072      	beq.n	800585a <DMA_SetConfig+0x10a>
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a7d      	ldr	r2, [pc, #500]	@ (8005970 <DMA_SetConfig+0x220>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d06d      	beq.n	800585a <DMA_SetConfig+0x10a>
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a7c      	ldr	r2, [pc, #496]	@ (8005974 <DMA_SetConfig+0x224>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d068      	beq.n	800585a <DMA_SetConfig+0x10a>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a7a      	ldr	r2, [pc, #488]	@ (8005978 <DMA_SetConfig+0x228>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d063      	beq.n	800585a <DMA_SetConfig+0x10a>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a79      	ldr	r2, [pc, #484]	@ (800597c <DMA_SetConfig+0x22c>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d05e      	beq.n	800585a <DMA_SetConfig+0x10a>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a77      	ldr	r2, [pc, #476]	@ (8005980 <DMA_SetConfig+0x230>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d059      	beq.n	800585a <DMA_SetConfig+0x10a>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a76      	ldr	r2, [pc, #472]	@ (8005984 <DMA_SetConfig+0x234>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d054      	beq.n	800585a <DMA_SetConfig+0x10a>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a74      	ldr	r2, [pc, #464]	@ (8005988 <DMA_SetConfig+0x238>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d04f      	beq.n	800585a <DMA_SetConfig+0x10a>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a73      	ldr	r2, [pc, #460]	@ (800598c <DMA_SetConfig+0x23c>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d04a      	beq.n	800585a <DMA_SetConfig+0x10a>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a71      	ldr	r2, [pc, #452]	@ (8005990 <DMA_SetConfig+0x240>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d045      	beq.n	800585a <DMA_SetConfig+0x10a>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a70      	ldr	r2, [pc, #448]	@ (8005994 <DMA_SetConfig+0x244>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d040      	beq.n	800585a <DMA_SetConfig+0x10a>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a6e      	ldr	r2, [pc, #440]	@ (8005998 <DMA_SetConfig+0x248>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d03b      	beq.n	800585a <DMA_SetConfig+0x10a>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a6d      	ldr	r2, [pc, #436]	@ (800599c <DMA_SetConfig+0x24c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d036      	beq.n	800585a <DMA_SetConfig+0x10a>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a6b      	ldr	r2, [pc, #428]	@ (80059a0 <DMA_SetConfig+0x250>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d031      	beq.n	800585a <DMA_SetConfig+0x10a>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a6a      	ldr	r2, [pc, #424]	@ (80059a4 <DMA_SetConfig+0x254>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d02c      	beq.n	800585a <DMA_SetConfig+0x10a>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a68      	ldr	r2, [pc, #416]	@ (80059a8 <DMA_SetConfig+0x258>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d027      	beq.n	800585a <DMA_SetConfig+0x10a>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a67      	ldr	r2, [pc, #412]	@ (80059ac <DMA_SetConfig+0x25c>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d022      	beq.n	800585a <DMA_SetConfig+0x10a>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a65      	ldr	r2, [pc, #404]	@ (80059b0 <DMA_SetConfig+0x260>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d01d      	beq.n	800585a <DMA_SetConfig+0x10a>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a64      	ldr	r2, [pc, #400]	@ (80059b4 <DMA_SetConfig+0x264>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d018      	beq.n	800585a <DMA_SetConfig+0x10a>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a62      	ldr	r2, [pc, #392]	@ (80059b8 <DMA_SetConfig+0x268>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d013      	beq.n	800585a <DMA_SetConfig+0x10a>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a61      	ldr	r2, [pc, #388]	@ (80059bc <DMA_SetConfig+0x26c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d00e      	beq.n	800585a <DMA_SetConfig+0x10a>
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a5f      	ldr	r2, [pc, #380]	@ (80059c0 <DMA_SetConfig+0x270>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d009      	beq.n	800585a <DMA_SetConfig+0x10a>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a5e      	ldr	r2, [pc, #376]	@ (80059c4 <DMA_SetConfig+0x274>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d004      	beq.n	800585a <DMA_SetConfig+0x10a>
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a5c      	ldr	r2, [pc, #368]	@ (80059c8 <DMA_SetConfig+0x278>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d101      	bne.n	800585e <DMA_SetConfig+0x10e>
 800585a:	2301      	movs	r3, #1
 800585c:	e000      	b.n	8005860 <DMA_SetConfig+0x110>
 800585e:	2300      	movs	r3, #0
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00d      	beq.n	8005880 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800586c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005872:	2b00      	cmp	r3, #0
 8005874:	d004      	beq.n	8005880 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800587e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a39      	ldr	r2, [pc, #228]	@ (800596c <DMA_SetConfig+0x21c>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d04a      	beq.n	8005920 <DMA_SetConfig+0x1d0>
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a38      	ldr	r2, [pc, #224]	@ (8005970 <DMA_SetConfig+0x220>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d045      	beq.n	8005920 <DMA_SetConfig+0x1d0>
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a36      	ldr	r2, [pc, #216]	@ (8005974 <DMA_SetConfig+0x224>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d040      	beq.n	8005920 <DMA_SetConfig+0x1d0>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a35      	ldr	r2, [pc, #212]	@ (8005978 <DMA_SetConfig+0x228>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d03b      	beq.n	8005920 <DMA_SetConfig+0x1d0>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a33      	ldr	r2, [pc, #204]	@ (800597c <DMA_SetConfig+0x22c>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d036      	beq.n	8005920 <DMA_SetConfig+0x1d0>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a32      	ldr	r2, [pc, #200]	@ (8005980 <DMA_SetConfig+0x230>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d031      	beq.n	8005920 <DMA_SetConfig+0x1d0>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a30      	ldr	r2, [pc, #192]	@ (8005984 <DMA_SetConfig+0x234>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d02c      	beq.n	8005920 <DMA_SetConfig+0x1d0>
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a2f      	ldr	r2, [pc, #188]	@ (8005988 <DMA_SetConfig+0x238>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d027      	beq.n	8005920 <DMA_SetConfig+0x1d0>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a2d      	ldr	r2, [pc, #180]	@ (800598c <DMA_SetConfig+0x23c>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d022      	beq.n	8005920 <DMA_SetConfig+0x1d0>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a2c      	ldr	r2, [pc, #176]	@ (8005990 <DMA_SetConfig+0x240>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d01d      	beq.n	8005920 <DMA_SetConfig+0x1d0>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a2a      	ldr	r2, [pc, #168]	@ (8005994 <DMA_SetConfig+0x244>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d018      	beq.n	8005920 <DMA_SetConfig+0x1d0>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a29      	ldr	r2, [pc, #164]	@ (8005998 <DMA_SetConfig+0x248>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d013      	beq.n	8005920 <DMA_SetConfig+0x1d0>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a27      	ldr	r2, [pc, #156]	@ (800599c <DMA_SetConfig+0x24c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d00e      	beq.n	8005920 <DMA_SetConfig+0x1d0>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a26      	ldr	r2, [pc, #152]	@ (80059a0 <DMA_SetConfig+0x250>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d009      	beq.n	8005920 <DMA_SetConfig+0x1d0>
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a24      	ldr	r2, [pc, #144]	@ (80059a4 <DMA_SetConfig+0x254>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d004      	beq.n	8005920 <DMA_SetConfig+0x1d0>
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a23      	ldr	r2, [pc, #140]	@ (80059a8 <DMA_SetConfig+0x258>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d101      	bne.n	8005924 <DMA_SetConfig+0x1d4>
 8005920:	2301      	movs	r3, #1
 8005922:	e000      	b.n	8005926 <DMA_SetConfig+0x1d6>
 8005924:	2300      	movs	r3, #0
 8005926:	2b00      	cmp	r3, #0
 8005928:	d059      	beq.n	80059de <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800592e:	f003 031f 	and.w	r3, r3, #31
 8005932:	223f      	movs	r2, #63	@ 0x3f
 8005934:	409a      	lsls	r2, r3
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005948:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	683a      	ldr	r2, [r7, #0]
 8005950:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	2b40      	cmp	r3, #64	@ 0x40
 8005958:	d138      	bne.n	80059cc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800596a:	e086      	b.n	8005a7a <DMA_SetConfig+0x32a>
 800596c:	40020010 	.word	0x40020010
 8005970:	40020028 	.word	0x40020028
 8005974:	40020040 	.word	0x40020040
 8005978:	40020058 	.word	0x40020058
 800597c:	40020070 	.word	0x40020070
 8005980:	40020088 	.word	0x40020088
 8005984:	400200a0 	.word	0x400200a0
 8005988:	400200b8 	.word	0x400200b8
 800598c:	40020410 	.word	0x40020410
 8005990:	40020428 	.word	0x40020428
 8005994:	40020440 	.word	0x40020440
 8005998:	40020458 	.word	0x40020458
 800599c:	40020470 	.word	0x40020470
 80059a0:	40020488 	.word	0x40020488
 80059a4:	400204a0 	.word	0x400204a0
 80059a8:	400204b8 	.word	0x400204b8
 80059ac:	58025408 	.word	0x58025408
 80059b0:	5802541c 	.word	0x5802541c
 80059b4:	58025430 	.word	0x58025430
 80059b8:	58025444 	.word	0x58025444
 80059bc:	58025458 	.word	0x58025458
 80059c0:	5802546c 	.word	0x5802546c
 80059c4:	58025480 	.word	0x58025480
 80059c8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	60da      	str	r2, [r3, #12]
}
 80059dc:	e04d      	b.n	8005a7a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a29      	ldr	r2, [pc, #164]	@ (8005a88 <DMA_SetConfig+0x338>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d022      	beq.n	8005a2e <DMA_SetConfig+0x2de>
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a27      	ldr	r2, [pc, #156]	@ (8005a8c <DMA_SetConfig+0x33c>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d01d      	beq.n	8005a2e <DMA_SetConfig+0x2de>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a26      	ldr	r2, [pc, #152]	@ (8005a90 <DMA_SetConfig+0x340>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d018      	beq.n	8005a2e <DMA_SetConfig+0x2de>
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a24      	ldr	r2, [pc, #144]	@ (8005a94 <DMA_SetConfig+0x344>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d013      	beq.n	8005a2e <DMA_SetConfig+0x2de>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a23      	ldr	r2, [pc, #140]	@ (8005a98 <DMA_SetConfig+0x348>)
 8005a0c:	4293      	cmp	r3, r2
 8005a0e:	d00e      	beq.n	8005a2e <DMA_SetConfig+0x2de>
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	4a21      	ldr	r2, [pc, #132]	@ (8005a9c <DMA_SetConfig+0x34c>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d009      	beq.n	8005a2e <DMA_SetConfig+0x2de>
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	4a20      	ldr	r2, [pc, #128]	@ (8005aa0 <DMA_SetConfig+0x350>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d004      	beq.n	8005a2e <DMA_SetConfig+0x2de>
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4a1e      	ldr	r2, [pc, #120]	@ (8005aa4 <DMA_SetConfig+0x354>)
 8005a2a:	4293      	cmp	r3, r2
 8005a2c:	d101      	bne.n	8005a32 <DMA_SetConfig+0x2e2>
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e000      	b.n	8005a34 <DMA_SetConfig+0x2e4>
 8005a32:	2300      	movs	r3, #0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d020      	beq.n	8005a7a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a3c:	f003 031f 	and.w	r3, r3, #31
 8005a40:	2201      	movs	r2, #1
 8005a42:	409a      	lsls	r2, r3
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	2b40      	cmp	r3, #64	@ 0x40
 8005a56:	d108      	bne.n	8005a6a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68ba      	ldr	r2, [r7, #8]
 8005a66:	60da      	str	r2, [r3, #12]
}
 8005a68:	e007      	b.n	8005a7a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	60da      	str	r2, [r3, #12]
}
 8005a7a:	bf00      	nop
 8005a7c:	371c      	adds	r7, #28
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	58025408 	.word	0x58025408
 8005a8c:	5802541c 	.word	0x5802541c
 8005a90:	58025430 	.word	0x58025430
 8005a94:	58025444 	.word	0x58025444
 8005a98:	58025458 	.word	0x58025458
 8005a9c:	5802546c 	.word	0x5802546c
 8005aa0:	58025480 	.word	0x58025480
 8005aa4:	58025494 	.word	0x58025494

08005aa8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b085      	sub	sp, #20
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a42      	ldr	r2, [pc, #264]	@ (8005bc0 <DMA_CalcBaseAndBitshift+0x118>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d04a      	beq.n	8005b50 <DMA_CalcBaseAndBitshift+0xa8>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a41      	ldr	r2, [pc, #260]	@ (8005bc4 <DMA_CalcBaseAndBitshift+0x11c>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d045      	beq.n	8005b50 <DMA_CalcBaseAndBitshift+0xa8>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a3f      	ldr	r2, [pc, #252]	@ (8005bc8 <DMA_CalcBaseAndBitshift+0x120>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d040      	beq.n	8005b50 <DMA_CalcBaseAndBitshift+0xa8>
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a3e      	ldr	r2, [pc, #248]	@ (8005bcc <DMA_CalcBaseAndBitshift+0x124>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d03b      	beq.n	8005b50 <DMA_CalcBaseAndBitshift+0xa8>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a3c      	ldr	r2, [pc, #240]	@ (8005bd0 <DMA_CalcBaseAndBitshift+0x128>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d036      	beq.n	8005b50 <DMA_CalcBaseAndBitshift+0xa8>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a3b      	ldr	r2, [pc, #236]	@ (8005bd4 <DMA_CalcBaseAndBitshift+0x12c>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d031      	beq.n	8005b50 <DMA_CalcBaseAndBitshift+0xa8>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a39      	ldr	r2, [pc, #228]	@ (8005bd8 <DMA_CalcBaseAndBitshift+0x130>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d02c      	beq.n	8005b50 <DMA_CalcBaseAndBitshift+0xa8>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	4a38      	ldr	r2, [pc, #224]	@ (8005bdc <DMA_CalcBaseAndBitshift+0x134>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d027      	beq.n	8005b50 <DMA_CalcBaseAndBitshift+0xa8>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	4a36      	ldr	r2, [pc, #216]	@ (8005be0 <DMA_CalcBaseAndBitshift+0x138>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d022      	beq.n	8005b50 <DMA_CalcBaseAndBitshift+0xa8>
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a35      	ldr	r2, [pc, #212]	@ (8005be4 <DMA_CalcBaseAndBitshift+0x13c>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d01d      	beq.n	8005b50 <DMA_CalcBaseAndBitshift+0xa8>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a33      	ldr	r2, [pc, #204]	@ (8005be8 <DMA_CalcBaseAndBitshift+0x140>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d018      	beq.n	8005b50 <DMA_CalcBaseAndBitshift+0xa8>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a32      	ldr	r2, [pc, #200]	@ (8005bec <DMA_CalcBaseAndBitshift+0x144>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d013      	beq.n	8005b50 <DMA_CalcBaseAndBitshift+0xa8>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a30      	ldr	r2, [pc, #192]	@ (8005bf0 <DMA_CalcBaseAndBitshift+0x148>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d00e      	beq.n	8005b50 <DMA_CalcBaseAndBitshift+0xa8>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a2f      	ldr	r2, [pc, #188]	@ (8005bf4 <DMA_CalcBaseAndBitshift+0x14c>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d009      	beq.n	8005b50 <DMA_CalcBaseAndBitshift+0xa8>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a2d      	ldr	r2, [pc, #180]	@ (8005bf8 <DMA_CalcBaseAndBitshift+0x150>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d004      	beq.n	8005b50 <DMA_CalcBaseAndBitshift+0xa8>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a2c      	ldr	r2, [pc, #176]	@ (8005bfc <DMA_CalcBaseAndBitshift+0x154>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d101      	bne.n	8005b54 <DMA_CalcBaseAndBitshift+0xac>
 8005b50:	2301      	movs	r3, #1
 8005b52:	e000      	b.n	8005b56 <DMA_CalcBaseAndBitshift+0xae>
 8005b54:	2300      	movs	r3, #0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d024      	beq.n	8005ba4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	3b10      	subs	r3, #16
 8005b62:	4a27      	ldr	r2, [pc, #156]	@ (8005c00 <DMA_CalcBaseAndBitshift+0x158>)
 8005b64:	fba2 2303 	umull	r2, r3, r2, r3
 8005b68:	091b      	lsrs	r3, r3, #4
 8005b6a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f003 0307 	and.w	r3, r3, #7
 8005b72:	4a24      	ldr	r2, [pc, #144]	@ (8005c04 <DMA_CalcBaseAndBitshift+0x15c>)
 8005b74:	5cd3      	ldrb	r3, [r2, r3]
 8005b76:	461a      	mov	r2, r3
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2b03      	cmp	r3, #3
 8005b80:	d908      	bls.n	8005b94 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	4b1f      	ldr	r3, [pc, #124]	@ (8005c08 <DMA_CalcBaseAndBitshift+0x160>)
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	1d1a      	adds	r2, r3, #4
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	659a      	str	r2, [r3, #88]	@ 0x58
 8005b92:	e00d      	b.n	8005bb0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	461a      	mov	r2, r3
 8005b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8005c08 <DMA_CalcBaseAndBitshift+0x160>)
 8005b9c:	4013      	ands	r3, r2
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ba2:	e005      	b.n	8005bb0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	40020010 	.word	0x40020010
 8005bc4:	40020028 	.word	0x40020028
 8005bc8:	40020040 	.word	0x40020040
 8005bcc:	40020058 	.word	0x40020058
 8005bd0:	40020070 	.word	0x40020070
 8005bd4:	40020088 	.word	0x40020088
 8005bd8:	400200a0 	.word	0x400200a0
 8005bdc:	400200b8 	.word	0x400200b8
 8005be0:	40020410 	.word	0x40020410
 8005be4:	40020428 	.word	0x40020428
 8005be8:	40020440 	.word	0x40020440
 8005bec:	40020458 	.word	0x40020458
 8005bf0:	40020470 	.word	0x40020470
 8005bf4:	40020488 	.word	0x40020488
 8005bf8:	400204a0 	.word	0x400204a0
 8005bfc:	400204b8 	.word	0x400204b8
 8005c00:	aaaaaaab 	.word	0xaaaaaaab
 8005c04:	08014a40 	.word	0x08014a40
 8005c08:	fffffc00 	.word	0xfffffc00

08005c0c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b085      	sub	sp, #20
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c14:	2300      	movs	r3, #0
 8005c16:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d120      	bne.n	8005c62 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c24:	2b03      	cmp	r3, #3
 8005c26:	d858      	bhi.n	8005cda <DMA_CheckFifoParam+0xce>
 8005c28:	a201      	add	r2, pc, #4	@ (adr r2, 8005c30 <DMA_CheckFifoParam+0x24>)
 8005c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2e:	bf00      	nop
 8005c30:	08005c41 	.word	0x08005c41
 8005c34:	08005c53 	.word	0x08005c53
 8005c38:	08005c41 	.word	0x08005c41
 8005c3c:	08005cdb 	.word	0x08005cdb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c44:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d048      	beq.n	8005cde <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005c50:	e045      	b.n	8005cde <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c56:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005c5a:	d142      	bne.n	8005ce2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005c60:	e03f      	b.n	8005ce2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	699b      	ldr	r3, [r3, #24]
 8005c66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005c6a:	d123      	bne.n	8005cb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c70:	2b03      	cmp	r3, #3
 8005c72:	d838      	bhi.n	8005ce6 <DMA_CheckFifoParam+0xda>
 8005c74:	a201      	add	r2, pc, #4	@ (adr r2, 8005c7c <DMA_CheckFifoParam+0x70>)
 8005c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7a:	bf00      	nop
 8005c7c:	08005c8d 	.word	0x08005c8d
 8005c80:	08005c93 	.word	0x08005c93
 8005c84:	08005c8d 	.word	0x08005c8d
 8005c88:	08005ca5 	.word	0x08005ca5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	73fb      	strb	r3, [r7, #15]
        break;
 8005c90:	e030      	b.n	8005cf4 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c96:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d025      	beq.n	8005cea <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005ca2:	e022      	b.n	8005cea <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005cac:	d11f      	bne.n	8005cee <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005cb2:	e01c      	b.n	8005cee <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d902      	bls.n	8005cc2 <DMA_CheckFifoParam+0xb6>
 8005cbc:	2b03      	cmp	r3, #3
 8005cbe:	d003      	beq.n	8005cc8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005cc0:	e018      	b.n	8005cf4 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	73fb      	strb	r3, [r7, #15]
        break;
 8005cc6:	e015      	b.n	8005cf4 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ccc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00e      	beq.n	8005cf2 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	73fb      	strb	r3, [r7, #15]
    break;
 8005cd8:	e00b      	b.n	8005cf2 <DMA_CheckFifoParam+0xe6>
        break;
 8005cda:	bf00      	nop
 8005cdc:	e00a      	b.n	8005cf4 <DMA_CheckFifoParam+0xe8>
        break;
 8005cde:	bf00      	nop
 8005ce0:	e008      	b.n	8005cf4 <DMA_CheckFifoParam+0xe8>
        break;
 8005ce2:	bf00      	nop
 8005ce4:	e006      	b.n	8005cf4 <DMA_CheckFifoParam+0xe8>
        break;
 8005ce6:	bf00      	nop
 8005ce8:	e004      	b.n	8005cf4 <DMA_CheckFifoParam+0xe8>
        break;
 8005cea:	bf00      	nop
 8005cec:	e002      	b.n	8005cf4 <DMA_CheckFifoParam+0xe8>
        break;
 8005cee:	bf00      	nop
 8005cf0:	e000      	b.n	8005cf4 <DMA_CheckFifoParam+0xe8>
    break;
 8005cf2:	bf00      	nop
    }
  }

  return status;
 8005cf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop

08005d04 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a38      	ldr	r2, [pc, #224]	@ (8005df8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d022      	beq.n	8005d62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a36      	ldr	r2, [pc, #216]	@ (8005dfc <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d01d      	beq.n	8005d62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a35      	ldr	r2, [pc, #212]	@ (8005e00 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d018      	beq.n	8005d62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a33      	ldr	r2, [pc, #204]	@ (8005e04 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d013      	beq.n	8005d62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a32      	ldr	r2, [pc, #200]	@ (8005e08 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d00e      	beq.n	8005d62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a30      	ldr	r2, [pc, #192]	@ (8005e0c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d009      	beq.n	8005d62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a2f      	ldr	r2, [pc, #188]	@ (8005e10 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d004      	beq.n	8005d62 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a2d      	ldr	r2, [pc, #180]	@ (8005e14 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d101      	bne.n	8005d66 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8005d62:	2301      	movs	r3, #1
 8005d64:	e000      	b.n	8005d68 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005d66:	2300      	movs	r3, #0
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d01a      	beq.n	8005da2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	3b08      	subs	r3, #8
 8005d74:	4a28      	ldr	r2, [pc, #160]	@ (8005e18 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005d76:	fba2 2303 	umull	r2, r3, r2, r3
 8005d7a:	091b      	lsrs	r3, r3, #4
 8005d7c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	4b26      	ldr	r3, [pc, #152]	@ (8005e1c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005d82:	4413      	add	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	461a      	mov	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a24      	ldr	r2, [pc, #144]	@ (8005e20 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005d90:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	f003 031f 	and.w	r3, r3, #31
 8005d98:	2201      	movs	r2, #1
 8005d9a:	409a      	lsls	r2, r3
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005da0:	e024      	b.n	8005dec <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	3b10      	subs	r3, #16
 8005daa:	4a1e      	ldr	r2, [pc, #120]	@ (8005e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005dac:	fba2 2303 	umull	r2, r3, r2, r3
 8005db0:	091b      	lsrs	r3, r3, #4
 8005db2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	4a1c      	ldr	r2, [pc, #112]	@ (8005e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d806      	bhi.n	8005dca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	4a1b      	ldr	r2, [pc, #108]	@ (8005e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d902      	bls.n	8005dca <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	3308      	adds	r3, #8
 8005dc8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	4b18      	ldr	r3, [pc, #96]	@ (8005e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005dce:	4413      	add	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	4a16      	ldr	r2, [pc, #88]	@ (8005e34 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005ddc:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f003 031f 	and.w	r3, r3, #31
 8005de4:	2201      	movs	r2, #1
 8005de6:	409a      	lsls	r2, r3
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005dec:	bf00      	nop
 8005dee:	3714      	adds	r7, #20
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	58025408 	.word	0x58025408
 8005dfc:	5802541c 	.word	0x5802541c
 8005e00:	58025430 	.word	0x58025430
 8005e04:	58025444 	.word	0x58025444
 8005e08:	58025458 	.word	0x58025458
 8005e0c:	5802546c 	.word	0x5802546c
 8005e10:	58025480 	.word	0x58025480
 8005e14:	58025494 	.word	0x58025494
 8005e18:	cccccccd 	.word	0xcccccccd
 8005e1c:	16009600 	.word	0x16009600
 8005e20:	58025880 	.word	0x58025880
 8005e24:	aaaaaaab 	.word	0xaaaaaaab
 8005e28:	400204b8 	.word	0x400204b8
 8005e2c:	4002040f 	.word	0x4002040f
 8005e30:	10008200 	.word	0x10008200
 8005e34:	40020880 	.word	0x40020880

08005e38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	685b      	ldr	r3, [r3, #4]
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d04a      	beq.n	8005ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2b08      	cmp	r3, #8
 8005e52:	d847      	bhi.n	8005ee4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a25      	ldr	r2, [pc, #148]	@ (8005ef0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d022      	beq.n	8005ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a24      	ldr	r2, [pc, #144]	@ (8005ef4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d01d      	beq.n	8005ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a22      	ldr	r2, [pc, #136]	@ (8005ef8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d018      	beq.n	8005ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a21      	ldr	r2, [pc, #132]	@ (8005efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d013      	beq.n	8005ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a1f      	ldr	r2, [pc, #124]	@ (8005f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d00e      	beq.n	8005ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a1e      	ldr	r2, [pc, #120]	@ (8005f04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d009      	beq.n	8005ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a1c      	ldr	r2, [pc, #112]	@ (8005f08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d004      	beq.n	8005ea4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a1b      	ldr	r2, [pc, #108]	@ (8005f0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d101      	bne.n	8005ea8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e000      	b.n	8005eaa <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00a      	beq.n	8005ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	4b17      	ldr	r3, [pc, #92]	@ (8005f10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005eb2:	4413      	add	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a15      	ldr	r2, [pc, #84]	@ (8005f14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005ec0:	671a      	str	r2, [r3, #112]	@ 0x70
 8005ec2:	e009      	b.n	8005ed8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	4b14      	ldr	r3, [pc, #80]	@ (8005f18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005ec8:	4413      	add	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	461a      	mov	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a11      	ldr	r2, [pc, #68]	@ (8005f1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005ed6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	3b01      	subs	r3, #1
 8005edc:	2201      	movs	r2, #1
 8005ede:	409a      	lsls	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8005ee4:	bf00      	nop
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	58025408 	.word	0x58025408
 8005ef4:	5802541c 	.word	0x5802541c
 8005ef8:	58025430 	.word	0x58025430
 8005efc:	58025444 	.word	0x58025444
 8005f00:	58025458 	.word	0x58025458
 8005f04:	5802546c 	.word	0x5802546c
 8005f08:	58025480 	.word	0x58025480
 8005f0c:	58025494 	.word	0x58025494
 8005f10:	1600963f 	.word	0x1600963f
 8005f14:	58025940 	.word	0x58025940
 8005f18:	1000823f 	.word	0x1000823f
 8005f1c:	40020940 	.word	0x40020940

08005f20 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8005f20:	b480      	push	{r7}
 8005f22:	b087      	sub	sp, #28
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	60f8      	str	r0, [r7, #12]
 8005f28:	460b      	mov	r3, r1
 8005f2a:	607a      	str	r2, [r7, #4]
 8005f2c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e00a      	b.n	8005f52 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8005f3c:	7afb      	ldrb	r3, [r7, #11]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d103      	bne.n	8005f4a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	605a      	str	r2, [r3, #4]
      break;
 8005f48:	e002      	b.n	8005f50 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	75fb      	strb	r3, [r7, #23]
      break;
 8005f4e:	bf00      	nop
  }

  return status;
 8005f50:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	371c      	adds	r7, #28
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr

08005f5e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8005f5e:	b480      	push	{r7}
 8005f60:	b083      	sub	sp, #12
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d101      	bne.n	8005f72 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e003      	b.n	8005f7a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8005f78:	2300      	movs	r3, #0
  }
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
	...

08005f88 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b086      	sub	sp, #24
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	0c1b      	lsrs	r3, r3, #16
 8005f96:	f003 0303 	and.w	r3, r3, #3
 8005f9a:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 031f 	and.w	r3, r3, #31
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8005faa:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8005fac:	f7fd fecc 	bl	8003d48 <HAL_GetCurrentCPUID>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b03      	cmp	r3, #3
 8005fb4:	d105      	bne.n	8005fc2 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	011a      	lsls	r2, r3, #4
 8005fba:	4b0f      	ldr	r3, [pc, #60]	@ (8005ff8 <HAL_EXTI_IRQHandler+0x70>)
 8005fbc:	4413      	add	r3, r2
 8005fbe:	617b      	str	r3, [r7, #20]
 8005fc0:	e004      	b.n	8005fcc <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8005fc2:	693b      	ldr	r3, [r7, #16]
 8005fc4:	011a      	lsls	r2, r3, #4
 8005fc6:	4b0d      	ldr	r3, [pc, #52]	@ (8005ffc <HAL_EXTI_IRQHandler+0x74>)
 8005fc8:	4413      	add	r3, r2
 8005fca:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	68fa      	ldr	r2, [r7, #12]
 8005fd2:	4013      	ands	r3, r2
 8005fd4:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d009      	beq.n	8005ff0 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d002      	beq.n	8005ff0 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	4798      	blx	r3
    }
  }
}
 8005ff0:	bf00      	nop
 8005ff2:	3718      	adds	r7, #24
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}
 8005ff8:	58000088 	.word	0x58000088
 8005ffc:	580000c8 	.word	0x580000c8

08006000 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006000:	b480      	push	{r7}
 8006002:	b089      	sub	sp, #36	@ 0x24
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800600a:	2300      	movs	r3, #0
 800600c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800600e:	4b89      	ldr	r3, [pc, #548]	@ (8006234 <HAL_GPIO_Init+0x234>)
 8006010:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006012:	e194      	b.n	800633e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	2101      	movs	r1, #1
 800601a:	69fb      	ldr	r3, [r7, #28]
 800601c:	fa01 f303 	lsl.w	r3, r1, r3
 8006020:	4013      	ands	r3, r2
 8006022:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006024:	693b      	ldr	r3, [r7, #16]
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 8186 	beq.w	8006338 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f003 0303 	and.w	r3, r3, #3
 8006034:	2b01      	cmp	r3, #1
 8006036:	d005      	beq.n	8006044 <HAL_GPIO_Init+0x44>
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f003 0303 	and.w	r3, r3, #3
 8006040:	2b02      	cmp	r3, #2
 8006042:	d130      	bne.n	80060a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	005b      	lsls	r3, r3, #1
 800604e:	2203      	movs	r2, #3
 8006050:	fa02 f303 	lsl.w	r3, r2, r3
 8006054:	43db      	mvns	r3, r3
 8006056:	69ba      	ldr	r2, [r7, #24]
 8006058:	4013      	ands	r3, r2
 800605a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	68da      	ldr	r2, [r3, #12]
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	005b      	lsls	r3, r3, #1
 8006064:	fa02 f303 	lsl.w	r3, r2, r3
 8006068:	69ba      	ldr	r2, [r7, #24]
 800606a:	4313      	orrs	r3, r2
 800606c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800607a:	2201      	movs	r2, #1
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	fa02 f303 	lsl.w	r3, r2, r3
 8006082:	43db      	mvns	r3, r3
 8006084:	69ba      	ldr	r2, [r7, #24]
 8006086:	4013      	ands	r3, r2
 8006088:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	091b      	lsrs	r3, r3, #4
 8006090:	f003 0201 	and.w	r2, r3, #1
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	fa02 f303 	lsl.w	r3, r2, r3
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	4313      	orrs	r3, r2
 800609e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	69ba      	ldr	r2, [r7, #24]
 80060a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	f003 0303 	and.w	r3, r3, #3
 80060ae:	2b03      	cmp	r3, #3
 80060b0:	d017      	beq.n	80060e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	005b      	lsls	r3, r3, #1
 80060bc:	2203      	movs	r2, #3
 80060be:	fa02 f303 	lsl.w	r3, r2, r3
 80060c2:	43db      	mvns	r3, r3
 80060c4:	69ba      	ldr	r2, [r7, #24]
 80060c6:	4013      	ands	r3, r2
 80060c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	689a      	ldr	r2, [r3, #8]
 80060ce:	69fb      	ldr	r3, [r7, #28]
 80060d0:	005b      	lsls	r3, r3, #1
 80060d2:	fa02 f303 	lsl.w	r3, r2, r3
 80060d6:	69ba      	ldr	r2, [r7, #24]
 80060d8:	4313      	orrs	r3, r2
 80060da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	69ba      	ldr	r2, [r7, #24]
 80060e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f003 0303 	and.w	r3, r3, #3
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d123      	bne.n	8006136 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	08da      	lsrs	r2, r3, #3
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	3208      	adds	r2, #8
 80060f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	f003 0307 	and.w	r3, r3, #7
 8006102:	009b      	lsls	r3, r3, #2
 8006104:	220f      	movs	r2, #15
 8006106:	fa02 f303 	lsl.w	r3, r2, r3
 800610a:	43db      	mvns	r3, r3
 800610c:	69ba      	ldr	r2, [r7, #24]
 800610e:	4013      	ands	r3, r2
 8006110:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	691a      	ldr	r2, [r3, #16]
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	f003 0307 	and.w	r3, r3, #7
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	fa02 f303 	lsl.w	r3, r2, r3
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	4313      	orrs	r3, r2
 8006126:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	08da      	lsrs	r2, r3, #3
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	3208      	adds	r2, #8
 8006130:	69b9      	ldr	r1, [r7, #24]
 8006132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	005b      	lsls	r3, r3, #1
 8006140:	2203      	movs	r2, #3
 8006142:	fa02 f303 	lsl.w	r3, r2, r3
 8006146:	43db      	mvns	r3, r3
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	4013      	ands	r3, r2
 800614c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f003 0203 	and.w	r2, r3, #3
 8006156:	69fb      	ldr	r3, [r7, #28]
 8006158:	005b      	lsls	r3, r3, #1
 800615a:	fa02 f303 	lsl.w	r3, r2, r3
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	4313      	orrs	r3, r2
 8006162:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 80e0 	beq.w	8006338 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006178:	4b2f      	ldr	r3, [pc, #188]	@ (8006238 <HAL_GPIO_Init+0x238>)
 800617a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800617e:	4a2e      	ldr	r2, [pc, #184]	@ (8006238 <HAL_GPIO_Init+0x238>)
 8006180:	f043 0302 	orr.w	r3, r3, #2
 8006184:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006188:	4b2b      	ldr	r3, [pc, #172]	@ (8006238 <HAL_GPIO_Init+0x238>)
 800618a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800618e:	f003 0302 	and.w	r3, r3, #2
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006196:	4a29      	ldr	r2, [pc, #164]	@ (800623c <HAL_GPIO_Init+0x23c>)
 8006198:	69fb      	ldr	r3, [r7, #28]
 800619a:	089b      	lsrs	r3, r3, #2
 800619c:	3302      	adds	r3, #2
 800619e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	f003 0303 	and.w	r3, r3, #3
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	220f      	movs	r2, #15
 80061ae:	fa02 f303 	lsl.w	r3, r2, r3
 80061b2:	43db      	mvns	r3, r3
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	4013      	ands	r3, r2
 80061b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	4a20      	ldr	r2, [pc, #128]	@ (8006240 <HAL_GPIO_Init+0x240>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d052      	beq.n	8006268 <HAL_GPIO_Init+0x268>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a1f      	ldr	r2, [pc, #124]	@ (8006244 <HAL_GPIO_Init+0x244>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d031      	beq.n	800622e <HAL_GPIO_Init+0x22e>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	4a1e      	ldr	r2, [pc, #120]	@ (8006248 <HAL_GPIO_Init+0x248>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d02b      	beq.n	800622a <HAL_GPIO_Init+0x22a>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	4a1d      	ldr	r2, [pc, #116]	@ (800624c <HAL_GPIO_Init+0x24c>)
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d025      	beq.n	8006226 <HAL_GPIO_Init+0x226>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	4a1c      	ldr	r2, [pc, #112]	@ (8006250 <HAL_GPIO_Init+0x250>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d01f      	beq.n	8006222 <HAL_GPIO_Init+0x222>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	4a1b      	ldr	r2, [pc, #108]	@ (8006254 <HAL_GPIO_Init+0x254>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d019      	beq.n	800621e <HAL_GPIO_Init+0x21e>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	4a1a      	ldr	r2, [pc, #104]	@ (8006258 <HAL_GPIO_Init+0x258>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d013      	beq.n	800621a <HAL_GPIO_Init+0x21a>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	4a19      	ldr	r2, [pc, #100]	@ (800625c <HAL_GPIO_Init+0x25c>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d00d      	beq.n	8006216 <HAL_GPIO_Init+0x216>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	4a18      	ldr	r2, [pc, #96]	@ (8006260 <HAL_GPIO_Init+0x260>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	d007      	beq.n	8006212 <HAL_GPIO_Init+0x212>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a17      	ldr	r2, [pc, #92]	@ (8006264 <HAL_GPIO_Init+0x264>)
 8006206:	4293      	cmp	r3, r2
 8006208:	d101      	bne.n	800620e <HAL_GPIO_Init+0x20e>
 800620a:	2309      	movs	r3, #9
 800620c:	e02d      	b.n	800626a <HAL_GPIO_Init+0x26a>
 800620e:	230a      	movs	r3, #10
 8006210:	e02b      	b.n	800626a <HAL_GPIO_Init+0x26a>
 8006212:	2308      	movs	r3, #8
 8006214:	e029      	b.n	800626a <HAL_GPIO_Init+0x26a>
 8006216:	2307      	movs	r3, #7
 8006218:	e027      	b.n	800626a <HAL_GPIO_Init+0x26a>
 800621a:	2306      	movs	r3, #6
 800621c:	e025      	b.n	800626a <HAL_GPIO_Init+0x26a>
 800621e:	2305      	movs	r3, #5
 8006220:	e023      	b.n	800626a <HAL_GPIO_Init+0x26a>
 8006222:	2304      	movs	r3, #4
 8006224:	e021      	b.n	800626a <HAL_GPIO_Init+0x26a>
 8006226:	2303      	movs	r3, #3
 8006228:	e01f      	b.n	800626a <HAL_GPIO_Init+0x26a>
 800622a:	2302      	movs	r3, #2
 800622c:	e01d      	b.n	800626a <HAL_GPIO_Init+0x26a>
 800622e:	2301      	movs	r3, #1
 8006230:	e01b      	b.n	800626a <HAL_GPIO_Init+0x26a>
 8006232:	bf00      	nop
 8006234:	58000080 	.word	0x58000080
 8006238:	58024400 	.word	0x58024400
 800623c:	58000400 	.word	0x58000400
 8006240:	58020000 	.word	0x58020000
 8006244:	58020400 	.word	0x58020400
 8006248:	58020800 	.word	0x58020800
 800624c:	58020c00 	.word	0x58020c00
 8006250:	58021000 	.word	0x58021000
 8006254:	58021400 	.word	0x58021400
 8006258:	58021800 	.word	0x58021800
 800625c:	58021c00 	.word	0x58021c00
 8006260:	58022000 	.word	0x58022000
 8006264:	58022400 	.word	0x58022400
 8006268:	2300      	movs	r3, #0
 800626a:	69fa      	ldr	r2, [r7, #28]
 800626c:	f002 0203 	and.w	r2, r2, #3
 8006270:	0092      	lsls	r2, r2, #2
 8006272:	4093      	lsls	r3, r2
 8006274:	69ba      	ldr	r2, [r7, #24]
 8006276:	4313      	orrs	r3, r2
 8006278:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800627a:	4938      	ldr	r1, [pc, #224]	@ (800635c <HAL_GPIO_Init+0x35c>)
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	089b      	lsrs	r3, r3, #2
 8006280:	3302      	adds	r3, #2
 8006282:	69ba      	ldr	r2, [r7, #24]
 8006284:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006288:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006290:	693b      	ldr	r3, [r7, #16]
 8006292:	43db      	mvns	r3, r3
 8006294:	69ba      	ldr	r2, [r7, #24]
 8006296:	4013      	ands	r3, r2
 8006298:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80062a6:	69ba      	ldr	r2, [r7, #24]
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80062ae:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80062b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062ba:	685b      	ldr	r3, [r3, #4]
 80062bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	43db      	mvns	r3, r3
 80062c2:	69ba      	ldr	r2, [r7, #24]
 80062c4:	4013      	ands	r3, r2
 80062c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d003      	beq.n	80062dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80062d4:	69ba      	ldr	r2, [r7, #24]
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	4313      	orrs	r3, r2
 80062da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80062dc:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	43db      	mvns	r3, r3
 80062ee:	69ba      	ldr	r2, [r7, #24]
 80062f0:	4013      	ands	r3, r2
 80062f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d003      	beq.n	8006308 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	4313      	orrs	r3, r2
 8006306:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006314:	693b      	ldr	r3, [r7, #16]
 8006316:	43db      	mvns	r3, r3
 8006318:	69ba      	ldr	r2, [r7, #24]
 800631a:	4013      	ands	r3, r2
 800631c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d003      	beq.n	8006332 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	4313      	orrs	r3, r2
 8006330:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	3301      	adds	r3, #1
 800633c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	69fb      	ldr	r3, [r7, #28]
 8006344:	fa22 f303 	lsr.w	r3, r2, r3
 8006348:	2b00      	cmp	r3, #0
 800634a:	f47f ae63 	bne.w	8006014 <HAL_GPIO_Init+0x14>
  }
}
 800634e:	bf00      	nop
 8006350:	bf00      	nop
 8006352:	3724      	adds	r7, #36	@ 0x24
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	58000400 	.word	0x58000400

08006360 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	460b      	mov	r3, r1
 800636a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	691a      	ldr	r2, [r3, #16]
 8006370:	887b      	ldrh	r3, [r7, #2]
 8006372:	4013      	ands	r3, r2
 8006374:	2b00      	cmp	r3, #0
 8006376:	d002      	beq.n	800637e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006378:	2301      	movs	r3, #1
 800637a:	73fb      	strb	r3, [r7, #15]
 800637c:	e001      	b.n	8006382 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800637e:	2300      	movs	r3, #0
 8006380:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006382:	7bfb      	ldrb	r3, [r7, #15]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006390:	b480      	push	{r7}
 8006392:	b083      	sub	sp, #12
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	460b      	mov	r3, r1
 800639a:	807b      	strh	r3, [r7, #2]
 800639c:	4613      	mov	r3, r2
 800639e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80063a0:	787b      	ldrb	r3, [r7, #1]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063a6:	887a      	ldrh	r2, [r7, #2]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80063ac:	e003      	b.n	80063b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80063ae:	887b      	ldrh	r3, [r7, #2]
 80063b0:	041a      	lsls	r2, r3, #16
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	619a      	str	r2, [r3, #24]
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b085      	sub	sp, #20
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
 80063ca:	460b      	mov	r3, r1
 80063cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80063d4:	887a      	ldrh	r2, [r7, #2]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	4013      	ands	r3, r2
 80063da:	041a      	lsls	r2, r3, #16
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	43d9      	mvns	r1, r3
 80063e0:	887b      	ldrh	r3, [r7, #2]
 80063e2:	400b      	ands	r3, r1
 80063e4:	431a      	orrs	r2, r3
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	619a      	str	r2, [r3, #24]
}
 80063ea:	bf00      	nop
 80063ec:	3714      	adds	r7, #20
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
	...

080063f8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006400:	4a08      	ldr	r2, [pc, #32]	@ (8006424 <HAL_HSEM_FastTake+0x2c>)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	3320      	adds	r3, #32
 8006406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800640a:	4a07      	ldr	r2, [pc, #28]	@ (8006428 <HAL_HSEM_FastTake+0x30>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d101      	bne.n	8006414 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006410:	2300      	movs	r3, #0
 8006412:	e000      	b.n	8006416 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
}
 8006416:	4618      	mov	r0, r3
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	58026400 	.word	0x58026400
 8006428:	80000300 	.word	0x80000300

0800642c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006436:	4906      	ldr	r1, [pc, #24]	@ (8006450 <HAL_HSEM_Release+0x24>)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	58026400 	.word	0x58026400

08006454 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b086      	sub	sp, #24
 8006458:	af02      	add	r7, sp, #8
 800645a:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e0fe      	b.n	8006664 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800646c:	b2db      	uxtb	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d106      	bne.n	8006480 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f00b f950 	bl	8011720 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2203      	movs	r2, #3
 8006484:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	4618      	mov	r0, r3
 800648e:	f007 fd14 	bl	800deba <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6818      	ldr	r0, [r3, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	7c1a      	ldrb	r2, [r3, #16]
 800649a:	f88d 2000 	strb.w	r2, [sp]
 800649e:	3304      	adds	r3, #4
 80064a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80064a2:	f007 fbe5 	bl	800dc70 <USB_CoreInit>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d005      	beq.n	80064b8 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2202      	movs	r2, #2
 80064b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e0d5      	b.n	8006664 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2100      	movs	r1, #0
 80064be:	4618      	mov	r0, r3
 80064c0:	f007 fd0c 	bl	800dedc <USB_SetCurrentMode>
 80064c4:	4603      	mov	r3, r0
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d005      	beq.n	80064d6 <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2202      	movs	r2, #2
 80064ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e0c6      	b.n	8006664 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80064d6:	2300      	movs	r3, #0
 80064d8:	73fb      	strb	r3, [r7, #15]
 80064da:	e04a      	b.n	8006572 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80064dc:	7bfa      	ldrb	r2, [r7, #15]
 80064de:	6879      	ldr	r1, [r7, #4]
 80064e0:	4613      	mov	r3, r2
 80064e2:	00db      	lsls	r3, r3, #3
 80064e4:	4413      	add	r3, r2
 80064e6:	009b      	lsls	r3, r3, #2
 80064e8:	440b      	add	r3, r1
 80064ea:	3315      	adds	r3, #21
 80064ec:	2201      	movs	r2, #1
 80064ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80064f0:	7bfa      	ldrb	r2, [r7, #15]
 80064f2:	6879      	ldr	r1, [r7, #4]
 80064f4:	4613      	mov	r3, r2
 80064f6:	00db      	lsls	r3, r3, #3
 80064f8:	4413      	add	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	440b      	add	r3, r1
 80064fe:	3314      	adds	r3, #20
 8006500:	7bfa      	ldrb	r2, [r7, #15]
 8006502:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006504:	7bfa      	ldrb	r2, [r7, #15]
 8006506:	7bfb      	ldrb	r3, [r7, #15]
 8006508:	b298      	uxth	r0, r3
 800650a:	6879      	ldr	r1, [r7, #4]
 800650c:	4613      	mov	r3, r2
 800650e:	00db      	lsls	r3, r3, #3
 8006510:	4413      	add	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	440b      	add	r3, r1
 8006516:	332e      	adds	r3, #46	@ 0x2e
 8006518:	4602      	mov	r2, r0
 800651a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800651c:	7bfa      	ldrb	r2, [r7, #15]
 800651e:	6879      	ldr	r1, [r7, #4]
 8006520:	4613      	mov	r3, r2
 8006522:	00db      	lsls	r3, r3, #3
 8006524:	4413      	add	r3, r2
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	440b      	add	r3, r1
 800652a:	3318      	adds	r3, #24
 800652c:	2200      	movs	r2, #0
 800652e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006530:	7bfa      	ldrb	r2, [r7, #15]
 8006532:	6879      	ldr	r1, [r7, #4]
 8006534:	4613      	mov	r3, r2
 8006536:	00db      	lsls	r3, r3, #3
 8006538:	4413      	add	r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	440b      	add	r3, r1
 800653e:	331c      	adds	r3, #28
 8006540:	2200      	movs	r2, #0
 8006542:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006544:	7bfa      	ldrb	r2, [r7, #15]
 8006546:	6879      	ldr	r1, [r7, #4]
 8006548:	4613      	mov	r3, r2
 800654a:	00db      	lsls	r3, r3, #3
 800654c:	4413      	add	r3, r2
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	440b      	add	r3, r1
 8006552:	3320      	adds	r3, #32
 8006554:	2200      	movs	r2, #0
 8006556:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006558:	7bfa      	ldrb	r2, [r7, #15]
 800655a:	6879      	ldr	r1, [r7, #4]
 800655c:	4613      	mov	r3, r2
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	4413      	add	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	440b      	add	r3, r1
 8006566:	3324      	adds	r3, #36	@ 0x24
 8006568:	2200      	movs	r2, #0
 800656a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800656c:	7bfb      	ldrb	r3, [r7, #15]
 800656e:	3301      	adds	r3, #1
 8006570:	73fb      	strb	r3, [r7, #15]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	791b      	ldrb	r3, [r3, #4]
 8006576:	7bfa      	ldrb	r2, [r7, #15]
 8006578:	429a      	cmp	r2, r3
 800657a:	d3af      	bcc.n	80064dc <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800657c:	2300      	movs	r3, #0
 800657e:	73fb      	strb	r3, [r7, #15]
 8006580:	e044      	b.n	800660c <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006582:	7bfa      	ldrb	r2, [r7, #15]
 8006584:	6879      	ldr	r1, [r7, #4]
 8006586:	4613      	mov	r3, r2
 8006588:	00db      	lsls	r3, r3, #3
 800658a:	4413      	add	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	440b      	add	r3, r1
 8006590:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006594:	2200      	movs	r2, #0
 8006596:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006598:	7bfa      	ldrb	r2, [r7, #15]
 800659a:	6879      	ldr	r1, [r7, #4]
 800659c:	4613      	mov	r3, r2
 800659e:	00db      	lsls	r3, r3, #3
 80065a0:	4413      	add	r3, r2
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	440b      	add	r3, r1
 80065a6:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80065aa:	7bfa      	ldrb	r2, [r7, #15]
 80065ac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80065ae:	7bfa      	ldrb	r2, [r7, #15]
 80065b0:	6879      	ldr	r1, [r7, #4]
 80065b2:	4613      	mov	r3, r2
 80065b4:	00db      	lsls	r3, r3, #3
 80065b6:	4413      	add	r3, r2
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	440b      	add	r3, r1
 80065bc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80065c0:	2200      	movs	r2, #0
 80065c2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80065c4:	7bfa      	ldrb	r2, [r7, #15]
 80065c6:	6879      	ldr	r1, [r7, #4]
 80065c8:	4613      	mov	r3, r2
 80065ca:	00db      	lsls	r3, r3, #3
 80065cc:	4413      	add	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	440b      	add	r3, r1
 80065d2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80065d6:	2200      	movs	r2, #0
 80065d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80065da:	7bfa      	ldrb	r2, [r7, #15]
 80065dc:	6879      	ldr	r1, [r7, #4]
 80065de:	4613      	mov	r3, r2
 80065e0:	00db      	lsls	r3, r3, #3
 80065e2:	4413      	add	r3, r2
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	440b      	add	r3, r1
 80065e8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80065ec:	2200      	movs	r2, #0
 80065ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80065f0:	7bfa      	ldrb	r2, [r7, #15]
 80065f2:	6879      	ldr	r1, [r7, #4]
 80065f4:	4613      	mov	r3, r2
 80065f6:	00db      	lsls	r3, r3, #3
 80065f8:	4413      	add	r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	440b      	add	r3, r1
 80065fe:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006602:	2200      	movs	r2, #0
 8006604:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006606:	7bfb      	ldrb	r3, [r7, #15]
 8006608:	3301      	adds	r3, #1
 800660a:	73fb      	strb	r3, [r7, #15]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	791b      	ldrb	r3, [r3, #4]
 8006610:	7bfa      	ldrb	r2, [r7, #15]
 8006612:	429a      	cmp	r2, r3
 8006614:	d3b5      	bcc.n	8006582 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6818      	ldr	r0, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	7c1a      	ldrb	r2, [r3, #16]
 800661e:	f88d 2000 	strb.w	r2, [sp]
 8006622:	3304      	adds	r3, #4
 8006624:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006626:	f007 fca5 	bl	800df74 <USB_DevInit>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d005      	beq.n	800663c <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2202      	movs	r2, #2
 8006634:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006638:	2301      	movs	r3, #1
 800663a:	e013      	b.n	8006664 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2200      	movs	r2, #0
 8006640:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2201      	movs	r2, #1
 8006646:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	7b1b      	ldrb	r3, [r3, #12]
 800664e:	2b01      	cmp	r3, #1
 8006650:	d102      	bne.n	8006658 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f001 f96c 	bl	8007930 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4618      	mov	r0, r3
 800665e:	f008 fce4 	bl	800f02a <USB_DevDisconnect>

  return HAL_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	3710      	adds	r7, #16
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}

0800666c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b084      	sub	sp, #16
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006680:	2b01      	cmp	r3, #1
 8006682:	d101      	bne.n	8006688 <HAL_PCD_Start+0x1c>
 8006684:	2302      	movs	r3, #2
 8006686:	e022      	b.n	80066ce <HAL_PCD_Start+0x62>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006698:	2b00      	cmp	r3, #0
 800669a:	d009      	beq.n	80066b0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d105      	bne.n	80066b0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4618      	mov	r0, r3
 80066b6:	f007 fbef 	bl	800de98 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4618      	mov	r0, r3
 80066c0:	f008 fc92 	bl	800efe8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80066cc:	2300      	movs	r3, #0
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	3710      	adds	r7, #16
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80066d6:	b590      	push	{r4, r7, lr}
 80066d8:	b08d      	sub	sp, #52	@ 0x34
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4618      	mov	r0, r3
 80066ee:	f008 fd50 	bl	800f192 <USB_GetMode>
 80066f2:	4603      	mov	r3, r0
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f040 84b9 	bne.w	800706c <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4618      	mov	r0, r3
 8006700:	f008 fcb4 	bl	800f06c <USB_ReadInterrupts>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	f000 84af 	beq.w	800706a <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006712:	689b      	ldr	r3, [r3, #8]
 8006714:	0a1b      	lsrs	r3, r3, #8
 8006716:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4618      	mov	r0, r3
 8006726:	f008 fca1 	bl	800f06c <USB_ReadInterrupts>
 800672a:	4603      	mov	r3, r0
 800672c:	f003 0302 	and.w	r3, r3, #2
 8006730:	2b02      	cmp	r3, #2
 8006732:	d107      	bne.n	8006744 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695a      	ldr	r2, [r3, #20]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f002 0202 	and.w	r2, r2, #2
 8006742:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4618      	mov	r0, r3
 800674a:	f008 fc8f 	bl	800f06c <USB_ReadInterrupts>
 800674e:	4603      	mov	r3, r0
 8006750:	f003 0310 	and.w	r3, r3, #16
 8006754:	2b10      	cmp	r3, #16
 8006756:	d161      	bne.n	800681c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	699a      	ldr	r2, [r3, #24]
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	f022 0210 	bic.w	r2, r2, #16
 8006766:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006768:	6a3b      	ldr	r3, [r7, #32]
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	f003 020f 	and.w	r2, r3, #15
 8006774:	4613      	mov	r3, r2
 8006776:	00db      	lsls	r3, r3, #3
 8006778:	4413      	add	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006780:	687a      	ldr	r2, [r7, #4]
 8006782:	4413      	add	r3, r2
 8006784:	3304      	adds	r3, #4
 8006786:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006788:	69bb      	ldr	r3, [r7, #24]
 800678a:	0c5b      	lsrs	r3, r3, #17
 800678c:	f003 030f 	and.w	r3, r3, #15
 8006790:	2b02      	cmp	r3, #2
 8006792:	d124      	bne.n	80067de <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006794:	69ba      	ldr	r2, [r7, #24]
 8006796:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800679a:	4013      	ands	r3, r2
 800679c:	2b00      	cmp	r3, #0
 800679e:	d035      	beq.n	800680c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	091b      	lsrs	r3, r3, #4
 80067a8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80067aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067ae:	b29b      	uxth	r3, r3
 80067b0:	461a      	mov	r2, r3
 80067b2:	6a38      	ldr	r0, [r7, #32]
 80067b4:	f008 fac6 	bl	800ed44 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	68da      	ldr	r2, [r3, #12]
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	091b      	lsrs	r3, r3, #4
 80067c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067c4:	441a      	add	r2, r3
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	695a      	ldr	r2, [r3, #20]
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	091b      	lsrs	r3, r3, #4
 80067d2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067d6:	441a      	add	r2, r3
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	615a      	str	r2, [r3, #20]
 80067dc:	e016      	b.n	800680c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	0c5b      	lsrs	r3, r3, #17
 80067e2:	f003 030f 	and.w	r3, r3, #15
 80067e6:	2b06      	cmp	r3, #6
 80067e8:	d110      	bne.n	800680c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80067f0:	2208      	movs	r2, #8
 80067f2:	4619      	mov	r1, r3
 80067f4:	6a38      	ldr	r0, [r7, #32]
 80067f6:	f008 faa5 	bl	800ed44 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	695a      	ldr	r2, [r3, #20]
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	091b      	lsrs	r3, r3, #4
 8006802:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006806:	441a      	add	r2, r3
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	699a      	ldr	r2, [r3, #24]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f042 0210 	orr.w	r2, r2, #16
 800681a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4618      	mov	r0, r3
 8006822:	f008 fc23 	bl	800f06c <USB_ReadInterrupts>
 8006826:	4603      	mov	r3, r0
 8006828:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800682c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006830:	f040 80a7 	bne.w	8006982 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006834:	2300      	movs	r3, #0
 8006836:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4618      	mov	r0, r3
 800683e:	f008 fc28 	bl	800f092 <USB_ReadDevAllOutEpInterrupt>
 8006842:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006844:	e099      	b.n	800697a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006848:	f003 0301 	and.w	r3, r3, #1
 800684c:	2b00      	cmp	r3, #0
 800684e:	f000 808e 	beq.w	800696e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006858:	b2d2      	uxtb	r2, r2
 800685a:	4611      	mov	r1, r2
 800685c:	4618      	mov	r0, r3
 800685e:	f008 fc4c 	bl	800f0fa <USB_ReadDevOutEPInterrupt>
 8006862:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b00      	cmp	r3, #0
 800686c:	d00c      	beq.n	8006888 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800686e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006870:	015a      	lsls	r2, r3, #5
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	4413      	add	r3, r2
 8006876:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800687a:	461a      	mov	r2, r3
 800687c:	2301      	movs	r3, #1
 800687e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006880:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 fece 	bl	8007624 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006888:	693b      	ldr	r3, [r7, #16]
 800688a:	f003 0308 	and.w	r3, r3, #8
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00c      	beq.n	80068ac <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	69fb      	ldr	r3, [r7, #28]
 8006898:	4413      	add	r3, r2
 800689a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800689e:	461a      	mov	r2, r3
 80068a0:	2308      	movs	r3, #8
 80068a2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80068a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 ffa4 	bl	80077f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	f003 0310 	and.w	r3, r3, #16
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d008      	beq.n	80068c8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80068b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b8:	015a      	lsls	r2, r3, #5
 80068ba:	69fb      	ldr	r3, [r7, #28]
 80068bc:	4413      	add	r3, r2
 80068be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068c2:	461a      	mov	r2, r3
 80068c4:	2310      	movs	r3, #16
 80068c6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d030      	beq.n	8006934 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80068d2:	6a3b      	ldr	r3, [r7, #32]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068da:	2b80      	cmp	r3, #128	@ 0x80
 80068dc:	d109      	bne.n	80068f2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80068de:	69fb      	ldr	r3, [r7, #28]
 80068e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	69fa      	ldr	r2, [r7, #28]
 80068e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068ec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80068f0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80068f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068f4:	4613      	mov	r3, r2
 80068f6:	00db      	lsls	r3, r3, #3
 80068f8:	4413      	add	r3, r2
 80068fa:	009b      	lsls	r3, r3, #2
 80068fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	4413      	add	r3, r2
 8006904:	3304      	adds	r3, #4
 8006906:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	78db      	ldrb	r3, [r3, #3]
 800690c:	2b01      	cmp	r3, #1
 800690e:	d108      	bne.n	8006922 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	2200      	movs	r2, #0
 8006914:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006918:	b2db      	uxtb	r3, r3
 800691a:	4619      	mov	r1, r3
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f00b f835 	bl	801198c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	4413      	add	r3, r2
 800692a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800692e:	461a      	mov	r2, r3
 8006930:	2302      	movs	r3, #2
 8006932:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f003 0320 	and.w	r3, r3, #32
 800693a:	2b00      	cmp	r3, #0
 800693c:	d008      	beq.n	8006950 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800693e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	4413      	add	r3, r2
 8006946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800694a:	461a      	mov	r2, r3
 800694c:	2320      	movs	r3, #32
 800694e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d009      	beq.n	800696e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800695a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800695c:	015a      	lsls	r2, r3, #5
 800695e:	69fb      	ldr	r3, [r7, #28]
 8006960:	4413      	add	r3, r2
 8006962:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006966:	461a      	mov	r2, r3
 8006968:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800696c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800696e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006970:	3301      	adds	r3, #1
 8006972:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006976:	085b      	lsrs	r3, r3, #1
 8006978:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800697a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800697c:	2b00      	cmp	r3, #0
 800697e:	f47f af62 	bne.w	8006846 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4618      	mov	r0, r3
 8006988:	f008 fb70 	bl	800f06c <USB_ReadInterrupts>
 800698c:	4603      	mov	r3, r0
 800698e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006992:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006996:	f040 80db 	bne.w	8006b50 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4618      	mov	r0, r3
 80069a0:	f008 fb91 	bl	800f0c6 <USB_ReadDevAllInEpInterrupt>
 80069a4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80069a6:	2300      	movs	r3, #0
 80069a8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80069aa:	e0cd      	b.n	8006b48 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80069ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ae:	f003 0301 	and.w	r3, r3, #1
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f000 80c2 	beq.w	8006b3c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80069be:	b2d2      	uxtb	r2, r2
 80069c0:	4611      	mov	r1, r2
 80069c2:	4618      	mov	r0, r3
 80069c4:	f008 fbb7 	bl	800f136 <USB_ReadDevInEPInterrupt>
 80069c8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d057      	beq.n	8006a84 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80069d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069d6:	f003 030f 	and.w	r3, r3, #15
 80069da:	2201      	movs	r2, #1
 80069dc:	fa02 f303 	lsl.w	r3, r2, r3
 80069e0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	43db      	mvns	r3, r3
 80069ee:	69f9      	ldr	r1, [r7, #28]
 80069f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80069f4:	4013      	ands	r3, r2
 80069f6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80069f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069fa:	015a      	lsls	r2, r3, #5
 80069fc:	69fb      	ldr	r3, [r7, #28]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a04:	461a      	mov	r2, r3
 8006a06:	2301      	movs	r3, #1
 8006a08:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	799b      	ldrb	r3, [r3, #6]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d132      	bne.n	8006a78 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006a12:	6879      	ldr	r1, [r7, #4]
 8006a14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a16:	4613      	mov	r3, r2
 8006a18:	00db      	lsls	r3, r3, #3
 8006a1a:	4413      	add	r3, r2
 8006a1c:	009b      	lsls	r3, r3, #2
 8006a1e:	440b      	add	r3, r1
 8006a20:	3320      	adds	r3, #32
 8006a22:	6819      	ldr	r1, [r3, #0]
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a28:	4613      	mov	r3, r2
 8006a2a:	00db      	lsls	r3, r3, #3
 8006a2c:	4413      	add	r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4403      	add	r3, r0
 8006a32:	331c      	adds	r3, #28
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4419      	add	r1, r3
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a3c:	4613      	mov	r3, r2
 8006a3e:	00db      	lsls	r3, r3, #3
 8006a40:	4413      	add	r3, r2
 8006a42:	009b      	lsls	r3, r3, #2
 8006a44:	4403      	add	r3, r0
 8006a46:	3320      	adds	r3, #32
 8006a48:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d113      	bne.n	8006a78 <HAL_PCD_IRQHandler+0x3a2>
 8006a50:	6879      	ldr	r1, [r7, #4]
 8006a52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006a54:	4613      	mov	r3, r2
 8006a56:	00db      	lsls	r3, r3, #3
 8006a58:	4413      	add	r3, r2
 8006a5a:	009b      	lsls	r3, r3, #2
 8006a5c:	440b      	add	r3, r1
 8006a5e:	3324      	adds	r3, #36	@ 0x24
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d108      	bne.n	8006a78 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6818      	ldr	r0, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006a70:	461a      	mov	r2, r3
 8006a72:	2101      	movs	r1, #1
 8006a74:	f008 fbc0 	bl	800f1f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a7a:	b2db      	uxtb	r3, r3
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f00a feff 	bl	8011882 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	f003 0308 	and.w	r3, r3, #8
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d008      	beq.n	8006aa0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a90:	015a      	lsls	r2, r3, #5
 8006a92:	69fb      	ldr	r3, [r7, #28]
 8006a94:	4413      	add	r3, r2
 8006a96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	2308      	movs	r3, #8
 8006a9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	f003 0310 	and.w	r3, r3, #16
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d008      	beq.n	8006abc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aac:	015a      	lsls	r2, r3, #5
 8006aae:	69fb      	ldr	r3, [r7, #28]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ab6:	461a      	mov	r2, r3
 8006ab8:	2310      	movs	r3, #16
 8006aba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d008      	beq.n	8006ad8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ac8:	015a      	lsls	r2, r3, #5
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	4413      	add	r3, r2
 8006ace:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	2340      	movs	r3, #64	@ 0x40
 8006ad6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	f003 0302 	and.w	r3, r3, #2
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d023      	beq.n	8006b2a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006ae2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ae4:	6a38      	ldr	r0, [r7, #32]
 8006ae6:	f007 fba3 	bl	800e230 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006aea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006aec:	4613      	mov	r3, r2
 8006aee:	00db      	lsls	r3, r3, #3
 8006af0:	4413      	add	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	3310      	adds	r3, #16
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	4413      	add	r3, r2
 8006afa:	3304      	adds	r3, #4
 8006afc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	78db      	ldrb	r3, [r3, #3]
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d108      	bne.n	8006b18 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006b06:	697b      	ldr	r3, [r7, #20]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006b0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	4619      	mov	r1, r3
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f00a ff4c 	bl	80119b0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1a:	015a      	lsls	r2, r3, #5
 8006b1c:	69fb      	ldr	r3, [r7, #28]
 8006b1e:	4413      	add	r3, r2
 8006b20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b24:	461a      	mov	r2, r3
 8006b26:	2302      	movs	r3, #2
 8006b28:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d003      	beq.n	8006b3c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006b34:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 fce8 	bl	800750c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b3e:	3301      	adds	r3, #1
 8006b40:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b44:	085b      	lsrs	r3, r3, #1
 8006b46:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f47f af2e 	bne.w	80069ac <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4618      	mov	r0, r3
 8006b56:	f008 fa89 	bl	800f06c <USB_ReadInterrupts>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006b60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006b64:	d122      	bne.n	8006bac <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	69fa      	ldr	r2, [r7, #28]
 8006b70:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006b74:	f023 0301 	bic.w	r3, r3, #1
 8006b78:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d108      	bne.n	8006b96 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fef2 	bl	8007978 <HAL_PCDEx_LPM_Callback>
 8006b94:	e002      	b.n	8006b9c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f00a feea 	bl	8011970 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	695a      	ldr	r2, [r3, #20]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006baa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f008 fa5b 	bl	800f06c <USB_ReadInterrupts>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bc0:	d112      	bne.n	8006be8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006bc2:	69fb      	ldr	r3, [r7, #28]
 8006bc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006bc8:	689b      	ldr	r3, [r3, #8]
 8006bca:	f003 0301 	and.w	r3, r3, #1
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d102      	bne.n	8006bd8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f00a fea6 	bl	8011924 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	695a      	ldr	r2, [r3, #20]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006be6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4618      	mov	r0, r3
 8006bee:	f008 fa3d 	bl	800f06c <USB_ReadInterrupts>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006bf8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006bfc:	d121      	bne.n	8006c42 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	695a      	ldr	r2, [r3, #20]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8006c0c:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d111      	bne.n	8006c3c <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c26:	089b      	lsrs	r3, r3, #2
 8006c28:	f003 020f 	and.w	r2, r3, #15
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006c32:	2101      	movs	r1, #1
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 fe9f 	bl	8007978 <HAL_PCDEx_LPM_Callback>
 8006c3a:	e002      	b.n	8006c42 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f00a fe71 	bl	8011924 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4618      	mov	r0, r3
 8006c48:	f008 fa10 	bl	800f06c <USB_ReadInterrupts>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006c52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c56:	f040 80b7 	bne.w	8006dc8 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	69fa      	ldr	r2, [r7, #28]
 8006c64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006c68:	f023 0301 	bic.w	r3, r3, #1
 8006c6c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	2110      	movs	r1, #16
 8006c74:	4618      	mov	r0, r3
 8006c76:	f007 fadb 	bl	800e230 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c7e:	e046      	b.n	8006d0e <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c82:	015a      	lsls	r2, r3, #5
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	4413      	add	r3, r2
 8006c88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006c92:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	69fb      	ldr	r3, [r7, #28]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ca4:	0151      	lsls	r1, r2, #5
 8006ca6:	69fa      	ldr	r2, [r7, #28]
 8006ca8:	440a      	add	r2, r1
 8006caa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006cae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006cb2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb6:	015a      	lsls	r2, r3, #5
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	4413      	add	r3, r2
 8006cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006cc6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006cc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cca:	015a      	lsls	r2, r3, #5
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cd8:	0151      	lsls	r1, r2, #5
 8006cda:	69fa      	ldr	r2, [r7, #28]
 8006cdc:	440a      	add	r2, r1
 8006cde:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ce2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ce6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cea:	015a      	lsls	r2, r3, #5
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	4413      	add	r3, r2
 8006cf0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cf8:	0151      	lsls	r1, r2, #5
 8006cfa:	69fa      	ldr	r2, [r7, #28]
 8006cfc:	440a      	add	r2, r1
 8006cfe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d02:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006d06:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	791b      	ldrb	r3, [r3, #4]
 8006d12:	461a      	mov	r2, r3
 8006d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d3b2      	bcc.n	8006c80 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d20:	69db      	ldr	r3, [r3, #28]
 8006d22:	69fa      	ldr	r2, [r7, #28]
 8006d24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d28:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006d2c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	7bdb      	ldrb	r3, [r3, #15]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d016      	beq.n	8006d64 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d40:	69fa      	ldr	r2, [r7, #28]
 8006d42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d46:	f043 030b 	orr.w	r3, r3, #11
 8006d4a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d56:	69fa      	ldr	r2, [r7, #28]
 8006d58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d5c:	f043 030b 	orr.w	r3, r3, #11
 8006d60:	6453      	str	r3, [r2, #68]	@ 0x44
 8006d62:	e015      	b.n	8006d90 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d6a:	695a      	ldr	r2, [r3, #20]
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d72:	4619      	mov	r1, r3
 8006d74:	f242 032b 	movw	r3, #8235	@ 0x202b
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d82:	691b      	ldr	r3, [r3, #16]
 8006d84:	69fa      	ldr	r2, [r7, #28]
 8006d86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d8a:	f043 030b 	orr.w	r3, r3, #11
 8006d8e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	69fa      	ldr	r2, [r7, #28]
 8006d9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006d9e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006da2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6818      	ldr	r0, [r3, #0]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006db2:	461a      	mov	r2, r3
 8006db4:	f008 fa20 	bl	800f1f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	695a      	ldr	r2, [r3, #20]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f008 f94d 	bl	800f06c <USB_ReadInterrupts>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006dd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ddc:	d123      	bne.n	8006e26 <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f008 f9e4 	bl	800f1b0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4618      	mov	r0, r3
 8006dee:	f007 fa98 	bl	800e322 <USB_GetDevSpeed>
 8006df2:	4603      	mov	r3, r0
 8006df4:	461a      	mov	r2, r3
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681c      	ldr	r4, [r3, #0]
 8006dfe:	f001 fdbb 	bl	8008978 <HAL_RCC_GetHCLKFreq>
 8006e02:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006e08:	461a      	mov	r2, r3
 8006e0a:	4620      	mov	r0, r4
 8006e0c:	f006 ffa2 	bl	800dd54 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f00a fd5e 	bl	80118d2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	695a      	ldr	r2, [r3, #20]
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006e24:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f008 f91e 	bl	800f06c <USB_ReadInterrupts>
 8006e30:	4603      	mov	r3, r0
 8006e32:	f003 0308 	and.w	r3, r3, #8
 8006e36:	2b08      	cmp	r3, #8
 8006e38:	d10a      	bne.n	8006e50 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f00a fd3b 	bl	80118b6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	695a      	ldr	r2, [r3, #20]
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f002 0208 	and.w	r2, r2, #8
 8006e4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4618      	mov	r0, r3
 8006e56:	f008 f909 	bl	800f06c <USB_ReadInterrupts>
 8006e5a:	4603      	mov	r3, r0
 8006e5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e60:	2b80      	cmp	r3, #128	@ 0x80
 8006e62:	d123      	bne.n	8006eac <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006e64:	6a3b      	ldr	r3, [r7, #32]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006e70:	2301      	movs	r3, #1
 8006e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e74:	e014      	b.n	8006ea0 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006e76:	6879      	ldr	r1, [r7, #4]
 8006e78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	00db      	lsls	r3, r3, #3
 8006e7e:	4413      	add	r3, r2
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	440b      	add	r3, r1
 8006e84:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	2b01      	cmp	r3, #1
 8006e8c:	d105      	bne.n	8006e9a <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	4619      	mov	r1, r3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 fb08 	bl	80074aa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	791b      	ldrb	r3, [r3, #4]
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d3e4      	bcc.n	8006e76 <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f008 f8db 	bl	800f06c <USB_ReadInterrupts>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ebc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006ec0:	d13c      	bne.n	8006f3c <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ec6:	e02b      	b.n	8006f20 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eca:	015a      	lsls	r2, r3, #5
 8006ecc:	69fb      	ldr	r3, [r7, #28]
 8006ece:	4413      	add	r3, r2
 8006ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006ed8:	6879      	ldr	r1, [r7, #4]
 8006eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006edc:	4613      	mov	r3, r2
 8006ede:	00db      	lsls	r3, r3, #3
 8006ee0:	4413      	add	r3, r2
 8006ee2:	009b      	lsls	r3, r3, #2
 8006ee4:	440b      	add	r3, r1
 8006ee6:	3318      	adds	r3, #24
 8006ee8:	781b      	ldrb	r3, [r3, #0]
 8006eea:	2b01      	cmp	r3, #1
 8006eec:	d115      	bne.n	8006f1a <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006eee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	da12      	bge.n	8006f1a <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006ef4:	6879      	ldr	r1, [r7, #4]
 8006ef6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ef8:	4613      	mov	r3, r2
 8006efa:	00db      	lsls	r3, r3, #3
 8006efc:	4413      	add	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	440b      	add	r3, r1
 8006f02:	3317      	adds	r3, #23
 8006f04:	2201      	movs	r2, #1
 8006f06:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	4619      	mov	r1, r3
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 fac8 	bl	80074aa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1c:	3301      	adds	r3, #1
 8006f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	791b      	ldrb	r3, [r3, #4]
 8006f24:	461a      	mov	r2, r3
 8006f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d3cd      	bcc.n	8006ec8 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	695a      	ldr	r2, [r3, #20]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006f3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4618      	mov	r0, r3
 8006f42:	f008 f893 	bl	800f06c <USB_ReadInterrupts>
 8006f46:	4603      	mov	r3, r0
 8006f48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006f4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006f50:	d156      	bne.n	8007000 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f52:	2301      	movs	r3, #1
 8006f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f56:	e045      	b.n	8006fe4 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5a:	015a      	lsls	r2, r3, #5
 8006f5c:	69fb      	ldr	r3, [r7, #28]
 8006f5e:	4413      	add	r3, r2
 8006f60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006f68:	6879      	ldr	r1, [r7, #4]
 8006f6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f6c:	4613      	mov	r3, r2
 8006f6e:	00db      	lsls	r3, r3, #3
 8006f70:	4413      	add	r3, r2
 8006f72:	009b      	lsls	r3, r3, #2
 8006f74:	440b      	add	r3, r1
 8006f76:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	2b01      	cmp	r3, #1
 8006f7e:	d12e      	bne.n	8006fde <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006f80:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	da2b      	bge.n	8006fde <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006f86:	69bb      	ldr	r3, [r7, #24]
 8006f88:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006f92:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006f96:	429a      	cmp	r2, r3
 8006f98:	d121      	bne.n	8006fde <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006f9a:	6879      	ldr	r1, [r7, #4]
 8006f9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	00db      	lsls	r3, r3, #3
 8006fa2:	4413      	add	r3, r2
 8006fa4:	009b      	lsls	r3, r3, #2
 8006fa6:	440b      	add	r3, r1
 8006fa8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006fac:	2201      	movs	r2, #1
 8006fae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	699b      	ldr	r3, [r3, #24]
 8006fb4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006fb8:	6a3b      	ldr	r3, [r7, #32]
 8006fba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006fbc:	6a3b      	ldr	r3, [r7, #32]
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d10a      	bne.n	8006fde <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	69fa      	ldr	r2, [r7, #28]
 8006fd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006fd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006fda:	6053      	str	r3, [r2, #4]
            break;
 8006fdc:	e008      	b.n	8006ff0 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	791b      	ldrb	r3, [r3, #4]
 8006fe8:	461a      	mov	r2, r3
 8006fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d3b3      	bcc.n	8006f58 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	695a      	ldr	r2, [r3, #20]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006ffe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4618      	mov	r0, r3
 8007006:	f008 f831 	bl	800f06c <USB_ReadInterrupts>
 800700a:	4603      	mov	r3, r0
 800700c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007010:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007014:	d10a      	bne.n	800702c <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f00a fcdc 	bl	80119d4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	695a      	ldr	r2, [r3, #20]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800702a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4618      	mov	r0, r3
 8007032:	f008 f81b 	bl	800f06c <USB_ReadInterrupts>
 8007036:	4603      	mov	r3, r0
 8007038:	f003 0304 	and.w	r3, r3, #4
 800703c:	2b04      	cmp	r3, #4
 800703e:	d115      	bne.n	800706c <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	f003 0304 	and.w	r3, r3, #4
 800704e:	2b00      	cmp	r3, #0
 8007050:	d002      	beq.n	8007058 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f00a fccc 	bl	80119f0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6859      	ldr	r1, [r3, #4]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	69ba      	ldr	r2, [r7, #24]
 8007064:	430a      	orrs	r2, r1
 8007066:	605a      	str	r2, [r3, #4]
 8007068:	e000      	b.n	800706c <HAL_PCD_IRQHandler+0x996>
      return;
 800706a:	bf00      	nop
    }
  }
}
 800706c:	3734      	adds	r7, #52	@ 0x34
 800706e:	46bd      	mov	sp, r7
 8007070:	bd90      	pop	{r4, r7, pc}

08007072 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007072:	b580      	push	{r7, lr}
 8007074:	b082      	sub	sp, #8
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	460b      	mov	r3, r1
 800707c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007084:	2b01      	cmp	r3, #1
 8007086:	d101      	bne.n	800708c <HAL_PCD_SetAddress+0x1a>
 8007088:	2302      	movs	r3, #2
 800708a:	e012      	b.n	80070b2 <HAL_PCD_SetAddress+0x40>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2201      	movs	r2, #1
 8007090:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	78fa      	ldrb	r2, [r7, #3]
 8007098:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	78fa      	ldrb	r2, [r7, #3]
 80070a0:	4611      	mov	r1, r2
 80070a2:	4618      	mov	r0, r3
 80070a4:	f007 ff7a 	bl	800ef9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3708      	adds	r7, #8
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}

080070ba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80070ba:	b580      	push	{r7, lr}
 80070bc:	b084      	sub	sp, #16
 80070be:	af00      	add	r7, sp, #0
 80070c0:	6078      	str	r0, [r7, #4]
 80070c2:	4608      	mov	r0, r1
 80070c4:	4611      	mov	r1, r2
 80070c6:	461a      	mov	r2, r3
 80070c8:	4603      	mov	r3, r0
 80070ca:	70fb      	strb	r3, [r7, #3]
 80070cc:	460b      	mov	r3, r1
 80070ce:	803b      	strh	r3, [r7, #0]
 80070d0:	4613      	mov	r3, r2
 80070d2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80070d4:	2300      	movs	r3, #0
 80070d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80070d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	da0f      	bge.n	8007100 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070e0:	78fb      	ldrb	r3, [r7, #3]
 80070e2:	f003 020f 	and.w	r2, r3, #15
 80070e6:	4613      	mov	r3, r2
 80070e8:	00db      	lsls	r3, r3, #3
 80070ea:	4413      	add	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	3310      	adds	r3, #16
 80070f0:	687a      	ldr	r2, [r7, #4]
 80070f2:	4413      	add	r3, r2
 80070f4:	3304      	adds	r3, #4
 80070f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2201      	movs	r2, #1
 80070fc:	705a      	strb	r2, [r3, #1]
 80070fe:	e00f      	b.n	8007120 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007100:	78fb      	ldrb	r3, [r7, #3]
 8007102:	f003 020f 	and.w	r2, r3, #15
 8007106:	4613      	mov	r3, r2
 8007108:	00db      	lsls	r3, r3, #3
 800710a:	4413      	add	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007112:	687a      	ldr	r2, [r7, #4]
 8007114:	4413      	add	r3, r2
 8007116:	3304      	adds	r3, #4
 8007118:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2200      	movs	r2, #0
 800711e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007120:	78fb      	ldrb	r3, [r7, #3]
 8007122:	f003 030f 	and.w	r3, r3, #15
 8007126:	b2da      	uxtb	r2, r3
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800712c:	883a      	ldrh	r2, [r7, #0]
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	78ba      	ldrb	r2, [r7, #2]
 8007136:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	785b      	ldrb	r3, [r3, #1]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d004      	beq.n	800714a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	461a      	mov	r2, r3
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800714a:	78bb      	ldrb	r3, [r7, #2]
 800714c:	2b02      	cmp	r3, #2
 800714e:	d102      	bne.n	8007156 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2200      	movs	r2, #0
 8007154:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800715c:	2b01      	cmp	r3, #1
 800715e:	d101      	bne.n	8007164 <HAL_PCD_EP_Open+0xaa>
 8007160:	2302      	movs	r3, #2
 8007162:	e00e      	b.n	8007182 <HAL_PCD_EP_Open+0xc8>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	68f9      	ldr	r1, [r7, #12]
 8007172:	4618      	mov	r0, r3
 8007174:	f007 f8fa 	bl	800e36c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8007180:	7afb      	ldrb	r3, [r7, #11]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3710      	adds	r7, #16
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b084      	sub	sp, #16
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	460b      	mov	r3, r1
 8007194:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007196:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800719a:	2b00      	cmp	r3, #0
 800719c:	da0f      	bge.n	80071be <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800719e:	78fb      	ldrb	r3, [r7, #3]
 80071a0:	f003 020f 	and.w	r2, r3, #15
 80071a4:	4613      	mov	r3, r2
 80071a6:	00db      	lsls	r3, r3, #3
 80071a8:	4413      	add	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	3310      	adds	r3, #16
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	4413      	add	r3, r2
 80071b2:	3304      	adds	r3, #4
 80071b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2201      	movs	r2, #1
 80071ba:	705a      	strb	r2, [r3, #1]
 80071bc:	e00f      	b.n	80071de <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071be:	78fb      	ldrb	r3, [r7, #3]
 80071c0:	f003 020f 	and.w	r2, r3, #15
 80071c4:	4613      	mov	r3, r2
 80071c6:	00db      	lsls	r3, r3, #3
 80071c8:	4413      	add	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80071d0:	687a      	ldr	r2, [r7, #4]
 80071d2:	4413      	add	r3, r2
 80071d4:	3304      	adds	r3, #4
 80071d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	2200      	movs	r2, #0
 80071dc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80071de:	78fb      	ldrb	r3, [r7, #3]
 80071e0:	f003 030f 	and.w	r3, r3, #15
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d101      	bne.n	80071f8 <HAL_PCD_EP_Close+0x6e>
 80071f4:	2302      	movs	r3, #2
 80071f6:	e00e      	b.n	8007216 <HAL_PCD_EP_Close+0x8c>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2201      	movs	r2, #1
 80071fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	68f9      	ldr	r1, [r7, #12]
 8007206:	4618      	mov	r0, r3
 8007208:	f007 f938 	bl	800e47c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3710      	adds	r7, #16
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800721e:	b580      	push	{r7, lr}
 8007220:	b086      	sub	sp, #24
 8007222:	af00      	add	r7, sp, #0
 8007224:	60f8      	str	r0, [r7, #12]
 8007226:	607a      	str	r2, [r7, #4]
 8007228:	603b      	str	r3, [r7, #0]
 800722a:	460b      	mov	r3, r1
 800722c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800722e:	7afb      	ldrb	r3, [r7, #11]
 8007230:	f003 020f 	and.w	r2, r3, #15
 8007234:	4613      	mov	r3, r2
 8007236:	00db      	lsls	r3, r3, #3
 8007238:	4413      	add	r3, r2
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	4413      	add	r3, r2
 8007244:	3304      	adds	r3, #4
 8007246:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	687a      	ldr	r2, [r7, #4]
 800724c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	683a      	ldr	r2, [r7, #0]
 8007252:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007254:	697b      	ldr	r3, [r7, #20]
 8007256:	2200      	movs	r2, #0
 8007258:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	2200      	movs	r2, #0
 800725e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007260:	7afb      	ldrb	r3, [r7, #11]
 8007262:	f003 030f 	and.w	r3, r3, #15
 8007266:	b2da      	uxtb	r2, r3
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	799b      	ldrb	r3, [r3, #6]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d102      	bne.n	800727a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007274:	687a      	ldr	r2, [r7, #4]
 8007276:	697b      	ldr	r3, [r7, #20]
 8007278:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6818      	ldr	r0, [r3, #0]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	799b      	ldrb	r3, [r3, #6]
 8007282:	461a      	mov	r2, r3
 8007284:	6979      	ldr	r1, [r7, #20]
 8007286:	f007 f9d5 	bl	800e634 <USB_EPStartXfer>

  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	460b      	mov	r3, r1
 800729e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80072a0:	78fb      	ldrb	r3, [r7, #3]
 80072a2:	f003 020f 	and.w	r2, r3, #15
 80072a6:	6879      	ldr	r1, [r7, #4]
 80072a8:	4613      	mov	r3, r2
 80072aa:	00db      	lsls	r3, r3, #3
 80072ac:	4413      	add	r3, r2
 80072ae:	009b      	lsls	r3, r3, #2
 80072b0:	440b      	add	r3, r1
 80072b2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80072b6:	681b      	ldr	r3, [r3, #0]
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	607a      	str	r2, [r7, #4]
 80072ce:	603b      	str	r3, [r7, #0]
 80072d0:	460b      	mov	r3, r1
 80072d2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80072d4:	7afb      	ldrb	r3, [r7, #11]
 80072d6:	f003 020f 	and.w	r2, r3, #15
 80072da:	4613      	mov	r3, r2
 80072dc:	00db      	lsls	r3, r3, #3
 80072de:	4413      	add	r3, r2
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	3310      	adds	r3, #16
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	4413      	add	r3, r2
 80072e8:	3304      	adds	r3, #4
 80072ea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	687a      	ldr	r2, [r7, #4]
 80072f0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	683a      	ldr	r2, [r7, #0]
 80072f6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	2200      	movs	r2, #0
 80072fc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	2201      	movs	r2, #1
 8007302:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007304:	7afb      	ldrb	r3, [r7, #11]
 8007306:	f003 030f 	and.w	r3, r3, #15
 800730a:	b2da      	uxtb	r2, r3
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	799b      	ldrb	r3, [r3, #6]
 8007314:	2b01      	cmp	r3, #1
 8007316:	d102      	bne.n	800731e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	6818      	ldr	r0, [r3, #0]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	799b      	ldrb	r3, [r3, #6]
 8007326:	461a      	mov	r2, r3
 8007328:	6979      	ldr	r1, [r7, #20]
 800732a:	f007 f983 	bl	800e634 <USB_EPStartXfer>

  return HAL_OK;
 800732e:	2300      	movs	r3, #0
}
 8007330:	4618      	mov	r0, r3
 8007332:	3718      	adds	r7, #24
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}

08007338 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b084      	sub	sp, #16
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	460b      	mov	r3, r1
 8007342:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007344:	78fb      	ldrb	r3, [r7, #3]
 8007346:	f003 030f 	and.w	r3, r3, #15
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	7912      	ldrb	r2, [r2, #4]
 800734e:	4293      	cmp	r3, r2
 8007350:	d901      	bls.n	8007356 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	e04f      	b.n	80073f6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007356:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800735a:	2b00      	cmp	r3, #0
 800735c:	da0f      	bge.n	800737e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800735e:	78fb      	ldrb	r3, [r7, #3]
 8007360:	f003 020f 	and.w	r2, r3, #15
 8007364:	4613      	mov	r3, r2
 8007366:	00db      	lsls	r3, r3, #3
 8007368:	4413      	add	r3, r2
 800736a:	009b      	lsls	r3, r3, #2
 800736c:	3310      	adds	r3, #16
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	4413      	add	r3, r2
 8007372:	3304      	adds	r3, #4
 8007374:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	2201      	movs	r2, #1
 800737a:	705a      	strb	r2, [r3, #1]
 800737c:	e00d      	b.n	800739a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800737e:	78fa      	ldrb	r2, [r7, #3]
 8007380:	4613      	mov	r3, r2
 8007382:	00db      	lsls	r3, r3, #3
 8007384:	4413      	add	r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	4413      	add	r3, r2
 8007390:	3304      	adds	r3, #4
 8007392:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2200      	movs	r2, #0
 8007398:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2201      	movs	r2, #1
 800739e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80073a0:	78fb      	ldrb	r3, [r7, #3]
 80073a2:	f003 030f 	and.w	r3, r3, #15
 80073a6:	b2da      	uxtb	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d101      	bne.n	80073ba <HAL_PCD_EP_SetStall+0x82>
 80073b6:	2302      	movs	r3, #2
 80073b8:	e01d      	b.n	80073f6 <HAL_PCD_EP_SetStall+0xbe>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	2201      	movs	r2, #1
 80073be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68f9      	ldr	r1, [r7, #12]
 80073c8:	4618      	mov	r0, r3
 80073ca:	f007 fd13 	bl	800edf4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80073ce:	78fb      	ldrb	r3, [r7, #3]
 80073d0:	f003 030f 	and.w	r3, r3, #15
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d109      	bne.n	80073ec <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6818      	ldr	r0, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	7999      	ldrb	r1, [r3, #6]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80073e6:	461a      	mov	r2, r3
 80073e8:	f007 ff06 	bl	800f1f8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}

080073fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80073fe:	b580      	push	{r7, lr}
 8007400:	b084      	sub	sp, #16
 8007402:	af00      	add	r7, sp, #0
 8007404:	6078      	str	r0, [r7, #4]
 8007406:	460b      	mov	r3, r1
 8007408:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800740a:	78fb      	ldrb	r3, [r7, #3]
 800740c:	f003 030f 	and.w	r3, r3, #15
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	7912      	ldrb	r2, [r2, #4]
 8007414:	4293      	cmp	r3, r2
 8007416:	d901      	bls.n	800741c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e042      	b.n	80074a2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800741c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007420:	2b00      	cmp	r3, #0
 8007422:	da0f      	bge.n	8007444 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007424:	78fb      	ldrb	r3, [r7, #3]
 8007426:	f003 020f 	and.w	r2, r3, #15
 800742a:	4613      	mov	r3, r2
 800742c:	00db      	lsls	r3, r3, #3
 800742e:	4413      	add	r3, r2
 8007430:	009b      	lsls	r3, r3, #2
 8007432:	3310      	adds	r3, #16
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	4413      	add	r3, r2
 8007438:	3304      	adds	r3, #4
 800743a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	2201      	movs	r2, #1
 8007440:	705a      	strb	r2, [r3, #1]
 8007442:	e00f      	b.n	8007464 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007444:	78fb      	ldrb	r3, [r7, #3]
 8007446:	f003 020f 	and.w	r2, r3, #15
 800744a:	4613      	mov	r3, r2
 800744c:	00db      	lsls	r3, r3, #3
 800744e:	4413      	add	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007456:	687a      	ldr	r2, [r7, #4]
 8007458:	4413      	add	r3, r2
 800745a:	3304      	adds	r3, #4
 800745c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800746a:	78fb      	ldrb	r3, [r7, #3]
 800746c:	f003 030f 	and.w	r3, r3, #15
 8007470:	b2da      	uxtb	r2, r3
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800747c:	2b01      	cmp	r3, #1
 800747e:	d101      	bne.n	8007484 <HAL_PCD_EP_ClrStall+0x86>
 8007480:	2302      	movs	r3, #2
 8007482:	e00e      	b.n	80074a2 <HAL_PCD_EP_ClrStall+0xa4>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68f9      	ldr	r1, [r7, #12]
 8007492:	4618      	mov	r0, r3
 8007494:	f007 fd1c 	bl	800eed0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2200      	movs	r2, #0
 800749c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80074a0:	2300      	movs	r3, #0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b084      	sub	sp, #16
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
 80074b2:	460b      	mov	r3, r1
 80074b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80074b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	da0c      	bge.n	80074d8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074be:	78fb      	ldrb	r3, [r7, #3]
 80074c0:	f003 020f 	and.w	r2, r3, #15
 80074c4:	4613      	mov	r3, r2
 80074c6:	00db      	lsls	r3, r3, #3
 80074c8:	4413      	add	r3, r2
 80074ca:	009b      	lsls	r3, r3, #2
 80074cc:	3310      	adds	r3, #16
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	4413      	add	r3, r2
 80074d2:	3304      	adds	r3, #4
 80074d4:	60fb      	str	r3, [r7, #12]
 80074d6:	e00c      	b.n	80074f2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80074d8:	78fb      	ldrb	r3, [r7, #3]
 80074da:	f003 020f 	and.w	r2, r3, #15
 80074de:	4613      	mov	r3, r2
 80074e0:	00db      	lsls	r3, r3, #3
 80074e2:	4413      	add	r3, r2
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	4413      	add	r3, r2
 80074ee:	3304      	adds	r3, #4
 80074f0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	68f9      	ldr	r1, [r7, #12]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f007 fb3b 	bl	800eb74 <USB_EPStopXfer>
 80074fe:	4603      	mov	r3, r0
 8007500:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007502:	7afb      	ldrb	r3, [r7, #11]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b08a      	sub	sp, #40	@ 0x28
 8007510:	af02      	add	r7, sp, #8
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007520:	683a      	ldr	r2, [r7, #0]
 8007522:	4613      	mov	r3, r2
 8007524:	00db      	lsls	r3, r3, #3
 8007526:	4413      	add	r3, r2
 8007528:	009b      	lsls	r3, r3, #2
 800752a:	3310      	adds	r3, #16
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	4413      	add	r3, r2
 8007530:	3304      	adds	r3, #4
 8007532:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	695a      	ldr	r2, [r3, #20]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	691b      	ldr	r3, [r3, #16]
 800753c:	429a      	cmp	r2, r3
 800753e:	d901      	bls.n	8007544 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	e06b      	b.n	800761c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	691a      	ldr	r2, [r3, #16]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	695b      	ldr	r3, [r3, #20]
 800754c:	1ad3      	subs	r3, r2, r3
 800754e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	69fa      	ldr	r2, [r7, #28]
 8007556:	429a      	cmp	r2, r3
 8007558:	d902      	bls.n	8007560 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	689b      	ldr	r3, [r3, #8]
 800755e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	3303      	adds	r3, #3
 8007564:	089b      	lsrs	r3, r3, #2
 8007566:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007568:	e02a      	b.n	80075c0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	691a      	ldr	r2, [r3, #16]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	1ad3      	subs	r3, r2, r3
 8007574:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	69fa      	ldr	r2, [r7, #28]
 800757c:	429a      	cmp	r2, r3
 800757e:	d902      	bls.n	8007586 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	3303      	adds	r3, #3
 800758a:	089b      	lsrs	r3, r3, #2
 800758c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	68d9      	ldr	r1, [r3, #12]
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	b2da      	uxtb	r2, r3
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	4603      	mov	r3, r0
 80075a2:	6978      	ldr	r0, [r7, #20]
 80075a4:	f007 fb90 	bl	800ecc8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	68da      	ldr	r2, [r3, #12]
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	441a      	add	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	695a      	ldr	r2, [r3, #20]
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	441a      	add	r2, r3
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80075c0:	683b      	ldr	r3, [r7, #0]
 80075c2:	015a      	lsls	r2, r3, #5
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	4413      	add	r3, r2
 80075c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80075d0:	69ba      	ldr	r2, [r7, #24]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	d809      	bhi.n	80075ea <PCD_WriteEmptyTxFifo+0xde>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	695a      	ldr	r2, [r3, #20]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80075de:	429a      	cmp	r2, r3
 80075e0:	d203      	bcs.n	80075ea <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1bf      	bne.n	800756a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	691a      	ldr	r2, [r3, #16]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	695b      	ldr	r3, [r3, #20]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d811      	bhi.n	800761a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80075f6:	683b      	ldr	r3, [r7, #0]
 80075f8:	f003 030f 	and.w	r3, r3, #15
 80075fc:	2201      	movs	r2, #1
 80075fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007602:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007604:	693b      	ldr	r3, [r7, #16]
 8007606:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800760a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	43db      	mvns	r3, r3
 8007610:	6939      	ldr	r1, [r7, #16]
 8007612:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007616:	4013      	ands	r3, r2
 8007618:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800761a:	2300      	movs	r3, #0
}
 800761c:	4618      	mov	r0, r3
 800761e:	3720      	adds	r7, #32
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}

08007624 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b088      	sub	sp, #32
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007634:	69fb      	ldr	r3, [r7, #28]
 8007636:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	333c      	adds	r3, #60	@ 0x3c
 800763c:	3304      	adds	r3, #4
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	015a      	lsls	r2, r3, #5
 8007646:	69bb      	ldr	r3, [r7, #24]
 8007648:	4413      	add	r3, r2
 800764a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	799b      	ldrb	r3, [r3, #6]
 8007656:	2b01      	cmp	r3, #1
 8007658:	d17b      	bne.n	8007752 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	f003 0308 	and.w	r3, r3, #8
 8007660:	2b00      	cmp	r3, #0
 8007662:	d015      	beq.n	8007690 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	4a61      	ldr	r2, [pc, #388]	@ (80077ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007668:	4293      	cmp	r3, r2
 800766a:	f240 80b9 	bls.w	80077e0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007674:	2b00      	cmp	r3, #0
 8007676:	f000 80b3 	beq.w	80077e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	015a      	lsls	r2, r3, #5
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	4413      	add	r3, r2
 8007682:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007686:	461a      	mov	r2, r3
 8007688:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800768c:	6093      	str	r3, [r2, #8]
 800768e:	e0a7      	b.n	80077e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	f003 0320 	and.w	r3, r3, #32
 8007696:	2b00      	cmp	r3, #0
 8007698:	d009      	beq.n	80076ae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800769a:	683b      	ldr	r3, [r7, #0]
 800769c:	015a      	lsls	r2, r3, #5
 800769e:	69bb      	ldr	r3, [r7, #24]
 80076a0:	4413      	add	r3, r2
 80076a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076a6:	461a      	mov	r2, r3
 80076a8:	2320      	movs	r3, #32
 80076aa:	6093      	str	r3, [r2, #8]
 80076ac:	e098      	b.n	80077e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f040 8093 	bne.w	80077e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	4a4b      	ldr	r2, [pc, #300]	@ (80077ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 80076be:	4293      	cmp	r3, r2
 80076c0:	d90f      	bls.n	80076e2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d00a      	beq.n	80076e2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	015a      	lsls	r2, r3, #5
 80076d0:	69bb      	ldr	r3, [r7, #24]
 80076d2:	4413      	add	r3, r2
 80076d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076d8:	461a      	mov	r2, r3
 80076da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80076de:	6093      	str	r3, [r2, #8]
 80076e0:	e07e      	b.n	80077e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80076e2:	683a      	ldr	r2, [r7, #0]
 80076e4:	4613      	mov	r3, r2
 80076e6:	00db      	lsls	r3, r3, #3
 80076e8:	4413      	add	r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	4413      	add	r3, r2
 80076f4:	3304      	adds	r3, #4
 80076f6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	6a1a      	ldr	r2, [r3, #32]
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	0159      	lsls	r1, r3, #5
 8007700:	69bb      	ldr	r3, [r7, #24]
 8007702:	440b      	add	r3, r1
 8007704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800770e:	1ad2      	subs	r2, r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d114      	bne.n	8007744 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d109      	bne.n	8007736 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6818      	ldr	r0, [r3, #0]
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800772c:	461a      	mov	r2, r3
 800772e:	2101      	movs	r1, #1
 8007730:	f007 fd62 	bl	800f1f8 <USB_EP0_OutStart>
 8007734:	e006      	b.n	8007744 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	68da      	ldr	r2, [r3, #12]
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	695b      	ldr	r3, [r3, #20]
 800773e:	441a      	add	r2, r3
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	b2db      	uxtb	r3, r3
 8007748:	4619      	mov	r1, r3
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f00a f87e 	bl	801184c <HAL_PCD_DataOutStageCallback>
 8007750:	e046      	b.n	80077e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	4a26      	ldr	r2, [pc, #152]	@ (80077f0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d124      	bne.n	80077a4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00a      	beq.n	800777a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	015a      	lsls	r2, r3, #5
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	4413      	add	r3, r2
 800776c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007770:	461a      	mov	r2, r3
 8007772:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007776:	6093      	str	r3, [r2, #8]
 8007778:	e032      	b.n	80077e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	f003 0320 	and.w	r3, r3, #32
 8007780:	2b00      	cmp	r3, #0
 8007782:	d008      	beq.n	8007796 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	015a      	lsls	r2, r3, #5
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	4413      	add	r3, r2
 800778c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007790:	461a      	mov	r2, r3
 8007792:	2320      	movs	r3, #32
 8007794:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	b2db      	uxtb	r3, r3
 800779a:	4619      	mov	r1, r3
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f00a f855 	bl	801184c <HAL_PCD_DataOutStageCallback>
 80077a2:	e01d      	b.n	80077e0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d114      	bne.n	80077d4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80077aa:	6879      	ldr	r1, [r7, #4]
 80077ac:	683a      	ldr	r2, [r7, #0]
 80077ae:	4613      	mov	r3, r2
 80077b0:	00db      	lsls	r3, r3, #3
 80077b2:	4413      	add	r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	440b      	add	r3, r1
 80077b8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d108      	bne.n	80077d4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6818      	ldr	r0, [r3, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80077cc:	461a      	mov	r2, r3
 80077ce:	2100      	movs	r1, #0
 80077d0:	f007 fd12 	bl	800f1f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	b2db      	uxtb	r3, r3
 80077d8:	4619      	mov	r1, r3
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f00a f836 	bl	801184c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3720      	adds	r7, #32
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	4f54300a 	.word	0x4f54300a
 80077f0:	4f54310a 	.word	0x4f54310a

080077f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b086      	sub	sp, #24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	333c      	adds	r3, #60	@ 0x3c
 800780c:	3304      	adds	r3, #4
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	015a      	lsls	r2, r3, #5
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	4413      	add	r3, r2
 800781a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	4a15      	ldr	r2, [pc, #84]	@ (800787c <PCD_EP_OutSetupPacket_int+0x88>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d90e      	bls.n	8007848 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007830:	2b00      	cmp	r3, #0
 8007832:	d009      	beq.n	8007848 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	4413      	add	r3, r2
 800783c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007840:	461a      	mov	r2, r3
 8007842:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007846:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f009 ffed 	bl	8011828 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	4a0a      	ldr	r2, [pc, #40]	@ (800787c <PCD_EP_OutSetupPacket_int+0x88>)
 8007852:	4293      	cmp	r3, r2
 8007854:	d90c      	bls.n	8007870 <PCD_EP_OutSetupPacket_int+0x7c>
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	799b      	ldrb	r3, [r3, #6]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d108      	bne.n	8007870 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6818      	ldr	r0, [r3, #0]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007868:	461a      	mov	r2, r3
 800786a:	2101      	movs	r1, #1
 800786c:	f007 fcc4 	bl	800f1f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	3718      	adds	r7, #24
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
 800787a:	bf00      	nop
 800787c:	4f54300a 	.word	0x4f54300a

08007880 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007880:	b480      	push	{r7}
 8007882:	b085      	sub	sp, #20
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	460b      	mov	r3, r1
 800788a:	70fb      	strb	r3, [r7, #3]
 800788c:	4613      	mov	r3, r2
 800788e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007896:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007898:	78fb      	ldrb	r3, [r7, #3]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d107      	bne.n	80078ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800789e:	883b      	ldrh	r3, [r7, #0]
 80078a0:	0419      	lsls	r1, r3, #16
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68ba      	ldr	r2, [r7, #8]
 80078a8:	430a      	orrs	r2, r1
 80078aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80078ac:	e028      	b.n	8007900 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80078b4:	0c1b      	lsrs	r3, r3, #16
 80078b6:	68ba      	ldr	r2, [r7, #8]
 80078b8:	4413      	add	r3, r2
 80078ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80078bc:	2300      	movs	r3, #0
 80078be:	73fb      	strb	r3, [r7, #15]
 80078c0:	e00d      	b.n	80078de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	7bfb      	ldrb	r3, [r7, #15]
 80078c8:	3340      	adds	r3, #64	@ 0x40
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	4413      	add	r3, r2
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	0c1b      	lsrs	r3, r3, #16
 80078d2:	68ba      	ldr	r2, [r7, #8]
 80078d4:	4413      	add	r3, r2
 80078d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80078d8:	7bfb      	ldrb	r3, [r7, #15]
 80078da:	3301      	adds	r3, #1
 80078dc:	73fb      	strb	r3, [r7, #15]
 80078de:	7bfa      	ldrb	r2, [r7, #15]
 80078e0:	78fb      	ldrb	r3, [r7, #3]
 80078e2:	3b01      	subs	r3, #1
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d3ec      	bcc.n	80078c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80078e8:	883b      	ldrh	r3, [r7, #0]
 80078ea:	0418      	lsls	r0, r3, #16
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6819      	ldr	r1, [r3, #0]
 80078f0:	78fb      	ldrb	r3, [r7, #3]
 80078f2:	3b01      	subs	r3, #1
 80078f4:	68ba      	ldr	r2, [r7, #8]
 80078f6:	4302      	orrs	r2, r0
 80078f8:	3340      	adds	r3, #64	@ 0x40
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	440b      	add	r3, r1
 80078fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3714      	adds	r7, #20
 8007906:	46bd      	mov	sp, r7
 8007908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790c:	4770      	bx	lr

0800790e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800790e:	b480      	push	{r7}
 8007910:	b083      	sub	sp, #12
 8007912:	af00      	add	r7, sp, #0
 8007914:	6078      	str	r0, [r7, #4]
 8007916:	460b      	mov	r3, r1
 8007918:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	887a      	ldrh	r2, [r7, #2]
 8007920:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007930:	b480      	push	{r7}
 8007932:	b085      	sub	sp, #20
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2200      	movs	r2, #0
 800794a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	699b      	ldr	r3, [r3, #24]
 8007952:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800795e:	4b05      	ldr	r3, [pc, #20]	@ (8007974 <HAL_PCDEx_ActivateLPM+0x44>)
 8007960:	4313      	orrs	r3, r2
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3714      	adds	r7, #20
 800796c:	46bd      	mov	sp, r7
 800796e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007972:	4770      	bx	lr
 8007974:	10000003 	.word	0x10000003

08007978 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007978:	b480      	push	{r7}
 800797a:	b083      	sub	sp, #12
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
 8007980:	460b      	mov	r3, r1
 8007982:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b084      	sub	sp, #16
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007998:	4b29      	ldr	r3, [pc, #164]	@ (8007a40 <HAL_PWREx_ConfigSupply+0xb0>)
 800799a:	68db      	ldr	r3, [r3, #12]
 800799c:	f003 0307 	and.w	r3, r3, #7
 80079a0:	2b06      	cmp	r3, #6
 80079a2:	d00a      	beq.n	80079ba <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80079a4:	4b26      	ldr	r3, [pc, #152]	@ (8007a40 <HAL_PWREx_ConfigSupply+0xb0>)
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079ac:	687a      	ldr	r2, [r7, #4]
 80079ae:	429a      	cmp	r2, r3
 80079b0:	d001      	beq.n	80079b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e040      	b.n	8007a38 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	e03e      	b.n	8007a38 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80079ba:	4b21      	ldr	r3, [pc, #132]	@ (8007a40 <HAL_PWREx_ConfigSupply+0xb0>)
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80079c2:	491f      	ldr	r1, [pc, #124]	@ (8007a40 <HAL_PWREx_ConfigSupply+0xb0>)
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	4313      	orrs	r3, r2
 80079c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80079ca:	f7fa ffd7 	bl	800297c <HAL_GetTick>
 80079ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80079d0:	e009      	b.n	80079e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80079d2:	f7fa ffd3 	bl	800297c <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80079e0:	d901      	bls.n	80079e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e028      	b.n	8007a38 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80079e6:	4b16      	ldr	r3, [pc, #88]	@ (8007a40 <HAL_PWREx_ConfigSupply+0xb0>)
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80079ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80079f2:	d1ee      	bne.n	80079d2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2b1e      	cmp	r3, #30
 80079f8:	d008      	beq.n	8007a0c <HAL_PWREx_ConfigSupply+0x7c>
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80079fe:	d005      	beq.n	8007a0c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2b1d      	cmp	r3, #29
 8007a04:	d002      	beq.n	8007a0c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2b2d      	cmp	r3, #45	@ 0x2d
 8007a0a:	d114      	bne.n	8007a36 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007a0c:	f7fa ffb6 	bl	800297c <HAL_GetTick>
 8007a10:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007a12:	e009      	b.n	8007a28 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007a14:	f7fa ffb2 	bl	800297c <HAL_GetTick>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	1ad3      	subs	r3, r2, r3
 8007a1e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a22:	d901      	bls.n	8007a28 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	e007      	b.n	8007a38 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007a28:	4b05      	ldr	r3, [pc, #20]	@ (8007a40 <HAL_PWREx_ConfigSupply+0xb0>)
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a34:	d1ee      	bne.n	8007a14 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3710      	adds	r7, #16
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}
 8007a40:	58024800 	.word	0x58024800

08007a44 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007a44:	b480      	push	{r7}
 8007a46:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007a48:	4b05      	ldr	r3, [pc, #20]	@ (8007a60 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	4a04      	ldr	r2, [pc, #16]	@ (8007a60 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007a4e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a52:	60d3      	str	r3, [r2, #12]
}
 8007a54:	bf00      	nop
 8007a56:	46bd      	mov	sp, r7
 8007a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5c:	4770      	bx	lr
 8007a5e:	bf00      	nop
 8007a60:	58024800 	.word	0x58024800

08007a64 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b08c      	sub	sp, #48	@ 0x30
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d102      	bne.n	8007a78 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	f000 bc48 	b.w	8008308 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 0301 	and.w	r3, r3, #1
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	f000 8088 	beq.w	8007b96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a86:	4b99      	ldr	r3, [pc, #612]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007a88:	691b      	ldr	r3, [r3, #16]
 8007a8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a90:	4b96      	ldr	r3, [pc, #600]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a94:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a98:	2b10      	cmp	r3, #16
 8007a9a:	d007      	beq.n	8007aac <HAL_RCC_OscConfig+0x48>
 8007a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a9e:	2b18      	cmp	r3, #24
 8007aa0:	d111      	bne.n	8007ac6 <HAL_RCC_OscConfig+0x62>
 8007aa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007aa4:	f003 0303 	and.w	r3, r3, #3
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d10c      	bne.n	8007ac6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007aac:	4b8f      	ldr	r3, [pc, #572]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d06d      	beq.n	8007b94 <HAL_RCC_OscConfig+0x130>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d169      	bne.n	8007b94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	f000 bc21 	b.w	8008308 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007ace:	d106      	bne.n	8007ade <HAL_RCC_OscConfig+0x7a>
 8007ad0:	4b86      	ldr	r3, [pc, #536]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a85      	ldr	r2, [pc, #532]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007ad6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ada:	6013      	str	r3, [r2, #0]
 8007adc:	e02e      	b.n	8007b3c <HAL_RCC_OscConfig+0xd8>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d10c      	bne.n	8007b00 <HAL_RCC_OscConfig+0x9c>
 8007ae6:	4b81      	ldr	r3, [pc, #516]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a80      	ldr	r2, [pc, #512]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007aec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007af0:	6013      	str	r3, [r2, #0]
 8007af2:	4b7e      	ldr	r3, [pc, #504]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a7d      	ldr	r2, [pc, #500]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007af8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007afc:	6013      	str	r3, [r2, #0]
 8007afe:	e01d      	b.n	8007b3c <HAL_RCC_OscConfig+0xd8>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b08:	d10c      	bne.n	8007b24 <HAL_RCC_OscConfig+0xc0>
 8007b0a:	4b78      	ldr	r3, [pc, #480]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a77      	ldr	r2, [pc, #476]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007b14:	6013      	str	r3, [r2, #0]
 8007b16:	4b75      	ldr	r3, [pc, #468]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a74      	ldr	r2, [pc, #464]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b20:	6013      	str	r3, [r2, #0]
 8007b22:	e00b      	b.n	8007b3c <HAL_RCC_OscConfig+0xd8>
 8007b24:	4b71      	ldr	r3, [pc, #452]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a70      	ldr	r2, [pc, #448]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007b2e:	6013      	str	r3, [r2, #0]
 8007b30:	4b6e      	ldr	r3, [pc, #440]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4a6d      	ldr	r2, [pc, #436]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007b3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d013      	beq.n	8007b6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b44:	f7fa ff1a 	bl	800297c <HAL_GetTick>
 8007b48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b4a:	e008      	b.n	8007b5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b4c:	f7fa ff16 	bl	800297c <HAL_GetTick>
 8007b50:	4602      	mov	r2, r0
 8007b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b54:	1ad3      	subs	r3, r2, r3
 8007b56:	2b64      	cmp	r3, #100	@ 0x64
 8007b58:	d901      	bls.n	8007b5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b5a:	2303      	movs	r3, #3
 8007b5c:	e3d4      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b5e:	4b63      	ldr	r3, [pc, #396]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d0f0      	beq.n	8007b4c <HAL_RCC_OscConfig+0xe8>
 8007b6a:	e014      	b.n	8007b96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b6c:	f7fa ff06 	bl	800297c <HAL_GetTick>
 8007b70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b72:	e008      	b.n	8007b86 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b74:	f7fa ff02 	bl	800297c <HAL_GetTick>
 8007b78:	4602      	mov	r2, r0
 8007b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b7c:	1ad3      	subs	r3, r2, r3
 8007b7e:	2b64      	cmp	r3, #100	@ 0x64
 8007b80:	d901      	bls.n	8007b86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007b82:	2303      	movs	r3, #3
 8007b84:	e3c0      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007b86:	4b59      	ldr	r3, [pc, #356]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d1f0      	bne.n	8007b74 <HAL_RCC_OscConfig+0x110>
 8007b92:	e000      	b.n	8007b96 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 80ca 	beq.w	8007d38 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ba4:	4b51      	ldr	r3, [pc, #324]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007bae:	4b4f      	ldr	r3, [pc, #316]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007bb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bb2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007bb4:	6a3b      	ldr	r3, [r7, #32]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d007      	beq.n	8007bca <HAL_RCC_OscConfig+0x166>
 8007bba:	6a3b      	ldr	r3, [r7, #32]
 8007bbc:	2b18      	cmp	r3, #24
 8007bbe:	d156      	bne.n	8007c6e <HAL_RCC_OscConfig+0x20a>
 8007bc0:	69fb      	ldr	r3, [r7, #28]
 8007bc2:	f003 0303 	and.w	r3, r3, #3
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d151      	bne.n	8007c6e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007bca:	4b48      	ldr	r3, [pc, #288]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0304 	and.w	r3, r3, #4
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d005      	beq.n	8007be2 <HAL_RCC_OscConfig+0x17e>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	68db      	ldr	r3, [r3, #12]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d101      	bne.n	8007be2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007bde:	2301      	movs	r3, #1
 8007be0:	e392      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007be2:	4b42      	ldr	r3, [pc, #264]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f023 0219 	bic.w	r2, r3, #25
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	493f      	ldr	r1, [pc, #252]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bf4:	f7fa fec2 	bl	800297c <HAL_GetTick>
 8007bf8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007bfa:	e008      	b.n	8007c0e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bfc:	f7fa febe 	bl	800297c <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	2b02      	cmp	r3, #2
 8007c08:	d901      	bls.n	8007c0e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	e37c      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c0e:	4b37      	ldr	r3, [pc, #220]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 0304 	and.w	r3, r3, #4
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d0f0      	beq.n	8007bfc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c1a:	f7fa fedf 	bl	80029dc <HAL_GetREVID>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d817      	bhi.n	8007c58 <HAL_RCC_OscConfig+0x1f4>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	691b      	ldr	r3, [r3, #16]
 8007c2c:	2b40      	cmp	r3, #64	@ 0x40
 8007c2e:	d108      	bne.n	8007c42 <HAL_RCC_OscConfig+0x1de>
 8007c30:	4b2e      	ldr	r3, [pc, #184]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007c32:	685b      	ldr	r3, [r3, #4]
 8007c34:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007c38:	4a2c      	ldr	r2, [pc, #176]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007c3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c3e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c40:	e07a      	b.n	8007d38 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c42:	4b2a      	ldr	r3, [pc, #168]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	031b      	lsls	r3, r3, #12
 8007c50:	4926      	ldr	r1, [pc, #152]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c56:	e06f      	b.n	8007d38 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c58:	4b24      	ldr	r3, [pc, #144]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	061b      	lsls	r3, r3, #24
 8007c66:	4921      	ldr	r1, [pc, #132]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007c68:	4313      	orrs	r3, r2
 8007c6a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007c6c:	e064      	b.n	8007d38 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	68db      	ldr	r3, [r3, #12]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d047      	beq.n	8007d06 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007c76:	4b1d      	ldr	r3, [pc, #116]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f023 0219 	bic.w	r2, r3, #25
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	68db      	ldr	r3, [r3, #12]
 8007c82:	491a      	ldr	r1, [pc, #104]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007c84:	4313      	orrs	r3, r2
 8007c86:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c88:	f7fa fe78 	bl	800297c <HAL_GetTick>
 8007c8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007c8e:	e008      	b.n	8007ca2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c90:	f7fa fe74 	bl	800297c <HAL_GetTick>
 8007c94:	4602      	mov	r2, r0
 8007c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c98:	1ad3      	subs	r3, r2, r3
 8007c9a:	2b02      	cmp	r3, #2
 8007c9c:	d901      	bls.n	8007ca2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007c9e:	2303      	movs	r3, #3
 8007ca0:	e332      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ca2:	4b12      	ldr	r3, [pc, #72]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0304 	and.w	r3, r3, #4
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d0f0      	beq.n	8007c90 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cae:	f7fa fe95 	bl	80029dc <HAL_GetREVID>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d819      	bhi.n	8007cf0 <HAL_RCC_OscConfig+0x28c>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	691b      	ldr	r3, [r3, #16]
 8007cc0:	2b40      	cmp	r3, #64	@ 0x40
 8007cc2:	d108      	bne.n	8007cd6 <HAL_RCC_OscConfig+0x272>
 8007cc4:	4b09      	ldr	r3, [pc, #36]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007ccc:	4a07      	ldr	r2, [pc, #28]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007cce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007cd2:	6053      	str	r3, [r2, #4]
 8007cd4:	e030      	b.n	8007d38 <HAL_RCC_OscConfig+0x2d4>
 8007cd6:	4b05      	ldr	r3, [pc, #20]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	691b      	ldr	r3, [r3, #16]
 8007ce2:	031b      	lsls	r3, r3, #12
 8007ce4:	4901      	ldr	r1, [pc, #4]	@ (8007cec <HAL_RCC_OscConfig+0x288>)
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	604b      	str	r3, [r1, #4]
 8007cea:	e025      	b.n	8007d38 <HAL_RCC_OscConfig+0x2d4>
 8007cec:	58024400 	.word	0x58024400
 8007cf0:	4b9a      	ldr	r3, [pc, #616]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	691b      	ldr	r3, [r3, #16]
 8007cfc:	061b      	lsls	r3, r3, #24
 8007cfe:	4997      	ldr	r1, [pc, #604]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007d00:	4313      	orrs	r3, r2
 8007d02:	604b      	str	r3, [r1, #4]
 8007d04:	e018      	b.n	8007d38 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007d06:	4b95      	ldr	r3, [pc, #596]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a94      	ldr	r2, [pc, #592]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007d0c:	f023 0301 	bic.w	r3, r3, #1
 8007d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d12:	f7fa fe33 	bl	800297c <HAL_GetTick>
 8007d16:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d18:	e008      	b.n	8007d2c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007d1a:	f7fa fe2f 	bl	800297c <HAL_GetTick>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d901      	bls.n	8007d2c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	e2ed      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007d2c:	4b8b      	ldr	r3, [pc, #556]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 0304 	and.w	r3, r3, #4
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1f0      	bne.n	8007d1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f003 0310 	and.w	r3, r3, #16
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f000 80a9 	beq.w	8007e98 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007d46:	4b85      	ldr	r3, [pc, #532]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d4e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007d50:	4b82      	ldr	r3, [pc, #520]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d54:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	2b08      	cmp	r3, #8
 8007d5a:	d007      	beq.n	8007d6c <HAL_RCC_OscConfig+0x308>
 8007d5c:	69bb      	ldr	r3, [r7, #24]
 8007d5e:	2b18      	cmp	r3, #24
 8007d60:	d13a      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x374>
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	f003 0303 	and.w	r3, r3, #3
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d135      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007d6c:	4b7b      	ldr	r3, [pc, #492]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d005      	beq.n	8007d84 <HAL_RCC_OscConfig+0x320>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	69db      	ldr	r3, [r3, #28]
 8007d7c:	2b80      	cmp	r3, #128	@ 0x80
 8007d7e:	d001      	beq.n	8007d84 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	e2c1      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007d84:	f7fa fe2a 	bl	80029dc <HAL_GetREVID>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d817      	bhi.n	8007dc2 <HAL_RCC_OscConfig+0x35e>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6a1b      	ldr	r3, [r3, #32]
 8007d96:	2b20      	cmp	r3, #32
 8007d98:	d108      	bne.n	8007dac <HAL_RCC_OscConfig+0x348>
 8007d9a:	4b70      	ldr	r3, [pc, #448]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007d9c:	685b      	ldr	r3, [r3, #4]
 8007d9e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007da2:	4a6e      	ldr	r2, [pc, #440]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007da4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007da8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007daa:	e075      	b.n	8007e98 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007dac:	4b6b      	ldr	r3, [pc, #428]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6a1b      	ldr	r3, [r3, #32]
 8007db8:	069b      	lsls	r3, r3, #26
 8007dba:	4968      	ldr	r1, [pc, #416]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007dc0:	e06a      	b.n	8007e98 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007dc2:	4b66      	ldr	r3, [pc, #408]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	061b      	lsls	r3, r3, #24
 8007dd0:	4962      	ldr	r1, [pc, #392]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007dd2:	4313      	orrs	r3, r2
 8007dd4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007dd6:	e05f      	b.n	8007e98 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	69db      	ldr	r3, [r3, #28]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d042      	beq.n	8007e66 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007de0:	4b5e      	ldr	r3, [pc, #376]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a5d      	ldr	r2, [pc, #372]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007de6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dec:	f7fa fdc6 	bl	800297c <HAL_GetTick>
 8007df0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007df2:	e008      	b.n	8007e06 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007df4:	f7fa fdc2 	bl	800297c <HAL_GetTick>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d901      	bls.n	8007e06 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007e02:	2303      	movs	r3, #3
 8007e04:	e280      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007e06:	4b55      	ldr	r3, [pc, #340]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d0f0      	beq.n	8007df4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007e12:	f7fa fde3 	bl	80029dc <HAL_GetREVID>
 8007e16:	4603      	mov	r3, r0
 8007e18:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d817      	bhi.n	8007e50 <HAL_RCC_OscConfig+0x3ec>
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6a1b      	ldr	r3, [r3, #32]
 8007e24:	2b20      	cmp	r3, #32
 8007e26:	d108      	bne.n	8007e3a <HAL_RCC_OscConfig+0x3d6>
 8007e28:	4b4c      	ldr	r3, [pc, #304]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007e30:	4a4a      	ldr	r2, [pc, #296]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e32:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007e36:	6053      	str	r3, [r2, #4]
 8007e38:	e02e      	b.n	8007e98 <HAL_RCC_OscConfig+0x434>
 8007e3a:	4b48      	ldr	r3, [pc, #288]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a1b      	ldr	r3, [r3, #32]
 8007e46:	069b      	lsls	r3, r3, #26
 8007e48:	4944      	ldr	r1, [pc, #272]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e4a:	4313      	orrs	r3, r2
 8007e4c:	604b      	str	r3, [r1, #4]
 8007e4e:	e023      	b.n	8007e98 <HAL_RCC_OscConfig+0x434>
 8007e50:	4b42      	ldr	r3, [pc, #264]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e52:	68db      	ldr	r3, [r3, #12]
 8007e54:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a1b      	ldr	r3, [r3, #32]
 8007e5c:	061b      	lsls	r3, r3, #24
 8007e5e:	493f      	ldr	r1, [pc, #252]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e60:	4313      	orrs	r3, r2
 8007e62:	60cb      	str	r3, [r1, #12]
 8007e64:	e018      	b.n	8007e98 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007e66:	4b3d      	ldr	r3, [pc, #244]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a3c      	ldr	r2, [pc, #240]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007e70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e72:	f7fa fd83 	bl	800297c <HAL_GetTick>
 8007e76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007e78:	e008      	b.n	8007e8c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007e7a:	f7fa fd7f 	bl	800297c <HAL_GetTick>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e82:	1ad3      	subs	r3, r2, r3
 8007e84:	2b02      	cmp	r3, #2
 8007e86:	d901      	bls.n	8007e8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007e88:	2303      	movs	r3, #3
 8007e8a:	e23d      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007e8c:	4b33      	ldr	r3, [pc, #204]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d1f0      	bne.n	8007e7a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f003 0308 	and.w	r3, r3, #8
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d036      	beq.n	8007f12 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	695b      	ldr	r3, [r3, #20]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d019      	beq.n	8007ee0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007eac:	4b2b      	ldr	r3, [pc, #172]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007eae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eb0:	4a2a      	ldr	r2, [pc, #168]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007eb2:	f043 0301 	orr.w	r3, r3, #1
 8007eb6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eb8:	f7fa fd60 	bl	800297c <HAL_GetTick>
 8007ebc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007ebe:	e008      	b.n	8007ed2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ec0:	f7fa fd5c 	bl	800297c <HAL_GetTick>
 8007ec4:	4602      	mov	r2, r0
 8007ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ec8:	1ad3      	subs	r3, r2, r3
 8007eca:	2b02      	cmp	r3, #2
 8007ecc:	d901      	bls.n	8007ed2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007ece:	2303      	movs	r3, #3
 8007ed0:	e21a      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007ed2:	4b22      	ldr	r3, [pc, #136]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ed6:	f003 0302 	and.w	r3, r3, #2
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d0f0      	beq.n	8007ec0 <HAL_RCC_OscConfig+0x45c>
 8007ede:	e018      	b.n	8007f12 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007ee0:	4b1e      	ldr	r3, [pc, #120]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007ee2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007ee6:	f023 0301 	bic.w	r3, r3, #1
 8007eea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eec:	f7fa fd46 	bl	800297c <HAL_GetTick>
 8007ef0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007ef2:	e008      	b.n	8007f06 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ef4:	f7fa fd42 	bl	800297c <HAL_GetTick>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efc:	1ad3      	subs	r3, r2, r3
 8007efe:	2b02      	cmp	r3, #2
 8007f00:	d901      	bls.n	8007f06 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007f02:	2303      	movs	r3, #3
 8007f04:	e200      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007f06:	4b15      	ldr	r3, [pc, #84]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007f08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007f0a:	f003 0302 	and.w	r3, r3, #2
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1f0      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 0320 	and.w	r3, r3, #32
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d039      	beq.n	8007f92 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	699b      	ldr	r3, [r3, #24]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d01c      	beq.n	8007f60 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007f26:	4b0d      	ldr	r3, [pc, #52]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a0c      	ldr	r2, [pc, #48]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007f2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007f30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007f32:	f7fa fd23 	bl	800297c <HAL_GetTick>
 8007f36:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f38:	e008      	b.n	8007f4c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f3a:	f7fa fd1f 	bl	800297c <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d901      	bls.n	8007f4c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e1dd      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007f4c:	4b03      	ldr	r3, [pc, #12]	@ (8007f5c <HAL_RCC_OscConfig+0x4f8>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d0f0      	beq.n	8007f3a <HAL_RCC_OscConfig+0x4d6>
 8007f58:	e01b      	b.n	8007f92 <HAL_RCC_OscConfig+0x52e>
 8007f5a:	bf00      	nop
 8007f5c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007f60:	4b9b      	ldr	r3, [pc, #620]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a9a      	ldr	r2, [pc, #616]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8007f66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007f6a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007f6c:	f7fa fd06 	bl	800297c <HAL_GetTick>
 8007f70:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f72:	e008      	b.n	8007f86 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007f74:	f7fa fd02 	bl	800297c <HAL_GetTick>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d901      	bls.n	8007f86 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e1c0      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007f86:	4b92      	ldr	r3, [pc, #584]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d1f0      	bne.n	8007f74 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 0304 	and.w	r3, r3, #4
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f000 8081 	beq.w	80080a2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007fa0:	4b8c      	ldr	r3, [pc, #560]	@ (80081d4 <HAL_RCC_OscConfig+0x770>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a8b      	ldr	r2, [pc, #556]	@ (80081d4 <HAL_RCC_OscConfig+0x770>)
 8007fa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007faa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007fac:	f7fa fce6 	bl	800297c <HAL_GetTick>
 8007fb0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fb2:	e008      	b.n	8007fc6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fb4:	f7fa fce2 	bl	800297c <HAL_GetTick>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fbc:	1ad3      	subs	r3, r2, r3
 8007fbe:	2b64      	cmp	r3, #100	@ 0x64
 8007fc0:	d901      	bls.n	8007fc6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	e1a0      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007fc6:	4b83      	ldr	r3, [pc, #524]	@ (80081d4 <HAL_RCC_OscConfig+0x770>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d0f0      	beq.n	8007fb4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d106      	bne.n	8007fe8 <HAL_RCC_OscConfig+0x584>
 8007fda:	4b7d      	ldr	r3, [pc, #500]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8007fdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007fde:	4a7c      	ldr	r2, [pc, #496]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8007fe0:	f043 0301 	orr.w	r3, r3, #1
 8007fe4:	6713      	str	r3, [r2, #112]	@ 0x70
 8007fe6:	e02d      	b.n	8008044 <HAL_RCC_OscConfig+0x5e0>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d10c      	bne.n	800800a <HAL_RCC_OscConfig+0x5a6>
 8007ff0:	4b77      	ldr	r3, [pc, #476]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8007ff2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ff4:	4a76      	ldr	r2, [pc, #472]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8007ff6:	f023 0301 	bic.w	r3, r3, #1
 8007ffa:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ffc:	4b74      	ldr	r3, [pc, #464]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8007ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008000:	4a73      	ldr	r2, [pc, #460]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008002:	f023 0304 	bic.w	r3, r3, #4
 8008006:	6713      	str	r3, [r2, #112]	@ 0x70
 8008008:	e01c      	b.n	8008044 <HAL_RCC_OscConfig+0x5e0>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	689b      	ldr	r3, [r3, #8]
 800800e:	2b05      	cmp	r3, #5
 8008010:	d10c      	bne.n	800802c <HAL_RCC_OscConfig+0x5c8>
 8008012:	4b6f      	ldr	r3, [pc, #444]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008016:	4a6e      	ldr	r2, [pc, #440]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008018:	f043 0304 	orr.w	r3, r3, #4
 800801c:	6713      	str	r3, [r2, #112]	@ 0x70
 800801e:	4b6c      	ldr	r3, [pc, #432]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008020:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008022:	4a6b      	ldr	r2, [pc, #428]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008024:	f043 0301 	orr.w	r3, r3, #1
 8008028:	6713      	str	r3, [r2, #112]	@ 0x70
 800802a:	e00b      	b.n	8008044 <HAL_RCC_OscConfig+0x5e0>
 800802c:	4b68      	ldr	r3, [pc, #416]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 800802e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008030:	4a67      	ldr	r2, [pc, #412]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008032:	f023 0301 	bic.w	r3, r3, #1
 8008036:	6713      	str	r3, [r2, #112]	@ 0x70
 8008038:	4b65      	ldr	r3, [pc, #404]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 800803a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800803c:	4a64      	ldr	r2, [pc, #400]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 800803e:	f023 0304 	bic.w	r3, r3, #4
 8008042:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d015      	beq.n	8008078 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800804c:	f7fa fc96 	bl	800297c <HAL_GetTick>
 8008050:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008052:	e00a      	b.n	800806a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008054:	f7fa fc92 	bl	800297c <HAL_GetTick>
 8008058:	4602      	mov	r2, r0
 800805a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008062:	4293      	cmp	r3, r2
 8008064:	d901      	bls.n	800806a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008066:	2303      	movs	r3, #3
 8008068:	e14e      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800806a:	4b59      	ldr	r3, [pc, #356]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 800806c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800806e:	f003 0302 	and.w	r3, r3, #2
 8008072:	2b00      	cmp	r3, #0
 8008074:	d0ee      	beq.n	8008054 <HAL_RCC_OscConfig+0x5f0>
 8008076:	e014      	b.n	80080a2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008078:	f7fa fc80 	bl	800297c <HAL_GetTick>
 800807c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800807e:	e00a      	b.n	8008096 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008080:	f7fa fc7c 	bl	800297c <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800808e:	4293      	cmp	r3, r2
 8008090:	d901      	bls.n	8008096 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e138      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008096:	4b4e      	ldr	r3, [pc, #312]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800809a:	f003 0302 	and.w	r3, r3, #2
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d1ee      	bne.n	8008080 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	f000 812d 	beq.w	8008306 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80080ac:	4b48      	ldr	r3, [pc, #288]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080b4:	2b18      	cmp	r3, #24
 80080b6:	f000 80bd 	beq.w	8008234 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080be:	2b02      	cmp	r3, #2
 80080c0:	f040 809e 	bne.w	8008200 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080c4:	4b42      	ldr	r3, [pc, #264]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a41      	ldr	r2, [pc, #260]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80080ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80080ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080d0:	f7fa fc54 	bl	800297c <HAL_GetTick>
 80080d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080d6:	e008      	b.n	80080ea <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080d8:	f7fa fc50 	bl	800297c <HAL_GetTick>
 80080dc:	4602      	mov	r2, r0
 80080de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e0:	1ad3      	subs	r3, r2, r3
 80080e2:	2b02      	cmp	r3, #2
 80080e4:	d901      	bls.n	80080ea <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80080e6:	2303      	movs	r3, #3
 80080e8:	e10e      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080ea:	4b39      	ldr	r3, [pc, #228]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d1f0      	bne.n	80080d8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80080f6:	4b36      	ldr	r3, [pc, #216]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80080f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80080fa:	4b37      	ldr	r3, [pc, #220]	@ (80081d8 <HAL_RCC_OscConfig+0x774>)
 80080fc:	4013      	ands	r3, r2
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8008102:	687a      	ldr	r2, [r7, #4]
 8008104:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8008106:	0112      	lsls	r2, r2, #4
 8008108:	430a      	orrs	r2, r1
 800810a:	4931      	ldr	r1, [pc, #196]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 800810c:	4313      	orrs	r3, r2
 800810e:	628b      	str	r3, [r1, #40]	@ 0x28
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008114:	3b01      	subs	r3, #1
 8008116:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800811e:	3b01      	subs	r3, #1
 8008120:	025b      	lsls	r3, r3, #9
 8008122:	b29b      	uxth	r3, r3
 8008124:	431a      	orrs	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800812a:	3b01      	subs	r3, #1
 800812c:	041b      	lsls	r3, r3, #16
 800812e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008132:	431a      	orrs	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008138:	3b01      	subs	r3, #1
 800813a:	061b      	lsls	r3, r3, #24
 800813c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008140:	4923      	ldr	r1, [pc, #140]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008142:	4313      	orrs	r3, r2
 8008144:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008146:	4b22      	ldr	r3, [pc, #136]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800814a:	4a21      	ldr	r2, [pc, #132]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 800814c:	f023 0301 	bic.w	r3, r3, #1
 8008150:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008152:	4b1f      	ldr	r3, [pc, #124]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008154:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008156:	4b21      	ldr	r3, [pc, #132]	@ (80081dc <HAL_RCC_OscConfig+0x778>)
 8008158:	4013      	ands	r3, r2
 800815a:	687a      	ldr	r2, [r7, #4]
 800815c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800815e:	00d2      	lsls	r2, r2, #3
 8008160:	491b      	ldr	r1, [pc, #108]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008162:	4313      	orrs	r3, r2
 8008164:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008166:	4b1a      	ldr	r3, [pc, #104]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800816a:	f023 020c 	bic.w	r2, r3, #12
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008172:	4917      	ldr	r1, [pc, #92]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008174:	4313      	orrs	r3, r2
 8008176:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008178:	4b15      	ldr	r3, [pc, #84]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 800817a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800817c:	f023 0202 	bic.w	r2, r3, #2
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008184:	4912      	ldr	r1, [pc, #72]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008186:	4313      	orrs	r3, r2
 8008188:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800818a:	4b11      	ldr	r3, [pc, #68]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 800818c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800818e:	4a10      	ldr	r2, [pc, #64]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008194:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008196:	4b0e      	ldr	r3, [pc, #56]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 8008198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800819a:	4a0d      	ldr	r2, [pc, #52]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 800819c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80081a2:	4b0b      	ldr	r3, [pc, #44]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80081a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081a6:	4a0a      	ldr	r2, [pc, #40]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80081a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80081ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80081ae:	4b08      	ldr	r3, [pc, #32]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80081b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081b2:	4a07      	ldr	r2, [pc, #28]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80081b4:	f043 0301 	orr.w	r3, r3, #1
 80081b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80081ba:	4b05      	ldr	r3, [pc, #20]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a04      	ldr	r2, [pc, #16]	@ (80081d0 <HAL_RCC_OscConfig+0x76c>)
 80081c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80081c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081c6:	f7fa fbd9 	bl	800297c <HAL_GetTick>
 80081ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80081cc:	e011      	b.n	80081f2 <HAL_RCC_OscConfig+0x78e>
 80081ce:	bf00      	nop
 80081d0:	58024400 	.word	0x58024400
 80081d4:	58024800 	.word	0x58024800
 80081d8:	fffffc0c 	.word	0xfffffc0c
 80081dc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80081e0:	f7fa fbcc 	bl	800297c <HAL_GetTick>
 80081e4:	4602      	mov	r2, r0
 80081e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e8:	1ad3      	subs	r3, r2, r3
 80081ea:	2b02      	cmp	r3, #2
 80081ec:	d901      	bls.n	80081f2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80081ee:	2303      	movs	r3, #3
 80081f0:	e08a      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80081f2:	4b47      	ldr	r3, [pc, #284]	@ (8008310 <HAL_RCC_OscConfig+0x8ac>)
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d0f0      	beq.n	80081e0 <HAL_RCC_OscConfig+0x77c>
 80081fe:	e082      	b.n	8008306 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008200:	4b43      	ldr	r3, [pc, #268]	@ (8008310 <HAL_RCC_OscConfig+0x8ac>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a42      	ldr	r2, [pc, #264]	@ (8008310 <HAL_RCC_OscConfig+0x8ac>)
 8008206:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800820a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800820c:	f7fa fbb6 	bl	800297c <HAL_GetTick>
 8008210:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008212:	e008      	b.n	8008226 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008214:	f7fa fbb2 	bl	800297c <HAL_GetTick>
 8008218:	4602      	mov	r2, r0
 800821a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	2b02      	cmp	r3, #2
 8008220:	d901      	bls.n	8008226 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008222:	2303      	movs	r3, #3
 8008224:	e070      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008226:	4b3a      	ldr	r3, [pc, #232]	@ (8008310 <HAL_RCC_OscConfig+0x8ac>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800822e:	2b00      	cmp	r3, #0
 8008230:	d1f0      	bne.n	8008214 <HAL_RCC_OscConfig+0x7b0>
 8008232:	e068      	b.n	8008306 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008234:	4b36      	ldr	r3, [pc, #216]	@ (8008310 <HAL_RCC_OscConfig+0x8ac>)
 8008236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008238:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800823a:	4b35      	ldr	r3, [pc, #212]	@ (8008310 <HAL_RCC_OscConfig+0x8ac>)
 800823c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800823e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008244:	2b01      	cmp	r3, #1
 8008246:	d031      	beq.n	80082ac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	f003 0203 	and.w	r2, r3, #3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008252:	429a      	cmp	r2, r3
 8008254:	d12a      	bne.n	80082ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	091b      	lsrs	r3, r3, #4
 800825a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008262:	429a      	cmp	r2, r3
 8008264:	d122      	bne.n	80082ac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008270:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008272:	429a      	cmp	r2, r3
 8008274:	d11a      	bne.n	80082ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	0a5b      	lsrs	r3, r3, #9
 800827a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008282:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008284:	429a      	cmp	r2, r3
 8008286:	d111      	bne.n	80082ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	0c1b      	lsrs	r3, r3, #16
 800828c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008294:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008296:	429a      	cmp	r2, r3
 8008298:	d108      	bne.n	80082ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	0e1b      	lsrs	r3, r3, #24
 800829e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d001      	beq.n	80082b0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80082ac:	2301      	movs	r3, #1
 80082ae:	e02b      	b.n	8008308 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80082b0:	4b17      	ldr	r3, [pc, #92]	@ (8008310 <HAL_RCC_OscConfig+0x8ac>)
 80082b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80082b4:	08db      	lsrs	r3, r3, #3
 80082b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082ba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	429a      	cmp	r2, r3
 80082c4:	d01f      	beq.n	8008306 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80082c6:	4b12      	ldr	r3, [pc, #72]	@ (8008310 <HAL_RCC_OscConfig+0x8ac>)
 80082c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082ca:	4a11      	ldr	r2, [pc, #68]	@ (8008310 <HAL_RCC_OscConfig+0x8ac>)
 80082cc:	f023 0301 	bic.w	r3, r3, #1
 80082d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80082d2:	f7fa fb53 	bl	800297c <HAL_GetTick>
 80082d6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80082d8:	bf00      	nop
 80082da:	f7fa fb4f 	bl	800297c <HAL_GetTick>
 80082de:	4602      	mov	r2, r0
 80082e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d0f9      	beq.n	80082da <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80082e6:	4b0a      	ldr	r3, [pc, #40]	@ (8008310 <HAL_RCC_OscConfig+0x8ac>)
 80082e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082ea:	4b0a      	ldr	r3, [pc, #40]	@ (8008314 <HAL_RCC_OscConfig+0x8b0>)
 80082ec:	4013      	ands	r3, r2
 80082ee:	687a      	ldr	r2, [r7, #4]
 80082f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80082f2:	00d2      	lsls	r2, r2, #3
 80082f4:	4906      	ldr	r1, [pc, #24]	@ (8008310 <HAL_RCC_OscConfig+0x8ac>)
 80082f6:	4313      	orrs	r3, r2
 80082f8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80082fa:	4b05      	ldr	r3, [pc, #20]	@ (8008310 <HAL_RCC_OscConfig+0x8ac>)
 80082fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082fe:	4a04      	ldr	r2, [pc, #16]	@ (8008310 <HAL_RCC_OscConfig+0x8ac>)
 8008300:	f043 0301 	orr.w	r3, r3, #1
 8008304:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3730      	adds	r7, #48	@ 0x30
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	58024400 	.word	0x58024400
 8008314:	ffff0007 	.word	0xffff0007

08008318 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b086      	sub	sp, #24
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
 8008320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d101      	bne.n	800832c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008328:	2301      	movs	r3, #1
 800832a:	e19c      	b.n	8008666 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800832c:	4b8a      	ldr	r3, [pc, #552]	@ (8008558 <HAL_RCC_ClockConfig+0x240>)
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	f003 030f 	and.w	r3, r3, #15
 8008334:	683a      	ldr	r2, [r7, #0]
 8008336:	429a      	cmp	r2, r3
 8008338:	d910      	bls.n	800835c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800833a:	4b87      	ldr	r3, [pc, #540]	@ (8008558 <HAL_RCC_ClockConfig+0x240>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f023 020f 	bic.w	r2, r3, #15
 8008342:	4985      	ldr	r1, [pc, #532]	@ (8008558 <HAL_RCC_ClockConfig+0x240>)
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	4313      	orrs	r3, r2
 8008348:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800834a:	4b83      	ldr	r3, [pc, #524]	@ (8008558 <HAL_RCC_ClockConfig+0x240>)
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f003 030f 	and.w	r3, r3, #15
 8008352:	683a      	ldr	r2, [r7, #0]
 8008354:	429a      	cmp	r2, r3
 8008356:	d001      	beq.n	800835c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008358:	2301      	movs	r3, #1
 800835a:	e184      	b.n	8008666 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f003 0304 	and.w	r3, r3, #4
 8008364:	2b00      	cmp	r3, #0
 8008366:	d010      	beq.n	800838a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	691a      	ldr	r2, [r3, #16]
 800836c:	4b7b      	ldr	r3, [pc, #492]	@ (800855c <HAL_RCC_ClockConfig+0x244>)
 800836e:	699b      	ldr	r3, [r3, #24]
 8008370:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008374:	429a      	cmp	r2, r3
 8008376:	d908      	bls.n	800838a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008378:	4b78      	ldr	r3, [pc, #480]	@ (800855c <HAL_RCC_ClockConfig+0x244>)
 800837a:	699b      	ldr	r3, [r3, #24]
 800837c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	691b      	ldr	r3, [r3, #16]
 8008384:	4975      	ldr	r1, [pc, #468]	@ (800855c <HAL_RCC_ClockConfig+0x244>)
 8008386:	4313      	orrs	r3, r2
 8008388:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 0308 	and.w	r3, r3, #8
 8008392:	2b00      	cmp	r3, #0
 8008394:	d010      	beq.n	80083b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	695a      	ldr	r2, [r3, #20]
 800839a:	4b70      	ldr	r3, [pc, #448]	@ (800855c <HAL_RCC_ClockConfig+0x244>)
 800839c:	69db      	ldr	r3, [r3, #28]
 800839e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80083a2:	429a      	cmp	r2, r3
 80083a4:	d908      	bls.n	80083b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80083a6:	4b6d      	ldr	r3, [pc, #436]	@ (800855c <HAL_RCC_ClockConfig+0x244>)
 80083a8:	69db      	ldr	r3, [r3, #28]
 80083aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	695b      	ldr	r3, [r3, #20]
 80083b2:	496a      	ldr	r1, [pc, #424]	@ (800855c <HAL_RCC_ClockConfig+0x244>)
 80083b4:	4313      	orrs	r3, r2
 80083b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0310 	and.w	r3, r3, #16
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d010      	beq.n	80083e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	699a      	ldr	r2, [r3, #24]
 80083c8:	4b64      	ldr	r3, [pc, #400]	@ (800855c <HAL_RCC_ClockConfig+0x244>)
 80083ca:	69db      	ldr	r3, [r3, #28]
 80083cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80083d0:	429a      	cmp	r2, r3
 80083d2:	d908      	bls.n	80083e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80083d4:	4b61      	ldr	r3, [pc, #388]	@ (800855c <HAL_RCC_ClockConfig+0x244>)
 80083d6:	69db      	ldr	r3, [r3, #28]
 80083d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	699b      	ldr	r3, [r3, #24]
 80083e0:	495e      	ldr	r1, [pc, #376]	@ (800855c <HAL_RCC_ClockConfig+0x244>)
 80083e2:	4313      	orrs	r3, r2
 80083e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0320 	and.w	r3, r3, #32
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d010      	beq.n	8008414 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	69da      	ldr	r2, [r3, #28]
 80083f6:	4b59      	ldr	r3, [pc, #356]	@ (800855c <HAL_RCC_ClockConfig+0x244>)
 80083f8:	6a1b      	ldr	r3, [r3, #32]
 80083fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80083fe:	429a      	cmp	r2, r3
 8008400:	d908      	bls.n	8008414 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008402:	4b56      	ldr	r3, [pc, #344]	@ (800855c <HAL_RCC_ClockConfig+0x244>)
 8008404:	6a1b      	ldr	r3, [r3, #32]
 8008406:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	69db      	ldr	r3, [r3, #28]
 800840e:	4953      	ldr	r1, [pc, #332]	@ (800855c <HAL_RCC_ClockConfig+0x244>)
 8008410:	4313      	orrs	r3, r2
 8008412:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f003 0302 	and.w	r3, r3, #2
 800841c:	2b00      	cmp	r3, #0
 800841e:	d010      	beq.n	8008442 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	68da      	ldr	r2, [r3, #12]
 8008424:	4b4d      	ldr	r3, [pc, #308]	@ (800855c <HAL_RCC_ClockConfig+0x244>)
 8008426:	699b      	ldr	r3, [r3, #24]
 8008428:	f003 030f 	and.w	r3, r3, #15
 800842c:	429a      	cmp	r2, r3
 800842e:	d908      	bls.n	8008442 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008430:	4b4a      	ldr	r3, [pc, #296]	@ (800855c <HAL_RCC_ClockConfig+0x244>)
 8008432:	699b      	ldr	r3, [r3, #24]
 8008434:	f023 020f 	bic.w	r2, r3, #15
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	68db      	ldr	r3, [r3, #12]
 800843c:	4947      	ldr	r1, [pc, #284]	@ (800855c <HAL_RCC_ClockConfig+0x244>)
 800843e:	4313      	orrs	r3, r2
 8008440:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f003 0301 	and.w	r3, r3, #1
 800844a:	2b00      	cmp	r3, #0
 800844c:	d055      	beq.n	80084fa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800844e:	4b43      	ldr	r3, [pc, #268]	@ (800855c <HAL_RCC_ClockConfig+0x244>)
 8008450:	699b      	ldr	r3, [r3, #24]
 8008452:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	4940      	ldr	r1, [pc, #256]	@ (800855c <HAL_RCC_ClockConfig+0x244>)
 800845c:	4313      	orrs	r3, r2
 800845e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	2b02      	cmp	r3, #2
 8008466:	d107      	bne.n	8008478 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008468:	4b3c      	ldr	r3, [pc, #240]	@ (800855c <HAL_RCC_ClockConfig+0x244>)
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008470:	2b00      	cmp	r3, #0
 8008472:	d121      	bne.n	80084b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	e0f6      	b.n	8008666 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	2b03      	cmp	r3, #3
 800847e:	d107      	bne.n	8008490 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008480:	4b36      	ldr	r3, [pc, #216]	@ (800855c <HAL_RCC_ClockConfig+0x244>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008488:	2b00      	cmp	r3, #0
 800848a:	d115      	bne.n	80084b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800848c:	2301      	movs	r3, #1
 800848e:	e0ea      	b.n	8008666 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	2b01      	cmp	r3, #1
 8008496:	d107      	bne.n	80084a8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008498:	4b30      	ldr	r3, [pc, #192]	@ (800855c <HAL_RCC_ClockConfig+0x244>)
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d109      	bne.n	80084b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	e0de      	b.n	8008666 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80084a8:	4b2c      	ldr	r3, [pc, #176]	@ (800855c <HAL_RCC_ClockConfig+0x244>)
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 0304 	and.w	r3, r3, #4
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d101      	bne.n	80084b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	e0d6      	b.n	8008666 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80084b8:	4b28      	ldr	r3, [pc, #160]	@ (800855c <HAL_RCC_ClockConfig+0x244>)
 80084ba:	691b      	ldr	r3, [r3, #16]
 80084bc:	f023 0207 	bic.w	r2, r3, #7
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	685b      	ldr	r3, [r3, #4]
 80084c4:	4925      	ldr	r1, [pc, #148]	@ (800855c <HAL_RCC_ClockConfig+0x244>)
 80084c6:	4313      	orrs	r3, r2
 80084c8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084ca:	f7fa fa57 	bl	800297c <HAL_GetTick>
 80084ce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084d0:	e00a      	b.n	80084e8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084d2:	f7fa fa53 	bl	800297c <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	697b      	ldr	r3, [r7, #20]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d901      	bls.n	80084e8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80084e4:	2303      	movs	r3, #3
 80084e6:	e0be      	b.n	8008666 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084e8:	4b1c      	ldr	r3, [pc, #112]	@ (800855c <HAL_RCC_ClockConfig+0x244>)
 80084ea:	691b      	ldr	r3, [r3, #16]
 80084ec:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	00db      	lsls	r3, r3, #3
 80084f6:	429a      	cmp	r2, r3
 80084f8:	d1eb      	bne.n	80084d2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 0302 	and.w	r3, r3, #2
 8008502:	2b00      	cmp	r3, #0
 8008504:	d010      	beq.n	8008528 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	68da      	ldr	r2, [r3, #12]
 800850a:	4b14      	ldr	r3, [pc, #80]	@ (800855c <HAL_RCC_ClockConfig+0x244>)
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	f003 030f 	and.w	r3, r3, #15
 8008512:	429a      	cmp	r2, r3
 8008514:	d208      	bcs.n	8008528 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008516:	4b11      	ldr	r3, [pc, #68]	@ (800855c <HAL_RCC_ClockConfig+0x244>)
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	f023 020f 	bic.w	r2, r3, #15
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	68db      	ldr	r3, [r3, #12]
 8008522:	490e      	ldr	r1, [pc, #56]	@ (800855c <HAL_RCC_ClockConfig+0x244>)
 8008524:	4313      	orrs	r3, r2
 8008526:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008528:	4b0b      	ldr	r3, [pc, #44]	@ (8008558 <HAL_RCC_ClockConfig+0x240>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f003 030f 	and.w	r3, r3, #15
 8008530:	683a      	ldr	r2, [r7, #0]
 8008532:	429a      	cmp	r2, r3
 8008534:	d214      	bcs.n	8008560 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008536:	4b08      	ldr	r3, [pc, #32]	@ (8008558 <HAL_RCC_ClockConfig+0x240>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f023 020f 	bic.w	r2, r3, #15
 800853e:	4906      	ldr	r1, [pc, #24]	@ (8008558 <HAL_RCC_ClockConfig+0x240>)
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	4313      	orrs	r3, r2
 8008544:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008546:	4b04      	ldr	r3, [pc, #16]	@ (8008558 <HAL_RCC_ClockConfig+0x240>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f003 030f 	and.w	r3, r3, #15
 800854e:	683a      	ldr	r2, [r7, #0]
 8008550:	429a      	cmp	r2, r3
 8008552:	d005      	beq.n	8008560 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	e086      	b.n	8008666 <HAL_RCC_ClockConfig+0x34e>
 8008558:	52002000 	.word	0x52002000
 800855c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	f003 0304 	and.w	r3, r3, #4
 8008568:	2b00      	cmp	r3, #0
 800856a:	d010      	beq.n	800858e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	691a      	ldr	r2, [r3, #16]
 8008570:	4b3f      	ldr	r3, [pc, #252]	@ (8008670 <HAL_RCC_ClockConfig+0x358>)
 8008572:	699b      	ldr	r3, [r3, #24]
 8008574:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008578:	429a      	cmp	r2, r3
 800857a:	d208      	bcs.n	800858e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800857c:	4b3c      	ldr	r3, [pc, #240]	@ (8008670 <HAL_RCC_ClockConfig+0x358>)
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	691b      	ldr	r3, [r3, #16]
 8008588:	4939      	ldr	r1, [pc, #228]	@ (8008670 <HAL_RCC_ClockConfig+0x358>)
 800858a:	4313      	orrs	r3, r2
 800858c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f003 0308 	and.w	r3, r3, #8
 8008596:	2b00      	cmp	r3, #0
 8008598:	d010      	beq.n	80085bc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	695a      	ldr	r2, [r3, #20]
 800859e:	4b34      	ldr	r3, [pc, #208]	@ (8008670 <HAL_RCC_ClockConfig+0x358>)
 80085a0:	69db      	ldr	r3, [r3, #28]
 80085a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80085a6:	429a      	cmp	r2, r3
 80085a8:	d208      	bcs.n	80085bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80085aa:	4b31      	ldr	r3, [pc, #196]	@ (8008670 <HAL_RCC_ClockConfig+0x358>)
 80085ac:	69db      	ldr	r3, [r3, #28]
 80085ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	695b      	ldr	r3, [r3, #20]
 80085b6:	492e      	ldr	r1, [pc, #184]	@ (8008670 <HAL_RCC_ClockConfig+0x358>)
 80085b8:	4313      	orrs	r3, r2
 80085ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f003 0310 	and.w	r3, r3, #16
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d010      	beq.n	80085ea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	699a      	ldr	r2, [r3, #24]
 80085cc:	4b28      	ldr	r3, [pc, #160]	@ (8008670 <HAL_RCC_ClockConfig+0x358>)
 80085ce:	69db      	ldr	r3, [r3, #28]
 80085d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d208      	bcs.n	80085ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80085d8:	4b25      	ldr	r3, [pc, #148]	@ (8008670 <HAL_RCC_ClockConfig+0x358>)
 80085da:	69db      	ldr	r3, [r3, #28]
 80085dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	699b      	ldr	r3, [r3, #24]
 80085e4:	4922      	ldr	r1, [pc, #136]	@ (8008670 <HAL_RCC_ClockConfig+0x358>)
 80085e6:	4313      	orrs	r3, r2
 80085e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f003 0320 	and.w	r3, r3, #32
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d010      	beq.n	8008618 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	69da      	ldr	r2, [r3, #28]
 80085fa:	4b1d      	ldr	r3, [pc, #116]	@ (8008670 <HAL_RCC_ClockConfig+0x358>)
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008602:	429a      	cmp	r2, r3
 8008604:	d208      	bcs.n	8008618 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008606:	4b1a      	ldr	r3, [pc, #104]	@ (8008670 <HAL_RCC_ClockConfig+0x358>)
 8008608:	6a1b      	ldr	r3, [r3, #32]
 800860a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	69db      	ldr	r3, [r3, #28]
 8008612:	4917      	ldr	r1, [pc, #92]	@ (8008670 <HAL_RCC_ClockConfig+0x358>)
 8008614:	4313      	orrs	r3, r2
 8008616:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008618:	f000 f834 	bl	8008684 <HAL_RCC_GetSysClockFreq>
 800861c:	4602      	mov	r2, r0
 800861e:	4b14      	ldr	r3, [pc, #80]	@ (8008670 <HAL_RCC_ClockConfig+0x358>)
 8008620:	699b      	ldr	r3, [r3, #24]
 8008622:	0a1b      	lsrs	r3, r3, #8
 8008624:	f003 030f 	and.w	r3, r3, #15
 8008628:	4912      	ldr	r1, [pc, #72]	@ (8008674 <HAL_RCC_ClockConfig+0x35c>)
 800862a:	5ccb      	ldrb	r3, [r1, r3]
 800862c:	f003 031f 	and.w	r3, r3, #31
 8008630:	fa22 f303 	lsr.w	r3, r2, r3
 8008634:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008636:	4b0e      	ldr	r3, [pc, #56]	@ (8008670 <HAL_RCC_ClockConfig+0x358>)
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	f003 030f 	and.w	r3, r3, #15
 800863e:	4a0d      	ldr	r2, [pc, #52]	@ (8008674 <HAL_RCC_ClockConfig+0x35c>)
 8008640:	5cd3      	ldrb	r3, [r2, r3]
 8008642:	f003 031f 	and.w	r3, r3, #31
 8008646:	693a      	ldr	r2, [r7, #16]
 8008648:	fa22 f303 	lsr.w	r3, r2, r3
 800864c:	4a0a      	ldr	r2, [pc, #40]	@ (8008678 <HAL_RCC_ClockConfig+0x360>)
 800864e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008650:	4a0a      	ldr	r2, [pc, #40]	@ (800867c <HAL_RCC_ClockConfig+0x364>)
 8008652:	693b      	ldr	r3, [r7, #16]
 8008654:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008656:	4b0a      	ldr	r3, [pc, #40]	@ (8008680 <HAL_RCC_ClockConfig+0x368>)
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4618      	mov	r0, r3
 800865c:	f7fa f944 	bl	80028e8 <HAL_InitTick>
 8008660:	4603      	mov	r3, r0
 8008662:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008664:	7bfb      	ldrb	r3, [r7, #15]
}
 8008666:	4618      	mov	r0, r3
 8008668:	3718      	adds	r7, #24
 800866a:	46bd      	mov	sp, r7
 800866c:	bd80      	pop	{r7, pc}
 800866e:	bf00      	nop
 8008670:	58024400 	.word	0x58024400
 8008674:	08014a24 	.word	0x08014a24
 8008678:	24000004 	.word	0x24000004
 800867c:	24000000 	.word	0x24000000
 8008680:	2400002c 	.word	0x2400002c

08008684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008684:	b480      	push	{r7}
 8008686:	b089      	sub	sp, #36	@ 0x24
 8008688:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800868a:	4bb3      	ldr	r3, [pc, #716]	@ (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800868c:	691b      	ldr	r3, [r3, #16]
 800868e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008692:	2b18      	cmp	r3, #24
 8008694:	f200 8155 	bhi.w	8008942 <HAL_RCC_GetSysClockFreq+0x2be>
 8008698:	a201      	add	r2, pc, #4	@ (adr r2, 80086a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800869a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869e:	bf00      	nop
 80086a0:	08008705 	.word	0x08008705
 80086a4:	08008943 	.word	0x08008943
 80086a8:	08008943 	.word	0x08008943
 80086ac:	08008943 	.word	0x08008943
 80086b0:	08008943 	.word	0x08008943
 80086b4:	08008943 	.word	0x08008943
 80086b8:	08008943 	.word	0x08008943
 80086bc:	08008943 	.word	0x08008943
 80086c0:	0800872b 	.word	0x0800872b
 80086c4:	08008943 	.word	0x08008943
 80086c8:	08008943 	.word	0x08008943
 80086cc:	08008943 	.word	0x08008943
 80086d0:	08008943 	.word	0x08008943
 80086d4:	08008943 	.word	0x08008943
 80086d8:	08008943 	.word	0x08008943
 80086dc:	08008943 	.word	0x08008943
 80086e0:	08008731 	.word	0x08008731
 80086e4:	08008943 	.word	0x08008943
 80086e8:	08008943 	.word	0x08008943
 80086ec:	08008943 	.word	0x08008943
 80086f0:	08008943 	.word	0x08008943
 80086f4:	08008943 	.word	0x08008943
 80086f8:	08008943 	.word	0x08008943
 80086fc:	08008943 	.word	0x08008943
 8008700:	08008737 	.word	0x08008737
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008704:	4b94      	ldr	r3, [pc, #592]	@ (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 0320 	and.w	r3, r3, #32
 800870c:	2b00      	cmp	r3, #0
 800870e:	d009      	beq.n	8008724 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008710:	4b91      	ldr	r3, [pc, #580]	@ (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	08db      	lsrs	r3, r3, #3
 8008716:	f003 0303 	and.w	r3, r3, #3
 800871a:	4a90      	ldr	r2, [pc, #576]	@ (800895c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800871c:	fa22 f303 	lsr.w	r3, r2, r3
 8008720:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008722:	e111      	b.n	8008948 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008724:	4b8d      	ldr	r3, [pc, #564]	@ (800895c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008726:	61bb      	str	r3, [r7, #24]
      break;
 8008728:	e10e      	b.n	8008948 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800872a:	4b8d      	ldr	r3, [pc, #564]	@ (8008960 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800872c:	61bb      	str	r3, [r7, #24]
      break;
 800872e:	e10b      	b.n	8008948 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008730:	4b8c      	ldr	r3, [pc, #560]	@ (8008964 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008732:	61bb      	str	r3, [r7, #24]
      break;
 8008734:	e108      	b.n	8008948 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008736:	4b88      	ldr	r3, [pc, #544]	@ (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800873a:	f003 0303 	and.w	r3, r3, #3
 800873e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008740:	4b85      	ldr	r3, [pc, #532]	@ (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008744:	091b      	lsrs	r3, r3, #4
 8008746:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800874a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800874c:	4b82      	ldr	r3, [pc, #520]	@ (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800874e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008750:	f003 0301 	and.w	r3, r3, #1
 8008754:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008756:	4b80      	ldr	r3, [pc, #512]	@ (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008758:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800875a:	08db      	lsrs	r3, r3, #3
 800875c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	fb02 f303 	mul.w	r3, r2, r3
 8008766:	ee07 3a90 	vmov	s15, r3
 800876a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800876e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008772:	693b      	ldr	r3, [r7, #16]
 8008774:	2b00      	cmp	r3, #0
 8008776:	f000 80e1 	beq.w	800893c <HAL_RCC_GetSysClockFreq+0x2b8>
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	2b02      	cmp	r3, #2
 800877e:	f000 8083 	beq.w	8008888 <HAL_RCC_GetSysClockFreq+0x204>
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	2b02      	cmp	r3, #2
 8008786:	f200 80a1 	bhi.w	80088cc <HAL_RCC_GetSysClockFreq+0x248>
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d003      	beq.n	8008798 <HAL_RCC_GetSysClockFreq+0x114>
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	2b01      	cmp	r3, #1
 8008794:	d056      	beq.n	8008844 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008796:	e099      	b.n	80088cc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008798:	4b6f      	ldr	r3, [pc, #444]	@ (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 0320 	and.w	r3, r3, #32
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d02d      	beq.n	8008800 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80087a4:	4b6c      	ldr	r3, [pc, #432]	@ (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	08db      	lsrs	r3, r3, #3
 80087aa:	f003 0303 	and.w	r3, r3, #3
 80087ae:	4a6b      	ldr	r2, [pc, #428]	@ (800895c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80087b0:	fa22 f303 	lsr.w	r3, r2, r3
 80087b4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	ee07 3a90 	vmov	s15, r3
 80087bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	ee07 3a90 	vmov	s15, r3
 80087c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087ce:	4b62      	ldr	r3, [pc, #392]	@ (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087d6:	ee07 3a90 	vmov	s15, r3
 80087da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087de:	ed97 6a02 	vldr	s12, [r7, #8]
 80087e2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008968 <HAL_RCC_GetSysClockFreq+0x2e4>
 80087e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80087f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087fa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80087fe:	e087      	b.n	8008910 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008800:	693b      	ldr	r3, [r7, #16]
 8008802:	ee07 3a90 	vmov	s15, r3
 8008806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800880a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800896c <HAL_RCC_GetSysClockFreq+0x2e8>
 800880e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008812:	4b51      	ldr	r3, [pc, #324]	@ (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008816:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800881a:	ee07 3a90 	vmov	s15, r3
 800881e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008822:	ed97 6a02 	vldr	s12, [r7, #8]
 8008826:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008968 <HAL_RCC_GetSysClockFreq+0x2e4>
 800882a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800882e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008832:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008836:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800883a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800883e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008842:	e065      	b.n	8008910 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	ee07 3a90 	vmov	s15, r3
 800884a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800884e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008970 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008852:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008856:	4b40      	ldr	r3, [pc, #256]	@ (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800885a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800885e:	ee07 3a90 	vmov	s15, r3
 8008862:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008866:	ed97 6a02 	vldr	s12, [r7, #8]
 800886a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008968 <HAL_RCC_GetSysClockFreq+0x2e4>
 800886e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008872:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008876:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800887a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800887e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008882:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008886:	e043      	b.n	8008910 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	ee07 3a90 	vmov	s15, r3
 800888e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008892:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008974 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800889a:	4b2f      	ldr	r3, [pc, #188]	@ (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800889c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800889e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088a2:	ee07 3a90 	vmov	s15, r3
 80088a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80088ae:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008968 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80088be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80088ca:	e021      	b.n	8008910 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	ee07 3a90 	vmov	s15, r3
 80088d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088d6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008970 <HAL_RCC_GetSysClockFreq+0x2ec>
 80088da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088de:	4b1e      	ldr	r3, [pc, #120]	@ (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088e6:	ee07 3a90 	vmov	s15, r3
 80088ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80088f2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008968 <HAL_RCC_GetSysClockFreq+0x2e4>
 80088f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800890a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800890e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008910:	4b11      	ldr	r3, [pc, #68]	@ (8008958 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008914:	0a5b      	lsrs	r3, r3, #9
 8008916:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800891a:	3301      	adds	r3, #1
 800891c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800891e:	683b      	ldr	r3, [r7, #0]
 8008920:	ee07 3a90 	vmov	s15, r3
 8008924:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008928:	edd7 6a07 	vldr	s13, [r7, #28]
 800892c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008930:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008934:	ee17 3a90 	vmov	r3, s15
 8008938:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800893a:	e005      	b.n	8008948 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800893c:	2300      	movs	r3, #0
 800893e:	61bb      	str	r3, [r7, #24]
      break;
 8008940:	e002      	b.n	8008948 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008942:	4b07      	ldr	r3, [pc, #28]	@ (8008960 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008944:	61bb      	str	r3, [r7, #24]
      break;
 8008946:	bf00      	nop
  }

  return sysclockfreq;
 8008948:	69bb      	ldr	r3, [r7, #24]
}
 800894a:	4618      	mov	r0, r3
 800894c:	3724      	adds	r7, #36	@ 0x24
 800894e:	46bd      	mov	sp, r7
 8008950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008954:	4770      	bx	lr
 8008956:	bf00      	nop
 8008958:	58024400 	.word	0x58024400
 800895c:	03d09000 	.word	0x03d09000
 8008960:	003d0900 	.word	0x003d0900
 8008964:	017d7840 	.word	0x017d7840
 8008968:	46000000 	.word	0x46000000
 800896c:	4c742400 	.word	0x4c742400
 8008970:	4a742400 	.word	0x4a742400
 8008974:	4bbebc20 	.word	0x4bbebc20

08008978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800897e:	f7ff fe81 	bl	8008684 <HAL_RCC_GetSysClockFreq>
 8008982:	4602      	mov	r2, r0
 8008984:	4b10      	ldr	r3, [pc, #64]	@ (80089c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8008986:	699b      	ldr	r3, [r3, #24]
 8008988:	0a1b      	lsrs	r3, r3, #8
 800898a:	f003 030f 	and.w	r3, r3, #15
 800898e:	490f      	ldr	r1, [pc, #60]	@ (80089cc <HAL_RCC_GetHCLKFreq+0x54>)
 8008990:	5ccb      	ldrb	r3, [r1, r3]
 8008992:	f003 031f 	and.w	r3, r3, #31
 8008996:	fa22 f303 	lsr.w	r3, r2, r3
 800899a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800899c:	4b0a      	ldr	r3, [pc, #40]	@ (80089c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800899e:	699b      	ldr	r3, [r3, #24]
 80089a0:	f003 030f 	and.w	r3, r3, #15
 80089a4:	4a09      	ldr	r2, [pc, #36]	@ (80089cc <HAL_RCC_GetHCLKFreq+0x54>)
 80089a6:	5cd3      	ldrb	r3, [r2, r3]
 80089a8:	f003 031f 	and.w	r3, r3, #31
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	fa22 f303 	lsr.w	r3, r2, r3
 80089b2:	4a07      	ldr	r2, [pc, #28]	@ (80089d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80089b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80089b6:	4a07      	ldr	r2, [pc, #28]	@ (80089d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80089bc:	4b04      	ldr	r3, [pc, #16]	@ (80089d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80089be:	681b      	ldr	r3, [r3, #0]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	58024400 	.word	0x58024400
 80089cc:	08014a24 	.word	0x08014a24
 80089d0:	24000004 	.word	0x24000004
 80089d4:	24000000 	.word	0x24000000

080089d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80089dc:	f7ff ffcc 	bl	8008978 <HAL_RCC_GetHCLKFreq>
 80089e0:	4602      	mov	r2, r0
 80089e2:	4b06      	ldr	r3, [pc, #24]	@ (80089fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80089e4:	69db      	ldr	r3, [r3, #28]
 80089e6:	091b      	lsrs	r3, r3, #4
 80089e8:	f003 0307 	and.w	r3, r3, #7
 80089ec:	4904      	ldr	r1, [pc, #16]	@ (8008a00 <HAL_RCC_GetPCLK1Freq+0x28>)
 80089ee:	5ccb      	ldrb	r3, [r1, r3]
 80089f0:	f003 031f 	and.w	r3, r3, #31
 80089f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80089f8:	4618      	mov	r0, r3
 80089fa:	bd80      	pop	{r7, pc}
 80089fc:	58024400 	.word	0x58024400
 8008a00:	08014a24 	.word	0x08014a24

08008a04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008a08:	f7ff ffb6 	bl	8008978 <HAL_RCC_GetHCLKFreq>
 8008a0c:	4602      	mov	r2, r0
 8008a0e:	4b06      	ldr	r3, [pc, #24]	@ (8008a28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008a10:	69db      	ldr	r3, [r3, #28]
 8008a12:	0a1b      	lsrs	r3, r3, #8
 8008a14:	f003 0307 	and.w	r3, r3, #7
 8008a18:	4904      	ldr	r1, [pc, #16]	@ (8008a2c <HAL_RCC_GetPCLK2Freq+0x28>)
 8008a1a:	5ccb      	ldrb	r3, [r1, r3]
 8008a1c:	f003 031f 	and.w	r3, r3, #31
 8008a20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	bd80      	pop	{r7, pc}
 8008a28:	58024400 	.word	0x58024400
 8008a2c:	08014a24 	.word	0x08014a24

08008a30 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008a30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008a34:	b0ca      	sub	sp, #296	@ 0x128
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008a42:	2300      	movs	r3, #0
 8008a44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008a48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a50:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008a54:	2500      	movs	r5, #0
 8008a56:	ea54 0305 	orrs.w	r3, r4, r5
 8008a5a:	d049      	beq.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008a5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a60:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008a62:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008a66:	d02f      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008a68:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008a6c:	d828      	bhi.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008a6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a72:	d01a      	beq.n	8008aaa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008a74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a78:	d822      	bhi.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d003      	beq.n	8008a86 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008a7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a82:	d007      	beq.n	8008a94 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008a84:	e01c      	b.n	8008ac0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a86:	4bb8      	ldr	r3, [pc, #736]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a8a:	4ab7      	ldr	r2, [pc, #732]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008a92:	e01a      	b.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a98:	3308      	adds	r3, #8
 8008a9a:	2102      	movs	r1, #2
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f002 fb61 	bl	800b164 <RCCEx_PLL2_Config>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008aa8:	e00f      	b.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aae:	3328      	adds	r3, #40	@ 0x28
 8008ab0:	2102      	movs	r1, #2
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	f002 fc08 	bl	800b2c8 <RCCEx_PLL3_Config>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008abe:	e004      	b.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ac0:	2301      	movs	r3, #1
 8008ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ac6:	e000      	b.n	8008aca <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008ac8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008aca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d10a      	bne.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008ad2:	4ba5      	ldr	r3, [pc, #660]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ad6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ade:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008ae0:	4aa1      	ldr	r2, [pc, #644]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ae2:	430b      	orrs	r3, r1
 8008ae4:	6513      	str	r3, [r2, #80]	@ 0x50
 8008ae6:	e003      	b.n	8008af0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ae8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008aec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008afc:	f04f 0900 	mov.w	r9, #0
 8008b00:	ea58 0309 	orrs.w	r3, r8, r9
 8008b04:	d047      	beq.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b0c:	2b04      	cmp	r3, #4
 8008b0e:	d82a      	bhi.n	8008b66 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008b10:	a201      	add	r2, pc, #4	@ (adr r2, 8008b18 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b16:	bf00      	nop
 8008b18:	08008b2d 	.word	0x08008b2d
 8008b1c:	08008b3b 	.word	0x08008b3b
 8008b20:	08008b51 	.word	0x08008b51
 8008b24:	08008b6f 	.word	0x08008b6f
 8008b28:	08008b6f 	.word	0x08008b6f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b2c:	4b8e      	ldr	r3, [pc, #568]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b30:	4a8d      	ldr	r2, [pc, #564]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b32:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b38:	e01a      	b.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b3e:	3308      	adds	r3, #8
 8008b40:	2100      	movs	r1, #0
 8008b42:	4618      	mov	r0, r3
 8008b44:	f002 fb0e 	bl	800b164 <RCCEx_PLL2_Config>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b4e:	e00f      	b.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b54:	3328      	adds	r3, #40	@ 0x28
 8008b56:	2100      	movs	r1, #0
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f002 fbb5 	bl	800b2c8 <RCCEx_PLL3_Config>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b64:	e004      	b.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b66:	2301      	movs	r3, #1
 8008b68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b6c:	e000      	b.n	8008b70 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008b6e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d10a      	bne.n	8008b8e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008b78:	4b7b      	ldr	r3, [pc, #492]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008b7c:	f023 0107 	bic.w	r1, r3, #7
 8008b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b86:	4a78      	ldr	r2, [pc, #480]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b88:	430b      	orrs	r3, r1
 8008b8a:	6513      	str	r3, [r2, #80]	@ 0x50
 8008b8c:	e003      	b.n	8008b96 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b92:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8008ba2:	f04f 0b00 	mov.w	fp, #0
 8008ba6:	ea5a 030b 	orrs.w	r3, sl, fp
 8008baa:	d04c      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008bb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bb6:	d030      	beq.n	8008c1a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008bb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008bbc:	d829      	bhi.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008bbe:	2bc0      	cmp	r3, #192	@ 0xc0
 8008bc0:	d02d      	beq.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008bc2:	2bc0      	cmp	r3, #192	@ 0xc0
 8008bc4:	d825      	bhi.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008bc6:	2b80      	cmp	r3, #128	@ 0x80
 8008bc8:	d018      	beq.n	8008bfc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008bca:	2b80      	cmp	r3, #128	@ 0x80
 8008bcc:	d821      	bhi.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d002      	beq.n	8008bd8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008bd2:	2b40      	cmp	r3, #64	@ 0x40
 8008bd4:	d007      	beq.n	8008be6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008bd6:	e01c      	b.n	8008c12 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bd8:	4b63      	ldr	r3, [pc, #396]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bdc:	4a62      	ldr	r2, [pc, #392]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bde:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008be2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008be4:	e01c      	b.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bea:	3308      	adds	r3, #8
 8008bec:	2100      	movs	r1, #0
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f002 fab8 	bl	800b164 <RCCEx_PLL2_Config>
 8008bf4:	4603      	mov	r3, r0
 8008bf6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008bfa:	e011      	b.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c00:	3328      	adds	r3, #40	@ 0x28
 8008c02:	2100      	movs	r1, #0
 8008c04:	4618      	mov	r0, r3
 8008c06:	f002 fb5f 	bl	800b2c8 <RCCEx_PLL3_Config>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008c10:	e006      	b.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008c12:	2301      	movs	r3, #1
 8008c14:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c18:	e002      	b.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008c1a:	bf00      	nop
 8008c1c:	e000      	b.n	8008c20 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008c1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d10a      	bne.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008c28:	4b4f      	ldr	r3, [pc, #316]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c2c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c36:	4a4c      	ldr	r2, [pc, #304]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c38:	430b      	orrs	r3, r1
 8008c3a:	6513      	str	r3, [r2, #80]	@ 0x50
 8008c3c:	e003      	b.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c3e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c42:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008c46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008c52:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008c56:	2300      	movs	r3, #0
 8008c58:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008c5c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008c60:	460b      	mov	r3, r1
 8008c62:	4313      	orrs	r3, r2
 8008c64:	d053      	beq.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008c6e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008c72:	d035      	beq.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008c74:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008c78:	d82e      	bhi.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008c7a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008c7e:	d031      	beq.n	8008ce4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008c80:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008c84:	d828      	bhi.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008c86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008c8a:	d01a      	beq.n	8008cc2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008c8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008c90:	d822      	bhi.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d003      	beq.n	8008c9e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008c96:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008c9a:	d007      	beq.n	8008cac <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008c9c:	e01c      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c9e:	4b32      	ldr	r3, [pc, #200]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ca2:	4a31      	ldr	r2, [pc, #196]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ca4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ca8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008caa:	e01c      	b.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cb0:	3308      	adds	r3, #8
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f002 fa55 	bl	800b164 <RCCEx_PLL2_Config>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008cc0:	e011      	b.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cc6:	3328      	adds	r3, #40	@ 0x28
 8008cc8:	2100      	movs	r1, #0
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f002 fafc 	bl	800b2c8 <RCCEx_PLL3_Config>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008cd6:	e006      	b.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008cde:	e002      	b.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008ce0:	bf00      	nop
 8008ce2:	e000      	b.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008ce4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d10b      	bne.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008cee:	4b1e      	ldr	r3, [pc, #120]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cf2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cfa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008cfe:	4a1a      	ldr	r2, [pc, #104]	@ (8008d68 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008d00:	430b      	orrs	r3, r1
 8008d02:	6593      	str	r3, [r2, #88]	@ 0x58
 8008d04:	e003      	b.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d16:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008d1a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008d24:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008d28:	460b      	mov	r3, r1
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	d056      	beq.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d32:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008d36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008d3a:	d038      	beq.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008d3c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008d40:	d831      	bhi.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008d42:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008d46:	d034      	beq.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008d48:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008d4c:	d82b      	bhi.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008d4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d52:	d01d      	beq.n	8008d90 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008d54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008d58:	d825      	bhi.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d006      	beq.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008d5e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008d62:	d00a      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008d64:	e01f      	b.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008d66:	bf00      	nop
 8008d68:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d6c:	4ba2      	ldr	r3, [pc, #648]	@ (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d70:	4aa1      	ldr	r2, [pc, #644]	@ (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d72:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008d76:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d78:	e01c      	b.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d7e:	3308      	adds	r3, #8
 8008d80:	2100      	movs	r1, #0
 8008d82:	4618      	mov	r0, r3
 8008d84:	f002 f9ee 	bl	800b164 <RCCEx_PLL2_Config>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008d8e:	e011      	b.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d94:	3328      	adds	r3, #40	@ 0x28
 8008d96:	2100      	movs	r1, #0
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f002 fa95 	bl	800b2c8 <RCCEx_PLL3_Config>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008da4:	e006      	b.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008dac:	e002      	b.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008dae:	bf00      	nop
 8008db0:	e000      	b.n	8008db4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008db4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d10b      	bne.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008dbc:	4b8e      	ldr	r3, [pc, #568]	@ (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008dc0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dc8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008dcc:	4a8a      	ldr	r2, [pc, #552]	@ (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008dce:	430b      	orrs	r3, r1
 8008dd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8008dd2:	e003      	b.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008de8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008dec:	2300      	movs	r3, #0
 8008dee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008df2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008df6:	460b      	mov	r3, r1
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	d03a      	beq.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e02:	2b30      	cmp	r3, #48	@ 0x30
 8008e04:	d01f      	beq.n	8008e46 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008e06:	2b30      	cmp	r3, #48	@ 0x30
 8008e08:	d819      	bhi.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008e0a:	2b20      	cmp	r3, #32
 8008e0c:	d00c      	beq.n	8008e28 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008e0e:	2b20      	cmp	r3, #32
 8008e10:	d815      	bhi.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d019      	beq.n	8008e4a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008e16:	2b10      	cmp	r3, #16
 8008e18:	d111      	bne.n	8008e3e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e1a:	4b77      	ldr	r3, [pc, #476]	@ (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e1e:	4a76      	ldr	r2, [pc, #472]	@ (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008e24:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008e26:	e011      	b.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e2c:	3308      	adds	r3, #8
 8008e2e:	2102      	movs	r1, #2
 8008e30:	4618      	mov	r0, r3
 8008e32:	f002 f997 	bl	800b164 <RCCEx_PLL2_Config>
 8008e36:	4603      	mov	r3, r0
 8008e38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008e3c:	e006      	b.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e44:	e002      	b.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008e46:	bf00      	nop
 8008e48:	e000      	b.n	8008e4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008e4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d10a      	bne.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008e54:	4b68      	ldr	r3, [pc, #416]	@ (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e58:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008e62:	4a65      	ldr	r2, [pc, #404]	@ (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e64:	430b      	orrs	r3, r1
 8008e66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008e68:	e003      	b.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e7a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008e7e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008e82:	2300      	movs	r3, #0
 8008e84:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008e88:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	d051      	beq.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008e98:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008e9c:	d035      	beq.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008e9e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008ea2:	d82e      	bhi.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008ea4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008ea8:	d031      	beq.n	8008f0e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008eaa:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008eae:	d828      	bhi.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008eb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008eb4:	d01a      	beq.n	8008eec <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008eb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008eba:	d822      	bhi.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d003      	beq.n	8008ec8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008ec0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ec4:	d007      	beq.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008ec6:	e01c      	b.n	8008f02 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ec8:	4b4b      	ldr	r3, [pc, #300]	@ (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ecc:	4a4a      	ldr	r2, [pc, #296]	@ (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ece:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008ed2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008ed4:	e01c      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eda:	3308      	adds	r3, #8
 8008edc:	2100      	movs	r1, #0
 8008ede:	4618      	mov	r0, r3
 8008ee0:	f002 f940 	bl	800b164 <RCCEx_PLL2_Config>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008eea:	e011      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008eec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ef0:	3328      	adds	r3, #40	@ 0x28
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	f002 f9e7 	bl	800b2c8 <RCCEx_PLL3_Config>
 8008efa:	4603      	mov	r3, r0
 8008efc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008f00:	e006      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f08:	e002      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008f0a:	bf00      	nop
 8008f0c:	e000      	b.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008f0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d10a      	bne.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008f18:	4b37      	ldr	r3, [pc, #220]	@ (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f1c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008f26:	4a34      	ldr	r2, [pc, #208]	@ (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f28:	430b      	orrs	r3, r1
 8008f2a:	6513      	str	r3, [r2, #80]	@ 0x50
 8008f2c:	e003      	b.n	8008f36 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f32:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008f36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008f42:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008f46:	2300      	movs	r3, #0
 8008f48:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008f4c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008f50:	460b      	mov	r3, r1
 8008f52:	4313      	orrs	r3, r2
 8008f54:	d056      	beq.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008f56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f5c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f60:	d033      	beq.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008f62:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008f66:	d82c      	bhi.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008f68:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f6c:	d02f      	beq.n	8008fce <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008f6e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008f72:	d826      	bhi.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008f74:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f78:	d02b      	beq.n	8008fd2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008f7a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008f7e:	d820      	bhi.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008f80:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f84:	d012      	beq.n	8008fac <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008f86:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008f8a:	d81a      	bhi.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d022      	beq.n	8008fd6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008f94:	d115      	bne.n	8008fc2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f9a:	3308      	adds	r3, #8
 8008f9c:	2101      	movs	r1, #1
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	f002 f8e0 	bl	800b164 <RCCEx_PLL2_Config>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008faa:	e015      	b.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fb0:	3328      	adds	r3, #40	@ 0x28
 8008fb2:	2101      	movs	r1, #1
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f002 f987 	bl	800b2c8 <RCCEx_PLL3_Config>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008fc0:	e00a      	b.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008fc8:	e006      	b.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008fca:	bf00      	nop
 8008fcc:	e004      	b.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008fce:	bf00      	nop
 8008fd0:	e002      	b.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008fd2:	bf00      	nop
 8008fd4:	e000      	b.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008fd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fd8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d10d      	bne.n	8008ffc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008fe0:	4b05      	ldr	r3, [pc, #20]	@ (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008fe2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008fe4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fec:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008fee:	4a02      	ldr	r2, [pc, #8]	@ (8008ff8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ff0:	430b      	orrs	r3, r1
 8008ff2:	6513      	str	r3, [r2, #80]	@ 0x50
 8008ff4:	e006      	b.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008ff6:	bf00      	nop
 8008ff8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ffc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009000:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009004:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800900c:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8009010:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009014:	2300      	movs	r3, #0
 8009016:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800901a:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800901e:	460b      	mov	r3, r1
 8009020:	4313      	orrs	r3, r2
 8009022:	d055      	beq.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009028:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800902c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009030:	d033      	beq.n	800909a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009032:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009036:	d82c      	bhi.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009038:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800903c:	d02f      	beq.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800903e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009042:	d826      	bhi.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009044:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009048:	d02b      	beq.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800904a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800904e:	d820      	bhi.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009050:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009054:	d012      	beq.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009056:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800905a:	d81a      	bhi.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800905c:	2b00      	cmp	r3, #0
 800905e:	d022      	beq.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009060:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009064:	d115      	bne.n	8009092 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800906a:	3308      	adds	r3, #8
 800906c:	2101      	movs	r1, #1
 800906e:	4618      	mov	r0, r3
 8009070:	f002 f878 	bl	800b164 <RCCEx_PLL2_Config>
 8009074:	4603      	mov	r3, r0
 8009076:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800907a:	e015      	b.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800907c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009080:	3328      	adds	r3, #40	@ 0x28
 8009082:	2101      	movs	r1, #1
 8009084:	4618      	mov	r0, r3
 8009086:	f002 f91f 	bl	800b2c8 <RCCEx_PLL3_Config>
 800908a:	4603      	mov	r3, r0
 800908c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009090:	e00a      	b.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009098:	e006      	b.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800909a:	bf00      	nop
 800909c:	e004      	b.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800909e:	bf00      	nop
 80090a0:	e002      	b.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80090a2:	bf00      	nop
 80090a4:	e000      	b.n	80090a8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80090a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d10b      	bne.n	80090c8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80090b0:	4ba3      	ldr	r3, [pc, #652]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80090b4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80090b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090bc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80090c0:	4a9f      	ldr	r2, [pc, #636]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090c2:	430b      	orrs	r3, r1
 80090c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80090c6:	e003      	b.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80090d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80090dc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80090e0:	2300      	movs	r3, #0
 80090e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80090e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80090ea:	460b      	mov	r3, r1
 80090ec:	4313      	orrs	r3, r2
 80090ee:	d037      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80090f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80090fa:	d00e      	beq.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80090fc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009100:	d816      	bhi.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009102:	2b00      	cmp	r3, #0
 8009104:	d018      	beq.n	8009138 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009106:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800910a:	d111      	bne.n	8009130 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800910c:	4b8c      	ldr	r3, [pc, #560]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800910e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009110:	4a8b      	ldr	r2, [pc, #556]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009112:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009116:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009118:	e00f      	b.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800911a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800911e:	3308      	adds	r3, #8
 8009120:	2101      	movs	r1, #1
 8009122:	4618      	mov	r0, r3
 8009124:	f002 f81e 	bl	800b164 <RCCEx_PLL2_Config>
 8009128:	4603      	mov	r3, r0
 800912a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800912e:	e004      	b.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009130:	2301      	movs	r3, #1
 8009132:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009136:	e000      	b.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009138:	bf00      	nop
    }

    if (ret == HAL_OK)
 800913a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800913e:	2b00      	cmp	r3, #0
 8009140:	d10a      	bne.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009142:	4b7f      	ldr	r3, [pc, #508]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009146:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800914a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800914e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009150:	4a7b      	ldr	r2, [pc, #492]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009152:	430b      	orrs	r3, r1
 8009154:	6513      	str	r3, [r2, #80]	@ 0x50
 8009156:	e003      	b.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009158:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800915c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009160:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009168:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800916c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009170:	2300      	movs	r3, #0
 8009172:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8009176:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800917a:	460b      	mov	r3, r1
 800917c:	4313      	orrs	r3, r2
 800917e:	d039      	beq.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009184:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009186:	2b03      	cmp	r3, #3
 8009188:	d81c      	bhi.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800918a:	a201      	add	r2, pc, #4	@ (adr r2, 8009190 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800918c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009190:	080091cd 	.word	0x080091cd
 8009194:	080091a1 	.word	0x080091a1
 8009198:	080091af 	.word	0x080091af
 800919c:	080091cd 	.word	0x080091cd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80091a0:	4b67      	ldr	r3, [pc, #412]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091a4:	4a66      	ldr	r2, [pc, #408]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80091aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80091ac:	e00f      	b.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80091ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091b2:	3308      	adds	r3, #8
 80091b4:	2102      	movs	r1, #2
 80091b6:	4618      	mov	r0, r3
 80091b8:	f001 ffd4 	bl	800b164 <RCCEx_PLL2_Config>
 80091bc:	4603      	mov	r3, r0
 80091be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80091c2:	e004      	b.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80091c4:	2301      	movs	r3, #1
 80091c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80091ca:	e000      	b.n	80091ce <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80091cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d10a      	bne.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80091d6:	4b5a      	ldr	r3, [pc, #360]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80091da:	f023 0103 	bic.w	r1, r3, #3
 80091de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80091e4:	4a56      	ldr	r2, [pc, #344]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091e6:	430b      	orrs	r3, r1
 80091e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80091ea:	e003      	b.n	80091f4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80091f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091fc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8009200:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009204:	2300      	movs	r3, #0
 8009206:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800920a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800920e:	460b      	mov	r3, r1
 8009210:	4313      	orrs	r3, r2
 8009212:	f000 809f 	beq.w	8009354 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009216:	4b4b      	ldr	r3, [pc, #300]	@ (8009344 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	4a4a      	ldr	r2, [pc, #296]	@ (8009344 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800921c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009220:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009222:	f7f9 fbab 	bl	800297c <HAL_GetTick>
 8009226:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800922a:	e00b      	b.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800922c:	f7f9 fba6 	bl	800297c <HAL_GetTick>
 8009230:	4602      	mov	r2, r0
 8009232:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009236:	1ad3      	subs	r3, r2, r3
 8009238:	2b64      	cmp	r3, #100	@ 0x64
 800923a:	d903      	bls.n	8009244 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800923c:	2303      	movs	r3, #3
 800923e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009242:	e005      	b.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009244:	4b3f      	ldr	r3, [pc, #252]	@ (8009344 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800924c:	2b00      	cmp	r3, #0
 800924e:	d0ed      	beq.n	800922c <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009250:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009254:	2b00      	cmp	r3, #0
 8009256:	d179      	bne.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009258:	4b39      	ldr	r3, [pc, #228]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800925a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800925c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009260:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009264:	4053      	eors	r3, r2
 8009266:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800926a:	2b00      	cmp	r3, #0
 800926c:	d015      	beq.n	800929a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800926e:	4b34      	ldr	r3, [pc, #208]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009272:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009276:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800927a:	4b31      	ldr	r3, [pc, #196]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800927c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800927e:	4a30      	ldr	r2, [pc, #192]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009280:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009284:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009286:	4b2e      	ldr	r3, [pc, #184]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800928a:	4a2d      	ldr	r2, [pc, #180]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800928c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009290:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009292:	4a2b      	ldr	r2, [pc, #172]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009294:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009298:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800929a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800929e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80092a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80092a6:	d118      	bne.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092a8:	f7f9 fb68 	bl	800297c <HAL_GetTick>
 80092ac:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092b0:	e00d      	b.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092b2:	f7f9 fb63 	bl	800297c <HAL_GetTick>
 80092b6:	4602      	mov	r2, r0
 80092b8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80092bc:	1ad2      	subs	r2, r2, r3
 80092be:	f241 3388 	movw	r3, #5000	@ 0x1388
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d903      	bls.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80092c6:	2303      	movs	r3, #3
 80092c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80092cc:	e005      	b.n	80092da <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80092ce:	4b1c      	ldr	r3, [pc, #112]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80092d2:	f003 0302 	and.w	r3, r3, #2
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d0eb      	beq.n	80092b2 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80092da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d129      	bne.n	8009336 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80092e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80092ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80092ee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80092f2:	d10e      	bne.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80092f4:	4b12      	ldr	r3, [pc, #72]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80092fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009300:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009304:	091a      	lsrs	r2, r3, #4
 8009306:	4b10      	ldr	r3, [pc, #64]	@ (8009348 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009308:	4013      	ands	r3, r2
 800930a:	4a0d      	ldr	r2, [pc, #52]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800930c:	430b      	orrs	r3, r1
 800930e:	6113      	str	r3, [r2, #16]
 8009310:	e005      	b.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8009312:	4b0b      	ldr	r3, [pc, #44]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009314:	691b      	ldr	r3, [r3, #16]
 8009316:	4a0a      	ldr	r2, [pc, #40]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009318:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800931c:	6113      	str	r3, [r2, #16]
 800931e:	4b08      	ldr	r3, [pc, #32]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009320:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8009322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009326:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800932a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800932e:	4a04      	ldr	r2, [pc, #16]	@ (8009340 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009330:	430b      	orrs	r3, r1
 8009332:	6713      	str	r3, [r2, #112]	@ 0x70
 8009334:	e00e      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009336:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800933a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 800933e:	e009      	b.n	8009354 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009340:	58024400 	.word	0x58024400
 8009344:	58024800 	.word	0x58024800
 8009348:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800934c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009350:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935c:	f002 0301 	and.w	r3, r2, #1
 8009360:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009364:	2300      	movs	r3, #0
 8009366:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800936a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800936e:	460b      	mov	r3, r1
 8009370:	4313      	orrs	r3, r2
 8009372:	f000 8089 	beq.w	8009488 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8009376:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800937a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800937c:	2b28      	cmp	r3, #40	@ 0x28
 800937e:	d86b      	bhi.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009380:	a201      	add	r2, pc, #4	@ (adr r2, 8009388 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009386:	bf00      	nop
 8009388:	08009461 	.word	0x08009461
 800938c:	08009459 	.word	0x08009459
 8009390:	08009459 	.word	0x08009459
 8009394:	08009459 	.word	0x08009459
 8009398:	08009459 	.word	0x08009459
 800939c:	08009459 	.word	0x08009459
 80093a0:	08009459 	.word	0x08009459
 80093a4:	08009459 	.word	0x08009459
 80093a8:	0800942d 	.word	0x0800942d
 80093ac:	08009459 	.word	0x08009459
 80093b0:	08009459 	.word	0x08009459
 80093b4:	08009459 	.word	0x08009459
 80093b8:	08009459 	.word	0x08009459
 80093bc:	08009459 	.word	0x08009459
 80093c0:	08009459 	.word	0x08009459
 80093c4:	08009459 	.word	0x08009459
 80093c8:	08009443 	.word	0x08009443
 80093cc:	08009459 	.word	0x08009459
 80093d0:	08009459 	.word	0x08009459
 80093d4:	08009459 	.word	0x08009459
 80093d8:	08009459 	.word	0x08009459
 80093dc:	08009459 	.word	0x08009459
 80093e0:	08009459 	.word	0x08009459
 80093e4:	08009459 	.word	0x08009459
 80093e8:	08009461 	.word	0x08009461
 80093ec:	08009459 	.word	0x08009459
 80093f0:	08009459 	.word	0x08009459
 80093f4:	08009459 	.word	0x08009459
 80093f8:	08009459 	.word	0x08009459
 80093fc:	08009459 	.word	0x08009459
 8009400:	08009459 	.word	0x08009459
 8009404:	08009459 	.word	0x08009459
 8009408:	08009461 	.word	0x08009461
 800940c:	08009459 	.word	0x08009459
 8009410:	08009459 	.word	0x08009459
 8009414:	08009459 	.word	0x08009459
 8009418:	08009459 	.word	0x08009459
 800941c:	08009459 	.word	0x08009459
 8009420:	08009459 	.word	0x08009459
 8009424:	08009459 	.word	0x08009459
 8009428:	08009461 	.word	0x08009461
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800942c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009430:	3308      	adds	r3, #8
 8009432:	2101      	movs	r1, #1
 8009434:	4618      	mov	r0, r3
 8009436:	f001 fe95 	bl	800b164 <RCCEx_PLL2_Config>
 800943a:	4603      	mov	r3, r0
 800943c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009440:	e00f      	b.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009442:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009446:	3328      	adds	r3, #40	@ 0x28
 8009448:	2101      	movs	r1, #1
 800944a:	4618      	mov	r0, r3
 800944c:	f001 ff3c 	bl	800b2c8 <RCCEx_PLL3_Config>
 8009450:	4603      	mov	r3, r0
 8009452:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009456:	e004      	b.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009458:	2301      	movs	r3, #1
 800945a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800945e:	e000      	b.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009460:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009462:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009466:	2b00      	cmp	r3, #0
 8009468:	d10a      	bne.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800946a:	4bbf      	ldr	r3, [pc, #764]	@ (8009768 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800946c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800946e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009476:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009478:	4abb      	ldr	r2, [pc, #748]	@ (8009768 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800947a:	430b      	orrs	r3, r1
 800947c:	6553      	str	r3, [r2, #84]	@ 0x54
 800947e:	e003      	b.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009480:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009484:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009488:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800948c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009490:	f002 0302 	and.w	r3, r2, #2
 8009494:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009498:	2300      	movs	r3, #0
 800949a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800949e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80094a2:	460b      	mov	r3, r1
 80094a4:	4313      	orrs	r3, r2
 80094a6:	d041      	beq.n	800952c <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80094a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80094ae:	2b05      	cmp	r3, #5
 80094b0:	d824      	bhi.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80094b2:	a201      	add	r2, pc, #4	@ (adr r2, 80094b8 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80094b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094b8:	08009505 	.word	0x08009505
 80094bc:	080094d1 	.word	0x080094d1
 80094c0:	080094e7 	.word	0x080094e7
 80094c4:	08009505 	.word	0x08009505
 80094c8:	08009505 	.word	0x08009505
 80094cc:	08009505 	.word	0x08009505
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80094d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094d4:	3308      	adds	r3, #8
 80094d6:	2101      	movs	r1, #1
 80094d8:	4618      	mov	r0, r3
 80094da:	f001 fe43 	bl	800b164 <RCCEx_PLL2_Config>
 80094de:	4603      	mov	r3, r0
 80094e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80094e4:	e00f      	b.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094ea:	3328      	adds	r3, #40	@ 0x28
 80094ec:	2101      	movs	r1, #1
 80094ee:	4618      	mov	r0, r3
 80094f0:	f001 feea 	bl	800b2c8 <RCCEx_PLL3_Config>
 80094f4:	4603      	mov	r3, r0
 80094f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80094fa:	e004      	b.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009502:	e000      	b.n	8009506 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009506:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800950a:	2b00      	cmp	r3, #0
 800950c:	d10a      	bne.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800950e:	4b96      	ldr	r3, [pc, #600]	@ (8009768 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009512:	f023 0107 	bic.w	r1, r3, #7
 8009516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800951a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800951c:	4a92      	ldr	r2, [pc, #584]	@ (8009768 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800951e:	430b      	orrs	r3, r1
 8009520:	6553      	str	r3, [r2, #84]	@ 0x54
 8009522:	e003      	b.n	800952c <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009524:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009528:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800952c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009534:	f002 0304 	and.w	r3, r2, #4
 8009538:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800953c:	2300      	movs	r3, #0
 800953e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009542:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009546:	460b      	mov	r3, r1
 8009548:	4313      	orrs	r3, r2
 800954a:	d044      	beq.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800954c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009550:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009554:	2b05      	cmp	r3, #5
 8009556:	d825      	bhi.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009558:	a201      	add	r2, pc, #4	@ (adr r2, 8009560 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800955a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800955e:	bf00      	nop
 8009560:	080095ad 	.word	0x080095ad
 8009564:	08009579 	.word	0x08009579
 8009568:	0800958f 	.word	0x0800958f
 800956c:	080095ad 	.word	0x080095ad
 8009570:	080095ad 	.word	0x080095ad
 8009574:	080095ad 	.word	0x080095ad
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800957c:	3308      	adds	r3, #8
 800957e:	2101      	movs	r1, #1
 8009580:	4618      	mov	r0, r3
 8009582:	f001 fdef 	bl	800b164 <RCCEx_PLL2_Config>
 8009586:	4603      	mov	r3, r0
 8009588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800958c:	e00f      	b.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800958e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009592:	3328      	adds	r3, #40	@ 0x28
 8009594:	2101      	movs	r1, #1
 8009596:	4618      	mov	r0, r3
 8009598:	f001 fe96 	bl	800b2c8 <RCCEx_PLL3_Config>
 800959c:	4603      	mov	r3, r0
 800959e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80095a2:	e004      	b.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095a4:	2301      	movs	r3, #1
 80095a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095aa:	e000      	b.n	80095ae <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80095ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d10b      	bne.n	80095ce <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80095b6:	4b6c      	ldr	r3, [pc, #432]	@ (8009768 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80095b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095ba:	f023 0107 	bic.w	r1, r3, #7
 80095be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80095c6:	4a68      	ldr	r2, [pc, #416]	@ (8009768 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80095c8:	430b      	orrs	r3, r1
 80095ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80095cc:	e003      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80095d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095de:	f002 0320 	and.w	r3, r2, #32
 80095e2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80095e6:	2300      	movs	r3, #0
 80095e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80095ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80095f0:	460b      	mov	r3, r1
 80095f2:	4313      	orrs	r3, r2
 80095f4:	d055      	beq.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80095f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80095fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009602:	d033      	beq.n	800966c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009604:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009608:	d82c      	bhi.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800960a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800960e:	d02f      	beq.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009610:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009614:	d826      	bhi.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009616:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800961a:	d02b      	beq.n	8009674 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800961c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009620:	d820      	bhi.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009622:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009626:	d012      	beq.n	800964e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009628:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800962c:	d81a      	bhi.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800962e:	2b00      	cmp	r3, #0
 8009630:	d022      	beq.n	8009678 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009632:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009636:	d115      	bne.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800963c:	3308      	adds	r3, #8
 800963e:	2100      	movs	r1, #0
 8009640:	4618      	mov	r0, r3
 8009642:	f001 fd8f 	bl	800b164 <RCCEx_PLL2_Config>
 8009646:	4603      	mov	r3, r0
 8009648:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800964c:	e015      	b.n	800967a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800964e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009652:	3328      	adds	r3, #40	@ 0x28
 8009654:	2102      	movs	r1, #2
 8009656:	4618      	mov	r0, r3
 8009658:	f001 fe36 	bl	800b2c8 <RCCEx_PLL3_Config>
 800965c:	4603      	mov	r3, r0
 800965e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009662:	e00a      	b.n	800967a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009664:	2301      	movs	r3, #1
 8009666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800966a:	e006      	b.n	800967a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800966c:	bf00      	nop
 800966e:	e004      	b.n	800967a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009670:	bf00      	nop
 8009672:	e002      	b.n	800967a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009674:	bf00      	nop
 8009676:	e000      	b.n	800967a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009678:	bf00      	nop
    }

    if (ret == HAL_OK)
 800967a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800967e:	2b00      	cmp	r3, #0
 8009680:	d10b      	bne.n	800969a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009682:	4b39      	ldr	r3, [pc, #228]	@ (8009768 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009686:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800968a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800968e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009692:	4a35      	ldr	r2, [pc, #212]	@ (8009768 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009694:	430b      	orrs	r3, r1
 8009696:	6553      	str	r3, [r2, #84]	@ 0x54
 8009698:	e003      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800969a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800969e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80096a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096aa:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80096ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80096b2:	2300      	movs	r3, #0
 80096b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80096b8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80096bc:	460b      	mov	r3, r1
 80096be:	4313      	orrs	r3, r2
 80096c0:	d058      	beq.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80096c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80096ca:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80096ce:	d033      	beq.n	8009738 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80096d0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80096d4:	d82c      	bhi.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80096d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096da:	d02f      	beq.n	800973c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80096dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096e0:	d826      	bhi.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80096e2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80096e6:	d02b      	beq.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80096e8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80096ec:	d820      	bhi.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80096ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096f2:	d012      	beq.n	800971a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80096f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80096f8:	d81a      	bhi.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d022      	beq.n	8009744 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80096fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009702:	d115      	bne.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009704:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009708:	3308      	adds	r3, #8
 800970a:	2100      	movs	r1, #0
 800970c:	4618      	mov	r0, r3
 800970e:	f001 fd29 	bl	800b164 <RCCEx_PLL2_Config>
 8009712:	4603      	mov	r3, r0
 8009714:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009718:	e015      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800971a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800971e:	3328      	adds	r3, #40	@ 0x28
 8009720:	2102      	movs	r1, #2
 8009722:	4618      	mov	r0, r3
 8009724:	f001 fdd0 	bl	800b2c8 <RCCEx_PLL3_Config>
 8009728:	4603      	mov	r3, r0
 800972a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800972e:	e00a      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009730:	2301      	movs	r3, #1
 8009732:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009736:	e006      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009738:	bf00      	nop
 800973a:	e004      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800973c:	bf00      	nop
 800973e:	e002      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009740:	bf00      	nop
 8009742:	e000      	b.n	8009746 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009744:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009746:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800974a:	2b00      	cmp	r3, #0
 800974c:	d10e      	bne.n	800976c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800974e:	4b06      	ldr	r3, [pc, #24]	@ (8009768 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009750:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009752:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800975a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800975e:	4a02      	ldr	r2, [pc, #8]	@ (8009768 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009760:	430b      	orrs	r3, r1
 8009762:	6593      	str	r3, [r2, #88]	@ 0x58
 8009764:	e006      	b.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009766:	bf00      	nop
 8009768:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800976c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009770:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009774:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009780:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009784:	2300      	movs	r3, #0
 8009786:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800978a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800978e:	460b      	mov	r3, r1
 8009790:	4313      	orrs	r3, r2
 8009792:	d055      	beq.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009798:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800979c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80097a0:	d033      	beq.n	800980a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80097a2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80097a6:	d82c      	bhi.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80097a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097ac:	d02f      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80097ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80097b2:	d826      	bhi.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80097b4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80097b8:	d02b      	beq.n	8009812 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80097ba:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80097be:	d820      	bhi.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80097c0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097c4:	d012      	beq.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80097c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80097ca:	d81a      	bhi.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d022      	beq.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80097d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80097d4:	d115      	bne.n	8009802 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80097d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097da:	3308      	adds	r3, #8
 80097dc:	2100      	movs	r1, #0
 80097de:	4618      	mov	r0, r3
 80097e0:	f001 fcc0 	bl	800b164 <RCCEx_PLL2_Config>
 80097e4:	4603      	mov	r3, r0
 80097e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80097ea:	e015      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80097ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097f0:	3328      	adds	r3, #40	@ 0x28
 80097f2:	2102      	movs	r1, #2
 80097f4:	4618      	mov	r0, r3
 80097f6:	f001 fd67 	bl	800b2c8 <RCCEx_PLL3_Config>
 80097fa:	4603      	mov	r3, r0
 80097fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009800:	e00a      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009808:	e006      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800980a:	bf00      	nop
 800980c:	e004      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800980e:	bf00      	nop
 8009810:	e002      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009812:	bf00      	nop
 8009814:	e000      	b.n	8009818 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009816:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009818:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10b      	bne.n	8009838 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009820:	4ba1      	ldr	r3, [pc, #644]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009822:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009824:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800982c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009830:	4a9d      	ldr	r2, [pc, #628]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009832:	430b      	orrs	r3, r1
 8009834:	6593      	str	r3, [r2, #88]	@ 0x58
 8009836:	e003      	b.n	8009840 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009838:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800983c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009840:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009848:	f002 0308 	and.w	r3, r2, #8
 800984c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009850:	2300      	movs	r3, #0
 8009852:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009856:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800985a:	460b      	mov	r3, r1
 800985c:	4313      	orrs	r3, r2
 800985e:	d01e      	beq.n	800989e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009864:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009868:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800986c:	d10c      	bne.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800986e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009872:	3328      	adds	r3, #40	@ 0x28
 8009874:	2102      	movs	r1, #2
 8009876:	4618      	mov	r0, r3
 8009878:	f001 fd26 	bl	800b2c8 <RCCEx_PLL3_Config>
 800987c:	4603      	mov	r3, r0
 800987e:	2b00      	cmp	r3, #0
 8009880:	d002      	beq.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009882:	2301      	movs	r3, #1
 8009884:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009888:	4b87      	ldr	r3, [pc, #540]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800988a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800988c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009890:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009894:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009898:	4a83      	ldr	r2, [pc, #524]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800989a:	430b      	orrs	r3, r1
 800989c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800989e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a6:	f002 0310 	and.w	r3, r2, #16
 80098aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80098ae:	2300      	movs	r3, #0
 80098b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80098b4:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80098b8:	460b      	mov	r3, r1
 80098ba:	4313      	orrs	r3, r2
 80098bc:	d01e      	beq.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80098be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80098c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098ca:	d10c      	bne.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80098cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098d0:	3328      	adds	r3, #40	@ 0x28
 80098d2:	2102      	movs	r1, #2
 80098d4:	4618      	mov	r0, r3
 80098d6:	f001 fcf7 	bl	800b2c8 <RCCEx_PLL3_Config>
 80098da:	4603      	mov	r3, r0
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d002      	beq.n	80098e6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80098e0:	2301      	movs	r3, #1
 80098e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80098e6:	4b70      	ldr	r3, [pc, #448]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80098ea:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80098ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80098f6:	4a6c      	ldr	r2, [pc, #432]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098f8:	430b      	orrs	r3, r1
 80098fa:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80098fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009904:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009908:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800990c:	2300      	movs	r3, #0
 800990e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009912:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009916:	460b      	mov	r3, r1
 8009918:	4313      	orrs	r3, r2
 800991a:	d03e      	beq.n	800999a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800991c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009920:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009924:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009928:	d022      	beq.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800992a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800992e:	d81b      	bhi.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009930:	2b00      	cmp	r3, #0
 8009932:	d003      	beq.n	800993c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009934:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009938:	d00b      	beq.n	8009952 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800993a:	e015      	b.n	8009968 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800993c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009940:	3308      	adds	r3, #8
 8009942:	2100      	movs	r1, #0
 8009944:	4618      	mov	r0, r3
 8009946:	f001 fc0d 	bl	800b164 <RCCEx_PLL2_Config>
 800994a:	4603      	mov	r3, r0
 800994c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009950:	e00f      	b.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009956:	3328      	adds	r3, #40	@ 0x28
 8009958:	2102      	movs	r1, #2
 800995a:	4618      	mov	r0, r3
 800995c:	f001 fcb4 	bl	800b2c8 <RCCEx_PLL3_Config>
 8009960:	4603      	mov	r3, r0
 8009962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009966:	e004      	b.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009968:	2301      	movs	r3, #1
 800996a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800996e:	e000      	b.n	8009972 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009970:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009972:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009976:	2b00      	cmp	r3, #0
 8009978:	d10b      	bne.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800997a:	4b4b      	ldr	r3, [pc, #300]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800997c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800997e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009986:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800998a:	4a47      	ldr	r2, [pc, #284]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800998c:	430b      	orrs	r3, r1
 800998e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009990:	e003      	b.n	800999a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009996:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800999a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800999e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80099a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80099a8:	2300      	movs	r3, #0
 80099aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80099ac:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80099b0:	460b      	mov	r3, r1
 80099b2:	4313      	orrs	r3, r2
 80099b4:	d03b      	beq.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80099b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80099be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80099c2:	d01f      	beq.n	8009a04 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80099c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80099c8:	d818      	bhi.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80099ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80099ce:	d003      	beq.n	80099d8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80099d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80099d4:	d007      	beq.n	80099e6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80099d6:	e011      	b.n	80099fc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099d8:	4b33      	ldr	r3, [pc, #204]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099dc:	4a32      	ldr	r2, [pc, #200]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80099e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80099e4:	e00f      	b.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80099e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099ea:	3328      	adds	r3, #40	@ 0x28
 80099ec:	2101      	movs	r1, #1
 80099ee:	4618      	mov	r0, r3
 80099f0:	f001 fc6a 	bl	800b2c8 <RCCEx_PLL3_Config>
 80099f4:	4603      	mov	r3, r0
 80099f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80099fa:	e004      	b.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099fc:	2301      	movs	r3, #1
 80099fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a02:	e000      	b.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009a04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d10b      	bne.n	8009a26 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009a0e:	4b26      	ldr	r3, [pc, #152]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a12:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a1e:	4a22      	ldr	r2, [pc, #136]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a20:	430b      	orrs	r3, r1
 8009a22:	6553      	str	r3, [r2, #84]	@ 0x54
 8009a24:	e003      	b.n	8009a2e <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a26:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009a2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a36:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009a3a:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	677b      	str	r3, [r7, #116]	@ 0x74
 8009a40:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009a44:	460b      	mov	r3, r1
 8009a46:	4313      	orrs	r3, r2
 8009a48:	d034      	beq.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d003      	beq.n	8009a5c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009a54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009a58:	d007      	beq.n	8009a6a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009a5a:	e011      	b.n	8009a80 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a5c:	4b12      	ldr	r3, [pc, #72]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a60:	4a11      	ldr	r2, [pc, #68]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009a66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009a68:	e00e      	b.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009a6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a6e:	3308      	adds	r3, #8
 8009a70:	2102      	movs	r1, #2
 8009a72:	4618      	mov	r0, r3
 8009a74:	f001 fb76 	bl	800b164 <RCCEx_PLL2_Config>
 8009a78:	4603      	mov	r3, r0
 8009a7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009a7e:	e003      	b.n	8009a88 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d10d      	bne.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009a90:	4b05      	ldr	r3, [pc, #20]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a94:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009a9e:	4a02      	ldr	r2, [pc, #8]	@ (8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009aa0:	430b      	orrs	r3, r1
 8009aa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009aa4:	e006      	b.n	8009ab4 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009aa6:	bf00      	nop
 8009aa8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ab0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009abc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009ac0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009ac6:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009aca:	460b      	mov	r3, r1
 8009acc:	4313      	orrs	r3, r2
 8009ace:	d00c      	beq.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ad4:	3328      	adds	r3, #40	@ 0x28
 8009ad6:	2102      	movs	r1, #2
 8009ad8:	4618      	mov	r0, r3
 8009ada:	f001 fbf5 	bl	800b2c8 <RCCEx_PLL3_Config>
 8009ade:	4603      	mov	r3, r0
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d002      	beq.n	8009aea <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009ae4:	2301      	movs	r3, #1
 8009ae6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009af2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009af6:	663b      	str	r3, [r7, #96]	@ 0x60
 8009af8:	2300      	movs	r3, #0
 8009afa:	667b      	str	r3, [r7, #100]	@ 0x64
 8009afc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009b00:	460b      	mov	r3, r1
 8009b02:	4313      	orrs	r3, r2
 8009b04:	d038      	beq.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b12:	d018      	beq.n	8009b46 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009b14:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009b18:	d811      	bhi.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009b1a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b1e:	d014      	beq.n	8009b4a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009b20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b24:	d80b      	bhi.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d011      	beq.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009b2a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b2e:	d106      	bne.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b30:	4bc3      	ldr	r3, [pc, #780]	@ (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b34:	4ac2      	ldr	r2, [pc, #776]	@ (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009b3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009b3c:	e008      	b.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b44:	e004      	b.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009b46:	bf00      	nop
 8009b48:	e002      	b.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009b4a:	bf00      	nop
 8009b4c:	e000      	b.n	8009b50 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009b4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d10b      	bne.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009b58:	4bb9      	ldr	r3, [pc, #740]	@ (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b5c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b64:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009b68:	4ab5      	ldr	r2, [pc, #724]	@ (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b6a:	430b      	orrs	r3, r1
 8009b6c:	6553      	str	r3, [r2, #84]	@ 0x54
 8009b6e:	e003      	b.n	8009b78 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009b78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b80:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8009b84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009b86:	2300      	movs	r3, #0
 8009b88:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009b8a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009b8e:	460b      	mov	r3, r1
 8009b90:	4313      	orrs	r3, r2
 8009b92:	d009      	beq.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009b94:	4baa      	ldr	r3, [pc, #680]	@ (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b98:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ba0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009ba2:	4aa7      	ldr	r2, [pc, #668]	@ (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ba4:	430b      	orrs	r3, r1
 8009ba6:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb0:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8009bb4:	653b      	str	r3, [r7, #80]	@ 0x50
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	657b      	str	r3, [r7, #84]	@ 0x54
 8009bba:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	4313      	orrs	r3, r2
 8009bc2:	d00a      	beq.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009bc4:	4b9e      	ldr	r3, [pc, #632]	@ (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bc6:	691b      	ldr	r3, [r3, #16]
 8009bc8:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8009bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bd0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8009bd4:	4a9a      	ldr	r2, [pc, #616]	@ (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bd6:	430b      	orrs	r3, r1
 8009bd8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8009be6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009be8:	2300      	movs	r3, #0
 8009bea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bec:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8009bf0:	460b      	mov	r3, r1
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	d009      	beq.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009bf6:	4b92      	ldr	r3, [pc, #584]	@ (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bfa:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8009bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009c04:	4a8e      	ldr	r2, [pc, #568]	@ (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c06:	430b      	orrs	r3, r1
 8009c08:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c12:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8009c16:	643b      	str	r3, [r7, #64]	@ 0x40
 8009c18:	2300      	movs	r3, #0
 8009c1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c1c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8009c20:	460b      	mov	r3, r1
 8009c22:	4313      	orrs	r3, r2
 8009c24:	d00e      	beq.n	8009c44 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009c26:	4b86      	ldr	r3, [pc, #536]	@ (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c28:	691b      	ldr	r3, [r3, #16]
 8009c2a:	4a85      	ldr	r2, [pc, #532]	@ (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c2c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009c30:	6113      	str	r3, [r2, #16]
 8009c32:	4b83      	ldr	r3, [pc, #524]	@ (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c34:	6919      	ldr	r1, [r3, #16]
 8009c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c3a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009c3e:	4a80      	ldr	r2, [pc, #512]	@ (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c40:	430b      	orrs	r3, r1
 8009c42:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009c44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009c50:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009c52:	2300      	movs	r3, #0
 8009c54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009c56:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	d009      	beq.n	8009c74 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009c60:	4b77      	ldr	r3, [pc, #476]	@ (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c64:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c6e:	4a74      	ldr	r2, [pc, #464]	@ (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c70:	430b      	orrs	r3, r1
 8009c72:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009c80:	633b      	str	r3, [r7, #48]	@ 0x30
 8009c82:	2300      	movs	r3, #0
 8009c84:	637b      	str	r3, [r7, #52]	@ 0x34
 8009c86:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009c8a:	460b      	mov	r3, r1
 8009c8c:	4313      	orrs	r3, r2
 8009c8e:	d00a      	beq.n	8009ca6 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009c90:	4b6b      	ldr	r3, [pc, #428]	@ (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009c92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009c94:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009c98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009ca0:	4a67      	ldr	r2, [pc, #412]	@ (8009e40 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ca2:	430b      	orrs	r3, r1
 8009ca4:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cae:	2100      	movs	r1, #0
 8009cb0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009cb2:	f003 0301 	and.w	r3, r3, #1
 8009cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009cb8:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	d011      	beq.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cc6:	3308      	adds	r3, #8
 8009cc8:	2100      	movs	r1, #0
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f001 fa4a 	bl	800b164 <RCCEx_PLL2_Config>
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009cd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d003      	beq.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ce2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009ce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cee:	2100      	movs	r1, #0
 8009cf0:	6239      	str	r1, [r7, #32]
 8009cf2:	f003 0302 	and.w	r3, r3, #2
 8009cf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8009cf8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	4313      	orrs	r3, r2
 8009d00:	d011      	beq.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d06:	3308      	adds	r3, #8
 8009d08:	2101      	movs	r1, #1
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f001 fa2a 	bl	800b164 <RCCEx_PLL2_Config>
 8009d10:	4603      	mov	r3, r0
 8009d12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009d16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d003      	beq.n	8009d26 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009d26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2e:	2100      	movs	r1, #0
 8009d30:	61b9      	str	r1, [r7, #24]
 8009d32:	f003 0304 	and.w	r3, r3, #4
 8009d36:	61fb      	str	r3, [r7, #28]
 8009d38:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	d011      	beq.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d46:	3308      	adds	r3, #8
 8009d48:	2102      	movs	r1, #2
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f001 fa0a 	bl	800b164 <RCCEx_PLL2_Config>
 8009d50:	4603      	mov	r3, r0
 8009d52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009d56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d003      	beq.n	8009d66 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d5e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d62:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009d66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d6e:	2100      	movs	r1, #0
 8009d70:	6139      	str	r1, [r7, #16]
 8009d72:	f003 0308 	and.w	r3, r3, #8
 8009d76:	617b      	str	r3, [r7, #20]
 8009d78:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009d7c:	460b      	mov	r3, r1
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	d011      	beq.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009d82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d86:	3328      	adds	r3, #40	@ 0x28
 8009d88:	2100      	movs	r1, #0
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f001 fa9c 	bl	800b2c8 <RCCEx_PLL3_Config>
 8009d90:	4603      	mov	r3, r0
 8009d92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8009d96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d003      	beq.n	8009da6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009da2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009da6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009daa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dae:	2100      	movs	r1, #0
 8009db0:	60b9      	str	r1, [r7, #8]
 8009db2:	f003 0310 	and.w	r3, r3, #16
 8009db6:	60fb      	str	r3, [r7, #12]
 8009db8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	d011      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dc6:	3328      	adds	r3, #40	@ 0x28
 8009dc8:	2101      	movs	r1, #1
 8009dca:	4618      	mov	r0, r3
 8009dcc:	f001 fa7c 	bl	800b2c8 <RCCEx_PLL3_Config>
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009dd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d003      	beq.n	8009de6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009dde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009de2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dee:	2100      	movs	r1, #0
 8009df0:	6039      	str	r1, [r7, #0]
 8009df2:	f003 0320 	and.w	r3, r3, #32
 8009df6:	607b      	str	r3, [r7, #4]
 8009df8:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009dfc:	460b      	mov	r3, r1
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	d011      	beq.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e06:	3328      	adds	r3, #40	@ 0x28
 8009e08:	2102      	movs	r1, #2
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f001 fa5c 	bl	800b2c8 <RCCEx_PLL3_Config>
 8009e10:	4603      	mov	r3, r0
 8009e12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009e16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d003      	beq.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e1e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e22:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8009e26:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d101      	bne.n	8009e32 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009e2e:	2300      	movs	r3, #0
 8009e30:	e000      	b.n	8009e34 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009e32:	2301      	movs	r3, #1
}
 8009e34:	4618      	mov	r0, r3
 8009e36:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e40:	58024400 	.word	0x58024400

08009e44 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009e44:	b580      	push	{r7, lr}
 8009e46:	b090      	sub	sp, #64	@ 0x40
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009e4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e52:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009e56:	430b      	orrs	r3, r1
 8009e58:	f040 8094 	bne.w	8009f84 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009e5c:	4b9e      	ldr	r3, [pc, #632]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009e60:	f003 0307 	and.w	r3, r3, #7
 8009e64:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e68:	2b04      	cmp	r3, #4
 8009e6a:	f200 8087 	bhi.w	8009f7c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e74:	08009e89 	.word	0x08009e89
 8009e78:	08009eb1 	.word	0x08009eb1
 8009e7c:	08009ed9 	.word	0x08009ed9
 8009e80:	08009f75 	.word	0x08009f75
 8009e84:	08009f01 	.word	0x08009f01
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009e88:	4b93      	ldr	r3, [pc, #588]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009e90:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009e94:	d108      	bne.n	8009ea8 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009e96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f001 f810 	bl	800aec0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ea4:	f000 bd45 	b.w	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009eac:	f000 bd41 	b.w	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009eb0:	4b89      	ldr	r3, [pc, #548]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009eb8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009ebc:	d108      	bne.n	8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009ebe:	f107 0318 	add.w	r3, r7, #24
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f000 fd54 	bl	800a970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009ec8:	69bb      	ldr	r3, [r7, #24]
 8009eca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ecc:	f000 bd31 	b.w	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ed4:	f000 bd2d 	b.w	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009ed8:	4b7f      	ldr	r3, [pc, #508]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009ee0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009ee4:	d108      	bne.n	8009ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009ee6:	f107 030c 	add.w	r3, r7, #12
 8009eea:	4618      	mov	r0, r3
 8009eec:	f000 fe94 	bl	800ac18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ef4:	f000 bd1d 	b.w	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ef8:	2300      	movs	r3, #0
 8009efa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009efc:	f000 bd19 	b.w	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f00:	4b75      	ldr	r3, [pc, #468]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009f08:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f0a:	4b73      	ldr	r3, [pc, #460]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f003 0304 	and.w	r3, r3, #4
 8009f12:	2b04      	cmp	r3, #4
 8009f14:	d10c      	bne.n	8009f30 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d109      	bne.n	8009f30 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009f1c:	4b6e      	ldr	r3, [pc, #440]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	08db      	lsrs	r3, r3, #3
 8009f22:	f003 0303 	and.w	r3, r3, #3
 8009f26:	4a6d      	ldr	r2, [pc, #436]	@ (800a0dc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009f28:	fa22 f303 	lsr.w	r3, r2, r3
 8009f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f2e:	e01f      	b.n	8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009f30:	4b69      	ldr	r3, [pc, #420]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f3c:	d106      	bne.n	8009f4c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009f3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f44:	d102      	bne.n	8009f4c <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009f46:	4b66      	ldr	r3, [pc, #408]	@ (800a0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f4a:	e011      	b.n	8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009f4c:	4b62      	ldr	r3, [pc, #392]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009f54:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009f58:	d106      	bne.n	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009f5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009f5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f60:	d102      	bne.n	8009f68 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009f62:	4b60      	ldr	r3, [pc, #384]	@ (800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009f66:	e003      	b.n	8009f70 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009f6c:	f000 bce1 	b.w	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009f70:	f000 bcdf 	b.w	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009f74:	4b5c      	ldr	r3, [pc, #368]	@ (800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009f76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f78:	f000 bcdb 	b.w	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f80:	f000 bcd7 	b.w	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009f84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f88:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009f8c:	430b      	orrs	r3, r1
 8009f8e:	f040 80ad 	bne.w	800a0ec <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009f92:	4b51      	ldr	r3, [pc, #324]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009f94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f96:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009f9a:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fa2:	d056      	beq.n	800a052 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009faa:	f200 8090 	bhi.w	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb0:	2bc0      	cmp	r3, #192	@ 0xc0
 8009fb2:	f000 8088 	beq.w	800a0c6 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb8:	2bc0      	cmp	r3, #192	@ 0xc0
 8009fba:	f200 8088 	bhi.w	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009fbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc0:	2b80      	cmp	r3, #128	@ 0x80
 8009fc2:	d032      	beq.n	800a02a <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc6:	2b80      	cmp	r3, #128	@ 0x80
 8009fc8:	f200 8081 	bhi.w	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d003      	beq.n	8009fda <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009fd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fd4:	2b40      	cmp	r3, #64	@ 0x40
 8009fd6:	d014      	beq.n	800a002 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009fd8:	e079      	b.n	800a0ce <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009fda:	4b3f      	ldr	r3, [pc, #252]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009fe2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009fe6:	d108      	bne.n	8009ffa <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009fe8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009fec:	4618      	mov	r0, r3
 8009fee:	f000 ff67 	bl	800aec0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ff6:	f000 bc9c 	b.w	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ffe:	f000 bc98 	b.w	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a002:	4b35      	ldr	r3, [pc, #212]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a00a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a00e:	d108      	bne.n	800a022 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a010:	f107 0318 	add.w	r3, r7, #24
 800a014:	4618      	mov	r0, r3
 800a016:	f000 fcab 	bl	800a970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a01a:	69bb      	ldr	r3, [r7, #24]
 800a01c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a01e:	f000 bc88 	b.w	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a022:	2300      	movs	r3, #0
 800a024:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a026:	f000 bc84 	b.w	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a02a:	4b2b      	ldr	r3, [pc, #172]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a032:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a036:	d108      	bne.n	800a04a <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a038:	f107 030c 	add.w	r3, r7, #12
 800a03c:	4618      	mov	r0, r3
 800a03e:	f000 fdeb 	bl	800ac18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a046:	f000 bc74 	b.w	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a04a:	2300      	movs	r3, #0
 800a04c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a04e:	f000 bc70 	b.w	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a052:	4b21      	ldr	r3, [pc, #132]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a056:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a05a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a05c:	4b1e      	ldr	r3, [pc, #120]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f003 0304 	and.w	r3, r3, #4
 800a064:	2b04      	cmp	r3, #4
 800a066:	d10c      	bne.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d109      	bne.n	800a082 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a06e:	4b1a      	ldr	r3, [pc, #104]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	08db      	lsrs	r3, r3, #3
 800a074:	f003 0303 	and.w	r3, r3, #3
 800a078:	4a18      	ldr	r2, [pc, #96]	@ (800a0dc <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a07a:	fa22 f303 	lsr.w	r3, r2, r3
 800a07e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a080:	e01f      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a082:	4b15      	ldr	r3, [pc, #84]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a08a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a08e:	d106      	bne.n	800a09e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a090:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a092:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a096:	d102      	bne.n	800a09e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a098:	4b11      	ldr	r3, [pc, #68]	@ (800a0e0 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a09a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a09c:	e011      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a09e:	4b0e      	ldr	r3, [pc, #56]	@ (800a0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a0a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a0aa:	d106      	bne.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a0ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0b2:	d102      	bne.n	800a0ba <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a0b4:	4b0b      	ldr	r3, [pc, #44]	@ (800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a0b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a0b8:	e003      	b.n	800a0c2 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a0be:	f000 bc38 	b.w	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a0c2:	f000 bc36 	b.w	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a0c6:	4b08      	ldr	r3, [pc, #32]	@ (800a0e8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a0c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0ca:	f000 bc32 	b.w	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0d2:	f000 bc2e 	b.w	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a0d6:	bf00      	nop
 800a0d8:	58024400 	.word	0x58024400
 800a0dc:	03d09000 	.word	0x03d09000
 800a0e0:	003d0900 	.word	0x003d0900
 800a0e4:	017d7840 	.word	0x017d7840
 800a0e8:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a0ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0f0:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a0f4:	430b      	orrs	r3, r1
 800a0f6:	f040 809c 	bne.w	800a232 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a0fa:	4b9e      	ldr	r3, [pc, #632]	@ (800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a0fe:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a102:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a104:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a106:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a10a:	d054      	beq.n	800a1b6 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a10c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a10e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a112:	f200 808b 	bhi.w	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a118:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a11c:	f000 8083 	beq.w	800a226 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a120:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a122:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a126:	f200 8081 	bhi.w	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a12a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a12c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a130:	d02f      	beq.n	800a192 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a134:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a138:	d878      	bhi.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a13a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d004      	beq.n	800a14a <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a142:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a146:	d012      	beq.n	800a16e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a148:	e070      	b.n	800a22c <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a14a:	4b8a      	ldr	r3, [pc, #552]	@ (800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a152:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a156:	d107      	bne.n	800a168 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a158:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a15c:	4618      	mov	r0, r3
 800a15e:	f000 feaf 	bl	800aec0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a164:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a166:	e3e4      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a168:	2300      	movs	r3, #0
 800a16a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a16c:	e3e1      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a16e:	4b81      	ldr	r3, [pc, #516]	@ (800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a176:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a17a:	d107      	bne.n	800a18c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a17c:	f107 0318 	add.w	r3, r7, #24
 800a180:	4618      	mov	r0, r3
 800a182:	f000 fbf5 	bl	800a970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a186:	69bb      	ldr	r3, [r7, #24]
 800a188:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a18a:	e3d2      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a18c:	2300      	movs	r3, #0
 800a18e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a190:	e3cf      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a192:	4b78      	ldr	r3, [pc, #480]	@ (800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a19a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a19e:	d107      	bne.n	800a1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a1a0:	f107 030c 	add.w	r3, r7, #12
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	f000 fd37 	bl	800ac18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1ae:	e3c0      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1b4:	e3bd      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a1b6:	4b6f      	ldr	r3, [pc, #444]	@ (800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a1ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a1be:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a1c0:	4b6c      	ldr	r3, [pc, #432]	@ (800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f003 0304 	and.w	r3, r3, #4
 800a1c8:	2b04      	cmp	r3, #4
 800a1ca:	d10c      	bne.n	800a1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a1cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d109      	bne.n	800a1e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a1d2:	4b68      	ldr	r3, [pc, #416]	@ (800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	08db      	lsrs	r3, r3, #3
 800a1d8:	f003 0303 	and.w	r3, r3, #3
 800a1dc:	4a66      	ldr	r2, [pc, #408]	@ (800a378 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a1de:	fa22 f303 	lsr.w	r3, r2, r3
 800a1e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a1e4:	e01e      	b.n	800a224 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a1e6:	4b63      	ldr	r3, [pc, #396]	@ (800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a1ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1f2:	d106      	bne.n	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a1f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a1f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a1fa:	d102      	bne.n	800a202 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a1fc:	4b5f      	ldr	r3, [pc, #380]	@ (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a1fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a200:	e010      	b.n	800a224 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a202:	4b5c      	ldr	r3, [pc, #368]	@ (800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a20a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a20e:	d106      	bne.n	800a21e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a212:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a216:	d102      	bne.n	800a21e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a218:	4b59      	ldr	r3, [pc, #356]	@ (800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a21a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a21c:	e002      	b.n	800a224 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a21e:	2300      	movs	r3, #0
 800a220:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a222:	e386      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a224:	e385      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a226:	4b57      	ldr	r3, [pc, #348]	@ (800a384 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a228:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a22a:	e382      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a22c:	2300      	movs	r3, #0
 800a22e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a230:	e37f      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a232:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a236:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a23a:	430b      	orrs	r3, r1
 800a23c:	f040 80a7 	bne.w	800a38e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a240:	4b4c      	ldr	r3, [pc, #304]	@ (800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a242:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a244:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a248:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a24c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a250:	d055      	beq.n	800a2fe <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a252:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a254:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a258:	f200 8096 	bhi.w	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a25c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a25e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a262:	f000 8084 	beq.w	800a36e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a268:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a26c:	f200 808c 	bhi.w	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a272:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a276:	d030      	beq.n	800a2da <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a27a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a27e:	f200 8083 	bhi.w	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a284:	2b00      	cmp	r3, #0
 800a286:	d004      	beq.n	800a292 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a288:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a28e:	d012      	beq.n	800a2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a290:	e07a      	b.n	800a388 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a292:	4b38      	ldr	r3, [pc, #224]	@ (800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a29a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a29e:	d107      	bne.n	800a2b0 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a2a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f000 fe0b 	bl	800aec0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a2aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a2ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2ae:	e340      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2b4:	e33d      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a2b6:	4b2f      	ldr	r3, [pc, #188]	@ (800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a2be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a2c2:	d107      	bne.n	800a2d4 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a2c4:	f107 0318 	add.w	r3, r7, #24
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f000 fb51 	bl	800a970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a2ce:	69bb      	ldr	r3, [r7, #24]
 800a2d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2d2:	e32e      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2d8:	e32b      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a2da:	4b26      	ldr	r3, [pc, #152]	@ (800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a2e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a2e6:	d107      	bne.n	800a2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a2e8:	f107 030c 	add.w	r3, r7, #12
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f000 fc93 	bl	800ac18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a2f6:	e31c      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2fc:	e319      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a2fe:	4b1d      	ldr	r3, [pc, #116]	@ (800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a302:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a306:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a308:	4b1a      	ldr	r3, [pc, #104]	@ (800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f003 0304 	and.w	r3, r3, #4
 800a310:	2b04      	cmp	r3, #4
 800a312:	d10c      	bne.n	800a32e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a314:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a316:	2b00      	cmp	r3, #0
 800a318:	d109      	bne.n	800a32e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a31a:	4b16      	ldr	r3, [pc, #88]	@ (800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	08db      	lsrs	r3, r3, #3
 800a320:	f003 0303 	and.w	r3, r3, #3
 800a324:	4a14      	ldr	r2, [pc, #80]	@ (800a378 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a326:	fa22 f303 	lsr.w	r3, r2, r3
 800a32a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a32c:	e01e      	b.n	800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a32e:	4b11      	ldr	r3, [pc, #68]	@ (800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a336:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a33a:	d106      	bne.n	800a34a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a33c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a33e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a342:	d102      	bne.n	800a34a <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a344:	4b0d      	ldr	r3, [pc, #52]	@ (800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a346:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a348:	e010      	b.n	800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a34a:	4b0a      	ldr	r3, [pc, #40]	@ (800a374 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a352:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a356:	d106      	bne.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a35a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a35e:	d102      	bne.n	800a366 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a360:	4b07      	ldr	r3, [pc, #28]	@ (800a380 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a362:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a364:	e002      	b.n	800a36c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a366:	2300      	movs	r3, #0
 800a368:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a36a:	e2e2      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a36c:	e2e1      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a36e:	4b05      	ldr	r3, [pc, #20]	@ (800a384 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a370:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a372:	e2de      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a374:	58024400 	.word	0x58024400
 800a378:	03d09000 	.word	0x03d09000
 800a37c:	003d0900 	.word	0x003d0900
 800a380:	017d7840 	.word	0x017d7840
 800a384:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a388:	2300      	movs	r3, #0
 800a38a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a38c:	e2d1      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a38e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a392:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a396:	430b      	orrs	r3, r1
 800a398:	f040 809c 	bne.w	800a4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a39c:	4b93      	ldr	r3, [pc, #588]	@ (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a39e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3a0:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a3a4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a3a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3a8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a3ac:	d054      	beq.n	800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a3ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3b0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a3b4:	f200 808b 	bhi.w	800a4ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ba:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a3be:	f000 8083 	beq.w	800a4c8 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a3c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3c4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a3c8:	f200 8081 	bhi.w	800a4ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a3cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3ce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a3d2:	d02f      	beq.n	800a434 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a3d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a3da:	d878      	bhi.n	800a4ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a3dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d004      	beq.n	800a3ec <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a3e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a3e8:	d012      	beq.n	800a410 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a3ea:	e070      	b.n	800a4ce <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a3ec:	4b7f      	ldr	r3, [pc, #508]	@ (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a3f4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a3f8:	d107      	bne.n	800a40a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a3fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a3fe:	4618      	mov	r0, r3
 800a400:	f000 fd5e 	bl	800aec0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a406:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a408:	e293      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a40a:	2300      	movs	r3, #0
 800a40c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a40e:	e290      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a410:	4b76      	ldr	r3, [pc, #472]	@ (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a418:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a41c:	d107      	bne.n	800a42e <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a41e:	f107 0318 	add.w	r3, r7, #24
 800a422:	4618      	mov	r0, r3
 800a424:	f000 faa4 	bl	800a970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a428:	69bb      	ldr	r3, [r7, #24]
 800a42a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a42c:	e281      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a42e:	2300      	movs	r3, #0
 800a430:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a432:	e27e      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a434:	4b6d      	ldr	r3, [pc, #436]	@ (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a43c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a440:	d107      	bne.n	800a452 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a442:	f107 030c 	add.w	r3, r7, #12
 800a446:	4618      	mov	r0, r3
 800a448:	f000 fbe6 	bl	800ac18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a450:	e26f      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a452:	2300      	movs	r3, #0
 800a454:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a456:	e26c      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a458:	4b64      	ldr	r3, [pc, #400]	@ (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a45a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a45c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a460:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a462:	4b62      	ldr	r3, [pc, #392]	@ (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f003 0304 	and.w	r3, r3, #4
 800a46a:	2b04      	cmp	r3, #4
 800a46c:	d10c      	bne.n	800a488 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a46e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a470:	2b00      	cmp	r3, #0
 800a472:	d109      	bne.n	800a488 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a474:	4b5d      	ldr	r3, [pc, #372]	@ (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	08db      	lsrs	r3, r3, #3
 800a47a:	f003 0303 	and.w	r3, r3, #3
 800a47e:	4a5c      	ldr	r2, [pc, #368]	@ (800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a480:	fa22 f303 	lsr.w	r3, r2, r3
 800a484:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a486:	e01e      	b.n	800a4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a488:	4b58      	ldr	r3, [pc, #352]	@ (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a490:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a494:	d106      	bne.n	800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a496:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a498:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a49c:	d102      	bne.n	800a4a4 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a49e:	4b55      	ldr	r3, [pc, #340]	@ (800a5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a4a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4a2:	e010      	b.n	800a4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4a4:	4b51      	ldr	r3, [pc, #324]	@ (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4b0:	d106      	bne.n	800a4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a4b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4b8:	d102      	bne.n	800a4c0 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a4ba:	4b4f      	ldr	r3, [pc, #316]	@ (800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a4bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4be:	e002      	b.n	800a4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a4c4:	e235      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a4c6:	e234      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a4c8:	4b4c      	ldr	r3, [pc, #304]	@ (800a5fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a4ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4cc:	e231      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4d2:	e22e      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a4d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4d8:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a4dc:	430b      	orrs	r3, r1
 800a4de:	f040 808f 	bne.w	800a600 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a4e2:	4b42      	ldr	r3, [pc, #264]	@ (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a4e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a4e6:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a4ea:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a4ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a4f2:	d06b      	beq.n	800a5cc <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a4f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4f6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a4fa:	d874      	bhi.n	800a5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a4fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a502:	d056      	beq.n	800a5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a506:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a50a:	d86c      	bhi.n	800a5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a50c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a50e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a512:	d03b      	beq.n	800a58c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a516:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a51a:	d864      	bhi.n	800a5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a51c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a51e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a522:	d021      	beq.n	800a568 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a526:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a52a:	d85c      	bhi.n	800a5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a52c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d004      	beq.n	800a53c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a532:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a538:	d004      	beq.n	800a544 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a53a:	e054      	b.n	800a5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a53c:	f7fe fa4c 	bl	80089d8 <HAL_RCC_GetPCLK1Freq>
 800a540:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a542:	e1f6      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a544:	4b29      	ldr	r3, [pc, #164]	@ (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a54c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a550:	d107      	bne.n	800a562 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a552:	f107 0318 	add.w	r3, r7, #24
 800a556:	4618      	mov	r0, r3
 800a558:	f000 fa0a 	bl	800a970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a55c:	69fb      	ldr	r3, [r7, #28]
 800a55e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a560:	e1e7      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a562:	2300      	movs	r3, #0
 800a564:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a566:	e1e4      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a568:	4b20      	ldr	r3, [pc, #128]	@ (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a570:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a574:	d107      	bne.n	800a586 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a576:	f107 030c 	add.w	r3, r7, #12
 800a57a:	4618      	mov	r0, r3
 800a57c:	f000 fb4c 	bl	800ac18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a584:	e1d5      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a586:	2300      	movs	r3, #0
 800a588:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a58a:	e1d2      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a58c:	4b17      	ldr	r3, [pc, #92]	@ (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f003 0304 	and.w	r3, r3, #4
 800a594:	2b04      	cmp	r3, #4
 800a596:	d109      	bne.n	800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a598:	4b14      	ldr	r3, [pc, #80]	@ (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	08db      	lsrs	r3, r3, #3
 800a59e:	f003 0303 	and.w	r3, r3, #3
 800a5a2:	4a13      	ldr	r2, [pc, #76]	@ (800a5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a5a4:	fa22 f303 	lsr.w	r3, r2, r3
 800a5a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5aa:	e1c2      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5b0:	e1bf      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a5b2:	4b0e      	ldr	r3, [pc, #56]	@ (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a5ba:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a5be:	d102      	bne.n	800a5c6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a5c0:	4b0c      	ldr	r3, [pc, #48]	@ (800a5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5c4:	e1b5      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5ca:	e1b2      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a5cc:	4b07      	ldr	r3, [pc, #28]	@ (800a5ec <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a5d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a5d8:	d102      	bne.n	800a5e0 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a5da:	4b07      	ldr	r3, [pc, #28]	@ (800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a5dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5de:	e1a8      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5e4:	e1a5      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5ea:	e1a2      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a5ec:	58024400 	.word	0x58024400
 800a5f0:	03d09000 	.word	0x03d09000
 800a5f4:	003d0900 	.word	0x003d0900
 800a5f8:	017d7840 	.word	0x017d7840
 800a5fc:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a600:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a604:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a608:	430b      	orrs	r3, r1
 800a60a:	d173      	bne.n	800a6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a60c:	4b9c      	ldr	r3, [pc, #624]	@ (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a60e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a610:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a614:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a618:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a61c:	d02f      	beq.n	800a67e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a61e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a620:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a624:	d863      	bhi.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d004      	beq.n	800a636 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a62c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a62e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a632:	d012      	beq.n	800a65a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a634:	e05b      	b.n	800a6ee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a636:	4b92      	ldr	r3, [pc, #584]	@ (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a63e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a642:	d107      	bne.n	800a654 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a644:	f107 0318 	add.w	r3, r7, #24
 800a648:	4618      	mov	r0, r3
 800a64a:	f000 f991 	bl	800a970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a652:	e16e      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a654:	2300      	movs	r3, #0
 800a656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a658:	e16b      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a65a:	4b89      	ldr	r3, [pc, #548]	@ (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a662:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a666:	d107      	bne.n	800a678 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a668:	f107 030c 	add.w	r3, r7, #12
 800a66c:	4618      	mov	r0, r3
 800a66e:	f000 fad3 	bl	800ac18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a676:	e15c      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a678:	2300      	movs	r3, #0
 800a67a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a67c:	e159      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a67e:	4b80      	ldr	r3, [pc, #512]	@ (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a682:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a686:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a688:	4b7d      	ldr	r3, [pc, #500]	@ (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	f003 0304 	and.w	r3, r3, #4
 800a690:	2b04      	cmp	r3, #4
 800a692:	d10c      	bne.n	800a6ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a694:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a696:	2b00      	cmp	r3, #0
 800a698:	d109      	bne.n	800a6ae <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a69a:	4b79      	ldr	r3, [pc, #484]	@ (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	08db      	lsrs	r3, r3, #3
 800a6a0:	f003 0303 	and.w	r3, r3, #3
 800a6a4:	4a77      	ldr	r2, [pc, #476]	@ (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a6a6:	fa22 f303 	lsr.w	r3, r2, r3
 800a6aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6ac:	e01e      	b.n	800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6ae:	4b74      	ldr	r3, [pc, #464]	@ (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6ba:	d106      	bne.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a6bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6c2:	d102      	bne.n	800a6ca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a6c4:	4b70      	ldr	r3, [pc, #448]	@ (800a888 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a6c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6c8:	e010      	b.n	800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a6ca:	4b6d      	ldr	r3, [pc, #436]	@ (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6d2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6d6:	d106      	bne.n	800a6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a6d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6de:	d102      	bne.n	800a6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a6e0:	4b6a      	ldr	r3, [pc, #424]	@ (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a6e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6e4:	e002      	b.n	800a6ec <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a6ea:	e122      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a6ec:	e121      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6f2:	e11e      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a6f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a6f8:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a6fc:	430b      	orrs	r3, r1
 800a6fe:	d133      	bne.n	800a768 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a700:	4b5f      	ldr	r3, [pc, #380]	@ (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a704:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a708:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a70a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d004      	beq.n	800a71a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a712:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a716:	d012      	beq.n	800a73e <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a718:	e023      	b.n	800a762 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a71a:	4b59      	ldr	r3, [pc, #356]	@ (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a722:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a726:	d107      	bne.n	800a738 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a728:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a72c:	4618      	mov	r0, r3
 800a72e:	f000 fbc7 	bl	800aec0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a736:	e0fc      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a738:	2300      	movs	r3, #0
 800a73a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a73c:	e0f9      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a73e:	4b50      	ldr	r3, [pc, #320]	@ (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a746:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a74a:	d107      	bne.n	800a75c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a74c:	f107 0318 	add.w	r3, r7, #24
 800a750:	4618      	mov	r0, r3
 800a752:	f000 f90d 	bl	800a970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a756:	6a3b      	ldr	r3, [r7, #32]
 800a758:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a75a:	e0ea      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a75c:	2300      	movs	r3, #0
 800a75e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a760:	e0e7      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a762:	2300      	movs	r3, #0
 800a764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a766:	e0e4      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a768:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a76c:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a770:	430b      	orrs	r3, r1
 800a772:	f040 808d 	bne.w	800a890 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a776:	4b42      	ldr	r3, [pc, #264]	@ (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a77a:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a77e:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a782:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a786:	d06b      	beq.n	800a860 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a78a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a78e:	d874      	bhi.n	800a87a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a792:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a796:	d056      	beq.n	800a846 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a79a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a79e:	d86c      	bhi.n	800a87a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a7a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7a2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a7a6:	d03b      	beq.n	800a820 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a7a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7aa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a7ae:	d864      	bhi.n	800a87a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a7b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7b6:	d021      	beq.n	800a7fc <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a7b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7be:	d85c      	bhi.n	800a87a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a7c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d004      	beq.n	800a7d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a7c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a7cc:	d004      	beq.n	800a7d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a7ce:	e054      	b.n	800a87a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a7d0:	f000 f8b8 	bl	800a944 <HAL_RCCEx_GetD3PCLK1Freq>
 800a7d4:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a7d6:	e0ac      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a7d8:	4b29      	ldr	r3, [pc, #164]	@ (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a7e0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a7e4:	d107      	bne.n	800a7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a7e6:	f107 0318 	add.w	r3, r7, #24
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	f000 f8c0 	bl	800a970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a7f0:	69fb      	ldr	r3, [r7, #28]
 800a7f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7f4:	e09d      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7fa:	e09a      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7fc:	4b20      	ldr	r3, [pc, #128]	@ (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a804:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a808:	d107      	bne.n	800a81a <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a80a:	f107 030c 	add.w	r3, r7, #12
 800a80e:	4618      	mov	r0, r3
 800a810:	f000 fa02 	bl	800ac18 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a814:	693b      	ldr	r3, [r7, #16]
 800a816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a818:	e08b      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a81a:	2300      	movs	r3, #0
 800a81c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a81e:	e088      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a820:	4b17      	ldr	r3, [pc, #92]	@ (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f003 0304 	and.w	r3, r3, #4
 800a828:	2b04      	cmp	r3, #4
 800a82a:	d109      	bne.n	800a840 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a82c:	4b14      	ldr	r3, [pc, #80]	@ (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	08db      	lsrs	r3, r3, #3
 800a832:	f003 0303 	and.w	r3, r3, #3
 800a836:	4a13      	ldr	r2, [pc, #76]	@ (800a884 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a838:	fa22 f303 	lsr.w	r3, r2, r3
 800a83c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a83e:	e078      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a840:	2300      	movs	r3, #0
 800a842:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a844:	e075      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a846:	4b0e      	ldr	r3, [pc, #56]	@ (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a84e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a852:	d102      	bne.n	800a85a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a854:	4b0c      	ldr	r3, [pc, #48]	@ (800a888 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a856:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a858:	e06b      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a85a:	2300      	movs	r3, #0
 800a85c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a85e:	e068      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a860:	4b07      	ldr	r3, [pc, #28]	@ (800a880 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a868:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a86c:	d102      	bne.n	800a874 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a86e:	4b07      	ldr	r3, [pc, #28]	@ (800a88c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a870:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a872:	e05e      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a874:	2300      	movs	r3, #0
 800a876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a878:	e05b      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a87a:	2300      	movs	r3, #0
 800a87c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a87e:	e058      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a880:	58024400 	.word	0x58024400
 800a884:	03d09000 	.word	0x03d09000
 800a888:	003d0900 	.word	0x003d0900
 800a88c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a890:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a894:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a898:	430b      	orrs	r3, r1
 800a89a:	d148      	bne.n	800a92e <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a89c:	4b27      	ldr	r3, [pc, #156]	@ (800a93c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a89e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a8a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a8a4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a8a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8a8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8ac:	d02a      	beq.n	800a904 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a8ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a8b4:	d838      	bhi.n	800a928 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a8b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d004      	beq.n	800a8c6 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a8bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a8c2:	d00d      	beq.n	800a8e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a8c4:	e030      	b.n	800a928 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a8c6:	4b1d      	ldr	r3, [pc, #116]	@ (800a93c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a8ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a8d2:	d102      	bne.n	800a8da <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a8d4:	4b1a      	ldr	r3, [pc, #104]	@ (800a940 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a8d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8d8:	e02b      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8de:	e028      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8e0:	4b16      	ldr	r3, [pc, #88]	@ (800a93c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8ec:	d107      	bne.n	800a8fe <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	f000 fae4 	bl	800aec0 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8fc:	e019      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8fe:	2300      	movs	r3, #0
 800a900:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a902:	e016      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a904:	4b0d      	ldr	r3, [pc, #52]	@ (800a93c <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a90c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a910:	d107      	bne.n	800a922 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a912:	f107 0318 	add.w	r3, r7, #24
 800a916:	4618      	mov	r0, r3
 800a918:	f000 f82a 	bl	800a970 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a91c:	69fb      	ldr	r3, [r7, #28]
 800a91e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a920:	e007      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a922:	2300      	movs	r3, #0
 800a924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a926:	e004      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a928:	2300      	movs	r3, #0
 800a92a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a92c:	e001      	b.n	800a932 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a92e:	2300      	movs	r3, #0
 800a930:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a932:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a934:	4618      	mov	r0, r3
 800a936:	3740      	adds	r7, #64	@ 0x40
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}
 800a93c:	58024400 	.word	0x58024400
 800a940:	017d7840 	.word	0x017d7840

0800a944 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a948:	f7fe f816 	bl	8008978 <HAL_RCC_GetHCLKFreq>
 800a94c:	4602      	mov	r2, r0
 800a94e:	4b06      	ldr	r3, [pc, #24]	@ (800a968 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a950:	6a1b      	ldr	r3, [r3, #32]
 800a952:	091b      	lsrs	r3, r3, #4
 800a954:	f003 0307 	and.w	r3, r3, #7
 800a958:	4904      	ldr	r1, [pc, #16]	@ (800a96c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a95a:	5ccb      	ldrb	r3, [r1, r3]
 800a95c:	f003 031f 	and.w	r3, r3, #31
 800a960:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a964:	4618      	mov	r0, r3
 800a966:	bd80      	pop	{r7, pc}
 800a968:	58024400 	.word	0x58024400
 800a96c:	08014a24 	.word	0x08014a24

0800a970 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a970:	b480      	push	{r7}
 800a972:	b089      	sub	sp, #36	@ 0x24
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a978:	4ba1      	ldr	r3, [pc, #644]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a97a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a97c:	f003 0303 	and.w	r3, r3, #3
 800a980:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a982:	4b9f      	ldr	r3, [pc, #636]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a986:	0b1b      	lsrs	r3, r3, #12
 800a988:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a98c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a98e:	4b9c      	ldr	r3, [pc, #624]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a990:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a992:	091b      	lsrs	r3, r3, #4
 800a994:	f003 0301 	and.w	r3, r3, #1
 800a998:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a99a:	4b99      	ldr	r3, [pc, #612]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a99c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a99e:	08db      	lsrs	r3, r3, #3
 800a9a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a9a4:	693a      	ldr	r2, [r7, #16]
 800a9a6:	fb02 f303 	mul.w	r3, r2, r3
 800a9aa:	ee07 3a90 	vmov	s15, r3
 800a9ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a9b2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	f000 8111 	beq.w	800abe0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a9be:	69bb      	ldr	r3, [r7, #24]
 800a9c0:	2b02      	cmp	r3, #2
 800a9c2:	f000 8083 	beq.w	800aacc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a9c6:	69bb      	ldr	r3, [r7, #24]
 800a9c8:	2b02      	cmp	r3, #2
 800a9ca:	f200 80a1 	bhi.w	800ab10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a9ce:	69bb      	ldr	r3, [r7, #24]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d003      	beq.n	800a9dc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a9d4:	69bb      	ldr	r3, [r7, #24]
 800a9d6:	2b01      	cmp	r3, #1
 800a9d8:	d056      	beq.n	800aa88 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a9da:	e099      	b.n	800ab10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9dc:	4b88      	ldr	r3, [pc, #544]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	f003 0320 	and.w	r3, r3, #32
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d02d      	beq.n	800aa44 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9e8:	4b85      	ldr	r3, [pc, #532]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	08db      	lsrs	r3, r3, #3
 800a9ee:	f003 0303 	and.w	r3, r3, #3
 800a9f2:	4a84      	ldr	r2, [pc, #528]	@ (800ac04 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a9f4:	fa22 f303 	lsr.w	r3, r2, r3
 800a9f8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	ee07 3a90 	vmov	s15, r3
 800aa00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa04:	697b      	ldr	r3, [r7, #20]
 800aa06:	ee07 3a90 	vmov	s15, r3
 800aa0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa12:	4b7b      	ldr	r3, [pc, #492]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa1a:	ee07 3a90 	vmov	s15, r3
 800aa1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa22:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa26:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aa42:	e087      	b.n	800ab54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	ee07 3a90 	vmov	s15, r3
 800aa4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa4e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ac0c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800aa52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa56:	4b6a      	ldr	r3, [pc, #424]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa5e:	ee07 3a90 	vmov	s15, r3
 800aa62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa66:	ed97 6a03 	vldr	s12, [r7, #12]
 800aa6a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aa6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aa7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aa86:	e065      	b.n	800ab54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	ee07 3a90 	vmov	s15, r3
 800aa8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa92:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aa96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa9a:	4b59      	ldr	r3, [pc, #356]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aa9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaa2:	ee07 3a90 	vmov	s15, r3
 800aaa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaaa:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aabe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aac6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800aaca:	e043      	b.n	800ab54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aacc:	697b      	ldr	r3, [r7, #20]
 800aace:	ee07 3a90 	vmov	s15, r3
 800aad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aad6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ac14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800aada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aade:	4b48      	ldr	r3, [pc, #288]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aae6:	ee07 3a90 	vmov	s15, r3
 800aaea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaee:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaf2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aaf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aafa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aafe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab0e:	e021      	b.n	800ab54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	ee07 3a90 	vmov	s15, r3
 800ab16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab1a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ac10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ab1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab22:	4b37      	ldr	r3, [pc, #220]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab2a:	ee07 3a90 	vmov	s15, r3
 800ab2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab32:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab36:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ac08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ab3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab52:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ab54:	4b2a      	ldr	r3, [pc, #168]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab58:	0a5b      	lsrs	r3, r3, #9
 800ab5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab5e:	ee07 3a90 	vmov	s15, r3
 800ab62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab6e:	edd7 6a07 	vldr	s13, [r7, #28]
 800ab72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ab7a:	ee17 2a90 	vmov	r2, s15
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ab82:	4b1f      	ldr	r3, [pc, #124]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ab84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab86:	0c1b      	lsrs	r3, r3, #16
 800ab88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ab8c:	ee07 3a90 	vmov	s15, r3
 800ab90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ab98:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ab9c:	edd7 6a07 	vldr	s13, [r7, #28]
 800aba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aba4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aba8:	ee17 2a90 	vmov	r2, s15
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800abb0:	4b13      	ldr	r3, [pc, #76]	@ (800ac00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800abb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abb4:	0e1b      	lsrs	r3, r3, #24
 800abb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abba:	ee07 3a90 	vmov	s15, r3
 800abbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abca:	edd7 6a07 	vldr	s13, [r7, #28]
 800abce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abd6:	ee17 2a90 	vmov	r2, s15
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800abde:	e008      	b.n	800abf2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	2200      	movs	r2, #0
 800abe4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	2200      	movs	r2, #0
 800abea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	2200      	movs	r2, #0
 800abf0:	609a      	str	r2, [r3, #8]
}
 800abf2:	bf00      	nop
 800abf4:	3724      	adds	r7, #36	@ 0x24
 800abf6:	46bd      	mov	sp, r7
 800abf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfc:	4770      	bx	lr
 800abfe:	bf00      	nop
 800ac00:	58024400 	.word	0x58024400
 800ac04:	03d09000 	.word	0x03d09000
 800ac08:	46000000 	.word	0x46000000
 800ac0c:	4c742400 	.word	0x4c742400
 800ac10:	4a742400 	.word	0x4a742400
 800ac14:	4bbebc20 	.word	0x4bbebc20

0800ac18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ac18:	b480      	push	{r7}
 800ac1a:	b089      	sub	sp, #36	@ 0x24
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac20:	4ba1      	ldr	r3, [pc, #644]	@ (800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac24:	f003 0303 	and.w	r3, r3, #3
 800ac28:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ac2a:	4b9f      	ldr	r3, [pc, #636]	@ (800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac2e:	0d1b      	lsrs	r3, r3, #20
 800ac30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ac34:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ac36:	4b9c      	ldr	r3, [pc, #624]	@ (800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac3a:	0a1b      	lsrs	r3, r3, #8
 800ac3c:	f003 0301 	and.w	r3, r3, #1
 800ac40:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ac42:	4b99      	ldr	r3, [pc, #612]	@ (800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ac46:	08db      	lsrs	r3, r3, #3
 800ac48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac4c:	693a      	ldr	r2, [r7, #16]
 800ac4e:	fb02 f303 	mul.w	r3, r2, r3
 800ac52:	ee07 3a90 	vmov	s15, r3
 800ac56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f000 8111 	beq.w	800ae88 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	2b02      	cmp	r3, #2
 800ac6a:	f000 8083 	beq.w	800ad74 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ac6e:	69bb      	ldr	r3, [r7, #24]
 800ac70:	2b02      	cmp	r3, #2
 800ac72:	f200 80a1 	bhi.w	800adb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d003      	beq.n	800ac84 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ac7c:	69bb      	ldr	r3, [r7, #24]
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d056      	beq.n	800ad30 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ac82:	e099      	b.n	800adb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac84:	4b88      	ldr	r3, [pc, #544]	@ (800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	f003 0320 	and.w	r3, r3, #32
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d02d      	beq.n	800acec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac90:	4b85      	ldr	r3, [pc, #532]	@ (800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	08db      	lsrs	r3, r3, #3
 800ac96:	f003 0303 	and.w	r3, r3, #3
 800ac9a:	4a84      	ldr	r2, [pc, #528]	@ (800aeac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ac9c:	fa22 f303 	lsr.w	r3, r2, r3
 800aca0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	ee07 3a90 	vmov	s15, r3
 800aca8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acac:	697b      	ldr	r3, [r7, #20]
 800acae:	ee07 3a90 	vmov	s15, r3
 800acb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acba:	4b7b      	ldr	r3, [pc, #492]	@ (800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800acbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800acbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acc2:	ee07 3a90 	vmov	s15, r3
 800acc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acca:	ed97 6a03 	vldr	s12, [r7, #12]
 800acce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800acd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800acde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ace2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ace6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800acea:	e087      	b.n	800adfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	ee07 3a90 	vmov	s15, r3
 800acf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800aeb4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800acfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acfe:	4b6a      	ldr	r3, [pc, #424]	@ (800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad06:	ee07 3a90 	vmov	s15, r3
 800ad0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad12:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad2e:	e065      	b.n	800adfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	ee07 3a90 	vmov	s15, r3
 800ad36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad3a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ad3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad42:	4b59      	ldr	r3, [pc, #356]	@ (800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad4a:	ee07 3a90 	vmov	s15, r3
 800ad4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad52:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad56:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad72:	e043      	b.n	800adfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ad74:	697b      	ldr	r3, [r7, #20]
 800ad76:	ee07 3a90 	vmov	s15, r3
 800ad7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad7e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800aebc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ad82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad86:	4b48      	ldr	r3, [pc, #288]	@ (800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ad88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad8e:	ee07 3a90 	vmov	s15, r3
 800ad92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad9a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ad9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ada2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ada6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adb6:	e021      	b.n	800adfc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800adb8:	697b      	ldr	r3, [r7, #20]
 800adba:	ee07 3a90 	vmov	s15, r3
 800adbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adc2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800aeb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800adc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adca:	4b37      	ldr	r3, [pc, #220]	@ (800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800add2:	ee07 3a90 	vmov	s15, r3
 800add6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800adda:	ed97 6a03 	vldr	s12, [r7, #12]
 800adde:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800aeb0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ade2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ade6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800adea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800adee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adfa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800adfc:	4b2a      	ldr	r3, [pc, #168]	@ (800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800adfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae00:	0a5b      	lsrs	r3, r3, #9
 800ae02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae06:	ee07 3a90 	vmov	s15, r3
 800ae0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae12:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae16:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae22:	ee17 2a90 	vmov	r2, s15
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ae2a:	4b1f      	ldr	r3, [pc, #124]	@ (800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae2e:	0c1b      	lsrs	r3, r3, #16
 800ae30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae34:	ee07 3a90 	vmov	s15, r3
 800ae38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae40:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae44:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae50:	ee17 2a90 	vmov	r2, s15
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ae58:	4b13      	ldr	r3, [pc, #76]	@ (800aea8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ae5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae5c:	0e1b      	lsrs	r3, r3, #24
 800ae5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae62:	ee07 3a90 	vmov	s15, r3
 800ae66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae72:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae7e:	ee17 2a90 	vmov	r2, s15
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ae86:	e008      	b.n	800ae9a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2200      	movs	r2, #0
 800ae92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2200      	movs	r2, #0
 800ae98:	609a      	str	r2, [r3, #8]
}
 800ae9a:	bf00      	nop
 800ae9c:	3724      	adds	r7, #36	@ 0x24
 800ae9e:	46bd      	mov	sp, r7
 800aea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea4:	4770      	bx	lr
 800aea6:	bf00      	nop
 800aea8:	58024400 	.word	0x58024400
 800aeac:	03d09000 	.word	0x03d09000
 800aeb0:	46000000 	.word	0x46000000
 800aeb4:	4c742400 	.word	0x4c742400
 800aeb8:	4a742400 	.word	0x4a742400
 800aebc:	4bbebc20 	.word	0x4bbebc20

0800aec0 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b089      	sub	sp, #36	@ 0x24
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aec8:	4ba0      	ldr	r3, [pc, #640]	@ (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aeca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aecc:	f003 0303 	and.w	r3, r3, #3
 800aed0:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800aed2:	4b9e      	ldr	r3, [pc, #632]	@ (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aed6:	091b      	lsrs	r3, r3, #4
 800aed8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aedc:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800aede:	4b9b      	ldr	r3, [pc, #620]	@ (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aee2:	f003 0301 	and.w	r3, r3, #1
 800aee6:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800aee8:	4b98      	ldr	r3, [pc, #608]	@ (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aeea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aeec:	08db      	lsrs	r3, r3, #3
 800aeee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aef2:	693a      	ldr	r2, [r7, #16]
 800aef4:	fb02 f303 	mul.w	r3, r2, r3
 800aef8:	ee07 3a90 	vmov	s15, r3
 800aefc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af00:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	2b00      	cmp	r3, #0
 800af08:	f000 8111 	beq.w	800b12e <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800af0c:	69bb      	ldr	r3, [r7, #24]
 800af0e:	2b02      	cmp	r3, #2
 800af10:	f000 8083 	beq.w	800b01a <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800af14:	69bb      	ldr	r3, [r7, #24]
 800af16:	2b02      	cmp	r3, #2
 800af18:	f200 80a1 	bhi.w	800b05e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800af1c:	69bb      	ldr	r3, [r7, #24]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d003      	beq.n	800af2a <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800af22:	69bb      	ldr	r3, [r7, #24]
 800af24:	2b01      	cmp	r3, #1
 800af26:	d056      	beq.n	800afd6 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800af28:	e099      	b.n	800b05e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800af2a:	4b88      	ldr	r3, [pc, #544]	@ (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	f003 0320 	and.w	r3, r3, #32
 800af32:	2b00      	cmp	r3, #0
 800af34:	d02d      	beq.n	800af92 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800af36:	4b85      	ldr	r3, [pc, #532]	@ (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	08db      	lsrs	r3, r3, #3
 800af3c:	f003 0303 	and.w	r3, r3, #3
 800af40:	4a83      	ldr	r2, [pc, #524]	@ (800b150 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800af42:	fa22 f303 	lsr.w	r3, r2, r3
 800af46:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	ee07 3a90 	vmov	s15, r3
 800af4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af52:	697b      	ldr	r3, [r7, #20]
 800af54:	ee07 3a90 	vmov	s15, r3
 800af58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af60:	4b7a      	ldr	r3, [pc, #488]	@ (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800af62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af68:	ee07 3a90 	vmov	s15, r3
 800af6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af70:	ed97 6a03 	vldr	s12, [r7, #12]
 800af74:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b154 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800af78:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af80:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af8c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800af90:	e087      	b.n	800b0a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	ee07 3a90 	vmov	s15, r3
 800af98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af9c:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b158 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800afa0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afa4:	4b69      	ldr	r3, [pc, #420]	@ (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afac:	ee07 3a90 	vmov	s15, r3
 800afb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afb4:	ed97 6a03 	vldr	s12, [r7, #12]
 800afb8:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b154 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800afbc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afc0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afc4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afc8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afd0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afd4:	e065      	b.n	800b0a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800afd6:	697b      	ldr	r3, [r7, #20]
 800afd8:	ee07 3a90 	vmov	s15, r3
 800afdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afe0:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b15c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800afe4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afe8:	4b58      	ldr	r3, [pc, #352]	@ (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800afea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800afec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aff0:	ee07 3a90 	vmov	s15, r3
 800aff4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aff8:	ed97 6a03 	vldr	s12, [r7, #12]
 800affc:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b154 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b000:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b004:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b008:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b00c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b010:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b014:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b018:	e043      	b.n	800b0a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	ee07 3a90 	vmov	s15, r3
 800b020:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b024:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b160 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b028:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b02c:	4b47      	ldr	r3, [pc, #284]	@ (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b02e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b030:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b034:	ee07 3a90 	vmov	s15, r3
 800b038:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b03c:	ed97 6a03 	vldr	s12, [r7, #12]
 800b040:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b154 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b044:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b048:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b04c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b050:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b054:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b058:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b05c:	e021      	b.n	800b0a2 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	ee07 3a90 	vmov	s15, r3
 800b064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b068:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b158 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b06c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b070:	4b36      	ldr	r3, [pc, #216]	@ (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b078:	ee07 3a90 	vmov	s15, r3
 800b07c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b080:	ed97 6a03 	vldr	s12, [r7, #12]
 800b084:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b154 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b088:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b08c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b090:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b094:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b09c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b0a0:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b0a2:	4b2a      	ldr	r3, [pc, #168]	@ (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0a6:	0a5b      	lsrs	r3, r3, #9
 800b0a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0ac:	ee07 3a90 	vmov	s15, r3
 800b0b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0b8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0bc:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0c8:	ee17 2a90 	vmov	r2, s15
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b0d0:	4b1e      	ldr	r3, [pc, #120]	@ (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b0d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0d4:	0c1b      	lsrs	r3, r3, #16
 800b0d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b0da:	ee07 3a90 	vmov	s15, r3
 800b0de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b0e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b0e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b0ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0f6:	ee17 2a90 	vmov	r2, s15
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b0fe:	4b13      	ldr	r3, [pc, #76]	@ (800b14c <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b102:	0e1b      	lsrs	r3, r3, #24
 800b104:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b108:	ee07 3a90 	vmov	s15, r3
 800b10c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b110:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b114:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b118:	edd7 6a07 	vldr	s13, [r7, #28]
 800b11c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b120:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b124:	ee17 2a90 	vmov	r2, s15
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b12c:	e008      	b.n	800b140 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	2200      	movs	r2, #0
 800b138:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	609a      	str	r2, [r3, #8]
}
 800b140:	bf00      	nop
 800b142:	3724      	adds	r7, #36	@ 0x24
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr
 800b14c:	58024400 	.word	0x58024400
 800b150:	03d09000 	.word	0x03d09000
 800b154:	46000000 	.word	0x46000000
 800b158:	4c742400 	.word	0x4c742400
 800b15c:	4a742400 	.word	0x4a742400
 800b160:	4bbebc20 	.word	0x4bbebc20

0800b164 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b164:	b580      	push	{r7, lr}
 800b166:	b084      	sub	sp, #16
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
 800b16c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b16e:	2300      	movs	r3, #0
 800b170:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b172:	4b53      	ldr	r3, [pc, #332]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b174:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b176:	f003 0303 	and.w	r3, r3, #3
 800b17a:	2b03      	cmp	r3, #3
 800b17c:	d101      	bne.n	800b182 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b17e:	2301      	movs	r3, #1
 800b180:	e099      	b.n	800b2b6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b182:	4b4f      	ldr	r3, [pc, #316]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4a4e      	ldr	r2, [pc, #312]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b188:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b18c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b18e:	f7f7 fbf5 	bl	800297c <HAL_GetTick>
 800b192:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b194:	e008      	b.n	800b1a8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b196:	f7f7 fbf1 	bl	800297c <HAL_GetTick>
 800b19a:	4602      	mov	r2, r0
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	1ad3      	subs	r3, r2, r3
 800b1a0:	2b02      	cmp	r3, #2
 800b1a2:	d901      	bls.n	800b1a8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b1a4:	2303      	movs	r3, #3
 800b1a6:	e086      	b.n	800b2b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b1a8:	4b45      	ldr	r3, [pc, #276]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d1f0      	bne.n	800b196 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b1b4:	4b42      	ldr	r3, [pc, #264]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b1b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1b8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	031b      	lsls	r3, r3, #12
 800b1c2:	493f      	ldr	r1, [pc, #252]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b1c4:	4313      	orrs	r3, r2
 800b1c6:	628b      	str	r3, [r1, #40]	@ 0x28
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	3b01      	subs	r3, #1
 800b1ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	689b      	ldr	r3, [r3, #8]
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	025b      	lsls	r3, r3, #9
 800b1da:	b29b      	uxth	r3, r3
 800b1dc:	431a      	orrs	r2, r3
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	68db      	ldr	r3, [r3, #12]
 800b1e2:	3b01      	subs	r3, #1
 800b1e4:	041b      	lsls	r3, r3, #16
 800b1e6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b1ea:	431a      	orrs	r2, r3
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	691b      	ldr	r3, [r3, #16]
 800b1f0:	3b01      	subs	r3, #1
 800b1f2:	061b      	lsls	r3, r3, #24
 800b1f4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b1f8:	4931      	ldr	r1, [pc, #196]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b1fe:	4b30      	ldr	r3, [pc, #192]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b202:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	695b      	ldr	r3, [r3, #20]
 800b20a:	492d      	ldr	r1, [pc, #180]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b20c:	4313      	orrs	r3, r2
 800b20e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b210:	4b2b      	ldr	r3, [pc, #172]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b214:	f023 0220 	bic.w	r2, r3, #32
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	699b      	ldr	r3, [r3, #24]
 800b21c:	4928      	ldr	r1, [pc, #160]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b21e:	4313      	orrs	r3, r2
 800b220:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b222:	4b27      	ldr	r3, [pc, #156]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b226:	4a26      	ldr	r2, [pc, #152]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b228:	f023 0310 	bic.w	r3, r3, #16
 800b22c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b22e:	4b24      	ldr	r3, [pc, #144]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b230:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b232:	4b24      	ldr	r3, [pc, #144]	@ (800b2c4 <RCCEx_PLL2_Config+0x160>)
 800b234:	4013      	ands	r3, r2
 800b236:	687a      	ldr	r2, [r7, #4]
 800b238:	69d2      	ldr	r2, [r2, #28]
 800b23a:	00d2      	lsls	r2, r2, #3
 800b23c:	4920      	ldr	r1, [pc, #128]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b23e:	4313      	orrs	r3, r2
 800b240:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b242:	4b1f      	ldr	r3, [pc, #124]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b246:	4a1e      	ldr	r2, [pc, #120]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b248:	f043 0310 	orr.w	r3, r3, #16
 800b24c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d106      	bne.n	800b262 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b254:	4b1a      	ldr	r3, [pc, #104]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b256:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b258:	4a19      	ldr	r2, [pc, #100]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b25a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b25e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b260:	e00f      	b.n	800b282 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	2b01      	cmp	r3, #1
 800b266:	d106      	bne.n	800b276 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b268:	4b15      	ldr	r3, [pc, #84]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b26a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b26c:	4a14      	ldr	r2, [pc, #80]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b26e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b272:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b274:	e005      	b.n	800b282 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b276:	4b12      	ldr	r3, [pc, #72]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b27a:	4a11      	ldr	r2, [pc, #68]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b27c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b280:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b282:	4b0f      	ldr	r3, [pc, #60]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4a0e      	ldr	r2, [pc, #56]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b288:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b28c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b28e:	f7f7 fb75 	bl	800297c <HAL_GetTick>
 800b292:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b294:	e008      	b.n	800b2a8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b296:	f7f7 fb71 	bl	800297c <HAL_GetTick>
 800b29a:	4602      	mov	r2, r0
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	1ad3      	subs	r3, r2, r3
 800b2a0:	2b02      	cmp	r3, #2
 800b2a2:	d901      	bls.n	800b2a8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b2a4:	2303      	movs	r3, #3
 800b2a6:	e006      	b.n	800b2b6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b2a8:	4b05      	ldr	r3, [pc, #20]	@ (800b2c0 <RCCEx_PLL2_Config+0x15c>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d0f0      	beq.n	800b296 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b2b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b2b6:	4618      	mov	r0, r3
 800b2b8:	3710      	adds	r7, #16
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	bd80      	pop	{r7, pc}
 800b2be:	bf00      	nop
 800b2c0:	58024400 	.word	0x58024400
 800b2c4:	ffff0007 	.word	0xffff0007

0800b2c8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b084      	sub	sp, #16
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b2d6:	4b53      	ldr	r3, [pc, #332]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b2d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b2da:	f003 0303 	and.w	r3, r3, #3
 800b2de:	2b03      	cmp	r3, #3
 800b2e0:	d101      	bne.n	800b2e6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b2e2:	2301      	movs	r3, #1
 800b2e4:	e099      	b.n	800b41a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b2e6:	4b4f      	ldr	r3, [pc, #316]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a4e      	ldr	r2, [pc, #312]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b2ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b2f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b2f2:	f7f7 fb43 	bl	800297c <HAL_GetTick>
 800b2f6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b2f8:	e008      	b.n	800b30c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b2fa:	f7f7 fb3f 	bl	800297c <HAL_GetTick>
 800b2fe:	4602      	mov	r2, r0
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	1ad3      	subs	r3, r2, r3
 800b304:	2b02      	cmp	r3, #2
 800b306:	d901      	bls.n	800b30c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b308:	2303      	movs	r3, #3
 800b30a:	e086      	b.n	800b41a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b30c:	4b45      	ldr	r3, [pc, #276]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b314:	2b00      	cmp	r3, #0
 800b316:	d1f0      	bne.n	800b2fa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b318:	4b42      	ldr	r3, [pc, #264]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b31a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b31c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	051b      	lsls	r3, r3, #20
 800b326:	493f      	ldr	r1, [pc, #252]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b328:	4313      	orrs	r3, r2
 800b32a:	628b      	str	r3, [r1, #40]	@ 0x28
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	3b01      	subs	r3, #1
 800b332:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	689b      	ldr	r3, [r3, #8]
 800b33a:	3b01      	subs	r3, #1
 800b33c:	025b      	lsls	r3, r3, #9
 800b33e:	b29b      	uxth	r3, r3
 800b340:	431a      	orrs	r2, r3
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	68db      	ldr	r3, [r3, #12]
 800b346:	3b01      	subs	r3, #1
 800b348:	041b      	lsls	r3, r3, #16
 800b34a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b34e:	431a      	orrs	r2, r3
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	691b      	ldr	r3, [r3, #16]
 800b354:	3b01      	subs	r3, #1
 800b356:	061b      	lsls	r3, r3, #24
 800b358:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b35c:	4931      	ldr	r1, [pc, #196]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b35e:	4313      	orrs	r3, r2
 800b360:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b362:	4b30      	ldr	r3, [pc, #192]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b366:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	695b      	ldr	r3, [r3, #20]
 800b36e:	492d      	ldr	r1, [pc, #180]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b370:	4313      	orrs	r3, r2
 800b372:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b374:	4b2b      	ldr	r3, [pc, #172]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b378:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	699b      	ldr	r3, [r3, #24]
 800b380:	4928      	ldr	r1, [pc, #160]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b382:	4313      	orrs	r3, r2
 800b384:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b386:	4b27      	ldr	r3, [pc, #156]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b38a:	4a26      	ldr	r2, [pc, #152]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b38c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b390:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b392:	4b24      	ldr	r3, [pc, #144]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b394:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b396:	4b24      	ldr	r3, [pc, #144]	@ (800b428 <RCCEx_PLL3_Config+0x160>)
 800b398:	4013      	ands	r3, r2
 800b39a:	687a      	ldr	r2, [r7, #4]
 800b39c:	69d2      	ldr	r2, [r2, #28]
 800b39e:	00d2      	lsls	r2, r2, #3
 800b3a0:	4920      	ldr	r1, [pc, #128]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b3a6:	4b1f      	ldr	r3, [pc, #124]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3aa:	4a1e      	ldr	r2, [pc, #120]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b3b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d106      	bne.n	800b3c6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b3b8:	4b1a      	ldr	r3, [pc, #104]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3bc:	4a19      	ldr	r2, [pc, #100]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b3c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b3c4:	e00f      	b.n	800b3e6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	2b01      	cmp	r3, #1
 800b3ca:	d106      	bne.n	800b3da <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b3cc:	4b15      	ldr	r3, [pc, #84]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3d0:	4a14      	ldr	r2, [pc, #80]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3d2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b3d6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b3d8:	e005      	b.n	800b3e6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b3da:	4b12      	ldr	r3, [pc, #72]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3de:	4a11      	ldr	r2, [pc, #68]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3e0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b3e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b3e6:	4b0f      	ldr	r3, [pc, #60]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4a0e      	ldr	r2, [pc, #56]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b3ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b3f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b3f2:	f7f7 fac3 	bl	800297c <HAL_GetTick>
 800b3f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b3f8:	e008      	b.n	800b40c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b3fa:	f7f7 fabf 	bl	800297c <HAL_GetTick>
 800b3fe:	4602      	mov	r2, r0
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	1ad3      	subs	r3, r2, r3
 800b404:	2b02      	cmp	r3, #2
 800b406:	d901      	bls.n	800b40c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b408:	2303      	movs	r3, #3
 800b40a:	e006      	b.n	800b41a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b40c:	4b05      	ldr	r3, [pc, #20]	@ (800b424 <RCCEx_PLL3_Config+0x15c>)
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b414:	2b00      	cmp	r3, #0
 800b416:	d0f0      	beq.n	800b3fa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b418:	7bfb      	ldrb	r3, [r7, #15]
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	3710      	adds	r7, #16
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd80      	pop	{r7, pc}
 800b422:	bf00      	nop
 800b424:	58024400 	.word	0x58024400
 800b428:	ffff0007 	.word	0xffff0007

0800b42c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b42c:	b580      	push	{r7, lr}
 800b42e:	b082      	sub	sp, #8
 800b430:	af00      	add	r7, sp, #0
 800b432:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d101      	bne.n	800b43e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b43a:	2301      	movs	r3, #1
 800b43c:	e049      	b.n	800b4d2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b444:	b2db      	uxtb	r3, r3
 800b446:	2b00      	cmp	r3, #0
 800b448:	d106      	bne.n	800b458 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2200      	movs	r2, #0
 800b44e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f7f6 ff76 	bl	8002344 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2202      	movs	r2, #2
 800b45c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681a      	ldr	r2, [r3, #0]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	3304      	adds	r3, #4
 800b468:	4619      	mov	r1, r3
 800b46a:	4610      	mov	r0, r2
 800b46c:	f000 fea4 	bl	800c1b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2201      	movs	r2, #1
 800b474:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2201      	movs	r2, #1
 800b47c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2201      	movs	r2, #1
 800b484:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2201      	movs	r2, #1
 800b48c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2201      	movs	r2, #1
 800b494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2201      	movs	r2, #1
 800b49c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	2201      	movs	r2, #1
 800b4a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2201      	movs	r2, #1
 800b4b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2201      	movs	r2, #1
 800b4bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	2201      	movs	r2, #1
 800b4c4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b4d0:	2300      	movs	r3, #0
}
 800b4d2:	4618      	mov	r0, r3
 800b4d4:	3708      	adds	r7, #8
 800b4d6:	46bd      	mov	sp, r7
 800b4d8:	bd80      	pop	{r7, pc}
	...

0800b4dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b085      	sub	sp, #20
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b4ea:	b2db      	uxtb	r3, r3
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	d001      	beq.n	800b4f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	e054      	b.n	800b59e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2202      	movs	r2, #2
 800b4f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	68da      	ldr	r2, [r3, #12]
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f042 0201 	orr.w	r2, r2, #1
 800b50a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a26      	ldr	r2, [pc, #152]	@ (800b5ac <HAL_TIM_Base_Start_IT+0xd0>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d022      	beq.n	800b55c <HAL_TIM_Base_Start_IT+0x80>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b51e:	d01d      	beq.n	800b55c <HAL_TIM_Base_Start_IT+0x80>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4a22      	ldr	r2, [pc, #136]	@ (800b5b0 <HAL_TIM_Base_Start_IT+0xd4>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d018      	beq.n	800b55c <HAL_TIM_Base_Start_IT+0x80>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4a21      	ldr	r2, [pc, #132]	@ (800b5b4 <HAL_TIM_Base_Start_IT+0xd8>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d013      	beq.n	800b55c <HAL_TIM_Base_Start_IT+0x80>
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a1f      	ldr	r2, [pc, #124]	@ (800b5b8 <HAL_TIM_Base_Start_IT+0xdc>)
 800b53a:	4293      	cmp	r3, r2
 800b53c:	d00e      	beq.n	800b55c <HAL_TIM_Base_Start_IT+0x80>
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	4a1e      	ldr	r2, [pc, #120]	@ (800b5bc <HAL_TIM_Base_Start_IT+0xe0>)
 800b544:	4293      	cmp	r3, r2
 800b546:	d009      	beq.n	800b55c <HAL_TIM_Base_Start_IT+0x80>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	4a1c      	ldr	r2, [pc, #112]	@ (800b5c0 <HAL_TIM_Base_Start_IT+0xe4>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d004      	beq.n	800b55c <HAL_TIM_Base_Start_IT+0x80>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	4a1b      	ldr	r2, [pc, #108]	@ (800b5c4 <HAL_TIM_Base_Start_IT+0xe8>)
 800b558:	4293      	cmp	r3, r2
 800b55a:	d115      	bne.n	800b588 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	689a      	ldr	r2, [r3, #8]
 800b562:	4b19      	ldr	r3, [pc, #100]	@ (800b5c8 <HAL_TIM_Base_Start_IT+0xec>)
 800b564:	4013      	ands	r3, r2
 800b566:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2b06      	cmp	r3, #6
 800b56c:	d015      	beq.n	800b59a <HAL_TIM_Base_Start_IT+0xbe>
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b574:	d011      	beq.n	800b59a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	681a      	ldr	r2, [r3, #0]
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f042 0201 	orr.w	r2, r2, #1
 800b584:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b586:	e008      	b.n	800b59a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	681a      	ldr	r2, [r3, #0]
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f042 0201 	orr.w	r2, r2, #1
 800b596:	601a      	str	r2, [r3, #0]
 800b598:	e000      	b.n	800b59c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b59a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b59c:	2300      	movs	r3, #0
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	3714      	adds	r7, #20
 800b5a2:	46bd      	mov	sp, r7
 800b5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a8:	4770      	bx	lr
 800b5aa:	bf00      	nop
 800b5ac:	40010000 	.word	0x40010000
 800b5b0:	40000400 	.word	0x40000400
 800b5b4:	40000800 	.word	0x40000800
 800b5b8:	40000c00 	.word	0x40000c00
 800b5bc:	40010400 	.word	0x40010400
 800b5c0:	40001800 	.word	0x40001800
 800b5c4:	40014000 	.word	0x40014000
 800b5c8:	00010007 	.word	0x00010007

0800b5cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b082      	sub	sp, #8
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d101      	bne.n	800b5de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e049      	b.n	800b672 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d106      	bne.n	800b5f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f7f6 fd7a 	bl	80020ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2202      	movs	r2, #2
 800b5fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	3304      	adds	r3, #4
 800b608:	4619      	mov	r1, r3
 800b60a:	4610      	mov	r0, r2
 800b60c:	f000 fdd4 	bl	800c1b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2201      	movs	r2, #1
 800b614:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2201      	movs	r2, #1
 800b61c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2201      	movs	r2, #1
 800b624:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2201      	movs	r2, #1
 800b62c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2201      	movs	r2, #1
 800b634:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	2201      	movs	r2, #1
 800b63c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2201      	movs	r2, #1
 800b644:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	2201      	movs	r2, #1
 800b64c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2201      	movs	r2, #1
 800b654:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2201      	movs	r2, #1
 800b65c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2201      	movs	r2, #1
 800b664:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2201      	movs	r2, #1
 800b66c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b670:	2300      	movs	r3, #0
}
 800b672:	4618      	mov	r0, r3
 800b674:	3708      	adds	r7, #8
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
	...

0800b67c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b084      	sub	sp, #16
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	d109      	bne.n	800b6a0 <HAL_TIM_PWM_Start+0x24>
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b692:	b2db      	uxtb	r3, r3
 800b694:	2b01      	cmp	r3, #1
 800b696:	bf14      	ite	ne
 800b698:	2301      	movne	r3, #1
 800b69a:	2300      	moveq	r3, #0
 800b69c:	b2db      	uxtb	r3, r3
 800b69e:	e03c      	b.n	800b71a <HAL_TIM_PWM_Start+0x9e>
 800b6a0:	683b      	ldr	r3, [r7, #0]
 800b6a2:	2b04      	cmp	r3, #4
 800b6a4:	d109      	bne.n	800b6ba <HAL_TIM_PWM_Start+0x3e>
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	2b01      	cmp	r3, #1
 800b6b0:	bf14      	ite	ne
 800b6b2:	2301      	movne	r3, #1
 800b6b4:	2300      	moveq	r3, #0
 800b6b6:	b2db      	uxtb	r3, r3
 800b6b8:	e02f      	b.n	800b71a <HAL_TIM_PWM_Start+0x9e>
 800b6ba:	683b      	ldr	r3, [r7, #0]
 800b6bc:	2b08      	cmp	r3, #8
 800b6be:	d109      	bne.n	800b6d4 <HAL_TIM_PWM_Start+0x58>
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b6c6:	b2db      	uxtb	r3, r3
 800b6c8:	2b01      	cmp	r3, #1
 800b6ca:	bf14      	ite	ne
 800b6cc:	2301      	movne	r3, #1
 800b6ce:	2300      	moveq	r3, #0
 800b6d0:	b2db      	uxtb	r3, r3
 800b6d2:	e022      	b.n	800b71a <HAL_TIM_PWM_Start+0x9e>
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	2b0c      	cmp	r3, #12
 800b6d8:	d109      	bne.n	800b6ee <HAL_TIM_PWM_Start+0x72>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	bf14      	ite	ne
 800b6e6:	2301      	movne	r3, #1
 800b6e8:	2300      	moveq	r3, #0
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	e015      	b.n	800b71a <HAL_TIM_PWM_Start+0x9e>
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	2b10      	cmp	r3, #16
 800b6f2:	d109      	bne.n	800b708 <HAL_TIM_PWM_Start+0x8c>
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b6fa:	b2db      	uxtb	r3, r3
 800b6fc:	2b01      	cmp	r3, #1
 800b6fe:	bf14      	ite	ne
 800b700:	2301      	movne	r3, #1
 800b702:	2300      	moveq	r3, #0
 800b704:	b2db      	uxtb	r3, r3
 800b706:	e008      	b.n	800b71a <HAL_TIM_PWM_Start+0x9e>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800b70e:	b2db      	uxtb	r3, r3
 800b710:	2b01      	cmp	r3, #1
 800b712:	bf14      	ite	ne
 800b714:	2301      	movne	r3, #1
 800b716:	2300      	moveq	r3, #0
 800b718:	b2db      	uxtb	r3, r3
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d001      	beq.n	800b722 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b71e:	2301      	movs	r3, #1
 800b720:	e0a1      	b.n	800b866 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d104      	bne.n	800b732 <HAL_TIM_PWM_Start+0xb6>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2202      	movs	r2, #2
 800b72c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b730:	e023      	b.n	800b77a <HAL_TIM_PWM_Start+0xfe>
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	2b04      	cmp	r3, #4
 800b736:	d104      	bne.n	800b742 <HAL_TIM_PWM_Start+0xc6>
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2202      	movs	r2, #2
 800b73c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b740:	e01b      	b.n	800b77a <HAL_TIM_PWM_Start+0xfe>
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	2b08      	cmp	r3, #8
 800b746:	d104      	bne.n	800b752 <HAL_TIM_PWM_Start+0xd6>
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	2202      	movs	r2, #2
 800b74c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b750:	e013      	b.n	800b77a <HAL_TIM_PWM_Start+0xfe>
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	2b0c      	cmp	r3, #12
 800b756:	d104      	bne.n	800b762 <HAL_TIM_PWM_Start+0xe6>
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2202      	movs	r2, #2
 800b75c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b760:	e00b      	b.n	800b77a <HAL_TIM_PWM_Start+0xfe>
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	2b10      	cmp	r3, #16
 800b766:	d104      	bne.n	800b772 <HAL_TIM_PWM_Start+0xf6>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2202      	movs	r2, #2
 800b76c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b770:	e003      	b.n	800b77a <HAL_TIM_PWM_Start+0xfe>
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	2202      	movs	r2, #2
 800b776:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	2201      	movs	r2, #1
 800b780:	6839      	ldr	r1, [r7, #0]
 800b782:	4618      	mov	r0, r3
 800b784:	f001 f932 	bl	800c9ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	4a38      	ldr	r2, [pc, #224]	@ (800b870 <HAL_TIM_PWM_Start+0x1f4>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d013      	beq.n	800b7ba <HAL_TIM_PWM_Start+0x13e>
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	4a37      	ldr	r2, [pc, #220]	@ (800b874 <HAL_TIM_PWM_Start+0x1f8>)
 800b798:	4293      	cmp	r3, r2
 800b79a:	d00e      	beq.n	800b7ba <HAL_TIM_PWM_Start+0x13e>
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4a35      	ldr	r2, [pc, #212]	@ (800b878 <HAL_TIM_PWM_Start+0x1fc>)
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d009      	beq.n	800b7ba <HAL_TIM_PWM_Start+0x13e>
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	4a34      	ldr	r2, [pc, #208]	@ (800b87c <HAL_TIM_PWM_Start+0x200>)
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d004      	beq.n	800b7ba <HAL_TIM_PWM_Start+0x13e>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	4a32      	ldr	r2, [pc, #200]	@ (800b880 <HAL_TIM_PWM_Start+0x204>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d101      	bne.n	800b7be <HAL_TIM_PWM_Start+0x142>
 800b7ba:	2301      	movs	r3, #1
 800b7bc:	e000      	b.n	800b7c0 <HAL_TIM_PWM_Start+0x144>
 800b7be:	2300      	movs	r3, #0
 800b7c0:	2b00      	cmp	r3, #0
 800b7c2:	d007      	beq.n	800b7d4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b7d2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	4a25      	ldr	r2, [pc, #148]	@ (800b870 <HAL_TIM_PWM_Start+0x1f4>)
 800b7da:	4293      	cmp	r3, r2
 800b7dc:	d022      	beq.n	800b824 <HAL_TIM_PWM_Start+0x1a8>
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b7e6:	d01d      	beq.n	800b824 <HAL_TIM_PWM_Start+0x1a8>
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	4a25      	ldr	r2, [pc, #148]	@ (800b884 <HAL_TIM_PWM_Start+0x208>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d018      	beq.n	800b824 <HAL_TIM_PWM_Start+0x1a8>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	4a24      	ldr	r2, [pc, #144]	@ (800b888 <HAL_TIM_PWM_Start+0x20c>)
 800b7f8:	4293      	cmp	r3, r2
 800b7fa:	d013      	beq.n	800b824 <HAL_TIM_PWM_Start+0x1a8>
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	4a22      	ldr	r2, [pc, #136]	@ (800b88c <HAL_TIM_PWM_Start+0x210>)
 800b802:	4293      	cmp	r3, r2
 800b804:	d00e      	beq.n	800b824 <HAL_TIM_PWM_Start+0x1a8>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	4a1a      	ldr	r2, [pc, #104]	@ (800b874 <HAL_TIM_PWM_Start+0x1f8>)
 800b80c:	4293      	cmp	r3, r2
 800b80e:	d009      	beq.n	800b824 <HAL_TIM_PWM_Start+0x1a8>
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	4a1e      	ldr	r2, [pc, #120]	@ (800b890 <HAL_TIM_PWM_Start+0x214>)
 800b816:	4293      	cmp	r3, r2
 800b818:	d004      	beq.n	800b824 <HAL_TIM_PWM_Start+0x1a8>
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	4a16      	ldr	r2, [pc, #88]	@ (800b878 <HAL_TIM_PWM_Start+0x1fc>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d115      	bne.n	800b850 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	689a      	ldr	r2, [r3, #8]
 800b82a:	4b1a      	ldr	r3, [pc, #104]	@ (800b894 <HAL_TIM_PWM_Start+0x218>)
 800b82c:	4013      	ands	r3, r2
 800b82e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b830:	68fb      	ldr	r3, [r7, #12]
 800b832:	2b06      	cmp	r3, #6
 800b834:	d015      	beq.n	800b862 <HAL_TIM_PWM_Start+0x1e6>
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b83c:	d011      	beq.n	800b862 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	681a      	ldr	r2, [r3, #0]
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	f042 0201 	orr.w	r2, r2, #1
 800b84c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b84e:	e008      	b.n	800b862 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	f042 0201 	orr.w	r2, r2, #1
 800b85e:	601a      	str	r2, [r3, #0]
 800b860:	e000      	b.n	800b864 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b862:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b864:	2300      	movs	r3, #0
}
 800b866:	4618      	mov	r0, r3
 800b868:	3710      	adds	r7, #16
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	40010000 	.word	0x40010000
 800b874:	40010400 	.word	0x40010400
 800b878:	40014000 	.word	0x40014000
 800b87c:	40014400 	.word	0x40014400
 800b880:	40014800 	.word	0x40014800
 800b884:	40000400 	.word	0x40000400
 800b888:	40000800 	.word	0x40000800
 800b88c:	40000c00 	.word	0x40000c00
 800b890:	40001800 	.word	0x40001800
 800b894:	00010007 	.word	0x00010007

0800b898 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800b898:	b580      	push	{r7, lr}
 800b89a:	b086      	sub	sp, #24
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d101      	bne.n	800b8ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e08f      	b.n	800b9cc <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	2b00      	cmp	r3, #0
 800b8b6:	d106      	bne.n	800b8c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f7f6 fb17 	bl	8001ef4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2202      	movs	r2, #2
 800b8ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	6899      	ldr	r1, [r3, #8]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	4b3e      	ldr	r3, [pc, #248]	@ (800b9d4 <HAL_TIM_Encoder_Init+0x13c>)
 800b8da:	400b      	ands	r3, r1
 800b8dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681a      	ldr	r2, [r3, #0]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	3304      	adds	r3, #4
 800b8e6:	4619      	mov	r1, r3
 800b8e8:	4610      	mov	r0, r2
 800b8ea:	f000 fc65 	bl	800c1b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	689b      	ldr	r3, [r3, #8]
 800b8f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	699b      	ldr	r3, [r3, #24]
 800b8fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	6a1b      	ldr	r3, [r3, #32]
 800b904:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b906:	683b      	ldr	r3, [r7, #0]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	697a      	ldr	r2, [r7, #20]
 800b90c:	4313      	orrs	r3, r2
 800b90e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b910:	693a      	ldr	r2, [r7, #16]
 800b912:	4b31      	ldr	r3, [pc, #196]	@ (800b9d8 <HAL_TIM_Encoder_Init+0x140>)
 800b914:	4013      	ands	r3, r2
 800b916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	689a      	ldr	r2, [r3, #8]
 800b91c:	683b      	ldr	r3, [r7, #0]
 800b91e:	699b      	ldr	r3, [r3, #24]
 800b920:	021b      	lsls	r3, r3, #8
 800b922:	4313      	orrs	r3, r2
 800b924:	693a      	ldr	r2, [r7, #16]
 800b926:	4313      	orrs	r3, r2
 800b928:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b92a:	693a      	ldr	r2, [r7, #16]
 800b92c:	4b2b      	ldr	r3, [pc, #172]	@ (800b9dc <HAL_TIM_Encoder_Init+0x144>)
 800b92e:	4013      	ands	r3, r2
 800b930:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b932:	693a      	ldr	r2, [r7, #16]
 800b934:	4b2a      	ldr	r3, [pc, #168]	@ (800b9e0 <HAL_TIM_Encoder_Init+0x148>)
 800b936:	4013      	ands	r3, r2
 800b938:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b93a:	683b      	ldr	r3, [r7, #0]
 800b93c:	68da      	ldr	r2, [r3, #12]
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	69db      	ldr	r3, [r3, #28]
 800b942:	021b      	lsls	r3, r3, #8
 800b944:	4313      	orrs	r3, r2
 800b946:	693a      	ldr	r2, [r7, #16]
 800b948:	4313      	orrs	r3, r2
 800b94a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	691b      	ldr	r3, [r3, #16]
 800b950:	011a      	lsls	r2, r3, #4
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	6a1b      	ldr	r3, [r3, #32]
 800b956:	031b      	lsls	r3, r3, #12
 800b958:	4313      	orrs	r3, r2
 800b95a:	693a      	ldr	r2, [r7, #16]
 800b95c:	4313      	orrs	r3, r2
 800b95e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800b966:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800b96e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	685a      	ldr	r2, [r3, #4]
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	695b      	ldr	r3, [r3, #20]
 800b978:	011b      	lsls	r3, r3, #4
 800b97a:	4313      	orrs	r3, r2
 800b97c:	68fa      	ldr	r2, [r7, #12]
 800b97e:	4313      	orrs	r3, r2
 800b980:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	697a      	ldr	r2, [r7, #20]
 800b988:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	693a      	ldr	r2, [r7, #16]
 800b990:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	68fa      	ldr	r2, [r7, #12]
 800b998:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	2201      	movs	r2, #1
 800b99e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2201      	movs	r2, #1
 800b9a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	2201      	movs	r2, #1
 800b9ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	2201      	movs	r2, #1
 800b9b6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2201      	movs	r2, #1
 800b9be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b9ca:	2300      	movs	r3, #0
}
 800b9cc:	4618      	mov	r0, r3
 800b9ce:	3718      	adds	r7, #24
 800b9d0:	46bd      	mov	sp, r7
 800b9d2:	bd80      	pop	{r7, pc}
 800b9d4:	fffebff8 	.word	0xfffebff8
 800b9d8:	fffffcfc 	.word	0xfffffcfc
 800b9dc:	fffff3f3 	.word	0xfffff3f3
 800b9e0:	ffff0f0f 	.word	0xffff0f0f

0800b9e4 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b9e4:	b580      	push	{r7, lr}
 800b9e6:	b084      	sub	sp, #16
 800b9e8:	af00      	add	r7, sp, #0
 800b9ea:	6078      	str	r0, [r7, #4]
 800b9ec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800b9f4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800b9fc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ba04:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ba0c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d110      	bne.n	800ba36 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ba14:	7bfb      	ldrb	r3, [r7, #15]
 800ba16:	2b01      	cmp	r3, #1
 800ba18:	d102      	bne.n	800ba20 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800ba1a:	7b7b      	ldrb	r3, [r7, #13]
 800ba1c:	2b01      	cmp	r3, #1
 800ba1e:	d001      	beq.n	800ba24 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800ba20:	2301      	movs	r3, #1
 800ba22:	e089      	b.n	800bb38 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	2202      	movs	r2, #2
 800ba28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2202      	movs	r2, #2
 800ba30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ba34:	e031      	b.n	800ba9a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800ba36:	683b      	ldr	r3, [r7, #0]
 800ba38:	2b04      	cmp	r3, #4
 800ba3a:	d110      	bne.n	800ba5e <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ba3c:	7bbb      	ldrb	r3, [r7, #14]
 800ba3e:	2b01      	cmp	r3, #1
 800ba40:	d102      	bne.n	800ba48 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ba42:	7b3b      	ldrb	r3, [r7, #12]
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d001      	beq.n	800ba4c <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	e075      	b.n	800bb38 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	2202      	movs	r2, #2
 800ba50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2202      	movs	r2, #2
 800ba58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ba5c:	e01d      	b.n	800ba9a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ba5e:	7bfb      	ldrb	r3, [r7, #15]
 800ba60:	2b01      	cmp	r3, #1
 800ba62:	d108      	bne.n	800ba76 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800ba64:	7bbb      	ldrb	r3, [r7, #14]
 800ba66:	2b01      	cmp	r3, #1
 800ba68:	d105      	bne.n	800ba76 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800ba6a:	7b7b      	ldrb	r3, [r7, #13]
 800ba6c:	2b01      	cmp	r3, #1
 800ba6e:	d102      	bne.n	800ba76 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800ba70:	7b3b      	ldrb	r3, [r7, #12]
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	d001      	beq.n	800ba7a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800ba76:	2301      	movs	r3, #1
 800ba78:	e05e      	b.n	800bb38 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	2202      	movs	r2, #2
 800ba7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	2202      	movs	r2, #2
 800ba86:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2202      	movs	r2, #2
 800ba8e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2202      	movs	r2, #2
 800ba96:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800ba9a:	683b      	ldr	r3, [r7, #0]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d003      	beq.n	800baa8 <HAL_TIM_Encoder_Start_IT+0xc4>
 800baa0:	683b      	ldr	r3, [r7, #0]
 800baa2:	2b04      	cmp	r3, #4
 800baa4:	d010      	beq.n	800bac8 <HAL_TIM_Encoder_Start_IT+0xe4>
 800baa6:	e01f      	b.n	800bae8 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2201      	movs	r2, #1
 800baae:	2100      	movs	r1, #0
 800bab0:	4618      	mov	r0, r3
 800bab2:	f000 ff9b 	bl	800c9ec <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	68da      	ldr	r2, [r3, #12]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	f042 0202 	orr.w	r2, r2, #2
 800bac4:	60da      	str	r2, [r3, #12]
      break;
 800bac6:	e02e      	b.n	800bb26 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	2201      	movs	r2, #1
 800bace:	2104      	movs	r1, #4
 800bad0:	4618      	mov	r0, r3
 800bad2:	f000 ff8b 	bl	800c9ec <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	68da      	ldr	r2, [r3, #12]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f042 0204 	orr.w	r2, r2, #4
 800bae4:	60da      	str	r2, [r3, #12]
      break;
 800bae6:	e01e      	b.n	800bb26 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	2201      	movs	r2, #1
 800baee:	2100      	movs	r1, #0
 800baf0:	4618      	mov	r0, r3
 800baf2:	f000 ff7b 	bl	800c9ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	2201      	movs	r2, #1
 800bafc:	2104      	movs	r1, #4
 800bafe:	4618      	mov	r0, r3
 800bb00:	f000 ff74 	bl	800c9ec <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	68da      	ldr	r2, [r3, #12]
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	f042 0202 	orr.w	r2, r2, #2
 800bb12:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	68da      	ldr	r2, [r3, #12]
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	f042 0204 	orr.w	r2, r2, #4
 800bb22:	60da      	str	r2, [r3, #12]
      break;
 800bb24:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f042 0201 	orr.w	r2, r2, #1
 800bb34:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800bb36:	2300      	movs	r3, #0
}
 800bb38:	4618      	mov	r0, r3
 800bb3a:	3710      	adds	r7, #16
 800bb3c:	46bd      	mov	sp, r7
 800bb3e:	bd80      	pop	{r7, pc}

0800bb40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	68db      	ldr	r3, [r3, #12]
 800bb4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	691b      	ldr	r3, [r3, #16]
 800bb56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800bb58:	68bb      	ldr	r3, [r7, #8]
 800bb5a:	f003 0302 	and.w	r3, r3, #2
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d020      	beq.n	800bba4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	f003 0302 	and.w	r3, r3, #2
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d01b      	beq.n	800bba4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	f06f 0202 	mvn.w	r2, #2
 800bb74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	2201      	movs	r2, #1
 800bb7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	699b      	ldr	r3, [r3, #24]
 800bb82:	f003 0303 	and.w	r3, r3, #3
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d003      	beq.n	800bb92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f7f5 f966 	bl	8000e5c <HAL_TIM_IC_CaptureCallback>
 800bb90:	e005      	b.n	800bb9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb92:	6878      	ldr	r0, [r7, #4]
 800bb94:	f000 faf2 	bl	800c17c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb98:	6878      	ldr	r0, [r7, #4]
 800bb9a:	f000 faf9 	bl	800c190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2200      	movs	r2, #0
 800bba2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	f003 0304 	and.w	r3, r3, #4
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d020      	beq.n	800bbf0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	f003 0304 	and.w	r3, r3, #4
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d01b      	beq.n	800bbf0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	f06f 0204 	mvn.w	r2, #4
 800bbc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2202      	movs	r2, #2
 800bbc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	699b      	ldr	r3, [r3, #24]
 800bbce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d003      	beq.n	800bbde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbd6:	6878      	ldr	r0, [r7, #4]
 800bbd8:	f7f5 f940 	bl	8000e5c <HAL_TIM_IC_CaptureCallback>
 800bbdc:	e005      	b.n	800bbea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 facc 	bl	800c17c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f000 fad3 	bl	800c190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2200      	movs	r2, #0
 800bbee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800bbf0:	68bb      	ldr	r3, [r7, #8]
 800bbf2:	f003 0308 	and.w	r3, r3, #8
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d020      	beq.n	800bc3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	f003 0308 	and.w	r3, r3, #8
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d01b      	beq.n	800bc3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f06f 0208 	mvn.w	r2, #8
 800bc0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2204      	movs	r2, #4
 800bc12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	69db      	ldr	r3, [r3, #28]
 800bc1a:	f003 0303 	and.w	r3, r3, #3
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d003      	beq.n	800bc2a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f7f5 f91a 	bl	8000e5c <HAL_TIM_IC_CaptureCallback>
 800bc28:	e005      	b.n	800bc36 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f000 faa6 	bl	800c17c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	f000 faad 	bl	800c190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	2200      	movs	r2, #0
 800bc3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	f003 0310 	and.w	r3, r3, #16
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d020      	beq.n	800bc88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f003 0310 	and.w	r3, r3, #16
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d01b      	beq.n	800bc88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	f06f 0210 	mvn.w	r2, #16
 800bc58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	2208      	movs	r2, #8
 800bc5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	69db      	ldr	r3, [r3, #28]
 800bc66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d003      	beq.n	800bc76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f7f5 f8f4 	bl	8000e5c <HAL_TIM_IC_CaptureCallback>
 800bc74:	e005      	b.n	800bc82 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f000 fa80 	bl	800c17c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f000 fa87 	bl	800c190 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2200      	movs	r2, #0
 800bc86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800bc88:	68bb      	ldr	r3, [r7, #8]
 800bc8a:	f003 0301 	and.w	r3, r3, #1
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d00c      	beq.n	800bcac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f003 0301 	and.w	r3, r3, #1
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d007      	beq.n	800bcac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f06f 0201 	mvn.w	r2, #1
 800bca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f000 fa5e 	bl	800c168 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d104      	bne.n	800bcc0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d00c      	beq.n	800bcda <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d007      	beq.n	800bcda <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800bcd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	f000 ff47 	bl	800cb68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d00c      	beq.n	800bcfe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d007      	beq.n	800bcfe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800bcf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 ff3f 	bl	800cb7c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	d00c      	beq.n	800bd22 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d007      	beq.n	800bd22 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800bd1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f000 fa41 	bl	800c1a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	f003 0320 	and.w	r3, r3, #32
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d00c      	beq.n	800bd46 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f003 0320 	and.w	r3, r3, #32
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d007      	beq.n	800bd46 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	f06f 0220 	mvn.w	r2, #32
 800bd3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 ff07 	bl	800cb54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bd46:	bf00      	nop
 800bd48:	3710      	adds	r7, #16
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}
	...

0800bd50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b086      	sub	sp, #24
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	60f8      	str	r0, [r7, #12]
 800bd58:	60b9      	str	r1, [r7, #8]
 800bd5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bd5c:	2300      	movs	r3, #0
 800bd5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bd66:	2b01      	cmp	r3, #1
 800bd68:	d101      	bne.n	800bd6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800bd6a:	2302      	movs	r3, #2
 800bd6c:	e0ff      	b.n	800bf6e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2201      	movs	r2, #1
 800bd72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2b14      	cmp	r3, #20
 800bd7a:	f200 80f0 	bhi.w	800bf5e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800bd7e:	a201      	add	r2, pc, #4	@ (adr r2, 800bd84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800bd80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd84:	0800bdd9 	.word	0x0800bdd9
 800bd88:	0800bf5f 	.word	0x0800bf5f
 800bd8c:	0800bf5f 	.word	0x0800bf5f
 800bd90:	0800bf5f 	.word	0x0800bf5f
 800bd94:	0800be19 	.word	0x0800be19
 800bd98:	0800bf5f 	.word	0x0800bf5f
 800bd9c:	0800bf5f 	.word	0x0800bf5f
 800bda0:	0800bf5f 	.word	0x0800bf5f
 800bda4:	0800be5b 	.word	0x0800be5b
 800bda8:	0800bf5f 	.word	0x0800bf5f
 800bdac:	0800bf5f 	.word	0x0800bf5f
 800bdb0:	0800bf5f 	.word	0x0800bf5f
 800bdb4:	0800be9b 	.word	0x0800be9b
 800bdb8:	0800bf5f 	.word	0x0800bf5f
 800bdbc:	0800bf5f 	.word	0x0800bf5f
 800bdc0:	0800bf5f 	.word	0x0800bf5f
 800bdc4:	0800bedd 	.word	0x0800bedd
 800bdc8:	0800bf5f 	.word	0x0800bf5f
 800bdcc:	0800bf5f 	.word	0x0800bf5f
 800bdd0:	0800bf5f 	.word	0x0800bf5f
 800bdd4:	0800bf1d 	.word	0x0800bf1d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	68b9      	ldr	r1, [r7, #8]
 800bdde:	4618      	mov	r0, r3
 800bde0:	f000 fa90 	bl	800c304 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800bde4:	68fb      	ldr	r3, [r7, #12]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	699a      	ldr	r2, [r3, #24]
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f042 0208 	orr.w	r2, r2, #8
 800bdf2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	699a      	ldr	r2, [r3, #24]
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f022 0204 	bic.w	r2, r2, #4
 800be02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	6999      	ldr	r1, [r3, #24]
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	691a      	ldr	r2, [r3, #16]
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	430a      	orrs	r2, r1
 800be14:	619a      	str	r2, [r3, #24]
      break;
 800be16:	e0a5      	b.n	800bf64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	68b9      	ldr	r1, [r7, #8]
 800be1e:	4618      	mov	r0, r3
 800be20:	f000 fb00 	bl	800c424 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	699a      	ldr	r2, [r3, #24]
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800be32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	699a      	ldr	r2, [r3, #24]
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800be42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	6999      	ldr	r1, [r3, #24]
 800be4a:	68bb      	ldr	r3, [r7, #8]
 800be4c:	691b      	ldr	r3, [r3, #16]
 800be4e:	021a      	lsls	r2, r3, #8
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	430a      	orrs	r2, r1
 800be56:	619a      	str	r2, [r3, #24]
      break;
 800be58:	e084      	b.n	800bf64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	68b9      	ldr	r1, [r7, #8]
 800be60:	4618      	mov	r0, r3
 800be62:	f000 fb69 	bl	800c538 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	69da      	ldr	r2, [r3, #28]
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	f042 0208 	orr.w	r2, r2, #8
 800be74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	69da      	ldr	r2, [r3, #28]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	f022 0204 	bic.w	r2, r2, #4
 800be84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	69d9      	ldr	r1, [r3, #28]
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	691a      	ldr	r2, [r3, #16]
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	430a      	orrs	r2, r1
 800be96:	61da      	str	r2, [r3, #28]
      break;
 800be98:	e064      	b.n	800bf64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	68b9      	ldr	r1, [r7, #8]
 800bea0:	4618      	mov	r0, r3
 800bea2:	f000 fbd1 	bl	800c648 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800bea6:	68fb      	ldr	r3, [r7, #12]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	69da      	ldr	r2, [r3, #28]
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	681b      	ldr	r3, [r3, #0]
 800beb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800beb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	69da      	ldr	r2, [r3, #28]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	69d9      	ldr	r1, [r3, #28]
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	691b      	ldr	r3, [r3, #16]
 800bed0:	021a      	lsls	r2, r3, #8
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	430a      	orrs	r2, r1
 800bed8:	61da      	str	r2, [r3, #28]
      break;
 800beda:	e043      	b.n	800bf64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	68b9      	ldr	r1, [r7, #8]
 800bee2:	4618      	mov	r0, r3
 800bee4:	f000 fc1a 	bl	800c71c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800bee8:	68fb      	ldr	r3, [r7, #12]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f042 0208 	orr.w	r2, r2, #8
 800bef6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f022 0204 	bic.w	r2, r2, #4
 800bf06:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bf0e:	68bb      	ldr	r3, [r7, #8]
 800bf10:	691a      	ldr	r2, [r3, #16]
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	430a      	orrs	r2, r1
 800bf18:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bf1a:	e023      	b.n	800bf64 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800bf1c:	68fb      	ldr	r3, [r7, #12]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	68b9      	ldr	r1, [r7, #8]
 800bf22:	4618      	mov	r0, r3
 800bf24:	f000 fc5e 	bl	800c7e4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800bf36:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800bf46:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	681b      	ldr	r3, [r3, #0]
 800bf4c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800bf4e:	68bb      	ldr	r3, [r7, #8]
 800bf50:	691b      	ldr	r3, [r3, #16]
 800bf52:	021a      	lsls	r2, r3, #8
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	430a      	orrs	r2, r1
 800bf5a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800bf5c:	e002      	b.n	800bf64 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800bf5e:	2301      	movs	r3, #1
 800bf60:	75fb      	strb	r3, [r7, #23]
      break;
 800bf62:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	2200      	movs	r2, #0
 800bf68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800bf6c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf6e:	4618      	mov	r0, r3
 800bf70:	3718      	adds	r7, #24
 800bf72:	46bd      	mov	sp, r7
 800bf74:	bd80      	pop	{r7, pc}
 800bf76:	bf00      	nop

0800bf78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b084      	sub	sp, #16
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf82:	2300      	movs	r3, #0
 800bf84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	d101      	bne.n	800bf94 <HAL_TIM_ConfigClockSource+0x1c>
 800bf90:	2302      	movs	r3, #2
 800bf92:	e0dc      	b.n	800c14e <HAL_TIM_ConfigClockSource+0x1d6>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2201      	movs	r2, #1
 800bf98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2202      	movs	r2, #2
 800bfa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	689b      	ldr	r3, [r3, #8]
 800bfaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bfac:	68ba      	ldr	r2, [r7, #8]
 800bfae:	4b6a      	ldr	r3, [pc, #424]	@ (800c158 <HAL_TIM_ConfigClockSource+0x1e0>)
 800bfb0:	4013      	ands	r3, r2
 800bfb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bfba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	68ba      	ldr	r2, [r7, #8]
 800bfc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a64      	ldr	r2, [pc, #400]	@ (800c15c <HAL_TIM_ConfigClockSource+0x1e4>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	f000 80a9 	beq.w	800c122 <HAL_TIM_ConfigClockSource+0x1aa>
 800bfd0:	4a62      	ldr	r2, [pc, #392]	@ (800c15c <HAL_TIM_ConfigClockSource+0x1e4>)
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	f200 80ae 	bhi.w	800c134 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfd8:	4a61      	ldr	r2, [pc, #388]	@ (800c160 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bfda:	4293      	cmp	r3, r2
 800bfdc:	f000 80a1 	beq.w	800c122 <HAL_TIM_ConfigClockSource+0x1aa>
 800bfe0:	4a5f      	ldr	r2, [pc, #380]	@ (800c160 <HAL_TIM_ConfigClockSource+0x1e8>)
 800bfe2:	4293      	cmp	r3, r2
 800bfe4:	f200 80a6 	bhi.w	800c134 <HAL_TIM_ConfigClockSource+0x1bc>
 800bfe8:	4a5e      	ldr	r2, [pc, #376]	@ (800c164 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bfea:	4293      	cmp	r3, r2
 800bfec:	f000 8099 	beq.w	800c122 <HAL_TIM_ConfigClockSource+0x1aa>
 800bff0:	4a5c      	ldr	r2, [pc, #368]	@ (800c164 <HAL_TIM_ConfigClockSource+0x1ec>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	f200 809e 	bhi.w	800c134 <HAL_TIM_ConfigClockSource+0x1bc>
 800bff8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800bffc:	f000 8091 	beq.w	800c122 <HAL_TIM_ConfigClockSource+0x1aa>
 800c000:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c004:	f200 8096 	bhi.w	800c134 <HAL_TIM_ConfigClockSource+0x1bc>
 800c008:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c00c:	f000 8089 	beq.w	800c122 <HAL_TIM_ConfigClockSource+0x1aa>
 800c010:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c014:	f200 808e 	bhi.w	800c134 <HAL_TIM_ConfigClockSource+0x1bc>
 800c018:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c01c:	d03e      	beq.n	800c09c <HAL_TIM_ConfigClockSource+0x124>
 800c01e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c022:	f200 8087 	bhi.w	800c134 <HAL_TIM_ConfigClockSource+0x1bc>
 800c026:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c02a:	f000 8086 	beq.w	800c13a <HAL_TIM_ConfigClockSource+0x1c2>
 800c02e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c032:	d87f      	bhi.n	800c134 <HAL_TIM_ConfigClockSource+0x1bc>
 800c034:	2b70      	cmp	r3, #112	@ 0x70
 800c036:	d01a      	beq.n	800c06e <HAL_TIM_ConfigClockSource+0xf6>
 800c038:	2b70      	cmp	r3, #112	@ 0x70
 800c03a:	d87b      	bhi.n	800c134 <HAL_TIM_ConfigClockSource+0x1bc>
 800c03c:	2b60      	cmp	r3, #96	@ 0x60
 800c03e:	d050      	beq.n	800c0e2 <HAL_TIM_ConfigClockSource+0x16a>
 800c040:	2b60      	cmp	r3, #96	@ 0x60
 800c042:	d877      	bhi.n	800c134 <HAL_TIM_ConfigClockSource+0x1bc>
 800c044:	2b50      	cmp	r3, #80	@ 0x50
 800c046:	d03c      	beq.n	800c0c2 <HAL_TIM_ConfigClockSource+0x14a>
 800c048:	2b50      	cmp	r3, #80	@ 0x50
 800c04a:	d873      	bhi.n	800c134 <HAL_TIM_ConfigClockSource+0x1bc>
 800c04c:	2b40      	cmp	r3, #64	@ 0x40
 800c04e:	d058      	beq.n	800c102 <HAL_TIM_ConfigClockSource+0x18a>
 800c050:	2b40      	cmp	r3, #64	@ 0x40
 800c052:	d86f      	bhi.n	800c134 <HAL_TIM_ConfigClockSource+0x1bc>
 800c054:	2b30      	cmp	r3, #48	@ 0x30
 800c056:	d064      	beq.n	800c122 <HAL_TIM_ConfigClockSource+0x1aa>
 800c058:	2b30      	cmp	r3, #48	@ 0x30
 800c05a:	d86b      	bhi.n	800c134 <HAL_TIM_ConfigClockSource+0x1bc>
 800c05c:	2b20      	cmp	r3, #32
 800c05e:	d060      	beq.n	800c122 <HAL_TIM_ConfigClockSource+0x1aa>
 800c060:	2b20      	cmp	r3, #32
 800c062:	d867      	bhi.n	800c134 <HAL_TIM_ConfigClockSource+0x1bc>
 800c064:	2b00      	cmp	r3, #0
 800c066:	d05c      	beq.n	800c122 <HAL_TIM_ConfigClockSource+0x1aa>
 800c068:	2b10      	cmp	r3, #16
 800c06a:	d05a      	beq.n	800c122 <HAL_TIM_ConfigClockSource+0x1aa>
 800c06c:	e062      	b.n	800c134 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c07e:	f000 fc95 	bl	800c9ac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	689b      	ldr	r3, [r3, #8]
 800c088:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c090:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	68ba      	ldr	r2, [r7, #8]
 800c098:	609a      	str	r2, [r3, #8]
      break;
 800c09a:	e04f      	b.n	800c13c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c0a0:	683b      	ldr	r3, [r7, #0]
 800c0a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c0a8:	683b      	ldr	r3, [r7, #0]
 800c0aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c0ac:	f000 fc7e 	bl	800c9ac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	689a      	ldr	r2, [r3, #8]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c0be:	609a      	str	r2, [r3, #8]
      break;
 800c0c0:	e03c      	b.n	800c13c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	f000 fbee 	bl	800c8b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	2150      	movs	r1, #80	@ 0x50
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f000 fc48 	bl	800c970 <TIM_ITRx_SetConfig>
      break;
 800c0e0:	e02c      	b.n	800c13c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c0ea:	683b      	ldr	r3, [r7, #0]
 800c0ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	f000 fc0d 	bl	800c90e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	2160      	movs	r1, #96	@ 0x60
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f000 fc38 	bl	800c970 <TIM_ITRx_SetConfig>
      break;
 800c100:	e01c      	b.n	800c13c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c10a:	683b      	ldr	r3, [r7, #0]
 800c10c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c10e:	461a      	mov	r2, r3
 800c110:	f000 fbce 	bl	800c8b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	2140      	movs	r1, #64	@ 0x40
 800c11a:	4618      	mov	r0, r3
 800c11c:	f000 fc28 	bl	800c970 <TIM_ITRx_SetConfig>
      break;
 800c120:	e00c      	b.n	800c13c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	681a      	ldr	r2, [r3, #0]
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	4619      	mov	r1, r3
 800c12c:	4610      	mov	r0, r2
 800c12e:	f000 fc1f 	bl	800c970 <TIM_ITRx_SetConfig>
      break;
 800c132:	e003      	b.n	800c13c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c134:	2301      	movs	r3, #1
 800c136:	73fb      	strb	r3, [r7, #15]
      break;
 800c138:	e000      	b.n	800c13c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c13a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2201      	movs	r2, #1
 800c140:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	2200      	movs	r2, #0
 800c148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c14c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3710      	adds	r7, #16
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	ffceff88 	.word	0xffceff88
 800c15c:	00100040 	.word	0x00100040
 800c160:	00100030 	.word	0x00100030
 800c164:	00100020 	.word	0x00100020

0800c168 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c168:	b480      	push	{r7}
 800c16a:	b083      	sub	sp, #12
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c170:	bf00      	nop
 800c172:	370c      	adds	r7, #12
 800c174:	46bd      	mov	sp, r7
 800c176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c17a:	4770      	bx	lr

0800c17c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b083      	sub	sp, #12
 800c180:	af00      	add	r7, sp, #0
 800c182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c184:	bf00      	nop
 800c186:	370c      	adds	r7, #12
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr

0800c190 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c190:	b480      	push	{r7}
 800c192:	b083      	sub	sp, #12
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c198:	bf00      	nop
 800c19a:	370c      	adds	r7, #12
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr

0800c1a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b083      	sub	sp, #12
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c1ac:	bf00      	nop
 800c1ae:	370c      	adds	r7, #12
 800c1b0:	46bd      	mov	sp, r7
 800c1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1b6:	4770      	bx	lr

0800c1b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b085      	sub	sp, #20
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	6078      	str	r0, [r7, #4]
 800c1c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	4a46      	ldr	r2, [pc, #280]	@ (800c2e4 <TIM_Base_SetConfig+0x12c>)
 800c1cc:	4293      	cmp	r3, r2
 800c1ce:	d013      	beq.n	800c1f8 <TIM_Base_SetConfig+0x40>
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c1d6:	d00f      	beq.n	800c1f8 <TIM_Base_SetConfig+0x40>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	4a43      	ldr	r2, [pc, #268]	@ (800c2e8 <TIM_Base_SetConfig+0x130>)
 800c1dc:	4293      	cmp	r3, r2
 800c1de:	d00b      	beq.n	800c1f8 <TIM_Base_SetConfig+0x40>
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	4a42      	ldr	r2, [pc, #264]	@ (800c2ec <TIM_Base_SetConfig+0x134>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d007      	beq.n	800c1f8 <TIM_Base_SetConfig+0x40>
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	4a41      	ldr	r2, [pc, #260]	@ (800c2f0 <TIM_Base_SetConfig+0x138>)
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	d003      	beq.n	800c1f8 <TIM_Base_SetConfig+0x40>
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	4a40      	ldr	r2, [pc, #256]	@ (800c2f4 <TIM_Base_SetConfig+0x13c>)
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d108      	bne.n	800c20a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c1fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c200:	683b      	ldr	r3, [r7, #0]
 800c202:	685b      	ldr	r3, [r3, #4]
 800c204:	68fa      	ldr	r2, [r7, #12]
 800c206:	4313      	orrs	r3, r2
 800c208:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	4a35      	ldr	r2, [pc, #212]	@ (800c2e4 <TIM_Base_SetConfig+0x12c>)
 800c20e:	4293      	cmp	r3, r2
 800c210:	d01f      	beq.n	800c252 <TIM_Base_SetConfig+0x9a>
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c218:	d01b      	beq.n	800c252 <TIM_Base_SetConfig+0x9a>
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	4a32      	ldr	r2, [pc, #200]	@ (800c2e8 <TIM_Base_SetConfig+0x130>)
 800c21e:	4293      	cmp	r3, r2
 800c220:	d017      	beq.n	800c252 <TIM_Base_SetConfig+0x9a>
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	4a31      	ldr	r2, [pc, #196]	@ (800c2ec <TIM_Base_SetConfig+0x134>)
 800c226:	4293      	cmp	r3, r2
 800c228:	d013      	beq.n	800c252 <TIM_Base_SetConfig+0x9a>
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	4a30      	ldr	r2, [pc, #192]	@ (800c2f0 <TIM_Base_SetConfig+0x138>)
 800c22e:	4293      	cmp	r3, r2
 800c230:	d00f      	beq.n	800c252 <TIM_Base_SetConfig+0x9a>
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	4a2f      	ldr	r2, [pc, #188]	@ (800c2f4 <TIM_Base_SetConfig+0x13c>)
 800c236:	4293      	cmp	r3, r2
 800c238:	d00b      	beq.n	800c252 <TIM_Base_SetConfig+0x9a>
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	4a2e      	ldr	r2, [pc, #184]	@ (800c2f8 <TIM_Base_SetConfig+0x140>)
 800c23e:	4293      	cmp	r3, r2
 800c240:	d007      	beq.n	800c252 <TIM_Base_SetConfig+0x9a>
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	4a2d      	ldr	r2, [pc, #180]	@ (800c2fc <TIM_Base_SetConfig+0x144>)
 800c246:	4293      	cmp	r3, r2
 800c248:	d003      	beq.n	800c252 <TIM_Base_SetConfig+0x9a>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	4a2c      	ldr	r2, [pc, #176]	@ (800c300 <TIM_Base_SetConfig+0x148>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d108      	bne.n	800c264 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c258:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	68db      	ldr	r3, [r3, #12]
 800c25e:	68fa      	ldr	r2, [r7, #12]
 800c260:	4313      	orrs	r3, r2
 800c262:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	695b      	ldr	r3, [r3, #20]
 800c26e:	4313      	orrs	r3, r2
 800c270:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	68fa      	ldr	r2, [r7, #12]
 800c276:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	689a      	ldr	r2, [r3, #8]
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	681a      	ldr	r2, [r3, #0]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	4a16      	ldr	r2, [pc, #88]	@ (800c2e4 <TIM_Base_SetConfig+0x12c>)
 800c28c:	4293      	cmp	r3, r2
 800c28e:	d00f      	beq.n	800c2b0 <TIM_Base_SetConfig+0xf8>
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	4a18      	ldr	r2, [pc, #96]	@ (800c2f4 <TIM_Base_SetConfig+0x13c>)
 800c294:	4293      	cmp	r3, r2
 800c296:	d00b      	beq.n	800c2b0 <TIM_Base_SetConfig+0xf8>
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	4a17      	ldr	r2, [pc, #92]	@ (800c2f8 <TIM_Base_SetConfig+0x140>)
 800c29c:	4293      	cmp	r3, r2
 800c29e:	d007      	beq.n	800c2b0 <TIM_Base_SetConfig+0xf8>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	4a16      	ldr	r2, [pc, #88]	@ (800c2fc <TIM_Base_SetConfig+0x144>)
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d003      	beq.n	800c2b0 <TIM_Base_SetConfig+0xf8>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	4a15      	ldr	r2, [pc, #84]	@ (800c300 <TIM_Base_SetConfig+0x148>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d103      	bne.n	800c2b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c2b0:	683b      	ldr	r3, [r7, #0]
 800c2b2:	691a      	ldr	r2, [r3, #16]
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	2201      	movs	r2, #1
 800c2bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	691b      	ldr	r3, [r3, #16]
 800c2c2:	f003 0301 	and.w	r3, r3, #1
 800c2c6:	2b01      	cmp	r3, #1
 800c2c8:	d105      	bne.n	800c2d6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	691b      	ldr	r3, [r3, #16]
 800c2ce:	f023 0201 	bic.w	r2, r3, #1
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	611a      	str	r2, [r3, #16]
  }
}
 800c2d6:	bf00      	nop
 800c2d8:	3714      	adds	r7, #20
 800c2da:	46bd      	mov	sp, r7
 800c2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2e0:	4770      	bx	lr
 800c2e2:	bf00      	nop
 800c2e4:	40010000 	.word	0x40010000
 800c2e8:	40000400 	.word	0x40000400
 800c2ec:	40000800 	.word	0x40000800
 800c2f0:	40000c00 	.word	0x40000c00
 800c2f4:	40010400 	.word	0x40010400
 800c2f8:	40014000 	.word	0x40014000
 800c2fc:	40014400 	.word	0x40014400
 800c300:	40014800 	.word	0x40014800

0800c304 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c304:	b480      	push	{r7}
 800c306:	b087      	sub	sp, #28
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
 800c30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6a1b      	ldr	r3, [r3, #32]
 800c312:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	6a1b      	ldr	r3, [r3, #32]
 800c318:	f023 0201 	bic.w	r2, r3, #1
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	685b      	ldr	r3, [r3, #4]
 800c324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	699b      	ldr	r3, [r3, #24]
 800c32a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c32c:	68fa      	ldr	r2, [r7, #12]
 800c32e:	4b37      	ldr	r3, [pc, #220]	@ (800c40c <TIM_OC1_SetConfig+0x108>)
 800c330:	4013      	ands	r3, r2
 800c332:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f023 0303 	bic.w	r3, r3, #3
 800c33a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	68fa      	ldr	r2, [r7, #12]
 800c342:	4313      	orrs	r3, r2
 800c344:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	f023 0302 	bic.w	r3, r3, #2
 800c34c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c34e:	683b      	ldr	r3, [r7, #0]
 800c350:	689b      	ldr	r3, [r3, #8]
 800c352:	697a      	ldr	r2, [r7, #20]
 800c354:	4313      	orrs	r3, r2
 800c356:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	4a2d      	ldr	r2, [pc, #180]	@ (800c410 <TIM_OC1_SetConfig+0x10c>)
 800c35c:	4293      	cmp	r3, r2
 800c35e:	d00f      	beq.n	800c380 <TIM_OC1_SetConfig+0x7c>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	4a2c      	ldr	r2, [pc, #176]	@ (800c414 <TIM_OC1_SetConfig+0x110>)
 800c364:	4293      	cmp	r3, r2
 800c366:	d00b      	beq.n	800c380 <TIM_OC1_SetConfig+0x7c>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	4a2b      	ldr	r2, [pc, #172]	@ (800c418 <TIM_OC1_SetConfig+0x114>)
 800c36c:	4293      	cmp	r3, r2
 800c36e:	d007      	beq.n	800c380 <TIM_OC1_SetConfig+0x7c>
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	4a2a      	ldr	r2, [pc, #168]	@ (800c41c <TIM_OC1_SetConfig+0x118>)
 800c374:	4293      	cmp	r3, r2
 800c376:	d003      	beq.n	800c380 <TIM_OC1_SetConfig+0x7c>
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	4a29      	ldr	r2, [pc, #164]	@ (800c420 <TIM_OC1_SetConfig+0x11c>)
 800c37c:	4293      	cmp	r3, r2
 800c37e:	d10c      	bne.n	800c39a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	f023 0308 	bic.w	r3, r3, #8
 800c386:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	68db      	ldr	r3, [r3, #12]
 800c38c:	697a      	ldr	r2, [r7, #20]
 800c38e:	4313      	orrs	r3, r2
 800c390:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	f023 0304 	bic.w	r3, r3, #4
 800c398:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	4a1c      	ldr	r2, [pc, #112]	@ (800c410 <TIM_OC1_SetConfig+0x10c>)
 800c39e:	4293      	cmp	r3, r2
 800c3a0:	d00f      	beq.n	800c3c2 <TIM_OC1_SetConfig+0xbe>
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	4a1b      	ldr	r2, [pc, #108]	@ (800c414 <TIM_OC1_SetConfig+0x110>)
 800c3a6:	4293      	cmp	r3, r2
 800c3a8:	d00b      	beq.n	800c3c2 <TIM_OC1_SetConfig+0xbe>
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	4a1a      	ldr	r2, [pc, #104]	@ (800c418 <TIM_OC1_SetConfig+0x114>)
 800c3ae:	4293      	cmp	r3, r2
 800c3b0:	d007      	beq.n	800c3c2 <TIM_OC1_SetConfig+0xbe>
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	4a19      	ldr	r2, [pc, #100]	@ (800c41c <TIM_OC1_SetConfig+0x118>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d003      	beq.n	800c3c2 <TIM_OC1_SetConfig+0xbe>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	4a18      	ldr	r2, [pc, #96]	@ (800c420 <TIM_OC1_SetConfig+0x11c>)
 800c3be:	4293      	cmp	r3, r2
 800c3c0:	d111      	bne.n	800c3e6 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c3c2:	693b      	ldr	r3, [r7, #16]
 800c3c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c3c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c3ca:	693b      	ldr	r3, [r7, #16]
 800c3cc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c3d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	695b      	ldr	r3, [r3, #20]
 800c3d6:	693a      	ldr	r2, [r7, #16]
 800c3d8:	4313      	orrs	r3, r2
 800c3da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	699b      	ldr	r3, [r3, #24]
 800c3e0:	693a      	ldr	r2, [r7, #16]
 800c3e2:	4313      	orrs	r3, r2
 800c3e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	693a      	ldr	r2, [r7, #16]
 800c3ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	68fa      	ldr	r2, [r7, #12]
 800c3f0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	685a      	ldr	r2, [r3, #4]
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	697a      	ldr	r2, [r7, #20]
 800c3fe:	621a      	str	r2, [r3, #32]
}
 800c400:	bf00      	nop
 800c402:	371c      	adds	r7, #28
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr
 800c40c:	fffeff8f 	.word	0xfffeff8f
 800c410:	40010000 	.word	0x40010000
 800c414:	40010400 	.word	0x40010400
 800c418:	40014000 	.word	0x40014000
 800c41c:	40014400 	.word	0x40014400
 800c420:	40014800 	.word	0x40014800

0800c424 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c424:	b480      	push	{r7}
 800c426:	b087      	sub	sp, #28
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
 800c42c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6a1b      	ldr	r3, [r3, #32]
 800c432:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6a1b      	ldr	r3, [r3, #32]
 800c438:	f023 0210 	bic.w	r2, r3, #16
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	685b      	ldr	r3, [r3, #4]
 800c444:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	699b      	ldr	r3, [r3, #24]
 800c44a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c44c:	68fa      	ldr	r2, [r7, #12]
 800c44e:	4b34      	ldr	r3, [pc, #208]	@ (800c520 <TIM_OC2_SetConfig+0xfc>)
 800c450:	4013      	ands	r3, r2
 800c452:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c45a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c45c:	683b      	ldr	r3, [r7, #0]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	021b      	lsls	r3, r3, #8
 800c462:	68fa      	ldr	r2, [r7, #12]
 800c464:	4313      	orrs	r3, r2
 800c466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	f023 0320 	bic.w	r3, r3, #32
 800c46e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	689b      	ldr	r3, [r3, #8]
 800c474:	011b      	lsls	r3, r3, #4
 800c476:	697a      	ldr	r2, [r7, #20]
 800c478:	4313      	orrs	r3, r2
 800c47a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	4a29      	ldr	r2, [pc, #164]	@ (800c524 <TIM_OC2_SetConfig+0x100>)
 800c480:	4293      	cmp	r3, r2
 800c482:	d003      	beq.n	800c48c <TIM_OC2_SetConfig+0x68>
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	4a28      	ldr	r2, [pc, #160]	@ (800c528 <TIM_OC2_SetConfig+0x104>)
 800c488:	4293      	cmp	r3, r2
 800c48a:	d10d      	bne.n	800c4a8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c48c:	697b      	ldr	r3, [r7, #20]
 800c48e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c492:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	68db      	ldr	r3, [r3, #12]
 800c498:	011b      	lsls	r3, r3, #4
 800c49a:	697a      	ldr	r2, [r7, #20]
 800c49c:	4313      	orrs	r3, r2
 800c49e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c4a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	4a1e      	ldr	r2, [pc, #120]	@ (800c524 <TIM_OC2_SetConfig+0x100>)
 800c4ac:	4293      	cmp	r3, r2
 800c4ae:	d00f      	beq.n	800c4d0 <TIM_OC2_SetConfig+0xac>
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	4a1d      	ldr	r2, [pc, #116]	@ (800c528 <TIM_OC2_SetConfig+0x104>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d00b      	beq.n	800c4d0 <TIM_OC2_SetConfig+0xac>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	4a1c      	ldr	r2, [pc, #112]	@ (800c52c <TIM_OC2_SetConfig+0x108>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d007      	beq.n	800c4d0 <TIM_OC2_SetConfig+0xac>
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	4a1b      	ldr	r2, [pc, #108]	@ (800c530 <TIM_OC2_SetConfig+0x10c>)
 800c4c4:	4293      	cmp	r3, r2
 800c4c6:	d003      	beq.n	800c4d0 <TIM_OC2_SetConfig+0xac>
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	4a1a      	ldr	r2, [pc, #104]	@ (800c534 <TIM_OC2_SetConfig+0x110>)
 800c4cc:	4293      	cmp	r3, r2
 800c4ce:	d113      	bne.n	800c4f8 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c4d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c4de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c4e0:	683b      	ldr	r3, [r7, #0]
 800c4e2:	695b      	ldr	r3, [r3, #20]
 800c4e4:	009b      	lsls	r3, r3, #2
 800c4e6:	693a      	ldr	r2, [r7, #16]
 800c4e8:	4313      	orrs	r3, r2
 800c4ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	699b      	ldr	r3, [r3, #24]
 800c4f0:	009b      	lsls	r3, r3, #2
 800c4f2:	693a      	ldr	r2, [r7, #16]
 800c4f4:	4313      	orrs	r3, r2
 800c4f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	693a      	ldr	r2, [r7, #16]
 800c4fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	68fa      	ldr	r2, [r7, #12]
 800c502:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	685a      	ldr	r2, [r3, #4]
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	697a      	ldr	r2, [r7, #20]
 800c510:	621a      	str	r2, [r3, #32]
}
 800c512:	bf00      	nop
 800c514:	371c      	adds	r7, #28
 800c516:	46bd      	mov	sp, r7
 800c518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c51c:	4770      	bx	lr
 800c51e:	bf00      	nop
 800c520:	feff8fff 	.word	0xfeff8fff
 800c524:	40010000 	.word	0x40010000
 800c528:	40010400 	.word	0x40010400
 800c52c:	40014000 	.word	0x40014000
 800c530:	40014400 	.word	0x40014400
 800c534:	40014800 	.word	0x40014800

0800c538 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c538:	b480      	push	{r7}
 800c53a:	b087      	sub	sp, #28
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6a1b      	ldr	r3, [r3, #32]
 800c546:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	6a1b      	ldr	r3, [r3, #32]
 800c54c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	69db      	ldr	r3, [r3, #28]
 800c55e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800c560:	68fa      	ldr	r2, [r7, #12]
 800c562:	4b33      	ldr	r3, [pc, #204]	@ (800c630 <TIM_OC3_SetConfig+0xf8>)
 800c564:	4013      	ands	r3, r2
 800c566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800c568:	68fb      	ldr	r3, [r7, #12]
 800c56a:	f023 0303 	bic.w	r3, r3, #3
 800c56e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	68fa      	ldr	r2, [r7, #12]
 800c576:	4313      	orrs	r3, r2
 800c578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800c57a:	697b      	ldr	r3, [r7, #20]
 800c57c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c580:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800c582:	683b      	ldr	r3, [r7, #0]
 800c584:	689b      	ldr	r3, [r3, #8]
 800c586:	021b      	lsls	r3, r3, #8
 800c588:	697a      	ldr	r2, [r7, #20]
 800c58a:	4313      	orrs	r3, r2
 800c58c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	4a28      	ldr	r2, [pc, #160]	@ (800c634 <TIM_OC3_SetConfig+0xfc>)
 800c592:	4293      	cmp	r3, r2
 800c594:	d003      	beq.n	800c59e <TIM_OC3_SetConfig+0x66>
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	4a27      	ldr	r2, [pc, #156]	@ (800c638 <TIM_OC3_SetConfig+0x100>)
 800c59a:	4293      	cmp	r3, r2
 800c59c:	d10d      	bne.n	800c5ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c5a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	68db      	ldr	r3, [r3, #12]
 800c5aa:	021b      	lsls	r3, r3, #8
 800c5ac:	697a      	ldr	r2, [r7, #20]
 800c5ae:	4313      	orrs	r3, r2
 800c5b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c5b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	4a1d      	ldr	r2, [pc, #116]	@ (800c634 <TIM_OC3_SetConfig+0xfc>)
 800c5be:	4293      	cmp	r3, r2
 800c5c0:	d00f      	beq.n	800c5e2 <TIM_OC3_SetConfig+0xaa>
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	4a1c      	ldr	r2, [pc, #112]	@ (800c638 <TIM_OC3_SetConfig+0x100>)
 800c5c6:	4293      	cmp	r3, r2
 800c5c8:	d00b      	beq.n	800c5e2 <TIM_OC3_SetConfig+0xaa>
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	4a1b      	ldr	r2, [pc, #108]	@ (800c63c <TIM_OC3_SetConfig+0x104>)
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	d007      	beq.n	800c5e2 <TIM_OC3_SetConfig+0xaa>
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	4a1a      	ldr	r2, [pc, #104]	@ (800c640 <TIM_OC3_SetConfig+0x108>)
 800c5d6:	4293      	cmp	r3, r2
 800c5d8:	d003      	beq.n	800c5e2 <TIM_OC3_SetConfig+0xaa>
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	4a19      	ldr	r2, [pc, #100]	@ (800c644 <TIM_OC3_SetConfig+0x10c>)
 800c5de:	4293      	cmp	r3, r2
 800c5e0:	d113      	bne.n	800c60a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c5e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c5f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	695b      	ldr	r3, [r3, #20]
 800c5f6:	011b      	lsls	r3, r3, #4
 800c5f8:	693a      	ldr	r2, [r7, #16]
 800c5fa:	4313      	orrs	r3, r2
 800c5fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	699b      	ldr	r3, [r3, #24]
 800c602:	011b      	lsls	r3, r3, #4
 800c604:	693a      	ldr	r2, [r7, #16]
 800c606:	4313      	orrs	r3, r2
 800c608:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	693a      	ldr	r2, [r7, #16]
 800c60e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	68fa      	ldr	r2, [r7, #12]
 800c614:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	685a      	ldr	r2, [r3, #4]
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	697a      	ldr	r2, [r7, #20]
 800c622:	621a      	str	r2, [r3, #32]
}
 800c624:	bf00      	nop
 800c626:	371c      	adds	r7, #28
 800c628:	46bd      	mov	sp, r7
 800c62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62e:	4770      	bx	lr
 800c630:	fffeff8f 	.word	0xfffeff8f
 800c634:	40010000 	.word	0x40010000
 800c638:	40010400 	.word	0x40010400
 800c63c:	40014000 	.word	0x40014000
 800c640:	40014400 	.word	0x40014400
 800c644:	40014800 	.word	0x40014800

0800c648 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c648:	b480      	push	{r7}
 800c64a:	b087      	sub	sp, #28
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	6a1b      	ldr	r3, [r3, #32]
 800c656:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6a1b      	ldr	r3, [r3, #32]
 800c65c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	685b      	ldr	r3, [r3, #4]
 800c668:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	69db      	ldr	r3, [r3, #28]
 800c66e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c670:	68fa      	ldr	r2, [r7, #12]
 800c672:	4b24      	ldr	r3, [pc, #144]	@ (800c704 <TIM_OC4_SetConfig+0xbc>)
 800c674:	4013      	ands	r3, r2
 800c676:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c67e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	021b      	lsls	r3, r3, #8
 800c686:	68fa      	ldr	r2, [r7, #12]
 800c688:	4313      	orrs	r3, r2
 800c68a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c68c:	693b      	ldr	r3, [r7, #16]
 800c68e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800c692:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	689b      	ldr	r3, [r3, #8]
 800c698:	031b      	lsls	r3, r3, #12
 800c69a:	693a      	ldr	r2, [r7, #16]
 800c69c:	4313      	orrs	r3, r2
 800c69e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	4a19      	ldr	r2, [pc, #100]	@ (800c708 <TIM_OC4_SetConfig+0xc0>)
 800c6a4:	4293      	cmp	r3, r2
 800c6a6:	d00f      	beq.n	800c6c8 <TIM_OC4_SetConfig+0x80>
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	4a18      	ldr	r2, [pc, #96]	@ (800c70c <TIM_OC4_SetConfig+0xc4>)
 800c6ac:	4293      	cmp	r3, r2
 800c6ae:	d00b      	beq.n	800c6c8 <TIM_OC4_SetConfig+0x80>
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	4a17      	ldr	r2, [pc, #92]	@ (800c710 <TIM_OC4_SetConfig+0xc8>)
 800c6b4:	4293      	cmp	r3, r2
 800c6b6:	d007      	beq.n	800c6c8 <TIM_OC4_SetConfig+0x80>
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	4a16      	ldr	r2, [pc, #88]	@ (800c714 <TIM_OC4_SetConfig+0xcc>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d003      	beq.n	800c6c8 <TIM_OC4_SetConfig+0x80>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	4a15      	ldr	r2, [pc, #84]	@ (800c718 <TIM_OC4_SetConfig+0xd0>)
 800c6c4:	4293      	cmp	r3, r2
 800c6c6:	d109      	bne.n	800c6dc <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800c6ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c6d0:	683b      	ldr	r3, [r7, #0]
 800c6d2:	695b      	ldr	r3, [r3, #20]
 800c6d4:	019b      	lsls	r3, r3, #6
 800c6d6:	697a      	ldr	r2, [r7, #20]
 800c6d8:	4313      	orrs	r3, r2
 800c6da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	697a      	ldr	r2, [r7, #20]
 800c6e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	68fa      	ldr	r2, [r7, #12]
 800c6e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c6e8:	683b      	ldr	r3, [r7, #0]
 800c6ea:	685a      	ldr	r2, [r3, #4]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	693a      	ldr	r2, [r7, #16]
 800c6f4:	621a      	str	r2, [r3, #32]
}
 800c6f6:	bf00      	nop
 800c6f8:	371c      	adds	r7, #28
 800c6fa:	46bd      	mov	sp, r7
 800c6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c700:	4770      	bx	lr
 800c702:	bf00      	nop
 800c704:	feff8fff 	.word	0xfeff8fff
 800c708:	40010000 	.word	0x40010000
 800c70c:	40010400 	.word	0x40010400
 800c710:	40014000 	.word	0x40014000
 800c714:	40014400 	.word	0x40014400
 800c718:	40014800 	.word	0x40014800

0800c71c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c71c:	b480      	push	{r7}
 800c71e:	b087      	sub	sp, #28
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6a1b      	ldr	r3, [r3, #32]
 800c72a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	6a1b      	ldr	r3, [r3, #32]
 800c730:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	685b      	ldr	r3, [r3, #4]
 800c73c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c744:	68fa      	ldr	r2, [r7, #12]
 800c746:	4b21      	ldr	r3, [pc, #132]	@ (800c7cc <TIM_OC5_SetConfig+0xb0>)
 800c748:	4013      	ands	r3, r2
 800c74a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	68fa      	ldr	r2, [r7, #12]
 800c752:	4313      	orrs	r3, r2
 800c754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800c75c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c75e:	683b      	ldr	r3, [r7, #0]
 800c760:	689b      	ldr	r3, [r3, #8]
 800c762:	041b      	lsls	r3, r3, #16
 800c764:	693a      	ldr	r2, [r7, #16]
 800c766:	4313      	orrs	r3, r2
 800c768:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	4a18      	ldr	r2, [pc, #96]	@ (800c7d0 <TIM_OC5_SetConfig+0xb4>)
 800c76e:	4293      	cmp	r3, r2
 800c770:	d00f      	beq.n	800c792 <TIM_OC5_SetConfig+0x76>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	4a17      	ldr	r2, [pc, #92]	@ (800c7d4 <TIM_OC5_SetConfig+0xb8>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d00b      	beq.n	800c792 <TIM_OC5_SetConfig+0x76>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	4a16      	ldr	r2, [pc, #88]	@ (800c7d8 <TIM_OC5_SetConfig+0xbc>)
 800c77e:	4293      	cmp	r3, r2
 800c780:	d007      	beq.n	800c792 <TIM_OC5_SetConfig+0x76>
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	4a15      	ldr	r2, [pc, #84]	@ (800c7dc <TIM_OC5_SetConfig+0xc0>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d003      	beq.n	800c792 <TIM_OC5_SetConfig+0x76>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	4a14      	ldr	r2, [pc, #80]	@ (800c7e0 <TIM_OC5_SetConfig+0xc4>)
 800c78e:	4293      	cmp	r3, r2
 800c790:	d109      	bne.n	800c7a6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c798:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	695b      	ldr	r3, [r3, #20]
 800c79e:	021b      	lsls	r3, r3, #8
 800c7a0:	697a      	ldr	r2, [r7, #20]
 800c7a2:	4313      	orrs	r3, r2
 800c7a4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	697a      	ldr	r2, [r7, #20]
 800c7aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	68fa      	ldr	r2, [r7, #12]
 800c7b0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	685a      	ldr	r2, [r3, #4]
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	693a      	ldr	r2, [r7, #16]
 800c7be:	621a      	str	r2, [r3, #32]
}
 800c7c0:	bf00      	nop
 800c7c2:	371c      	adds	r7, #28
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr
 800c7cc:	fffeff8f 	.word	0xfffeff8f
 800c7d0:	40010000 	.word	0x40010000
 800c7d4:	40010400 	.word	0x40010400
 800c7d8:	40014000 	.word	0x40014000
 800c7dc:	40014400 	.word	0x40014400
 800c7e0:	40014800 	.word	0x40014800

0800c7e4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800c7e4:	b480      	push	{r7}
 800c7e6:	b087      	sub	sp, #28
 800c7e8:	af00      	add	r7, sp, #0
 800c7ea:	6078      	str	r0, [r7, #4]
 800c7ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	6a1b      	ldr	r3, [r3, #32]
 800c7f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	6a1b      	ldr	r3, [r3, #32]
 800c7f8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	685b      	ldr	r3, [r3, #4]
 800c804:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c80a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c80c:	68fa      	ldr	r2, [r7, #12]
 800c80e:	4b22      	ldr	r3, [pc, #136]	@ (800c898 <TIM_OC6_SetConfig+0xb4>)
 800c810:	4013      	ands	r3, r2
 800c812:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	021b      	lsls	r3, r3, #8
 800c81a:	68fa      	ldr	r2, [r7, #12]
 800c81c:	4313      	orrs	r3, r2
 800c81e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c820:	693b      	ldr	r3, [r7, #16]
 800c822:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c826:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	689b      	ldr	r3, [r3, #8]
 800c82c:	051b      	lsls	r3, r3, #20
 800c82e:	693a      	ldr	r2, [r7, #16]
 800c830:	4313      	orrs	r3, r2
 800c832:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	4a19      	ldr	r2, [pc, #100]	@ (800c89c <TIM_OC6_SetConfig+0xb8>)
 800c838:	4293      	cmp	r3, r2
 800c83a:	d00f      	beq.n	800c85c <TIM_OC6_SetConfig+0x78>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	4a18      	ldr	r2, [pc, #96]	@ (800c8a0 <TIM_OC6_SetConfig+0xbc>)
 800c840:	4293      	cmp	r3, r2
 800c842:	d00b      	beq.n	800c85c <TIM_OC6_SetConfig+0x78>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	4a17      	ldr	r2, [pc, #92]	@ (800c8a4 <TIM_OC6_SetConfig+0xc0>)
 800c848:	4293      	cmp	r3, r2
 800c84a:	d007      	beq.n	800c85c <TIM_OC6_SetConfig+0x78>
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	4a16      	ldr	r2, [pc, #88]	@ (800c8a8 <TIM_OC6_SetConfig+0xc4>)
 800c850:	4293      	cmp	r3, r2
 800c852:	d003      	beq.n	800c85c <TIM_OC6_SetConfig+0x78>
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	4a15      	ldr	r2, [pc, #84]	@ (800c8ac <TIM_OC6_SetConfig+0xc8>)
 800c858:	4293      	cmp	r3, r2
 800c85a:	d109      	bne.n	800c870 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c85c:	697b      	ldr	r3, [r7, #20]
 800c85e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800c862:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c864:	683b      	ldr	r3, [r7, #0]
 800c866:	695b      	ldr	r3, [r3, #20]
 800c868:	029b      	lsls	r3, r3, #10
 800c86a:	697a      	ldr	r2, [r7, #20]
 800c86c:	4313      	orrs	r3, r2
 800c86e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	697a      	ldr	r2, [r7, #20]
 800c874:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	68fa      	ldr	r2, [r7, #12]
 800c87a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c87c:	683b      	ldr	r3, [r7, #0]
 800c87e:	685a      	ldr	r2, [r3, #4]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	693a      	ldr	r2, [r7, #16]
 800c888:	621a      	str	r2, [r3, #32]
}
 800c88a:	bf00      	nop
 800c88c:	371c      	adds	r7, #28
 800c88e:	46bd      	mov	sp, r7
 800c890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c894:	4770      	bx	lr
 800c896:	bf00      	nop
 800c898:	feff8fff 	.word	0xfeff8fff
 800c89c:	40010000 	.word	0x40010000
 800c8a0:	40010400 	.word	0x40010400
 800c8a4:	40014000 	.word	0x40014000
 800c8a8:	40014400 	.word	0x40014400
 800c8ac:	40014800 	.word	0x40014800

0800c8b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	b087      	sub	sp, #28
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	60f8      	str	r0, [r7, #12]
 800c8b8:	60b9      	str	r1, [r7, #8]
 800c8ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	6a1b      	ldr	r3, [r3, #32]
 800c8c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	6a1b      	ldr	r3, [r3, #32]
 800c8c6:	f023 0201 	bic.w	r2, r3, #1
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	699b      	ldr	r3, [r3, #24]
 800c8d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c8da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	011b      	lsls	r3, r3, #4
 800c8e0:	693a      	ldr	r2, [r7, #16]
 800c8e2:	4313      	orrs	r3, r2
 800c8e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	f023 030a 	bic.w	r3, r3, #10
 800c8ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c8ee:	697a      	ldr	r2, [r7, #20]
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	4313      	orrs	r3, r2
 800c8f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	693a      	ldr	r2, [r7, #16]
 800c8fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	697a      	ldr	r2, [r7, #20]
 800c900:	621a      	str	r2, [r3, #32]
}
 800c902:	bf00      	nop
 800c904:	371c      	adds	r7, #28
 800c906:	46bd      	mov	sp, r7
 800c908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90c:	4770      	bx	lr

0800c90e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c90e:	b480      	push	{r7}
 800c910:	b087      	sub	sp, #28
 800c912:	af00      	add	r7, sp, #0
 800c914:	60f8      	str	r0, [r7, #12]
 800c916:	60b9      	str	r1, [r7, #8]
 800c918:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	6a1b      	ldr	r3, [r3, #32]
 800c91e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	6a1b      	ldr	r3, [r3, #32]
 800c924:	f023 0210 	bic.w	r2, r3, #16
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	699b      	ldr	r3, [r3, #24]
 800c930:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c938:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	031b      	lsls	r3, r3, #12
 800c93e:	693a      	ldr	r2, [r7, #16]
 800c940:	4313      	orrs	r3, r2
 800c942:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c94a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	011b      	lsls	r3, r3, #4
 800c950:	697a      	ldr	r2, [r7, #20]
 800c952:	4313      	orrs	r3, r2
 800c954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	693a      	ldr	r2, [r7, #16]
 800c95a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	697a      	ldr	r2, [r7, #20]
 800c960:	621a      	str	r2, [r3, #32]
}
 800c962:	bf00      	nop
 800c964:	371c      	adds	r7, #28
 800c966:	46bd      	mov	sp, r7
 800c968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96c:	4770      	bx	lr
	...

0800c970 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c970:	b480      	push	{r7}
 800c972:	b085      	sub	sp, #20
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
 800c978:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	689b      	ldr	r3, [r3, #8]
 800c97e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c980:	68fa      	ldr	r2, [r7, #12]
 800c982:	4b09      	ldr	r3, [pc, #36]	@ (800c9a8 <TIM_ITRx_SetConfig+0x38>)
 800c984:	4013      	ands	r3, r2
 800c986:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c988:	683a      	ldr	r2, [r7, #0]
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	4313      	orrs	r3, r2
 800c98e:	f043 0307 	orr.w	r3, r3, #7
 800c992:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	68fa      	ldr	r2, [r7, #12]
 800c998:	609a      	str	r2, [r3, #8]
}
 800c99a:	bf00      	nop
 800c99c:	3714      	adds	r7, #20
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a4:	4770      	bx	lr
 800c9a6:	bf00      	nop
 800c9a8:	ffcfff8f 	.word	0xffcfff8f

0800c9ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b087      	sub	sp, #28
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	60f8      	str	r0, [r7, #12]
 800c9b4:	60b9      	str	r1, [r7, #8]
 800c9b6:	607a      	str	r2, [r7, #4]
 800c9b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	689b      	ldr	r3, [r3, #8]
 800c9be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c9c0:	697b      	ldr	r3, [r7, #20]
 800c9c2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c9c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c9c8:	683b      	ldr	r3, [r7, #0]
 800c9ca:	021a      	lsls	r2, r3, #8
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	431a      	orrs	r2, r3
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	4313      	orrs	r3, r2
 800c9d4:	697a      	ldr	r2, [r7, #20]
 800c9d6:	4313      	orrs	r3, r2
 800c9d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	697a      	ldr	r2, [r7, #20]
 800c9de:	609a      	str	r2, [r3, #8]
}
 800c9e0:	bf00      	nop
 800c9e2:	371c      	adds	r7, #28
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr

0800c9ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c9ec:	b480      	push	{r7}
 800c9ee:	b087      	sub	sp, #28
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	60f8      	str	r0, [r7, #12]
 800c9f4:	60b9      	str	r1, [r7, #8]
 800c9f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c9f8:	68bb      	ldr	r3, [r7, #8]
 800c9fa:	f003 031f 	and.w	r3, r3, #31
 800c9fe:	2201      	movs	r2, #1
 800ca00:	fa02 f303 	lsl.w	r3, r2, r3
 800ca04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	6a1a      	ldr	r2, [r3, #32]
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	43db      	mvns	r3, r3
 800ca0e:	401a      	ands	r2, r3
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	6a1a      	ldr	r2, [r3, #32]
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	f003 031f 	and.w	r3, r3, #31
 800ca1e:	6879      	ldr	r1, [r7, #4]
 800ca20:	fa01 f303 	lsl.w	r3, r1, r3
 800ca24:	431a      	orrs	r2, r3
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	621a      	str	r2, [r3, #32]
}
 800ca2a:	bf00      	nop
 800ca2c:	371c      	adds	r7, #28
 800ca2e:	46bd      	mov	sp, r7
 800ca30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca34:	4770      	bx	lr
	...

0800ca38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ca38:	b480      	push	{r7}
 800ca3a:	b085      	sub	sp, #20
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
 800ca40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800ca48:	2b01      	cmp	r3, #1
 800ca4a:	d101      	bne.n	800ca50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ca4c:	2302      	movs	r3, #2
 800ca4e:	e06d      	b.n	800cb2c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2201      	movs	r2, #1
 800ca54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2202      	movs	r2, #2
 800ca5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	685b      	ldr	r3, [r3, #4]
 800ca66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	689b      	ldr	r3, [r3, #8]
 800ca6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	681b      	ldr	r3, [r3, #0]
 800ca74:	4a30      	ldr	r2, [pc, #192]	@ (800cb38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d004      	beq.n	800ca84 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	681b      	ldr	r3, [r3, #0]
 800ca7e:	4a2f      	ldr	r2, [pc, #188]	@ (800cb3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d108      	bne.n	800ca96 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800ca8a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	68fa      	ldr	r2, [r7, #12]
 800ca92:	4313      	orrs	r3, r2
 800ca94:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ca9c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ca9e:	683b      	ldr	r3, [r7, #0]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	68fa      	ldr	r2, [r7, #12]
 800caa4:	4313      	orrs	r3, r2
 800caa6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	68fa      	ldr	r2, [r7, #12]
 800caae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	4a20      	ldr	r2, [pc, #128]	@ (800cb38 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cab6:	4293      	cmp	r3, r2
 800cab8:	d022      	beq.n	800cb00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cac2:	d01d      	beq.n	800cb00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	4a1d      	ldr	r2, [pc, #116]	@ (800cb40 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d018      	beq.n	800cb00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	4a1c      	ldr	r2, [pc, #112]	@ (800cb44 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cad4:	4293      	cmp	r3, r2
 800cad6:	d013      	beq.n	800cb00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	4a1a      	ldr	r2, [pc, #104]	@ (800cb48 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cade:	4293      	cmp	r3, r2
 800cae0:	d00e      	beq.n	800cb00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	4a15      	ldr	r2, [pc, #84]	@ (800cb3c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cae8:	4293      	cmp	r3, r2
 800caea:	d009      	beq.n	800cb00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	681b      	ldr	r3, [r3, #0]
 800caf0:	4a16      	ldr	r2, [pc, #88]	@ (800cb4c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800caf2:	4293      	cmp	r3, r2
 800caf4:	d004      	beq.n	800cb00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	4a15      	ldr	r2, [pc, #84]	@ (800cb50 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cafc:	4293      	cmp	r3, r2
 800cafe:	d10c      	bne.n	800cb1a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb06:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	689b      	ldr	r3, [r3, #8]
 800cb0c:	68ba      	ldr	r2, [r7, #8]
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	68ba      	ldr	r2, [r7, #8]
 800cb18:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	2201      	movs	r2, #1
 800cb1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2200      	movs	r2, #0
 800cb26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cb2a:	2300      	movs	r3, #0
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3714      	adds	r7, #20
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr
 800cb38:	40010000 	.word	0x40010000
 800cb3c:	40010400 	.word	0x40010400
 800cb40:	40000400 	.word	0x40000400
 800cb44:	40000800 	.word	0x40000800
 800cb48:	40000c00 	.word	0x40000c00
 800cb4c:	40001800 	.word	0x40001800
 800cb50:	40014000 	.word	0x40014000

0800cb54 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b083      	sub	sp, #12
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cb5c:	bf00      	nop
 800cb5e:	370c      	adds	r7, #12
 800cb60:	46bd      	mov	sp, r7
 800cb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb66:	4770      	bx	lr

0800cb68 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b083      	sub	sp, #12
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cb70:	bf00      	nop
 800cb72:	370c      	adds	r7, #12
 800cb74:	46bd      	mov	sp, r7
 800cb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb7a:	4770      	bx	lr

0800cb7c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b083      	sub	sp, #12
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cb84:	bf00      	nop
 800cb86:	370c      	adds	r7, #12
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8e:	4770      	bx	lr

0800cb90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b082      	sub	sp, #8
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d101      	bne.n	800cba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb9e:	2301      	movs	r3, #1
 800cba0:	e042      	b.n	800cc28 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d106      	bne.n	800cbba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2200      	movs	r2, #0
 800cbb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f000 f83b 	bl	800cc30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2224      	movs	r2, #36	@ 0x24
 800cbbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	681a      	ldr	r2, [r3, #0]
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	f022 0201 	bic.w	r2, r2, #1
 800cbd0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	d002      	beq.n	800cbe0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f000 fe28 	bl	800d830 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f000 f8bd 	bl	800cd60 <UART_SetConfig>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	2b01      	cmp	r3, #1
 800cbea:	d101      	bne.n	800cbf0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800cbec:	2301      	movs	r3, #1
 800cbee:	e01b      	b.n	800cc28 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	685a      	ldr	r2, [r3, #4]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cbfe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	681b      	ldr	r3, [r3, #0]
 800cc04:	689a      	ldr	r2, [r3, #8]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cc0e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	681a      	ldr	r2, [r3, #0]
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f042 0201 	orr.w	r2, r2, #1
 800cc1e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cc20:	6878      	ldr	r0, [r7, #4]
 800cc22:	f000 fea7 	bl	800d974 <UART_CheckIdleState>
 800cc26:	4603      	mov	r3, r0
}
 800cc28:	4618      	mov	r0, r3
 800cc2a:	3708      	adds	r7, #8
 800cc2c:	46bd      	mov	sp, r7
 800cc2e:	bd80      	pop	{r7, pc}

0800cc30 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800cc30:	b480      	push	{r7}
 800cc32:	b083      	sub	sp, #12
 800cc34:	af00      	add	r7, sp, #0
 800cc36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800cc38:	bf00      	nop
 800cc3a:	370c      	adds	r7, #12
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr

0800cc44 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b08a      	sub	sp, #40	@ 0x28
 800cc48:	af02      	add	r7, sp, #8
 800cc4a:	60f8      	str	r0, [r7, #12]
 800cc4c:	60b9      	str	r1, [r7, #8]
 800cc4e:	603b      	str	r3, [r7, #0]
 800cc50:	4613      	mov	r3, r2
 800cc52:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800cc5a:	2b20      	cmp	r3, #32
 800cc5c:	d17b      	bne.n	800cd56 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d002      	beq.n	800cc6a <HAL_UART_Transmit+0x26>
 800cc64:	88fb      	ldrh	r3, [r7, #6]
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d101      	bne.n	800cc6e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800cc6a:	2301      	movs	r3, #1
 800cc6c:	e074      	b.n	800cd58 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	2200      	movs	r2, #0
 800cc72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	2221      	movs	r2, #33	@ 0x21
 800cc7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cc7e:	f7f5 fe7d 	bl	800297c <HAL_GetTick>
 800cc82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	88fa      	ldrh	r2, [r7, #6]
 800cc88:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	88fa      	ldrh	r2, [r7, #6]
 800cc90:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	689b      	ldr	r3, [r3, #8]
 800cc98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc9c:	d108      	bne.n	800ccb0 <HAL_UART_Transmit+0x6c>
 800cc9e:	68fb      	ldr	r3, [r7, #12]
 800cca0:	691b      	ldr	r3, [r3, #16]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d104      	bne.n	800ccb0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cca6:	2300      	movs	r3, #0
 800cca8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ccaa:	68bb      	ldr	r3, [r7, #8]
 800ccac:	61bb      	str	r3, [r7, #24]
 800ccae:	e003      	b.n	800ccb8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ccb0:	68bb      	ldr	r3, [r7, #8]
 800ccb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ccb4:	2300      	movs	r3, #0
 800ccb6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ccb8:	e030      	b.n	800cd1c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ccba:	683b      	ldr	r3, [r7, #0]
 800ccbc:	9300      	str	r3, [sp, #0]
 800ccbe:	697b      	ldr	r3, [r7, #20]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	2180      	movs	r1, #128	@ 0x80
 800ccc4:	68f8      	ldr	r0, [r7, #12]
 800ccc6:	f000 feff 	bl	800dac8 <UART_WaitOnFlagUntilTimeout>
 800ccca:	4603      	mov	r3, r0
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d005      	beq.n	800ccdc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ccd0:	68fb      	ldr	r3, [r7, #12]
 800ccd2:	2220      	movs	r2, #32
 800ccd4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800ccd8:	2303      	movs	r3, #3
 800ccda:	e03d      	b.n	800cd58 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ccdc:	69fb      	ldr	r3, [r7, #28]
 800ccde:	2b00      	cmp	r3, #0
 800cce0:	d10b      	bne.n	800ccfa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800cce2:	69bb      	ldr	r3, [r7, #24]
 800cce4:	881b      	ldrh	r3, [r3, #0]
 800cce6:	461a      	mov	r2, r3
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ccf0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800ccf2:	69bb      	ldr	r3, [r7, #24]
 800ccf4:	3302      	adds	r3, #2
 800ccf6:	61bb      	str	r3, [r7, #24]
 800ccf8:	e007      	b.n	800cd0a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ccfa:	69fb      	ldr	r3, [r7, #28]
 800ccfc:	781a      	ldrb	r2, [r3, #0]
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800cd04:	69fb      	ldr	r3, [r7, #28]
 800cd06:	3301      	adds	r3, #1
 800cd08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cd10:	b29b      	uxth	r3, r3
 800cd12:	3b01      	subs	r3, #1
 800cd14:	b29a      	uxth	r2, r3
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800cd22:	b29b      	uxth	r3, r3
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d1c8      	bne.n	800ccba <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	9300      	str	r3, [sp, #0]
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	2200      	movs	r2, #0
 800cd30:	2140      	movs	r1, #64	@ 0x40
 800cd32:	68f8      	ldr	r0, [r7, #12]
 800cd34:	f000 fec8 	bl	800dac8 <UART_WaitOnFlagUntilTimeout>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d005      	beq.n	800cd4a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	2220      	movs	r2, #32
 800cd42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800cd46:	2303      	movs	r3, #3
 800cd48:	e006      	b.n	800cd58 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	2220      	movs	r2, #32
 800cd4e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800cd52:	2300      	movs	r3, #0
 800cd54:	e000      	b.n	800cd58 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800cd56:	2302      	movs	r3, #2
  }
}
 800cd58:	4618      	mov	r0, r3
 800cd5a:	3720      	adds	r7, #32
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	bd80      	pop	{r7, pc}

0800cd60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cd60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cd64:	b092      	sub	sp, #72	@ 0x48
 800cd66:	af00      	add	r7, sp, #0
 800cd68:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cd70:	697b      	ldr	r3, [r7, #20]
 800cd72:	689a      	ldr	r2, [r3, #8]
 800cd74:	697b      	ldr	r3, [r7, #20]
 800cd76:	691b      	ldr	r3, [r3, #16]
 800cd78:	431a      	orrs	r2, r3
 800cd7a:	697b      	ldr	r3, [r7, #20]
 800cd7c:	695b      	ldr	r3, [r3, #20]
 800cd7e:	431a      	orrs	r2, r3
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	69db      	ldr	r3, [r3, #28]
 800cd84:	4313      	orrs	r3, r2
 800cd86:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	681a      	ldr	r2, [r3, #0]
 800cd8e:	4bbe      	ldr	r3, [pc, #760]	@ (800d088 <UART_SetConfig+0x328>)
 800cd90:	4013      	ands	r3, r2
 800cd92:	697a      	ldr	r2, [r7, #20]
 800cd94:	6812      	ldr	r2, [r2, #0]
 800cd96:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cd98:	430b      	orrs	r3, r1
 800cd9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cd9c:	697b      	ldr	r3, [r7, #20]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	685b      	ldr	r3, [r3, #4]
 800cda2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cda6:	697b      	ldr	r3, [r7, #20]
 800cda8:	68da      	ldr	r2, [r3, #12]
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	430a      	orrs	r2, r1
 800cdb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cdb2:	697b      	ldr	r3, [r7, #20]
 800cdb4:	699b      	ldr	r3, [r3, #24]
 800cdb6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cdb8:	697b      	ldr	r3, [r7, #20]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	4ab3      	ldr	r2, [pc, #716]	@ (800d08c <UART_SetConfig+0x32c>)
 800cdbe:	4293      	cmp	r3, r2
 800cdc0:	d004      	beq.n	800cdcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	6a1b      	ldr	r3, [r3, #32]
 800cdc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cdc8:	4313      	orrs	r3, r2
 800cdca:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	681b      	ldr	r3, [r3, #0]
 800cdd0:	689a      	ldr	r2, [r3, #8]
 800cdd2:	4baf      	ldr	r3, [pc, #700]	@ (800d090 <UART_SetConfig+0x330>)
 800cdd4:	4013      	ands	r3, r2
 800cdd6:	697a      	ldr	r2, [r7, #20]
 800cdd8:	6812      	ldr	r2, [r2, #0]
 800cdda:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cddc:	430b      	orrs	r3, r1
 800cdde:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cde0:	697b      	ldr	r3, [r7, #20]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cde6:	f023 010f 	bic.w	r1, r3, #15
 800cdea:	697b      	ldr	r3, [r7, #20]
 800cdec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	430a      	orrs	r2, r1
 800cdf4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	4aa6      	ldr	r2, [pc, #664]	@ (800d094 <UART_SetConfig+0x334>)
 800cdfc:	4293      	cmp	r3, r2
 800cdfe:	d177      	bne.n	800cef0 <UART_SetConfig+0x190>
 800ce00:	4ba5      	ldr	r3, [pc, #660]	@ (800d098 <UART_SetConfig+0x338>)
 800ce02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ce04:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800ce08:	2b28      	cmp	r3, #40	@ 0x28
 800ce0a:	d86d      	bhi.n	800cee8 <UART_SetConfig+0x188>
 800ce0c:	a201      	add	r2, pc, #4	@ (adr r2, 800ce14 <UART_SetConfig+0xb4>)
 800ce0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce12:	bf00      	nop
 800ce14:	0800ceb9 	.word	0x0800ceb9
 800ce18:	0800cee9 	.word	0x0800cee9
 800ce1c:	0800cee9 	.word	0x0800cee9
 800ce20:	0800cee9 	.word	0x0800cee9
 800ce24:	0800cee9 	.word	0x0800cee9
 800ce28:	0800cee9 	.word	0x0800cee9
 800ce2c:	0800cee9 	.word	0x0800cee9
 800ce30:	0800cee9 	.word	0x0800cee9
 800ce34:	0800cec1 	.word	0x0800cec1
 800ce38:	0800cee9 	.word	0x0800cee9
 800ce3c:	0800cee9 	.word	0x0800cee9
 800ce40:	0800cee9 	.word	0x0800cee9
 800ce44:	0800cee9 	.word	0x0800cee9
 800ce48:	0800cee9 	.word	0x0800cee9
 800ce4c:	0800cee9 	.word	0x0800cee9
 800ce50:	0800cee9 	.word	0x0800cee9
 800ce54:	0800cec9 	.word	0x0800cec9
 800ce58:	0800cee9 	.word	0x0800cee9
 800ce5c:	0800cee9 	.word	0x0800cee9
 800ce60:	0800cee9 	.word	0x0800cee9
 800ce64:	0800cee9 	.word	0x0800cee9
 800ce68:	0800cee9 	.word	0x0800cee9
 800ce6c:	0800cee9 	.word	0x0800cee9
 800ce70:	0800cee9 	.word	0x0800cee9
 800ce74:	0800ced1 	.word	0x0800ced1
 800ce78:	0800cee9 	.word	0x0800cee9
 800ce7c:	0800cee9 	.word	0x0800cee9
 800ce80:	0800cee9 	.word	0x0800cee9
 800ce84:	0800cee9 	.word	0x0800cee9
 800ce88:	0800cee9 	.word	0x0800cee9
 800ce8c:	0800cee9 	.word	0x0800cee9
 800ce90:	0800cee9 	.word	0x0800cee9
 800ce94:	0800ced9 	.word	0x0800ced9
 800ce98:	0800cee9 	.word	0x0800cee9
 800ce9c:	0800cee9 	.word	0x0800cee9
 800cea0:	0800cee9 	.word	0x0800cee9
 800cea4:	0800cee9 	.word	0x0800cee9
 800cea8:	0800cee9 	.word	0x0800cee9
 800ceac:	0800cee9 	.word	0x0800cee9
 800ceb0:	0800cee9 	.word	0x0800cee9
 800ceb4:	0800cee1 	.word	0x0800cee1
 800ceb8:	2301      	movs	r3, #1
 800ceba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cebe:	e222      	b.n	800d306 <UART_SetConfig+0x5a6>
 800cec0:	2304      	movs	r3, #4
 800cec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cec6:	e21e      	b.n	800d306 <UART_SetConfig+0x5a6>
 800cec8:	2308      	movs	r3, #8
 800ceca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cece:	e21a      	b.n	800d306 <UART_SetConfig+0x5a6>
 800ced0:	2310      	movs	r3, #16
 800ced2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ced6:	e216      	b.n	800d306 <UART_SetConfig+0x5a6>
 800ced8:	2320      	movs	r3, #32
 800ceda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cede:	e212      	b.n	800d306 <UART_SetConfig+0x5a6>
 800cee0:	2340      	movs	r3, #64	@ 0x40
 800cee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cee6:	e20e      	b.n	800d306 <UART_SetConfig+0x5a6>
 800cee8:	2380      	movs	r3, #128	@ 0x80
 800ceea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800ceee:	e20a      	b.n	800d306 <UART_SetConfig+0x5a6>
 800cef0:	697b      	ldr	r3, [r7, #20]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	4a69      	ldr	r2, [pc, #420]	@ (800d09c <UART_SetConfig+0x33c>)
 800cef6:	4293      	cmp	r3, r2
 800cef8:	d130      	bne.n	800cf5c <UART_SetConfig+0x1fc>
 800cefa:	4b67      	ldr	r3, [pc, #412]	@ (800d098 <UART_SetConfig+0x338>)
 800cefc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cefe:	f003 0307 	and.w	r3, r3, #7
 800cf02:	2b05      	cmp	r3, #5
 800cf04:	d826      	bhi.n	800cf54 <UART_SetConfig+0x1f4>
 800cf06:	a201      	add	r2, pc, #4	@ (adr r2, 800cf0c <UART_SetConfig+0x1ac>)
 800cf08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf0c:	0800cf25 	.word	0x0800cf25
 800cf10:	0800cf2d 	.word	0x0800cf2d
 800cf14:	0800cf35 	.word	0x0800cf35
 800cf18:	0800cf3d 	.word	0x0800cf3d
 800cf1c:	0800cf45 	.word	0x0800cf45
 800cf20:	0800cf4d 	.word	0x0800cf4d
 800cf24:	2300      	movs	r3, #0
 800cf26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf2a:	e1ec      	b.n	800d306 <UART_SetConfig+0x5a6>
 800cf2c:	2304      	movs	r3, #4
 800cf2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf32:	e1e8      	b.n	800d306 <UART_SetConfig+0x5a6>
 800cf34:	2308      	movs	r3, #8
 800cf36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf3a:	e1e4      	b.n	800d306 <UART_SetConfig+0x5a6>
 800cf3c:	2310      	movs	r3, #16
 800cf3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf42:	e1e0      	b.n	800d306 <UART_SetConfig+0x5a6>
 800cf44:	2320      	movs	r3, #32
 800cf46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf4a:	e1dc      	b.n	800d306 <UART_SetConfig+0x5a6>
 800cf4c:	2340      	movs	r3, #64	@ 0x40
 800cf4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf52:	e1d8      	b.n	800d306 <UART_SetConfig+0x5a6>
 800cf54:	2380      	movs	r3, #128	@ 0x80
 800cf56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf5a:	e1d4      	b.n	800d306 <UART_SetConfig+0x5a6>
 800cf5c:	697b      	ldr	r3, [r7, #20]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	4a4f      	ldr	r2, [pc, #316]	@ (800d0a0 <UART_SetConfig+0x340>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d130      	bne.n	800cfc8 <UART_SetConfig+0x268>
 800cf66:	4b4c      	ldr	r3, [pc, #304]	@ (800d098 <UART_SetConfig+0x338>)
 800cf68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cf6a:	f003 0307 	and.w	r3, r3, #7
 800cf6e:	2b05      	cmp	r3, #5
 800cf70:	d826      	bhi.n	800cfc0 <UART_SetConfig+0x260>
 800cf72:	a201      	add	r2, pc, #4	@ (adr r2, 800cf78 <UART_SetConfig+0x218>)
 800cf74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf78:	0800cf91 	.word	0x0800cf91
 800cf7c:	0800cf99 	.word	0x0800cf99
 800cf80:	0800cfa1 	.word	0x0800cfa1
 800cf84:	0800cfa9 	.word	0x0800cfa9
 800cf88:	0800cfb1 	.word	0x0800cfb1
 800cf8c:	0800cfb9 	.word	0x0800cfb9
 800cf90:	2300      	movs	r3, #0
 800cf92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf96:	e1b6      	b.n	800d306 <UART_SetConfig+0x5a6>
 800cf98:	2304      	movs	r3, #4
 800cf9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cf9e:	e1b2      	b.n	800d306 <UART_SetConfig+0x5a6>
 800cfa0:	2308      	movs	r3, #8
 800cfa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfa6:	e1ae      	b.n	800d306 <UART_SetConfig+0x5a6>
 800cfa8:	2310      	movs	r3, #16
 800cfaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfae:	e1aa      	b.n	800d306 <UART_SetConfig+0x5a6>
 800cfb0:	2320      	movs	r3, #32
 800cfb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfb6:	e1a6      	b.n	800d306 <UART_SetConfig+0x5a6>
 800cfb8:	2340      	movs	r3, #64	@ 0x40
 800cfba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfbe:	e1a2      	b.n	800d306 <UART_SetConfig+0x5a6>
 800cfc0:	2380      	movs	r3, #128	@ 0x80
 800cfc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800cfc6:	e19e      	b.n	800d306 <UART_SetConfig+0x5a6>
 800cfc8:	697b      	ldr	r3, [r7, #20]
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4a35      	ldr	r2, [pc, #212]	@ (800d0a4 <UART_SetConfig+0x344>)
 800cfce:	4293      	cmp	r3, r2
 800cfd0:	d130      	bne.n	800d034 <UART_SetConfig+0x2d4>
 800cfd2:	4b31      	ldr	r3, [pc, #196]	@ (800d098 <UART_SetConfig+0x338>)
 800cfd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cfd6:	f003 0307 	and.w	r3, r3, #7
 800cfda:	2b05      	cmp	r3, #5
 800cfdc:	d826      	bhi.n	800d02c <UART_SetConfig+0x2cc>
 800cfde:	a201      	add	r2, pc, #4	@ (adr r2, 800cfe4 <UART_SetConfig+0x284>)
 800cfe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfe4:	0800cffd 	.word	0x0800cffd
 800cfe8:	0800d005 	.word	0x0800d005
 800cfec:	0800d00d 	.word	0x0800d00d
 800cff0:	0800d015 	.word	0x0800d015
 800cff4:	0800d01d 	.word	0x0800d01d
 800cff8:	0800d025 	.word	0x0800d025
 800cffc:	2300      	movs	r3, #0
 800cffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d002:	e180      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d004:	2304      	movs	r3, #4
 800d006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d00a:	e17c      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d00c:	2308      	movs	r3, #8
 800d00e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d012:	e178      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d014:	2310      	movs	r3, #16
 800d016:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d01a:	e174      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d01c:	2320      	movs	r3, #32
 800d01e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d022:	e170      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d024:	2340      	movs	r3, #64	@ 0x40
 800d026:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d02a:	e16c      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d02c:	2380      	movs	r3, #128	@ 0x80
 800d02e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d032:	e168      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	4a1b      	ldr	r2, [pc, #108]	@ (800d0a8 <UART_SetConfig+0x348>)
 800d03a:	4293      	cmp	r3, r2
 800d03c:	d142      	bne.n	800d0c4 <UART_SetConfig+0x364>
 800d03e:	4b16      	ldr	r3, [pc, #88]	@ (800d098 <UART_SetConfig+0x338>)
 800d040:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d042:	f003 0307 	and.w	r3, r3, #7
 800d046:	2b05      	cmp	r3, #5
 800d048:	d838      	bhi.n	800d0bc <UART_SetConfig+0x35c>
 800d04a:	a201      	add	r2, pc, #4	@ (adr r2, 800d050 <UART_SetConfig+0x2f0>)
 800d04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d050:	0800d069 	.word	0x0800d069
 800d054:	0800d071 	.word	0x0800d071
 800d058:	0800d079 	.word	0x0800d079
 800d05c:	0800d081 	.word	0x0800d081
 800d060:	0800d0ad 	.word	0x0800d0ad
 800d064:	0800d0b5 	.word	0x0800d0b5
 800d068:	2300      	movs	r3, #0
 800d06a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d06e:	e14a      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d070:	2304      	movs	r3, #4
 800d072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d076:	e146      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d078:	2308      	movs	r3, #8
 800d07a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d07e:	e142      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d080:	2310      	movs	r3, #16
 800d082:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d086:	e13e      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d088:	cfff69f3 	.word	0xcfff69f3
 800d08c:	58000c00 	.word	0x58000c00
 800d090:	11fff4ff 	.word	0x11fff4ff
 800d094:	40011000 	.word	0x40011000
 800d098:	58024400 	.word	0x58024400
 800d09c:	40004400 	.word	0x40004400
 800d0a0:	40004800 	.word	0x40004800
 800d0a4:	40004c00 	.word	0x40004c00
 800d0a8:	40005000 	.word	0x40005000
 800d0ac:	2320      	movs	r3, #32
 800d0ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0b2:	e128      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d0b4:	2340      	movs	r3, #64	@ 0x40
 800d0b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0ba:	e124      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d0bc:	2380      	movs	r3, #128	@ 0x80
 800d0be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d0c2:	e120      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4acb      	ldr	r2, [pc, #812]	@ (800d3f8 <UART_SetConfig+0x698>)
 800d0ca:	4293      	cmp	r3, r2
 800d0cc:	d176      	bne.n	800d1bc <UART_SetConfig+0x45c>
 800d0ce:	4bcb      	ldr	r3, [pc, #812]	@ (800d3fc <UART_SetConfig+0x69c>)
 800d0d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d0d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d0d6:	2b28      	cmp	r3, #40	@ 0x28
 800d0d8:	d86c      	bhi.n	800d1b4 <UART_SetConfig+0x454>
 800d0da:	a201      	add	r2, pc, #4	@ (adr r2, 800d0e0 <UART_SetConfig+0x380>)
 800d0dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0e0:	0800d185 	.word	0x0800d185
 800d0e4:	0800d1b5 	.word	0x0800d1b5
 800d0e8:	0800d1b5 	.word	0x0800d1b5
 800d0ec:	0800d1b5 	.word	0x0800d1b5
 800d0f0:	0800d1b5 	.word	0x0800d1b5
 800d0f4:	0800d1b5 	.word	0x0800d1b5
 800d0f8:	0800d1b5 	.word	0x0800d1b5
 800d0fc:	0800d1b5 	.word	0x0800d1b5
 800d100:	0800d18d 	.word	0x0800d18d
 800d104:	0800d1b5 	.word	0x0800d1b5
 800d108:	0800d1b5 	.word	0x0800d1b5
 800d10c:	0800d1b5 	.word	0x0800d1b5
 800d110:	0800d1b5 	.word	0x0800d1b5
 800d114:	0800d1b5 	.word	0x0800d1b5
 800d118:	0800d1b5 	.word	0x0800d1b5
 800d11c:	0800d1b5 	.word	0x0800d1b5
 800d120:	0800d195 	.word	0x0800d195
 800d124:	0800d1b5 	.word	0x0800d1b5
 800d128:	0800d1b5 	.word	0x0800d1b5
 800d12c:	0800d1b5 	.word	0x0800d1b5
 800d130:	0800d1b5 	.word	0x0800d1b5
 800d134:	0800d1b5 	.word	0x0800d1b5
 800d138:	0800d1b5 	.word	0x0800d1b5
 800d13c:	0800d1b5 	.word	0x0800d1b5
 800d140:	0800d19d 	.word	0x0800d19d
 800d144:	0800d1b5 	.word	0x0800d1b5
 800d148:	0800d1b5 	.word	0x0800d1b5
 800d14c:	0800d1b5 	.word	0x0800d1b5
 800d150:	0800d1b5 	.word	0x0800d1b5
 800d154:	0800d1b5 	.word	0x0800d1b5
 800d158:	0800d1b5 	.word	0x0800d1b5
 800d15c:	0800d1b5 	.word	0x0800d1b5
 800d160:	0800d1a5 	.word	0x0800d1a5
 800d164:	0800d1b5 	.word	0x0800d1b5
 800d168:	0800d1b5 	.word	0x0800d1b5
 800d16c:	0800d1b5 	.word	0x0800d1b5
 800d170:	0800d1b5 	.word	0x0800d1b5
 800d174:	0800d1b5 	.word	0x0800d1b5
 800d178:	0800d1b5 	.word	0x0800d1b5
 800d17c:	0800d1b5 	.word	0x0800d1b5
 800d180:	0800d1ad 	.word	0x0800d1ad
 800d184:	2301      	movs	r3, #1
 800d186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d18a:	e0bc      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d18c:	2304      	movs	r3, #4
 800d18e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d192:	e0b8      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d194:	2308      	movs	r3, #8
 800d196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d19a:	e0b4      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d19c:	2310      	movs	r3, #16
 800d19e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1a2:	e0b0      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d1a4:	2320      	movs	r3, #32
 800d1a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1aa:	e0ac      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d1ac:	2340      	movs	r3, #64	@ 0x40
 800d1ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1b2:	e0a8      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d1b4:	2380      	movs	r3, #128	@ 0x80
 800d1b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1ba:	e0a4      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d1bc:	697b      	ldr	r3, [r7, #20]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4a8f      	ldr	r2, [pc, #572]	@ (800d400 <UART_SetConfig+0x6a0>)
 800d1c2:	4293      	cmp	r3, r2
 800d1c4:	d130      	bne.n	800d228 <UART_SetConfig+0x4c8>
 800d1c6:	4b8d      	ldr	r3, [pc, #564]	@ (800d3fc <UART_SetConfig+0x69c>)
 800d1c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d1ca:	f003 0307 	and.w	r3, r3, #7
 800d1ce:	2b05      	cmp	r3, #5
 800d1d0:	d826      	bhi.n	800d220 <UART_SetConfig+0x4c0>
 800d1d2:	a201      	add	r2, pc, #4	@ (adr r2, 800d1d8 <UART_SetConfig+0x478>)
 800d1d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1d8:	0800d1f1 	.word	0x0800d1f1
 800d1dc:	0800d1f9 	.word	0x0800d1f9
 800d1e0:	0800d201 	.word	0x0800d201
 800d1e4:	0800d209 	.word	0x0800d209
 800d1e8:	0800d211 	.word	0x0800d211
 800d1ec:	0800d219 	.word	0x0800d219
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1f6:	e086      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d1f8:	2304      	movs	r3, #4
 800d1fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d1fe:	e082      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d200:	2308      	movs	r3, #8
 800d202:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d206:	e07e      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d208:	2310      	movs	r3, #16
 800d20a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d20e:	e07a      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d210:	2320      	movs	r3, #32
 800d212:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d216:	e076      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d218:	2340      	movs	r3, #64	@ 0x40
 800d21a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d21e:	e072      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d220:	2380      	movs	r3, #128	@ 0x80
 800d222:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d226:	e06e      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d228:	697b      	ldr	r3, [r7, #20]
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	4a75      	ldr	r2, [pc, #468]	@ (800d404 <UART_SetConfig+0x6a4>)
 800d22e:	4293      	cmp	r3, r2
 800d230:	d130      	bne.n	800d294 <UART_SetConfig+0x534>
 800d232:	4b72      	ldr	r3, [pc, #456]	@ (800d3fc <UART_SetConfig+0x69c>)
 800d234:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d236:	f003 0307 	and.w	r3, r3, #7
 800d23a:	2b05      	cmp	r3, #5
 800d23c:	d826      	bhi.n	800d28c <UART_SetConfig+0x52c>
 800d23e:	a201      	add	r2, pc, #4	@ (adr r2, 800d244 <UART_SetConfig+0x4e4>)
 800d240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d244:	0800d25d 	.word	0x0800d25d
 800d248:	0800d265 	.word	0x0800d265
 800d24c:	0800d26d 	.word	0x0800d26d
 800d250:	0800d275 	.word	0x0800d275
 800d254:	0800d27d 	.word	0x0800d27d
 800d258:	0800d285 	.word	0x0800d285
 800d25c:	2300      	movs	r3, #0
 800d25e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d262:	e050      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d264:	2304      	movs	r3, #4
 800d266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d26a:	e04c      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d26c:	2308      	movs	r3, #8
 800d26e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d272:	e048      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d274:	2310      	movs	r3, #16
 800d276:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d27a:	e044      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d27c:	2320      	movs	r3, #32
 800d27e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d282:	e040      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d284:	2340      	movs	r3, #64	@ 0x40
 800d286:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d28a:	e03c      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d28c:	2380      	movs	r3, #128	@ 0x80
 800d28e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d292:	e038      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d294:	697b      	ldr	r3, [r7, #20]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	4a5b      	ldr	r2, [pc, #364]	@ (800d408 <UART_SetConfig+0x6a8>)
 800d29a:	4293      	cmp	r3, r2
 800d29c:	d130      	bne.n	800d300 <UART_SetConfig+0x5a0>
 800d29e:	4b57      	ldr	r3, [pc, #348]	@ (800d3fc <UART_SetConfig+0x69c>)
 800d2a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2a2:	f003 0307 	and.w	r3, r3, #7
 800d2a6:	2b05      	cmp	r3, #5
 800d2a8:	d826      	bhi.n	800d2f8 <UART_SetConfig+0x598>
 800d2aa:	a201      	add	r2, pc, #4	@ (adr r2, 800d2b0 <UART_SetConfig+0x550>)
 800d2ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2b0:	0800d2c9 	.word	0x0800d2c9
 800d2b4:	0800d2d1 	.word	0x0800d2d1
 800d2b8:	0800d2d9 	.word	0x0800d2d9
 800d2bc:	0800d2e1 	.word	0x0800d2e1
 800d2c0:	0800d2e9 	.word	0x0800d2e9
 800d2c4:	0800d2f1 	.word	0x0800d2f1
 800d2c8:	2302      	movs	r3, #2
 800d2ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2ce:	e01a      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d2d0:	2304      	movs	r3, #4
 800d2d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2d6:	e016      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d2d8:	2308      	movs	r3, #8
 800d2da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2de:	e012      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d2e0:	2310      	movs	r3, #16
 800d2e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2e6:	e00e      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d2e8:	2320      	movs	r3, #32
 800d2ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2ee:	e00a      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d2f0:	2340      	movs	r3, #64	@ 0x40
 800d2f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2f6:	e006      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d2f8:	2380      	movs	r3, #128	@ 0x80
 800d2fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d2fe:	e002      	b.n	800d306 <UART_SetConfig+0x5a6>
 800d300:	2380      	movs	r3, #128	@ 0x80
 800d302:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d306:	697b      	ldr	r3, [r7, #20]
 800d308:	681b      	ldr	r3, [r3, #0]
 800d30a:	4a3f      	ldr	r2, [pc, #252]	@ (800d408 <UART_SetConfig+0x6a8>)
 800d30c:	4293      	cmp	r3, r2
 800d30e:	f040 80f8 	bne.w	800d502 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d312:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d316:	2b20      	cmp	r3, #32
 800d318:	dc46      	bgt.n	800d3a8 <UART_SetConfig+0x648>
 800d31a:	2b02      	cmp	r3, #2
 800d31c:	f2c0 8082 	blt.w	800d424 <UART_SetConfig+0x6c4>
 800d320:	3b02      	subs	r3, #2
 800d322:	2b1e      	cmp	r3, #30
 800d324:	d87e      	bhi.n	800d424 <UART_SetConfig+0x6c4>
 800d326:	a201      	add	r2, pc, #4	@ (adr r2, 800d32c <UART_SetConfig+0x5cc>)
 800d328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d32c:	0800d3af 	.word	0x0800d3af
 800d330:	0800d425 	.word	0x0800d425
 800d334:	0800d3b7 	.word	0x0800d3b7
 800d338:	0800d425 	.word	0x0800d425
 800d33c:	0800d425 	.word	0x0800d425
 800d340:	0800d425 	.word	0x0800d425
 800d344:	0800d3c7 	.word	0x0800d3c7
 800d348:	0800d425 	.word	0x0800d425
 800d34c:	0800d425 	.word	0x0800d425
 800d350:	0800d425 	.word	0x0800d425
 800d354:	0800d425 	.word	0x0800d425
 800d358:	0800d425 	.word	0x0800d425
 800d35c:	0800d425 	.word	0x0800d425
 800d360:	0800d425 	.word	0x0800d425
 800d364:	0800d3d7 	.word	0x0800d3d7
 800d368:	0800d425 	.word	0x0800d425
 800d36c:	0800d425 	.word	0x0800d425
 800d370:	0800d425 	.word	0x0800d425
 800d374:	0800d425 	.word	0x0800d425
 800d378:	0800d425 	.word	0x0800d425
 800d37c:	0800d425 	.word	0x0800d425
 800d380:	0800d425 	.word	0x0800d425
 800d384:	0800d425 	.word	0x0800d425
 800d388:	0800d425 	.word	0x0800d425
 800d38c:	0800d425 	.word	0x0800d425
 800d390:	0800d425 	.word	0x0800d425
 800d394:	0800d425 	.word	0x0800d425
 800d398:	0800d425 	.word	0x0800d425
 800d39c:	0800d425 	.word	0x0800d425
 800d3a0:	0800d425 	.word	0x0800d425
 800d3a4:	0800d417 	.word	0x0800d417
 800d3a8:	2b40      	cmp	r3, #64	@ 0x40
 800d3aa:	d037      	beq.n	800d41c <UART_SetConfig+0x6bc>
 800d3ac:	e03a      	b.n	800d424 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d3ae:	f7fd fac9 	bl	800a944 <HAL_RCCEx_GetD3PCLK1Freq>
 800d3b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d3b4:	e03c      	b.n	800d430 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d3b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d3ba:	4618      	mov	r0, r3
 800d3bc:	f7fd fad8 	bl	800a970 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d3c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d3c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3c4:	e034      	b.n	800d430 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d3c6:	f107 0318 	add.w	r3, r7, #24
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	f7fd fc24 	bl	800ac18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d3d0:	69fb      	ldr	r3, [r7, #28]
 800d3d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d3d4:	e02c      	b.n	800d430 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d3d6:	4b09      	ldr	r3, [pc, #36]	@ (800d3fc <UART_SetConfig+0x69c>)
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	f003 0320 	and.w	r3, r3, #32
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d016      	beq.n	800d410 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d3e2:	4b06      	ldr	r3, [pc, #24]	@ (800d3fc <UART_SetConfig+0x69c>)
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	08db      	lsrs	r3, r3, #3
 800d3e8:	f003 0303 	and.w	r3, r3, #3
 800d3ec:	4a07      	ldr	r2, [pc, #28]	@ (800d40c <UART_SetConfig+0x6ac>)
 800d3ee:	fa22 f303 	lsr.w	r3, r2, r3
 800d3f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d3f4:	e01c      	b.n	800d430 <UART_SetConfig+0x6d0>
 800d3f6:	bf00      	nop
 800d3f8:	40011400 	.word	0x40011400
 800d3fc:	58024400 	.word	0x58024400
 800d400:	40007800 	.word	0x40007800
 800d404:	40007c00 	.word	0x40007c00
 800d408:	58000c00 	.word	0x58000c00
 800d40c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d410:	4b9d      	ldr	r3, [pc, #628]	@ (800d688 <UART_SetConfig+0x928>)
 800d412:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d414:	e00c      	b.n	800d430 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d416:	4b9d      	ldr	r3, [pc, #628]	@ (800d68c <UART_SetConfig+0x92c>)
 800d418:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d41a:	e009      	b.n	800d430 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d41c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d420:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d422:	e005      	b.n	800d430 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d424:	2300      	movs	r3, #0
 800d426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d428:	2301      	movs	r3, #1
 800d42a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d42e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d432:	2b00      	cmp	r3, #0
 800d434:	f000 81de 	beq.w	800d7f4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d43c:	4a94      	ldr	r2, [pc, #592]	@ (800d690 <UART_SetConfig+0x930>)
 800d43e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d442:	461a      	mov	r2, r3
 800d444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d446:	fbb3 f3f2 	udiv	r3, r3, r2
 800d44a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d44c:	697b      	ldr	r3, [r7, #20]
 800d44e:	685a      	ldr	r2, [r3, #4]
 800d450:	4613      	mov	r3, r2
 800d452:	005b      	lsls	r3, r3, #1
 800d454:	4413      	add	r3, r2
 800d456:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d458:	429a      	cmp	r2, r3
 800d45a:	d305      	bcc.n	800d468 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	685b      	ldr	r3, [r3, #4]
 800d460:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d462:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d464:	429a      	cmp	r2, r3
 800d466:	d903      	bls.n	800d470 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d468:	2301      	movs	r3, #1
 800d46a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d46e:	e1c1      	b.n	800d7f4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d472:	2200      	movs	r2, #0
 800d474:	60bb      	str	r3, [r7, #8]
 800d476:	60fa      	str	r2, [r7, #12]
 800d478:	697b      	ldr	r3, [r7, #20]
 800d47a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d47c:	4a84      	ldr	r2, [pc, #528]	@ (800d690 <UART_SetConfig+0x930>)
 800d47e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d482:	b29b      	uxth	r3, r3
 800d484:	2200      	movs	r2, #0
 800d486:	603b      	str	r3, [r7, #0]
 800d488:	607a      	str	r2, [r7, #4]
 800d48a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d48e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d492:	f7f2 ff7d 	bl	8000390 <__aeabi_uldivmod>
 800d496:	4602      	mov	r2, r0
 800d498:	460b      	mov	r3, r1
 800d49a:	4610      	mov	r0, r2
 800d49c:	4619      	mov	r1, r3
 800d49e:	f04f 0200 	mov.w	r2, #0
 800d4a2:	f04f 0300 	mov.w	r3, #0
 800d4a6:	020b      	lsls	r3, r1, #8
 800d4a8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d4ac:	0202      	lsls	r2, r0, #8
 800d4ae:	6979      	ldr	r1, [r7, #20]
 800d4b0:	6849      	ldr	r1, [r1, #4]
 800d4b2:	0849      	lsrs	r1, r1, #1
 800d4b4:	2000      	movs	r0, #0
 800d4b6:	460c      	mov	r4, r1
 800d4b8:	4605      	mov	r5, r0
 800d4ba:	eb12 0804 	adds.w	r8, r2, r4
 800d4be:	eb43 0905 	adc.w	r9, r3, r5
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	685b      	ldr	r3, [r3, #4]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	469a      	mov	sl, r3
 800d4ca:	4693      	mov	fp, r2
 800d4cc:	4652      	mov	r2, sl
 800d4ce:	465b      	mov	r3, fp
 800d4d0:	4640      	mov	r0, r8
 800d4d2:	4649      	mov	r1, r9
 800d4d4:	f7f2 ff5c 	bl	8000390 <__aeabi_uldivmod>
 800d4d8:	4602      	mov	r2, r0
 800d4da:	460b      	mov	r3, r1
 800d4dc:	4613      	mov	r3, r2
 800d4de:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d4e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d4e6:	d308      	bcc.n	800d4fa <UART_SetConfig+0x79a>
 800d4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d4ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d4ee:	d204      	bcs.n	800d4fa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	681b      	ldr	r3, [r3, #0]
 800d4f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d4f6:	60da      	str	r2, [r3, #12]
 800d4f8:	e17c      	b.n	800d7f4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d4fa:	2301      	movs	r3, #1
 800d4fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d500:	e178      	b.n	800d7f4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	69db      	ldr	r3, [r3, #28]
 800d506:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d50a:	f040 80c5 	bne.w	800d698 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d50e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d512:	2b20      	cmp	r3, #32
 800d514:	dc48      	bgt.n	800d5a8 <UART_SetConfig+0x848>
 800d516:	2b00      	cmp	r3, #0
 800d518:	db7b      	blt.n	800d612 <UART_SetConfig+0x8b2>
 800d51a:	2b20      	cmp	r3, #32
 800d51c:	d879      	bhi.n	800d612 <UART_SetConfig+0x8b2>
 800d51e:	a201      	add	r2, pc, #4	@ (adr r2, 800d524 <UART_SetConfig+0x7c4>)
 800d520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d524:	0800d5af 	.word	0x0800d5af
 800d528:	0800d5b7 	.word	0x0800d5b7
 800d52c:	0800d613 	.word	0x0800d613
 800d530:	0800d613 	.word	0x0800d613
 800d534:	0800d5bf 	.word	0x0800d5bf
 800d538:	0800d613 	.word	0x0800d613
 800d53c:	0800d613 	.word	0x0800d613
 800d540:	0800d613 	.word	0x0800d613
 800d544:	0800d5cf 	.word	0x0800d5cf
 800d548:	0800d613 	.word	0x0800d613
 800d54c:	0800d613 	.word	0x0800d613
 800d550:	0800d613 	.word	0x0800d613
 800d554:	0800d613 	.word	0x0800d613
 800d558:	0800d613 	.word	0x0800d613
 800d55c:	0800d613 	.word	0x0800d613
 800d560:	0800d613 	.word	0x0800d613
 800d564:	0800d5df 	.word	0x0800d5df
 800d568:	0800d613 	.word	0x0800d613
 800d56c:	0800d613 	.word	0x0800d613
 800d570:	0800d613 	.word	0x0800d613
 800d574:	0800d613 	.word	0x0800d613
 800d578:	0800d613 	.word	0x0800d613
 800d57c:	0800d613 	.word	0x0800d613
 800d580:	0800d613 	.word	0x0800d613
 800d584:	0800d613 	.word	0x0800d613
 800d588:	0800d613 	.word	0x0800d613
 800d58c:	0800d613 	.word	0x0800d613
 800d590:	0800d613 	.word	0x0800d613
 800d594:	0800d613 	.word	0x0800d613
 800d598:	0800d613 	.word	0x0800d613
 800d59c:	0800d613 	.word	0x0800d613
 800d5a0:	0800d613 	.word	0x0800d613
 800d5a4:	0800d605 	.word	0x0800d605
 800d5a8:	2b40      	cmp	r3, #64	@ 0x40
 800d5aa:	d02e      	beq.n	800d60a <UART_SetConfig+0x8aa>
 800d5ac:	e031      	b.n	800d612 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d5ae:	f7fb fa13 	bl	80089d8 <HAL_RCC_GetPCLK1Freq>
 800d5b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d5b4:	e033      	b.n	800d61e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d5b6:	f7fb fa25 	bl	8008a04 <HAL_RCC_GetPCLK2Freq>
 800d5ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d5bc:	e02f      	b.n	800d61e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d5be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f7fd f9d4 	bl	800a970 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d5c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d5ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5cc:	e027      	b.n	800d61e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d5ce:	f107 0318 	add.w	r3, r7, #24
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f7fd fb20 	bl	800ac18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d5d8:	69fb      	ldr	r3, [r7, #28]
 800d5da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d5dc:	e01f      	b.n	800d61e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d5de:	4b2d      	ldr	r3, [pc, #180]	@ (800d694 <UART_SetConfig+0x934>)
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	f003 0320 	and.w	r3, r3, #32
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d009      	beq.n	800d5fe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d5ea:	4b2a      	ldr	r3, [pc, #168]	@ (800d694 <UART_SetConfig+0x934>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	08db      	lsrs	r3, r3, #3
 800d5f0:	f003 0303 	and.w	r3, r3, #3
 800d5f4:	4a24      	ldr	r2, [pc, #144]	@ (800d688 <UART_SetConfig+0x928>)
 800d5f6:	fa22 f303 	lsr.w	r3, r2, r3
 800d5fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d5fc:	e00f      	b.n	800d61e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d5fe:	4b22      	ldr	r3, [pc, #136]	@ (800d688 <UART_SetConfig+0x928>)
 800d600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d602:	e00c      	b.n	800d61e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d604:	4b21      	ldr	r3, [pc, #132]	@ (800d68c <UART_SetConfig+0x92c>)
 800d606:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d608:	e009      	b.n	800d61e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d60a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d60e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d610:	e005      	b.n	800d61e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d612:	2300      	movs	r3, #0
 800d614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d616:	2301      	movs	r3, #1
 800d618:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d61c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d61e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d620:	2b00      	cmp	r3, #0
 800d622:	f000 80e7 	beq.w	800d7f4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d62a:	4a19      	ldr	r2, [pc, #100]	@ (800d690 <UART_SetConfig+0x930>)
 800d62c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d630:	461a      	mov	r2, r3
 800d632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d634:	fbb3 f3f2 	udiv	r3, r3, r2
 800d638:	005a      	lsls	r2, r3, #1
 800d63a:	697b      	ldr	r3, [r7, #20]
 800d63c:	685b      	ldr	r3, [r3, #4]
 800d63e:	085b      	lsrs	r3, r3, #1
 800d640:	441a      	add	r2, r3
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	685b      	ldr	r3, [r3, #4]
 800d646:	fbb2 f3f3 	udiv	r3, r2, r3
 800d64a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d64e:	2b0f      	cmp	r3, #15
 800d650:	d916      	bls.n	800d680 <UART_SetConfig+0x920>
 800d652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d654:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d658:	d212      	bcs.n	800d680 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d65c:	b29b      	uxth	r3, r3
 800d65e:	f023 030f 	bic.w	r3, r3, #15
 800d662:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d666:	085b      	lsrs	r3, r3, #1
 800d668:	b29b      	uxth	r3, r3
 800d66a:	f003 0307 	and.w	r3, r3, #7
 800d66e:	b29a      	uxth	r2, r3
 800d670:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800d672:	4313      	orrs	r3, r2
 800d674:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800d676:	697b      	ldr	r3, [r7, #20]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800d67c:	60da      	str	r2, [r3, #12]
 800d67e:	e0b9      	b.n	800d7f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d680:	2301      	movs	r3, #1
 800d682:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d686:	e0b5      	b.n	800d7f4 <UART_SetConfig+0xa94>
 800d688:	03d09000 	.word	0x03d09000
 800d68c:	003d0900 	.word	0x003d0900
 800d690:	08014a48 	.word	0x08014a48
 800d694:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d698:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d69c:	2b20      	cmp	r3, #32
 800d69e:	dc49      	bgt.n	800d734 <UART_SetConfig+0x9d4>
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	db7c      	blt.n	800d79e <UART_SetConfig+0xa3e>
 800d6a4:	2b20      	cmp	r3, #32
 800d6a6:	d87a      	bhi.n	800d79e <UART_SetConfig+0xa3e>
 800d6a8:	a201      	add	r2, pc, #4	@ (adr r2, 800d6b0 <UART_SetConfig+0x950>)
 800d6aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6ae:	bf00      	nop
 800d6b0:	0800d73b 	.word	0x0800d73b
 800d6b4:	0800d743 	.word	0x0800d743
 800d6b8:	0800d79f 	.word	0x0800d79f
 800d6bc:	0800d79f 	.word	0x0800d79f
 800d6c0:	0800d74b 	.word	0x0800d74b
 800d6c4:	0800d79f 	.word	0x0800d79f
 800d6c8:	0800d79f 	.word	0x0800d79f
 800d6cc:	0800d79f 	.word	0x0800d79f
 800d6d0:	0800d75b 	.word	0x0800d75b
 800d6d4:	0800d79f 	.word	0x0800d79f
 800d6d8:	0800d79f 	.word	0x0800d79f
 800d6dc:	0800d79f 	.word	0x0800d79f
 800d6e0:	0800d79f 	.word	0x0800d79f
 800d6e4:	0800d79f 	.word	0x0800d79f
 800d6e8:	0800d79f 	.word	0x0800d79f
 800d6ec:	0800d79f 	.word	0x0800d79f
 800d6f0:	0800d76b 	.word	0x0800d76b
 800d6f4:	0800d79f 	.word	0x0800d79f
 800d6f8:	0800d79f 	.word	0x0800d79f
 800d6fc:	0800d79f 	.word	0x0800d79f
 800d700:	0800d79f 	.word	0x0800d79f
 800d704:	0800d79f 	.word	0x0800d79f
 800d708:	0800d79f 	.word	0x0800d79f
 800d70c:	0800d79f 	.word	0x0800d79f
 800d710:	0800d79f 	.word	0x0800d79f
 800d714:	0800d79f 	.word	0x0800d79f
 800d718:	0800d79f 	.word	0x0800d79f
 800d71c:	0800d79f 	.word	0x0800d79f
 800d720:	0800d79f 	.word	0x0800d79f
 800d724:	0800d79f 	.word	0x0800d79f
 800d728:	0800d79f 	.word	0x0800d79f
 800d72c:	0800d79f 	.word	0x0800d79f
 800d730:	0800d791 	.word	0x0800d791
 800d734:	2b40      	cmp	r3, #64	@ 0x40
 800d736:	d02e      	beq.n	800d796 <UART_SetConfig+0xa36>
 800d738:	e031      	b.n	800d79e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d73a:	f7fb f94d 	bl	80089d8 <HAL_RCC_GetPCLK1Freq>
 800d73e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d740:	e033      	b.n	800d7aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d742:	f7fb f95f 	bl	8008a04 <HAL_RCC_GetPCLK2Freq>
 800d746:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d748:	e02f      	b.n	800d7aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d74a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d74e:	4618      	mov	r0, r3
 800d750:	f7fd f90e 	bl	800a970 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d754:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d756:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d758:	e027      	b.n	800d7aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d75a:	f107 0318 	add.w	r3, r7, #24
 800d75e:	4618      	mov	r0, r3
 800d760:	f7fd fa5a 	bl	800ac18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d764:	69fb      	ldr	r3, [r7, #28]
 800d766:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d768:	e01f      	b.n	800d7aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d76a:	4b2d      	ldr	r3, [pc, #180]	@ (800d820 <UART_SetConfig+0xac0>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	f003 0320 	and.w	r3, r3, #32
 800d772:	2b00      	cmp	r3, #0
 800d774:	d009      	beq.n	800d78a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d776:	4b2a      	ldr	r3, [pc, #168]	@ (800d820 <UART_SetConfig+0xac0>)
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	08db      	lsrs	r3, r3, #3
 800d77c:	f003 0303 	and.w	r3, r3, #3
 800d780:	4a28      	ldr	r2, [pc, #160]	@ (800d824 <UART_SetConfig+0xac4>)
 800d782:	fa22 f303 	lsr.w	r3, r2, r3
 800d786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d788:	e00f      	b.n	800d7aa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d78a:	4b26      	ldr	r3, [pc, #152]	@ (800d824 <UART_SetConfig+0xac4>)
 800d78c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d78e:	e00c      	b.n	800d7aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d790:	4b25      	ldr	r3, [pc, #148]	@ (800d828 <UART_SetConfig+0xac8>)
 800d792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d794:	e009      	b.n	800d7aa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d796:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d79a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d79c:	e005      	b.n	800d7aa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d7a2:	2301      	movs	r3, #1
 800d7a4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d7a8:	bf00      	nop
    }

    if (pclk != 0U)
 800d7aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d021      	beq.n	800d7f4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7b4:	4a1d      	ldr	r2, [pc, #116]	@ (800d82c <UART_SetConfig+0xacc>)
 800d7b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d7ba:	461a      	mov	r2, r3
 800d7bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d7be:	fbb3 f2f2 	udiv	r2, r3, r2
 800d7c2:	697b      	ldr	r3, [r7, #20]
 800d7c4:	685b      	ldr	r3, [r3, #4]
 800d7c6:	085b      	lsrs	r3, r3, #1
 800d7c8:	441a      	add	r2, r3
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	685b      	ldr	r3, [r3, #4]
 800d7ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800d7d2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d7d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7d6:	2b0f      	cmp	r3, #15
 800d7d8:	d909      	bls.n	800d7ee <UART_SetConfig+0xa8e>
 800d7da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d7e0:	d205      	bcs.n	800d7ee <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d7e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7e4:	b29a      	uxth	r2, r3
 800d7e6:	697b      	ldr	r3, [r7, #20]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	60da      	str	r2, [r3, #12]
 800d7ec:	e002      	b.n	800d7f4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800d7fc:	697b      	ldr	r3, [r7, #20]
 800d7fe:	2201      	movs	r2, #1
 800d800:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d804:	697b      	ldr	r3, [r7, #20]
 800d806:	2200      	movs	r2, #0
 800d808:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	2200      	movs	r2, #0
 800d80e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800d810:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800d814:	4618      	mov	r0, r3
 800d816:	3748      	adds	r7, #72	@ 0x48
 800d818:	46bd      	mov	sp, r7
 800d81a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d81e:	bf00      	nop
 800d820:	58024400 	.word	0x58024400
 800d824:	03d09000 	.word	0x03d09000
 800d828:	003d0900 	.word	0x003d0900
 800d82c:	08014a48 	.word	0x08014a48

0800d830 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d830:	b480      	push	{r7}
 800d832:	b083      	sub	sp, #12
 800d834:	af00      	add	r7, sp, #0
 800d836:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d83c:	f003 0308 	and.w	r3, r3, #8
 800d840:	2b00      	cmp	r3, #0
 800d842:	d00a      	beq.n	800d85a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	681b      	ldr	r3, [r3, #0]
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	430a      	orrs	r2, r1
 800d858:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d85e:	f003 0301 	and.w	r3, r3, #1
 800d862:	2b00      	cmp	r3, #0
 800d864:	d00a      	beq.n	800d87c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	681b      	ldr	r3, [r3, #0]
 800d86a:	685b      	ldr	r3, [r3, #4]
 800d86c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	681b      	ldr	r3, [r3, #0]
 800d878:	430a      	orrs	r2, r1
 800d87a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d880:	f003 0302 	and.w	r3, r3, #2
 800d884:	2b00      	cmp	r3, #0
 800d886:	d00a      	beq.n	800d89e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	685b      	ldr	r3, [r3, #4]
 800d88e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	430a      	orrs	r2, r1
 800d89c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8a2:	f003 0304 	and.w	r3, r3, #4
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d00a      	beq.n	800d8c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	685b      	ldr	r3, [r3, #4]
 800d8b0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	430a      	orrs	r2, r1
 800d8be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8c4:	f003 0310 	and.w	r3, r3, #16
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d00a      	beq.n	800d8e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	689b      	ldr	r3, [r3, #8]
 800d8d2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	430a      	orrs	r2, r1
 800d8e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d8e6:	f003 0320 	and.w	r3, r3, #32
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d00a      	beq.n	800d904 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	689b      	ldr	r3, [r3, #8]
 800d8f4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	430a      	orrs	r2, r1
 800d902:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d01a      	beq.n	800d946 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	685b      	ldr	r3, [r3, #4]
 800d916:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	430a      	orrs	r2, r1
 800d924:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d92a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d92e:	d10a      	bne.n	800d946 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	685b      	ldr	r3, [r3, #4]
 800d936:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	430a      	orrs	r2, r1
 800d944:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d94a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d00a      	beq.n	800d968 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	685b      	ldr	r3, [r3, #4]
 800d958:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	430a      	orrs	r2, r1
 800d966:	605a      	str	r2, [r3, #4]
  }
}
 800d968:	bf00      	nop
 800d96a:	370c      	adds	r7, #12
 800d96c:	46bd      	mov	sp, r7
 800d96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d972:	4770      	bx	lr

0800d974 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d974:	b580      	push	{r7, lr}
 800d976:	b098      	sub	sp, #96	@ 0x60
 800d978:	af02      	add	r7, sp, #8
 800d97a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	2200      	movs	r2, #0
 800d980:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d984:	f7f4 fffa 	bl	800297c <HAL_GetTick>
 800d988:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	f003 0308 	and.w	r3, r3, #8
 800d994:	2b08      	cmp	r3, #8
 800d996:	d12f      	bne.n	800d9f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d998:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d99c:	9300      	str	r3, [sp, #0]
 800d99e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9a0:	2200      	movs	r2, #0
 800d9a2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d9a6:	6878      	ldr	r0, [r7, #4]
 800d9a8:	f000 f88e 	bl	800dac8 <UART_WaitOnFlagUntilTimeout>
 800d9ac:	4603      	mov	r3, r0
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d022      	beq.n	800d9f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9ba:	e853 3f00 	ldrex	r3, [r3]
 800d9be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800d9c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d9c2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d9c6:	653b      	str	r3, [r7, #80]	@ 0x50
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	461a      	mov	r2, r3
 800d9ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d9d0:	647b      	str	r3, [r7, #68]	@ 0x44
 800d9d2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d9d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d9d8:	e841 2300 	strex	r3, r2, [r1]
 800d9dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800d9de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d1e6      	bne.n	800d9b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2220      	movs	r2, #32
 800d9e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d9f4:	2303      	movs	r3, #3
 800d9f6:	e063      	b.n	800dac0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	681b      	ldr	r3, [r3, #0]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	f003 0304 	and.w	r3, r3, #4
 800da02:	2b04      	cmp	r3, #4
 800da04:	d149      	bne.n	800da9a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800da06:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800da0a:	9300      	str	r3, [sp, #0]
 800da0c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da0e:	2200      	movs	r2, #0
 800da10:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f000 f857 	bl	800dac8 <UART_WaitOnFlagUntilTimeout>
 800da1a:	4603      	mov	r3, r0
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d03c      	beq.n	800da9a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da28:	e853 3f00 	ldrex	r3, [r3]
 800da2c:	623b      	str	r3, [r7, #32]
   return(result);
 800da2e:	6a3b      	ldr	r3, [r7, #32]
 800da30:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800da34:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	461a      	mov	r2, r3
 800da3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800da3e:	633b      	str	r3, [r7, #48]	@ 0x30
 800da40:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800da44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da46:	e841 2300 	strex	r3, r2, [r1]
 800da4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800da4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d1e6      	bne.n	800da20 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	3308      	adds	r3, #8
 800da58:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	e853 3f00 	ldrex	r3, [r3]
 800da60:	60fb      	str	r3, [r7, #12]
   return(result);
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	f023 0301 	bic.w	r3, r3, #1
 800da68:	64bb      	str	r3, [r7, #72]	@ 0x48
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	3308      	adds	r3, #8
 800da70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800da72:	61fa      	str	r2, [r7, #28]
 800da74:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da76:	69b9      	ldr	r1, [r7, #24]
 800da78:	69fa      	ldr	r2, [r7, #28]
 800da7a:	e841 2300 	strex	r3, r2, [r1]
 800da7e:	617b      	str	r3, [r7, #20]
   return(result);
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	2b00      	cmp	r3, #0
 800da84:	d1e5      	bne.n	800da52 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2220      	movs	r2, #32
 800da8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	2200      	movs	r2, #0
 800da92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800da96:	2303      	movs	r3, #3
 800da98:	e012      	b.n	800dac0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	2220      	movs	r2, #32
 800da9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2220      	movs	r2, #32
 800daa6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2200      	movs	r2, #0
 800daae:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2200      	movs	r2, #0
 800dab4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2200      	movs	r2, #0
 800daba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800dabe:	2300      	movs	r3, #0
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	3758      	adds	r7, #88	@ 0x58
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800dac8:	b580      	push	{r7, lr}
 800daca:	b084      	sub	sp, #16
 800dacc:	af00      	add	r7, sp, #0
 800dace:	60f8      	str	r0, [r7, #12]
 800dad0:	60b9      	str	r1, [r7, #8]
 800dad2:	603b      	str	r3, [r7, #0]
 800dad4:	4613      	mov	r3, r2
 800dad6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dad8:	e04f      	b.n	800db7a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dada:	69bb      	ldr	r3, [r7, #24]
 800dadc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dae0:	d04b      	beq.n	800db7a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dae2:	f7f4 ff4b 	bl	800297c <HAL_GetTick>
 800dae6:	4602      	mov	r2, r0
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	1ad3      	subs	r3, r2, r3
 800daec:	69ba      	ldr	r2, [r7, #24]
 800daee:	429a      	cmp	r2, r3
 800daf0:	d302      	bcc.n	800daf8 <UART_WaitOnFlagUntilTimeout+0x30>
 800daf2:	69bb      	ldr	r3, [r7, #24]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d101      	bne.n	800dafc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800daf8:	2303      	movs	r3, #3
 800dafa:	e04e      	b.n	800db9a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	f003 0304 	and.w	r3, r3, #4
 800db06:	2b00      	cmp	r3, #0
 800db08:	d037      	beq.n	800db7a <UART_WaitOnFlagUntilTimeout+0xb2>
 800db0a:	68bb      	ldr	r3, [r7, #8]
 800db0c:	2b80      	cmp	r3, #128	@ 0x80
 800db0e:	d034      	beq.n	800db7a <UART_WaitOnFlagUntilTimeout+0xb2>
 800db10:	68bb      	ldr	r3, [r7, #8]
 800db12:	2b40      	cmp	r3, #64	@ 0x40
 800db14:	d031      	beq.n	800db7a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800db16:	68fb      	ldr	r3, [r7, #12]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	69db      	ldr	r3, [r3, #28]
 800db1c:	f003 0308 	and.w	r3, r3, #8
 800db20:	2b08      	cmp	r3, #8
 800db22:	d110      	bne.n	800db46 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	2208      	movs	r2, #8
 800db2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800db2c:	68f8      	ldr	r0, [r7, #12]
 800db2e:	f000 f839 	bl	800dba4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	2208      	movs	r2, #8
 800db36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	2200      	movs	r2, #0
 800db3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800db42:	2301      	movs	r3, #1
 800db44:	e029      	b.n	800db9a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	69db      	ldr	r3, [r3, #28]
 800db4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800db50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800db54:	d111      	bne.n	800db7a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800db5e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800db60:	68f8      	ldr	r0, [r7, #12]
 800db62:	f000 f81f 	bl	800dba4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	2220      	movs	r2, #32
 800db6a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800db6e:	68fb      	ldr	r3, [r7, #12]
 800db70:	2200      	movs	r2, #0
 800db72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800db76:	2303      	movs	r3, #3
 800db78:	e00f      	b.n	800db9a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	69da      	ldr	r2, [r3, #28]
 800db80:	68bb      	ldr	r3, [r7, #8]
 800db82:	4013      	ands	r3, r2
 800db84:	68ba      	ldr	r2, [r7, #8]
 800db86:	429a      	cmp	r2, r3
 800db88:	bf0c      	ite	eq
 800db8a:	2301      	moveq	r3, #1
 800db8c:	2300      	movne	r3, #0
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	461a      	mov	r2, r3
 800db92:	79fb      	ldrb	r3, [r7, #7]
 800db94:	429a      	cmp	r2, r3
 800db96:	d0a0      	beq.n	800dada <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800db98:	2300      	movs	r3, #0
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3710      	adds	r7, #16
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}
	...

0800dba4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800dba4:	b480      	push	{r7}
 800dba6:	b095      	sub	sp, #84	@ 0x54
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbb4:	e853 3f00 	ldrex	r3, [r3]
 800dbb8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800dbba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dbbc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800dbc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	461a      	mov	r2, r3
 800dbc8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dbca:	643b      	str	r3, [r7, #64]	@ 0x40
 800dbcc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800dbd0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dbd2:	e841 2300 	strex	r3, r2, [r1]
 800dbd6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800dbd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d1e6      	bne.n	800dbac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	3308      	adds	r3, #8
 800dbe4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbe6:	6a3b      	ldr	r3, [r7, #32]
 800dbe8:	e853 3f00 	ldrex	r3, [r3]
 800dbec:	61fb      	str	r3, [r7, #28]
   return(result);
 800dbee:	69fa      	ldr	r2, [r7, #28]
 800dbf0:	4b1e      	ldr	r3, [pc, #120]	@ (800dc6c <UART_EndRxTransfer+0xc8>)
 800dbf2:	4013      	ands	r3, r2
 800dbf4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	3308      	adds	r3, #8
 800dbfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dbfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800dc00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800dc04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc06:	e841 2300 	strex	r3, r2, [r1]
 800dc0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800dc0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d1e5      	bne.n	800dbde <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800dc16:	2b01      	cmp	r3, #1
 800dc18:	d118      	bne.n	800dc4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	e853 3f00 	ldrex	r3, [r3]
 800dc26:	60bb      	str	r3, [r7, #8]
   return(result);
 800dc28:	68bb      	ldr	r3, [r7, #8]
 800dc2a:	f023 0310 	bic.w	r3, r3, #16
 800dc2e:	647b      	str	r3, [r7, #68]	@ 0x44
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	461a      	mov	r2, r3
 800dc36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800dc38:	61bb      	str	r3, [r7, #24]
 800dc3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc3c:	6979      	ldr	r1, [r7, #20]
 800dc3e:	69ba      	ldr	r2, [r7, #24]
 800dc40:	e841 2300 	strex	r3, r2, [r1]
 800dc44:	613b      	str	r3, [r7, #16]
   return(result);
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d1e6      	bne.n	800dc1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2220      	movs	r2, #32
 800dc50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	2200      	movs	r2, #0
 800dc58:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800dc60:	bf00      	nop
 800dc62:	3754      	adds	r7, #84	@ 0x54
 800dc64:	46bd      	mov	sp, r7
 800dc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc6a:	4770      	bx	lr
 800dc6c:	effffffe 	.word	0xeffffffe

0800dc70 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dc70:	b084      	sub	sp, #16
 800dc72:	b580      	push	{r7, lr}
 800dc74:	b084      	sub	sp, #16
 800dc76:	af00      	add	r7, sp, #0
 800dc78:	6078      	str	r0, [r7, #4]
 800dc7a:	f107 001c 	add.w	r0, r7, #28
 800dc7e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dc82:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800dc86:	2b01      	cmp	r3, #1
 800dc88:	d121      	bne.n	800dcce <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dc8e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	68da      	ldr	r2, [r3, #12]
 800dc9a:	4b2c      	ldr	r3, [pc, #176]	@ (800dd4c <USB_CoreInit+0xdc>)
 800dc9c:	4013      	ands	r3, r2
 800dc9e:	687a      	ldr	r2, [r7, #4]
 800dca0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	68db      	ldr	r3, [r3, #12]
 800dca6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800dcae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dcb2:	2b01      	cmp	r3, #1
 800dcb4:	d105      	bne.n	800dcc2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	68db      	ldr	r3, [r3, #12]
 800dcba:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f001 faf6 	bl	800f2b4 <USB_CoreReset>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	73fb      	strb	r3, [r7, #15]
 800dccc:	e01b      	b.n	800dd06 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	68db      	ldr	r3, [r3, #12]
 800dcd2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f001 faea 	bl	800f2b4 <USB_CoreReset>
 800dce0:	4603      	mov	r3, r0
 800dce2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800dce4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d106      	bne.n	800dcfa <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcf0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	639a      	str	r2, [r3, #56]	@ 0x38
 800dcf8:	e005      	b.n	800dd06 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcfe:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800dd06:	7fbb      	ldrb	r3, [r7, #30]
 800dd08:	2b01      	cmp	r3, #1
 800dd0a:	d116      	bne.n	800dd3a <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800dd10:	b29a      	uxth	r2, r3
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800dd1a:	4b0d      	ldr	r3, [pc, #52]	@ (800dd50 <USB_CoreInit+0xe0>)
 800dd1c:	4313      	orrs	r3, r2
 800dd1e:	687a      	ldr	r2, [r7, #4]
 800dd20:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	689b      	ldr	r3, [r3, #8]
 800dd26:	f043 0206 	orr.w	r2, r3, #6
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	689b      	ldr	r3, [r3, #8]
 800dd32:	f043 0220 	orr.w	r2, r3, #32
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800dd3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd3c:	4618      	mov	r0, r3
 800dd3e:	3710      	adds	r7, #16
 800dd40:	46bd      	mov	sp, r7
 800dd42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800dd46:	b004      	add	sp, #16
 800dd48:	4770      	bx	lr
 800dd4a:	bf00      	nop
 800dd4c:	ffbdffbf 	.word	0xffbdffbf
 800dd50:	03ee0000 	.word	0x03ee0000

0800dd54 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800dd54:	b480      	push	{r7}
 800dd56:	b087      	sub	sp, #28
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	60f8      	str	r0, [r7, #12]
 800dd5c:	60b9      	str	r1, [r7, #8]
 800dd5e:	4613      	mov	r3, r2
 800dd60:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800dd62:	79fb      	ldrb	r3, [r7, #7]
 800dd64:	2b02      	cmp	r3, #2
 800dd66:	d165      	bne.n	800de34 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800dd68:	68bb      	ldr	r3, [r7, #8]
 800dd6a:	4a41      	ldr	r2, [pc, #260]	@ (800de70 <USB_SetTurnaroundTime+0x11c>)
 800dd6c:	4293      	cmp	r3, r2
 800dd6e:	d906      	bls.n	800dd7e <USB_SetTurnaroundTime+0x2a>
 800dd70:	68bb      	ldr	r3, [r7, #8]
 800dd72:	4a40      	ldr	r2, [pc, #256]	@ (800de74 <USB_SetTurnaroundTime+0x120>)
 800dd74:	4293      	cmp	r3, r2
 800dd76:	d202      	bcs.n	800dd7e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800dd78:	230f      	movs	r3, #15
 800dd7a:	617b      	str	r3, [r7, #20]
 800dd7c:	e062      	b.n	800de44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800dd7e:	68bb      	ldr	r3, [r7, #8]
 800dd80:	4a3c      	ldr	r2, [pc, #240]	@ (800de74 <USB_SetTurnaroundTime+0x120>)
 800dd82:	4293      	cmp	r3, r2
 800dd84:	d306      	bcc.n	800dd94 <USB_SetTurnaroundTime+0x40>
 800dd86:	68bb      	ldr	r3, [r7, #8]
 800dd88:	4a3b      	ldr	r2, [pc, #236]	@ (800de78 <USB_SetTurnaroundTime+0x124>)
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d202      	bcs.n	800dd94 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800dd8e:	230e      	movs	r3, #14
 800dd90:	617b      	str	r3, [r7, #20]
 800dd92:	e057      	b.n	800de44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	4a38      	ldr	r2, [pc, #224]	@ (800de78 <USB_SetTurnaroundTime+0x124>)
 800dd98:	4293      	cmp	r3, r2
 800dd9a:	d306      	bcc.n	800ddaa <USB_SetTurnaroundTime+0x56>
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	4a37      	ldr	r2, [pc, #220]	@ (800de7c <USB_SetTurnaroundTime+0x128>)
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d202      	bcs.n	800ddaa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800dda4:	230d      	movs	r3, #13
 800dda6:	617b      	str	r3, [r7, #20]
 800dda8:	e04c      	b.n	800de44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ddaa:	68bb      	ldr	r3, [r7, #8]
 800ddac:	4a33      	ldr	r2, [pc, #204]	@ (800de7c <USB_SetTurnaroundTime+0x128>)
 800ddae:	4293      	cmp	r3, r2
 800ddb0:	d306      	bcc.n	800ddc0 <USB_SetTurnaroundTime+0x6c>
 800ddb2:	68bb      	ldr	r3, [r7, #8]
 800ddb4:	4a32      	ldr	r2, [pc, #200]	@ (800de80 <USB_SetTurnaroundTime+0x12c>)
 800ddb6:	4293      	cmp	r3, r2
 800ddb8:	d802      	bhi.n	800ddc0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ddba:	230c      	movs	r3, #12
 800ddbc:	617b      	str	r3, [r7, #20]
 800ddbe:	e041      	b.n	800de44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ddc0:	68bb      	ldr	r3, [r7, #8]
 800ddc2:	4a2f      	ldr	r2, [pc, #188]	@ (800de80 <USB_SetTurnaroundTime+0x12c>)
 800ddc4:	4293      	cmp	r3, r2
 800ddc6:	d906      	bls.n	800ddd6 <USB_SetTurnaroundTime+0x82>
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	4a2e      	ldr	r2, [pc, #184]	@ (800de84 <USB_SetTurnaroundTime+0x130>)
 800ddcc:	4293      	cmp	r3, r2
 800ddce:	d802      	bhi.n	800ddd6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ddd0:	230b      	movs	r3, #11
 800ddd2:	617b      	str	r3, [r7, #20]
 800ddd4:	e036      	b.n	800de44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ddd6:	68bb      	ldr	r3, [r7, #8]
 800ddd8:	4a2a      	ldr	r2, [pc, #168]	@ (800de84 <USB_SetTurnaroundTime+0x130>)
 800ddda:	4293      	cmp	r3, r2
 800dddc:	d906      	bls.n	800ddec <USB_SetTurnaroundTime+0x98>
 800ddde:	68bb      	ldr	r3, [r7, #8]
 800dde0:	4a29      	ldr	r2, [pc, #164]	@ (800de88 <USB_SetTurnaroundTime+0x134>)
 800dde2:	4293      	cmp	r3, r2
 800dde4:	d802      	bhi.n	800ddec <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800dde6:	230a      	movs	r3, #10
 800dde8:	617b      	str	r3, [r7, #20]
 800ddea:	e02b      	b.n	800de44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ddec:	68bb      	ldr	r3, [r7, #8]
 800ddee:	4a26      	ldr	r2, [pc, #152]	@ (800de88 <USB_SetTurnaroundTime+0x134>)
 800ddf0:	4293      	cmp	r3, r2
 800ddf2:	d906      	bls.n	800de02 <USB_SetTurnaroundTime+0xae>
 800ddf4:	68bb      	ldr	r3, [r7, #8]
 800ddf6:	4a25      	ldr	r2, [pc, #148]	@ (800de8c <USB_SetTurnaroundTime+0x138>)
 800ddf8:	4293      	cmp	r3, r2
 800ddfa:	d202      	bcs.n	800de02 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ddfc:	2309      	movs	r3, #9
 800ddfe:	617b      	str	r3, [r7, #20]
 800de00:	e020      	b.n	800de44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	4a21      	ldr	r2, [pc, #132]	@ (800de8c <USB_SetTurnaroundTime+0x138>)
 800de06:	4293      	cmp	r3, r2
 800de08:	d306      	bcc.n	800de18 <USB_SetTurnaroundTime+0xc4>
 800de0a:	68bb      	ldr	r3, [r7, #8]
 800de0c:	4a20      	ldr	r2, [pc, #128]	@ (800de90 <USB_SetTurnaroundTime+0x13c>)
 800de0e:	4293      	cmp	r3, r2
 800de10:	d802      	bhi.n	800de18 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800de12:	2308      	movs	r3, #8
 800de14:	617b      	str	r3, [r7, #20]
 800de16:	e015      	b.n	800de44 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800de18:	68bb      	ldr	r3, [r7, #8]
 800de1a:	4a1d      	ldr	r2, [pc, #116]	@ (800de90 <USB_SetTurnaroundTime+0x13c>)
 800de1c:	4293      	cmp	r3, r2
 800de1e:	d906      	bls.n	800de2e <USB_SetTurnaroundTime+0xda>
 800de20:	68bb      	ldr	r3, [r7, #8]
 800de22:	4a1c      	ldr	r2, [pc, #112]	@ (800de94 <USB_SetTurnaroundTime+0x140>)
 800de24:	4293      	cmp	r3, r2
 800de26:	d202      	bcs.n	800de2e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800de28:	2307      	movs	r3, #7
 800de2a:	617b      	str	r3, [r7, #20]
 800de2c:	e00a      	b.n	800de44 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800de2e:	2306      	movs	r3, #6
 800de30:	617b      	str	r3, [r7, #20]
 800de32:	e007      	b.n	800de44 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800de34:	79fb      	ldrb	r3, [r7, #7]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d102      	bne.n	800de40 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800de3a:	2309      	movs	r3, #9
 800de3c:	617b      	str	r3, [r7, #20]
 800de3e:	e001      	b.n	800de44 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800de40:	2309      	movs	r3, #9
 800de42:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	68db      	ldr	r3, [r3, #12]
 800de48:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	68da      	ldr	r2, [r3, #12]
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	029b      	lsls	r3, r3, #10
 800de58:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800de5c:	431a      	orrs	r2, r3
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800de62:	2300      	movs	r3, #0
}
 800de64:	4618      	mov	r0, r3
 800de66:	371c      	adds	r7, #28
 800de68:	46bd      	mov	sp, r7
 800de6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6e:	4770      	bx	lr
 800de70:	00d8acbf 	.word	0x00d8acbf
 800de74:	00e4e1c0 	.word	0x00e4e1c0
 800de78:	00f42400 	.word	0x00f42400
 800de7c:	01067380 	.word	0x01067380
 800de80:	011a499f 	.word	0x011a499f
 800de84:	01312cff 	.word	0x01312cff
 800de88:	014ca43f 	.word	0x014ca43f
 800de8c:	016e3600 	.word	0x016e3600
 800de90:	01a6ab1f 	.word	0x01a6ab1f
 800de94:	01e84800 	.word	0x01e84800

0800de98 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800de98:	b480      	push	{r7}
 800de9a:	b083      	sub	sp, #12
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	689b      	ldr	r3, [r3, #8]
 800dea4:	f043 0201 	orr.w	r2, r3, #1
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800deac:	2300      	movs	r3, #0
}
 800deae:	4618      	mov	r0, r3
 800deb0:	370c      	adds	r7, #12
 800deb2:	46bd      	mov	sp, r7
 800deb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb8:	4770      	bx	lr

0800deba <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800deba:	b480      	push	{r7}
 800debc:	b083      	sub	sp, #12
 800debe:	af00      	add	r7, sp, #0
 800dec0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	689b      	ldr	r3, [r3, #8]
 800dec6:	f023 0201 	bic.w	r2, r3, #1
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800dece:	2300      	movs	r3, #0
}
 800ded0:	4618      	mov	r0, r3
 800ded2:	370c      	adds	r7, #12
 800ded4:	46bd      	mov	sp, r7
 800ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deda:	4770      	bx	lr

0800dedc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800dedc:	b580      	push	{r7, lr}
 800dede:	b084      	sub	sp, #16
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	460b      	mov	r3, r1
 800dee6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800dee8:	2300      	movs	r3, #0
 800deea:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	68db      	ldr	r3, [r3, #12]
 800def0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800def8:	78fb      	ldrb	r3, [r7, #3]
 800defa:	2b01      	cmp	r3, #1
 800defc:	d115      	bne.n	800df2a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	68db      	ldr	r3, [r3, #12]
 800df02:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800df0a:	200a      	movs	r0, #10
 800df0c:	f7f4 fd42 	bl	8002994 <HAL_Delay>
      ms += 10U;
 800df10:	68fb      	ldr	r3, [r7, #12]
 800df12:	330a      	adds	r3, #10
 800df14:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f001 f93b 	bl	800f192 <USB_GetMode>
 800df1c:	4603      	mov	r3, r0
 800df1e:	2b01      	cmp	r3, #1
 800df20:	d01e      	beq.n	800df60 <USB_SetCurrentMode+0x84>
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	2bc7      	cmp	r3, #199	@ 0xc7
 800df26:	d9f0      	bls.n	800df0a <USB_SetCurrentMode+0x2e>
 800df28:	e01a      	b.n	800df60 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800df2a:	78fb      	ldrb	r3, [r7, #3]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d115      	bne.n	800df5c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	68db      	ldr	r3, [r3, #12]
 800df34:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800df3c:	200a      	movs	r0, #10
 800df3e:	f7f4 fd29 	bl	8002994 <HAL_Delay>
      ms += 10U;
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	330a      	adds	r3, #10
 800df46:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f001 f922 	bl	800f192 <USB_GetMode>
 800df4e:	4603      	mov	r3, r0
 800df50:	2b00      	cmp	r3, #0
 800df52:	d005      	beq.n	800df60 <USB_SetCurrentMode+0x84>
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	2bc7      	cmp	r3, #199	@ 0xc7
 800df58:	d9f0      	bls.n	800df3c <USB_SetCurrentMode+0x60>
 800df5a:	e001      	b.n	800df60 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800df5c:	2301      	movs	r3, #1
 800df5e:	e005      	b.n	800df6c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	2bc8      	cmp	r3, #200	@ 0xc8
 800df64:	d101      	bne.n	800df6a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800df66:	2301      	movs	r3, #1
 800df68:	e000      	b.n	800df6c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800df6a:	2300      	movs	r3, #0
}
 800df6c:	4618      	mov	r0, r3
 800df6e:	3710      	adds	r7, #16
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800df74:	b084      	sub	sp, #16
 800df76:	b580      	push	{r7, lr}
 800df78:	b086      	sub	sp, #24
 800df7a:	af00      	add	r7, sp, #0
 800df7c:	6078      	str	r0, [r7, #4]
 800df7e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800df82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800df86:	2300      	movs	r3, #0
 800df88:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800df8e:	2300      	movs	r3, #0
 800df90:	613b      	str	r3, [r7, #16]
 800df92:	e009      	b.n	800dfa8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800df94:	687a      	ldr	r2, [r7, #4]
 800df96:	693b      	ldr	r3, [r7, #16]
 800df98:	3340      	adds	r3, #64	@ 0x40
 800df9a:	009b      	lsls	r3, r3, #2
 800df9c:	4413      	add	r3, r2
 800df9e:	2200      	movs	r2, #0
 800dfa0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800dfa2:	693b      	ldr	r3, [r7, #16]
 800dfa4:	3301      	adds	r3, #1
 800dfa6:	613b      	str	r3, [r7, #16]
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	2b0e      	cmp	r3, #14
 800dfac:	d9f2      	bls.n	800df94 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800dfae:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d11c      	bne.n	800dff0 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800dfbc:	685b      	ldr	r3, [r3, #4]
 800dfbe:	68fa      	ldr	r2, [r7, #12]
 800dfc0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800dfc4:	f043 0302 	orr.w	r3, r3, #2
 800dfc8:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dfce:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	601a      	str	r2, [r3, #0]
 800dfee:	e005      	b.n	800dffc <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dff4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e002:	461a      	mov	r2, r3
 800e004:	2300      	movs	r3, #0
 800e006:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e008:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800e00c:	2b01      	cmp	r3, #1
 800e00e:	d10d      	bne.n	800e02c <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e010:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e014:	2b00      	cmp	r3, #0
 800e016:	d104      	bne.n	800e022 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e018:	2100      	movs	r1, #0
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f000 f968 	bl	800e2f0 <USB_SetDevSpeed>
 800e020:	e008      	b.n	800e034 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e022:	2101      	movs	r1, #1
 800e024:	6878      	ldr	r0, [r7, #4]
 800e026:	f000 f963 	bl	800e2f0 <USB_SetDevSpeed>
 800e02a:	e003      	b.n	800e034 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e02c:	2103      	movs	r1, #3
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f000 f95e 	bl	800e2f0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e034:	2110      	movs	r1, #16
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f000 f8fa 	bl	800e230 <USB_FlushTxFifo>
 800e03c:	4603      	mov	r3, r0
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d001      	beq.n	800e046 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800e042:	2301      	movs	r3, #1
 800e044:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f000 f924 	bl	800e294 <USB_FlushRxFifo>
 800e04c:	4603      	mov	r3, r0
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d001      	beq.n	800e056 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800e052:	2301      	movs	r3, #1
 800e054:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e05c:	461a      	mov	r2, r3
 800e05e:	2300      	movs	r3, #0
 800e060:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e068:	461a      	mov	r2, r3
 800e06a:	2300      	movs	r3, #0
 800e06c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e06e:	68fb      	ldr	r3, [r7, #12]
 800e070:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e074:	461a      	mov	r2, r3
 800e076:	2300      	movs	r3, #0
 800e078:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e07a:	2300      	movs	r3, #0
 800e07c:	613b      	str	r3, [r7, #16]
 800e07e:	e043      	b.n	800e108 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e080:	693b      	ldr	r3, [r7, #16]
 800e082:	015a      	lsls	r2, r3, #5
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	4413      	add	r3, r2
 800e088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e092:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e096:	d118      	bne.n	800e0ca <USB_DevInit+0x156>
    {
      if (i == 0U)
 800e098:	693b      	ldr	r3, [r7, #16]
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d10a      	bne.n	800e0b4 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e09e:	693b      	ldr	r3, [r7, #16]
 800e0a0:	015a      	lsls	r2, r3, #5
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	4413      	add	r3, r2
 800e0a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0aa:	461a      	mov	r2, r3
 800e0ac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e0b0:	6013      	str	r3, [r2, #0]
 800e0b2:	e013      	b.n	800e0dc <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e0b4:	693b      	ldr	r3, [r7, #16]
 800e0b6:	015a      	lsls	r2, r3, #5
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	4413      	add	r3, r2
 800e0bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0c0:	461a      	mov	r2, r3
 800e0c2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e0c6:	6013      	str	r3, [r2, #0]
 800e0c8:	e008      	b.n	800e0dc <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e0ca:	693b      	ldr	r3, [r7, #16]
 800e0cc:	015a      	lsls	r2, r3, #5
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	4413      	add	r3, r2
 800e0d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0d6:	461a      	mov	r2, r3
 800e0d8:	2300      	movs	r3, #0
 800e0da:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e0dc:	693b      	ldr	r3, [r7, #16]
 800e0de:	015a      	lsls	r2, r3, #5
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	4413      	add	r3, r2
 800e0e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	2300      	movs	r3, #0
 800e0ec:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e0ee:	693b      	ldr	r3, [r7, #16]
 800e0f0:	015a      	lsls	r2, r3, #5
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	4413      	add	r3, r2
 800e0f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e0fa:	461a      	mov	r2, r3
 800e0fc:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e100:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e102:	693b      	ldr	r3, [r7, #16]
 800e104:	3301      	adds	r3, #1
 800e106:	613b      	str	r3, [r7, #16]
 800e108:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e10c:	461a      	mov	r2, r3
 800e10e:	693b      	ldr	r3, [r7, #16]
 800e110:	4293      	cmp	r3, r2
 800e112:	d3b5      	bcc.n	800e080 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e114:	2300      	movs	r3, #0
 800e116:	613b      	str	r3, [r7, #16]
 800e118:	e043      	b.n	800e1a2 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	015a      	lsls	r2, r3, #5
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	4413      	add	r3, r2
 800e122:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e12c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e130:	d118      	bne.n	800e164 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d10a      	bne.n	800e14e <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	015a      	lsls	r2, r3, #5
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	4413      	add	r3, r2
 800e140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e144:	461a      	mov	r2, r3
 800e146:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e14a:	6013      	str	r3, [r2, #0]
 800e14c:	e013      	b.n	800e176 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	015a      	lsls	r2, r3, #5
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	4413      	add	r3, r2
 800e156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e15a:	461a      	mov	r2, r3
 800e15c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e160:	6013      	str	r3, [r2, #0]
 800e162:	e008      	b.n	800e176 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e164:	693b      	ldr	r3, [r7, #16]
 800e166:	015a      	lsls	r2, r3, #5
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	4413      	add	r3, r2
 800e16c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e170:	461a      	mov	r2, r3
 800e172:	2300      	movs	r3, #0
 800e174:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e176:	693b      	ldr	r3, [r7, #16]
 800e178:	015a      	lsls	r2, r3, #5
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	4413      	add	r3, r2
 800e17e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e182:	461a      	mov	r2, r3
 800e184:	2300      	movs	r3, #0
 800e186:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e188:	693b      	ldr	r3, [r7, #16]
 800e18a:	015a      	lsls	r2, r3, #5
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	4413      	add	r3, r2
 800e190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e194:	461a      	mov	r2, r3
 800e196:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e19a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e19c:	693b      	ldr	r3, [r7, #16]
 800e19e:	3301      	adds	r3, #1
 800e1a0:	613b      	str	r3, [r7, #16]
 800e1a2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e1a6:	461a      	mov	r2, r3
 800e1a8:	693b      	ldr	r3, [r7, #16]
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	d3b5      	bcc.n	800e11a <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e1b4:	691b      	ldr	r3, [r3, #16]
 800e1b6:	68fa      	ldr	r2, [r7, #12]
 800e1b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e1bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e1c0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800e1ce:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e1d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d105      	bne.n	800e1e4 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	699b      	ldr	r3, [r3, #24]
 800e1dc:	f043 0210 	orr.w	r2, r3, #16
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	699a      	ldr	r2, [r3, #24]
 800e1e8:	4b0f      	ldr	r3, [pc, #60]	@ (800e228 <USB_DevInit+0x2b4>)
 800e1ea:	4313      	orrs	r3, r2
 800e1ec:	687a      	ldr	r2, [r7, #4]
 800e1ee:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e1f0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d005      	beq.n	800e204 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	699b      	ldr	r3, [r3, #24]
 800e1fc:	f043 0208 	orr.w	r2, r3, #8
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e204:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e208:	2b01      	cmp	r3, #1
 800e20a:	d105      	bne.n	800e218 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	699a      	ldr	r2, [r3, #24]
 800e210:	4b06      	ldr	r3, [pc, #24]	@ (800e22c <USB_DevInit+0x2b8>)
 800e212:	4313      	orrs	r3, r2
 800e214:	687a      	ldr	r2, [r7, #4]
 800e216:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e218:	7dfb      	ldrb	r3, [r7, #23]
}
 800e21a:	4618      	mov	r0, r3
 800e21c:	3718      	adds	r7, #24
 800e21e:	46bd      	mov	sp, r7
 800e220:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e224:	b004      	add	sp, #16
 800e226:	4770      	bx	lr
 800e228:	803c3800 	.word	0x803c3800
 800e22c:	40000004 	.word	0x40000004

0800e230 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e230:	b480      	push	{r7}
 800e232:	b085      	sub	sp, #20
 800e234:	af00      	add	r7, sp, #0
 800e236:	6078      	str	r0, [r7, #4]
 800e238:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e23a:	2300      	movs	r3, #0
 800e23c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	3301      	adds	r3, #1
 800e242:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e24a:	d901      	bls.n	800e250 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e24c:	2303      	movs	r3, #3
 800e24e:	e01b      	b.n	800e288 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	691b      	ldr	r3, [r3, #16]
 800e254:	2b00      	cmp	r3, #0
 800e256:	daf2      	bge.n	800e23e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e258:	2300      	movs	r3, #0
 800e25a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e25c:	683b      	ldr	r3, [r7, #0]
 800e25e:	019b      	lsls	r3, r3, #6
 800e260:	f043 0220 	orr.w	r2, r3, #32
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	3301      	adds	r3, #1
 800e26c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e274:	d901      	bls.n	800e27a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e276:	2303      	movs	r3, #3
 800e278:	e006      	b.n	800e288 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	691b      	ldr	r3, [r3, #16]
 800e27e:	f003 0320 	and.w	r3, r3, #32
 800e282:	2b20      	cmp	r3, #32
 800e284:	d0f0      	beq.n	800e268 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e286:	2300      	movs	r3, #0
}
 800e288:	4618      	mov	r0, r3
 800e28a:	3714      	adds	r7, #20
 800e28c:	46bd      	mov	sp, r7
 800e28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e292:	4770      	bx	lr

0800e294 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e294:	b480      	push	{r7}
 800e296:	b085      	sub	sp, #20
 800e298:	af00      	add	r7, sp, #0
 800e29a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e29c:	2300      	movs	r3, #0
 800e29e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	3301      	adds	r3, #1
 800e2a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e2ac:	d901      	bls.n	800e2b2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e2ae:	2303      	movs	r3, #3
 800e2b0:	e018      	b.n	800e2e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e2b2:	687b      	ldr	r3, [r7, #4]
 800e2b4:	691b      	ldr	r3, [r3, #16]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	daf2      	bge.n	800e2a0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2210      	movs	r2, #16
 800e2c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	3301      	adds	r3, #1
 800e2c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e2d0:	d901      	bls.n	800e2d6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e2d2:	2303      	movs	r3, #3
 800e2d4:	e006      	b.n	800e2e4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	691b      	ldr	r3, [r3, #16]
 800e2da:	f003 0310 	and.w	r3, r3, #16
 800e2de:	2b10      	cmp	r3, #16
 800e2e0:	d0f0      	beq.n	800e2c4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e2e2:	2300      	movs	r3, #0
}
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	3714      	adds	r7, #20
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ee:	4770      	bx	lr

0800e2f0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e2f0:	b480      	push	{r7}
 800e2f2:	b085      	sub	sp, #20
 800e2f4:	af00      	add	r7, sp, #0
 800e2f6:	6078      	str	r0, [r7, #4]
 800e2f8:	460b      	mov	r3, r1
 800e2fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e306:	681a      	ldr	r2, [r3, #0]
 800e308:	78fb      	ldrb	r3, [r7, #3]
 800e30a:	68f9      	ldr	r1, [r7, #12]
 800e30c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e310:	4313      	orrs	r3, r2
 800e312:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e314:	2300      	movs	r3, #0
}
 800e316:	4618      	mov	r0, r3
 800e318:	3714      	adds	r7, #20
 800e31a:	46bd      	mov	sp, r7
 800e31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e320:	4770      	bx	lr

0800e322 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800e322:	b480      	push	{r7}
 800e324:	b087      	sub	sp, #28
 800e326:	af00      	add	r7, sp, #0
 800e328:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e32e:	693b      	ldr	r3, [r7, #16]
 800e330:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e334:	689b      	ldr	r3, [r3, #8]
 800e336:	f003 0306 	and.w	r3, r3, #6
 800e33a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d102      	bne.n	800e348 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e342:	2300      	movs	r3, #0
 800e344:	75fb      	strb	r3, [r7, #23]
 800e346:	e00a      	b.n	800e35e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2b02      	cmp	r3, #2
 800e34c:	d002      	beq.n	800e354 <USB_GetDevSpeed+0x32>
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	2b06      	cmp	r3, #6
 800e352:	d102      	bne.n	800e35a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e354:	2302      	movs	r3, #2
 800e356:	75fb      	strb	r3, [r7, #23]
 800e358:	e001      	b.n	800e35e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e35a:	230f      	movs	r3, #15
 800e35c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e35e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e360:	4618      	mov	r0, r3
 800e362:	371c      	adds	r7, #28
 800e364:	46bd      	mov	sp, r7
 800e366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36a:	4770      	bx	lr

0800e36c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e36c:	b480      	push	{r7}
 800e36e:	b085      	sub	sp, #20
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
 800e374:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e37a:	683b      	ldr	r3, [r7, #0]
 800e37c:	781b      	ldrb	r3, [r3, #0]
 800e37e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	785b      	ldrb	r3, [r3, #1]
 800e384:	2b01      	cmp	r3, #1
 800e386:	d139      	bne.n	800e3fc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e38e:	69da      	ldr	r2, [r3, #28]
 800e390:	683b      	ldr	r3, [r7, #0]
 800e392:	781b      	ldrb	r3, [r3, #0]
 800e394:	f003 030f 	and.w	r3, r3, #15
 800e398:	2101      	movs	r1, #1
 800e39a:	fa01 f303 	lsl.w	r3, r1, r3
 800e39e:	b29b      	uxth	r3, r3
 800e3a0:	68f9      	ldr	r1, [r7, #12]
 800e3a2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e3a6:	4313      	orrs	r3, r2
 800e3a8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	015a      	lsls	r2, r3, #5
 800e3ae:	68fb      	ldr	r3, [r7, #12]
 800e3b0:	4413      	add	r3, r2
 800e3b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d153      	bne.n	800e468 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e3c0:	68bb      	ldr	r3, [r7, #8]
 800e3c2:	015a      	lsls	r2, r3, #5
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	4413      	add	r3, r2
 800e3c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3cc:	681a      	ldr	r2, [r3, #0]
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	689b      	ldr	r3, [r3, #8]
 800e3d2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e3d6:	683b      	ldr	r3, [r7, #0]
 800e3d8:	791b      	ldrb	r3, [r3, #4]
 800e3da:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e3dc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	059b      	lsls	r3, r3, #22
 800e3e2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e3e4:	431a      	orrs	r2, r3
 800e3e6:	68bb      	ldr	r3, [r7, #8]
 800e3e8:	0159      	lsls	r1, r3, #5
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	440b      	add	r3, r1
 800e3ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	4b20      	ldr	r3, [pc, #128]	@ (800e478 <USB_ActivateEndpoint+0x10c>)
 800e3f6:	4313      	orrs	r3, r2
 800e3f8:	600b      	str	r3, [r1, #0]
 800e3fa:	e035      	b.n	800e468 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e402:	69da      	ldr	r2, [r3, #28]
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	781b      	ldrb	r3, [r3, #0]
 800e408:	f003 030f 	and.w	r3, r3, #15
 800e40c:	2101      	movs	r1, #1
 800e40e:	fa01 f303 	lsl.w	r3, r1, r3
 800e412:	041b      	lsls	r3, r3, #16
 800e414:	68f9      	ldr	r1, [r7, #12]
 800e416:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e41a:	4313      	orrs	r3, r2
 800e41c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e41e:	68bb      	ldr	r3, [r7, #8]
 800e420:	015a      	lsls	r2, r3, #5
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	4413      	add	r3, r2
 800e426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e430:	2b00      	cmp	r3, #0
 800e432:	d119      	bne.n	800e468 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	015a      	lsls	r2, r3, #5
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	4413      	add	r3, r2
 800e43c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e440:	681a      	ldr	r2, [r3, #0]
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	689b      	ldr	r3, [r3, #8]
 800e446:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e44a:	683b      	ldr	r3, [r7, #0]
 800e44c:	791b      	ldrb	r3, [r3, #4]
 800e44e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e450:	430b      	orrs	r3, r1
 800e452:	431a      	orrs	r2, r3
 800e454:	68bb      	ldr	r3, [r7, #8]
 800e456:	0159      	lsls	r1, r3, #5
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	440b      	add	r3, r1
 800e45c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e460:	4619      	mov	r1, r3
 800e462:	4b05      	ldr	r3, [pc, #20]	@ (800e478 <USB_ActivateEndpoint+0x10c>)
 800e464:	4313      	orrs	r3, r2
 800e466:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e468:	2300      	movs	r3, #0
}
 800e46a:	4618      	mov	r0, r3
 800e46c:	3714      	adds	r7, #20
 800e46e:	46bd      	mov	sp, r7
 800e470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e474:	4770      	bx	lr
 800e476:	bf00      	nop
 800e478:	10008000 	.word	0x10008000

0800e47c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e47c:	b480      	push	{r7}
 800e47e:	b085      	sub	sp, #20
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
 800e484:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	781b      	ldrb	r3, [r3, #0]
 800e48e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e490:	683b      	ldr	r3, [r7, #0]
 800e492:	785b      	ldrb	r3, [r3, #1]
 800e494:	2b01      	cmp	r3, #1
 800e496:	d161      	bne.n	800e55c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e498:	68bb      	ldr	r3, [r7, #8]
 800e49a:	015a      	lsls	r2, r3, #5
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	4413      	add	r3, r2
 800e4a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e4aa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e4ae:	d11f      	bne.n	800e4f0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e4b0:	68bb      	ldr	r3, [r7, #8]
 800e4b2:	015a      	lsls	r2, r3, #5
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	4413      	add	r3, r2
 800e4b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	68ba      	ldr	r2, [r7, #8]
 800e4c0:	0151      	lsls	r1, r2, #5
 800e4c2:	68fa      	ldr	r2, [r7, #12]
 800e4c4:	440a      	add	r2, r1
 800e4c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e4ca:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e4ce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e4d0:	68bb      	ldr	r3, [r7, #8]
 800e4d2:	015a      	lsls	r2, r3, #5
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	4413      	add	r3, r2
 800e4d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	68ba      	ldr	r2, [r7, #8]
 800e4e0:	0151      	lsls	r1, r2, #5
 800e4e2:	68fa      	ldr	r2, [r7, #12]
 800e4e4:	440a      	add	r2, r1
 800e4e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e4ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e4ee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e4f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e4f8:	683b      	ldr	r3, [r7, #0]
 800e4fa:	781b      	ldrb	r3, [r3, #0]
 800e4fc:	f003 030f 	and.w	r3, r3, #15
 800e500:	2101      	movs	r1, #1
 800e502:	fa01 f303 	lsl.w	r3, r1, r3
 800e506:	b29b      	uxth	r3, r3
 800e508:	43db      	mvns	r3, r3
 800e50a:	68f9      	ldr	r1, [r7, #12]
 800e50c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e510:	4013      	ands	r3, r2
 800e512:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e51a:	69da      	ldr	r2, [r3, #28]
 800e51c:	683b      	ldr	r3, [r7, #0]
 800e51e:	781b      	ldrb	r3, [r3, #0]
 800e520:	f003 030f 	and.w	r3, r3, #15
 800e524:	2101      	movs	r1, #1
 800e526:	fa01 f303 	lsl.w	r3, r1, r3
 800e52a:	b29b      	uxth	r3, r3
 800e52c:	43db      	mvns	r3, r3
 800e52e:	68f9      	ldr	r1, [r7, #12]
 800e530:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e534:	4013      	ands	r3, r2
 800e536:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800e538:	68bb      	ldr	r3, [r7, #8]
 800e53a:	015a      	lsls	r2, r3, #5
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	4413      	add	r3, r2
 800e540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e544:	681a      	ldr	r2, [r3, #0]
 800e546:	68bb      	ldr	r3, [r7, #8]
 800e548:	0159      	lsls	r1, r3, #5
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	440b      	add	r3, r1
 800e54e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e552:	4619      	mov	r1, r3
 800e554:	4b35      	ldr	r3, [pc, #212]	@ (800e62c <USB_DeactivateEndpoint+0x1b0>)
 800e556:	4013      	ands	r3, r2
 800e558:	600b      	str	r3, [r1, #0]
 800e55a:	e060      	b.n	800e61e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e55c:	68bb      	ldr	r3, [r7, #8]
 800e55e:	015a      	lsls	r2, r3, #5
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	4413      	add	r3, r2
 800e564:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e56e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e572:	d11f      	bne.n	800e5b4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	015a      	lsls	r2, r3, #5
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	4413      	add	r3, r2
 800e57c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	68ba      	ldr	r2, [r7, #8]
 800e584:	0151      	lsls	r1, r2, #5
 800e586:	68fa      	ldr	r2, [r7, #12]
 800e588:	440a      	add	r2, r1
 800e58a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e58e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e592:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	015a      	lsls	r2, r3, #5
 800e598:	68fb      	ldr	r3, [r7, #12]
 800e59a:	4413      	add	r3, r2
 800e59c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	68ba      	ldr	r2, [r7, #8]
 800e5a4:	0151      	lsls	r1, r2, #5
 800e5a6:	68fa      	ldr	r2, [r7, #12]
 800e5a8:	440a      	add	r2, r1
 800e5aa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e5ae:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e5b2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e5bc:	683b      	ldr	r3, [r7, #0]
 800e5be:	781b      	ldrb	r3, [r3, #0]
 800e5c0:	f003 030f 	and.w	r3, r3, #15
 800e5c4:	2101      	movs	r1, #1
 800e5c6:	fa01 f303 	lsl.w	r3, r1, r3
 800e5ca:	041b      	lsls	r3, r3, #16
 800e5cc:	43db      	mvns	r3, r3
 800e5ce:	68f9      	ldr	r1, [r7, #12]
 800e5d0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e5d4:	4013      	ands	r3, r2
 800e5d6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800e5d8:	68fb      	ldr	r3, [r7, #12]
 800e5da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e5de:	69da      	ldr	r2, [r3, #28]
 800e5e0:	683b      	ldr	r3, [r7, #0]
 800e5e2:	781b      	ldrb	r3, [r3, #0]
 800e5e4:	f003 030f 	and.w	r3, r3, #15
 800e5e8:	2101      	movs	r1, #1
 800e5ea:	fa01 f303 	lsl.w	r3, r1, r3
 800e5ee:	041b      	lsls	r3, r3, #16
 800e5f0:	43db      	mvns	r3, r3
 800e5f2:	68f9      	ldr	r1, [r7, #12]
 800e5f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e5f8:	4013      	ands	r3, r2
 800e5fa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800e5fc:	68bb      	ldr	r3, [r7, #8]
 800e5fe:	015a      	lsls	r2, r3, #5
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	4413      	add	r3, r2
 800e604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e608:	681a      	ldr	r2, [r3, #0]
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	0159      	lsls	r1, r3, #5
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	440b      	add	r3, r1
 800e612:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e616:	4619      	mov	r1, r3
 800e618:	4b05      	ldr	r3, [pc, #20]	@ (800e630 <USB_DeactivateEndpoint+0x1b4>)
 800e61a:	4013      	ands	r3, r2
 800e61c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800e61e:	2300      	movs	r3, #0
}
 800e620:	4618      	mov	r0, r3
 800e622:	3714      	adds	r7, #20
 800e624:	46bd      	mov	sp, r7
 800e626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62a:	4770      	bx	lr
 800e62c:	ec337800 	.word	0xec337800
 800e630:	eff37800 	.word	0xeff37800

0800e634 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b08a      	sub	sp, #40	@ 0x28
 800e638:	af02      	add	r7, sp, #8
 800e63a:	60f8      	str	r0, [r7, #12]
 800e63c:	60b9      	str	r1, [r7, #8]
 800e63e:	4613      	mov	r3, r2
 800e640:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800e646:	68bb      	ldr	r3, [r7, #8]
 800e648:	781b      	ldrb	r3, [r3, #0]
 800e64a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800e64c:	68bb      	ldr	r3, [r7, #8]
 800e64e:	785b      	ldrb	r3, [r3, #1]
 800e650:	2b01      	cmp	r3, #1
 800e652:	f040 8181 	bne.w	800e958 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	691b      	ldr	r3, [r3, #16]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d132      	bne.n	800e6c4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e65e:	69bb      	ldr	r3, [r7, #24]
 800e660:	015a      	lsls	r2, r3, #5
 800e662:	69fb      	ldr	r3, [r7, #28]
 800e664:	4413      	add	r3, r2
 800e666:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e66a:	691a      	ldr	r2, [r3, #16]
 800e66c:	69bb      	ldr	r3, [r7, #24]
 800e66e:	0159      	lsls	r1, r3, #5
 800e670:	69fb      	ldr	r3, [r7, #28]
 800e672:	440b      	add	r3, r1
 800e674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e678:	4619      	mov	r1, r3
 800e67a:	4ba5      	ldr	r3, [pc, #660]	@ (800e910 <USB_EPStartXfer+0x2dc>)
 800e67c:	4013      	ands	r3, r2
 800e67e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e680:	69bb      	ldr	r3, [r7, #24]
 800e682:	015a      	lsls	r2, r3, #5
 800e684:	69fb      	ldr	r3, [r7, #28]
 800e686:	4413      	add	r3, r2
 800e688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e68c:	691b      	ldr	r3, [r3, #16]
 800e68e:	69ba      	ldr	r2, [r7, #24]
 800e690:	0151      	lsls	r1, r2, #5
 800e692:	69fa      	ldr	r2, [r7, #28]
 800e694:	440a      	add	r2, r1
 800e696:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e69a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e69e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e6a0:	69bb      	ldr	r3, [r7, #24]
 800e6a2:	015a      	lsls	r2, r3, #5
 800e6a4:	69fb      	ldr	r3, [r7, #28]
 800e6a6:	4413      	add	r3, r2
 800e6a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6ac:	691a      	ldr	r2, [r3, #16]
 800e6ae:	69bb      	ldr	r3, [r7, #24]
 800e6b0:	0159      	lsls	r1, r3, #5
 800e6b2:	69fb      	ldr	r3, [r7, #28]
 800e6b4:	440b      	add	r3, r1
 800e6b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6ba:	4619      	mov	r1, r3
 800e6bc:	4b95      	ldr	r3, [pc, #596]	@ (800e914 <USB_EPStartXfer+0x2e0>)
 800e6be:	4013      	ands	r3, r2
 800e6c0:	610b      	str	r3, [r1, #16]
 800e6c2:	e092      	b.n	800e7ea <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800e6c4:	69bb      	ldr	r3, [r7, #24]
 800e6c6:	015a      	lsls	r2, r3, #5
 800e6c8:	69fb      	ldr	r3, [r7, #28]
 800e6ca:	4413      	add	r3, r2
 800e6cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6d0:	691a      	ldr	r2, [r3, #16]
 800e6d2:	69bb      	ldr	r3, [r7, #24]
 800e6d4:	0159      	lsls	r1, r3, #5
 800e6d6:	69fb      	ldr	r3, [r7, #28]
 800e6d8:	440b      	add	r3, r1
 800e6da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6de:	4619      	mov	r1, r3
 800e6e0:	4b8c      	ldr	r3, [pc, #560]	@ (800e914 <USB_EPStartXfer+0x2e0>)
 800e6e2:	4013      	ands	r3, r2
 800e6e4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800e6e6:	69bb      	ldr	r3, [r7, #24]
 800e6e8:	015a      	lsls	r2, r3, #5
 800e6ea:	69fb      	ldr	r3, [r7, #28]
 800e6ec:	4413      	add	r3, r2
 800e6ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e6f2:	691a      	ldr	r2, [r3, #16]
 800e6f4:	69bb      	ldr	r3, [r7, #24]
 800e6f6:	0159      	lsls	r1, r3, #5
 800e6f8:	69fb      	ldr	r3, [r7, #28]
 800e6fa:	440b      	add	r3, r1
 800e6fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e700:	4619      	mov	r1, r3
 800e702:	4b83      	ldr	r3, [pc, #524]	@ (800e910 <USB_EPStartXfer+0x2dc>)
 800e704:	4013      	ands	r3, r2
 800e706:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800e708:	69bb      	ldr	r3, [r7, #24]
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d11a      	bne.n	800e744 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	691a      	ldr	r2, [r3, #16]
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	689b      	ldr	r3, [r3, #8]
 800e716:	429a      	cmp	r2, r3
 800e718:	d903      	bls.n	800e722 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800e71a:	68bb      	ldr	r3, [r7, #8]
 800e71c:	689a      	ldr	r2, [r3, #8]
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800e722:	69bb      	ldr	r3, [r7, #24]
 800e724:	015a      	lsls	r2, r3, #5
 800e726:	69fb      	ldr	r3, [r7, #28]
 800e728:	4413      	add	r3, r2
 800e72a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e72e:	691b      	ldr	r3, [r3, #16]
 800e730:	69ba      	ldr	r2, [r7, #24]
 800e732:	0151      	lsls	r1, r2, #5
 800e734:	69fa      	ldr	r2, [r7, #28]
 800e736:	440a      	add	r2, r1
 800e738:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e73c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e740:	6113      	str	r3, [r2, #16]
 800e742:	e01b      	b.n	800e77c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e744:	69bb      	ldr	r3, [r7, #24]
 800e746:	015a      	lsls	r2, r3, #5
 800e748:	69fb      	ldr	r3, [r7, #28]
 800e74a:	4413      	add	r3, r2
 800e74c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e750:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800e752:	68bb      	ldr	r3, [r7, #8]
 800e754:	6919      	ldr	r1, [r3, #16]
 800e756:	68bb      	ldr	r3, [r7, #8]
 800e758:	689b      	ldr	r3, [r3, #8]
 800e75a:	440b      	add	r3, r1
 800e75c:	1e59      	subs	r1, r3, #1
 800e75e:	68bb      	ldr	r3, [r7, #8]
 800e760:	689b      	ldr	r3, [r3, #8]
 800e762:	fbb1 f3f3 	udiv	r3, r1, r3
 800e766:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800e768:	4b6b      	ldr	r3, [pc, #428]	@ (800e918 <USB_EPStartXfer+0x2e4>)
 800e76a:	400b      	ands	r3, r1
 800e76c:	69b9      	ldr	r1, [r7, #24]
 800e76e:	0148      	lsls	r0, r1, #5
 800e770:	69f9      	ldr	r1, [r7, #28]
 800e772:	4401      	add	r1, r0
 800e774:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e778:	4313      	orrs	r3, r2
 800e77a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800e77c:	69bb      	ldr	r3, [r7, #24]
 800e77e:	015a      	lsls	r2, r3, #5
 800e780:	69fb      	ldr	r3, [r7, #28]
 800e782:	4413      	add	r3, r2
 800e784:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e788:	691a      	ldr	r2, [r3, #16]
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	691b      	ldr	r3, [r3, #16]
 800e78e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e792:	69b9      	ldr	r1, [r7, #24]
 800e794:	0148      	lsls	r0, r1, #5
 800e796:	69f9      	ldr	r1, [r7, #28]
 800e798:	4401      	add	r1, r0
 800e79a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800e79e:	4313      	orrs	r3, r2
 800e7a0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	791b      	ldrb	r3, [r3, #4]
 800e7a6:	2b01      	cmp	r3, #1
 800e7a8:	d11f      	bne.n	800e7ea <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800e7aa:	69bb      	ldr	r3, [r7, #24]
 800e7ac:	015a      	lsls	r2, r3, #5
 800e7ae:	69fb      	ldr	r3, [r7, #28]
 800e7b0:	4413      	add	r3, r2
 800e7b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7b6:	691b      	ldr	r3, [r3, #16]
 800e7b8:	69ba      	ldr	r2, [r7, #24]
 800e7ba:	0151      	lsls	r1, r2, #5
 800e7bc:	69fa      	ldr	r2, [r7, #28]
 800e7be:	440a      	add	r2, r1
 800e7c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e7c4:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800e7c8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800e7ca:	69bb      	ldr	r3, [r7, #24]
 800e7cc:	015a      	lsls	r2, r3, #5
 800e7ce:	69fb      	ldr	r3, [r7, #28]
 800e7d0:	4413      	add	r3, r2
 800e7d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e7d6:	691b      	ldr	r3, [r3, #16]
 800e7d8:	69ba      	ldr	r2, [r7, #24]
 800e7da:	0151      	lsls	r1, r2, #5
 800e7dc:	69fa      	ldr	r2, [r7, #28]
 800e7de:	440a      	add	r2, r1
 800e7e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e7e4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e7e8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800e7ea:	79fb      	ldrb	r3, [r7, #7]
 800e7ec:	2b01      	cmp	r3, #1
 800e7ee:	d14b      	bne.n	800e888 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	69db      	ldr	r3, [r3, #28]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d009      	beq.n	800e80c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800e7f8:	69bb      	ldr	r3, [r7, #24]
 800e7fa:	015a      	lsls	r2, r3, #5
 800e7fc:	69fb      	ldr	r3, [r7, #28]
 800e7fe:	4413      	add	r3, r2
 800e800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e804:	461a      	mov	r2, r3
 800e806:	68bb      	ldr	r3, [r7, #8]
 800e808:	69db      	ldr	r3, [r3, #28]
 800e80a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800e80c:	68bb      	ldr	r3, [r7, #8]
 800e80e:	791b      	ldrb	r3, [r3, #4]
 800e810:	2b01      	cmp	r3, #1
 800e812:	d128      	bne.n	800e866 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e814:	69fb      	ldr	r3, [r7, #28]
 800e816:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e81a:	689b      	ldr	r3, [r3, #8]
 800e81c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e820:	2b00      	cmp	r3, #0
 800e822:	d110      	bne.n	800e846 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e824:	69bb      	ldr	r3, [r7, #24]
 800e826:	015a      	lsls	r2, r3, #5
 800e828:	69fb      	ldr	r3, [r7, #28]
 800e82a:	4413      	add	r3, r2
 800e82c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	69ba      	ldr	r2, [r7, #24]
 800e834:	0151      	lsls	r1, r2, #5
 800e836:	69fa      	ldr	r2, [r7, #28]
 800e838:	440a      	add	r2, r1
 800e83a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e83e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e842:	6013      	str	r3, [r2, #0]
 800e844:	e00f      	b.n	800e866 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e846:	69bb      	ldr	r3, [r7, #24]
 800e848:	015a      	lsls	r2, r3, #5
 800e84a:	69fb      	ldr	r3, [r7, #28]
 800e84c:	4413      	add	r3, r2
 800e84e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	69ba      	ldr	r2, [r7, #24]
 800e856:	0151      	lsls	r1, r2, #5
 800e858:	69fa      	ldr	r2, [r7, #28]
 800e85a:	440a      	add	r2, r1
 800e85c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e860:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e864:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e866:	69bb      	ldr	r3, [r7, #24]
 800e868:	015a      	lsls	r2, r3, #5
 800e86a:	69fb      	ldr	r3, [r7, #28]
 800e86c:	4413      	add	r3, r2
 800e86e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	69ba      	ldr	r2, [r7, #24]
 800e876:	0151      	lsls	r1, r2, #5
 800e878:	69fa      	ldr	r2, [r7, #28]
 800e87a:	440a      	add	r2, r1
 800e87c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e880:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e884:	6013      	str	r3, [r2, #0]
 800e886:	e16a      	b.n	800eb5e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800e888:	69bb      	ldr	r3, [r7, #24]
 800e88a:	015a      	lsls	r2, r3, #5
 800e88c:	69fb      	ldr	r3, [r7, #28]
 800e88e:	4413      	add	r3, r2
 800e890:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	69ba      	ldr	r2, [r7, #24]
 800e898:	0151      	lsls	r1, r2, #5
 800e89a:	69fa      	ldr	r2, [r7, #28]
 800e89c:	440a      	add	r2, r1
 800e89e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e8a2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800e8a6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800e8a8:	68bb      	ldr	r3, [r7, #8]
 800e8aa:	791b      	ldrb	r3, [r3, #4]
 800e8ac:	2b01      	cmp	r3, #1
 800e8ae:	d015      	beq.n	800e8dc <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800e8b0:	68bb      	ldr	r3, [r7, #8]
 800e8b2:	691b      	ldr	r3, [r3, #16]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	f000 8152 	beq.w	800eb5e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800e8ba:	69fb      	ldr	r3, [r7, #28]
 800e8bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e8c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	781b      	ldrb	r3, [r3, #0]
 800e8c6:	f003 030f 	and.w	r3, r3, #15
 800e8ca:	2101      	movs	r1, #1
 800e8cc:	fa01 f303 	lsl.w	r3, r1, r3
 800e8d0:	69f9      	ldr	r1, [r7, #28]
 800e8d2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e8d6:	4313      	orrs	r3, r2
 800e8d8:	634b      	str	r3, [r1, #52]	@ 0x34
 800e8da:	e140      	b.n	800eb5e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800e8dc:	69fb      	ldr	r3, [r7, #28]
 800e8de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e8e2:	689b      	ldr	r3, [r3, #8]
 800e8e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d117      	bne.n	800e91c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800e8ec:	69bb      	ldr	r3, [r7, #24]
 800e8ee:	015a      	lsls	r2, r3, #5
 800e8f0:	69fb      	ldr	r3, [r7, #28]
 800e8f2:	4413      	add	r3, r2
 800e8f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	69ba      	ldr	r2, [r7, #24]
 800e8fc:	0151      	lsls	r1, r2, #5
 800e8fe:	69fa      	ldr	r2, [r7, #28]
 800e900:	440a      	add	r2, r1
 800e902:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e906:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800e90a:	6013      	str	r3, [r2, #0]
 800e90c:	e016      	b.n	800e93c <USB_EPStartXfer+0x308>
 800e90e:	bf00      	nop
 800e910:	e007ffff 	.word	0xe007ffff
 800e914:	fff80000 	.word	0xfff80000
 800e918:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800e91c:	69bb      	ldr	r3, [r7, #24]
 800e91e:	015a      	lsls	r2, r3, #5
 800e920:	69fb      	ldr	r3, [r7, #28]
 800e922:	4413      	add	r3, r2
 800e924:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e928:	681b      	ldr	r3, [r3, #0]
 800e92a:	69ba      	ldr	r2, [r7, #24]
 800e92c:	0151      	lsls	r1, r2, #5
 800e92e:	69fa      	ldr	r2, [r7, #28]
 800e930:	440a      	add	r2, r1
 800e932:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e936:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800e93a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800e93c:	68bb      	ldr	r3, [r7, #8]
 800e93e:	68d9      	ldr	r1, [r3, #12]
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	781a      	ldrb	r2, [r3, #0]
 800e944:	68bb      	ldr	r3, [r7, #8]
 800e946:	691b      	ldr	r3, [r3, #16]
 800e948:	b298      	uxth	r0, r3
 800e94a:	79fb      	ldrb	r3, [r7, #7]
 800e94c:	9300      	str	r3, [sp, #0]
 800e94e:	4603      	mov	r3, r0
 800e950:	68f8      	ldr	r0, [r7, #12]
 800e952:	f000 f9b9 	bl	800ecc8 <USB_WritePacket>
 800e956:	e102      	b.n	800eb5e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800e958:	69bb      	ldr	r3, [r7, #24]
 800e95a:	015a      	lsls	r2, r3, #5
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	4413      	add	r3, r2
 800e960:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e964:	691a      	ldr	r2, [r3, #16]
 800e966:	69bb      	ldr	r3, [r7, #24]
 800e968:	0159      	lsls	r1, r3, #5
 800e96a:	69fb      	ldr	r3, [r7, #28]
 800e96c:	440b      	add	r3, r1
 800e96e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e972:	4619      	mov	r1, r3
 800e974:	4b7c      	ldr	r3, [pc, #496]	@ (800eb68 <USB_EPStartXfer+0x534>)
 800e976:	4013      	ands	r3, r2
 800e978:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800e97a:	69bb      	ldr	r3, [r7, #24]
 800e97c:	015a      	lsls	r2, r3, #5
 800e97e:	69fb      	ldr	r3, [r7, #28]
 800e980:	4413      	add	r3, r2
 800e982:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e986:	691a      	ldr	r2, [r3, #16]
 800e988:	69bb      	ldr	r3, [r7, #24]
 800e98a:	0159      	lsls	r1, r3, #5
 800e98c:	69fb      	ldr	r3, [r7, #28]
 800e98e:	440b      	add	r3, r1
 800e990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e994:	4619      	mov	r1, r3
 800e996:	4b75      	ldr	r3, [pc, #468]	@ (800eb6c <USB_EPStartXfer+0x538>)
 800e998:	4013      	ands	r3, r2
 800e99a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800e99c:	69bb      	ldr	r3, [r7, #24]
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	d12f      	bne.n	800ea02 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	691b      	ldr	r3, [r3, #16]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d003      	beq.n	800e9b2 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800e9aa:	68bb      	ldr	r3, [r7, #8]
 800e9ac:	689a      	ldr	r2, [r3, #8]
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800e9b2:	68bb      	ldr	r3, [r7, #8]
 800e9b4:	689a      	ldr	r2, [r3, #8]
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800e9ba:	69bb      	ldr	r3, [r7, #24]
 800e9bc:	015a      	lsls	r2, r3, #5
 800e9be:	69fb      	ldr	r3, [r7, #28]
 800e9c0:	4413      	add	r3, r2
 800e9c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9c6:	691a      	ldr	r2, [r3, #16]
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	6a1b      	ldr	r3, [r3, #32]
 800e9cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800e9d0:	69b9      	ldr	r1, [r7, #24]
 800e9d2:	0148      	lsls	r0, r1, #5
 800e9d4:	69f9      	ldr	r1, [r7, #28]
 800e9d6:	4401      	add	r1, r0
 800e9d8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800e9dc:	4313      	orrs	r3, r2
 800e9de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800e9e0:	69bb      	ldr	r3, [r7, #24]
 800e9e2:	015a      	lsls	r2, r3, #5
 800e9e4:	69fb      	ldr	r3, [r7, #28]
 800e9e6:	4413      	add	r3, r2
 800e9e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e9ec:	691b      	ldr	r3, [r3, #16]
 800e9ee:	69ba      	ldr	r2, [r7, #24]
 800e9f0:	0151      	lsls	r1, r2, #5
 800e9f2:	69fa      	ldr	r2, [r7, #28]
 800e9f4:	440a      	add	r2, r1
 800e9f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800e9fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800e9fe:	6113      	str	r3, [r2, #16]
 800ea00:	e05f      	b.n	800eac2 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	691b      	ldr	r3, [r3, #16]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d123      	bne.n	800ea52 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ea0a:	69bb      	ldr	r3, [r7, #24]
 800ea0c:	015a      	lsls	r2, r3, #5
 800ea0e:	69fb      	ldr	r3, [r7, #28]
 800ea10:	4413      	add	r3, r2
 800ea12:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea16:	691a      	ldr	r2, [r3, #16]
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	689b      	ldr	r3, [r3, #8]
 800ea1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ea20:	69b9      	ldr	r1, [r7, #24]
 800ea22:	0148      	lsls	r0, r1, #5
 800ea24:	69f9      	ldr	r1, [r7, #28]
 800ea26:	4401      	add	r1, r0
 800ea28:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ea2c:	4313      	orrs	r3, r2
 800ea2e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ea30:	69bb      	ldr	r3, [r7, #24]
 800ea32:	015a      	lsls	r2, r3, #5
 800ea34:	69fb      	ldr	r3, [r7, #28]
 800ea36:	4413      	add	r3, r2
 800ea38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea3c:	691b      	ldr	r3, [r3, #16]
 800ea3e:	69ba      	ldr	r2, [r7, #24]
 800ea40:	0151      	lsls	r1, r2, #5
 800ea42:	69fa      	ldr	r2, [r7, #28]
 800ea44:	440a      	add	r2, r1
 800ea46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea4a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ea4e:	6113      	str	r3, [r2, #16]
 800ea50:	e037      	b.n	800eac2 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ea52:	68bb      	ldr	r3, [r7, #8]
 800ea54:	691a      	ldr	r2, [r3, #16]
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	689b      	ldr	r3, [r3, #8]
 800ea5a:	4413      	add	r3, r2
 800ea5c:	1e5a      	subs	r2, r3, #1
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	689b      	ldr	r3, [r3, #8]
 800ea62:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea66:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	689b      	ldr	r3, [r3, #8]
 800ea6c:	8afa      	ldrh	r2, [r7, #22]
 800ea6e:	fb03 f202 	mul.w	r2, r3, r2
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ea76:	69bb      	ldr	r3, [r7, #24]
 800ea78:	015a      	lsls	r2, r3, #5
 800ea7a:	69fb      	ldr	r3, [r7, #28]
 800ea7c:	4413      	add	r3, r2
 800ea7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea82:	691a      	ldr	r2, [r3, #16]
 800ea84:	8afb      	ldrh	r3, [r7, #22]
 800ea86:	04d9      	lsls	r1, r3, #19
 800ea88:	4b39      	ldr	r3, [pc, #228]	@ (800eb70 <USB_EPStartXfer+0x53c>)
 800ea8a:	400b      	ands	r3, r1
 800ea8c:	69b9      	ldr	r1, [r7, #24]
 800ea8e:	0148      	lsls	r0, r1, #5
 800ea90:	69f9      	ldr	r1, [r7, #28]
 800ea92:	4401      	add	r1, r0
 800ea94:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ea98:	4313      	orrs	r3, r2
 800ea9a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ea9c:	69bb      	ldr	r3, [r7, #24]
 800ea9e:	015a      	lsls	r2, r3, #5
 800eaa0:	69fb      	ldr	r3, [r7, #28]
 800eaa2:	4413      	add	r3, r2
 800eaa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eaa8:	691a      	ldr	r2, [r3, #16]
 800eaaa:	68bb      	ldr	r3, [r7, #8]
 800eaac:	6a1b      	ldr	r3, [r3, #32]
 800eaae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eab2:	69b9      	ldr	r1, [r7, #24]
 800eab4:	0148      	lsls	r0, r1, #5
 800eab6:	69f9      	ldr	r1, [r7, #28]
 800eab8:	4401      	add	r1, r0
 800eaba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eabe:	4313      	orrs	r3, r2
 800eac0:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800eac2:	79fb      	ldrb	r3, [r7, #7]
 800eac4:	2b01      	cmp	r3, #1
 800eac6:	d10d      	bne.n	800eae4 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800eac8:	68bb      	ldr	r3, [r7, #8]
 800eaca:	68db      	ldr	r3, [r3, #12]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d009      	beq.n	800eae4 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	68d9      	ldr	r1, [r3, #12]
 800ead4:	69bb      	ldr	r3, [r7, #24]
 800ead6:	015a      	lsls	r2, r3, #5
 800ead8:	69fb      	ldr	r3, [r7, #28]
 800eada:	4413      	add	r3, r2
 800eadc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eae0:	460a      	mov	r2, r1
 800eae2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800eae4:	68bb      	ldr	r3, [r7, #8]
 800eae6:	791b      	ldrb	r3, [r3, #4]
 800eae8:	2b01      	cmp	r3, #1
 800eaea:	d128      	bne.n	800eb3e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800eaec:	69fb      	ldr	r3, [r7, #28]
 800eaee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eaf2:	689b      	ldr	r3, [r3, #8]
 800eaf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d110      	bne.n	800eb1e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800eafc:	69bb      	ldr	r3, [r7, #24]
 800eafe:	015a      	lsls	r2, r3, #5
 800eb00:	69fb      	ldr	r3, [r7, #28]
 800eb02:	4413      	add	r3, r2
 800eb04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	69ba      	ldr	r2, [r7, #24]
 800eb0c:	0151      	lsls	r1, r2, #5
 800eb0e:	69fa      	ldr	r2, [r7, #28]
 800eb10:	440a      	add	r2, r1
 800eb12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb16:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800eb1a:	6013      	str	r3, [r2, #0]
 800eb1c:	e00f      	b.n	800eb3e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800eb1e:	69bb      	ldr	r3, [r7, #24]
 800eb20:	015a      	lsls	r2, r3, #5
 800eb22:	69fb      	ldr	r3, [r7, #28]
 800eb24:	4413      	add	r3, r2
 800eb26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	69ba      	ldr	r2, [r7, #24]
 800eb2e:	0151      	lsls	r1, r2, #5
 800eb30:	69fa      	ldr	r2, [r7, #28]
 800eb32:	440a      	add	r2, r1
 800eb34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800eb3c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800eb3e:	69bb      	ldr	r3, [r7, #24]
 800eb40:	015a      	lsls	r2, r3, #5
 800eb42:	69fb      	ldr	r3, [r7, #28]
 800eb44:	4413      	add	r3, r2
 800eb46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	69ba      	ldr	r2, [r7, #24]
 800eb4e:	0151      	lsls	r1, r2, #5
 800eb50:	69fa      	ldr	r2, [r7, #28]
 800eb52:	440a      	add	r2, r1
 800eb54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eb58:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800eb5c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eb5e:	2300      	movs	r3, #0
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3720      	adds	r7, #32
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}
 800eb68:	fff80000 	.word	0xfff80000
 800eb6c:	e007ffff 	.word	0xe007ffff
 800eb70:	1ff80000 	.word	0x1ff80000

0800eb74 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800eb74:	b480      	push	{r7}
 800eb76:	b087      	sub	sp, #28
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
 800eb7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800eb7e:	2300      	movs	r3, #0
 800eb80:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800eb82:	2300      	movs	r3, #0
 800eb84:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	785b      	ldrb	r3, [r3, #1]
 800eb8e:	2b01      	cmp	r3, #1
 800eb90:	d14a      	bne.n	800ec28 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	781b      	ldrb	r3, [r3, #0]
 800eb96:	015a      	lsls	r2, r3, #5
 800eb98:	693b      	ldr	r3, [r7, #16]
 800eb9a:	4413      	add	r3, r2
 800eb9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800eba6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ebaa:	f040 8086 	bne.w	800ecba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ebae:	683b      	ldr	r3, [r7, #0]
 800ebb0:	781b      	ldrb	r3, [r3, #0]
 800ebb2:	015a      	lsls	r2, r3, #5
 800ebb4:	693b      	ldr	r3, [r7, #16]
 800ebb6:	4413      	add	r3, r2
 800ebb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	683a      	ldr	r2, [r7, #0]
 800ebc0:	7812      	ldrb	r2, [r2, #0]
 800ebc2:	0151      	lsls	r1, r2, #5
 800ebc4:	693a      	ldr	r2, [r7, #16]
 800ebc6:	440a      	add	r2, r1
 800ebc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ebcc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ebd0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	781b      	ldrb	r3, [r3, #0]
 800ebd6:	015a      	lsls	r2, r3, #5
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	4413      	add	r3, r2
 800ebdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ebe0:	681b      	ldr	r3, [r3, #0]
 800ebe2:	683a      	ldr	r2, [r7, #0]
 800ebe4:	7812      	ldrb	r2, [r2, #0]
 800ebe6:	0151      	lsls	r1, r2, #5
 800ebe8:	693a      	ldr	r2, [r7, #16]
 800ebea:	440a      	add	r2, r1
 800ebec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ebf0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ebf4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	3301      	adds	r3, #1
 800ebfa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ec02:	4293      	cmp	r3, r2
 800ec04:	d902      	bls.n	800ec0c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800ec06:	2301      	movs	r3, #1
 800ec08:	75fb      	strb	r3, [r7, #23]
          break;
 800ec0a:	e056      	b.n	800ecba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	781b      	ldrb	r3, [r3, #0]
 800ec10:	015a      	lsls	r2, r3, #5
 800ec12:	693b      	ldr	r3, [r7, #16]
 800ec14:	4413      	add	r3, r2
 800ec16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ec20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ec24:	d0e7      	beq.n	800ebf6 <USB_EPStopXfer+0x82>
 800ec26:	e048      	b.n	800ecba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	781b      	ldrb	r3, [r3, #0]
 800ec2c:	015a      	lsls	r2, r3, #5
 800ec2e:	693b      	ldr	r3, [r7, #16]
 800ec30:	4413      	add	r3, r2
 800ec32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ec3c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ec40:	d13b      	bne.n	800ecba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	781b      	ldrb	r3, [r3, #0]
 800ec46:	015a      	lsls	r2, r3, #5
 800ec48:	693b      	ldr	r3, [r7, #16]
 800ec4a:	4413      	add	r3, r2
 800ec4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	683a      	ldr	r2, [r7, #0]
 800ec54:	7812      	ldrb	r2, [r2, #0]
 800ec56:	0151      	lsls	r1, r2, #5
 800ec58:	693a      	ldr	r2, [r7, #16]
 800ec5a:	440a      	add	r2, r1
 800ec5c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec60:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ec64:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800ec66:	683b      	ldr	r3, [r7, #0]
 800ec68:	781b      	ldrb	r3, [r3, #0]
 800ec6a:	015a      	lsls	r2, r3, #5
 800ec6c:	693b      	ldr	r3, [r7, #16]
 800ec6e:	4413      	add	r3, r2
 800ec70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	683a      	ldr	r2, [r7, #0]
 800ec78:	7812      	ldrb	r2, [r2, #0]
 800ec7a:	0151      	lsls	r1, r2, #5
 800ec7c:	693a      	ldr	r2, [r7, #16]
 800ec7e:	440a      	add	r2, r1
 800ec80:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ec84:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ec88:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	3301      	adds	r3, #1
 800ec8e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	f242 7210 	movw	r2, #10000	@ 0x2710
 800ec96:	4293      	cmp	r3, r2
 800ec98:	d902      	bls.n	800eca0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800ec9a:	2301      	movs	r3, #1
 800ec9c:	75fb      	strb	r3, [r7, #23]
          break;
 800ec9e:	e00c      	b.n	800ecba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	781b      	ldrb	r3, [r3, #0]
 800eca4:	015a      	lsls	r2, r3, #5
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	4413      	add	r3, r2
 800ecaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ecb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ecb8:	d0e7      	beq.n	800ec8a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800ecba:	7dfb      	ldrb	r3, [r7, #23]
}
 800ecbc:	4618      	mov	r0, r3
 800ecbe:	371c      	adds	r7, #28
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc6:	4770      	bx	lr

0800ecc8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800ecc8:	b480      	push	{r7}
 800ecca:	b089      	sub	sp, #36	@ 0x24
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	60f8      	str	r0, [r7, #12]
 800ecd0:	60b9      	str	r1, [r7, #8]
 800ecd2:	4611      	mov	r1, r2
 800ecd4:	461a      	mov	r2, r3
 800ecd6:	460b      	mov	r3, r1
 800ecd8:	71fb      	strb	r3, [r7, #7]
 800ecda:	4613      	mov	r3, r2
 800ecdc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800ece2:	68bb      	ldr	r3, [r7, #8]
 800ece4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800ece6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d123      	bne.n	800ed36 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800ecee:	88bb      	ldrh	r3, [r7, #4]
 800ecf0:	3303      	adds	r3, #3
 800ecf2:	089b      	lsrs	r3, r3, #2
 800ecf4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	61bb      	str	r3, [r7, #24]
 800ecfa:	e018      	b.n	800ed2e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800ecfc:	79fb      	ldrb	r3, [r7, #7]
 800ecfe:	031a      	lsls	r2, r3, #12
 800ed00:	697b      	ldr	r3, [r7, #20]
 800ed02:	4413      	add	r3, r2
 800ed04:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ed08:	461a      	mov	r2, r3
 800ed0a:	69fb      	ldr	r3, [r7, #28]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800ed10:	69fb      	ldr	r3, [r7, #28]
 800ed12:	3301      	adds	r3, #1
 800ed14:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ed16:	69fb      	ldr	r3, [r7, #28]
 800ed18:	3301      	adds	r3, #1
 800ed1a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ed1c:	69fb      	ldr	r3, [r7, #28]
 800ed1e:	3301      	adds	r3, #1
 800ed20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800ed22:	69fb      	ldr	r3, [r7, #28]
 800ed24:	3301      	adds	r3, #1
 800ed26:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800ed28:	69bb      	ldr	r3, [r7, #24]
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	61bb      	str	r3, [r7, #24]
 800ed2e:	69ba      	ldr	r2, [r7, #24]
 800ed30:	693b      	ldr	r3, [r7, #16]
 800ed32:	429a      	cmp	r2, r3
 800ed34:	d3e2      	bcc.n	800ecfc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ed36:	2300      	movs	r3, #0
}
 800ed38:	4618      	mov	r0, r3
 800ed3a:	3724      	adds	r7, #36	@ 0x24
 800ed3c:	46bd      	mov	sp, r7
 800ed3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed42:	4770      	bx	lr

0800ed44 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ed44:	b480      	push	{r7}
 800ed46:	b08b      	sub	sp, #44	@ 0x2c
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	60f8      	str	r0, [r7, #12]
 800ed4c:	60b9      	str	r1, [r7, #8]
 800ed4e:	4613      	mov	r3, r2
 800ed50:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ed56:	68bb      	ldr	r3, [r7, #8]
 800ed58:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ed5a:	88fb      	ldrh	r3, [r7, #6]
 800ed5c:	089b      	lsrs	r3, r3, #2
 800ed5e:	b29b      	uxth	r3, r3
 800ed60:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ed62:	88fb      	ldrh	r3, [r7, #6]
 800ed64:	f003 0303 	and.w	r3, r3, #3
 800ed68:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	623b      	str	r3, [r7, #32]
 800ed6e:	e014      	b.n	800ed9a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ed70:	69bb      	ldr	r3, [r7, #24]
 800ed72:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ed76:	681a      	ldr	r2, [r3, #0]
 800ed78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed7a:	601a      	str	r2, [r3, #0]
    pDest++;
 800ed7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed7e:	3301      	adds	r3, #1
 800ed80:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ed82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed84:	3301      	adds	r3, #1
 800ed86:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ed88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed8a:	3301      	adds	r3, #1
 800ed8c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800ed8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed90:	3301      	adds	r3, #1
 800ed92:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800ed94:	6a3b      	ldr	r3, [r7, #32]
 800ed96:	3301      	adds	r3, #1
 800ed98:	623b      	str	r3, [r7, #32]
 800ed9a:	6a3a      	ldr	r2, [r7, #32]
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	429a      	cmp	r2, r3
 800eda0:	d3e6      	bcc.n	800ed70 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800eda2:	8bfb      	ldrh	r3, [r7, #30]
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d01e      	beq.n	800ede6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800eda8:	2300      	movs	r3, #0
 800edaa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800edac:	69bb      	ldr	r3, [r7, #24]
 800edae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800edb2:	461a      	mov	r2, r3
 800edb4:	f107 0310 	add.w	r3, r7, #16
 800edb8:	6812      	ldr	r2, [r2, #0]
 800edba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800edbc:	693a      	ldr	r2, [r7, #16]
 800edbe:	6a3b      	ldr	r3, [r7, #32]
 800edc0:	b2db      	uxtb	r3, r3
 800edc2:	00db      	lsls	r3, r3, #3
 800edc4:	fa22 f303 	lsr.w	r3, r2, r3
 800edc8:	b2da      	uxtb	r2, r3
 800edca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edcc:	701a      	strb	r2, [r3, #0]
      i++;
 800edce:	6a3b      	ldr	r3, [r7, #32]
 800edd0:	3301      	adds	r3, #1
 800edd2:	623b      	str	r3, [r7, #32]
      pDest++;
 800edd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edd6:	3301      	adds	r3, #1
 800edd8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800edda:	8bfb      	ldrh	r3, [r7, #30]
 800eddc:	3b01      	subs	r3, #1
 800edde:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ede0:	8bfb      	ldrh	r3, [r7, #30]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d1ea      	bne.n	800edbc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ede6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ede8:	4618      	mov	r0, r3
 800edea:	372c      	adds	r7, #44	@ 0x2c
 800edec:	46bd      	mov	sp, r7
 800edee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edf2:	4770      	bx	lr

0800edf4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800edf4:	b480      	push	{r7}
 800edf6:	b085      	sub	sp, #20
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
 800edfc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ee02:	683b      	ldr	r3, [r7, #0]
 800ee04:	781b      	ldrb	r3, [r3, #0]
 800ee06:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	785b      	ldrb	r3, [r3, #1]
 800ee0c:	2b01      	cmp	r3, #1
 800ee0e:	d12c      	bne.n	800ee6a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	015a      	lsls	r2, r3, #5
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	4413      	add	r3, r2
 800ee18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	db12      	blt.n	800ee48 <USB_EPSetStall+0x54>
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d00f      	beq.n	800ee48 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	015a      	lsls	r2, r3, #5
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	4413      	add	r3, r2
 800ee30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	68ba      	ldr	r2, [r7, #8]
 800ee38:	0151      	lsls	r1, r2, #5
 800ee3a:	68fa      	ldr	r2, [r7, #12]
 800ee3c:	440a      	add	r2, r1
 800ee3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ee42:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ee46:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ee48:	68bb      	ldr	r3, [r7, #8]
 800ee4a:	015a      	lsls	r2, r3, #5
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	4413      	add	r3, r2
 800ee50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ee54:	681b      	ldr	r3, [r3, #0]
 800ee56:	68ba      	ldr	r2, [r7, #8]
 800ee58:	0151      	lsls	r1, r2, #5
 800ee5a:	68fa      	ldr	r2, [r7, #12]
 800ee5c:	440a      	add	r2, r1
 800ee5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ee62:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800ee66:	6013      	str	r3, [r2, #0]
 800ee68:	e02b      	b.n	800eec2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	015a      	lsls	r2, r3, #5
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	4413      	add	r3, r2
 800ee72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	2b00      	cmp	r3, #0
 800ee7a:	db12      	blt.n	800eea2 <USB_EPSetStall+0xae>
 800ee7c:	68bb      	ldr	r3, [r7, #8]
 800ee7e:	2b00      	cmp	r3, #0
 800ee80:	d00f      	beq.n	800eea2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	015a      	lsls	r2, r3, #5
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	4413      	add	r3, r2
 800ee8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	68ba      	ldr	r2, [r7, #8]
 800ee92:	0151      	lsls	r1, r2, #5
 800ee94:	68fa      	ldr	r2, [r7, #12]
 800ee96:	440a      	add	r2, r1
 800ee98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ee9c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800eea0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800eea2:	68bb      	ldr	r3, [r7, #8]
 800eea4:	015a      	lsls	r2, r3, #5
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	4413      	add	r3, r2
 800eeaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	68ba      	ldr	r2, [r7, #8]
 800eeb2:	0151      	lsls	r1, r2, #5
 800eeb4:	68fa      	ldr	r2, [r7, #12]
 800eeb6:	440a      	add	r2, r1
 800eeb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eebc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800eec0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800eec2:	2300      	movs	r3, #0
}
 800eec4:	4618      	mov	r0, r3
 800eec6:	3714      	adds	r7, #20
 800eec8:	46bd      	mov	sp, r7
 800eeca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eece:	4770      	bx	lr

0800eed0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800eed0:	b480      	push	{r7}
 800eed2:	b085      	sub	sp, #20
 800eed4:	af00      	add	r7, sp, #0
 800eed6:	6078      	str	r0, [r7, #4]
 800eed8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800eede:	683b      	ldr	r3, [r7, #0]
 800eee0:	781b      	ldrb	r3, [r3, #0]
 800eee2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	785b      	ldrb	r3, [r3, #1]
 800eee8:	2b01      	cmp	r3, #1
 800eeea:	d128      	bne.n	800ef3e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	015a      	lsls	r2, r3, #5
 800eef0:	68fb      	ldr	r3, [r7, #12]
 800eef2:	4413      	add	r3, r2
 800eef4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	68ba      	ldr	r2, [r7, #8]
 800eefc:	0151      	lsls	r1, r2, #5
 800eefe:	68fa      	ldr	r2, [r7, #12]
 800ef00:	440a      	add	r2, r1
 800ef02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef06:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ef0a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	791b      	ldrb	r3, [r3, #4]
 800ef10:	2b03      	cmp	r3, #3
 800ef12:	d003      	beq.n	800ef1c <USB_EPClearStall+0x4c>
 800ef14:	683b      	ldr	r3, [r7, #0]
 800ef16:	791b      	ldrb	r3, [r3, #4]
 800ef18:	2b02      	cmp	r3, #2
 800ef1a:	d138      	bne.n	800ef8e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	015a      	lsls	r2, r3, #5
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	4413      	add	r3, r2
 800ef24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ef28:	681b      	ldr	r3, [r3, #0]
 800ef2a:	68ba      	ldr	r2, [r7, #8]
 800ef2c:	0151      	lsls	r1, r2, #5
 800ef2e:	68fa      	ldr	r2, [r7, #12]
 800ef30:	440a      	add	r2, r1
 800ef32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ef36:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ef3a:	6013      	str	r3, [r2, #0]
 800ef3c:	e027      	b.n	800ef8e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	015a      	lsls	r2, r3, #5
 800ef42:	68fb      	ldr	r3, [r7, #12]
 800ef44:	4413      	add	r3, r2
 800ef46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	68ba      	ldr	r2, [r7, #8]
 800ef4e:	0151      	lsls	r1, r2, #5
 800ef50:	68fa      	ldr	r2, [r7, #12]
 800ef52:	440a      	add	r2, r1
 800ef54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef58:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ef5c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	791b      	ldrb	r3, [r3, #4]
 800ef62:	2b03      	cmp	r3, #3
 800ef64:	d003      	beq.n	800ef6e <USB_EPClearStall+0x9e>
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	791b      	ldrb	r3, [r3, #4]
 800ef6a:	2b02      	cmp	r3, #2
 800ef6c:	d10f      	bne.n	800ef8e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ef6e:	68bb      	ldr	r3, [r7, #8]
 800ef70:	015a      	lsls	r2, r3, #5
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	4413      	add	r3, r2
 800ef76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	68ba      	ldr	r2, [r7, #8]
 800ef7e:	0151      	lsls	r1, r2, #5
 800ef80:	68fa      	ldr	r2, [r7, #12]
 800ef82:	440a      	add	r2, r1
 800ef84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ef8c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ef8e:	2300      	movs	r3, #0
}
 800ef90:	4618      	mov	r0, r3
 800ef92:	3714      	adds	r7, #20
 800ef94:	46bd      	mov	sp, r7
 800ef96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9a:	4770      	bx	lr

0800ef9c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ef9c:	b480      	push	{r7}
 800ef9e:	b085      	sub	sp, #20
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
 800efa4:	460b      	mov	r3, r1
 800efa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	68fa      	ldr	r2, [r7, #12]
 800efb6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800efba:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800efbe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800efc6:	681a      	ldr	r2, [r3, #0]
 800efc8:	78fb      	ldrb	r3, [r7, #3]
 800efca:	011b      	lsls	r3, r3, #4
 800efcc:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800efd0:	68f9      	ldr	r1, [r7, #12]
 800efd2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800efd6:	4313      	orrs	r3, r2
 800efd8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800efda:	2300      	movs	r3, #0
}
 800efdc:	4618      	mov	r0, r3
 800efde:	3714      	adds	r7, #20
 800efe0:	46bd      	mov	sp, r7
 800efe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe6:	4770      	bx	lr

0800efe8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800efe8:	b480      	push	{r7}
 800efea:	b085      	sub	sp, #20
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	68fa      	ldr	r2, [r7, #12]
 800effe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f002:	f023 0303 	bic.w	r3, r3, #3
 800f006:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f00e:	685b      	ldr	r3, [r3, #4]
 800f010:	68fa      	ldr	r2, [r7, #12]
 800f012:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f016:	f023 0302 	bic.w	r3, r3, #2
 800f01a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f01c:	2300      	movs	r3, #0
}
 800f01e:	4618      	mov	r0, r3
 800f020:	3714      	adds	r7, #20
 800f022:	46bd      	mov	sp, r7
 800f024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f028:	4770      	bx	lr

0800f02a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f02a:	b480      	push	{r7}
 800f02c:	b085      	sub	sp, #20
 800f02e:	af00      	add	r7, sp, #0
 800f030:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	68fa      	ldr	r2, [r7, #12]
 800f040:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f044:	f023 0303 	bic.w	r3, r3, #3
 800f048:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f050:	685b      	ldr	r3, [r3, #4]
 800f052:	68fa      	ldr	r2, [r7, #12]
 800f054:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f058:	f043 0302 	orr.w	r3, r3, #2
 800f05c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f05e:	2300      	movs	r3, #0
}
 800f060:	4618      	mov	r0, r3
 800f062:	3714      	adds	r7, #20
 800f064:	46bd      	mov	sp, r7
 800f066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06a:	4770      	bx	lr

0800f06c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800f06c:	b480      	push	{r7}
 800f06e:	b085      	sub	sp, #20
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	695b      	ldr	r3, [r3, #20]
 800f078:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	699b      	ldr	r3, [r3, #24]
 800f07e:	68fa      	ldr	r2, [r7, #12]
 800f080:	4013      	ands	r3, r2
 800f082:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f084:	68fb      	ldr	r3, [r7, #12]
}
 800f086:	4618      	mov	r0, r3
 800f088:	3714      	adds	r7, #20
 800f08a:	46bd      	mov	sp, r7
 800f08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f090:	4770      	bx	lr

0800f092 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f092:	b480      	push	{r7}
 800f094:	b085      	sub	sp, #20
 800f096:	af00      	add	r7, sp, #0
 800f098:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0a4:	699b      	ldr	r3, [r3, #24]
 800f0a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0ae:	69db      	ldr	r3, [r3, #28]
 800f0b0:	68ba      	ldr	r2, [r7, #8]
 800f0b2:	4013      	ands	r3, r2
 800f0b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	0c1b      	lsrs	r3, r3, #16
}
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	3714      	adds	r7, #20
 800f0be:	46bd      	mov	sp, r7
 800f0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c4:	4770      	bx	lr

0800f0c6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f0c6:	b480      	push	{r7}
 800f0c8:	b085      	sub	sp, #20
 800f0ca:	af00      	add	r7, sp, #0
 800f0cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f0d2:	68fb      	ldr	r3, [r7, #12]
 800f0d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0d8:	699b      	ldr	r3, [r3, #24]
 800f0da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f0e2:	69db      	ldr	r3, [r3, #28]
 800f0e4:	68ba      	ldr	r2, [r7, #8]
 800f0e6:	4013      	ands	r3, r2
 800f0e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f0ea:	68bb      	ldr	r3, [r7, #8]
 800f0ec:	b29b      	uxth	r3, r3
}
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3714      	adds	r7, #20
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f8:	4770      	bx	lr

0800f0fa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f0fa:	b480      	push	{r7}
 800f0fc:	b085      	sub	sp, #20
 800f0fe:	af00      	add	r7, sp, #0
 800f100:	6078      	str	r0, [r7, #4]
 800f102:	460b      	mov	r3, r1
 800f104:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f10a:	78fb      	ldrb	r3, [r7, #3]
 800f10c:	015a      	lsls	r2, r3, #5
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	4413      	add	r3, r2
 800f112:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f116:	689b      	ldr	r3, [r3, #8]
 800f118:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f11a:	68fb      	ldr	r3, [r7, #12]
 800f11c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f120:	695b      	ldr	r3, [r3, #20]
 800f122:	68ba      	ldr	r2, [r7, #8]
 800f124:	4013      	ands	r3, r2
 800f126:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f128:	68bb      	ldr	r3, [r7, #8]
}
 800f12a:	4618      	mov	r0, r3
 800f12c:	3714      	adds	r7, #20
 800f12e:	46bd      	mov	sp, r7
 800f130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f134:	4770      	bx	lr

0800f136 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f136:	b480      	push	{r7}
 800f138:	b087      	sub	sp, #28
 800f13a:	af00      	add	r7, sp, #0
 800f13c:	6078      	str	r0, [r7, #4]
 800f13e:	460b      	mov	r3, r1
 800f140:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f146:	697b      	ldr	r3, [r7, #20]
 800f148:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f14c:	691b      	ldr	r3, [r3, #16]
 800f14e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f158:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f15a:	78fb      	ldrb	r3, [r7, #3]
 800f15c:	f003 030f 	and.w	r3, r3, #15
 800f160:	68fa      	ldr	r2, [r7, #12]
 800f162:	fa22 f303 	lsr.w	r3, r2, r3
 800f166:	01db      	lsls	r3, r3, #7
 800f168:	b2db      	uxtb	r3, r3
 800f16a:	693a      	ldr	r2, [r7, #16]
 800f16c:	4313      	orrs	r3, r2
 800f16e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f170:	78fb      	ldrb	r3, [r7, #3]
 800f172:	015a      	lsls	r2, r3, #5
 800f174:	697b      	ldr	r3, [r7, #20]
 800f176:	4413      	add	r3, r2
 800f178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f17c:	689b      	ldr	r3, [r3, #8]
 800f17e:	693a      	ldr	r2, [r7, #16]
 800f180:	4013      	ands	r3, r2
 800f182:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f184:	68bb      	ldr	r3, [r7, #8]
}
 800f186:	4618      	mov	r0, r3
 800f188:	371c      	adds	r7, #28
 800f18a:	46bd      	mov	sp, r7
 800f18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f190:	4770      	bx	lr

0800f192 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800f192:	b480      	push	{r7}
 800f194:	b083      	sub	sp, #12
 800f196:	af00      	add	r7, sp, #0
 800f198:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	695b      	ldr	r3, [r3, #20]
 800f19e:	f003 0301 	and.w	r3, r3, #1
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	370c      	adds	r7, #12
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ac:	4770      	bx	lr
	...

0800f1b0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800f1b0:	b480      	push	{r7}
 800f1b2:	b085      	sub	sp, #20
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f1c2:	681a      	ldr	r2, [r3, #0]
 800f1c4:	68fb      	ldr	r3, [r7, #12]
 800f1c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f1ca:	4619      	mov	r1, r3
 800f1cc:	4b09      	ldr	r3, [pc, #36]	@ (800f1f4 <USB_ActivateSetup+0x44>)
 800f1ce:	4013      	ands	r3, r2
 800f1d0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f1d2:	68fb      	ldr	r3, [r7, #12]
 800f1d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f1d8:	685b      	ldr	r3, [r3, #4]
 800f1da:	68fa      	ldr	r2, [r7, #12]
 800f1dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f1e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f1e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f1e6:	2300      	movs	r3, #0
}
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	3714      	adds	r7, #20
 800f1ec:	46bd      	mov	sp, r7
 800f1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1f2:	4770      	bx	lr
 800f1f4:	fffff800 	.word	0xfffff800

0800f1f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800f1f8:	b480      	push	{r7}
 800f1fa:	b087      	sub	sp, #28
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	60f8      	str	r0, [r7, #12]
 800f200:	460b      	mov	r3, r1
 800f202:	607a      	str	r2, [r7, #4]
 800f204:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800f20a:	68fb      	ldr	r3, [r7, #12]
 800f20c:	333c      	adds	r3, #60	@ 0x3c
 800f20e:	3304      	adds	r3, #4
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f214:	693b      	ldr	r3, [r7, #16]
 800f216:	4a26      	ldr	r2, [pc, #152]	@ (800f2b0 <USB_EP0_OutStart+0xb8>)
 800f218:	4293      	cmp	r3, r2
 800f21a:	d90a      	bls.n	800f232 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f21c:	697b      	ldr	r3, [r7, #20]
 800f21e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f228:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f22c:	d101      	bne.n	800f232 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f22e:	2300      	movs	r3, #0
 800f230:	e037      	b.n	800f2a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f238:	461a      	mov	r2, r3
 800f23a:	2300      	movs	r3, #0
 800f23c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f23e:	697b      	ldr	r3, [r7, #20]
 800f240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f244:	691b      	ldr	r3, [r3, #16]
 800f246:	697a      	ldr	r2, [r7, #20]
 800f248:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f24c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f250:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f258:	691b      	ldr	r3, [r3, #16]
 800f25a:	697a      	ldr	r2, [r7, #20]
 800f25c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f260:	f043 0318 	orr.w	r3, r3, #24
 800f264:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f26c:	691b      	ldr	r3, [r3, #16]
 800f26e:	697a      	ldr	r2, [r7, #20]
 800f270:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f274:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800f278:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f27a:	7afb      	ldrb	r3, [r7, #11]
 800f27c:	2b01      	cmp	r3, #1
 800f27e:	d10f      	bne.n	800f2a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f280:	697b      	ldr	r3, [r7, #20]
 800f282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f286:	461a      	mov	r2, r3
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f28c:	697b      	ldr	r3, [r7, #20]
 800f28e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	697a      	ldr	r2, [r7, #20]
 800f296:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f29a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800f29e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f2a0:	2300      	movs	r3, #0
}
 800f2a2:	4618      	mov	r0, r3
 800f2a4:	371c      	adds	r7, #28
 800f2a6:	46bd      	mov	sp, r7
 800f2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ac:	4770      	bx	lr
 800f2ae:	bf00      	nop
 800f2b0:	4f54300a 	.word	0x4f54300a

0800f2b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f2b4:	b480      	push	{r7}
 800f2b6:	b085      	sub	sp, #20
 800f2b8:	af00      	add	r7, sp, #0
 800f2ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f2bc:	2300      	movs	r3, #0
 800f2be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	3301      	adds	r3, #1
 800f2c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f2cc:	d901      	bls.n	800f2d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f2ce:	2303      	movs	r3, #3
 800f2d0:	e01b      	b.n	800f30a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	691b      	ldr	r3, [r3, #16]
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	daf2      	bge.n	800f2c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f2da:	2300      	movs	r3, #0
 800f2dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	691b      	ldr	r3, [r3, #16]
 800f2e2:	f043 0201 	orr.w	r2, r3, #1
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	3301      	adds	r3, #1
 800f2ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f2f0:	68fb      	ldr	r3, [r7, #12]
 800f2f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f2f6:	d901      	bls.n	800f2fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f2f8:	2303      	movs	r3, #3
 800f2fa:	e006      	b.n	800f30a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	691b      	ldr	r3, [r3, #16]
 800f300:	f003 0301 	and.w	r3, r3, #1
 800f304:	2b01      	cmp	r3, #1
 800f306:	d0f0      	beq.n	800f2ea <USB_CoreReset+0x36>

  return HAL_OK;
 800f308:	2300      	movs	r3, #0
}
 800f30a:	4618      	mov	r0, r3
 800f30c:	3714      	adds	r7, #20
 800f30e:	46bd      	mov	sp, r7
 800f310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f314:	4770      	bx	lr
	...

0800f318 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b084      	sub	sp, #16
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
 800f320:	460b      	mov	r3, r1
 800f322:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f324:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800f328:	f002 fcfe 	bl	8011d28 <USBD_static_malloc>
 800f32c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f32e:	68fb      	ldr	r3, [r7, #12]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d109      	bne.n	800f348 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	32b0      	adds	r2, #176	@ 0xb0
 800f33e:	2100      	movs	r1, #0
 800f340:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f344:	2302      	movs	r3, #2
 800f346:	e0d4      	b.n	800f4f2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800f348:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800f34c:	2100      	movs	r1, #0
 800f34e:	68f8      	ldr	r0, [r7, #12]
 800f350:	f003 fa8b 	bl	801286a <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	32b0      	adds	r2, #176	@ 0xb0
 800f35e:	68f9      	ldr	r1, [r7, #12]
 800f360:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	32b0      	adds	r2, #176	@ 0xb0
 800f36e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	7c1b      	ldrb	r3, [r3, #16]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d138      	bne.n	800f3f2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f380:	4b5e      	ldr	r3, [pc, #376]	@ (800f4fc <USBD_CDC_Init+0x1e4>)
 800f382:	7819      	ldrb	r1, [r3, #0]
 800f384:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f388:	2202      	movs	r2, #2
 800f38a:	6878      	ldr	r0, [r7, #4]
 800f38c:	f002 fba9 	bl	8011ae2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f390:	4b5a      	ldr	r3, [pc, #360]	@ (800f4fc <USBD_CDC_Init+0x1e4>)
 800f392:	781b      	ldrb	r3, [r3, #0]
 800f394:	f003 020f 	and.w	r2, r3, #15
 800f398:	6879      	ldr	r1, [r7, #4]
 800f39a:	4613      	mov	r3, r2
 800f39c:	009b      	lsls	r3, r3, #2
 800f39e:	4413      	add	r3, r2
 800f3a0:	009b      	lsls	r3, r3, #2
 800f3a2:	440b      	add	r3, r1
 800f3a4:	3324      	adds	r3, #36	@ 0x24
 800f3a6:	2201      	movs	r2, #1
 800f3a8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f3aa:	4b55      	ldr	r3, [pc, #340]	@ (800f500 <USBD_CDC_Init+0x1e8>)
 800f3ac:	7819      	ldrb	r1, [r3, #0]
 800f3ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f3b2:	2202      	movs	r2, #2
 800f3b4:	6878      	ldr	r0, [r7, #4]
 800f3b6:	f002 fb94 	bl	8011ae2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f3ba:	4b51      	ldr	r3, [pc, #324]	@ (800f500 <USBD_CDC_Init+0x1e8>)
 800f3bc:	781b      	ldrb	r3, [r3, #0]
 800f3be:	f003 020f 	and.w	r2, r3, #15
 800f3c2:	6879      	ldr	r1, [r7, #4]
 800f3c4:	4613      	mov	r3, r2
 800f3c6:	009b      	lsls	r3, r3, #2
 800f3c8:	4413      	add	r3, r2
 800f3ca:	009b      	lsls	r3, r3, #2
 800f3cc:	440b      	add	r3, r1
 800f3ce:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f3d2:	2201      	movs	r2, #1
 800f3d4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f3d6:	4b4b      	ldr	r3, [pc, #300]	@ (800f504 <USBD_CDC_Init+0x1ec>)
 800f3d8:	781b      	ldrb	r3, [r3, #0]
 800f3da:	f003 020f 	and.w	r2, r3, #15
 800f3de:	6879      	ldr	r1, [r7, #4]
 800f3e0:	4613      	mov	r3, r2
 800f3e2:	009b      	lsls	r3, r3, #2
 800f3e4:	4413      	add	r3, r2
 800f3e6:	009b      	lsls	r3, r3, #2
 800f3e8:	440b      	add	r3, r1
 800f3ea:	3326      	adds	r3, #38	@ 0x26
 800f3ec:	2210      	movs	r2, #16
 800f3ee:	801a      	strh	r2, [r3, #0]
 800f3f0:	e035      	b.n	800f45e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f3f2:	4b42      	ldr	r3, [pc, #264]	@ (800f4fc <USBD_CDC_Init+0x1e4>)
 800f3f4:	7819      	ldrb	r1, [r3, #0]
 800f3f6:	2340      	movs	r3, #64	@ 0x40
 800f3f8:	2202      	movs	r2, #2
 800f3fa:	6878      	ldr	r0, [r7, #4]
 800f3fc:	f002 fb71 	bl	8011ae2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f400:	4b3e      	ldr	r3, [pc, #248]	@ (800f4fc <USBD_CDC_Init+0x1e4>)
 800f402:	781b      	ldrb	r3, [r3, #0]
 800f404:	f003 020f 	and.w	r2, r3, #15
 800f408:	6879      	ldr	r1, [r7, #4]
 800f40a:	4613      	mov	r3, r2
 800f40c:	009b      	lsls	r3, r3, #2
 800f40e:	4413      	add	r3, r2
 800f410:	009b      	lsls	r3, r3, #2
 800f412:	440b      	add	r3, r1
 800f414:	3324      	adds	r3, #36	@ 0x24
 800f416:	2201      	movs	r2, #1
 800f418:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f41a:	4b39      	ldr	r3, [pc, #228]	@ (800f500 <USBD_CDC_Init+0x1e8>)
 800f41c:	7819      	ldrb	r1, [r3, #0]
 800f41e:	2340      	movs	r3, #64	@ 0x40
 800f420:	2202      	movs	r2, #2
 800f422:	6878      	ldr	r0, [r7, #4]
 800f424:	f002 fb5d 	bl	8011ae2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f428:	4b35      	ldr	r3, [pc, #212]	@ (800f500 <USBD_CDC_Init+0x1e8>)
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	f003 020f 	and.w	r2, r3, #15
 800f430:	6879      	ldr	r1, [r7, #4]
 800f432:	4613      	mov	r3, r2
 800f434:	009b      	lsls	r3, r3, #2
 800f436:	4413      	add	r3, r2
 800f438:	009b      	lsls	r3, r3, #2
 800f43a:	440b      	add	r3, r1
 800f43c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f440:	2201      	movs	r2, #1
 800f442:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f444:	4b2f      	ldr	r3, [pc, #188]	@ (800f504 <USBD_CDC_Init+0x1ec>)
 800f446:	781b      	ldrb	r3, [r3, #0]
 800f448:	f003 020f 	and.w	r2, r3, #15
 800f44c:	6879      	ldr	r1, [r7, #4]
 800f44e:	4613      	mov	r3, r2
 800f450:	009b      	lsls	r3, r3, #2
 800f452:	4413      	add	r3, r2
 800f454:	009b      	lsls	r3, r3, #2
 800f456:	440b      	add	r3, r1
 800f458:	3326      	adds	r3, #38	@ 0x26
 800f45a:	2210      	movs	r2, #16
 800f45c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f45e:	4b29      	ldr	r3, [pc, #164]	@ (800f504 <USBD_CDC_Init+0x1ec>)
 800f460:	7819      	ldrb	r1, [r3, #0]
 800f462:	2308      	movs	r3, #8
 800f464:	2203      	movs	r2, #3
 800f466:	6878      	ldr	r0, [r7, #4]
 800f468:	f002 fb3b 	bl	8011ae2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800f46c:	4b25      	ldr	r3, [pc, #148]	@ (800f504 <USBD_CDC_Init+0x1ec>)
 800f46e:	781b      	ldrb	r3, [r3, #0]
 800f470:	f003 020f 	and.w	r2, r3, #15
 800f474:	6879      	ldr	r1, [r7, #4]
 800f476:	4613      	mov	r3, r2
 800f478:	009b      	lsls	r3, r3, #2
 800f47a:	4413      	add	r3, r2
 800f47c:	009b      	lsls	r3, r3, #2
 800f47e:	440b      	add	r3, r1
 800f480:	3324      	adds	r3, #36	@ 0x24
 800f482:	2201      	movs	r2, #1
 800f484:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	2200      	movs	r2, #0
 800f48a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f494:	687a      	ldr	r2, [r7, #4]
 800f496:	33b0      	adds	r3, #176	@ 0xb0
 800f498:	009b      	lsls	r3, r3, #2
 800f49a:	4413      	add	r3, r2
 800f49c:	685b      	ldr	r3, [r3, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f4a2:	68fb      	ldr	r3, [r7, #12]
 800f4a4:	2200      	movs	r2, #0
 800f4a6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d101      	bne.n	800f4c0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800f4bc:	2302      	movs	r3, #2
 800f4be:	e018      	b.n	800f4f2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	7c1b      	ldrb	r3, [r3, #16]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d10a      	bne.n	800f4de <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f4c8:	4b0d      	ldr	r3, [pc, #52]	@ (800f500 <USBD_CDC_Init+0x1e8>)
 800f4ca:	7819      	ldrb	r1, [r3, #0]
 800f4cc:	68fb      	ldr	r3, [r7, #12]
 800f4ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f4d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f4d6:	6878      	ldr	r0, [r7, #4]
 800f4d8:	f002 fbf2 	bl	8011cc0 <USBD_LL_PrepareReceive>
 800f4dc:	e008      	b.n	800f4f0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f4de:	4b08      	ldr	r3, [pc, #32]	@ (800f500 <USBD_CDC_Init+0x1e8>)
 800f4e0:	7819      	ldrb	r1, [r3, #0]
 800f4e2:	68fb      	ldr	r3, [r7, #12]
 800f4e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f4e8:	2340      	movs	r3, #64	@ 0x40
 800f4ea:	6878      	ldr	r0, [r7, #4]
 800f4ec:	f002 fbe8 	bl	8011cc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f4f0:	2300      	movs	r3, #0
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3710      	adds	r7, #16
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	bd80      	pop	{r7, pc}
 800f4fa:	bf00      	nop
 800f4fc:	240000bb 	.word	0x240000bb
 800f500:	240000bc 	.word	0x240000bc
 800f504:	240000bd 	.word	0x240000bd

0800f508 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b082      	sub	sp, #8
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	460b      	mov	r3, r1
 800f512:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800f514:	4b3a      	ldr	r3, [pc, #232]	@ (800f600 <USBD_CDC_DeInit+0xf8>)
 800f516:	781b      	ldrb	r3, [r3, #0]
 800f518:	4619      	mov	r1, r3
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f002 fb07 	bl	8011b2e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800f520:	4b37      	ldr	r3, [pc, #220]	@ (800f600 <USBD_CDC_DeInit+0xf8>)
 800f522:	781b      	ldrb	r3, [r3, #0]
 800f524:	f003 020f 	and.w	r2, r3, #15
 800f528:	6879      	ldr	r1, [r7, #4]
 800f52a:	4613      	mov	r3, r2
 800f52c:	009b      	lsls	r3, r3, #2
 800f52e:	4413      	add	r3, r2
 800f530:	009b      	lsls	r3, r3, #2
 800f532:	440b      	add	r3, r1
 800f534:	3324      	adds	r3, #36	@ 0x24
 800f536:	2200      	movs	r2, #0
 800f538:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800f53a:	4b32      	ldr	r3, [pc, #200]	@ (800f604 <USBD_CDC_DeInit+0xfc>)
 800f53c:	781b      	ldrb	r3, [r3, #0]
 800f53e:	4619      	mov	r1, r3
 800f540:	6878      	ldr	r0, [r7, #4]
 800f542:	f002 faf4 	bl	8011b2e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800f546:	4b2f      	ldr	r3, [pc, #188]	@ (800f604 <USBD_CDC_DeInit+0xfc>)
 800f548:	781b      	ldrb	r3, [r3, #0]
 800f54a:	f003 020f 	and.w	r2, r3, #15
 800f54e:	6879      	ldr	r1, [r7, #4]
 800f550:	4613      	mov	r3, r2
 800f552:	009b      	lsls	r3, r3, #2
 800f554:	4413      	add	r3, r2
 800f556:	009b      	lsls	r3, r3, #2
 800f558:	440b      	add	r3, r1
 800f55a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f55e:	2200      	movs	r2, #0
 800f560:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800f562:	4b29      	ldr	r3, [pc, #164]	@ (800f608 <USBD_CDC_DeInit+0x100>)
 800f564:	781b      	ldrb	r3, [r3, #0]
 800f566:	4619      	mov	r1, r3
 800f568:	6878      	ldr	r0, [r7, #4]
 800f56a:	f002 fae0 	bl	8011b2e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800f56e:	4b26      	ldr	r3, [pc, #152]	@ (800f608 <USBD_CDC_DeInit+0x100>)
 800f570:	781b      	ldrb	r3, [r3, #0]
 800f572:	f003 020f 	and.w	r2, r3, #15
 800f576:	6879      	ldr	r1, [r7, #4]
 800f578:	4613      	mov	r3, r2
 800f57a:	009b      	lsls	r3, r3, #2
 800f57c:	4413      	add	r3, r2
 800f57e:	009b      	lsls	r3, r3, #2
 800f580:	440b      	add	r3, r1
 800f582:	3324      	adds	r3, #36	@ 0x24
 800f584:	2200      	movs	r2, #0
 800f586:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800f588:	4b1f      	ldr	r3, [pc, #124]	@ (800f608 <USBD_CDC_DeInit+0x100>)
 800f58a:	781b      	ldrb	r3, [r3, #0]
 800f58c:	f003 020f 	and.w	r2, r3, #15
 800f590:	6879      	ldr	r1, [r7, #4]
 800f592:	4613      	mov	r3, r2
 800f594:	009b      	lsls	r3, r3, #2
 800f596:	4413      	add	r3, r2
 800f598:	009b      	lsls	r3, r3, #2
 800f59a:	440b      	add	r3, r1
 800f59c:	3326      	adds	r3, #38	@ 0x26
 800f59e:	2200      	movs	r2, #0
 800f5a0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	32b0      	adds	r2, #176	@ 0xb0
 800f5ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d01f      	beq.n	800f5f4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f5ba:	687a      	ldr	r2, [r7, #4]
 800f5bc:	33b0      	adds	r3, #176	@ 0xb0
 800f5be:	009b      	lsls	r3, r3, #2
 800f5c0:	4413      	add	r3, r2
 800f5c2:	685b      	ldr	r3, [r3, #4]
 800f5c4:	685b      	ldr	r3, [r3, #4]
 800f5c6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	32b0      	adds	r2, #176	@ 0xb0
 800f5d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	f002 fbb4 	bl	8011d44 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	32b0      	adds	r2, #176	@ 0xb0
 800f5e6:	2100      	movs	r1, #0
 800f5e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800f5f4:	2300      	movs	r3, #0
}
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	3708      	adds	r7, #8
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	bd80      	pop	{r7, pc}
 800f5fe:	bf00      	nop
 800f600:	240000bb 	.word	0x240000bb
 800f604:	240000bc 	.word	0x240000bc
 800f608:	240000bd 	.word	0x240000bd

0800f60c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b086      	sub	sp, #24
 800f610:	af00      	add	r7, sp, #0
 800f612:	6078      	str	r0, [r7, #4]
 800f614:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	32b0      	adds	r2, #176	@ 0xb0
 800f620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f624:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800f626:	2300      	movs	r3, #0
 800f628:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800f62a:	2300      	movs	r3, #0
 800f62c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800f62e:	2300      	movs	r3, #0
 800f630:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800f632:	693b      	ldr	r3, [r7, #16]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d101      	bne.n	800f63c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800f638:	2303      	movs	r3, #3
 800f63a:	e0bf      	b.n	800f7bc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f63c:	683b      	ldr	r3, [r7, #0]
 800f63e:	781b      	ldrb	r3, [r3, #0]
 800f640:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800f644:	2b00      	cmp	r3, #0
 800f646:	d050      	beq.n	800f6ea <USBD_CDC_Setup+0xde>
 800f648:	2b20      	cmp	r3, #32
 800f64a:	f040 80af 	bne.w	800f7ac <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	88db      	ldrh	r3, [r3, #6]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d03a      	beq.n	800f6cc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800f656:	683b      	ldr	r3, [r7, #0]
 800f658:	781b      	ldrb	r3, [r3, #0]
 800f65a:	b25b      	sxtb	r3, r3
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	da1b      	bge.n	800f698 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f666:	687a      	ldr	r2, [r7, #4]
 800f668:	33b0      	adds	r3, #176	@ 0xb0
 800f66a:	009b      	lsls	r3, r3, #2
 800f66c:	4413      	add	r3, r2
 800f66e:	685b      	ldr	r3, [r3, #4]
 800f670:	689b      	ldr	r3, [r3, #8]
 800f672:	683a      	ldr	r2, [r7, #0]
 800f674:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800f676:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f678:	683a      	ldr	r2, [r7, #0]
 800f67a:	88d2      	ldrh	r2, [r2, #6]
 800f67c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800f67e:	683b      	ldr	r3, [r7, #0]
 800f680:	88db      	ldrh	r3, [r3, #6]
 800f682:	2b07      	cmp	r3, #7
 800f684:	bf28      	it	cs
 800f686:	2307      	movcs	r3, #7
 800f688:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800f68a:	693b      	ldr	r3, [r7, #16]
 800f68c:	89fa      	ldrh	r2, [r7, #14]
 800f68e:	4619      	mov	r1, r3
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f001 fdbd 	bl	8011210 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800f696:	e090      	b.n	800f7ba <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800f698:	683b      	ldr	r3, [r7, #0]
 800f69a:	785a      	ldrb	r2, [r3, #1]
 800f69c:	693b      	ldr	r3, [r7, #16]
 800f69e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800f6a2:	683b      	ldr	r3, [r7, #0]
 800f6a4:	88db      	ldrh	r3, [r3, #6]
 800f6a6:	2b3f      	cmp	r3, #63	@ 0x3f
 800f6a8:	d803      	bhi.n	800f6b2 <USBD_CDC_Setup+0xa6>
 800f6aa:	683b      	ldr	r3, [r7, #0]
 800f6ac:	88db      	ldrh	r3, [r3, #6]
 800f6ae:	b2da      	uxtb	r2, r3
 800f6b0:	e000      	b.n	800f6b4 <USBD_CDC_Setup+0xa8>
 800f6b2:	2240      	movs	r2, #64	@ 0x40
 800f6b4:	693b      	ldr	r3, [r7, #16]
 800f6b6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800f6ba:	6939      	ldr	r1, [r7, #16]
 800f6bc:	693b      	ldr	r3, [r7, #16]
 800f6be:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800f6c2:	461a      	mov	r2, r3
 800f6c4:	6878      	ldr	r0, [r7, #4]
 800f6c6:	f001 fdcf 	bl	8011268 <USBD_CtlPrepareRx>
      break;
 800f6ca:	e076      	b.n	800f7ba <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f6d2:	687a      	ldr	r2, [r7, #4]
 800f6d4:	33b0      	adds	r3, #176	@ 0xb0
 800f6d6:	009b      	lsls	r3, r3, #2
 800f6d8:	4413      	add	r3, r2
 800f6da:	685b      	ldr	r3, [r3, #4]
 800f6dc:	689b      	ldr	r3, [r3, #8]
 800f6de:	683a      	ldr	r2, [r7, #0]
 800f6e0:	7850      	ldrb	r0, [r2, #1]
 800f6e2:	2200      	movs	r2, #0
 800f6e4:	6839      	ldr	r1, [r7, #0]
 800f6e6:	4798      	blx	r3
      break;
 800f6e8:	e067      	b.n	800f7ba <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	785b      	ldrb	r3, [r3, #1]
 800f6ee:	2b0b      	cmp	r3, #11
 800f6f0:	d851      	bhi.n	800f796 <USBD_CDC_Setup+0x18a>
 800f6f2:	a201      	add	r2, pc, #4	@ (adr r2, 800f6f8 <USBD_CDC_Setup+0xec>)
 800f6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6f8:	0800f729 	.word	0x0800f729
 800f6fc:	0800f7a5 	.word	0x0800f7a5
 800f700:	0800f797 	.word	0x0800f797
 800f704:	0800f797 	.word	0x0800f797
 800f708:	0800f797 	.word	0x0800f797
 800f70c:	0800f797 	.word	0x0800f797
 800f710:	0800f797 	.word	0x0800f797
 800f714:	0800f797 	.word	0x0800f797
 800f718:	0800f797 	.word	0x0800f797
 800f71c:	0800f797 	.word	0x0800f797
 800f720:	0800f753 	.word	0x0800f753
 800f724:	0800f77d 	.word	0x0800f77d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f72e:	b2db      	uxtb	r3, r3
 800f730:	2b03      	cmp	r3, #3
 800f732:	d107      	bne.n	800f744 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800f734:	f107 030a 	add.w	r3, r7, #10
 800f738:	2202      	movs	r2, #2
 800f73a:	4619      	mov	r1, r3
 800f73c:	6878      	ldr	r0, [r7, #4]
 800f73e:	f001 fd67 	bl	8011210 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f742:	e032      	b.n	800f7aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f744:	6839      	ldr	r1, [r7, #0]
 800f746:	6878      	ldr	r0, [r7, #4]
 800f748:	f001 fce5 	bl	8011116 <USBD_CtlError>
            ret = USBD_FAIL;
 800f74c:	2303      	movs	r3, #3
 800f74e:	75fb      	strb	r3, [r7, #23]
          break;
 800f750:	e02b      	b.n	800f7aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f758:	b2db      	uxtb	r3, r3
 800f75a:	2b03      	cmp	r3, #3
 800f75c:	d107      	bne.n	800f76e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800f75e:	f107 030d 	add.w	r3, r7, #13
 800f762:	2201      	movs	r2, #1
 800f764:	4619      	mov	r1, r3
 800f766:	6878      	ldr	r0, [r7, #4]
 800f768:	f001 fd52 	bl	8011210 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800f76c:	e01d      	b.n	800f7aa <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800f76e:	6839      	ldr	r1, [r7, #0]
 800f770:	6878      	ldr	r0, [r7, #4]
 800f772:	f001 fcd0 	bl	8011116 <USBD_CtlError>
            ret = USBD_FAIL;
 800f776:	2303      	movs	r3, #3
 800f778:	75fb      	strb	r3, [r7, #23]
          break;
 800f77a:	e016      	b.n	800f7aa <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800f782:	b2db      	uxtb	r3, r3
 800f784:	2b03      	cmp	r3, #3
 800f786:	d00f      	beq.n	800f7a8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800f788:	6839      	ldr	r1, [r7, #0]
 800f78a:	6878      	ldr	r0, [r7, #4]
 800f78c:	f001 fcc3 	bl	8011116 <USBD_CtlError>
            ret = USBD_FAIL;
 800f790:	2303      	movs	r3, #3
 800f792:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800f794:	e008      	b.n	800f7a8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800f796:	6839      	ldr	r1, [r7, #0]
 800f798:	6878      	ldr	r0, [r7, #4]
 800f79a:	f001 fcbc 	bl	8011116 <USBD_CtlError>
          ret = USBD_FAIL;
 800f79e:	2303      	movs	r3, #3
 800f7a0:	75fb      	strb	r3, [r7, #23]
          break;
 800f7a2:	e002      	b.n	800f7aa <USBD_CDC_Setup+0x19e>
          break;
 800f7a4:	bf00      	nop
 800f7a6:	e008      	b.n	800f7ba <USBD_CDC_Setup+0x1ae>
          break;
 800f7a8:	bf00      	nop
      }
      break;
 800f7aa:	e006      	b.n	800f7ba <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800f7ac:	6839      	ldr	r1, [r7, #0]
 800f7ae:	6878      	ldr	r0, [r7, #4]
 800f7b0:	f001 fcb1 	bl	8011116 <USBD_CtlError>
      ret = USBD_FAIL;
 800f7b4:	2303      	movs	r3, #3
 800f7b6:	75fb      	strb	r3, [r7, #23]
      break;
 800f7b8:	bf00      	nop
  }

  return (uint8_t)ret;
 800f7ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7bc:	4618      	mov	r0, r3
 800f7be:	3718      	adds	r7, #24
 800f7c0:	46bd      	mov	sp, r7
 800f7c2:	bd80      	pop	{r7, pc}

0800f7c4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f7c4:	b580      	push	{r7, lr}
 800f7c6:	b084      	sub	sp, #16
 800f7c8:	af00      	add	r7, sp, #0
 800f7ca:	6078      	str	r0, [r7, #4]
 800f7cc:	460b      	mov	r3, r1
 800f7ce:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f7d6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	32b0      	adds	r2, #176	@ 0xb0
 800f7e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d101      	bne.n	800f7ee <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800f7ea:	2303      	movs	r3, #3
 800f7ec:	e065      	b.n	800f8ba <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	32b0      	adds	r2, #176	@ 0xb0
 800f7f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7fc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f7fe:	78fb      	ldrb	r3, [r7, #3]
 800f800:	f003 020f 	and.w	r2, r3, #15
 800f804:	6879      	ldr	r1, [r7, #4]
 800f806:	4613      	mov	r3, r2
 800f808:	009b      	lsls	r3, r3, #2
 800f80a:	4413      	add	r3, r2
 800f80c:	009b      	lsls	r3, r3, #2
 800f80e:	440b      	add	r3, r1
 800f810:	3318      	adds	r3, #24
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d02f      	beq.n	800f878 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800f818:	78fb      	ldrb	r3, [r7, #3]
 800f81a:	f003 020f 	and.w	r2, r3, #15
 800f81e:	6879      	ldr	r1, [r7, #4]
 800f820:	4613      	mov	r3, r2
 800f822:	009b      	lsls	r3, r3, #2
 800f824:	4413      	add	r3, r2
 800f826:	009b      	lsls	r3, r3, #2
 800f828:	440b      	add	r3, r1
 800f82a:	3318      	adds	r3, #24
 800f82c:	681a      	ldr	r2, [r3, #0]
 800f82e:	78fb      	ldrb	r3, [r7, #3]
 800f830:	f003 010f 	and.w	r1, r3, #15
 800f834:	68f8      	ldr	r0, [r7, #12]
 800f836:	460b      	mov	r3, r1
 800f838:	00db      	lsls	r3, r3, #3
 800f83a:	440b      	add	r3, r1
 800f83c:	009b      	lsls	r3, r3, #2
 800f83e:	4403      	add	r3, r0
 800f840:	331c      	adds	r3, #28
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	fbb2 f1f3 	udiv	r1, r2, r3
 800f848:	fb01 f303 	mul.w	r3, r1, r3
 800f84c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d112      	bne.n	800f878 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800f852:	78fb      	ldrb	r3, [r7, #3]
 800f854:	f003 020f 	and.w	r2, r3, #15
 800f858:	6879      	ldr	r1, [r7, #4]
 800f85a:	4613      	mov	r3, r2
 800f85c:	009b      	lsls	r3, r3, #2
 800f85e:	4413      	add	r3, r2
 800f860:	009b      	lsls	r3, r3, #2
 800f862:	440b      	add	r3, r1
 800f864:	3318      	adds	r3, #24
 800f866:	2200      	movs	r2, #0
 800f868:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800f86a:	78f9      	ldrb	r1, [r7, #3]
 800f86c:	2300      	movs	r3, #0
 800f86e:	2200      	movs	r2, #0
 800f870:	6878      	ldr	r0, [r7, #4]
 800f872:	f002 fa04 	bl	8011c7e <USBD_LL_Transmit>
 800f876:	e01f      	b.n	800f8b8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800f878:	68bb      	ldr	r3, [r7, #8]
 800f87a:	2200      	movs	r2, #0
 800f87c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f886:	687a      	ldr	r2, [r7, #4]
 800f888:	33b0      	adds	r3, #176	@ 0xb0
 800f88a:	009b      	lsls	r3, r3, #2
 800f88c:	4413      	add	r3, r2
 800f88e:	685b      	ldr	r3, [r3, #4]
 800f890:	691b      	ldr	r3, [r3, #16]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d010      	beq.n	800f8b8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f89c:	687a      	ldr	r2, [r7, #4]
 800f89e:	33b0      	adds	r3, #176	@ 0xb0
 800f8a0:	009b      	lsls	r3, r3, #2
 800f8a2:	4413      	add	r3, r2
 800f8a4:	685b      	ldr	r3, [r3, #4]
 800f8a6:	691b      	ldr	r3, [r3, #16]
 800f8a8:	68ba      	ldr	r2, [r7, #8]
 800f8aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800f8ae:	68ba      	ldr	r2, [r7, #8]
 800f8b0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800f8b4:	78fa      	ldrb	r2, [r7, #3]
 800f8b6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800f8b8:	2300      	movs	r3, #0
}
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	3710      	adds	r7, #16
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd80      	pop	{r7, pc}

0800f8c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800f8c2:	b580      	push	{r7, lr}
 800f8c4:	b084      	sub	sp, #16
 800f8c6:	af00      	add	r7, sp, #0
 800f8c8:	6078      	str	r0, [r7, #4]
 800f8ca:	460b      	mov	r3, r1
 800f8cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	32b0      	adds	r2, #176	@ 0xb0
 800f8d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8dc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	32b0      	adds	r2, #176	@ 0xb0
 800f8e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d101      	bne.n	800f8f4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800f8f0:	2303      	movs	r3, #3
 800f8f2:	e01a      	b.n	800f92a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800f8f4:	78fb      	ldrb	r3, [r7, #3]
 800f8f6:	4619      	mov	r1, r3
 800f8f8:	6878      	ldr	r0, [r7, #4]
 800f8fa:	f002 fa02 	bl	8011d02 <USBD_LL_GetRxDataSize>
 800f8fe:	4602      	mov	r2, r0
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f90c:	687a      	ldr	r2, [r7, #4]
 800f90e:	33b0      	adds	r3, #176	@ 0xb0
 800f910:	009b      	lsls	r3, r3, #2
 800f912:	4413      	add	r3, r2
 800f914:	685b      	ldr	r3, [r3, #4]
 800f916:	68db      	ldr	r3, [r3, #12]
 800f918:	68fa      	ldr	r2, [r7, #12]
 800f91a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800f91e:	68fa      	ldr	r2, [r7, #12]
 800f920:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800f924:	4611      	mov	r1, r2
 800f926:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800f928:	2300      	movs	r3, #0
}
 800f92a:	4618      	mov	r0, r3
 800f92c:	3710      	adds	r7, #16
 800f92e:	46bd      	mov	sp, r7
 800f930:	bd80      	pop	{r7, pc}

0800f932 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800f932:	b580      	push	{r7, lr}
 800f934:	b084      	sub	sp, #16
 800f936:	af00      	add	r7, sp, #0
 800f938:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	32b0      	adds	r2, #176	@ 0xb0
 800f944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f948:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d101      	bne.n	800f954 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800f950:	2303      	movs	r3, #3
 800f952:	e024      	b.n	800f99e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f95a:	687a      	ldr	r2, [r7, #4]
 800f95c:	33b0      	adds	r3, #176	@ 0xb0
 800f95e:	009b      	lsls	r3, r3, #2
 800f960:	4413      	add	r3, r2
 800f962:	685b      	ldr	r3, [r3, #4]
 800f964:	2b00      	cmp	r3, #0
 800f966:	d019      	beq.n	800f99c <USBD_CDC_EP0_RxReady+0x6a>
 800f968:	68fb      	ldr	r3, [r7, #12]
 800f96a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800f96e:	2bff      	cmp	r3, #255	@ 0xff
 800f970:	d014      	beq.n	800f99c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f978:	687a      	ldr	r2, [r7, #4]
 800f97a:	33b0      	adds	r3, #176	@ 0xb0
 800f97c:	009b      	lsls	r3, r3, #2
 800f97e:	4413      	add	r3, r2
 800f980:	685b      	ldr	r3, [r3, #4]
 800f982:	689b      	ldr	r3, [r3, #8]
 800f984:	68fa      	ldr	r2, [r7, #12]
 800f986:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800f98a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800f98c:	68fa      	ldr	r2, [r7, #12]
 800f98e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800f992:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	22ff      	movs	r2, #255	@ 0xff
 800f998:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800f99c:	2300      	movs	r3, #0
}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	3710      	adds	r7, #16
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	bd80      	pop	{r7, pc}
	...

0800f9a8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b086      	sub	sp, #24
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800f9b0:	2182      	movs	r1, #130	@ 0x82
 800f9b2:	4818      	ldr	r0, [pc, #96]	@ (800fa14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f9b4:	f000 fd4f 	bl	8010456 <USBD_GetEpDesc>
 800f9b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800f9ba:	2101      	movs	r1, #1
 800f9bc:	4815      	ldr	r0, [pc, #84]	@ (800fa14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f9be:	f000 fd4a 	bl	8010456 <USBD_GetEpDesc>
 800f9c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800f9c4:	2181      	movs	r1, #129	@ 0x81
 800f9c6:	4813      	ldr	r0, [pc, #76]	@ (800fa14 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800f9c8:	f000 fd45 	bl	8010456 <USBD_GetEpDesc>
 800f9cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800f9ce:	697b      	ldr	r3, [r7, #20]
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d002      	beq.n	800f9da <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800f9d4:	697b      	ldr	r3, [r7, #20]
 800f9d6:	2210      	movs	r2, #16
 800f9d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800f9da:	693b      	ldr	r3, [r7, #16]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d006      	beq.n	800f9ee <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f9e0:	693b      	ldr	r3, [r7, #16]
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f9e8:	711a      	strb	r2, [r3, #4]
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d006      	beq.n	800fa02 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	2200      	movs	r2, #0
 800f9f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800f9fc:	711a      	strb	r2, [r3, #4]
 800f9fe:	2200      	movs	r2, #0
 800fa00:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	2243      	movs	r2, #67	@ 0x43
 800fa06:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fa08:	4b02      	ldr	r3, [pc, #8]	@ (800fa14 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800fa0a:	4618      	mov	r0, r3
 800fa0c:	3718      	adds	r7, #24
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd80      	pop	{r7, pc}
 800fa12:	bf00      	nop
 800fa14:	24000078 	.word	0x24000078

0800fa18 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b086      	sub	sp, #24
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fa20:	2182      	movs	r1, #130	@ 0x82
 800fa22:	4818      	ldr	r0, [pc, #96]	@ (800fa84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fa24:	f000 fd17 	bl	8010456 <USBD_GetEpDesc>
 800fa28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fa2a:	2101      	movs	r1, #1
 800fa2c:	4815      	ldr	r0, [pc, #84]	@ (800fa84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fa2e:	f000 fd12 	bl	8010456 <USBD_GetEpDesc>
 800fa32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fa34:	2181      	movs	r1, #129	@ 0x81
 800fa36:	4813      	ldr	r0, [pc, #76]	@ (800fa84 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fa38:	f000 fd0d 	bl	8010456 <USBD_GetEpDesc>
 800fa3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fa3e:	697b      	ldr	r3, [r7, #20]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d002      	beq.n	800fa4a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800fa44:	697b      	ldr	r3, [r7, #20]
 800fa46:	2210      	movs	r2, #16
 800fa48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800fa4a:	693b      	ldr	r3, [r7, #16]
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d006      	beq.n	800fa5e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800fa50:	693b      	ldr	r3, [r7, #16]
 800fa52:	2200      	movs	r2, #0
 800fa54:	711a      	strb	r2, [r3, #4]
 800fa56:	2200      	movs	r2, #0
 800fa58:	f042 0202 	orr.w	r2, r2, #2
 800fa5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d006      	beq.n	800fa72 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	2200      	movs	r2, #0
 800fa68:	711a      	strb	r2, [r3, #4]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	f042 0202 	orr.w	r2, r2, #2
 800fa70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	2243      	movs	r2, #67	@ 0x43
 800fa76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fa78:	4b02      	ldr	r3, [pc, #8]	@ (800fa84 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	3718      	adds	r7, #24
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	bd80      	pop	{r7, pc}
 800fa82:	bf00      	nop
 800fa84:	24000078 	.word	0x24000078

0800fa88 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b086      	sub	sp, #24
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fa90:	2182      	movs	r1, #130	@ 0x82
 800fa92:	4818      	ldr	r0, [pc, #96]	@ (800faf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fa94:	f000 fcdf 	bl	8010456 <USBD_GetEpDesc>
 800fa98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fa9a:	2101      	movs	r1, #1
 800fa9c:	4815      	ldr	r0, [pc, #84]	@ (800faf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800fa9e:	f000 fcda 	bl	8010456 <USBD_GetEpDesc>
 800faa2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800faa4:	2181      	movs	r1, #129	@ 0x81
 800faa6:	4813      	ldr	r0, [pc, #76]	@ (800faf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800faa8:	f000 fcd5 	bl	8010456 <USBD_GetEpDesc>
 800faac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800faae:	697b      	ldr	r3, [r7, #20]
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d002      	beq.n	800faba <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800fab4:	697b      	ldr	r3, [r7, #20]
 800fab6:	2210      	movs	r2, #16
 800fab8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800faba:	693b      	ldr	r3, [r7, #16]
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	d006      	beq.n	800face <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fac0:	693b      	ldr	r3, [r7, #16]
 800fac2:	2200      	movs	r2, #0
 800fac4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fac8:	711a      	strb	r2, [r3, #4]
 800faca:	2200      	movs	r2, #0
 800facc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d006      	beq.n	800fae2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fad4:	68fb      	ldr	r3, [r7, #12]
 800fad6:	2200      	movs	r2, #0
 800fad8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fadc:	711a      	strb	r2, [r3, #4]
 800fade:	2200      	movs	r2, #0
 800fae0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	2243      	movs	r2, #67	@ 0x43
 800fae6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fae8:	4b02      	ldr	r3, [pc, #8]	@ (800faf4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800faea:	4618      	mov	r0, r3
 800faec:	3718      	adds	r7, #24
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}
 800faf2:	bf00      	nop
 800faf4:	24000078 	.word	0x24000078

0800faf8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800faf8:	b480      	push	{r7}
 800fafa:	b083      	sub	sp, #12
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	220a      	movs	r2, #10
 800fb04:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800fb06:	4b03      	ldr	r3, [pc, #12]	@ (800fb14 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	370c      	adds	r7, #12
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb12:	4770      	bx	lr
 800fb14:	24000034 	.word	0x24000034

0800fb18 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800fb18:	b480      	push	{r7}
 800fb1a:	b083      	sub	sp, #12
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
 800fb20:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d101      	bne.n	800fb2c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800fb28:	2303      	movs	r3, #3
 800fb2a:	e009      	b.n	800fb40 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fb32:	687a      	ldr	r2, [r7, #4]
 800fb34:	33b0      	adds	r3, #176	@ 0xb0
 800fb36:	009b      	lsls	r3, r3, #2
 800fb38:	4413      	add	r3, r2
 800fb3a:	683a      	ldr	r2, [r7, #0]
 800fb3c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800fb3e:	2300      	movs	r3, #0
}
 800fb40:	4618      	mov	r0, r3
 800fb42:	370c      	adds	r7, #12
 800fb44:	46bd      	mov	sp, r7
 800fb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb4a:	4770      	bx	lr

0800fb4c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800fb4c:	b480      	push	{r7}
 800fb4e:	b087      	sub	sp, #28
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	60f8      	str	r0, [r7, #12]
 800fb54:	60b9      	str	r1, [r7, #8]
 800fb56:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	32b0      	adds	r2, #176	@ 0xb0
 800fb62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fb66:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800fb68:	697b      	ldr	r3, [r7, #20]
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d101      	bne.n	800fb72 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800fb6e:	2303      	movs	r3, #3
 800fb70:	e008      	b.n	800fb84 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800fb72:	697b      	ldr	r3, [r7, #20]
 800fb74:	68ba      	ldr	r2, [r7, #8]
 800fb76:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800fb7a:	697b      	ldr	r3, [r7, #20]
 800fb7c:	687a      	ldr	r2, [r7, #4]
 800fb7e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800fb82:	2300      	movs	r3, #0
}
 800fb84:	4618      	mov	r0, r3
 800fb86:	371c      	adds	r7, #28
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8e:	4770      	bx	lr

0800fb90 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800fb90:	b480      	push	{r7}
 800fb92:	b085      	sub	sp, #20
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
 800fb98:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	32b0      	adds	r2, #176	@ 0xb0
 800fba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fba8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fbaa:	68fb      	ldr	r3, [r7, #12]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d101      	bne.n	800fbb4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800fbb0:	2303      	movs	r3, #3
 800fbb2:	e004      	b.n	800fbbe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	683a      	ldr	r2, [r7, #0]
 800fbb8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800fbbc:	2300      	movs	r3, #0
}
 800fbbe:	4618      	mov	r0, r3
 800fbc0:	3714      	adds	r7, #20
 800fbc2:	46bd      	mov	sp, r7
 800fbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc8:	4770      	bx	lr
	...

0800fbcc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b084      	sub	sp, #16
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	32b0      	adds	r2, #176	@ 0xb0
 800fbde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbe2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800fbe8:	68bb      	ldr	r3, [r7, #8]
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d101      	bne.n	800fbf2 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800fbee:	2303      	movs	r3, #3
 800fbf0:	e025      	b.n	800fc3e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800fbf2:	68bb      	ldr	r3, [r7, #8]
 800fbf4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d11f      	bne.n	800fc3c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800fbfc:	68bb      	ldr	r3, [r7, #8]
 800fbfe:	2201      	movs	r2, #1
 800fc00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800fc04:	4b10      	ldr	r3, [pc, #64]	@ (800fc48 <USBD_CDC_TransmitPacket+0x7c>)
 800fc06:	781b      	ldrb	r3, [r3, #0]
 800fc08:	f003 020f 	and.w	r2, r3, #15
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800fc12:	6878      	ldr	r0, [r7, #4]
 800fc14:	4613      	mov	r3, r2
 800fc16:	009b      	lsls	r3, r3, #2
 800fc18:	4413      	add	r3, r2
 800fc1a:	009b      	lsls	r3, r3, #2
 800fc1c:	4403      	add	r3, r0
 800fc1e:	3318      	adds	r3, #24
 800fc20:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800fc22:	4b09      	ldr	r3, [pc, #36]	@ (800fc48 <USBD_CDC_TransmitPacket+0x7c>)
 800fc24:	7819      	ldrb	r1, [r3, #0]
 800fc26:	68bb      	ldr	r3, [r7, #8]
 800fc28:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800fc2c:	68bb      	ldr	r3, [r7, #8]
 800fc2e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800fc32:	6878      	ldr	r0, [r7, #4]
 800fc34:	f002 f823 	bl	8011c7e <USBD_LL_Transmit>

    ret = USBD_OK;
 800fc38:	2300      	movs	r3, #0
 800fc3a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800fc3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc3e:	4618      	mov	r0, r3
 800fc40:	3710      	adds	r7, #16
 800fc42:	46bd      	mov	sp, r7
 800fc44:	bd80      	pop	{r7, pc}
 800fc46:	bf00      	nop
 800fc48:	240000bb 	.word	0x240000bb

0800fc4c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800fc4c:	b580      	push	{r7, lr}
 800fc4e:	b084      	sub	sp, #16
 800fc50:	af00      	add	r7, sp, #0
 800fc52:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	32b0      	adds	r2, #176	@ 0xb0
 800fc5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc62:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	32b0      	adds	r2, #176	@ 0xb0
 800fc6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	d101      	bne.n	800fc7a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800fc76:	2303      	movs	r3, #3
 800fc78:	e018      	b.n	800fcac <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	7c1b      	ldrb	r3, [r3, #16]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d10a      	bne.n	800fc98 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fc82:	4b0c      	ldr	r3, [pc, #48]	@ (800fcb4 <USBD_CDC_ReceivePacket+0x68>)
 800fc84:	7819      	ldrb	r1, [r3, #0]
 800fc86:	68fb      	ldr	r3, [r7, #12]
 800fc88:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fc8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f002 f815 	bl	8011cc0 <USBD_LL_PrepareReceive>
 800fc96:	e008      	b.n	800fcaa <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800fc98:	4b06      	ldr	r3, [pc, #24]	@ (800fcb4 <USBD_CDC_ReceivePacket+0x68>)
 800fc9a:	7819      	ldrb	r1, [r3, #0]
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800fca2:	2340      	movs	r3, #64	@ 0x40
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	f002 f80b 	bl	8011cc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800fcaa:	2300      	movs	r3, #0
}
 800fcac:	4618      	mov	r0, r3
 800fcae:	3710      	adds	r7, #16
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}
 800fcb4:	240000bc 	.word	0x240000bc

0800fcb8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b086      	sub	sp, #24
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	60f8      	str	r0, [r7, #12]
 800fcc0:	60b9      	str	r1, [r7, #8]
 800fcc2:	4613      	mov	r3, r2
 800fcc4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800fcc6:	68fb      	ldr	r3, [r7, #12]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d101      	bne.n	800fcd0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800fccc:	2303      	movs	r3, #3
 800fcce:	e01f      	b.n	800fd10 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	2200      	movs	r2, #0
 800fcdc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	2200      	movs	r2, #0
 800fce4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800fce8:	68bb      	ldr	r3, [r7, #8]
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d003      	beq.n	800fcf6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	68ba      	ldr	r2, [r7, #8]
 800fcf2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fcf6:	68fb      	ldr	r3, [r7, #12]
 800fcf8:	2201      	movs	r2, #1
 800fcfa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	79fa      	ldrb	r2, [r7, #7]
 800fd02:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800fd04:	68f8      	ldr	r0, [r7, #12]
 800fd06:	f001 fe81 	bl	8011a0c <USBD_LL_Init>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800fd0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd10:	4618      	mov	r0, r3
 800fd12:	3718      	adds	r7, #24
 800fd14:	46bd      	mov	sp, r7
 800fd16:	bd80      	pop	{r7, pc}

0800fd18 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b084      	sub	sp, #16
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	6078      	str	r0, [r7, #4]
 800fd20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800fd22:	2300      	movs	r3, #0
 800fd24:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800fd26:	683b      	ldr	r3, [r7, #0]
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	d101      	bne.n	800fd30 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800fd2c:	2303      	movs	r3, #3
 800fd2e:	e025      	b.n	800fd7c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	683a      	ldr	r2, [r7, #0]
 800fd34:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	32ae      	adds	r2, #174	@ 0xae
 800fd42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	d00f      	beq.n	800fd6c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	32ae      	adds	r2, #174	@ 0xae
 800fd56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd5c:	f107 020e 	add.w	r2, r7, #14
 800fd60:	4610      	mov	r0, r2
 800fd62:	4798      	blx	r3
 800fd64:	4602      	mov	r2, r0
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800fd72:	1c5a      	adds	r2, r3, #1
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800fd7a:	2300      	movs	r3, #0
}
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	3710      	adds	r7, #16
 800fd80:	46bd      	mov	sp, r7
 800fd82:	bd80      	pop	{r7, pc}

0800fd84 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800fd84:	b580      	push	{r7, lr}
 800fd86:	b082      	sub	sp, #8
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800fd8c:	6878      	ldr	r0, [r7, #4]
 800fd8e:	f001 fe8d 	bl	8011aac <USBD_LL_Start>
 800fd92:	4603      	mov	r3, r0
}
 800fd94:	4618      	mov	r0, r3
 800fd96:	3708      	adds	r7, #8
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}

0800fd9c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800fd9c:	b480      	push	{r7}
 800fd9e:	b083      	sub	sp, #12
 800fda0:	af00      	add	r7, sp, #0
 800fda2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fda4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800fda6:	4618      	mov	r0, r3
 800fda8:	370c      	adds	r7, #12
 800fdaa:	46bd      	mov	sp, r7
 800fdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdb0:	4770      	bx	lr

0800fdb2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fdb2:	b580      	push	{r7, lr}
 800fdb4:	b084      	sub	sp, #16
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	6078      	str	r0, [r7, #4]
 800fdba:	460b      	mov	r3, r1
 800fdbc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d009      	beq.n	800fde0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fdd2:	681b      	ldr	r3, [r3, #0]
 800fdd4:	78fa      	ldrb	r2, [r7, #3]
 800fdd6:	4611      	mov	r1, r2
 800fdd8:	6878      	ldr	r0, [r7, #4]
 800fdda:	4798      	blx	r3
 800fddc:	4603      	mov	r3, r0
 800fdde:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fde0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fde2:	4618      	mov	r0, r3
 800fde4:	3710      	adds	r7, #16
 800fde6:	46bd      	mov	sp, r7
 800fde8:	bd80      	pop	{r7, pc}

0800fdea <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800fdea:	b580      	push	{r7, lr}
 800fdec:	b084      	sub	sp, #16
 800fdee:	af00      	add	r7, sp, #0
 800fdf0:	6078      	str	r0, [r7, #4]
 800fdf2:	460b      	mov	r3, r1
 800fdf4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800fdf6:	2300      	movs	r3, #0
 800fdf8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800fe00:	685b      	ldr	r3, [r3, #4]
 800fe02:	78fa      	ldrb	r2, [r7, #3]
 800fe04:	4611      	mov	r1, r2
 800fe06:	6878      	ldr	r0, [r7, #4]
 800fe08:	4798      	blx	r3
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d001      	beq.n	800fe14 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800fe10:	2303      	movs	r3, #3
 800fe12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800fe14:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe16:	4618      	mov	r0, r3
 800fe18:	3710      	adds	r7, #16
 800fe1a:	46bd      	mov	sp, r7
 800fe1c:	bd80      	pop	{r7, pc}

0800fe1e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800fe1e:	b580      	push	{r7, lr}
 800fe20:	b084      	sub	sp, #16
 800fe22:	af00      	add	r7, sp, #0
 800fe24:	6078      	str	r0, [r7, #4]
 800fe26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fe2e:	6839      	ldr	r1, [r7, #0]
 800fe30:	4618      	mov	r0, r3
 800fe32:	f001 f936 	bl	80110a2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	2201      	movs	r2, #1
 800fe3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800fe44:	461a      	mov	r2, r3
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800fe4c:	687b      	ldr	r3, [r7, #4]
 800fe4e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800fe52:	f003 031f 	and.w	r3, r3, #31
 800fe56:	2b02      	cmp	r3, #2
 800fe58:	d01a      	beq.n	800fe90 <USBD_LL_SetupStage+0x72>
 800fe5a:	2b02      	cmp	r3, #2
 800fe5c:	d822      	bhi.n	800fea4 <USBD_LL_SetupStage+0x86>
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d002      	beq.n	800fe68 <USBD_LL_SetupStage+0x4a>
 800fe62:	2b01      	cmp	r3, #1
 800fe64:	d00a      	beq.n	800fe7c <USBD_LL_SetupStage+0x5e>
 800fe66:	e01d      	b.n	800fea4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fe6e:	4619      	mov	r1, r3
 800fe70:	6878      	ldr	r0, [r7, #4]
 800fe72:	f000 fb63 	bl	801053c <USBD_StdDevReq>
 800fe76:	4603      	mov	r3, r0
 800fe78:	73fb      	strb	r3, [r7, #15]
      break;
 800fe7a:	e020      	b.n	800febe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fe82:	4619      	mov	r1, r3
 800fe84:	6878      	ldr	r0, [r7, #4]
 800fe86:	f000 fbcb 	bl	8010620 <USBD_StdItfReq>
 800fe8a:	4603      	mov	r3, r0
 800fe8c:	73fb      	strb	r3, [r7, #15]
      break;
 800fe8e:	e016      	b.n	800febe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800fe96:	4619      	mov	r1, r3
 800fe98:	6878      	ldr	r0, [r7, #4]
 800fe9a:	f000 fc2d 	bl	80106f8 <USBD_StdEPReq>
 800fe9e:	4603      	mov	r3, r0
 800fea0:	73fb      	strb	r3, [r7, #15]
      break;
 800fea2:	e00c      	b.n	800febe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800feaa:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800feae:	b2db      	uxtb	r3, r3
 800feb0:	4619      	mov	r1, r3
 800feb2:	6878      	ldr	r0, [r7, #4]
 800feb4:	f001 fe5a 	bl	8011b6c <USBD_LL_StallEP>
 800feb8:	4603      	mov	r3, r0
 800feba:	73fb      	strb	r3, [r7, #15]
      break;
 800febc:	bf00      	nop
  }

  return ret;
 800febe:	7bfb      	ldrb	r3, [r7, #15]
}
 800fec0:	4618      	mov	r0, r3
 800fec2:	3710      	adds	r7, #16
 800fec4:	46bd      	mov	sp, r7
 800fec6:	bd80      	pop	{r7, pc}

0800fec8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b086      	sub	sp, #24
 800fecc:	af00      	add	r7, sp, #0
 800fece:	60f8      	str	r0, [r7, #12]
 800fed0:	460b      	mov	r3, r1
 800fed2:	607a      	str	r2, [r7, #4]
 800fed4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800fed6:	2300      	movs	r3, #0
 800fed8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800feda:	7afb      	ldrb	r3, [r7, #11]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d16e      	bne.n	800ffbe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800fee0:	68fb      	ldr	r3, [r7, #12]
 800fee2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800fee6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800feee:	2b03      	cmp	r3, #3
 800fef0:	f040 8098 	bne.w	8010024 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800fef4:	693b      	ldr	r3, [r7, #16]
 800fef6:	689a      	ldr	r2, [r3, #8]
 800fef8:	693b      	ldr	r3, [r7, #16]
 800fefa:	68db      	ldr	r3, [r3, #12]
 800fefc:	429a      	cmp	r2, r3
 800fefe:	d913      	bls.n	800ff28 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800ff00:	693b      	ldr	r3, [r7, #16]
 800ff02:	689a      	ldr	r2, [r3, #8]
 800ff04:	693b      	ldr	r3, [r7, #16]
 800ff06:	68db      	ldr	r3, [r3, #12]
 800ff08:	1ad2      	subs	r2, r2, r3
 800ff0a:	693b      	ldr	r3, [r7, #16]
 800ff0c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800ff0e:	693b      	ldr	r3, [r7, #16]
 800ff10:	68da      	ldr	r2, [r3, #12]
 800ff12:	693b      	ldr	r3, [r7, #16]
 800ff14:	689b      	ldr	r3, [r3, #8]
 800ff16:	4293      	cmp	r3, r2
 800ff18:	bf28      	it	cs
 800ff1a:	4613      	movcs	r3, r2
 800ff1c:	461a      	mov	r2, r3
 800ff1e:	6879      	ldr	r1, [r7, #4]
 800ff20:	68f8      	ldr	r0, [r7, #12]
 800ff22:	f001 f9be 	bl	80112a2 <USBD_CtlContinueRx>
 800ff26:	e07d      	b.n	8010024 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ff2e:	f003 031f 	and.w	r3, r3, #31
 800ff32:	2b02      	cmp	r3, #2
 800ff34:	d014      	beq.n	800ff60 <USBD_LL_DataOutStage+0x98>
 800ff36:	2b02      	cmp	r3, #2
 800ff38:	d81d      	bhi.n	800ff76 <USBD_LL_DataOutStage+0xae>
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d002      	beq.n	800ff44 <USBD_LL_DataOutStage+0x7c>
 800ff3e:	2b01      	cmp	r3, #1
 800ff40:	d003      	beq.n	800ff4a <USBD_LL_DataOutStage+0x82>
 800ff42:	e018      	b.n	800ff76 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800ff44:	2300      	movs	r3, #0
 800ff46:	75bb      	strb	r3, [r7, #22]
            break;
 800ff48:	e018      	b.n	800ff7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ff50:	b2db      	uxtb	r3, r3
 800ff52:	4619      	mov	r1, r3
 800ff54:	68f8      	ldr	r0, [r7, #12]
 800ff56:	f000 fa64 	bl	8010422 <USBD_CoreFindIF>
 800ff5a:	4603      	mov	r3, r0
 800ff5c:	75bb      	strb	r3, [r7, #22]
            break;
 800ff5e:	e00d      	b.n	800ff7c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ff66:	b2db      	uxtb	r3, r3
 800ff68:	4619      	mov	r1, r3
 800ff6a:	68f8      	ldr	r0, [r7, #12]
 800ff6c:	f000 fa66 	bl	801043c <USBD_CoreFindEP>
 800ff70:	4603      	mov	r3, r0
 800ff72:	75bb      	strb	r3, [r7, #22]
            break;
 800ff74:	e002      	b.n	800ff7c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ff76:	2300      	movs	r3, #0
 800ff78:	75bb      	strb	r3, [r7, #22]
            break;
 800ff7a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ff7c:	7dbb      	ldrb	r3, [r7, #22]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d119      	bne.n	800ffb6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ff88:	b2db      	uxtb	r3, r3
 800ff8a:	2b03      	cmp	r3, #3
 800ff8c:	d113      	bne.n	800ffb6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ff8e:	7dba      	ldrb	r2, [r7, #22]
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	32ae      	adds	r2, #174	@ 0xae
 800ff94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ff98:	691b      	ldr	r3, [r3, #16]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d00b      	beq.n	800ffb6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ff9e:	7dba      	ldrb	r2, [r7, #22]
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ffa6:	7dba      	ldrb	r2, [r7, #22]
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	32ae      	adds	r2, #174	@ 0xae
 800ffac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffb0:	691b      	ldr	r3, [r3, #16]
 800ffb2:	68f8      	ldr	r0, [r7, #12]
 800ffb4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ffb6:	68f8      	ldr	r0, [r7, #12]
 800ffb8:	f001 f984 	bl	80112c4 <USBD_CtlSendStatus>
 800ffbc:	e032      	b.n	8010024 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ffbe:	7afb      	ldrb	r3, [r7, #11]
 800ffc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ffc4:	b2db      	uxtb	r3, r3
 800ffc6:	4619      	mov	r1, r3
 800ffc8:	68f8      	ldr	r0, [r7, #12]
 800ffca:	f000 fa37 	bl	801043c <USBD_CoreFindEP>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ffd2:	7dbb      	ldrb	r3, [r7, #22]
 800ffd4:	2bff      	cmp	r3, #255	@ 0xff
 800ffd6:	d025      	beq.n	8010024 <USBD_LL_DataOutStage+0x15c>
 800ffd8:	7dbb      	ldrb	r3, [r7, #22]
 800ffda:	2b00      	cmp	r3, #0
 800ffdc:	d122      	bne.n	8010024 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ffe4:	b2db      	uxtb	r3, r3
 800ffe6:	2b03      	cmp	r3, #3
 800ffe8:	d117      	bne.n	801001a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ffea:	7dba      	ldrb	r2, [r7, #22]
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	32ae      	adds	r2, #174	@ 0xae
 800fff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fff4:	699b      	ldr	r3, [r3, #24]
 800fff6:	2b00      	cmp	r3, #0
 800fff8:	d00f      	beq.n	801001a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800fffa:	7dba      	ldrb	r2, [r7, #22]
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8010002:	7dba      	ldrb	r2, [r7, #22]
 8010004:	68fb      	ldr	r3, [r7, #12]
 8010006:	32ae      	adds	r2, #174	@ 0xae
 8010008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801000c:	699b      	ldr	r3, [r3, #24]
 801000e:	7afa      	ldrb	r2, [r7, #11]
 8010010:	4611      	mov	r1, r2
 8010012:	68f8      	ldr	r0, [r7, #12]
 8010014:	4798      	blx	r3
 8010016:	4603      	mov	r3, r0
 8010018:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801001a:	7dfb      	ldrb	r3, [r7, #23]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d001      	beq.n	8010024 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8010020:	7dfb      	ldrb	r3, [r7, #23]
 8010022:	e000      	b.n	8010026 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8010024:	2300      	movs	r3, #0
}
 8010026:	4618      	mov	r0, r3
 8010028:	3718      	adds	r7, #24
 801002a:	46bd      	mov	sp, r7
 801002c:	bd80      	pop	{r7, pc}

0801002e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801002e:	b580      	push	{r7, lr}
 8010030:	b086      	sub	sp, #24
 8010032:	af00      	add	r7, sp, #0
 8010034:	60f8      	str	r0, [r7, #12]
 8010036:	460b      	mov	r3, r1
 8010038:	607a      	str	r2, [r7, #4]
 801003a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 801003c:	7afb      	ldrb	r3, [r7, #11]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d16f      	bne.n	8010122 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8010042:	68fb      	ldr	r3, [r7, #12]
 8010044:	3314      	adds	r3, #20
 8010046:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 801004e:	2b02      	cmp	r3, #2
 8010050:	d15a      	bne.n	8010108 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	689a      	ldr	r2, [r3, #8]
 8010056:	693b      	ldr	r3, [r7, #16]
 8010058:	68db      	ldr	r3, [r3, #12]
 801005a:	429a      	cmp	r2, r3
 801005c:	d914      	bls.n	8010088 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801005e:	693b      	ldr	r3, [r7, #16]
 8010060:	689a      	ldr	r2, [r3, #8]
 8010062:	693b      	ldr	r3, [r7, #16]
 8010064:	68db      	ldr	r3, [r3, #12]
 8010066:	1ad2      	subs	r2, r2, r3
 8010068:	693b      	ldr	r3, [r7, #16]
 801006a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 801006c:	693b      	ldr	r3, [r7, #16]
 801006e:	689b      	ldr	r3, [r3, #8]
 8010070:	461a      	mov	r2, r3
 8010072:	6879      	ldr	r1, [r7, #4]
 8010074:	68f8      	ldr	r0, [r7, #12]
 8010076:	f001 f8e6 	bl	8011246 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801007a:	2300      	movs	r3, #0
 801007c:	2200      	movs	r2, #0
 801007e:	2100      	movs	r1, #0
 8010080:	68f8      	ldr	r0, [r7, #12]
 8010082:	f001 fe1d 	bl	8011cc0 <USBD_LL_PrepareReceive>
 8010086:	e03f      	b.n	8010108 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8010088:	693b      	ldr	r3, [r7, #16]
 801008a:	68da      	ldr	r2, [r3, #12]
 801008c:	693b      	ldr	r3, [r7, #16]
 801008e:	689b      	ldr	r3, [r3, #8]
 8010090:	429a      	cmp	r2, r3
 8010092:	d11c      	bne.n	80100ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8010094:	693b      	ldr	r3, [r7, #16]
 8010096:	685a      	ldr	r2, [r3, #4]
 8010098:	693b      	ldr	r3, [r7, #16]
 801009a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801009c:	429a      	cmp	r2, r3
 801009e:	d316      	bcc.n	80100ce <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80100a0:	693b      	ldr	r3, [r7, #16]
 80100a2:	685a      	ldr	r2, [r3, #4]
 80100a4:	68fb      	ldr	r3, [r7, #12]
 80100a6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80100aa:	429a      	cmp	r2, r3
 80100ac:	d20f      	bcs.n	80100ce <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80100ae:	2200      	movs	r2, #0
 80100b0:	2100      	movs	r1, #0
 80100b2:	68f8      	ldr	r0, [r7, #12]
 80100b4:	f001 f8c7 	bl	8011246 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	2200      	movs	r2, #0
 80100bc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80100c0:	2300      	movs	r3, #0
 80100c2:	2200      	movs	r2, #0
 80100c4:	2100      	movs	r1, #0
 80100c6:	68f8      	ldr	r0, [r7, #12]
 80100c8:	f001 fdfa 	bl	8011cc0 <USBD_LL_PrepareReceive>
 80100cc:	e01c      	b.n	8010108 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80100ce:	68fb      	ldr	r3, [r7, #12]
 80100d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80100d4:	b2db      	uxtb	r3, r3
 80100d6:	2b03      	cmp	r3, #3
 80100d8:	d10f      	bne.n	80100fa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80100e0:	68db      	ldr	r3, [r3, #12]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d009      	beq.n	80100fa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	2200      	movs	r2, #0
 80100ea:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80100f4:	68db      	ldr	r3, [r3, #12]
 80100f6:	68f8      	ldr	r0, [r7, #12]
 80100f8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80100fa:	2180      	movs	r1, #128	@ 0x80
 80100fc:	68f8      	ldr	r0, [r7, #12]
 80100fe:	f001 fd35 	bl	8011b6c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010102:	68f8      	ldr	r0, [r7, #12]
 8010104:	f001 f8f1 	bl	80112ea <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8010108:	68fb      	ldr	r3, [r7, #12]
 801010a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 801010e:	2b00      	cmp	r3, #0
 8010110:	d03a      	beq.n	8010188 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8010112:	68f8      	ldr	r0, [r7, #12]
 8010114:	f7ff fe42 	bl	800fd9c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	2200      	movs	r2, #0
 801011c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8010120:	e032      	b.n	8010188 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8010122:	7afb      	ldrb	r3, [r7, #11]
 8010124:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8010128:	b2db      	uxtb	r3, r3
 801012a:	4619      	mov	r1, r3
 801012c:	68f8      	ldr	r0, [r7, #12]
 801012e:	f000 f985 	bl	801043c <USBD_CoreFindEP>
 8010132:	4603      	mov	r3, r0
 8010134:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010136:	7dfb      	ldrb	r3, [r7, #23]
 8010138:	2bff      	cmp	r3, #255	@ 0xff
 801013a:	d025      	beq.n	8010188 <USBD_LL_DataInStage+0x15a>
 801013c:	7dfb      	ldrb	r3, [r7, #23]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d122      	bne.n	8010188 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010148:	b2db      	uxtb	r3, r3
 801014a:	2b03      	cmp	r3, #3
 801014c:	d11c      	bne.n	8010188 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 801014e:	7dfa      	ldrb	r2, [r7, #23]
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	32ae      	adds	r2, #174	@ 0xae
 8010154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010158:	695b      	ldr	r3, [r3, #20]
 801015a:	2b00      	cmp	r3, #0
 801015c:	d014      	beq.n	8010188 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 801015e:	7dfa      	ldrb	r2, [r7, #23]
 8010160:	68fb      	ldr	r3, [r7, #12]
 8010162:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8010166:	7dfa      	ldrb	r2, [r7, #23]
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	32ae      	adds	r2, #174	@ 0xae
 801016c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010170:	695b      	ldr	r3, [r3, #20]
 8010172:	7afa      	ldrb	r2, [r7, #11]
 8010174:	4611      	mov	r1, r2
 8010176:	68f8      	ldr	r0, [r7, #12]
 8010178:	4798      	blx	r3
 801017a:	4603      	mov	r3, r0
 801017c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 801017e:	7dbb      	ldrb	r3, [r7, #22]
 8010180:	2b00      	cmp	r3, #0
 8010182:	d001      	beq.n	8010188 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8010184:	7dbb      	ldrb	r3, [r7, #22]
 8010186:	e000      	b.n	801018a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8010188:	2300      	movs	r3, #0
}
 801018a:	4618      	mov	r0, r3
 801018c:	3718      	adds	r7, #24
 801018e:	46bd      	mov	sp, r7
 8010190:	bd80      	pop	{r7, pc}

08010192 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8010192:	b580      	push	{r7, lr}
 8010194:	b084      	sub	sp, #16
 8010196:	af00      	add	r7, sp, #0
 8010198:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801019a:	2300      	movs	r3, #0
 801019c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	2201      	movs	r2, #1
 80101a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	2200      	movs	r2, #0
 80101aa:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	2200      	movs	r2, #0
 80101b2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	2200      	movs	r2, #0
 80101b8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80101bc:	687b      	ldr	r3, [r7, #4]
 80101be:	2200      	movs	r2, #0
 80101c0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d014      	beq.n	80101f8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80101d4:	685b      	ldr	r3, [r3, #4]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d00e      	beq.n	80101f8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80101e0:	685b      	ldr	r3, [r3, #4]
 80101e2:	687a      	ldr	r2, [r7, #4]
 80101e4:	6852      	ldr	r2, [r2, #4]
 80101e6:	b2d2      	uxtb	r2, r2
 80101e8:	4611      	mov	r1, r2
 80101ea:	6878      	ldr	r0, [r7, #4]
 80101ec:	4798      	blx	r3
 80101ee:	4603      	mov	r3, r0
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d001      	beq.n	80101f8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80101f4:	2303      	movs	r3, #3
 80101f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80101f8:	2340      	movs	r3, #64	@ 0x40
 80101fa:	2200      	movs	r2, #0
 80101fc:	2100      	movs	r1, #0
 80101fe:	6878      	ldr	r0, [r7, #4]
 8010200:	f001 fc6f 	bl	8011ae2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	2201      	movs	r2, #1
 8010208:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	2240      	movs	r2, #64	@ 0x40
 8010210:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010214:	2340      	movs	r3, #64	@ 0x40
 8010216:	2200      	movs	r2, #0
 8010218:	2180      	movs	r1, #128	@ 0x80
 801021a:	6878      	ldr	r0, [r7, #4]
 801021c:	f001 fc61 	bl	8011ae2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	2201      	movs	r2, #1
 8010224:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8010226:	687b      	ldr	r3, [r7, #4]
 8010228:	2240      	movs	r2, #64	@ 0x40
 801022a:	621a      	str	r2, [r3, #32]

  return ret;
 801022c:	7bfb      	ldrb	r3, [r7, #15]
}
 801022e:	4618      	mov	r0, r3
 8010230:	3710      	adds	r7, #16
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}

08010236 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8010236:	b480      	push	{r7}
 8010238:	b083      	sub	sp, #12
 801023a:	af00      	add	r7, sp, #0
 801023c:	6078      	str	r0, [r7, #4]
 801023e:	460b      	mov	r3, r1
 8010240:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	78fa      	ldrb	r2, [r7, #3]
 8010246:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8010248:	2300      	movs	r3, #0
}
 801024a:	4618      	mov	r0, r3
 801024c:	370c      	adds	r7, #12
 801024e:	46bd      	mov	sp, r7
 8010250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010254:	4770      	bx	lr

08010256 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8010256:	b480      	push	{r7}
 8010258:	b083      	sub	sp, #12
 801025a:	af00      	add	r7, sp, #0
 801025c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010264:	b2db      	uxtb	r3, r3
 8010266:	2b04      	cmp	r3, #4
 8010268:	d006      	beq.n	8010278 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010270:	b2da      	uxtb	r2, r3
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	2204      	movs	r2, #4
 801027c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8010280:	2300      	movs	r3, #0
}
 8010282:	4618      	mov	r0, r3
 8010284:	370c      	adds	r7, #12
 8010286:	46bd      	mov	sp, r7
 8010288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028c:	4770      	bx	lr

0801028e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 801028e:	b480      	push	{r7}
 8010290:	b083      	sub	sp, #12
 8010292:	af00      	add	r7, sp, #0
 8010294:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801029c:	b2db      	uxtb	r3, r3
 801029e:	2b04      	cmp	r3, #4
 80102a0:	d106      	bne.n	80102b0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80102a8:	b2da      	uxtb	r2, r3
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80102b0:	2300      	movs	r3, #0
}
 80102b2:	4618      	mov	r0, r3
 80102b4:	370c      	adds	r7, #12
 80102b6:	46bd      	mov	sp, r7
 80102b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102bc:	4770      	bx	lr

080102be <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80102be:	b580      	push	{r7, lr}
 80102c0:	b082      	sub	sp, #8
 80102c2:	af00      	add	r7, sp, #0
 80102c4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80102cc:	b2db      	uxtb	r3, r3
 80102ce:	2b03      	cmp	r3, #3
 80102d0:	d110      	bne.n	80102f4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d00b      	beq.n	80102f4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80102e2:	69db      	ldr	r3, [r3, #28]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d005      	beq.n	80102f4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80102ee:	69db      	ldr	r3, [r3, #28]
 80102f0:	6878      	ldr	r0, [r7, #4]
 80102f2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80102f4:	2300      	movs	r3, #0
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	3708      	adds	r7, #8
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}

080102fe <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80102fe:	b580      	push	{r7, lr}
 8010300:	b082      	sub	sp, #8
 8010302:	af00      	add	r7, sp, #0
 8010304:	6078      	str	r0, [r7, #4]
 8010306:	460b      	mov	r3, r1
 8010308:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	32ae      	adds	r2, #174	@ 0xae
 8010314:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010318:	2b00      	cmp	r3, #0
 801031a:	d101      	bne.n	8010320 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 801031c:	2303      	movs	r3, #3
 801031e:	e01c      	b.n	801035a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010326:	b2db      	uxtb	r3, r3
 8010328:	2b03      	cmp	r3, #3
 801032a:	d115      	bne.n	8010358 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	32ae      	adds	r2, #174	@ 0xae
 8010336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801033a:	6a1b      	ldr	r3, [r3, #32]
 801033c:	2b00      	cmp	r3, #0
 801033e:	d00b      	beq.n	8010358 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	32ae      	adds	r2, #174	@ 0xae
 801034a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801034e:	6a1b      	ldr	r3, [r3, #32]
 8010350:	78fa      	ldrb	r2, [r7, #3]
 8010352:	4611      	mov	r1, r2
 8010354:	6878      	ldr	r0, [r7, #4]
 8010356:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010358:	2300      	movs	r3, #0
}
 801035a:	4618      	mov	r0, r3
 801035c:	3708      	adds	r7, #8
 801035e:	46bd      	mov	sp, r7
 8010360:	bd80      	pop	{r7, pc}

08010362 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8010362:	b580      	push	{r7, lr}
 8010364:	b082      	sub	sp, #8
 8010366:	af00      	add	r7, sp, #0
 8010368:	6078      	str	r0, [r7, #4]
 801036a:	460b      	mov	r3, r1
 801036c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	32ae      	adds	r2, #174	@ 0xae
 8010378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d101      	bne.n	8010384 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8010380:	2303      	movs	r3, #3
 8010382:	e01c      	b.n	80103be <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801038a:	b2db      	uxtb	r3, r3
 801038c:	2b03      	cmp	r3, #3
 801038e:	d115      	bne.n	80103bc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	32ae      	adds	r2, #174	@ 0xae
 801039a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801039e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d00b      	beq.n	80103bc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	32ae      	adds	r2, #174	@ 0xae
 80103ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80103b4:	78fa      	ldrb	r2, [r7, #3]
 80103b6:	4611      	mov	r1, r2
 80103b8:	6878      	ldr	r0, [r7, #4]
 80103ba:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80103bc:	2300      	movs	r3, #0
}
 80103be:	4618      	mov	r0, r3
 80103c0:	3708      	adds	r7, #8
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}

080103c6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80103c6:	b480      	push	{r7}
 80103c8:	b083      	sub	sp, #12
 80103ca:	af00      	add	r7, sp, #0
 80103cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80103ce:	2300      	movs	r3, #0
}
 80103d0:	4618      	mov	r0, r3
 80103d2:	370c      	adds	r7, #12
 80103d4:	46bd      	mov	sp, r7
 80103d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103da:	4770      	bx	lr

080103dc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b084      	sub	sp, #16
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80103e4:	2300      	movs	r3, #0
 80103e6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	2201      	movs	r2, #1
 80103ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d00e      	beq.n	8010418 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010400:	685b      	ldr	r3, [r3, #4]
 8010402:	687a      	ldr	r2, [r7, #4]
 8010404:	6852      	ldr	r2, [r2, #4]
 8010406:	b2d2      	uxtb	r2, r2
 8010408:	4611      	mov	r1, r2
 801040a:	6878      	ldr	r0, [r7, #4]
 801040c:	4798      	blx	r3
 801040e:	4603      	mov	r3, r0
 8010410:	2b00      	cmp	r3, #0
 8010412:	d001      	beq.n	8010418 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8010414:	2303      	movs	r3, #3
 8010416:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010418:	7bfb      	ldrb	r3, [r7, #15]
}
 801041a:	4618      	mov	r0, r3
 801041c:	3710      	adds	r7, #16
 801041e:	46bd      	mov	sp, r7
 8010420:	bd80      	pop	{r7, pc}

08010422 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010422:	b480      	push	{r7}
 8010424:	b083      	sub	sp, #12
 8010426:	af00      	add	r7, sp, #0
 8010428:	6078      	str	r0, [r7, #4]
 801042a:	460b      	mov	r3, r1
 801042c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801042e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010430:	4618      	mov	r0, r3
 8010432:	370c      	adds	r7, #12
 8010434:	46bd      	mov	sp, r7
 8010436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801043a:	4770      	bx	lr

0801043c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 801043c:	b480      	push	{r7}
 801043e:	b083      	sub	sp, #12
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
 8010444:	460b      	mov	r3, r1
 8010446:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010448:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801044a:	4618      	mov	r0, r3
 801044c:	370c      	adds	r7, #12
 801044e:	46bd      	mov	sp, r7
 8010450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010454:	4770      	bx	lr

08010456 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8010456:	b580      	push	{r7, lr}
 8010458:	b086      	sub	sp, #24
 801045a:	af00      	add	r7, sp, #0
 801045c:	6078      	str	r0, [r7, #4]
 801045e:	460b      	mov	r3, r1
 8010460:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801046a:	2300      	movs	r3, #0
 801046c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	885b      	ldrh	r3, [r3, #2]
 8010472:	b29b      	uxth	r3, r3
 8010474:	68fa      	ldr	r2, [r7, #12]
 8010476:	7812      	ldrb	r2, [r2, #0]
 8010478:	4293      	cmp	r3, r2
 801047a:	d91f      	bls.n	80104bc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 801047c:	68fb      	ldr	r3, [r7, #12]
 801047e:	781b      	ldrb	r3, [r3, #0]
 8010480:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8010482:	e013      	b.n	80104ac <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8010484:	f107 030a 	add.w	r3, r7, #10
 8010488:	4619      	mov	r1, r3
 801048a:	6978      	ldr	r0, [r7, #20]
 801048c:	f000 f81b 	bl	80104c6 <USBD_GetNextDesc>
 8010490:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010492:	697b      	ldr	r3, [r7, #20]
 8010494:	785b      	ldrb	r3, [r3, #1]
 8010496:	2b05      	cmp	r3, #5
 8010498:	d108      	bne.n	80104ac <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 801049a:	697b      	ldr	r3, [r7, #20]
 801049c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 801049e:	693b      	ldr	r3, [r7, #16]
 80104a0:	789b      	ldrb	r3, [r3, #2]
 80104a2:	78fa      	ldrb	r2, [r7, #3]
 80104a4:	429a      	cmp	r2, r3
 80104a6:	d008      	beq.n	80104ba <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80104a8:	2300      	movs	r3, #0
 80104aa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	885b      	ldrh	r3, [r3, #2]
 80104b0:	b29a      	uxth	r2, r3
 80104b2:	897b      	ldrh	r3, [r7, #10]
 80104b4:	429a      	cmp	r2, r3
 80104b6:	d8e5      	bhi.n	8010484 <USBD_GetEpDesc+0x2e>
 80104b8:	e000      	b.n	80104bc <USBD_GetEpDesc+0x66>
          break;
 80104ba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80104bc:	693b      	ldr	r3, [r7, #16]
}
 80104be:	4618      	mov	r0, r3
 80104c0:	3718      	adds	r7, #24
 80104c2:	46bd      	mov	sp, r7
 80104c4:	bd80      	pop	{r7, pc}

080104c6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80104c6:	b480      	push	{r7}
 80104c8:	b085      	sub	sp, #20
 80104ca:	af00      	add	r7, sp, #0
 80104cc:	6078      	str	r0, [r7, #4]
 80104ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80104d4:	683b      	ldr	r3, [r7, #0]
 80104d6:	881b      	ldrh	r3, [r3, #0]
 80104d8:	68fa      	ldr	r2, [r7, #12]
 80104da:	7812      	ldrb	r2, [r2, #0]
 80104dc:	4413      	add	r3, r2
 80104de:	b29a      	uxth	r2, r3
 80104e0:	683b      	ldr	r3, [r7, #0]
 80104e2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	781b      	ldrb	r3, [r3, #0]
 80104e8:	461a      	mov	r2, r3
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	4413      	add	r3, r2
 80104ee:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80104f0:	68fb      	ldr	r3, [r7, #12]
}
 80104f2:	4618      	mov	r0, r3
 80104f4:	3714      	adds	r7, #20
 80104f6:	46bd      	mov	sp, r7
 80104f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104fc:	4770      	bx	lr

080104fe <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80104fe:	b480      	push	{r7}
 8010500:	b087      	sub	sp, #28
 8010502:	af00      	add	r7, sp, #0
 8010504:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801050a:	697b      	ldr	r3, [r7, #20]
 801050c:	781b      	ldrb	r3, [r3, #0]
 801050e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010510:	697b      	ldr	r3, [r7, #20]
 8010512:	3301      	adds	r3, #1
 8010514:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8010516:	697b      	ldr	r3, [r7, #20]
 8010518:	781b      	ldrb	r3, [r3, #0]
 801051a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 801051c:	8a3b      	ldrh	r3, [r7, #16]
 801051e:	021b      	lsls	r3, r3, #8
 8010520:	b21a      	sxth	r2, r3
 8010522:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8010526:	4313      	orrs	r3, r2
 8010528:	b21b      	sxth	r3, r3
 801052a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 801052c:	89fb      	ldrh	r3, [r7, #14]
}
 801052e:	4618      	mov	r0, r3
 8010530:	371c      	adds	r7, #28
 8010532:	46bd      	mov	sp, r7
 8010534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010538:	4770      	bx	lr
	...

0801053c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801053c:	b580      	push	{r7, lr}
 801053e:	b084      	sub	sp, #16
 8010540:	af00      	add	r7, sp, #0
 8010542:	6078      	str	r0, [r7, #4]
 8010544:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010546:	2300      	movs	r3, #0
 8010548:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801054a:	683b      	ldr	r3, [r7, #0]
 801054c:	781b      	ldrb	r3, [r3, #0]
 801054e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010552:	2b40      	cmp	r3, #64	@ 0x40
 8010554:	d005      	beq.n	8010562 <USBD_StdDevReq+0x26>
 8010556:	2b40      	cmp	r3, #64	@ 0x40
 8010558:	d857      	bhi.n	801060a <USBD_StdDevReq+0xce>
 801055a:	2b00      	cmp	r3, #0
 801055c:	d00f      	beq.n	801057e <USBD_StdDevReq+0x42>
 801055e:	2b20      	cmp	r3, #32
 8010560:	d153      	bne.n	801060a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	32ae      	adds	r2, #174	@ 0xae
 801056c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010570:	689b      	ldr	r3, [r3, #8]
 8010572:	6839      	ldr	r1, [r7, #0]
 8010574:	6878      	ldr	r0, [r7, #4]
 8010576:	4798      	blx	r3
 8010578:	4603      	mov	r3, r0
 801057a:	73fb      	strb	r3, [r7, #15]
      break;
 801057c:	e04a      	b.n	8010614 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 801057e:	683b      	ldr	r3, [r7, #0]
 8010580:	785b      	ldrb	r3, [r3, #1]
 8010582:	2b09      	cmp	r3, #9
 8010584:	d83b      	bhi.n	80105fe <USBD_StdDevReq+0xc2>
 8010586:	a201      	add	r2, pc, #4	@ (adr r2, 801058c <USBD_StdDevReq+0x50>)
 8010588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801058c:	080105e1 	.word	0x080105e1
 8010590:	080105f5 	.word	0x080105f5
 8010594:	080105ff 	.word	0x080105ff
 8010598:	080105eb 	.word	0x080105eb
 801059c:	080105ff 	.word	0x080105ff
 80105a0:	080105bf 	.word	0x080105bf
 80105a4:	080105b5 	.word	0x080105b5
 80105a8:	080105ff 	.word	0x080105ff
 80105ac:	080105d7 	.word	0x080105d7
 80105b0:	080105c9 	.word	0x080105c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80105b4:	6839      	ldr	r1, [r7, #0]
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f000 fa3c 	bl	8010a34 <USBD_GetDescriptor>
          break;
 80105bc:	e024      	b.n	8010608 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80105be:	6839      	ldr	r1, [r7, #0]
 80105c0:	6878      	ldr	r0, [r7, #4]
 80105c2:	f000 fbcb 	bl	8010d5c <USBD_SetAddress>
          break;
 80105c6:	e01f      	b.n	8010608 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80105c8:	6839      	ldr	r1, [r7, #0]
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f000 fc0a 	bl	8010de4 <USBD_SetConfig>
 80105d0:	4603      	mov	r3, r0
 80105d2:	73fb      	strb	r3, [r7, #15]
          break;
 80105d4:	e018      	b.n	8010608 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80105d6:	6839      	ldr	r1, [r7, #0]
 80105d8:	6878      	ldr	r0, [r7, #4]
 80105da:	f000 fcad 	bl	8010f38 <USBD_GetConfig>
          break;
 80105de:	e013      	b.n	8010608 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80105e0:	6839      	ldr	r1, [r7, #0]
 80105e2:	6878      	ldr	r0, [r7, #4]
 80105e4:	f000 fcde 	bl	8010fa4 <USBD_GetStatus>
          break;
 80105e8:	e00e      	b.n	8010608 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80105ea:	6839      	ldr	r1, [r7, #0]
 80105ec:	6878      	ldr	r0, [r7, #4]
 80105ee:	f000 fd0d 	bl	801100c <USBD_SetFeature>
          break;
 80105f2:	e009      	b.n	8010608 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80105f4:	6839      	ldr	r1, [r7, #0]
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f000 fd31 	bl	801105e <USBD_ClrFeature>
          break;
 80105fc:	e004      	b.n	8010608 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80105fe:	6839      	ldr	r1, [r7, #0]
 8010600:	6878      	ldr	r0, [r7, #4]
 8010602:	f000 fd88 	bl	8011116 <USBD_CtlError>
          break;
 8010606:	bf00      	nop
      }
      break;
 8010608:	e004      	b.n	8010614 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 801060a:	6839      	ldr	r1, [r7, #0]
 801060c:	6878      	ldr	r0, [r7, #4]
 801060e:	f000 fd82 	bl	8011116 <USBD_CtlError>
      break;
 8010612:	bf00      	nop
  }

  return ret;
 8010614:	7bfb      	ldrb	r3, [r7, #15]
}
 8010616:	4618      	mov	r0, r3
 8010618:	3710      	adds	r7, #16
 801061a:	46bd      	mov	sp, r7
 801061c:	bd80      	pop	{r7, pc}
 801061e:	bf00      	nop

08010620 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010620:	b580      	push	{r7, lr}
 8010622:	b084      	sub	sp, #16
 8010624:	af00      	add	r7, sp, #0
 8010626:	6078      	str	r0, [r7, #4]
 8010628:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801062a:	2300      	movs	r3, #0
 801062c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801062e:	683b      	ldr	r3, [r7, #0]
 8010630:	781b      	ldrb	r3, [r3, #0]
 8010632:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010636:	2b40      	cmp	r3, #64	@ 0x40
 8010638:	d005      	beq.n	8010646 <USBD_StdItfReq+0x26>
 801063a:	2b40      	cmp	r3, #64	@ 0x40
 801063c:	d852      	bhi.n	80106e4 <USBD_StdItfReq+0xc4>
 801063e:	2b00      	cmp	r3, #0
 8010640:	d001      	beq.n	8010646 <USBD_StdItfReq+0x26>
 8010642:	2b20      	cmp	r3, #32
 8010644:	d14e      	bne.n	80106e4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801064c:	b2db      	uxtb	r3, r3
 801064e:	3b01      	subs	r3, #1
 8010650:	2b02      	cmp	r3, #2
 8010652:	d840      	bhi.n	80106d6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010654:	683b      	ldr	r3, [r7, #0]
 8010656:	889b      	ldrh	r3, [r3, #4]
 8010658:	b2db      	uxtb	r3, r3
 801065a:	2b01      	cmp	r3, #1
 801065c:	d836      	bhi.n	80106cc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 801065e:	683b      	ldr	r3, [r7, #0]
 8010660:	889b      	ldrh	r3, [r3, #4]
 8010662:	b2db      	uxtb	r3, r3
 8010664:	4619      	mov	r1, r3
 8010666:	6878      	ldr	r0, [r7, #4]
 8010668:	f7ff fedb 	bl	8010422 <USBD_CoreFindIF>
 801066c:	4603      	mov	r3, r0
 801066e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010670:	7bbb      	ldrb	r3, [r7, #14]
 8010672:	2bff      	cmp	r3, #255	@ 0xff
 8010674:	d01d      	beq.n	80106b2 <USBD_StdItfReq+0x92>
 8010676:	7bbb      	ldrb	r3, [r7, #14]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d11a      	bne.n	80106b2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 801067c:	7bba      	ldrb	r2, [r7, #14]
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	32ae      	adds	r2, #174	@ 0xae
 8010682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010686:	689b      	ldr	r3, [r3, #8]
 8010688:	2b00      	cmp	r3, #0
 801068a:	d00f      	beq.n	80106ac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 801068c:	7bba      	ldrb	r2, [r7, #14]
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010694:	7bba      	ldrb	r2, [r7, #14]
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	32ae      	adds	r2, #174	@ 0xae
 801069a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801069e:	689b      	ldr	r3, [r3, #8]
 80106a0:	6839      	ldr	r1, [r7, #0]
 80106a2:	6878      	ldr	r0, [r7, #4]
 80106a4:	4798      	blx	r3
 80106a6:	4603      	mov	r3, r0
 80106a8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80106aa:	e004      	b.n	80106b6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80106ac:	2303      	movs	r3, #3
 80106ae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80106b0:	e001      	b.n	80106b6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80106b2:	2303      	movs	r3, #3
 80106b4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80106b6:	683b      	ldr	r3, [r7, #0]
 80106b8:	88db      	ldrh	r3, [r3, #6]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d110      	bne.n	80106e0 <USBD_StdItfReq+0xc0>
 80106be:	7bfb      	ldrb	r3, [r7, #15]
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d10d      	bne.n	80106e0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	f000 fdfd 	bl	80112c4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80106ca:	e009      	b.n	80106e0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80106cc:	6839      	ldr	r1, [r7, #0]
 80106ce:	6878      	ldr	r0, [r7, #4]
 80106d0:	f000 fd21 	bl	8011116 <USBD_CtlError>
          break;
 80106d4:	e004      	b.n	80106e0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80106d6:	6839      	ldr	r1, [r7, #0]
 80106d8:	6878      	ldr	r0, [r7, #4]
 80106da:	f000 fd1c 	bl	8011116 <USBD_CtlError>
          break;
 80106de:	e000      	b.n	80106e2 <USBD_StdItfReq+0xc2>
          break;
 80106e0:	bf00      	nop
      }
      break;
 80106e2:	e004      	b.n	80106ee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80106e4:	6839      	ldr	r1, [r7, #0]
 80106e6:	6878      	ldr	r0, [r7, #4]
 80106e8:	f000 fd15 	bl	8011116 <USBD_CtlError>
      break;
 80106ec:	bf00      	nop
  }

  return ret;
 80106ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80106f0:	4618      	mov	r0, r3
 80106f2:	3710      	adds	r7, #16
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd80      	pop	{r7, pc}

080106f8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b084      	sub	sp, #16
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
 8010700:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8010702:	2300      	movs	r3, #0
 8010704:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8010706:	683b      	ldr	r3, [r7, #0]
 8010708:	889b      	ldrh	r3, [r3, #4]
 801070a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801070c:	683b      	ldr	r3, [r7, #0]
 801070e:	781b      	ldrb	r3, [r3, #0]
 8010710:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010714:	2b40      	cmp	r3, #64	@ 0x40
 8010716:	d007      	beq.n	8010728 <USBD_StdEPReq+0x30>
 8010718:	2b40      	cmp	r3, #64	@ 0x40
 801071a:	f200 817f 	bhi.w	8010a1c <USBD_StdEPReq+0x324>
 801071e:	2b00      	cmp	r3, #0
 8010720:	d02a      	beq.n	8010778 <USBD_StdEPReq+0x80>
 8010722:	2b20      	cmp	r3, #32
 8010724:	f040 817a 	bne.w	8010a1c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010728:	7bbb      	ldrb	r3, [r7, #14]
 801072a:	4619      	mov	r1, r3
 801072c:	6878      	ldr	r0, [r7, #4]
 801072e:	f7ff fe85 	bl	801043c <USBD_CoreFindEP>
 8010732:	4603      	mov	r3, r0
 8010734:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010736:	7b7b      	ldrb	r3, [r7, #13]
 8010738:	2bff      	cmp	r3, #255	@ 0xff
 801073a:	f000 8174 	beq.w	8010a26 <USBD_StdEPReq+0x32e>
 801073e:	7b7b      	ldrb	r3, [r7, #13]
 8010740:	2b00      	cmp	r3, #0
 8010742:	f040 8170 	bne.w	8010a26 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8010746:	7b7a      	ldrb	r2, [r7, #13]
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 801074e:	7b7a      	ldrb	r2, [r7, #13]
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	32ae      	adds	r2, #174	@ 0xae
 8010754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010758:	689b      	ldr	r3, [r3, #8]
 801075a:	2b00      	cmp	r3, #0
 801075c:	f000 8163 	beq.w	8010a26 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8010760:	7b7a      	ldrb	r2, [r7, #13]
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	32ae      	adds	r2, #174	@ 0xae
 8010766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801076a:	689b      	ldr	r3, [r3, #8]
 801076c:	6839      	ldr	r1, [r7, #0]
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	4798      	blx	r3
 8010772:	4603      	mov	r3, r0
 8010774:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010776:	e156      	b.n	8010a26 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010778:	683b      	ldr	r3, [r7, #0]
 801077a:	785b      	ldrb	r3, [r3, #1]
 801077c:	2b03      	cmp	r3, #3
 801077e:	d008      	beq.n	8010792 <USBD_StdEPReq+0x9a>
 8010780:	2b03      	cmp	r3, #3
 8010782:	f300 8145 	bgt.w	8010a10 <USBD_StdEPReq+0x318>
 8010786:	2b00      	cmp	r3, #0
 8010788:	f000 809b 	beq.w	80108c2 <USBD_StdEPReq+0x1ca>
 801078c:	2b01      	cmp	r3, #1
 801078e:	d03c      	beq.n	801080a <USBD_StdEPReq+0x112>
 8010790:	e13e      	b.n	8010a10 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010798:	b2db      	uxtb	r3, r3
 801079a:	2b02      	cmp	r3, #2
 801079c:	d002      	beq.n	80107a4 <USBD_StdEPReq+0xac>
 801079e:	2b03      	cmp	r3, #3
 80107a0:	d016      	beq.n	80107d0 <USBD_StdEPReq+0xd8>
 80107a2:	e02c      	b.n	80107fe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80107a4:	7bbb      	ldrb	r3, [r7, #14]
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d00d      	beq.n	80107c6 <USBD_StdEPReq+0xce>
 80107aa:	7bbb      	ldrb	r3, [r7, #14]
 80107ac:	2b80      	cmp	r3, #128	@ 0x80
 80107ae:	d00a      	beq.n	80107c6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80107b0:	7bbb      	ldrb	r3, [r7, #14]
 80107b2:	4619      	mov	r1, r3
 80107b4:	6878      	ldr	r0, [r7, #4]
 80107b6:	f001 f9d9 	bl	8011b6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80107ba:	2180      	movs	r1, #128	@ 0x80
 80107bc:	6878      	ldr	r0, [r7, #4]
 80107be:	f001 f9d5 	bl	8011b6c <USBD_LL_StallEP>
 80107c2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80107c4:	e020      	b.n	8010808 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80107c6:	6839      	ldr	r1, [r7, #0]
 80107c8:	6878      	ldr	r0, [r7, #4]
 80107ca:	f000 fca4 	bl	8011116 <USBD_CtlError>
              break;
 80107ce:	e01b      	b.n	8010808 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80107d0:	683b      	ldr	r3, [r7, #0]
 80107d2:	885b      	ldrh	r3, [r3, #2]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d10e      	bne.n	80107f6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80107d8:	7bbb      	ldrb	r3, [r7, #14]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d00b      	beq.n	80107f6 <USBD_StdEPReq+0xfe>
 80107de:	7bbb      	ldrb	r3, [r7, #14]
 80107e0:	2b80      	cmp	r3, #128	@ 0x80
 80107e2:	d008      	beq.n	80107f6 <USBD_StdEPReq+0xfe>
 80107e4:	683b      	ldr	r3, [r7, #0]
 80107e6:	88db      	ldrh	r3, [r3, #6]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d104      	bne.n	80107f6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80107ec:	7bbb      	ldrb	r3, [r7, #14]
 80107ee:	4619      	mov	r1, r3
 80107f0:	6878      	ldr	r0, [r7, #4]
 80107f2:	f001 f9bb 	bl	8011b6c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80107f6:	6878      	ldr	r0, [r7, #4]
 80107f8:	f000 fd64 	bl	80112c4 <USBD_CtlSendStatus>

              break;
 80107fc:	e004      	b.n	8010808 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80107fe:	6839      	ldr	r1, [r7, #0]
 8010800:	6878      	ldr	r0, [r7, #4]
 8010802:	f000 fc88 	bl	8011116 <USBD_CtlError>
              break;
 8010806:	bf00      	nop
          }
          break;
 8010808:	e107      	b.n	8010a1a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010810:	b2db      	uxtb	r3, r3
 8010812:	2b02      	cmp	r3, #2
 8010814:	d002      	beq.n	801081c <USBD_StdEPReq+0x124>
 8010816:	2b03      	cmp	r3, #3
 8010818:	d016      	beq.n	8010848 <USBD_StdEPReq+0x150>
 801081a:	e04b      	b.n	80108b4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801081c:	7bbb      	ldrb	r3, [r7, #14]
 801081e:	2b00      	cmp	r3, #0
 8010820:	d00d      	beq.n	801083e <USBD_StdEPReq+0x146>
 8010822:	7bbb      	ldrb	r3, [r7, #14]
 8010824:	2b80      	cmp	r3, #128	@ 0x80
 8010826:	d00a      	beq.n	801083e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010828:	7bbb      	ldrb	r3, [r7, #14]
 801082a:	4619      	mov	r1, r3
 801082c:	6878      	ldr	r0, [r7, #4]
 801082e:	f001 f99d 	bl	8011b6c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010832:	2180      	movs	r1, #128	@ 0x80
 8010834:	6878      	ldr	r0, [r7, #4]
 8010836:	f001 f999 	bl	8011b6c <USBD_LL_StallEP>
 801083a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801083c:	e040      	b.n	80108c0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801083e:	6839      	ldr	r1, [r7, #0]
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	f000 fc68 	bl	8011116 <USBD_CtlError>
              break;
 8010846:	e03b      	b.n	80108c0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	885b      	ldrh	r3, [r3, #2]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d136      	bne.n	80108be <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010850:	7bbb      	ldrb	r3, [r7, #14]
 8010852:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010856:	2b00      	cmp	r3, #0
 8010858:	d004      	beq.n	8010864 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 801085a:	7bbb      	ldrb	r3, [r7, #14]
 801085c:	4619      	mov	r1, r3
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	f001 f9a3 	bl	8011baa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	f000 fd2d 	bl	80112c4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 801086a:	7bbb      	ldrb	r3, [r7, #14]
 801086c:	4619      	mov	r1, r3
 801086e:	6878      	ldr	r0, [r7, #4]
 8010870:	f7ff fde4 	bl	801043c <USBD_CoreFindEP>
 8010874:	4603      	mov	r3, r0
 8010876:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010878:	7b7b      	ldrb	r3, [r7, #13]
 801087a:	2bff      	cmp	r3, #255	@ 0xff
 801087c:	d01f      	beq.n	80108be <USBD_StdEPReq+0x1c6>
 801087e:	7b7b      	ldrb	r3, [r7, #13]
 8010880:	2b00      	cmp	r3, #0
 8010882:	d11c      	bne.n	80108be <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8010884:	7b7a      	ldrb	r2, [r7, #13]
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 801088c:	7b7a      	ldrb	r2, [r7, #13]
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	32ae      	adds	r2, #174	@ 0xae
 8010892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010896:	689b      	ldr	r3, [r3, #8]
 8010898:	2b00      	cmp	r3, #0
 801089a:	d010      	beq.n	80108be <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801089c:	7b7a      	ldrb	r2, [r7, #13]
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	32ae      	adds	r2, #174	@ 0xae
 80108a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80108a6:	689b      	ldr	r3, [r3, #8]
 80108a8:	6839      	ldr	r1, [r7, #0]
 80108aa:	6878      	ldr	r0, [r7, #4]
 80108ac:	4798      	blx	r3
 80108ae:	4603      	mov	r3, r0
 80108b0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80108b2:	e004      	b.n	80108be <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80108b4:	6839      	ldr	r1, [r7, #0]
 80108b6:	6878      	ldr	r0, [r7, #4]
 80108b8:	f000 fc2d 	bl	8011116 <USBD_CtlError>
              break;
 80108bc:	e000      	b.n	80108c0 <USBD_StdEPReq+0x1c8>
              break;
 80108be:	bf00      	nop
          }
          break;
 80108c0:	e0ab      	b.n	8010a1a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80108c8:	b2db      	uxtb	r3, r3
 80108ca:	2b02      	cmp	r3, #2
 80108cc:	d002      	beq.n	80108d4 <USBD_StdEPReq+0x1dc>
 80108ce:	2b03      	cmp	r3, #3
 80108d0:	d032      	beq.n	8010938 <USBD_StdEPReq+0x240>
 80108d2:	e097      	b.n	8010a04 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80108d4:	7bbb      	ldrb	r3, [r7, #14]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d007      	beq.n	80108ea <USBD_StdEPReq+0x1f2>
 80108da:	7bbb      	ldrb	r3, [r7, #14]
 80108dc:	2b80      	cmp	r3, #128	@ 0x80
 80108de:	d004      	beq.n	80108ea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80108e0:	6839      	ldr	r1, [r7, #0]
 80108e2:	6878      	ldr	r0, [r7, #4]
 80108e4:	f000 fc17 	bl	8011116 <USBD_CtlError>
                break;
 80108e8:	e091      	b.n	8010a0e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80108ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	da0b      	bge.n	801090a <USBD_StdEPReq+0x212>
 80108f2:	7bbb      	ldrb	r3, [r7, #14]
 80108f4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80108f8:	4613      	mov	r3, r2
 80108fa:	009b      	lsls	r3, r3, #2
 80108fc:	4413      	add	r3, r2
 80108fe:	009b      	lsls	r3, r3, #2
 8010900:	3310      	adds	r3, #16
 8010902:	687a      	ldr	r2, [r7, #4]
 8010904:	4413      	add	r3, r2
 8010906:	3304      	adds	r3, #4
 8010908:	e00b      	b.n	8010922 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801090a:	7bbb      	ldrb	r3, [r7, #14]
 801090c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010910:	4613      	mov	r3, r2
 8010912:	009b      	lsls	r3, r3, #2
 8010914:	4413      	add	r3, r2
 8010916:	009b      	lsls	r3, r3, #2
 8010918:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 801091c:	687a      	ldr	r2, [r7, #4]
 801091e:	4413      	add	r3, r2
 8010920:	3304      	adds	r3, #4
 8010922:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010924:	68bb      	ldr	r3, [r7, #8]
 8010926:	2200      	movs	r2, #0
 8010928:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801092a:	68bb      	ldr	r3, [r7, #8]
 801092c:	2202      	movs	r2, #2
 801092e:	4619      	mov	r1, r3
 8010930:	6878      	ldr	r0, [r7, #4]
 8010932:	f000 fc6d 	bl	8011210 <USBD_CtlSendData>
              break;
 8010936:	e06a      	b.n	8010a0e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010938:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801093c:	2b00      	cmp	r3, #0
 801093e:	da11      	bge.n	8010964 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010940:	7bbb      	ldrb	r3, [r7, #14]
 8010942:	f003 020f 	and.w	r2, r3, #15
 8010946:	6879      	ldr	r1, [r7, #4]
 8010948:	4613      	mov	r3, r2
 801094a:	009b      	lsls	r3, r3, #2
 801094c:	4413      	add	r3, r2
 801094e:	009b      	lsls	r3, r3, #2
 8010950:	440b      	add	r3, r1
 8010952:	3324      	adds	r3, #36	@ 0x24
 8010954:	881b      	ldrh	r3, [r3, #0]
 8010956:	2b00      	cmp	r3, #0
 8010958:	d117      	bne.n	801098a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 801095a:	6839      	ldr	r1, [r7, #0]
 801095c:	6878      	ldr	r0, [r7, #4]
 801095e:	f000 fbda 	bl	8011116 <USBD_CtlError>
                  break;
 8010962:	e054      	b.n	8010a0e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010964:	7bbb      	ldrb	r3, [r7, #14]
 8010966:	f003 020f 	and.w	r2, r3, #15
 801096a:	6879      	ldr	r1, [r7, #4]
 801096c:	4613      	mov	r3, r2
 801096e:	009b      	lsls	r3, r3, #2
 8010970:	4413      	add	r3, r2
 8010972:	009b      	lsls	r3, r3, #2
 8010974:	440b      	add	r3, r1
 8010976:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 801097a:	881b      	ldrh	r3, [r3, #0]
 801097c:	2b00      	cmp	r3, #0
 801097e:	d104      	bne.n	801098a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010980:	6839      	ldr	r1, [r7, #0]
 8010982:	6878      	ldr	r0, [r7, #4]
 8010984:	f000 fbc7 	bl	8011116 <USBD_CtlError>
                  break;
 8010988:	e041      	b.n	8010a0e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801098a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801098e:	2b00      	cmp	r3, #0
 8010990:	da0b      	bge.n	80109aa <USBD_StdEPReq+0x2b2>
 8010992:	7bbb      	ldrb	r3, [r7, #14]
 8010994:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010998:	4613      	mov	r3, r2
 801099a:	009b      	lsls	r3, r3, #2
 801099c:	4413      	add	r3, r2
 801099e:	009b      	lsls	r3, r3, #2
 80109a0:	3310      	adds	r3, #16
 80109a2:	687a      	ldr	r2, [r7, #4]
 80109a4:	4413      	add	r3, r2
 80109a6:	3304      	adds	r3, #4
 80109a8:	e00b      	b.n	80109c2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80109aa:	7bbb      	ldrb	r3, [r7, #14]
 80109ac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80109b0:	4613      	mov	r3, r2
 80109b2:	009b      	lsls	r3, r3, #2
 80109b4:	4413      	add	r3, r2
 80109b6:	009b      	lsls	r3, r3, #2
 80109b8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80109bc:	687a      	ldr	r2, [r7, #4]
 80109be:	4413      	add	r3, r2
 80109c0:	3304      	adds	r3, #4
 80109c2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80109c4:	7bbb      	ldrb	r3, [r7, #14]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d002      	beq.n	80109d0 <USBD_StdEPReq+0x2d8>
 80109ca:	7bbb      	ldrb	r3, [r7, #14]
 80109cc:	2b80      	cmp	r3, #128	@ 0x80
 80109ce:	d103      	bne.n	80109d8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80109d0:	68bb      	ldr	r3, [r7, #8]
 80109d2:	2200      	movs	r2, #0
 80109d4:	601a      	str	r2, [r3, #0]
 80109d6:	e00e      	b.n	80109f6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80109d8:	7bbb      	ldrb	r3, [r7, #14]
 80109da:	4619      	mov	r1, r3
 80109dc:	6878      	ldr	r0, [r7, #4]
 80109de:	f001 f903 	bl	8011be8 <USBD_LL_IsStallEP>
 80109e2:	4603      	mov	r3, r0
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d003      	beq.n	80109f0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80109e8:	68bb      	ldr	r3, [r7, #8]
 80109ea:	2201      	movs	r2, #1
 80109ec:	601a      	str	r2, [r3, #0]
 80109ee:	e002      	b.n	80109f6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80109f0:	68bb      	ldr	r3, [r7, #8]
 80109f2:	2200      	movs	r2, #0
 80109f4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80109f6:	68bb      	ldr	r3, [r7, #8]
 80109f8:	2202      	movs	r2, #2
 80109fa:	4619      	mov	r1, r3
 80109fc:	6878      	ldr	r0, [r7, #4]
 80109fe:	f000 fc07 	bl	8011210 <USBD_CtlSendData>
              break;
 8010a02:	e004      	b.n	8010a0e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010a04:	6839      	ldr	r1, [r7, #0]
 8010a06:	6878      	ldr	r0, [r7, #4]
 8010a08:	f000 fb85 	bl	8011116 <USBD_CtlError>
              break;
 8010a0c:	bf00      	nop
          }
          break;
 8010a0e:	e004      	b.n	8010a1a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010a10:	6839      	ldr	r1, [r7, #0]
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	f000 fb7f 	bl	8011116 <USBD_CtlError>
          break;
 8010a18:	bf00      	nop
      }
      break;
 8010a1a:	e005      	b.n	8010a28 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010a1c:	6839      	ldr	r1, [r7, #0]
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f000 fb79 	bl	8011116 <USBD_CtlError>
      break;
 8010a24:	e000      	b.n	8010a28 <USBD_StdEPReq+0x330>
      break;
 8010a26:	bf00      	nop
  }

  return ret;
 8010a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	3710      	adds	r7, #16
 8010a2e:	46bd      	mov	sp, r7
 8010a30:	bd80      	pop	{r7, pc}
	...

08010a34 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a34:	b580      	push	{r7, lr}
 8010a36:	b084      	sub	sp, #16
 8010a38:	af00      	add	r7, sp, #0
 8010a3a:	6078      	str	r0, [r7, #4]
 8010a3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010a3e:	2300      	movs	r3, #0
 8010a40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010a42:	2300      	movs	r3, #0
 8010a44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010a46:	2300      	movs	r3, #0
 8010a48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010a4a:	683b      	ldr	r3, [r7, #0]
 8010a4c:	885b      	ldrh	r3, [r3, #2]
 8010a4e:	0a1b      	lsrs	r3, r3, #8
 8010a50:	b29b      	uxth	r3, r3
 8010a52:	3b01      	subs	r3, #1
 8010a54:	2b0e      	cmp	r3, #14
 8010a56:	f200 8152 	bhi.w	8010cfe <USBD_GetDescriptor+0x2ca>
 8010a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8010a60 <USBD_GetDescriptor+0x2c>)
 8010a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a60:	08010ad1 	.word	0x08010ad1
 8010a64:	08010ae9 	.word	0x08010ae9
 8010a68:	08010b29 	.word	0x08010b29
 8010a6c:	08010cff 	.word	0x08010cff
 8010a70:	08010cff 	.word	0x08010cff
 8010a74:	08010c9f 	.word	0x08010c9f
 8010a78:	08010ccb 	.word	0x08010ccb
 8010a7c:	08010cff 	.word	0x08010cff
 8010a80:	08010cff 	.word	0x08010cff
 8010a84:	08010cff 	.word	0x08010cff
 8010a88:	08010cff 	.word	0x08010cff
 8010a8c:	08010cff 	.word	0x08010cff
 8010a90:	08010cff 	.word	0x08010cff
 8010a94:	08010cff 	.word	0x08010cff
 8010a98:	08010a9d 	.word	0x08010a9d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010aa2:	69db      	ldr	r3, [r3, #28]
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d00b      	beq.n	8010ac0 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010aae:	69db      	ldr	r3, [r3, #28]
 8010ab0:	687a      	ldr	r2, [r7, #4]
 8010ab2:	7c12      	ldrb	r2, [r2, #16]
 8010ab4:	f107 0108 	add.w	r1, r7, #8
 8010ab8:	4610      	mov	r0, r2
 8010aba:	4798      	blx	r3
 8010abc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010abe:	e126      	b.n	8010d0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010ac0:	6839      	ldr	r1, [r7, #0]
 8010ac2:	6878      	ldr	r0, [r7, #4]
 8010ac4:	f000 fb27 	bl	8011116 <USBD_CtlError>
        err++;
 8010ac8:	7afb      	ldrb	r3, [r7, #11]
 8010aca:	3301      	adds	r3, #1
 8010acc:	72fb      	strb	r3, [r7, #11]
      break;
 8010ace:	e11e      	b.n	8010d0e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	687a      	ldr	r2, [r7, #4]
 8010ada:	7c12      	ldrb	r2, [r2, #16]
 8010adc:	f107 0108 	add.w	r1, r7, #8
 8010ae0:	4610      	mov	r0, r2
 8010ae2:	4798      	blx	r3
 8010ae4:	60f8      	str	r0, [r7, #12]
      break;
 8010ae6:	e112      	b.n	8010d0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	7c1b      	ldrb	r3, [r3, #16]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d10d      	bne.n	8010b0c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010af8:	f107 0208 	add.w	r2, r7, #8
 8010afc:	4610      	mov	r0, r2
 8010afe:	4798      	blx	r3
 8010b00:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	3301      	adds	r3, #1
 8010b06:	2202      	movs	r2, #2
 8010b08:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010b0a:	e100      	b.n	8010d0e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b14:	f107 0208 	add.w	r2, r7, #8
 8010b18:	4610      	mov	r0, r2
 8010b1a:	4798      	blx	r3
 8010b1c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	3301      	adds	r3, #1
 8010b22:	2202      	movs	r2, #2
 8010b24:	701a      	strb	r2, [r3, #0]
      break;
 8010b26:	e0f2      	b.n	8010d0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	885b      	ldrh	r3, [r3, #2]
 8010b2c:	b2db      	uxtb	r3, r3
 8010b2e:	2b05      	cmp	r3, #5
 8010b30:	f200 80ac 	bhi.w	8010c8c <USBD_GetDescriptor+0x258>
 8010b34:	a201      	add	r2, pc, #4	@ (adr r2, 8010b3c <USBD_GetDescriptor+0x108>)
 8010b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b3a:	bf00      	nop
 8010b3c:	08010b55 	.word	0x08010b55
 8010b40:	08010b89 	.word	0x08010b89
 8010b44:	08010bbd 	.word	0x08010bbd
 8010b48:	08010bf1 	.word	0x08010bf1
 8010b4c:	08010c25 	.word	0x08010c25
 8010b50:	08010c59 	.word	0x08010c59
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b5a:	685b      	ldr	r3, [r3, #4]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d00b      	beq.n	8010b78 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b66:	685b      	ldr	r3, [r3, #4]
 8010b68:	687a      	ldr	r2, [r7, #4]
 8010b6a:	7c12      	ldrb	r2, [r2, #16]
 8010b6c:	f107 0108 	add.w	r1, r7, #8
 8010b70:	4610      	mov	r0, r2
 8010b72:	4798      	blx	r3
 8010b74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010b76:	e091      	b.n	8010c9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010b78:	6839      	ldr	r1, [r7, #0]
 8010b7a:	6878      	ldr	r0, [r7, #4]
 8010b7c:	f000 facb 	bl	8011116 <USBD_CtlError>
            err++;
 8010b80:	7afb      	ldrb	r3, [r7, #11]
 8010b82:	3301      	adds	r3, #1
 8010b84:	72fb      	strb	r3, [r7, #11]
          break;
 8010b86:	e089      	b.n	8010c9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b8e:	689b      	ldr	r3, [r3, #8]
 8010b90:	2b00      	cmp	r3, #0
 8010b92:	d00b      	beq.n	8010bac <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010b9a:	689b      	ldr	r3, [r3, #8]
 8010b9c:	687a      	ldr	r2, [r7, #4]
 8010b9e:	7c12      	ldrb	r2, [r2, #16]
 8010ba0:	f107 0108 	add.w	r1, r7, #8
 8010ba4:	4610      	mov	r0, r2
 8010ba6:	4798      	blx	r3
 8010ba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010baa:	e077      	b.n	8010c9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010bac:	6839      	ldr	r1, [r7, #0]
 8010bae:	6878      	ldr	r0, [r7, #4]
 8010bb0:	f000 fab1 	bl	8011116 <USBD_CtlError>
            err++;
 8010bb4:	7afb      	ldrb	r3, [r7, #11]
 8010bb6:	3301      	adds	r3, #1
 8010bb8:	72fb      	strb	r3, [r7, #11]
          break;
 8010bba:	e06f      	b.n	8010c9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010bc2:	68db      	ldr	r3, [r3, #12]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d00b      	beq.n	8010be0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010bce:	68db      	ldr	r3, [r3, #12]
 8010bd0:	687a      	ldr	r2, [r7, #4]
 8010bd2:	7c12      	ldrb	r2, [r2, #16]
 8010bd4:	f107 0108 	add.w	r1, r7, #8
 8010bd8:	4610      	mov	r0, r2
 8010bda:	4798      	blx	r3
 8010bdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010bde:	e05d      	b.n	8010c9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010be0:	6839      	ldr	r1, [r7, #0]
 8010be2:	6878      	ldr	r0, [r7, #4]
 8010be4:	f000 fa97 	bl	8011116 <USBD_CtlError>
            err++;
 8010be8:	7afb      	ldrb	r3, [r7, #11]
 8010bea:	3301      	adds	r3, #1
 8010bec:	72fb      	strb	r3, [r7, #11]
          break;
 8010bee:	e055      	b.n	8010c9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010bf6:	691b      	ldr	r3, [r3, #16]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d00b      	beq.n	8010c14 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c02:	691b      	ldr	r3, [r3, #16]
 8010c04:	687a      	ldr	r2, [r7, #4]
 8010c06:	7c12      	ldrb	r2, [r2, #16]
 8010c08:	f107 0108 	add.w	r1, r7, #8
 8010c0c:	4610      	mov	r0, r2
 8010c0e:	4798      	blx	r3
 8010c10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010c12:	e043      	b.n	8010c9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010c14:	6839      	ldr	r1, [r7, #0]
 8010c16:	6878      	ldr	r0, [r7, #4]
 8010c18:	f000 fa7d 	bl	8011116 <USBD_CtlError>
            err++;
 8010c1c:	7afb      	ldrb	r3, [r7, #11]
 8010c1e:	3301      	adds	r3, #1
 8010c20:	72fb      	strb	r3, [r7, #11]
          break;
 8010c22:	e03b      	b.n	8010c9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c2a:	695b      	ldr	r3, [r3, #20]
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d00b      	beq.n	8010c48 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c36:	695b      	ldr	r3, [r3, #20]
 8010c38:	687a      	ldr	r2, [r7, #4]
 8010c3a:	7c12      	ldrb	r2, [r2, #16]
 8010c3c:	f107 0108 	add.w	r1, r7, #8
 8010c40:	4610      	mov	r0, r2
 8010c42:	4798      	blx	r3
 8010c44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010c46:	e029      	b.n	8010c9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010c48:	6839      	ldr	r1, [r7, #0]
 8010c4a:	6878      	ldr	r0, [r7, #4]
 8010c4c:	f000 fa63 	bl	8011116 <USBD_CtlError>
            err++;
 8010c50:	7afb      	ldrb	r3, [r7, #11]
 8010c52:	3301      	adds	r3, #1
 8010c54:	72fb      	strb	r3, [r7, #11]
          break;
 8010c56:	e021      	b.n	8010c9c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c5e:	699b      	ldr	r3, [r3, #24]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d00b      	beq.n	8010c7c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010c6a:	699b      	ldr	r3, [r3, #24]
 8010c6c:	687a      	ldr	r2, [r7, #4]
 8010c6e:	7c12      	ldrb	r2, [r2, #16]
 8010c70:	f107 0108 	add.w	r1, r7, #8
 8010c74:	4610      	mov	r0, r2
 8010c76:	4798      	blx	r3
 8010c78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010c7a:	e00f      	b.n	8010c9c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010c7c:	6839      	ldr	r1, [r7, #0]
 8010c7e:	6878      	ldr	r0, [r7, #4]
 8010c80:	f000 fa49 	bl	8011116 <USBD_CtlError>
            err++;
 8010c84:	7afb      	ldrb	r3, [r7, #11]
 8010c86:	3301      	adds	r3, #1
 8010c88:	72fb      	strb	r3, [r7, #11]
          break;
 8010c8a:	e007      	b.n	8010c9c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8010c8c:	6839      	ldr	r1, [r7, #0]
 8010c8e:	6878      	ldr	r0, [r7, #4]
 8010c90:	f000 fa41 	bl	8011116 <USBD_CtlError>
          err++;
 8010c94:	7afb      	ldrb	r3, [r7, #11]
 8010c96:	3301      	adds	r3, #1
 8010c98:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8010c9a:	bf00      	nop
      }
      break;
 8010c9c:	e037      	b.n	8010d0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	7c1b      	ldrb	r3, [r3, #16]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d109      	bne.n	8010cba <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010cac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010cae:	f107 0208 	add.w	r2, r7, #8
 8010cb2:	4610      	mov	r0, r2
 8010cb4:	4798      	blx	r3
 8010cb6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010cb8:	e029      	b.n	8010d0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010cba:	6839      	ldr	r1, [r7, #0]
 8010cbc:	6878      	ldr	r0, [r7, #4]
 8010cbe:	f000 fa2a 	bl	8011116 <USBD_CtlError>
        err++;
 8010cc2:	7afb      	ldrb	r3, [r7, #11]
 8010cc4:	3301      	adds	r3, #1
 8010cc6:	72fb      	strb	r3, [r7, #11]
      break;
 8010cc8:	e021      	b.n	8010d0e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	7c1b      	ldrb	r3, [r3, #16]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d10d      	bne.n	8010cee <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010cda:	f107 0208 	add.w	r2, r7, #8
 8010cde:	4610      	mov	r0, r2
 8010ce0:	4798      	blx	r3
 8010ce2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	3301      	adds	r3, #1
 8010ce8:	2207      	movs	r2, #7
 8010cea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010cec:	e00f      	b.n	8010d0e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010cee:	6839      	ldr	r1, [r7, #0]
 8010cf0:	6878      	ldr	r0, [r7, #4]
 8010cf2:	f000 fa10 	bl	8011116 <USBD_CtlError>
        err++;
 8010cf6:	7afb      	ldrb	r3, [r7, #11]
 8010cf8:	3301      	adds	r3, #1
 8010cfa:	72fb      	strb	r3, [r7, #11]
      break;
 8010cfc:	e007      	b.n	8010d0e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8010cfe:	6839      	ldr	r1, [r7, #0]
 8010d00:	6878      	ldr	r0, [r7, #4]
 8010d02:	f000 fa08 	bl	8011116 <USBD_CtlError>
      err++;
 8010d06:	7afb      	ldrb	r3, [r7, #11]
 8010d08:	3301      	adds	r3, #1
 8010d0a:	72fb      	strb	r3, [r7, #11]
      break;
 8010d0c:	bf00      	nop
  }

  if (err != 0U)
 8010d0e:	7afb      	ldrb	r3, [r7, #11]
 8010d10:	2b00      	cmp	r3, #0
 8010d12:	d11e      	bne.n	8010d52 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8010d14:	683b      	ldr	r3, [r7, #0]
 8010d16:	88db      	ldrh	r3, [r3, #6]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d016      	beq.n	8010d4a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8010d1c:	893b      	ldrh	r3, [r7, #8]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d00e      	beq.n	8010d40 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8010d22:	683b      	ldr	r3, [r7, #0]
 8010d24:	88da      	ldrh	r2, [r3, #6]
 8010d26:	893b      	ldrh	r3, [r7, #8]
 8010d28:	4293      	cmp	r3, r2
 8010d2a:	bf28      	it	cs
 8010d2c:	4613      	movcs	r3, r2
 8010d2e:	b29b      	uxth	r3, r3
 8010d30:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8010d32:	893b      	ldrh	r3, [r7, #8]
 8010d34:	461a      	mov	r2, r3
 8010d36:	68f9      	ldr	r1, [r7, #12]
 8010d38:	6878      	ldr	r0, [r7, #4]
 8010d3a:	f000 fa69 	bl	8011210 <USBD_CtlSendData>
 8010d3e:	e009      	b.n	8010d54 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8010d40:	6839      	ldr	r1, [r7, #0]
 8010d42:	6878      	ldr	r0, [r7, #4]
 8010d44:	f000 f9e7 	bl	8011116 <USBD_CtlError>
 8010d48:	e004      	b.n	8010d54 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8010d4a:	6878      	ldr	r0, [r7, #4]
 8010d4c:	f000 faba 	bl	80112c4 <USBD_CtlSendStatus>
 8010d50:	e000      	b.n	8010d54 <USBD_GetDescriptor+0x320>
    return;
 8010d52:	bf00      	nop
  }
}
 8010d54:	3710      	adds	r7, #16
 8010d56:	46bd      	mov	sp, r7
 8010d58:	bd80      	pop	{r7, pc}
 8010d5a:	bf00      	nop

08010d5c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b084      	sub	sp, #16
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
 8010d64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8010d66:	683b      	ldr	r3, [r7, #0]
 8010d68:	889b      	ldrh	r3, [r3, #4]
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d131      	bne.n	8010dd2 <USBD_SetAddress+0x76>
 8010d6e:	683b      	ldr	r3, [r7, #0]
 8010d70:	88db      	ldrh	r3, [r3, #6]
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d12d      	bne.n	8010dd2 <USBD_SetAddress+0x76>
 8010d76:	683b      	ldr	r3, [r7, #0]
 8010d78:	885b      	ldrh	r3, [r3, #2]
 8010d7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8010d7c:	d829      	bhi.n	8010dd2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8010d7e:	683b      	ldr	r3, [r7, #0]
 8010d80:	885b      	ldrh	r3, [r3, #2]
 8010d82:	b2db      	uxtb	r3, r3
 8010d84:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010d88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d90:	b2db      	uxtb	r3, r3
 8010d92:	2b03      	cmp	r3, #3
 8010d94:	d104      	bne.n	8010da0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8010d96:	6839      	ldr	r1, [r7, #0]
 8010d98:	6878      	ldr	r0, [r7, #4]
 8010d9a:	f000 f9bc 	bl	8011116 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010d9e:	e01d      	b.n	8010ddc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8010da0:	687b      	ldr	r3, [r7, #4]
 8010da2:	7bfa      	ldrb	r2, [r7, #15]
 8010da4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8010da8:	7bfb      	ldrb	r3, [r7, #15]
 8010daa:	4619      	mov	r1, r3
 8010dac:	6878      	ldr	r0, [r7, #4]
 8010dae:	f000 ff47 	bl	8011c40 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8010db2:	6878      	ldr	r0, [r7, #4]
 8010db4:	f000 fa86 	bl	80112c4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8010db8:	7bfb      	ldrb	r3, [r7, #15]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	d004      	beq.n	8010dc8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010dbe:	687b      	ldr	r3, [r7, #4]
 8010dc0:	2202      	movs	r2, #2
 8010dc2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010dc6:	e009      	b.n	8010ddc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	2201      	movs	r2, #1
 8010dcc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010dd0:	e004      	b.n	8010ddc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8010dd2:	6839      	ldr	r1, [r7, #0]
 8010dd4:	6878      	ldr	r0, [r7, #4]
 8010dd6:	f000 f99e 	bl	8011116 <USBD_CtlError>
  }
}
 8010dda:	bf00      	nop
 8010ddc:	bf00      	nop
 8010dde:	3710      	adds	r7, #16
 8010de0:	46bd      	mov	sp, r7
 8010de2:	bd80      	pop	{r7, pc}

08010de4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010de4:	b580      	push	{r7, lr}
 8010de6:	b084      	sub	sp, #16
 8010de8:	af00      	add	r7, sp, #0
 8010dea:	6078      	str	r0, [r7, #4]
 8010dec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010dee:	2300      	movs	r3, #0
 8010df0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010df2:	683b      	ldr	r3, [r7, #0]
 8010df4:	885b      	ldrh	r3, [r3, #2]
 8010df6:	b2da      	uxtb	r2, r3
 8010df8:	4b4e      	ldr	r3, [pc, #312]	@ (8010f34 <USBD_SetConfig+0x150>)
 8010dfa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010dfc:	4b4d      	ldr	r3, [pc, #308]	@ (8010f34 <USBD_SetConfig+0x150>)
 8010dfe:	781b      	ldrb	r3, [r3, #0]
 8010e00:	2b01      	cmp	r3, #1
 8010e02:	d905      	bls.n	8010e10 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010e04:	6839      	ldr	r1, [r7, #0]
 8010e06:	6878      	ldr	r0, [r7, #4]
 8010e08:	f000 f985 	bl	8011116 <USBD_CtlError>
    return USBD_FAIL;
 8010e0c:	2303      	movs	r3, #3
 8010e0e:	e08c      	b.n	8010f2a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010e16:	b2db      	uxtb	r3, r3
 8010e18:	2b02      	cmp	r3, #2
 8010e1a:	d002      	beq.n	8010e22 <USBD_SetConfig+0x3e>
 8010e1c:	2b03      	cmp	r3, #3
 8010e1e:	d029      	beq.n	8010e74 <USBD_SetConfig+0x90>
 8010e20:	e075      	b.n	8010f0e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8010e22:	4b44      	ldr	r3, [pc, #272]	@ (8010f34 <USBD_SetConfig+0x150>)
 8010e24:	781b      	ldrb	r3, [r3, #0]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d020      	beq.n	8010e6c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8010e2a:	4b42      	ldr	r3, [pc, #264]	@ (8010f34 <USBD_SetConfig+0x150>)
 8010e2c:	781b      	ldrb	r3, [r3, #0]
 8010e2e:	461a      	mov	r2, r3
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010e34:	4b3f      	ldr	r3, [pc, #252]	@ (8010f34 <USBD_SetConfig+0x150>)
 8010e36:	781b      	ldrb	r3, [r3, #0]
 8010e38:	4619      	mov	r1, r3
 8010e3a:	6878      	ldr	r0, [r7, #4]
 8010e3c:	f7fe ffb9 	bl	800fdb2 <USBD_SetClassConfig>
 8010e40:	4603      	mov	r3, r0
 8010e42:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8010e44:	7bfb      	ldrb	r3, [r7, #15]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d008      	beq.n	8010e5c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8010e4a:	6839      	ldr	r1, [r7, #0]
 8010e4c:	6878      	ldr	r0, [r7, #4]
 8010e4e:	f000 f962 	bl	8011116 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	2202      	movs	r2, #2
 8010e56:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010e5a:	e065      	b.n	8010f28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010e5c:	6878      	ldr	r0, [r7, #4]
 8010e5e:	f000 fa31 	bl	80112c4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	2203      	movs	r2, #3
 8010e66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010e6a:	e05d      	b.n	8010f28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010e6c:	6878      	ldr	r0, [r7, #4]
 8010e6e:	f000 fa29 	bl	80112c4 <USBD_CtlSendStatus>
      break;
 8010e72:	e059      	b.n	8010f28 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8010e74:	4b2f      	ldr	r3, [pc, #188]	@ (8010f34 <USBD_SetConfig+0x150>)
 8010e76:	781b      	ldrb	r3, [r3, #0]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d112      	bne.n	8010ea2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	2202      	movs	r2, #2
 8010e80:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8010e84:	4b2b      	ldr	r3, [pc, #172]	@ (8010f34 <USBD_SetConfig+0x150>)
 8010e86:	781b      	ldrb	r3, [r3, #0]
 8010e88:	461a      	mov	r2, r3
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010e8e:	4b29      	ldr	r3, [pc, #164]	@ (8010f34 <USBD_SetConfig+0x150>)
 8010e90:	781b      	ldrb	r3, [r3, #0]
 8010e92:	4619      	mov	r1, r3
 8010e94:	6878      	ldr	r0, [r7, #4]
 8010e96:	f7fe ffa8 	bl	800fdea <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8010e9a:	6878      	ldr	r0, [r7, #4]
 8010e9c:	f000 fa12 	bl	80112c4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8010ea0:	e042      	b.n	8010f28 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8010ea2:	4b24      	ldr	r3, [pc, #144]	@ (8010f34 <USBD_SetConfig+0x150>)
 8010ea4:	781b      	ldrb	r3, [r3, #0]
 8010ea6:	461a      	mov	r2, r3
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	685b      	ldr	r3, [r3, #4]
 8010eac:	429a      	cmp	r2, r3
 8010eae:	d02a      	beq.n	8010f06 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010eb0:	687b      	ldr	r3, [r7, #4]
 8010eb2:	685b      	ldr	r3, [r3, #4]
 8010eb4:	b2db      	uxtb	r3, r3
 8010eb6:	4619      	mov	r1, r3
 8010eb8:	6878      	ldr	r0, [r7, #4]
 8010eba:	f7fe ff96 	bl	800fdea <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8010ebe:	4b1d      	ldr	r3, [pc, #116]	@ (8010f34 <USBD_SetConfig+0x150>)
 8010ec0:	781b      	ldrb	r3, [r3, #0]
 8010ec2:	461a      	mov	r2, r3
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8010ec8:	4b1a      	ldr	r3, [pc, #104]	@ (8010f34 <USBD_SetConfig+0x150>)
 8010eca:	781b      	ldrb	r3, [r3, #0]
 8010ecc:	4619      	mov	r1, r3
 8010ece:	6878      	ldr	r0, [r7, #4]
 8010ed0:	f7fe ff6f 	bl	800fdb2 <USBD_SetClassConfig>
 8010ed4:	4603      	mov	r3, r0
 8010ed6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8010ed8:	7bfb      	ldrb	r3, [r7, #15]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d00f      	beq.n	8010efe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8010ede:	6839      	ldr	r1, [r7, #0]
 8010ee0:	6878      	ldr	r0, [r7, #4]
 8010ee2:	f000 f918 	bl	8011116 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	685b      	ldr	r3, [r3, #4]
 8010eea:	b2db      	uxtb	r3, r3
 8010eec:	4619      	mov	r1, r3
 8010eee:	6878      	ldr	r0, [r7, #4]
 8010ef0:	f7fe ff7b 	bl	800fdea <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	2202      	movs	r2, #2
 8010ef8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8010efc:	e014      	b.n	8010f28 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8010efe:	6878      	ldr	r0, [r7, #4]
 8010f00:	f000 f9e0 	bl	80112c4 <USBD_CtlSendStatus>
      break;
 8010f04:	e010      	b.n	8010f28 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8010f06:	6878      	ldr	r0, [r7, #4]
 8010f08:	f000 f9dc 	bl	80112c4 <USBD_CtlSendStatus>
      break;
 8010f0c:	e00c      	b.n	8010f28 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8010f0e:	6839      	ldr	r1, [r7, #0]
 8010f10:	6878      	ldr	r0, [r7, #4]
 8010f12:	f000 f900 	bl	8011116 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010f16:	4b07      	ldr	r3, [pc, #28]	@ (8010f34 <USBD_SetConfig+0x150>)
 8010f18:	781b      	ldrb	r3, [r3, #0]
 8010f1a:	4619      	mov	r1, r3
 8010f1c:	6878      	ldr	r0, [r7, #4]
 8010f1e:	f7fe ff64 	bl	800fdea <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8010f22:	2303      	movs	r3, #3
 8010f24:	73fb      	strb	r3, [r7, #15]
      break;
 8010f26:	bf00      	nop
  }

  return ret;
 8010f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	3710      	adds	r7, #16
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bd80      	pop	{r7, pc}
 8010f32:	bf00      	nop
 8010f34:	24000a08 	.word	0x24000a08

08010f38 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010f38:	b580      	push	{r7, lr}
 8010f3a:	b082      	sub	sp, #8
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	6078      	str	r0, [r7, #4]
 8010f40:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8010f42:	683b      	ldr	r3, [r7, #0]
 8010f44:	88db      	ldrh	r3, [r3, #6]
 8010f46:	2b01      	cmp	r3, #1
 8010f48:	d004      	beq.n	8010f54 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010f4a:	6839      	ldr	r1, [r7, #0]
 8010f4c:	6878      	ldr	r0, [r7, #4]
 8010f4e:	f000 f8e2 	bl	8011116 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8010f52:	e023      	b.n	8010f9c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010f5a:	b2db      	uxtb	r3, r3
 8010f5c:	2b02      	cmp	r3, #2
 8010f5e:	dc02      	bgt.n	8010f66 <USBD_GetConfig+0x2e>
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	dc03      	bgt.n	8010f6c <USBD_GetConfig+0x34>
 8010f64:	e015      	b.n	8010f92 <USBD_GetConfig+0x5a>
 8010f66:	2b03      	cmp	r3, #3
 8010f68:	d00b      	beq.n	8010f82 <USBD_GetConfig+0x4a>
 8010f6a:	e012      	b.n	8010f92 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8010f6c:	687b      	ldr	r3, [r7, #4]
 8010f6e:	2200      	movs	r2, #0
 8010f70:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010f72:	687b      	ldr	r3, [r7, #4]
 8010f74:	3308      	adds	r3, #8
 8010f76:	2201      	movs	r2, #1
 8010f78:	4619      	mov	r1, r3
 8010f7a:	6878      	ldr	r0, [r7, #4]
 8010f7c:	f000 f948 	bl	8011210 <USBD_CtlSendData>
        break;
 8010f80:	e00c      	b.n	8010f9c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010f82:	687b      	ldr	r3, [r7, #4]
 8010f84:	3304      	adds	r3, #4
 8010f86:	2201      	movs	r2, #1
 8010f88:	4619      	mov	r1, r3
 8010f8a:	6878      	ldr	r0, [r7, #4]
 8010f8c:	f000 f940 	bl	8011210 <USBD_CtlSendData>
        break;
 8010f90:	e004      	b.n	8010f9c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8010f92:	6839      	ldr	r1, [r7, #0]
 8010f94:	6878      	ldr	r0, [r7, #4]
 8010f96:	f000 f8be 	bl	8011116 <USBD_CtlError>
        break;
 8010f9a:	bf00      	nop
}
 8010f9c:	bf00      	nop
 8010f9e:	3708      	adds	r7, #8
 8010fa0:	46bd      	mov	sp, r7
 8010fa2:	bd80      	pop	{r7, pc}

08010fa4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b082      	sub	sp, #8
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
 8010fac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010fb4:	b2db      	uxtb	r3, r3
 8010fb6:	3b01      	subs	r3, #1
 8010fb8:	2b02      	cmp	r3, #2
 8010fba:	d81e      	bhi.n	8010ffa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	88db      	ldrh	r3, [r3, #6]
 8010fc0:	2b02      	cmp	r3, #2
 8010fc2:	d004      	beq.n	8010fce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8010fc4:	6839      	ldr	r1, [r7, #0]
 8010fc6:	6878      	ldr	r0, [r7, #4]
 8010fc8:	f000 f8a5 	bl	8011116 <USBD_CtlError>
        break;
 8010fcc:	e01a      	b.n	8011004 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	2201      	movs	r2, #1
 8010fd2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	d005      	beq.n	8010fea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	68db      	ldr	r3, [r3, #12]
 8010fe2:	f043 0202 	orr.w	r2, r3, #2
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8010fea:	687b      	ldr	r3, [r7, #4]
 8010fec:	330c      	adds	r3, #12
 8010fee:	2202      	movs	r2, #2
 8010ff0:	4619      	mov	r1, r3
 8010ff2:	6878      	ldr	r0, [r7, #4]
 8010ff4:	f000 f90c 	bl	8011210 <USBD_CtlSendData>
      break;
 8010ff8:	e004      	b.n	8011004 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8010ffa:	6839      	ldr	r1, [r7, #0]
 8010ffc:	6878      	ldr	r0, [r7, #4]
 8010ffe:	f000 f88a 	bl	8011116 <USBD_CtlError>
      break;
 8011002:	bf00      	nop
  }
}
 8011004:	bf00      	nop
 8011006:	3708      	adds	r7, #8
 8011008:	46bd      	mov	sp, r7
 801100a:	bd80      	pop	{r7, pc}

0801100c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801100c:	b580      	push	{r7, lr}
 801100e:	b082      	sub	sp, #8
 8011010:	af00      	add	r7, sp, #0
 8011012:	6078      	str	r0, [r7, #4]
 8011014:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	885b      	ldrh	r3, [r3, #2]
 801101a:	2b01      	cmp	r3, #1
 801101c:	d107      	bne.n	801102e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	2201      	movs	r2, #1
 8011022:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8011026:	6878      	ldr	r0, [r7, #4]
 8011028:	f000 f94c 	bl	80112c4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 801102c:	e013      	b.n	8011056 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801102e:	683b      	ldr	r3, [r7, #0]
 8011030:	885b      	ldrh	r3, [r3, #2]
 8011032:	2b02      	cmp	r3, #2
 8011034:	d10b      	bne.n	801104e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8011036:	683b      	ldr	r3, [r7, #0]
 8011038:	889b      	ldrh	r3, [r3, #4]
 801103a:	0a1b      	lsrs	r3, r3, #8
 801103c:	b29b      	uxth	r3, r3
 801103e:	b2da      	uxtb	r2, r3
 8011040:	687b      	ldr	r3, [r7, #4]
 8011042:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8011046:	6878      	ldr	r0, [r7, #4]
 8011048:	f000 f93c 	bl	80112c4 <USBD_CtlSendStatus>
}
 801104c:	e003      	b.n	8011056 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801104e:	6839      	ldr	r1, [r7, #0]
 8011050:	6878      	ldr	r0, [r7, #4]
 8011052:	f000 f860 	bl	8011116 <USBD_CtlError>
}
 8011056:	bf00      	nop
 8011058:	3708      	adds	r7, #8
 801105a:	46bd      	mov	sp, r7
 801105c:	bd80      	pop	{r7, pc}

0801105e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801105e:	b580      	push	{r7, lr}
 8011060:	b082      	sub	sp, #8
 8011062:	af00      	add	r7, sp, #0
 8011064:	6078      	str	r0, [r7, #4]
 8011066:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801106e:	b2db      	uxtb	r3, r3
 8011070:	3b01      	subs	r3, #1
 8011072:	2b02      	cmp	r3, #2
 8011074:	d80b      	bhi.n	801108e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8011076:	683b      	ldr	r3, [r7, #0]
 8011078:	885b      	ldrh	r3, [r3, #2]
 801107a:	2b01      	cmp	r3, #1
 801107c:	d10c      	bne.n	8011098 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	2200      	movs	r2, #0
 8011082:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8011086:	6878      	ldr	r0, [r7, #4]
 8011088:	f000 f91c 	bl	80112c4 <USBD_CtlSendStatus>
      }
      break;
 801108c:	e004      	b.n	8011098 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801108e:	6839      	ldr	r1, [r7, #0]
 8011090:	6878      	ldr	r0, [r7, #4]
 8011092:	f000 f840 	bl	8011116 <USBD_CtlError>
      break;
 8011096:	e000      	b.n	801109a <USBD_ClrFeature+0x3c>
      break;
 8011098:	bf00      	nop
  }
}
 801109a:	bf00      	nop
 801109c:	3708      	adds	r7, #8
 801109e:	46bd      	mov	sp, r7
 80110a0:	bd80      	pop	{r7, pc}

080110a2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80110a2:	b580      	push	{r7, lr}
 80110a4:	b084      	sub	sp, #16
 80110a6:	af00      	add	r7, sp, #0
 80110a8:	6078      	str	r0, [r7, #4]
 80110aa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80110ac:	683b      	ldr	r3, [r7, #0]
 80110ae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80110b0:	68fb      	ldr	r3, [r7, #12]
 80110b2:	781a      	ldrb	r2, [r3, #0]
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	3301      	adds	r3, #1
 80110bc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80110be:	68fb      	ldr	r3, [r7, #12]
 80110c0:	781a      	ldrb	r2, [r3, #0]
 80110c2:	687b      	ldr	r3, [r7, #4]
 80110c4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80110c6:	68fb      	ldr	r3, [r7, #12]
 80110c8:	3301      	adds	r3, #1
 80110ca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80110cc:	68f8      	ldr	r0, [r7, #12]
 80110ce:	f7ff fa16 	bl	80104fe <SWAPBYTE>
 80110d2:	4603      	mov	r3, r0
 80110d4:	461a      	mov	r2, r3
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	3301      	adds	r3, #1
 80110de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	3301      	adds	r3, #1
 80110e4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80110e6:	68f8      	ldr	r0, [r7, #12]
 80110e8:	f7ff fa09 	bl	80104fe <SWAPBYTE>
 80110ec:	4603      	mov	r3, r0
 80110ee:	461a      	mov	r2, r3
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	3301      	adds	r3, #1
 80110f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	3301      	adds	r3, #1
 80110fe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011100:	68f8      	ldr	r0, [r7, #12]
 8011102:	f7ff f9fc 	bl	80104fe <SWAPBYTE>
 8011106:	4603      	mov	r3, r0
 8011108:	461a      	mov	r2, r3
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	80da      	strh	r2, [r3, #6]
}
 801110e:	bf00      	nop
 8011110:	3710      	adds	r7, #16
 8011112:	46bd      	mov	sp, r7
 8011114:	bd80      	pop	{r7, pc}

08011116 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011116:	b580      	push	{r7, lr}
 8011118:	b082      	sub	sp, #8
 801111a:	af00      	add	r7, sp, #0
 801111c:	6078      	str	r0, [r7, #4]
 801111e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011120:	2180      	movs	r1, #128	@ 0x80
 8011122:	6878      	ldr	r0, [r7, #4]
 8011124:	f000 fd22 	bl	8011b6c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8011128:	2100      	movs	r1, #0
 801112a:	6878      	ldr	r0, [r7, #4]
 801112c:	f000 fd1e 	bl	8011b6c <USBD_LL_StallEP>
}
 8011130:	bf00      	nop
 8011132:	3708      	adds	r7, #8
 8011134:	46bd      	mov	sp, r7
 8011136:	bd80      	pop	{r7, pc}

08011138 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8011138:	b580      	push	{r7, lr}
 801113a:	b086      	sub	sp, #24
 801113c:	af00      	add	r7, sp, #0
 801113e:	60f8      	str	r0, [r7, #12]
 8011140:	60b9      	str	r1, [r7, #8]
 8011142:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011144:	2300      	movs	r3, #0
 8011146:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d042      	beq.n	80111d4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8011152:	6938      	ldr	r0, [r7, #16]
 8011154:	f000 f842 	bl	80111dc <USBD_GetLen>
 8011158:	4603      	mov	r3, r0
 801115a:	3301      	adds	r3, #1
 801115c:	005b      	lsls	r3, r3, #1
 801115e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011162:	d808      	bhi.n	8011176 <USBD_GetString+0x3e>
 8011164:	6938      	ldr	r0, [r7, #16]
 8011166:	f000 f839 	bl	80111dc <USBD_GetLen>
 801116a:	4603      	mov	r3, r0
 801116c:	3301      	adds	r3, #1
 801116e:	b29b      	uxth	r3, r3
 8011170:	005b      	lsls	r3, r3, #1
 8011172:	b29a      	uxth	r2, r3
 8011174:	e001      	b.n	801117a <USBD_GetString+0x42>
 8011176:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801117e:	7dfb      	ldrb	r3, [r7, #23]
 8011180:	68ba      	ldr	r2, [r7, #8]
 8011182:	4413      	add	r3, r2
 8011184:	687a      	ldr	r2, [r7, #4]
 8011186:	7812      	ldrb	r2, [r2, #0]
 8011188:	701a      	strb	r2, [r3, #0]
  idx++;
 801118a:	7dfb      	ldrb	r3, [r7, #23]
 801118c:	3301      	adds	r3, #1
 801118e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8011190:	7dfb      	ldrb	r3, [r7, #23]
 8011192:	68ba      	ldr	r2, [r7, #8]
 8011194:	4413      	add	r3, r2
 8011196:	2203      	movs	r2, #3
 8011198:	701a      	strb	r2, [r3, #0]
  idx++;
 801119a:	7dfb      	ldrb	r3, [r7, #23]
 801119c:	3301      	adds	r3, #1
 801119e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80111a0:	e013      	b.n	80111ca <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80111a2:	7dfb      	ldrb	r3, [r7, #23]
 80111a4:	68ba      	ldr	r2, [r7, #8]
 80111a6:	4413      	add	r3, r2
 80111a8:	693a      	ldr	r2, [r7, #16]
 80111aa:	7812      	ldrb	r2, [r2, #0]
 80111ac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80111ae:	693b      	ldr	r3, [r7, #16]
 80111b0:	3301      	adds	r3, #1
 80111b2:	613b      	str	r3, [r7, #16]
    idx++;
 80111b4:	7dfb      	ldrb	r3, [r7, #23]
 80111b6:	3301      	adds	r3, #1
 80111b8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80111ba:	7dfb      	ldrb	r3, [r7, #23]
 80111bc:	68ba      	ldr	r2, [r7, #8]
 80111be:	4413      	add	r3, r2
 80111c0:	2200      	movs	r2, #0
 80111c2:	701a      	strb	r2, [r3, #0]
    idx++;
 80111c4:	7dfb      	ldrb	r3, [r7, #23]
 80111c6:	3301      	adds	r3, #1
 80111c8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80111ca:	693b      	ldr	r3, [r7, #16]
 80111cc:	781b      	ldrb	r3, [r3, #0]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d1e7      	bne.n	80111a2 <USBD_GetString+0x6a>
 80111d2:	e000      	b.n	80111d6 <USBD_GetString+0x9e>
    return;
 80111d4:	bf00      	nop
  }
}
 80111d6:	3718      	adds	r7, #24
 80111d8:	46bd      	mov	sp, r7
 80111da:	bd80      	pop	{r7, pc}

080111dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80111dc:	b480      	push	{r7}
 80111de:	b085      	sub	sp, #20
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80111e4:	2300      	movs	r3, #0
 80111e6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80111ec:	e005      	b.n	80111fa <USBD_GetLen+0x1e>
  {
    len++;
 80111ee:	7bfb      	ldrb	r3, [r7, #15]
 80111f0:	3301      	adds	r3, #1
 80111f2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80111f4:	68bb      	ldr	r3, [r7, #8]
 80111f6:	3301      	adds	r3, #1
 80111f8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80111fa:	68bb      	ldr	r3, [r7, #8]
 80111fc:	781b      	ldrb	r3, [r3, #0]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d1f5      	bne.n	80111ee <USBD_GetLen+0x12>
  }

  return len;
 8011202:	7bfb      	ldrb	r3, [r7, #15]
}
 8011204:	4618      	mov	r0, r3
 8011206:	3714      	adds	r7, #20
 8011208:	46bd      	mov	sp, r7
 801120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120e:	4770      	bx	lr

08011210 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011210:	b580      	push	{r7, lr}
 8011212:	b084      	sub	sp, #16
 8011214:	af00      	add	r7, sp, #0
 8011216:	60f8      	str	r0, [r7, #12]
 8011218:	60b9      	str	r1, [r7, #8]
 801121a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	2202      	movs	r2, #2
 8011220:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	687a      	ldr	r2, [r7, #4]
 8011228:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	687a      	ldr	r2, [r7, #4]
 801122e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	68ba      	ldr	r2, [r7, #8]
 8011234:	2100      	movs	r1, #0
 8011236:	68f8      	ldr	r0, [r7, #12]
 8011238:	f000 fd21 	bl	8011c7e <USBD_LL_Transmit>

  return USBD_OK;
 801123c:	2300      	movs	r3, #0
}
 801123e:	4618      	mov	r0, r3
 8011240:	3710      	adds	r7, #16
 8011242:	46bd      	mov	sp, r7
 8011244:	bd80      	pop	{r7, pc}

08011246 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8011246:	b580      	push	{r7, lr}
 8011248:	b084      	sub	sp, #16
 801124a:	af00      	add	r7, sp, #0
 801124c:	60f8      	str	r0, [r7, #12]
 801124e:	60b9      	str	r1, [r7, #8]
 8011250:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	68ba      	ldr	r2, [r7, #8]
 8011256:	2100      	movs	r1, #0
 8011258:	68f8      	ldr	r0, [r7, #12]
 801125a:	f000 fd10 	bl	8011c7e <USBD_LL_Transmit>

  return USBD_OK;
 801125e:	2300      	movs	r3, #0
}
 8011260:	4618      	mov	r0, r3
 8011262:	3710      	adds	r7, #16
 8011264:	46bd      	mov	sp, r7
 8011266:	bd80      	pop	{r7, pc}

08011268 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b084      	sub	sp, #16
 801126c:	af00      	add	r7, sp, #0
 801126e:	60f8      	str	r0, [r7, #12]
 8011270:	60b9      	str	r1, [r7, #8]
 8011272:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	2203      	movs	r2, #3
 8011278:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 801127c:	68fb      	ldr	r3, [r7, #12]
 801127e:	687a      	ldr	r2, [r7, #4]
 8011280:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	687a      	ldr	r2, [r7, #4]
 8011288:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	68ba      	ldr	r2, [r7, #8]
 8011290:	2100      	movs	r1, #0
 8011292:	68f8      	ldr	r0, [r7, #12]
 8011294:	f000 fd14 	bl	8011cc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011298:	2300      	movs	r3, #0
}
 801129a:	4618      	mov	r0, r3
 801129c:	3710      	adds	r7, #16
 801129e:	46bd      	mov	sp, r7
 80112a0:	bd80      	pop	{r7, pc}

080112a2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80112a2:	b580      	push	{r7, lr}
 80112a4:	b084      	sub	sp, #16
 80112a6:	af00      	add	r7, sp, #0
 80112a8:	60f8      	str	r0, [r7, #12]
 80112aa:	60b9      	str	r1, [r7, #8]
 80112ac:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	68ba      	ldr	r2, [r7, #8]
 80112b2:	2100      	movs	r1, #0
 80112b4:	68f8      	ldr	r0, [r7, #12]
 80112b6:	f000 fd03 	bl	8011cc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80112ba:	2300      	movs	r3, #0
}
 80112bc:	4618      	mov	r0, r3
 80112be:	3710      	adds	r7, #16
 80112c0:	46bd      	mov	sp, r7
 80112c2:	bd80      	pop	{r7, pc}

080112c4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b082      	sub	sp, #8
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	2204      	movs	r2, #4
 80112d0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80112d4:	2300      	movs	r3, #0
 80112d6:	2200      	movs	r2, #0
 80112d8:	2100      	movs	r1, #0
 80112da:	6878      	ldr	r0, [r7, #4]
 80112dc:	f000 fccf 	bl	8011c7e <USBD_LL_Transmit>

  return USBD_OK;
 80112e0:	2300      	movs	r3, #0
}
 80112e2:	4618      	mov	r0, r3
 80112e4:	3708      	adds	r7, #8
 80112e6:	46bd      	mov	sp, r7
 80112e8:	bd80      	pop	{r7, pc}

080112ea <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80112ea:	b580      	push	{r7, lr}
 80112ec:	b082      	sub	sp, #8
 80112ee:	af00      	add	r7, sp, #0
 80112f0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	2205      	movs	r2, #5
 80112f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80112fa:	2300      	movs	r3, #0
 80112fc:	2200      	movs	r2, #0
 80112fe:	2100      	movs	r1, #0
 8011300:	6878      	ldr	r0, [r7, #4]
 8011302:	f000 fcdd 	bl	8011cc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8011306:	2300      	movs	r3, #0
}
 8011308:	4618      	mov	r0, r3
 801130a:	3708      	adds	r7, #8
 801130c:	46bd      	mov	sp, r7
 801130e:	bd80      	pop	{r7, pc}

08011310 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011314:	2200      	movs	r2, #0
 8011316:	4913      	ldr	r1, [pc, #76]	@ (8011364 <MX_USB_DEVICE_Init+0x54>)
 8011318:	4813      	ldr	r0, [pc, #76]	@ (8011368 <MX_USB_DEVICE_Init+0x58>)
 801131a:	f7fe fccd 	bl	800fcb8 <USBD_Init>
 801131e:	4603      	mov	r3, r0
 8011320:	2b00      	cmp	r3, #0
 8011322:	d001      	beq.n	8011328 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011324:	f7ef ffdd 	bl	80012e2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011328:	4910      	ldr	r1, [pc, #64]	@ (801136c <MX_USB_DEVICE_Init+0x5c>)
 801132a:	480f      	ldr	r0, [pc, #60]	@ (8011368 <MX_USB_DEVICE_Init+0x58>)
 801132c:	f7fe fcf4 	bl	800fd18 <USBD_RegisterClass>
 8011330:	4603      	mov	r3, r0
 8011332:	2b00      	cmp	r3, #0
 8011334:	d001      	beq.n	801133a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011336:	f7ef ffd4 	bl	80012e2 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801133a:	490d      	ldr	r1, [pc, #52]	@ (8011370 <MX_USB_DEVICE_Init+0x60>)
 801133c:	480a      	ldr	r0, [pc, #40]	@ (8011368 <MX_USB_DEVICE_Init+0x58>)
 801133e:	f7fe fbeb 	bl	800fb18 <USBD_CDC_RegisterInterface>
 8011342:	4603      	mov	r3, r0
 8011344:	2b00      	cmp	r3, #0
 8011346:	d001      	beq.n	801134c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011348:	f7ef ffcb 	bl	80012e2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801134c:	4806      	ldr	r0, [pc, #24]	@ (8011368 <MX_USB_DEVICE_Init+0x58>)
 801134e:	f7fe fd19 	bl	800fd84 <USBD_Start>
 8011352:	4603      	mov	r3, r0
 8011354:	2b00      	cmp	r3, #0
 8011356:	d001      	beq.n	801135c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011358:	f7ef ffc3 	bl	80012e2 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801135c:	f7f6 fb72 	bl	8007a44 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011360:	bf00      	nop
 8011362:	bd80      	pop	{r7, pc}
 8011364:	240000d4 	.word	0x240000d4
 8011368:	24000a0c 	.word	0x24000a0c
 801136c:	24000040 	.word	0x24000040
 8011370:	240000c0 	.word	0x240000c0

08011374 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011374:	b580      	push	{r7, lr}
 8011376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011378:	2200      	movs	r2, #0
 801137a:	4905      	ldr	r1, [pc, #20]	@ (8011390 <CDC_Init_FS+0x1c>)
 801137c:	4805      	ldr	r0, [pc, #20]	@ (8011394 <CDC_Init_FS+0x20>)
 801137e:	f7fe fbe5 	bl	800fb4c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8011382:	4905      	ldr	r1, [pc, #20]	@ (8011398 <CDC_Init_FS+0x24>)
 8011384:	4803      	ldr	r0, [pc, #12]	@ (8011394 <CDC_Init_FS+0x20>)
 8011386:	f7fe fc03 	bl	800fb90 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801138a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801138c:	4618      	mov	r0, r3
 801138e:	bd80      	pop	{r7, pc}
 8011390:	240014e8 	.word	0x240014e8
 8011394:	24000a0c 	.word	0x24000a0c
 8011398:	24000ce8 	.word	0x24000ce8

0801139c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801139c:	b480      	push	{r7}
 801139e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80113a0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80113a2:	4618      	mov	r0, r3
 80113a4:	46bd      	mov	sp, r7
 80113a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113aa:	4770      	bx	lr

080113ac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80113ac:	b480      	push	{r7}
 80113ae:	b083      	sub	sp, #12
 80113b0:	af00      	add	r7, sp, #0
 80113b2:	4603      	mov	r3, r0
 80113b4:	6039      	str	r1, [r7, #0]
 80113b6:	71fb      	strb	r3, [r7, #7]
 80113b8:	4613      	mov	r3, r2
 80113ba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80113bc:	79fb      	ldrb	r3, [r7, #7]
 80113be:	2b23      	cmp	r3, #35	@ 0x23
 80113c0:	d84a      	bhi.n	8011458 <CDC_Control_FS+0xac>
 80113c2:	a201      	add	r2, pc, #4	@ (adr r2, 80113c8 <CDC_Control_FS+0x1c>)
 80113c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113c8:	08011459 	.word	0x08011459
 80113cc:	08011459 	.word	0x08011459
 80113d0:	08011459 	.word	0x08011459
 80113d4:	08011459 	.word	0x08011459
 80113d8:	08011459 	.word	0x08011459
 80113dc:	08011459 	.word	0x08011459
 80113e0:	08011459 	.word	0x08011459
 80113e4:	08011459 	.word	0x08011459
 80113e8:	08011459 	.word	0x08011459
 80113ec:	08011459 	.word	0x08011459
 80113f0:	08011459 	.word	0x08011459
 80113f4:	08011459 	.word	0x08011459
 80113f8:	08011459 	.word	0x08011459
 80113fc:	08011459 	.word	0x08011459
 8011400:	08011459 	.word	0x08011459
 8011404:	08011459 	.word	0x08011459
 8011408:	08011459 	.word	0x08011459
 801140c:	08011459 	.word	0x08011459
 8011410:	08011459 	.word	0x08011459
 8011414:	08011459 	.word	0x08011459
 8011418:	08011459 	.word	0x08011459
 801141c:	08011459 	.word	0x08011459
 8011420:	08011459 	.word	0x08011459
 8011424:	08011459 	.word	0x08011459
 8011428:	08011459 	.word	0x08011459
 801142c:	08011459 	.word	0x08011459
 8011430:	08011459 	.word	0x08011459
 8011434:	08011459 	.word	0x08011459
 8011438:	08011459 	.word	0x08011459
 801143c:	08011459 	.word	0x08011459
 8011440:	08011459 	.word	0x08011459
 8011444:	08011459 	.word	0x08011459
 8011448:	08011459 	.word	0x08011459
 801144c:	08011459 	.word	0x08011459
 8011450:	08011459 	.word	0x08011459
 8011454:	08011459 	.word	0x08011459
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011458:	bf00      	nop
  }

  return (USBD_OK);
 801145a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801145c:	4618      	mov	r0, r3
 801145e:	370c      	adds	r7, #12
 8011460:	46bd      	mov	sp, r7
 8011462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011466:	4770      	bx	lr

08011468 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b082      	sub	sp, #8
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
 8011470:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8011472:	6879      	ldr	r1, [r7, #4]
 8011474:	4805      	ldr	r0, [pc, #20]	@ (801148c <CDC_Receive_FS+0x24>)
 8011476:	f7fe fb8b 	bl	800fb90 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801147a:	4804      	ldr	r0, [pc, #16]	@ (801148c <CDC_Receive_FS+0x24>)
 801147c:	f7fe fbe6 	bl	800fc4c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011480:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011482:	4618      	mov	r0, r3
 8011484:	3708      	adds	r7, #8
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}
 801148a:	bf00      	nop
 801148c:	24000a0c 	.word	0x24000a0c

08011490 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b084      	sub	sp, #16
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
 8011498:	460b      	mov	r3, r1
 801149a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801149c:	2300      	movs	r3, #0
 801149e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80114a0:	4b0d      	ldr	r3, [pc, #52]	@ (80114d8 <CDC_Transmit_FS+0x48>)
 80114a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 80114a6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80114a8:	68bb      	ldr	r3, [r7, #8]
 80114aa:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d001      	beq.n	80114b6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80114b2:	2301      	movs	r3, #1
 80114b4:	e00b      	b.n	80114ce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80114b6:	887b      	ldrh	r3, [r7, #2]
 80114b8:	461a      	mov	r2, r3
 80114ba:	6879      	ldr	r1, [r7, #4]
 80114bc:	4806      	ldr	r0, [pc, #24]	@ (80114d8 <CDC_Transmit_FS+0x48>)
 80114be:	f7fe fb45 	bl	800fb4c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80114c2:	4805      	ldr	r0, [pc, #20]	@ (80114d8 <CDC_Transmit_FS+0x48>)
 80114c4:	f7fe fb82 	bl	800fbcc <USBD_CDC_TransmitPacket>
 80114c8:	4603      	mov	r3, r0
 80114ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80114cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80114ce:	4618      	mov	r0, r3
 80114d0:	3710      	adds	r7, #16
 80114d2:	46bd      	mov	sp, r7
 80114d4:	bd80      	pop	{r7, pc}
 80114d6:	bf00      	nop
 80114d8:	24000a0c 	.word	0x24000a0c

080114dc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80114dc:	b480      	push	{r7}
 80114de:	b087      	sub	sp, #28
 80114e0:	af00      	add	r7, sp, #0
 80114e2:	60f8      	str	r0, [r7, #12]
 80114e4:	60b9      	str	r1, [r7, #8]
 80114e6:	4613      	mov	r3, r2
 80114e8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80114ea:	2300      	movs	r3, #0
 80114ec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80114ee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80114f2:	4618      	mov	r0, r3
 80114f4:	371c      	adds	r7, #28
 80114f6:	46bd      	mov	sp, r7
 80114f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114fc:	4770      	bx	lr
	...

08011500 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011500:	b480      	push	{r7}
 8011502:	b083      	sub	sp, #12
 8011504:	af00      	add	r7, sp, #0
 8011506:	4603      	mov	r3, r0
 8011508:	6039      	str	r1, [r7, #0]
 801150a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801150c:	683b      	ldr	r3, [r7, #0]
 801150e:	2212      	movs	r2, #18
 8011510:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011512:	4b03      	ldr	r3, [pc, #12]	@ (8011520 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011514:	4618      	mov	r0, r3
 8011516:	370c      	adds	r7, #12
 8011518:	46bd      	mov	sp, r7
 801151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151e:	4770      	bx	lr
 8011520:	240000f4 	.word	0x240000f4

08011524 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011524:	b480      	push	{r7}
 8011526:	b083      	sub	sp, #12
 8011528:	af00      	add	r7, sp, #0
 801152a:	4603      	mov	r3, r0
 801152c:	6039      	str	r1, [r7, #0]
 801152e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011530:	683b      	ldr	r3, [r7, #0]
 8011532:	2204      	movs	r2, #4
 8011534:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011536:	4b03      	ldr	r3, [pc, #12]	@ (8011544 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011538:	4618      	mov	r0, r3
 801153a:	370c      	adds	r7, #12
 801153c:	46bd      	mov	sp, r7
 801153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011542:	4770      	bx	lr
 8011544:	24000108 	.word	0x24000108

08011548 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011548:	b580      	push	{r7, lr}
 801154a:	b082      	sub	sp, #8
 801154c:	af00      	add	r7, sp, #0
 801154e:	4603      	mov	r3, r0
 8011550:	6039      	str	r1, [r7, #0]
 8011552:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011554:	79fb      	ldrb	r3, [r7, #7]
 8011556:	2b00      	cmp	r3, #0
 8011558:	d105      	bne.n	8011566 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801155a:	683a      	ldr	r2, [r7, #0]
 801155c:	4907      	ldr	r1, [pc, #28]	@ (801157c <USBD_FS_ProductStrDescriptor+0x34>)
 801155e:	4808      	ldr	r0, [pc, #32]	@ (8011580 <USBD_FS_ProductStrDescriptor+0x38>)
 8011560:	f7ff fdea 	bl	8011138 <USBD_GetString>
 8011564:	e004      	b.n	8011570 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011566:	683a      	ldr	r2, [r7, #0]
 8011568:	4904      	ldr	r1, [pc, #16]	@ (801157c <USBD_FS_ProductStrDescriptor+0x34>)
 801156a:	4805      	ldr	r0, [pc, #20]	@ (8011580 <USBD_FS_ProductStrDescriptor+0x38>)
 801156c:	f7ff fde4 	bl	8011138 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011570:	4b02      	ldr	r3, [pc, #8]	@ (801157c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011572:	4618      	mov	r0, r3
 8011574:	3708      	adds	r7, #8
 8011576:	46bd      	mov	sp, r7
 8011578:	bd80      	pop	{r7, pc}
 801157a:	bf00      	nop
 801157c:	24001ce8 	.word	0x24001ce8
 8011580:	080149dc 	.word	0x080149dc

08011584 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b082      	sub	sp, #8
 8011588:	af00      	add	r7, sp, #0
 801158a:	4603      	mov	r3, r0
 801158c:	6039      	str	r1, [r7, #0]
 801158e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011590:	683a      	ldr	r2, [r7, #0]
 8011592:	4904      	ldr	r1, [pc, #16]	@ (80115a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011594:	4804      	ldr	r0, [pc, #16]	@ (80115a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011596:	f7ff fdcf 	bl	8011138 <USBD_GetString>
  return USBD_StrDesc;
 801159a:	4b02      	ldr	r3, [pc, #8]	@ (80115a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801159c:	4618      	mov	r0, r3
 801159e:	3708      	adds	r7, #8
 80115a0:	46bd      	mov	sp, r7
 80115a2:	bd80      	pop	{r7, pc}
 80115a4:	24001ce8 	.word	0x24001ce8
 80115a8:	080149f4 	.word	0x080149f4

080115ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115ac:	b580      	push	{r7, lr}
 80115ae:	b082      	sub	sp, #8
 80115b0:	af00      	add	r7, sp, #0
 80115b2:	4603      	mov	r3, r0
 80115b4:	6039      	str	r1, [r7, #0]
 80115b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80115b8:	683b      	ldr	r3, [r7, #0]
 80115ba:	221a      	movs	r2, #26
 80115bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80115be:	f000 f843 	bl	8011648 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80115c2:	4b02      	ldr	r3, [pc, #8]	@ (80115cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80115c4:	4618      	mov	r0, r3
 80115c6:	3708      	adds	r7, #8
 80115c8:	46bd      	mov	sp, r7
 80115ca:	bd80      	pop	{r7, pc}
 80115cc:	2400010c 	.word	0x2400010c

080115d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115d0:	b580      	push	{r7, lr}
 80115d2:	b082      	sub	sp, #8
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	4603      	mov	r3, r0
 80115d8:	6039      	str	r1, [r7, #0]
 80115da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80115dc:	79fb      	ldrb	r3, [r7, #7]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d105      	bne.n	80115ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80115e2:	683a      	ldr	r2, [r7, #0]
 80115e4:	4907      	ldr	r1, [pc, #28]	@ (8011604 <USBD_FS_ConfigStrDescriptor+0x34>)
 80115e6:	4808      	ldr	r0, [pc, #32]	@ (8011608 <USBD_FS_ConfigStrDescriptor+0x38>)
 80115e8:	f7ff fda6 	bl	8011138 <USBD_GetString>
 80115ec:	e004      	b.n	80115f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80115ee:	683a      	ldr	r2, [r7, #0]
 80115f0:	4904      	ldr	r1, [pc, #16]	@ (8011604 <USBD_FS_ConfigStrDescriptor+0x34>)
 80115f2:	4805      	ldr	r0, [pc, #20]	@ (8011608 <USBD_FS_ConfigStrDescriptor+0x38>)
 80115f4:	f7ff fda0 	bl	8011138 <USBD_GetString>
  }
  return USBD_StrDesc;
 80115f8:	4b02      	ldr	r3, [pc, #8]	@ (8011604 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80115fa:	4618      	mov	r0, r3
 80115fc:	3708      	adds	r7, #8
 80115fe:	46bd      	mov	sp, r7
 8011600:	bd80      	pop	{r7, pc}
 8011602:	bf00      	nop
 8011604:	24001ce8 	.word	0x24001ce8
 8011608:	08014a08 	.word	0x08014a08

0801160c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b082      	sub	sp, #8
 8011610:	af00      	add	r7, sp, #0
 8011612:	4603      	mov	r3, r0
 8011614:	6039      	str	r1, [r7, #0]
 8011616:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011618:	79fb      	ldrb	r3, [r7, #7]
 801161a:	2b00      	cmp	r3, #0
 801161c:	d105      	bne.n	801162a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801161e:	683a      	ldr	r2, [r7, #0]
 8011620:	4907      	ldr	r1, [pc, #28]	@ (8011640 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011622:	4808      	ldr	r0, [pc, #32]	@ (8011644 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011624:	f7ff fd88 	bl	8011138 <USBD_GetString>
 8011628:	e004      	b.n	8011634 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801162a:	683a      	ldr	r2, [r7, #0]
 801162c:	4904      	ldr	r1, [pc, #16]	@ (8011640 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801162e:	4805      	ldr	r0, [pc, #20]	@ (8011644 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011630:	f7ff fd82 	bl	8011138 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011634:	4b02      	ldr	r3, [pc, #8]	@ (8011640 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011636:	4618      	mov	r0, r3
 8011638:	3708      	adds	r7, #8
 801163a:	46bd      	mov	sp, r7
 801163c:	bd80      	pop	{r7, pc}
 801163e:	bf00      	nop
 8011640:	24001ce8 	.word	0x24001ce8
 8011644:	08014a14 	.word	0x08014a14

08011648 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011648:	b580      	push	{r7, lr}
 801164a:	b084      	sub	sp, #16
 801164c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801164e:	4b0f      	ldr	r3, [pc, #60]	@ (801168c <Get_SerialNum+0x44>)
 8011650:	681b      	ldr	r3, [r3, #0]
 8011652:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011654:	4b0e      	ldr	r3, [pc, #56]	@ (8011690 <Get_SerialNum+0x48>)
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801165a:	4b0e      	ldr	r3, [pc, #56]	@ (8011694 <Get_SerialNum+0x4c>)
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011660:	68fa      	ldr	r2, [r7, #12]
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	4413      	add	r3, r2
 8011666:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	2b00      	cmp	r3, #0
 801166c:	d009      	beq.n	8011682 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801166e:	2208      	movs	r2, #8
 8011670:	4909      	ldr	r1, [pc, #36]	@ (8011698 <Get_SerialNum+0x50>)
 8011672:	68f8      	ldr	r0, [r7, #12]
 8011674:	f000 f814 	bl	80116a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011678:	2204      	movs	r2, #4
 801167a:	4908      	ldr	r1, [pc, #32]	@ (801169c <Get_SerialNum+0x54>)
 801167c:	68b8      	ldr	r0, [r7, #8]
 801167e:	f000 f80f 	bl	80116a0 <IntToUnicode>
  }
}
 8011682:	bf00      	nop
 8011684:	3710      	adds	r7, #16
 8011686:	46bd      	mov	sp, r7
 8011688:	bd80      	pop	{r7, pc}
 801168a:	bf00      	nop
 801168c:	1ff1e800 	.word	0x1ff1e800
 8011690:	1ff1e804 	.word	0x1ff1e804
 8011694:	1ff1e808 	.word	0x1ff1e808
 8011698:	2400010e 	.word	0x2400010e
 801169c:	2400011e 	.word	0x2400011e

080116a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80116a0:	b480      	push	{r7}
 80116a2:	b087      	sub	sp, #28
 80116a4:	af00      	add	r7, sp, #0
 80116a6:	60f8      	str	r0, [r7, #12]
 80116a8:	60b9      	str	r1, [r7, #8]
 80116aa:	4613      	mov	r3, r2
 80116ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80116ae:	2300      	movs	r3, #0
 80116b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80116b2:	2300      	movs	r3, #0
 80116b4:	75fb      	strb	r3, [r7, #23]
 80116b6:	e027      	b.n	8011708 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80116b8:	68fb      	ldr	r3, [r7, #12]
 80116ba:	0f1b      	lsrs	r3, r3, #28
 80116bc:	2b09      	cmp	r3, #9
 80116be:	d80b      	bhi.n	80116d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	0f1b      	lsrs	r3, r3, #28
 80116c4:	b2da      	uxtb	r2, r3
 80116c6:	7dfb      	ldrb	r3, [r7, #23]
 80116c8:	005b      	lsls	r3, r3, #1
 80116ca:	4619      	mov	r1, r3
 80116cc:	68bb      	ldr	r3, [r7, #8]
 80116ce:	440b      	add	r3, r1
 80116d0:	3230      	adds	r2, #48	@ 0x30
 80116d2:	b2d2      	uxtb	r2, r2
 80116d4:	701a      	strb	r2, [r3, #0]
 80116d6:	e00a      	b.n	80116ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	0f1b      	lsrs	r3, r3, #28
 80116dc:	b2da      	uxtb	r2, r3
 80116de:	7dfb      	ldrb	r3, [r7, #23]
 80116e0:	005b      	lsls	r3, r3, #1
 80116e2:	4619      	mov	r1, r3
 80116e4:	68bb      	ldr	r3, [r7, #8]
 80116e6:	440b      	add	r3, r1
 80116e8:	3237      	adds	r2, #55	@ 0x37
 80116ea:	b2d2      	uxtb	r2, r2
 80116ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80116ee:	68fb      	ldr	r3, [r7, #12]
 80116f0:	011b      	lsls	r3, r3, #4
 80116f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80116f4:	7dfb      	ldrb	r3, [r7, #23]
 80116f6:	005b      	lsls	r3, r3, #1
 80116f8:	3301      	adds	r3, #1
 80116fa:	68ba      	ldr	r2, [r7, #8]
 80116fc:	4413      	add	r3, r2
 80116fe:	2200      	movs	r2, #0
 8011700:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011702:	7dfb      	ldrb	r3, [r7, #23]
 8011704:	3301      	adds	r3, #1
 8011706:	75fb      	strb	r3, [r7, #23]
 8011708:	7dfa      	ldrb	r2, [r7, #23]
 801170a:	79fb      	ldrb	r3, [r7, #7]
 801170c:	429a      	cmp	r2, r3
 801170e:	d3d3      	bcc.n	80116b8 <IntToUnicode+0x18>
  }
}
 8011710:	bf00      	nop
 8011712:	bf00      	nop
 8011714:	371c      	adds	r7, #28
 8011716:	46bd      	mov	sp, r7
 8011718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801171c:	4770      	bx	lr
	...

08011720 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011720:	b580      	push	{r7, lr}
 8011722:	b0ba      	sub	sp, #232	@ 0xe8
 8011724:	af00      	add	r7, sp, #0
 8011726:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011728:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 801172c:	2200      	movs	r2, #0
 801172e:	601a      	str	r2, [r3, #0]
 8011730:	605a      	str	r2, [r3, #4]
 8011732:	609a      	str	r2, [r3, #8]
 8011734:	60da      	str	r2, [r3, #12]
 8011736:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011738:	f107 0310 	add.w	r3, r7, #16
 801173c:	22c0      	movs	r2, #192	@ 0xc0
 801173e:	2100      	movs	r1, #0
 8011740:	4618      	mov	r0, r3
 8011742:	f001 f892 	bl	801286a <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	4a34      	ldr	r2, [pc, #208]	@ (801181c <HAL_PCD_MspInit+0xfc>)
 801174c:	4293      	cmp	r3, r2
 801174e:	d161      	bne.n	8011814 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011750:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8011754:	f04f 0300 	mov.w	r3, #0
 8011758:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 801175c:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8011760:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011764:	f107 0310 	add.w	r3, r7, #16
 8011768:	4618      	mov	r0, r3
 801176a:	f7f7 f961 	bl	8008a30 <HAL_RCCEx_PeriphCLKConfig>
 801176e:	4603      	mov	r3, r0
 8011770:	2b00      	cmp	r3, #0
 8011772:	d001      	beq.n	8011778 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8011774:	f7ef fdb5 	bl	80012e2 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8011778:	f7f6 f964 	bl	8007a44 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801177c:	4b28      	ldr	r3, [pc, #160]	@ (8011820 <HAL_PCD_MspInit+0x100>)
 801177e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011782:	4a27      	ldr	r2, [pc, #156]	@ (8011820 <HAL_PCD_MspInit+0x100>)
 8011784:	f043 0301 	orr.w	r3, r3, #1
 8011788:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801178c:	4b24      	ldr	r3, [pc, #144]	@ (8011820 <HAL_PCD_MspInit+0x100>)
 801178e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011792:	f003 0301 	and.w	r3, r3, #1
 8011796:	60fb      	str	r3, [r7, #12]
 8011798:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 801179a:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 801179e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80117a2:	2302      	movs	r3, #2
 80117a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80117a8:	2300      	movs	r3, #0
 80117aa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80117ae:	2300      	movs	r3, #0
 80117b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80117b4:	230a      	movs	r3, #10
 80117b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80117ba:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80117be:	4619      	mov	r1, r3
 80117c0:	4818      	ldr	r0, [pc, #96]	@ (8011824 <HAL_PCD_MspInit+0x104>)
 80117c2:	f7f4 fc1d 	bl	8006000 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80117c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80117ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80117ce:	2300      	movs	r3, #0
 80117d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80117d4:	2300      	movs	r3, #0
 80117d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80117da:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80117de:	4619      	mov	r1, r3
 80117e0:	4810      	ldr	r0, [pc, #64]	@ (8011824 <HAL_PCD_MspInit+0x104>)
 80117e2:	f7f4 fc0d 	bl	8006000 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80117e6:	4b0e      	ldr	r3, [pc, #56]	@ (8011820 <HAL_PCD_MspInit+0x100>)
 80117e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80117ec:	4a0c      	ldr	r2, [pc, #48]	@ (8011820 <HAL_PCD_MspInit+0x100>)
 80117ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80117f2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80117f6:	4b0a      	ldr	r3, [pc, #40]	@ (8011820 <HAL_PCD_MspInit+0x100>)
 80117f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80117fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011800:	60bb      	str	r3, [r7, #8]
 8011802:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011804:	2200      	movs	r2, #0
 8011806:	2100      	movs	r1, #0
 8011808:	2065      	movs	r0, #101	@ 0x65
 801180a:	f7f2 fa68 	bl	8003cde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801180e:	2065      	movs	r0, #101	@ 0x65
 8011810:	f7f2 fa7f 	bl	8003d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011814:	bf00      	nop
 8011816:	37e8      	adds	r7, #232	@ 0xe8
 8011818:	46bd      	mov	sp, r7
 801181a:	bd80      	pop	{r7, pc}
 801181c:	40080000 	.word	0x40080000
 8011820:	58024400 	.word	0x58024400
 8011824:	58020000 	.word	0x58020000

08011828 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b082      	sub	sp, #8
 801182c:	af00      	add	r7, sp, #0
 801182e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 801183c:	4619      	mov	r1, r3
 801183e:	4610      	mov	r0, r2
 8011840:	f7fe faed 	bl	800fe1e <USBD_LL_SetupStage>
}
 8011844:	bf00      	nop
 8011846:	3708      	adds	r7, #8
 8011848:	46bd      	mov	sp, r7
 801184a:	bd80      	pop	{r7, pc}

0801184c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801184c:	b580      	push	{r7, lr}
 801184e:	b082      	sub	sp, #8
 8011850:	af00      	add	r7, sp, #0
 8011852:	6078      	str	r0, [r7, #4]
 8011854:	460b      	mov	r3, r1
 8011856:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 801185e:	78fa      	ldrb	r2, [r7, #3]
 8011860:	6879      	ldr	r1, [r7, #4]
 8011862:	4613      	mov	r3, r2
 8011864:	00db      	lsls	r3, r3, #3
 8011866:	4413      	add	r3, r2
 8011868:	009b      	lsls	r3, r3, #2
 801186a:	440b      	add	r3, r1
 801186c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011870:	681a      	ldr	r2, [r3, #0]
 8011872:	78fb      	ldrb	r3, [r7, #3]
 8011874:	4619      	mov	r1, r3
 8011876:	f7fe fb27 	bl	800fec8 <USBD_LL_DataOutStage>
}
 801187a:	bf00      	nop
 801187c:	3708      	adds	r7, #8
 801187e:	46bd      	mov	sp, r7
 8011880:	bd80      	pop	{r7, pc}

08011882 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011882:	b580      	push	{r7, lr}
 8011884:	b082      	sub	sp, #8
 8011886:	af00      	add	r7, sp, #0
 8011888:	6078      	str	r0, [r7, #4]
 801188a:	460b      	mov	r3, r1
 801188c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011894:	78fa      	ldrb	r2, [r7, #3]
 8011896:	6879      	ldr	r1, [r7, #4]
 8011898:	4613      	mov	r3, r2
 801189a:	00db      	lsls	r3, r3, #3
 801189c:	4413      	add	r3, r2
 801189e:	009b      	lsls	r3, r3, #2
 80118a0:	440b      	add	r3, r1
 80118a2:	3320      	adds	r3, #32
 80118a4:	681a      	ldr	r2, [r3, #0]
 80118a6:	78fb      	ldrb	r3, [r7, #3]
 80118a8:	4619      	mov	r1, r3
 80118aa:	f7fe fbc0 	bl	801002e <USBD_LL_DataInStage>
}
 80118ae:	bf00      	nop
 80118b0:	3708      	adds	r7, #8
 80118b2:	46bd      	mov	sp, r7
 80118b4:	bd80      	pop	{r7, pc}

080118b6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118b6:	b580      	push	{r7, lr}
 80118b8:	b082      	sub	sp, #8
 80118ba:	af00      	add	r7, sp, #0
 80118bc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80118c4:	4618      	mov	r0, r3
 80118c6:	f7fe fcfa 	bl	80102be <USBD_LL_SOF>
}
 80118ca:	bf00      	nop
 80118cc:	3708      	adds	r7, #8
 80118ce:	46bd      	mov	sp, r7
 80118d0:	bd80      	pop	{r7, pc}

080118d2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118d2:	b580      	push	{r7, lr}
 80118d4:	b084      	sub	sp, #16
 80118d6:	af00      	add	r7, sp, #0
 80118d8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80118da:	2301      	movs	r3, #1
 80118dc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	79db      	ldrb	r3, [r3, #7]
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d102      	bne.n	80118ec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80118e6:	2300      	movs	r3, #0
 80118e8:	73fb      	strb	r3, [r7, #15]
 80118ea:	e008      	b.n	80118fe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	79db      	ldrb	r3, [r3, #7]
 80118f0:	2b02      	cmp	r3, #2
 80118f2:	d102      	bne.n	80118fa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80118f4:	2301      	movs	r3, #1
 80118f6:	73fb      	strb	r3, [r7, #15]
 80118f8:	e001      	b.n	80118fe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80118fa:	f7ef fcf2 	bl	80012e2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011904:	7bfa      	ldrb	r2, [r7, #15]
 8011906:	4611      	mov	r1, r2
 8011908:	4618      	mov	r0, r3
 801190a:	f7fe fc94 	bl	8010236 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011914:	4618      	mov	r0, r3
 8011916:	f7fe fc3c 	bl	8010192 <USBD_LL_Reset>
}
 801191a:	bf00      	nop
 801191c:	3710      	adds	r7, #16
 801191e:	46bd      	mov	sp, r7
 8011920:	bd80      	pop	{r7, pc}
	...

08011924 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011924:	b580      	push	{r7, lr}
 8011926:	b082      	sub	sp, #8
 8011928:	af00      	add	r7, sp, #0
 801192a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011932:	4618      	mov	r0, r3
 8011934:	f7fe fc8f 	bl	8010256 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	687a      	ldr	r2, [r7, #4]
 8011944:	6812      	ldr	r2, [r2, #0]
 8011946:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 801194a:	f043 0301 	orr.w	r3, r3, #1
 801194e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	7adb      	ldrb	r3, [r3, #11]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d005      	beq.n	8011964 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011958:	4b04      	ldr	r3, [pc, #16]	@ (801196c <HAL_PCD_SuspendCallback+0x48>)
 801195a:	691b      	ldr	r3, [r3, #16]
 801195c:	4a03      	ldr	r2, [pc, #12]	@ (801196c <HAL_PCD_SuspendCallback+0x48>)
 801195e:	f043 0306 	orr.w	r3, r3, #6
 8011962:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011964:	bf00      	nop
 8011966:	3708      	adds	r7, #8
 8011968:	46bd      	mov	sp, r7
 801196a:	bd80      	pop	{r7, pc}
 801196c:	e000ed00 	.word	0xe000ed00

08011970 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b082      	sub	sp, #8
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801197e:	4618      	mov	r0, r3
 8011980:	f7fe fc85 	bl	801028e <USBD_LL_Resume>
}
 8011984:	bf00      	nop
 8011986:	3708      	adds	r7, #8
 8011988:	46bd      	mov	sp, r7
 801198a:	bd80      	pop	{r7, pc}

0801198c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b082      	sub	sp, #8
 8011990:	af00      	add	r7, sp, #0
 8011992:	6078      	str	r0, [r7, #4]
 8011994:	460b      	mov	r3, r1
 8011996:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011998:	687b      	ldr	r3, [r7, #4]
 801199a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 801199e:	78fa      	ldrb	r2, [r7, #3]
 80119a0:	4611      	mov	r1, r2
 80119a2:	4618      	mov	r0, r3
 80119a4:	f7fe fcdd 	bl	8010362 <USBD_LL_IsoOUTIncomplete>
}
 80119a8:	bf00      	nop
 80119aa:	3708      	adds	r7, #8
 80119ac:	46bd      	mov	sp, r7
 80119ae:	bd80      	pop	{r7, pc}

080119b0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119b0:	b580      	push	{r7, lr}
 80119b2:	b082      	sub	sp, #8
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
 80119b8:	460b      	mov	r3, r1
 80119ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80119c2:	78fa      	ldrb	r2, [r7, #3]
 80119c4:	4611      	mov	r1, r2
 80119c6:	4618      	mov	r0, r3
 80119c8:	f7fe fc99 	bl	80102fe <USBD_LL_IsoINIncomplete>
}
 80119cc:	bf00      	nop
 80119ce:	3708      	adds	r7, #8
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}

080119d4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b082      	sub	sp, #8
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80119dc:	687b      	ldr	r3, [r7, #4]
 80119de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80119e2:	4618      	mov	r0, r3
 80119e4:	f7fe fcef 	bl	80103c6 <USBD_LL_DevConnected>
}
 80119e8:	bf00      	nop
 80119ea:	3708      	adds	r7, #8
 80119ec:	46bd      	mov	sp, r7
 80119ee:	bd80      	pop	{r7, pc}

080119f0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80119f0:	b580      	push	{r7, lr}
 80119f2:	b082      	sub	sp, #8
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80119fe:	4618      	mov	r0, r3
 8011a00:	f7fe fcec 	bl	80103dc <USBD_LL_DevDisconnected>
}
 8011a04:	bf00      	nop
 8011a06:	3708      	adds	r7, #8
 8011a08:	46bd      	mov	sp, r7
 8011a0a:	bd80      	pop	{r7, pc}

08011a0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011a0c:	b580      	push	{r7, lr}
 8011a0e:	b082      	sub	sp, #8
 8011a10:	af00      	add	r7, sp, #0
 8011a12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	781b      	ldrb	r3, [r3, #0]
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d13e      	bne.n	8011a9a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011a1c:	4a21      	ldr	r2, [pc, #132]	@ (8011aa4 <USBD_LL_Init+0x98>)
 8011a1e:	687b      	ldr	r3, [r7, #4]
 8011a20:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	4a1f      	ldr	r2, [pc, #124]	@ (8011aa4 <USBD_LL_Init+0x98>)
 8011a28:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011a2c:	4b1d      	ldr	r3, [pc, #116]	@ (8011aa4 <USBD_LL_Init+0x98>)
 8011a2e:	4a1e      	ldr	r2, [pc, #120]	@ (8011aa8 <USBD_LL_Init+0x9c>)
 8011a30:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8011a32:	4b1c      	ldr	r3, [pc, #112]	@ (8011aa4 <USBD_LL_Init+0x98>)
 8011a34:	2209      	movs	r2, #9
 8011a36:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011a38:	4b1a      	ldr	r3, [pc, #104]	@ (8011aa4 <USBD_LL_Init+0x98>)
 8011a3a:	2202      	movs	r2, #2
 8011a3c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011a3e:	4b19      	ldr	r3, [pc, #100]	@ (8011aa4 <USBD_LL_Init+0x98>)
 8011a40:	2200      	movs	r2, #0
 8011a42:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011a44:	4b17      	ldr	r3, [pc, #92]	@ (8011aa4 <USBD_LL_Init+0x98>)
 8011a46:	2202      	movs	r2, #2
 8011a48:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8011a4a:	4b16      	ldr	r3, [pc, #88]	@ (8011aa4 <USBD_LL_Init+0x98>)
 8011a4c:	2201      	movs	r2, #1
 8011a4e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011a50:	4b14      	ldr	r3, [pc, #80]	@ (8011aa4 <USBD_LL_Init+0x98>)
 8011a52:	2200      	movs	r2, #0
 8011a54:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011a56:	4b13      	ldr	r3, [pc, #76]	@ (8011aa4 <USBD_LL_Init+0x98>)
 8011a58:	2200      	movs	r2, #0
 8011a5a:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8011a5c:	4b11      	ldr	r3, [pc, #68]	@ (8011aa4 <USBD_LL_Init+0x98>)
 8011a5e:	2201      	movs	r2, #1
 8011a60:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8011a62:	4b10      	ldr	r3, [pc, #64]	@ (8011aa4 <USBD_LL_Init+0x98>)
 8011a64:	2201      	movs	r2, #1
 8011a66:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011a68:	4b0e      	ldr	r3, [pc, #56]	@ (8011aa4 <USBD_LL_Init+0x98>)
 8011a6a:	2200      	movs	r2, #0
 8011a6c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011a6e:	480d      	ldr	r0, [pc, #52]	@ (8011aa4 <USBD_LL_Init+0x98>)
 8011a70:	f7f4 fcf0 	bl	8006454 <HAL_PCD_Init>
 8011a74:	4603      	mov	r3, r0
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d001      	beq.n	8011a7e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8011a7a:	f7ef fc32 	bl	80012e2 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011a7e:	2180      	movs	r1, #128	@ 0x80
 8011a80:	4808      	ldr	r0, [pc, #32]	@ (8011aa4 <USBD_LL_Init+0x98>)
 8011a82:	f7f5 ff44 	bl	800790e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011a86:	2240      	movs	r2, #64	@ 0x40
 8011a88:	2100      	movs	r1, #0
 8011a8a:	4806      	ldr	r0, [pc, #24]	@ (8011aa4 <USBD_LL_Init+0x98>)
 8011a8c:	f7f5 fef8 	bl	8007880 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011a90:	2280      	movs	r2, #128	@ 0x80
 8011a92:	2101      	movs	r1, #1
 8011a94:	4803      	ldr	r0, [pc, #12]	@ (8011aa4 <USBD_LL_Init+0x98>)
 8011a96:	f7f5 fef3 	bl	8007880 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8011a9a:	2300      	movs	r3, #0
}
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	3708      	adds	r7, #8
 8011aa0:	46bd      	mov	sp, r7
 8011aa2:	bd80      	pop	{r7, pc}
 8011aa4:	24001ee8 	.word	0x24001ee8
 8011aa8:	40080000 	.word	0x40080000

08011aac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011aac:	b580      	push	{r7, lr}
 8011aae:	b084      	sub	sp, #16
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ab4:	2300      	movs	r3, #0
 8011ab6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ab8:	2300      	movs	r3, #0
 8011aba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	f7f4 fdd2 	bl	800666c <HAL_PCD_Start>
 8011ac8:	4603      	mov	r3, r0
 8011aca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011acc:	7bfb      	ldrb	r3, [r7, #15]
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f000 f942 	bl	8011d58 <USBD_Get_USB_Status>
 8011ad4:	4603      	mov	r3, r0
 8011ad6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ad8:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ada:	4618      	mov	r0, r3
 8011adc:	3710      	adds	r7, #16
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	bd80      	pop	{r7, pc}

08011ae2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011ae2:	b580      	push	{r7, lr}
 8011ae4:	b084      	sub	sp, #16
 8011ae6:	af00      	add	r7, sp, #0
 8011ae8:	6078      	str	r0, [r7, #4]
 8011aea:	4608      	mov	r0, r1
 8011aec:	4611      	mov	r1, r2
 8011aee:	461a      	mov	r2, r3
 8011af0:	4603      	mov	r3, r0
 8011af2:	70fb      	strb	r3, [r7, #3]
 8011af4:	460b      	mov	r3, r1
 8011af6:	70bb      	strb	r3, [r7, #2]
 8011af8:	4613      	mov	r3, r2
 8011afa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011afc:	2300      	movs	r3, #0
 8011afe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b00:	2300      	movs	r3, #0
 8011b02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011b0a:	78bb      	ldrb	r3, [r7, #2]
 8011b0c:	883a      	ldrh	r2, [r7, #0]
 8011b0e:	78f9      	ldrb	r1, [r7, #3]
 8011b10:	f7f5 fad3 	bl	80070ba <HAL_PCD_EP_Open>
 8011b14:	4603      	mov	r3, r0
 8011b16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b18:	7bfb      	ldrb	r3, [r7, #15]
 8011b1a:	4618      	mov	r0, r3
 8011b1c:	f000 f91c 	bl	8011d58 <USBD_Get_USB_Status>
 8011b20:	4603      	mov	r3, r0
 8011b22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b24:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b26:	4618      	mov	r0, r3
 8011b28:	3710      	adds	r7, #16
 8011b2a:	46bd      	mov	sp, r7
 8011b2c:	bd80      	pop	{r7, pc}

08011b2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b2e:	b580      	push	{r7, lr}
 8011b30:	b084      	sub	sp, #16
 8011b32:	af00      	add	r7, sp, #0
 8011b34:	6078      	str	r0, [r7, #4]
 8011b36:	460b      	mov	r3, r1
 8011b38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b3a:	2300      	movs	r3, #0
 8011b3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b3e:	2300      	movs	r3, #0
 8011b40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011b48:	78fa      	ldrb	r2, [r7, #3]
 8011b4a:	4611      	mov	r1, r2
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	f7f5 fb1c 	bl	800718a <HAL_PCD_EP_Close>
 8011b52:	4603      	mov	r3, r0
 8011b54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b56:	7bfb      	ldrb	r3, [r7, #15]
 8011b58:	4618      	mov	r0, r3
 8011b5a:	f000 f8fd 	bl	8011d58 <USBD_Get_USB_Status>
 8011b5e:	4603      	mov	r3, r0
 8011b60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b62:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b64:	4618      	mov	r0, r3
 8011b66:	3710      	adds	r7, #16
 8011b68:	46bd      	mov	sp, r7
 8011b6a:	bd80      	pop	{r7, pc}

08011b6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b084      	sub	sp, #16
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
 8011b74:	460b      	mov	r3, r1
 8011b76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b78:	2300      	movs	r3, #0
 8011b7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b7c:	2300      	movs	r3, #0
 8011b7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011b86:	78fa      	ldrb	r2, [r7, #3]
 8011b88:	4611      	mov	r1, r2
 8011b8a:	4618      	mov	r0, r3
 8011b8c:	f7f5 fbd4 	bl	8007338 <HAL_PCD_EP_SetStall>
 8011b90:	4603      	mov	r3, r0
 8011b92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b94:	7bfb      	ldrb	r3, [r7, #15]
 8011b96:	4618      	mov	r0, r3
 8011b98:	f000 f8de 	bl	8011d58 <USBD_Get_USB_Status>
 8011b9c:	4603      	mov	r3, r0
 8011b9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ba0:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ba2:	4618      	mov	r0, r3
 8011ba4:	3710      	adds	r7, #16
 8011ba6:	46bd      	mov	sp, r7
 8011ba8:	bd80      	pop	{r7, pc}

08011baa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011baa:	b580      	push	{r7, lr}
 8011bac:	b084      	sub	sp, #16
 8011bae:	af00      	add	r7, sp, #0
 8011bb0:	6078      	str	r0, [r7, #4]
 8011bb2:	460b      	mov	r3, r1
 8011bb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011bc4:	78fa      	ldrb	r2, [r7, #3]
 8011bc6:	4611      	mov	r1, r2
 8011bc8:	4618      	mov	r0, r3
 8011bca:	f7f5 fc18 	bl	80073fe <HAL_PCD_EP_ClrStall>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011bd2:	7bfb      	ldrb	r3, [r7, #15]
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	f000 f8bf 	bl	8011d58 <USBD_Get_USB_Status>
 8011bda:	4603      	mov	r3, r0
 8011bdc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011bde:	7bbb      	ldrb	r3, [r7, #14]
}
 8011be0:	4618      	mov	r0, r3
 8011be2:	3710      	adds	r7, #16
 8011be4:	46bd      	mov	sp, r7
 8011be6:	bd80      	pop	{r7, pc}

08011be8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011be8:	b480      	push	{r7}
 8011bea:	b085      	sub	sp, #20
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
 8011bf0:	460b      	mov	r3, r1
 8011bf2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011bfa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011bfc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011c00:	2b00      	cmp	r3, #0
 8011c02:	da0b      	bge.n	8011c1c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011c04:	78fb      	ldrb	r3, [r7, #3]
 8011c06:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011c0a:	68f9      	ldr	r1, [r7, #12]
 8011c0c:	4613      	mov	r3, r2
 8011c0e:	00db      	lsls	r3, r3, #3
 8011c10:	4413      	add	r3, r2
 8011c12:	009b      	lsls	r3, r3, #2
 8011c14:	440b      	add	r3, r1
 8011c16:	3316      	adds	r3, #22
 8011c18:	781b      	ldrb	r3, [r3, #0]
 8011c1a:	e00b      	b.n	8011c34 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011c1c:	78fb      	ldrb	r3, [r7, #3]
 8011c1e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8011c22:	68f9      	ldr	r1, [r7, #12]
 8011c24:	4613      	mov	r3, r2
 8011c26:	00db      	lsls	r3, r3, #3
 8011c28:	4413      	add	r3, r2
 8011c2a:	009b      	lsls	r3, r3, #2
 8011c2c:	440b      	add	r3, r1
 8011c2e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 8011c32:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011c34:	4618      	mov	r0, r3
 8011c36:	3714      	adds	r7, #20
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c3e:	4770      	bx	lr

08011c40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011c40:	b580      	push	{r7, lr}
 8011c42:	b084      	sub	sp, #16
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	6078      	str	r0, [r7, #4]
 8011c48:	460b      	mov	r3, r1
 8011c4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c50:	2300      	movs	r3, #0
 8011c52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011c5a:	78fa      	ldrb	r2, [r7, #3]
 8011c5c:	4611      	mov	r1, r2
 8011c5e:	4618      	mov	r0, r3
 8011c60:	f7f5 fa07 	bl	8007072 <HAL_PCD_SetAddress>
 8011c64:	4603      	mov	r3, r0
 8011c66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011c68:	7bfb      	ldrb	r3, [r7, #15]
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	f000 f874 	bl	8011d58 <USBD_Get_USB_Status>
 8011c70:	4603      	mov	r3, r0
 8011c72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011c74:	7bbb      	ldrb	r3, [r7, #14]
}
 8011c76:	4618      	mov	r0, r3
 8011c78:	3710      	adds	r7, #16
 8011c7a:	46bd      	mov	sp, r7
 8011c7c:	bd80      	pop	{r7, pc}

08011c7e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011c7e:	b580      	push	{r7, lr}
 8011c80:	b086      	sub	sp, #24
 8011c82:	af00      	add	r7, sp, #0
 8011c84:	60f8      	str	r0, [r7, #12]
 8011c86:	607a      	str	r2, [r7, #4]
 8011c88:	603b      	str	r3, [r7, #0]
 8011c8a:	460b      	mov	r3, r1
 8011c8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011c8e:	2300      	movs	r3, #0
 8011c90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c92:	2300      	movs	r3, #0
 8011c94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011c9c:	7af9      	ldrb	r1, [r7, #11]
 8011c9e:	683b      	ldr	r3, [r7, #0]
 8011ca0:	687a      	ldr	r2, [r7, #4]
 8011ca2:	f7f5 fb0f 	bl	80072c4 <HAL_PCD_EP_Transmit>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011caa:	7dfb      	ldrb	r3, [r7, #23]
 8011cac:	4618      	mov	r0, r3
 8011cae:	f000 f853 	bl	8011d58 <USBD_Get_USB_Status>
 8011cb2:	4603      	mov	r3, r0
 8011cb4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011cb6:	7dbb      	ldrb	r3, [r7, #22]
}
 8011cb8:	4618      	mov	r0, r3
 8011cba:	3718      	adds	r7, #24
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	bd80      	pop	{r7, pc}

08011cc0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b086      	sub	sp, #24
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	60f8      	str	r0, [r7, #12]
 8011cc8:	607a      	str	r2, [r7, #4]
 8011cca:	603b      	str	r3, [r7, #0]
 8011ccc:	460b      	mov	r3, r1
 8011cce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011cd0:	2300      	movs	r3, #0
 8011cd2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011cd8:	68fb      	ldr	r3, [r7, #12]
 8011cda:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011cde:	7af9      	ldrb	r1, [r7, #11]
 8011ce0:	683b      	ldr	r3, [r7, #0]
 8011ce2:	687a      	ldr	r2, [r7, #4]
 8011ce4:	f7f5 fa9b 	bl	800721e <HAL_PCD_EP_Receive>
 8011ce8:	4603      	mov	r3, r0
 8011cea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011cec:	7dfb      	ldrb	r3, [r7, #23]
 8011cee:	4618      	mov	r0, r3
 8011cf0:	f000 f832 	bl	8011d58 <USBD_Get_USB_Status>
 8011cf4:	4603      	mov	r3, r0
 8011cf6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011cf8:	7dbb      	ldrb	r3, [r7, #22]
}
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	3718      	adds	r7, #24
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	bd80      	pop	{r7, pc}

08011d02 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011d02:	b580      	push	{r7, lr}
 8011d04:	b082      	sub	sp, #8
 8011d06:	af00      	add	r7, sp, #0
 8011d08:	6078      	str	r0, [r7, #4]
 8011d0a:	460b      	mov	r3, r1
 8011d0c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011d14:	78fa      	ldrb	r2, [r7, #3]
 8011d16:	4611      	mov	r1, r2
 8011d18:	4618      	mov	r0, r3
 8011d1a:	f7f5 fabb 	bl	8007294 <HAL_PCD_EP_GetRxCount>
 8011d1e:	4603      	mov	r3, r0
}
 8011d20:	4618      	mov	r0, r3
 8011d22:	3708      	adds	r7, #8
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd80      	pop	{r7, pc}

08011d28 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011d28:	b480      	push	{r7}
 8011d2a:	b083      	sub	sp, #12
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011d30:	4b03      	ldr	r3, [pc, #12]	@ (8011d40 <USBD_static_malloc+0x18>)
}
 8011d32:	4618      	mov	r0, r3
 8011d34:	370c      	adds	r7, #12
 8011d36:	46bd      	mov	sp, r7
 8011d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3c:	4770      	bx	lr
 8011d3e:	bf00      	nop
 8011d40:	240023cc 	.word	0x240023cc

08011d44 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011d44:	b480      	push	{r7}
 8011d46:	b083      	sub	sp, #12
 8011d48:	af00      	add	r7, sp, #0
 8011d4a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8011d4c:	bf00      	nop
 8011d4e:	370c      	adds	r7, #12
 8011d50:	46bd      	mov	sp, r7
 8011d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d56:	4770      	bx	lr

08011d58 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011d58:	b480      	push	{r7}
 8011d5a:	b085      	sub	sp, #20
 8011d5c:	af00      	add	r7, sp, #0
 8011d5e:	4603      	mov	r3, r0
 8011d60:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011d62:	2300      	movs	r3, #0
 8011d64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011d66:	79fb      	ldrb	r3, [r7, #7]
 8011d68:	2b03      	cmp	r3, #3
 8011d6a:	d817      	bhi.n	8011d9c <USBD_Get_USB_Status+0x44>
 8011d6c:	a201      	add	r2, pc, #4	@ (adr r2, 8011d74 <USBD_Get_USB_Status+0x1c>)
 8011d6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d72:	bf00      	nop
 8011d74:	08011d85 	.word	0x08011d85
 8011d78:	08011d8b 	.word	0x08011d8b
 8011d7c:	08011d91 	.word	0x08011d91
 8011d80:	08011d97 	.word	0x08011d97
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011d84:	2300      	movs	r3, #0
 8011d86:	73fb      	strb	r3, [r7, #15]
    break;
 8011d88:	e00b      	b.n	8011da2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011d8a:	2303      	movs	r3, #3
 8011d8c:	73fb      	strb	r3, [r7, #15]
    break;
 8011d8e:	e008      	b.n	8011da2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011d90:	2301      	movs	r3, #1
 8011d92:	73fb      	strb	r3, [r7, #15]
    break;
 8011d94:	e005      	b.n	8011da2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011d96:	2303      	movs	r3, #3
 8011d98:	73fb      	strb	r3, [r7, #15]
    break;
 8011d9a:	e002      	b.n	8011da2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011d9c:	2303      	movs	r3, #3
 8011d9e:	73fb      	strb	r3, [r7, #15]
    break;
 8011da0:	bf00      	nop
  }
  return usb_status;
 8011da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011da4:	4618      	mov	r0, r3
 8011da6:	3714      	adds	r7, #20
 8011da8:	46bd      	mov	sp, r7
 8011daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dae:	4770      	bx	lr

08011db0 <__cvt>:
 8011db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011db2:	ed2d 8b02 	vpush	{d8}
 8011db6:	eeb0 8b40 	vmov.f64	d8, d0
 8011dba:	b085      	sub	sp, #20
 8011dbc:	4617      	mov	r7, r2
 8011dbe:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8011dc0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011dc2:	ee18 2a90 	vmov	r2, s17
 8011dc6:	f025 0520 	bic.w	r5, r5, #32
 8011dca:	2a00      	cmp	r2, #0
 8011dcc:	bfb6      	itet	lt
 8011dce:	222d      	movlt	r2, #45	@ 0x2d
 8011dd0:	2200      	movge	r2, #0
 8011dd2:	eeb1 8b40 	vneglt.f64	d8, d0
 8011dd6:	2d46      	cmp	r5, #70	@ 0x46
 8011dd8:	460c      	mov	r4, r1
 8011dda:	701a      	strb	r2, [r3, #0]
 8011ddc:	d004      	beq.n	8011de8 <__cvt+0x38>
 8011dde:	2d45      	cmp	r5, #69	@ 0x45
 8011de0:	d100      	bne.n	8011de4 <__cvt+0x34>
 8011de2:	3401      	adds	r4, #1
 8011de4:	2102      	movs	r1, #2
 8011de6:	e000      	b.n	8011dea <__cvt+0x3a>
 8011de8:	2103      	movs	r1, #3
 8011dea:	ab03      	add	r3, sp, #12
 8011dec:	9301      	str	r3, [sp, #4]
 8011dee:	ab02      	add	r3, sp, #8
 8011df0:	9300      	str	r3, [sp, #0]
 8011df2:	4622      	mov	r2, r4
 8011df4:	4633      	mov	r3, r6
 8011df6:	eeb0 0b48 	vmov.f64	d0, d8
 8011dfa:	f000 fe41 	bl	8012a80 <_dtoa_r>
 8011dfe:	2d47      	cmp	r5, #71	@ 0x47
 8011e00:	d114      	bne.n	8011e2c <__cvt+0x7c>
 8011e02:	07fb      	lsls	r3, r7, #31
 8011e04:	d50a      	bpl.n	8011e1c <__cvt+0x6c>
 8011e06:	1902      	adds	r2, r0, r4
 8011e08:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e10:	bf08      	it	eq
 8011e12:	9203      	streq	r2, [sp, #12]
 8011e14:	2130      	movs	r1, #48	@ 0x30
 8011e16:	9b03      	ldr	r3, [sp, #12]
 8011e18:	4293      	cmp	r3, r2
 8011e1a:	d319      	bcc.n	8011e50 <__cvt+0xa0>
 8011e1c:	9b03      	ldr	r3, [sp, #12]
 8011e1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8011e20:	1a1b      	subs	r3, r3, r0
 8011e22:	6013      	str	r3, [r2, #0]
 8011e24:	b005      	add	sp, #20
 8011e26:	ecbd 8b02 	vpop	{d8}
 8011e2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011e2c:	2d46      	cmp	r5, #70	@ 0x46
 8011e2e:	eb00 0204 	add.w	r2, r0, r4
 8011e32:	d1e9      	bne.n	8011e08 <__cvt+0x58>
 8011e34:	7803      	ldrb	r3, [r0, #0]
 8011e36:	2b30      	cmp	r3, #48	@ 0x30
 8011e38:	d107      	bne.n	8011e4a <__cvt+0x9a>
 8011e3a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8011e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011e42:	bf1c      	itt	ne
 8011e44:	f1c4 0401 	rsbne	r4, r4, #1
 8011e48:	6034      	strne	r4, [r6, #0]
 8011e4a:	6833      	ldr	r3, [r6, #0]
 8011e4c:	441a      	add	r2, r3
 8011e4e:	e7db      	b.n	8011e08 <__cvt+0x58>
 8011e50:	1c5c      	adds	r4, r3, #1
 8011e52:	9403      	str	r4, [sp, #12]
 8011e54:	7019      	strb	r1, [r3, #0]
 8011e56:	e7de      	b.n	8011e16 <__cvt+0x66>

08011e58 <__exponent>:
 8011e58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011e5a:	2900      	cmp	r1, #0
 8011e5c:	bfba      	itte	lt
 8011e5e:	4249      	neglt	r1, r1
 8011e60:	232d      	movlt	r3, #45	@ 0x2d
 8011e62:	232b      	movge	r3, #43	@ 0x2b
 8011e64:	2909      	cmp	r1, #9
 8011e66:	7002      	strb	r2, [r0, #0]
 8011e68:	7043      	strb	r3, [r0, #1]
 8011e6a:	dd29      	ble.n	8011ec0 <__exponent+0x68>
 8011e6c:	f10d 0307 	add.w	r3, sp, #7
 8011e70:	461d      	mov	r5, r3
 8011e72:	270a      	movs	r7, #10
 8011e74:	461a      	mov	r2, r3
 8011e76:	fbb1 f6f7 	udiv	r6, r1, r7
 8011e7a:	fb07 1416 	mls	r4, r7, r6, r1
 8011e7e:	3430      	adds	r4, #48	@ 0x30
 8011e80:	f802 4c01 	strb.w	r4, [r2, #-1]
 8011e84:	460c      	mov	r4, r1
 8011e86:	2c63      	cmp	r4, #99	@ 0x63
 8011e88:	f103 33ff 	add.w	r3, r3, #4294967295
 8011e8c:	4631      	mov	r1, r6
 8011e8e:	dcf1      	bgt.n	8011e74 <__exponent+0x1c>
 8011e90:	3130      	adds	r1, #48	@ 0x30
 8011e92:	1e94      	subs	r4, r2, #2
 8011e94:	f803 1c01 	strb.w	r1, [r3, #-1]
 8011e98:	1c41      	adds	r1, r0, #1
 8011e9a:	4623      	mov	r3, r4
 8011e9c:	42ab      	cmp	r3, r5
 8011e9e:	d30a      	bcc.n	8011eb6 <__exponent+0x5e>
 8011ea0:	f10d 0309 	add.w	r3, sp, #9
 8011ea4:	1a9b      	subs	r3, r3, r2
 8011ea6:	42ac      	cmp	r4, r5
 8011ea8:	bf88      	it	hi
 8011eaa:	2300      	movhi	r3, #0
 8011eac:	3302      	adds	r3, #2
 8011eae:	4403      	add	r3, r0
 8011eb0:	1a18      	subs	r0, r3, r0
 8011eb2:	b003      	add	sp, #12
 8011eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011eb6:	f813 6b01 	ldrb.w	r6, [r3], #1
 8011eba:	f801 6f01 	strb.w	r6, [r1, #1]!
 8011ebe:	e7ed      	b.n	8011e9c <__exponent+0x44>
 8011ec0:	2330      	movs	r3, #48	@ 0x30
 8011ec2:	3130      	adds	r1, #48	@ 0x30
 8011ec4:	7083      	strb	r3, [r0, #2]
 8011ec6:	70c1      	strb	r1, [r0, #3]
 8011ec8:	1d03      	adds	r3, r0, #4
 8011eca:	e7f1      	b.n	8011eb0 <__exponent+0x58>
 8011ecc:	0000      	movs	r0, r0
	...

08011ed0 <_printf_float>:
 8011ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ed4:	b08d      	sub	sp, #52	@ 0x34
 8011ed6:	460c      	mov	r4, r1
 8011ed8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8011edc:	4616      	mov	r6, r2
 8011ede:	461f      	mov	r7, r3
 8011ee0:	4605      	mov	r5, r0
 8011ee2:	f000 fccb 	bl	801287c <_localeconv_r>
 8011ee6:	f8d0 b000 	ldr.w	fp, [r0]
 8011eea:	4658      	mov	r0, fp
 8011eec:	f7ee fa48 	bl	8000380 <strlen>
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	930a      	str	r3, [sp, #40]	@ 0x28
 8011ef4:	f8d8 3000 	ldr.w	r3, [r8]
 8011ef8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8011efc:	6822      	ldr	r2, [r4, #0]
 8011efe:	9005      	str	r0, [sp, #20]
 8011f00:	3307      	adds	r3, #7
 8011f02:	f023 0307 	bic.w	r3, r3, #7
 8011f06:	f103 0108 	add.w	r1, r3, #8
 8011f0a:	f8c8 1000 	str.w	r1, [r8]
 8011f0e:	ed93 0b00 	vldr	d0, [r3]
 8011f12:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8012170 <_printf_float+0x2a0>
 8011f16:	eeb0 7bc0 	vabs.f64	d7, d0
 8011f1a:	eeb4 7b46 	vcmp.f64	d7, d6
 8011f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f22:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8011f26:	dd24      	ble.n	8011f72 <_printf_float+0xa2>
 8011f28:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f30:	d502      	bpl.n	8011f38 <_printf_float+0x68>
 8011f32:	232d      	movs	r3, #45	@ 0x2d
 8011f34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011f38:	498f      	ldr	r1, [pc, #572]	@ (8012178 <_printf_float+0x2a8>)
 8011f3a:	4b90      	ldr	r3, [pc, #576]	@ (801217c <_printf_float+0x2ac>)
 8011f3c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8011f40:	bf94      	ite	ls
 8011f42:	4688      	movls	r8, r1
 8011f44:	4698      	movhi	r8, r3
 8011f46:	f022 0204 	bic.w	r2, r2, #4
 8011f4a:	2303      	movs	r3, #3
 8011f4c:	6123      	str	r3, [r4, #16]
 8011f4e:	6022      	str	r2, [r4, #0]
 8011f50:	f04f 0a00 	mov.w	sl, #0
 8011f54:	9700      	str	r7, [sp, #0]
 8011f56:	4633      	mov	r3, r6
 8011f58:	aa0b      	add	r2, sp, #44	@ 0x2c
 8011f5a:	4621      	mov	r1, r4
 8011f5c:	4628      	mov	r0, r5
 8011f5e:	f000 f9d1 	bl	8012304 <_printf_common>
 8011f62:	3001      	adds	r0, #1
 8011f64:	f040 8089 	bne.w	801207a <_printf_float+0x1aa>
 8011f68:	f04f 30ff 	mov.w	r0, #4294967295
 8011f6c:	b00d      	add	sp, #52	@ 0x34
 8011f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f72:	eeb4 0b40 	vcmp.f64	d0, d0
 8011f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011f7a:	d709      	bvc.n	8011f90 <_printf_float+0xc0>
 8011f7c:	ee10 3a90 	vmov	r3, s1
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	bfbc      	itt	lt
 8011f84:	232d      	movlt	r3, #45	@ 0x2d
 8011f86:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8011f8a:	497d      	ldr	r1, [pc, #500]	@ (8012180 <_printf_float+0x2b0>)
 8011f8c:	4b7d      	ldr	r3, [pc, #500]	@ (8012184 <_printf_float+0x2b4>)
 8011f8e:	e7d5      	b.n	8011f3c <_printf_float+0x6c>
 8011f90:	6863      	ldr	r3, [r4, #4]
 8011f92:	1c59      	adds	r1, r3, #1
 8011f94:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8011f98:	d139      	bne.n	801200e <_printf_float+0x13e>
 8011f9a:	2306      	movs	r3, #6
 8011f9c:	6063      	str	r3, [r4, #4]
 8011f9e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	6022      	str	r2, [r4, #0]
 8011fa6:	9303      	str	r3, [sp, #12]
 8011fa8:	ab0a      	add	r3, sp, #40	@ 0x28
 8011faa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8011fae:	ab09      	add	r3, sp, #36	@ 0x24
 8011fb0:	9300      	str	r3, [sp, #0]
 8011fb2:	6861      	ldr	r1, [r4, #4]
 8011fb4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8011fb8:	4628      	mov	r0, r5
 8011fba:	f7ff fef9 	bl	8011db0 <__cvt>
 8011fbe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8011fc2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8011fc4:	4680      	mov	r8, r0
 8011fc6:	d129      	bne.n	801201c <_printf_float+0x14c>
 8011fc8:	1cc8      	adds	r0, r1, #3
 8011fca:	db02      	blt.n	8011fd2 <_printf_float+0x102>
 8011fcc:	6863      	ldr	r3, [r4, #4]
 8011fce:	4299      	cmp	r1, r3
 8011fd0:	dd41      	ble.n	8012056 <_printf_float+0x186>
 8011fd2:	f1a9 0902 	sub.w	r9, r9, #2
 8011fd6:	fa5f f989 	uxtb.w	r9, r9
 8011fda:	3901      	subs	r1, #1
 8011fdc:	464a      	mov	r2, r9
 8011fde:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8011fe2:	9109      	str	r1, [sp, #36]	@ 0x24
 8011fe4:	f7ff ff38 	bl	8011e58 <__exponent>
 8011fe8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011fea:	1813      	adds	r3, r2, r0
 8011fec:	2a01      	cmp	r2, #1
 8011fee:	4682      	mov	sl, r0
 8011ff0:	6123      	str	r3, [r4, #16]
 8011ff2:	dc02      	bgt.n	8011ffa <_printf_float+0x12a>
 8011ff4:	6822      	ldr	r2, [r4, #0]
 8011ff6:	07d2      	lsls	r2, r2, #31
 8011ff8:	d501      	bpl.n	8011ffe <_printf_float+0x12e>
 8011ffa:	3301      	adds	r3, #1
 8011ffc:	6123      	str	r3, [r4, #16]
 8011ffe:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012002:	2b00      	cmp	r3, #0
 8012004:	d0a6      	beq.n	8011f54 <_printf_float+0x84>
 8012006:	232d      	movs	r3, #45	@ 0x2d
 8012008:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801200c:	e7a2      	b.n	8011f54 <_printf_float+0x84>
 801200e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012012:	d1c4      	bne.n	8011f9e <_printf_float+0xce>
 8012014:	2b00      	cmp	r3, #0
 8012016:	d1c2      	bne.n	8011f9e <_printf_float+0xce>
 8012018:	2301      	movs	r3, #1
 801201a:	e7bf      	b.n	8011f9c <_printf_float+0xcc>
 801201c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012020:	d9db      	bls.n	8011fda <_printf_float+0x10a>
 8012022:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8012026:	d118      	bne.n	801205a <_printf_float+0x18a>
 8012028:	2900      	cmp	r1, #0
 801202a:	6863      	ldr	r3, [r4, #4]
 801202c:	dd0b      	ble.n	8012046 <_printf_float+0x176>
 801202e:	6121      	str	r1, [r4, #16]
 8012030:	b913      	cbnz	r3, 8012038 <_printf_float+0x168>
 8012032:	6822      	ldr	r2, [r4, #0]
 8012034:	07d0      	lsls	r0, r2, #31
 8012036:	d502      	bpl.n	801203e <_printf_float+0x16e>
 8012038:	3301      	adds	r3, #1
 801203a:	440b      	add	r3, r1
 801203c:	6123      	str	r3, [r4, #16]
 801203e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012040:	f04f 0a00 	mov.w	sl, #0
 8012044:	e7db      	b.n	8011ffe <_printf_float+0x12e>
 8012046:	b913      	cbnz	r3, 801204e <_printf_float+0x17e>
 8012048:	6822      	ldr	r2, [r4, #0]
 801204a:	07d2      	lsls	r2, r2, #31
 801204c:	d501      	bpl.n	8012052 <_printf_float+0x182>
 801204e:	3302      	adds	r3, #2
 8012050:	e7f4      	b.n	801203c <_printf_float+0x16c>
 8012052:	2301      	movs	r3, #1
 8012054:	e7f2      	b.n	801203c <_printf_float+0x16c>
 8012056:	f04f 0967 	mov.w	r9, #103	@ 0x67
 801205a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801205c:	4299      	cmp	r1, r3
 801205e:	db05      	blt.n	801206c <_printf_float+0x19c>
 8012060:	6823      	ldr	r3, [r4, #0]
 8012062:	6121      	str	r1, [r4, #16]
 8012064:	07d8      	lsls	r0, r3, #31
 8012066:	d5ea      	bpl.n	801203e <_printf_float+0x16e>
 8012068:	1c4b      	adds	r3, r1, #1
 801206a:	e7e7      	b.n	801203c <_printf_float+0x16c>
 801206c:	2900      	cmp	r1, #0
 801206e:	bfd4      	ite	le
 8012070:	f1c1 0202 	rsble	r2, r1, #2
 8012074:	2201      	movgt	r2, #1
 8012076:	4413      	add	r3, r2
 8012078:	e7e0      	b.n	801203c <_printf_float+0x16c>
 801207a:	6823      	ldr	r3, [r4, #0]
 801207c:	055a      	lsls	r2, r3, #21
 801207e:	d407      	bmi.n	8012090 <_printf_float+0x1c0>
 8012080:	6923      	ldr	r3, [r4, #16]
 8012082:	4642      	mov	r2, r8
 8012084:	4631      	mov	r1, r6
 8012086:	4628      	mov	r0, r5
 8012088:	47b8      	blx	r7
 801208a:	3001      	adds	r0, #1
 801208c:	d12a      	bne.n	80120e4 <_printf_float+0x214>
 801208e:	e76b      	b.n	8011f68 <_printf_float+0x98>
 8012090:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012094:	f240 80e0 	bls.w	8012258 <_printf_float+0x388>
 8012098:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801209c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80120a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120a4:	d133      	bne.n	801210e <_printf_float+0x23e>
 80120a6:	4a38      	ldr	r2, [pc, #224]	@ (8012188 <_printf_float+0x2b8>)
 80120a8:	2301      	movs	r3, #1
 80120aa:	4631      	mov	r1, r6
 80120ac:	4628      	mov	r0, r5
 80120ae:	47b8      	blx	r7
 80120b0:	3001      	adds	r0, #1
 80120b2:	f43f af59 	beq.w	8011f68 <_printf_float+0x98>
 80120b6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80120ba:	4543      	cmp	r3, r8
 80120bc:	db02      	blt.n	80120c4 <_printf_float+0x1f4>
 80120be:	6823      	ldr	r3, [r4, #0]
 80120c0:	07d8      	lsls	r0, r3, #31
 80120c2:	d50f      	bpl.n	80120e4 <_printf_float+0x214>
 80120c4:	9b05      	ldr	r3, [sp, #20]
 80120c6:	465a      	mov	r2, fp
 80120c8:	4631      	mov	r1, r6
 80120ca:	4628      	mov	r0, r5
 80120cc:	47b8      	blx	r7
 80120ce:	3001      	adds	r0, #1
 80120d0:	f43f af4a 	beq.w	8011f68 <_printf_float+0x98>
 80120d4:	f04f 0900 	mov.w	r9, #0
 80120d8:	f108 38ff 	add.w	r8, r8, #4294967295
 80120dc:	f104 0a1a 	add.w	sl, r4, #26
 80120e0:	45c8      	cmp	r8, r9
 80120e2:	dc09      	bgt.n	80120f8 <_printf_float+0x228>
 80120e4:	6823      	ldr	r3, [r4, #0]
 80120e6:	079b      	lsls	r3, r3, #30
 80120e8:	f100 8107 	bmi.w	80122fa <_printf_float+0x42a>
 80120ec:	68e0      	ldr	r0, [r4, #12]
 80120ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80120f0:	4298      	cmp	r0, r3
 80120f2:	bfb8      	it	lt
 80120f4:	4618      	movlt	r0, r3
 80120f6:	e739      	b.n	8011f6c <_printf_float+0x9c>
 80120f8:	2301      	movs	r3, #1
 80120fa:	4652      	mov	r2, sl
 80120fc:	4631      	mov	r1, r6
 80120fe:	4628      	mov	r0, r5
 8012100:	47b8      	blx	r7
 8012102:	3001      	adds	r0, #1
 8012104:	f43f af30 	beq.w	8011f68 <_printf_float+0x98>
 8012108:	f109 0901 	add.w	r9, r9, #1
 801210c:	e7e8      	b.n	80120e0 <_printf_float+0x210>
 801210e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012110:	2b00      	cmp	r3, #0
 8012112:	dc3b      	bgt.n	801218c <_printf_float+0x2bc>
 8012114:	4a1c      	ldr	r2, [pc, #112]	@ (8012188 <_printf_float+0x2b8>)
 8012116:	2301      	movs	r3, #1
 8012118:	4631      	mov	r1, r6
 801211a:	4628      	mov	r0, r5
 801211c:	47b8      	blx	r7
 801211e:	3001      	adds	r0, #1
 8012120:	f43f af22 	beq.w	8011f68 <_printf_float+0x98>
 8012124:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012128:	ea59 0303 	orrs.w	r3, r9, r3
 801212c:	d102      	bne.n	8012134 <_printf_float+0x264>
 801212e:	6823      	ldr	r3, [r4, #0]
 8012130:	07d9      	lsls	r1, r3, #31
 8012132:	d5d7      	bpl.n	80120e4 <_printf_float+0x214>
 8012134:	9b05      	ldr	r3, [sp, #20]
 8012136:	465a      	mov	r2, fp
 8012138:	4631      	mov	r1, r6
 801213a:	4628      	mov	r0, r5
 801213c:	47b8      	blx	r7
 801213e:	3001      	adds	r0, #1
 8012140:	f43f af12 	beq.w	8011f68 <_printf_float+0x98>
 8012144:	f04f 0a00 	mov.w	sl, #0
 8012148:	f104 0b1a 	add.w	fp, r4, #26
 801214c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801214e:	425b      	negs	r3, r3
 8012150:	4553      	cmp	r3, sl
 8012152:	dc01      	bgt.n	8012158 <_printf_float+0x288>
 8012154:	464b      	mov	r3, r9
 8012156:	e794      	b.n	8012082 <_printf_float+0x1b2>
 8012158:	2301      	movs	r3, #1
 801215a:	465a      	mov	r2, fp
 801215c:	4631      	mov	r1, r6
 801215e:	4628      	mov	r0, r5
 8012160:	47b8      	blx	r7
 8012162:	3001      	adds	r0, #1
 8012164:	f43f af00 	beq.w	8011f68 <_printf_float+0x98>
 8012168:	f10a 0a01 	add.w	sl, sl, #1
 801216c:	e7ee      	b.n	801214c <_printf_float+0x27c>
 801216e:	bf00      	nop
 8012170:	ffffffff 	.word	0xffffffff
 8012174:	7fefffff 	.word	0x7fefffff
 8012178:	08014a60 	.word	0x08014a60
 801217c:	08014a64 	.word	0x08014a64
 8012180:	08014a68 	.word	0x08014a68
 8012184:	08014a6c 	.word	0x08014a6c
 8012188:	08014a70 	.word	0x08014a70
 801218c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801218e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012192:	4553      	cmp	r3, sl
 8012194:	bfa8      	it	ge
 8012196:	4653      	movge	r3, sl
 8012198:	2b00      	cmp	r3, #0
 801219a:	4699      	mov	r9, r3
 801219c:	dc37      	bgt.n	801220e <_printf_float+0x33e>
 801219e:	2300      	movs	r3, #0
 80121a0:	9307      	str	r3, [sp, #28]
 80121a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80121a6:	f104 021a 	add.w	r2, r4, #26
 80121aa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80121ac:	9907      	ldr	r1, [sp, #28]
 80121ae:	9306      	str	r3, [sp, #24]
 80121b0:	eba3 0309 	sub.w	r3, r3, r9
 80121b4:	428b      	cmp	r3, r1
 80121b6:	dc31      	bgt.n	801221c <_printf_float+0x34c>
 80121b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121ba:	459a      	cmp	sl, r3
 80121bc:	dc3b      	bgt.n	8012236 <_printf_float+0x366>
 80121be:	6823      	ldr	r3, [r4, #0]
 80121c0:	07da      	lsls	r2, r3, #31
 80121c2:	d438      	bmi.n	8012236 <_printf_float+0x366>
 80121c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121c6:	ebaa 0903 	sub.w	r9, sl, r3
 80121ca:	9b06      	ldr	r3, [sp, #24]
 80121cc:	ebaa 0303 	sub.w	r3, sl, r3
 80121d0:	4599      	cmp	r9, r3
 80121d2:	bfa8      	it	ge
 80121d4:	4699      	movge	r9, r3
 80121d6:	f1b9 0f00 	cmp.w	r9, #0
 80121da:	dc34      	bgt.n	8012246 <_printf_float+0x376>
 80121dc:	f04f 0800 	mov.w	r8, #0
 80121e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80121e4:	f104 0b1a 	add.w	fp, r4, #26
 80121e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80121ea:	ebaa 0303 	sub.w	r3, sl, r3
 80121ee:	eba3 0309 	sub.w	r3, r3, r9
 80121f2:	4543      	cmp	r3, r8
 80121f4:	f77f af76 	ble.w	80120e4 <_printf_float+0x214>
 80121f8:	2301      	movs	r3, #1
 80121fa:	465a      	mov	r2, fp
 80121fc:	4631      	mov	r1, r6
 80121fe:	4628      	mov	r0, r5
 8012200:	47b8      	blx	r7
 8012202:	3001      	adds	r0, #1
 8012204:	f43f aeb0 	beq.w	8011f68 <_printf_float+0x98>
 8012208:	f108 0801 	add.w	r8, r8, #1
 801220c:	e7ec      	b.n	80121e8 <_printf_float+0x318>
 801220e:	4642      	mov	r2, r8
 8012210:	4631      	mov	r1, r6
 8012212:	4628      	mov	r0, r5
 8012214:	47b8      	blx	r7
 8012216:	3001      	adds	r0, #1
 8012218:	d1c1      	bne.n	801219e <_printf_float+0x2ce>
 801221a:	e6a5      	b.n	8011f68 <_printf_float+0x98>
 801221c:	2301      	movs	r3, #1
 801221e:	4631      	mov	r1, r6
 8012220:	4628      	mov	r0, r5
 8012222:	9206      	str	r2, [sp, #24]
 8012224:	47b8      	blx	r7
 8012226:	3001      	adds	r0, #1
 8012228:	f43f ae9e 	beq.w	8011f68 <_printf_float+0x98>
 801222c:	9b07      	ldr	r3, [sp, #28]
 801222e:	9a06      	ldr	r2, [sp, #24]
 8012230:	3301      	adds	r3, #1
 8012232:	9307      	str	r3, [sp, #28]
 8012234:	e7b9      	b.n	80121aa <_printf_float+0x2da>
 8012236:	9b05      	ldr	r3, [sp, #20]
 8012238:	465a      	mov	r2, fp
 801223a:	4631      	mov	r1, r6
 801223c:	4628      	mov	r0, r5
 801223e:	47b8      	blx	r7
 8012240:	3001      	adds	r0, #1
 8012242:	d1bf      	bne.n	80121c4 <_printf_float+0x2f4>
 8012244:	e690      	b.n	8011f68 <_printf_float+0x98>
 8012246:	9a06      	ldr	r2, [sp, #24]
 8012248:	464b      	mov	r3, r9
 801224a:	4442      	add	r2, r8
 801224c:	4631      	mov	r1, r6
 801224e:	4628      	mov	r0, r5
 8012250:	47b8      	blx	r7
 8012252:	3001      	adds	r0, #1
 8012254:	d1c2      	bne.n	80121dc <_printf_float+0x30c>
 8012256:	e687      	b.n	8011f68 <_printf_float+0x98>
 8012258:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 801225c:	f1b9 0f01 	cmp.w	r9, #1
 8012260:	dc01      	bgt.n	8012266 <_printf_float+0x396>
 8012262:	07db      	lsls	r3, r3, #31
 8012264:	d536      	bpl.n	80122d4 <_printf_float+0x404>
 8012266:	2301      	movs	r3, #1
 8012268:	4642      	mov	r2, r8
 801226a:	4631      	mov	r1, r6
 801226c:	4628      	mov	r0, r5
 801226e:	47b8      	blx	r7
 8012270:	3001      	adds	r0, #1
 8012272:	f43f ae79 	beq.w	8011f68 <_printf_float+0x98>
 8012276:	9b05      	ldr	r3, [sp, #20]
 8012278:	465a      	mov	r2, fp
 801227a:	4631      	mov	r1, r6
 801227c:	4628      	mov	r0, r5
 801227e:	47b8      	blx	r7
 8012280:	3001      	adds	r0, #1
 8012282:	f43f ae71 	beq.w	8011f68 <_printf_float+0x98>
 8012286:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 801228a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801228e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012292:	f109 39ff 	add.w	r9, r9, #4294967295
 8012296:	d018      	beq.n	80122ca <_printf_float+0x3fa>
 8012298:	464b      	mov	r3, r9
 801229a:	f108 0201 	add.w	r2, r8, #1
 801229e:	4631      	mov	r1, r6
 80122a0:	4628      	mov	r0, r5
 80122a2:	47b8      	blx	r7
 80122a4:	3001      	adds	r0, #1
 80122a6:	d10c      	bne.n	80122c2 <_printf_float+0x3f2>
 80122a8:	e65e      	b.n	8011f68 <_printf_float+0x98>
 80122aa:	2301      	movs	r3, #1
 80122ac:	465a      	mov	r2, fp
 80122ae:	4631      	mov	r1, r6
 80122b0:	4628      	mov	r0, r5
 80122b2:	47b8      	blx	r7
 80122b4:	3001      	adds	r0, #1
 80122b6:	f43f ae57 	beq.w	8011f68 <_printf_float+0x98>
 80122ba:	f108 0801 	add.w	r8, r8, #1
 80122be:	45c8      	cmp	r8, r9
 80122c0:	dbf3      	blt.n	80122aa <_printf_float+0x3da>
 80122c2:	4653      	mov	r3, sl
 80122c4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80122c8:	e6dc      	b.n	8012084 <_printf_float+0x1b4>
 80122ca:	f04f 0800 	mov.w	r8, #0
 80122ce:	f104 0b1a 	add.w	fp, r4, #26
 80122d2:	e7f4      	b.n	80122be <_printf_float+0x3ee>
 80122d4:	2301      	movs	r3, #1
 80122d6:	4642      	mov	r2, r8
 80122d8:	e7e1      	b.n	801229e <_printf_float+0x3ce>
 80122da:	2301      	movs	r3, #1
 80122dc:	464a      	mov	r2, r9
 80122de:	4631      	mov	r1, r6
 80122e0:	4628      	mov	r0, r5
 80122e2:	47b8      	blx	r7
 80122e4:	3001      	adds	r0, #1
 80122e6:	f43f ae3f 	beq.w	8011f68 <_printf_float+0x98>
 80122ea:	f108 0801 	add.w	r8, r8, #1
 80122ee:	68e3      	ldr	r3, [r4, #12]
 80122f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80122f2:	1a5b      	subs	r3, r3, r1
 80122f4:	4543      	cmp	r3, r8
 80122f6:	dcf0      	bgt.n	80122da <_printf_float+0x40a>
 80122f8:	e6f8      	b.n	80120ec <_printf_float+0x21c>
 80122fa:	f04f 0800 	mov.w	r8, #0
 80122fe:	f104 0919 	add.w	r9, r4, #25
 8012302:	e7f4      	b.n	80122ee <_printf_float+0x41e>

08012304 <_printf_common>:
 8012304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012308:	4616      	mov	r6, r2
 801230a:	4698      	mov	r8, r3
 801230c:	688a      	ldr	r2, [r1, #8]
 801230e:	690b      	ldr	r3, [r1, #16]
 8012310:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012314:	4293      	cmp	r3, r2
 8012316:	bfb8      	it	lt
 8012318:	4613      	movlt	r3, r2
 801231a:	6033      	str	r3, [r6, #0]
 801231c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012320:	4607      	mov	r7, r0
 8012322:	460c      	mov	r4, r1
 8012324:	b10a      	cbz	r2, 801232a <_printf_common+0x26>
 8012326:	3301      	adds	r3, #1
 8012328:	6033      	str	r3, [r6, #0]
 801232a:	6823      	ldr	r3, [r4, #0]
 801232c:	0699      	lsls	r1, r3, #26
 801232e:	bf42      	ittt	mi
 8012330:	6833      	ldrmi	r3, [r6, #0]
 8012332:	3302      	addmi	r3, #2
 8012334:	6033      	strmi	r3, [r6, #0]
 8012336:	6825      	ldr	r5, [r4, #0]
 8012338:	f015 0506 	ands.w	r5, r5, #6
 801233c:	d106      	bne.n	801234c <_printf_common+0x48>
 801233e:	f104 0a19 	add.w	sl, r4, #25
 8012342:	68e3      	ldr	r3, [r4, #12]
 8012344:	6832      	ldr	r2, [r6, #0]
 8012346:	1a9b      	subs	r3, r3, r2
 8012348:	42ab      	cmp	r3, r5
 801234a:	dc26      	bgt.n	801239a <_printf_common+0x96>
 801234c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012350:	6822      	ldr	r2, [r4, #0]
 8012352:	3b00      	subs	r3, #0
 8012354:	bf18      	it	ne
 8012356:	2301      	movne	r3, #1
 8012358:	0692      	lsls	r2, r2, #26
 801235a:	d42b      	bmi.n	80123b4 <_printf_common+0xb0>
 801235c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012360:	4641      	mov	r1, r8
 8012362:	4638      	mov	r0, r7
 8012364:	47c8      	blx	r9
 8012366:	3001      	adds	r0, #1
 8012368:	d01e      	beq.n	80123a8 <_printf_common+0xa4>
 801236a:	6823      	ldr	r3, [r4, #0]
 801236c:	6922      	ldr	r2, [r4, #16]
 801236e:	f003 0306 	and.w	r3, r3, #6
 8012372:	2b04      	cmp	r3, #4
 8012374:	bf02      	ittt	eq
 8012376:	68e5      	ldreq	r5, [r4, #12]
 8012378:	6833      	ldreq	r3, [r6, #0]
 801237a:	1aed      	subeq	r5, r5, r3
 801237c:	68a3      	ldr	r3, [r4, #8]
 801237e:	bf0c      	ite	eq
 8012380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012384:	2500      	movne	r5, #0
 8012386:	4293      	cmp	r3, r2
 8012388:	bfc4      	itt	gt
 801238a:	1a9b      	subgt	r3, r3, r2
 801238c:	18ed      	addgt	r5, r5, r3
 801238e:	2600      	movs	r6, #0
 8012390:	341a      	adds	r4, #26
 8012392:	42b5      	cmp	r5, r6
 8012394:	d11a      	bne.n	80123cc <_printf_common+0xc8>
 8012396:	2000      	movs	r0, #0
 8012398:	e008      	b.n	80123ac <_printf_common+0xa8>
 801239a:	2301      	movs	r3, #1
 801239c:	4652      	mov	r2, sl
 801239e:	4641      	mov	r1, r8
 80123a0:	4638      	mov	r0, r7
 80123a2:	47c8      	blx	r9
 80123a4:	3001      	adds	r0, #1
 80123a6:	d103      	bne.n	80123b0 <_printf_common+0xac>
 80123a8:	f04f 30ff 	mov.w	r0, #4294967295
 80123ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80123b0:	3501      	adds	r5, #1
 80123b2:	e7c6      	b.n	8012342 <_printf_common+0x3e>
 80123b4:	18e1      	adds	r1, r4, r3
 80123b6:	1c5a      	adds	r2, r3, #1
 80123b8:	2030      	movs	r0, #48	@ 0x30
 80123ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80123be:	4422      	add	r2, r4
 80123c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80123c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80123c8:	3302      	adds	r3, #2
 80123ca:	e7c7      	b.n	801235c <_printf_common+0x58>
 80123cc:	2301      	movs	r3, #1
 80123ce:	4622      	mov	r2, r4
 80123d0:	4641      	mov	r1, r8
 80123d2:	4638      	mov	r0, r7
 80123d4:	47c8      	blx	r9
 80123d6:	3001      	adds	r0, #1
 80123d8:	d0e6      	beq.n	80123a8 <_printf_common+0xa4>
 80123da:	3601      	adds	r6, #1
 80123dc:	e7d9      	b.n	8012392 <_printf_common+0x8e>
	...

080123e0 <_printf_i>:
 80123e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80123e4:	7e0f      	ldrb	r7, [r1, #24]
 80123e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80123e8:	2f78      	cmp	r7, #120	@ 0x78
 80123ea:	4691      	mov	r9, r2
 80123ec:	4680      	mov	r8, r0
 80123ee:	460c      	mov	r4, r1
 80123f0:	469a      	mov	sl, r3
 80123f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80123f6:	d807      	bhi.n	8012408 <_printf_i+0x28>
 80123f8:	2f62      	cmp	r7, #98	@ 0x62
 80123fa:	d80a      	bhi.n	8012412 <_printf_i+0x32>
 80123fc:	2f00      	cmp	r7, #0
 80123fe:	f000 80d2 	beq.w	80125a6 <_printf_i+0x1c6>
 8012402:	2f58      	cmp	r7, #88	@ 0x58
 8012404:	f000 80b9 	beq.w	801257a <_printf_i+0x19a>
 8012408:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801240c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012410:	e03a      	b.n	8012488 <_printf_i+0xa8>
 8012412:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012416:	2b15      	cmp	r3, #21
 8012418:	d8f6      	bhi.n	8012408 <_printf_i+0x28>
 801241a:	a101      	add	r1, pc, #4	@ (adr r1, 8012420 <_printf_i+0x40>)
 801241c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012420:	08012479 	.word	0x08012479
 8012424:	0801248d 	.word	0x0801248d
 8012428:	08012409 	.word	0x08012409
 801242c:	08012409 	.word	0x08012409
 8012430:	08012409 	.word	0x08012409
 8012434:	08012409 	.word	0x08012409
 8012438:	0801248d 	.word	0x0801248d
 801243c:	08012409 	.word	0x08012409
 8012440:	08012409 	.word	0x08012409
 8012444:	08012409 	.word	0x08012409
 8012448:	08012409 	.word	0x08012409
 801244c:	0801258d 	.word	0x0801258d
 8012450:	080124b7 	.word	0x080124b7
 8012454:	08012547 	.word	0x08012547
 8012458:	08012409 	.word	0x08012409
 801245c:	08012409 	.word	0x08012409
 8012460:	080125af 	.word	0x080125af
 8012464:	08012409 	.word	0x08012409
 8012468:	080124b7 	.word	0x080124b7
 801246c:	08012409 	.word	0x08012409
 8012470:	08012409 	.word	0x08012409
 8012474:	0801254f 	.word	0x0801254f
 8012478:	6833      	ldr	r3, [r6, #0]
 801247a:	1d1a      	adds	r2, r3, #4
 801247c:	681b      	ldr	r3, [r3, #0]
 801247e:	6032      	str	r2, [r6, #0]
 8012480:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012484:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012488:	2301      	movs	r3, #1
 801248a:	e09d      	b.n	80125c8 <_printf_i+0x1e8>
 801248c:	6833      	ldr	r3, [r6, #0]
 801248e:	6820      	ldr	r0, [r4, #0]
 8012490:	1d19      	adds	r1, r3, #4
 8012492:	6031      	str	r1, [r6, #0]
 8012494:	0606      	lsls	r6, r0, #24
 8012496:	d501      	bpl.n	801249c <_printf_i+0xbc>
 8012498:	681d      	ldr	r5, [r3, #0]
 801249a:	e003      	b.n	80124a4 <_printf_i+0xc4>
 801249c:	0645      	lsls	r5, r0, #25
 801249e:	d5fb      	bpl.n	8012498 <_printf_i+0xb8>
 80124a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80124a4:	2d00      	cmp	r5, #0
 80124a6:	da03      	bge.n	80124b0 <_printf_i+0xd0>
 80124a8:	232d      	movs	r3, #45	@ 0x2d
 80124aa:	426d      	negs	r5, r5
 80124ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80124b0:	4859      	ldr	r0, [pc, #356]	@ (8012618 <_printf_i+0x238>)
 80124b2:	230a      	movs	r3, #10
 80124b4:	e011      	b.n	80124da <_printf_i+0xfa>
 80124b6:	6821      	ldr	r1, [r4, #0]
 80124b8:	6833      	ldr	r3, [r6, #0]
 80124ba:	0608      	lsls	r0, r1, #24
 80124bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80124c0:	d402      	bmi.n	80124c8 <_printf_i+0xe8>
 80124c2:	0649      	lsls	r1, r1, #25
 80124c4:	bf48      	it	mi
 80124c6:	b2ad      	uxthmi	r5, r5
 80124c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80124ca:	4853      	ldr	r0, [pc, #332]	@ (8012618 <_printf_i+0x238>)
 80124cc:	6033      	str	r3, [r6, #0]
 80124ce:	bf14      	ite	ne
 80124d0:	230a      	movne	r3, #10
 80124d2:	2308      	moveq	r3, #8
 80124d4:	2100      	movs	r1, #0
 80124d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80124da:	6866      	ldr	r6, [r4, #4]
 80124dc:	60a6      	str	r6, [r4, #8]
 80124de:	2e00      	cmp	r6, #0
 80124e0:	bfa2      	ittt	ge
 80124e2:	6821      	ldrge	r1, [r4, #0]
 80124e4:	f021 0104 	bicge.w	r1, r1, #4
 80124e8:	6021      	strge	r1, [r4, #0]
 80124ea:	b90d      	cbnz	r5, 80124f0 <_printf_i+0x110>
 80124ec:	2e00      	cmp	r6, #0
 80124ee:	d04b      	beq.n	8012588 <_printf_i+0x1a8>
 80124f0:	4616      	mov	r6, r2
 80124f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80124f6:	fb03 5711 	mls	r7, r3, r1, r5
 80124fa:	5dc7      	ldrb	r7, [r0, r7]
 80124fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012500:	462f      	mov	r7, r5
 8012502:	42bb      	cmp	r3, r7
 8012504:	460d      	mov	r5, r1
 8012506:	d9f4      	bls.n	80124f2 <_printf_i+0x112>
 8012508:	2b08      	cmp	r3, #8
 801250a:	d10b      	bne.n	8012524 <_printf_i+0x144>
 801250c:	6823      	ldr	r3, [r4, #0]
 801250e:	07df      	lsls	r7, r3, #31
 8012510:	d508      	bpl.n	8012524 <_printf_i+0x144>
 8012512:	6923      	ldr	r3, [r4, #16]
 8012514:	6861      	ldr	r1, [r4, #4]
 8012516:	4299      	cmp	r1, r3
 8012518:	bfde      	ittt	le
 801251a:	2330      	movle	r3, #48	@ 0x30
 801251c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012520:	f106 36ff 	addle.w	r6, r6, #4294967295
 8012524:	1b92      	subs	r2, r2, r6
 8012526:	6122      	str	r2, [r4, #16]
 8012528:	f8cd a000 	str.w	sl, [sp]
 801252c:	464b      	mov	r3, r9
 801252e:	aa03      	add	r2, sp, #12
 8012530:	4621      	mov	r1, r4
 8012532:	4640      	mov	r0, r8
 8012534:	f7ff fee6 	bl	8012304 <_printf_common>
 8012538:	3001      	adds	r0, #1
 801253a:	d14a      	bne.n	80125d2 <_printf_i+0x1f2>
 801253c:	f04f 30ff 	mov.w	r0, #4294967295
 8012540:	b004      	add	sp, #16
 8012542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012546:	6823      	ldr	r3, [r4, #0]
 8012548:	f043 0320 	orr.w	r3, r3, #32
 801254c:	6023      	str	r3, [r4, #0]
 801254e:	4833      	ldr	r0, [pc, #204]	@ (801261c <_printf_i+0x23c>)
 8012550:	2778      	movs	r7, #120	@ 0x78
 8012552:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012556:	6823      	ldr	r3, [r4, #0]
 8012558:	6831      	ldr	r1, [r6, #0]
 801255a:	061f      	lsls	r7, r3, #24
 801255c:	f851 5b04 	ldr.w	r5, [r1], #4
 8012560:	d402      	bmi.n	8012568 <_printf_i+0x188>
 8012562:	065f      	lsls	r7, r3, #25
 8012564:	bf48      	it	mi
 8012566:	b2ad      	uxthmi	r5, r5
 8012568:	6031      	str	r1, [r6, #0]
 801256a:	07d9      	lsls	r1, r3, #31
 801256c:	bf44      	itt	mi
 801256e:	f043 0320 	orrmi.w	r3, r3, #32
 8012572:	6023      	strmi	r3, [r4, #0]
 8012574:	b11d      	cbz	r5, 801257e <_printf_i+0x19e>
 8012576:	2310      	movs	r3, #16
 8012578:	e7ac      	b.n	80124d4 <_printf_i+0xf4>
 801257a:	4827      	ldr	r0, [pc, #156]	@ (8012618 <_printf_i+0x238>)
 801257c:	e7e9      	b.n	8012552 <_printf_i+0x172>
 801257e:	6823      	ldr	r3, [r4, #0]
 8012580:	f023 0320 	bic.w	r3, r3, #32
 8012584:	6023      	str	r3, [r4, #0]
 8012586:	e7f6      	b.n	8012576 <_printf_i+0x196>
 8012588:	4616      	mov	r6, r2
 801258a:	e7bd      	b.n	8012508 <_printf_i+0x128>
 801258c:	6833      	ldr	r3, [r6, #0]
 801258e:	6825      	ldr	r5, [r4, #0]
 8012590:	6961      	ldr	r1, [r4, #20]
 8012592:	1d18      	adds	r0, r3, #4
 8012594:	6030      	str	r0, [r6, #0]
 8012596:	062e      	lsls	r6, r5, #24
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	d501      	bpl.n	80125a0 <_printf_i+0x1c0>
 801259c:	6019      	str	r1, [r3, #0]
 801259e:	e002      	b.n	80125a6 <_printf_i+0x1c6>
 80125a0:	0668      	lsls	r0, r5, #25
 80125a2:	d5fb      	bpl.n	801259c <_printf_i+0x1bc>
 80125a4:	8019      	strh	r1, [r3, #0]
 80125a6:	2300      	movs	r3, #0
 80125a8:	6123      	str	r3, [r4, #16]
 80125aa:	4616      	mov	r6, r2
 80125ac:	e7bc      	b.n	8012528 <_printf_i+0x148>
 80125ae:	6833      	ldr	r3, [r6, #0]
 80125b0:	1d1a      	adds	r2, r3, #4
 80125b2:	6032      	str	r2, [r6, #0]
 80125b4:	681e      	ldr	r6, [r3, #0]
 80125b6:	6862      	ldr	r2, [r4, #4]
 80125b8:	2100      	movs	r1, #0
 80125ba:	4630      	mov	r0, r6
 80125bc:	f7ed fe90 	bl	80002e0 <memchr>
 80125c0:	b108      	cbz	r0, 80125c6 <_printf_i+0x1e6>
 80125c2:	1b80      	subs	r0, r0, r6
 80125c4:	6060      	str	r0, [r4, #4]
 80125c6:	6863      	ldr	r3, [r4, #4]
 80125c8:	6123      	str	r3, [r4, #16]
 80125ca:	2300      	movs	r3, #0
 80125cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80125d0:	e7aa      	b.n	8012528 <_printf_i+0x148>
 80125d2:	6923      	ldr	r3, [r4, #16]
 80125d4:	4632      	mov	r2, r6
 80125d6:	4649      	mov	r1, r9
 80125d8:	4640      	mov	r0, r8
 80125da:	47d0      	blx	sl
 80125dc:	3001      	adds	r0, #1
 80125de:	d0ad      	beq.n	801253c <_printf_i+0x15c>
 80125e0:	6823      	ldr	r3, [r4, #0]
 80125e2:	079b      	lsls	r3, r3, #30
 80125e4:	d413      	bmi.n	801260e <_printf_i+0x22e>
 80125e6:	68e0      	ldr	r0, [r4, #12]
 80125e8:	9b03      	ldr	r3, [sp, #12]
 80125ea:	4298      	cmp	r0, r3
 80125ec:	bfb8      	it	lt
 80125ee:	4618      	movlt	r0, r3
 80125f0:	e7a6      	b.n	8012540 <_printf_i+0x160>
 80125f2:	2301      	movs	r3, #1
 80125f4:	4632      	mov	r2, r6
 80125f6:	4649      	mov	r1, r9
 80125f8:	4640      	mov	r0, r8
 80125fa:	47d0      	blx	sl
 80125fc:	3001      	adds	r0, #1
 80125fe:	d09d      	beq.n	801253c <_printf_i+0x15c>
 8012600:	3501      	adds	r5, #1
 8012602:	68e3      	ldr	r3, [r4, #12]
 8012604:	9903      	ldr	r1, [sp, #12]
 8012606:	1a5b      	subs	r3, r3, r1
 8012608:	42ab      	cmp	r3, r5
 801260a:	dcf2      	bgt.n	80125f2 <_printf_i+0x212>
 801260c:	e7eb      	b.n	80125e6 <_printf_i+0x206>
 801260e:	2500      	movs	r5, #0
 8012610:	f104 0619 	add.w	r6, r4, #25
 8012614:	e7f5      	b.n	8012602 <_printf_i+0x222>
 8012616:	bf00      	nop
 8012618:	08014a72 	.word	0x08014a72
 801261c:	08014a83 	.word	0x08014a83

08012620 <std>:
 8012620:	2300      	movs	r3, #0
 8012622:	b510      	push	{r4, lr}
 8012624:	4604      	mov	r4, r0
 8012626:	e9c0 3300 	strd	r3, r3, [r0]
 801262a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801262e:	6083      	str	r3, [r0, #8]
 8012630:	8181      	strh	r1, [r0, #12]
 8012632:	6643      	str	r3, [r0, #100]	@ 0x64
 8012634:	81c2      	strh	r2, [r0, #14]
 8012636:	6183      	str	r3, [r0, #24]
 8012638:	4619      	mov	r1, r3
 801263a:	2208      	movs	r2, #8
 801263c:	305c      	adds	r0, #92	@ 0x5c
 801263e:	f000 f914 	bl	801286a <memset>
 8012642:	4b0d      	ldr	r3, [pc, #52]	@ (8012678 <std+0x58>)
 8012644:	6263      	str	r3, [r4, #36]	@ 0x24
 8012646:	4b0d      	ldr	r3, [pc, #52]	@ (801267c <std+0x5c>)
 8012648:	62a3      	str	r3, [r4, #40]	@ 0x28
 801264a:	4b0d      	ldr	r3, [pc, #52]	@ (8012680 <std+0x60>)
 801264c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801264e:	4b0d      	ldr	r3, [pc, #52]	@ (8012684 <std+0x64>)
 8012650:	6323      	str	r3, [r4, #48]	@ 0x30
 8012652:	4b0d      	ldr	r3, [pc, #52]	@ (8012688 <std+0x68>)
 8012654:	6224      	str	r4, [r4, #32]
 8012656:	429c      	cmp	r4, r3
 8012658:	d006      	beq.n	8012668 <std+0x48>
 801265a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801265e:	4294      	cmp	r4, r2
 8012660:	d002      	beq.n	8012668 <std+0x48>
 8012662:	33d0      	adds	r3, #208	@ 0xd0
 8012664:	429c      	cmp	r4, r3
 8012666:	d105      	bne.n	8012674 <std+0x54>
 8012668:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801266c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012670:	f000 b978 	b.w	8012964 <__retarget_lock_init_recursive>
 8012674:	bd10      	pop	{r4, pc}
 8012676:	bf00      	nop
 8012678:	080127e5 	.word	0x080127e5
 801267c:	08012807 	.word	0x08012807
 8012680:	0801283f 	.word	0x0801283f
 8012684:	08012863 	.word	0x08012863
 8012688:	240025ec 	.word	0x240025ec

0801268c <stdio_exit_handler>:
 801268c:	4a02      	ldr	r2, [pc, #8]	@ (8012698 <stdio_exit_handler+0xc>)
 801268e:	4903      	ldr	r1, [pc, #12]	@ (801269c <stdio_exit_handler+0x10>)
 8012690:	4803      	ldr	r0, [pc, #12]	@ (80126a0 <stdio_exit_handler+0x14>)
 8012692:	f000 b869 	b.w	8012768 <_fwalk_sglue>
 8012696:	bf00      	nop
 8012698:	24000128 	.word	0x24000128
 801269c:	080141e9 	.word	0x080141e9
 80126a0:	24000138 	.word	0x24000138

080126a4 <cleanup_stdio>:
 80126a4:	6841      	ldr	r1, [r0, #4]
 80126a6:	4b0c      	ldr	r3, [pc, #48]	@ (80126d8 <cleanup_stdio+0x34>)
 80126a8:	4299      	cmp	r1, r3
 80126aa:	b510      	push	{r4, lr}
 80126ac:	4604      	mov	r4, r0
 80126ae:	d001      	beq.n	80126b4 <cleanup_stdio+0x10>
 80126b0:	f001 fd9a 	bl	80141e8 <_fflush_r>
 80126b4:	68a1      	ldr	r1, [r4, #8]
 80126b6:	4b09      	ldr	r3, [pc, #36]	@ (80126dc <cleanup_stdio+0x38>)
 80126b8:	4299      	cmp	r1, r3
 80126ba:	d002      	beq.n	80126c2 <cleanup_stdio+0x1e>
 80126bc:	4620      	mov	r0, r4
 80126be:	f001 fd93 	bl	80141e8 <_fflush_r>
 80126c2:	68e1      	ldr	r1, [r4, #12]
 80126c4:	4b06      	ldr	r3, [pc, #24]	@ (80126e0 <cleanup_stdio+0x3c>)
 80126c6:	4299      	cmp	r1, r3
 80126c8:	d004      	beq.n	80126d4 <cleanup_stdio+0x30>
 80126ca:	4620      	mov	r0, r4
 80126cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80126d0:	f001 bd8a 	b.w	80141e8 <_fflush_r>
 80126d4:	bd10      	pop	{r4, pc}
 80126d6:	bf00      	nop
 80126d8:	240025ec 	.word	0x240025ec
 80126dc:	24002654 	.word	0x24002654
 80126e0:	240026bc 	.word	0x240026bc

080126e4 <global_stdio_init.part.0>:
 80126e4:	b510      	push	{r4, lr}
 80126e6:	4b0b      	ldr	r3, [pc, #44]	@ (8012714 <global_stdio_init.part.0+0x30>)
 80126e8:	4c0b      	ldr	r4, [pc, #44]	@ (8012718 <global_stdio_init.part.0+0x34>)
 80126ea:	4a0c      	ldr	r2, [pc, #48]	@ (801271c <global_stdio_init.part.0+0x38>)
 80126ec:	601a      	str	r2, [r3, #0]
 80126ee:	4620      	mov	r0, r4
 80126f0:	2200      	movs	r2, #0
 80126f2:	2104      	movs	r1, #4
 80126f4:	f7ff ff94 	bl	8012620 <std>
 80126f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80126fc:	2201      	movs	r2, #1
 80126fe:	2109      	movs	r1, #9
 8012700:	f7ff ff8e 	bl	8012620 <std>
 8012704:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012708:	2202      	movs	r2, #2
 801270a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801270e:	2112      	movs	r1, #18
 8012710:	f7ff bf86 	b.w	8012620 <std>
 8012714:	24002724 	.word	0x24002724
 8012718:	240025ec 	.word	0x240025ec
 801271c:	0801268d 	.word	0x0801268d

08012720 <__sfp_lock_acquire>:
 8012720:	4801      	ldr	r0, [pc, #4]	@ (8012728 <__sfp_lock_acquire+0x8>)
 8012722:	f000 b920 	b.w	8012966 <__retarget_lock_acquire_recursive>
 8012726:	bf00      	nop
 8012728:	2400272d 	.word	0x2400272d

0801272c <__sfp_lock_release>:
 801272c:	4801      	ldr	r0, [pc, #4]	@ (8012734 <__sfp_lock_release+0x8>)
 801272e:	f000 b91b 	b.w	8012968 <__retarget_lock_release_recursive>
 8012732:	bf00      	nop
 8012734:	2400272d 	.word	0x2400272d

08012738 <__sinit>:
 8012738:	b510      	push	{r4, lr}
 801273a:	4604      	mov	r4, r0
 801273c:	f7ff fff0 	bl	8012720 <__sfp_lock_acquire>
 8012740:	6a23      	ldr	r3, [r4, #32]
 8012742:	b11b      	cbz	r3, 801274c <__sinit+0x14>
 8012744:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012748:	f7ff bff0 	b.w	801272c <__sfp_lock_release>
 801274c:	4b04      	ldr	r3, [pc, #16]	@ (8012760 <__sinit+0x28>)
 801274e:	6223      	str	r3, [r4, #32]
 8012750:	4b04      	ldr	r3, [pc, #16]	@ (8012764 <__sinit+0x2c>)
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	2b00      	cmp	r3, #0
 8012756:	d1f5      	bne.n	8012744 <__sinit+0xc>
 8012758:	f7ff ffc4 	bl	80126e4 <global_stdio_init.part.0>
 801275c:	e7f2      	b.n	8012744 <__sinit+0xc>
 801275e:	bf00      	nop
 8012760:	080126a5 	.word	0x080126a5
 8012764:	24002724 	.word	0x24002724

08012768 <_fwalk_sglue>:
 8012768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801276c:	4607      	mov	r7, r0
 801276e:	4688      	mov	r8, r1
 8012770:	4614      	mov	r4, r2
 8012772:	2600      	movs	r6, #0
 8012774:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012778:	f1b9 0901 	subs.w	r9, r9, #1
 801277c:	d505      	bpl.n	801278a <_fwalk_sglue+0x22>
 801277e:	6824      	ldr	r4, [r4, #0]
 8012780:	2c00      	cmp	r4, #0
 8012782:	d1f7      	bne.n	8012774 <_fwalk_sglue+0xc>
 8012784:	4630      	mov	r0, r6
 8012786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801278a:	89ab      	ldrh	r3, [r5, #12]
 801278c:	2b01      	cmp	r3, #1
 801278e:	d907      	bls.n	80127a0 <_fwalk_sglue+0x38>
 8012790:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012794:	3301      	adds	r3, #1
 8012796:	d003      	beq.n	80127a0 <_fwalk_sglue+0x38>
 8012798:	4629      	mov	r1, r5
 801279a:	4638      	mov	r0, r7
 801279c:	47c0      	blx	r8
 801279e:	4306      	orrs	r6, r0
 80127a0:	3568      	adds	r5, #104	@ 0x68
 80127a2:	e7e9      	b.n	8012778 <_fwalk_sglue+0x10>

080127a4 <siprintf>:
 80127a4:	b40e      	push	{r1, r2, r3}
 80127a6:	b500      	push	{lr}
 80127a8:	b09c      	sub	sp, #112	@ 0x70
 80127aa:	ab1d      	add	r3, sp, #116	@ 0x74
 80127ac:	9002      	str	r0, [sp, #8]
 80127ae:	9006      	str	r0, [sp, #24]
 80127b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80127b4:	4809      	ldr	r0, [pc, #36]	@ (80127dc <siprintf+0x38>)
 80127b6:	9107      	str	r1, [sp, #28]
 80127b8:	9104      	str	r1, [sp, #16]
 80127ba:	4909      	ldr	r1, [pc, #36]	@ (80127e0 <siprintf+0x3c>)
 80127bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80127c0:	9105      	str	r1, [sp, #20]
 80127c2:	6800      	ldr	r0, [r0, #0]
 80127c4:	9301      	str	r3, [sp, #4]
 80127c6:	a902      	add	r1, sp, #8
 80127c8:	f001 fb8e 	bl	8013ee8 <_svfiprintf_r>
 80127cc:	9b02      	ldr	r3, [sp, #8]
 80127ce:	2200      	movs	r2, #0
 80127d0:	701a      	strb	r2, [r3, #0]
 80127d2:	b01c      	add	sp, #112	@ 0x70
 80127d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80127d8:	b003      	add	sp, #12
 80127da:	4770      	bx	lr
 80127dc:	24000134 	.word	0x24000134
 80127e0:	ffff0208 	.word	0xffff0208

080127e4 <__sread>:
 80127e4:	b510      	push	{r4, lr}
 80127e6:	460c      	mov	r4, r1
 80127e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80127ec:	f000 f86c 	bl	80128c8 <_read_r>
 80127f0:	2800      	cmp	r0, #0
 80127f2:	bfab      	itete	ge
 80127f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80127f6:	89a3      	ldrhlt	r3, [r4, #12]
 80127f8:	181b      	addge	r3, r3, r0
 80127fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80127fe:	bfac      	ite	ge
 8012800:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012802:	81a3      	strhlt	r3, [r4, #12]
 8012804:	bd10      	pop	{r4, pc}

08012806 <__swrite>:
 8012806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801280a:	461f      	mov	r7, r3
 801280c:	898b      	ldrh	r3, [r1, #12]
 801280e:	05db      	lsls	r3, r3, #23
 8012810:	4605      	mov	r5, r0
 8012812:	460c      	mov	r4, r1
 8012814:	4616      	mov	r6, r2
 8012816:	d505      	bpl.n	8012824 <__swrite+0x1e>
 8012818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801281c:	2302      	movs	r3, #2
 801281e:	2200      	movs	r2, #0
 8012820:	f000 f840 	bl	80128a4 <_lseek_r>
 8012824:	89a3      	ldrh	r3, [r4, #12]
 8012826:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801282a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801282e:	81a3      	strh	r3, [r4, #12]
 8012830:	4632      	mov	r2, r6
 8012832:	463b      	mov	r3, r7
 8012834:	4628      	mov	r0, r5
 8012836:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801283a:	f000 b857 	b.w	80128ec <_write_r>

0801283e <__sseek>:
 801283e:	b510      	push	{r4, lr}
 8012840:	460c      	mov	r4, r1
 8012842:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012846:	f000 f82d 	bl	80128a4 <_lseek_r>
 801284a:	1c43      	adds	r3, r0, #1
 801284c:	89a3      	ldrh	r3, [r4, #12]
 801284e:	bf15      	itete	ne
 8012850:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012852:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012856:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801285a:	81a3      	strheq	r3, [r4, #12]
 801285c:	bf18      	it	ne
 801285e:	81a3      	strhne	r3, [r4, #12]
 8012860:	bd10      	pop	{r4, pc}

08012862 <__sclose>:
 8012862:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012866:	f000 b80d 	b.w	8012884 <_close_r>

0801286a <memset>:
 801286a:	4402      	add	r2, r0
 801286c:	4603      	mov	r3, r0
 801286e:	4293      	cmp	r3, r2
 8012870:	d100      	bne.n	8012874 <memset+0xa>
 8012872:	4770      	bx	lr
 8012874:	f803 1b01 	strb.w	r1, [r3], #1
 8012878:	e7f9      	b.n	801286e <memset+0x4>
	...

0801287c <_localeconv_r>:
 801287c:	4800      	ldr	r0, [pc, #0]	@ (8012880 <_localeconv_r+0x4>)
 801287e:	4770      	bx	lr
 8012880:	24000274 	.word	0x24000274

08012884 <_close_r>:
 8012884:	b538      	push	{r3, r4, r5, lr}
 8012886:	4d06      	ldr	r5, [pc, #24]	@ (80128a0 <_close_r+0x1c>)
 8012888:	2300      	movs	r3, #0
 801288a:	4604      	mov	r4, r0
 801288c:	4608      	mov	r0, r1
 801288e:	602b      	str	r3, [r5, #0]
 8012890:	f7ef f84c 	bl	800192c <_close>
 8012894:	1c43      	adds	r3, r0, #1
 8012896:	d102      	bne.n	801289e <_close_r+0x1a>
 8012898:	682b      	ldr	r3, [r5, #0]
 801289a:	b103      	cbz	r3, 801289e <_close_r+0x1a>
 801289c:	6023      	str	r3, [r4, #0]
 801289e:	bd38      	pop	{r3, r4, r5, pc}
 80128a0:	24002728 	.word	0x24002728

080128a4 <_lseek_r>:
 80128a4:	b538      	push	{r3, r4, r5, lr}
 80128a6:	4d07      	ldr	r5, [pc, #28]	@ (80128c4 <_lseek_r+0x20>)
 80128a8:	4604      	mov	r4, r0
 80128aa:	4608      	mov	r0, r1
 80128ac:	4611      	mov	r1, r2
 80128ae:	2200      	movs	r2, #0
 80128b0:	602a      	str	r2, [r5, #0]
 80128b2:	461a      	mov	r2, r3
 80128b4:	f7ef f861 	bl	800197a <_lseek>
 80128b8:	1c43      	adds	r3, r0, #1
 80128ba:	d102      	bne.n	80128c2 <_lseek_r+0x1e>
 80128bc:	682b      	ldr	r3, [r5, #0]
 80128be:	b103      	cbz	r3, 80128c2 <_lseek_r+0x1e>
 80128c0:	6023      	str	r3, [r4, #0]
 80128c2:	bd38      	pop	{r3, r4, r5, pc}
 80128c4:	24002728 	.word	0x24002728

080128c8 <_read_r>:
 80128c8:	b538      	push	{r3, r4, r5, lr}
 80128ca:	4d07      	ldr	r5, [pc, #28]	@ (80128e8 <_read_r+0x20>)
 80128cc:	4604      	mov	r4, r0
 80128ce:	4608      	mov	r0, r1
 80128d0:	4611      	mov	r1, r2
 80128d2:	2200      	movs	r2, #0
 80128d4:	602a      	str	r2, [r5, #0]
 80128d6:	461a      	mov	r2, r3
 80128d8:	f7ee ffef 	bl	80018ba <_read>
 80128dc:	1c43      	adds	r3, r0, #1
 80128de:	d102      	bne.n	80128e6 <_read_r+0x1e>
 80128e0:	682b      	ldr	r3, [r5, #0]
 80128e2:	b103      	cbz	r3, 80128e6 <_read_r+0x1e>
 80128e4:	6023      	str	r3, [r4, #0]
 80128e6:	bd38      	pop	{r3, r4, r5, pc}
 80128e8:	24002728 	.word	0x24002728

080128ec <_write_r>:
 80128ec:	b538      	push	{r3, r4, r5, lr}
 80128ee:	4d07      	ldr	r5, [pc, #28]	@ (801290c <_write_r+0x20>)
 80128f0:	4604      	mov	r4, r0
 80128f2:	4608      	mov	r0, r1
 80128f4:	4611      	mov	r1, r2
 80128f6:	2200      	movs	r2, #0
 80128f8:	602a      	str	r2, [r5, #0]
 80128fa:	461a      	mov	r2, r3
 80128fc:	f7ee fffa 	bl	80018f4 <_write>
 8012900:	1c43      	adds	r3, r0, #1
 8012902:	d102      	bne.n	801290a <_write_r+0x1e>
 8012904:	682b      	ldr	r3, [r5, #0]
 8012906:	b103      	cbz	r3, 801290a <_write_r+0x1e>
 8012908:	6023      	str	r3, [r4, #0]
 801290a:	bd38      	pop	{r3, r4, r5, pc}
 801290c:	24002728 	.word	0x24002728

08012910 <__errno>:
 8012910:	4b01      	ldr	r3, [pc, #4]	@ (8012918 <__errno+0x8>)
 8012912:	6818      	ldr	r0, [r3, #0]
 8012914:	4770      	bx	lr
 8012916:	bf00      	nop
 8012918:	24000134 	.word	0x24000134

0801291c <__libc_init_array>:
 801291c:	b570      	push	{r4, r5, r6, lr}
 801291e:	4d0d      	ldr	r5, [pc, #52]	@ (8012954 <__libc_init_array+0x38>)
 8012920:	4c0d      	ldr	r4, [pc, #52]	@ (8012958 <__libc_init_array+0x3c>)
 8012922:	1b64      	subs	r4, r4, r5
 8012924:	10a4      	asrs	r4, r4, #2
 8012926:	2600      	movs	r6, #0
 8012928:	42a6      	cmp	r6, r4
 801292a:	d109      	bne.n	8012940 <__libc_init_array+0x24>
 801292c:	4d0b      	ldr	r5, [pc, #44]	@ (801295c <__libc_init_array+0x40>)
 801292e:	4c0c      	ldr	r4, [pc, #48]	@ (8012960 <__libc_init_array+0x44>)
 8012930:	f002 f838 	bl	80149a4 <_init>
 8012934:	1b64      	subs	r4, r4, r5
 8012936:	10a4      	asrs	r4, r4, #2
 8012938:	2600      	movs	r6, #0
 801293a:	42a6      	cmp	r6, r4
 801293c:	d105      	bne.n	801294a <__libc_init_array+0x2e>
 801293e:	bd70      	pop	{r4, r5, r6, pc}
 8012940:	f855 3b04 	ldr.w	r3, [r5], #4
 8012944:	4798      	blx	r3
 8012946:	3601      	adds	r6, #1
 8012948:	e7ee      	b.n	8012928 <__libc_init_array+0xc>
 801294a:	f855 3b04 	ldr.w	r3, [r5], #4
 801294e:	4798      	blx	r3
 8012950:	3601      	adds	r6, #1
 8012952:	e7f2      	b.n	801293a <__libc_init_array+0x1e>
 8012954:	08014de0 	.word	0x08014de0
 8012958:	08014de0 	.word	0x08014de0
 801295c:	08014de0 	.word	0x08014de0
 8012960:	08014de4 	.word	0x08014de4

08012964 <__retarget_lock_init_recursive>:
 8012964:	4770      	bx	lr

08012966 <__retarget_lock_acquire_recursive>:
 8012966:	4770      	bx	lr

08012968 <__retarget_lock_release_recursive>:
 8012968:	4770      	bx	lr

0801296a <quorem>:
 801296a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801296e:	6903      	ldr	r3, [r0, #16]
 8012970:	690c      	ldr	r4, [r1, #16]
 8012972:	42a3      	cmp	r3, r4
 8012974:	4607      	mov	r7, r0
 8012976:	db7e      	blt.n	8012a76 <quorem+0x10c>
 8012978:	3c01      	subs	r4, #1
 801297a:	f101 0814 	add.w	r8, r1, #20
 801297e:	00a3      	lsls	r3, r4, #2
 8012980:	f100 0514 	add.w	r5, r0, #20
 8012984:	9300      	str	r3, [sp, #0]
 8012986:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801298a:	9301      	str	r3, [sp, #4]
 801298c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012990:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012994:	3301      	adds	r3, #1
 8012996:	429a      	cmp	r2, r3
 8012998:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801299c:	fbb2 f6f3 	udiv	r6, r2, r3
 80129a0:	d32e      	bcc.n	8012a00 <quorem+0x96>
 80129a2:	f04f 0a00 	mov.w	sl, #0
 80129a6:	46c4      	mov	ip, r8
 80129a8:	46ae      	mov	lr, r5
 80129aa:	46d3      	mov	fp, sl
 80129ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 80129b0:	b298      	uxth	r0, r3
 80129b2:	fb06 a000 	mla	r0, r6, r0, sl
 80129b6:	0c02      	lsrs	r2, r0, #16
 80129b8:	0c1b      	lsrs	r3, r3, #16
 80129ba:	fb06 2303 	mla	r3, r6, r3, r2
 80129be:	f8de 2000 	ldr.w	r2, [lr]
 80129c2:	b280      	uxth	r0, r0
 80129c4:	b292      	uxth	r2, r2
 80129c6:	1a12      	subs	r2, r2, r0
 80129c8:	445a      	add	r2, fp
 80129ca:	f8de 0000 	ldr.w	r0, [lr]
 80129ce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80129d2:	b29b      	uxth	r3, r3
 80129d4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80129d8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80129dc:	b292      	uxth	r2, r2
 80129de:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80129e2:	45e1      	cmp	r9, ip
 80129e4:	f84e 2b04 	str.w	r2, [lr], #4
 80129e8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80129ec:	d2de      	bcs.n	80129ac <quorem+0x42>
 80129ee:	9b00      	ldr	r3, [sp, #0]
 80129f0:	58eb      	ldr	r3, [r5, r3]
 80129f2:	b92b      	cbnz	r3, 8012a00 <quorem+0x96>
 80129f4:	9b01      	ldr	r3, [sp, #4]
 80129f6:	3b04      	subs	r3, #4
 80129f8:	429d      	cmp	r5, r3
 80129fa:	461a      	mov	r2, r3
 80129fc:	d32f      	bcc.n	8012a5e <quorem+0xf4>
 80129fe:	613c      	str	r4, [r7, #16]
 8012a00:	4638      	mov	r0, r7
 8012a02:	f001 f90d 	bl	8013c20 <__mcmp>
 8012a06:	2800      	cmp	r0, #0
 8012a08:	db25      	blt.n	8012a56 <quorem+0xec>
 8012a0a:	4629      	mov	r1, r5
 8012a0c:	2000      	movs	r0, #0
 8012a0e:	f858 2b04 	ldr.w	r2, [r8], #4
 8012a12:	f8d1 c000 	ldr.w	ip, [r1]
 8012a16:	fa1f fe82 	uxth.w	lr, r2
 8012a1a:	fa1f f38c 	uxth.w	r3, ip
 8012a1e:	eba3 030e 	sub.w	r3, r3, lr
 8012a22:	4403      	add	r3, r0
 8012a24:	0c12      	lsrs	r2, r2, #16
 8012a26:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012a2a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012a2e:	b29b      	uxth	r3, r3
 8012a30:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012a34:	45c1      	cmp	r9, r8
 8012a36:	f841 3b04 	str.w	r3, [r1], #4
 8012a3a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012a3e:	d2e6      	bcs.n	8012a0e <quorem+0xa4>
 8012a40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012a44:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012a48:	b922      	cbnz	r2, 8012a54 <quorem+0xea>
 8012a4a:	3b04      	subs	r3, #4
 8012a4c:	429d      	cmp	r5, r3
 8012a4e:	461a      	mov	r2, r3
 8012a50:	d30b      	bcc.n	8012a6a <quorem+0x100>
 8012a52:	613c      	str	r4, [r7, #16]
 8012a54:	3601      	adds	r6, #1
 8012a56:	4630      	mov	r0, r6
 8012a58:	b003      	add	sp, #12
 8012a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a5e:	6812      	ldr	r2, [r2, #0]
 8012a60:	3b04      	subs	r3, #4
 8012a62:	2a00      	cmp	r2, #0
 8012a64:	d1cb      	bne.n	80129fe <quorem+0x94>
 8012a66:	3c01      	subs	r4, #1
 8012a68:	e7c6      	b.n	80129f8 <quorem+0x8e>
 8012a6a:	6812      	ldr	r2, [r2, #0]
 8012a6c:	3b04      	subs	r3, #4
 8012a6e:	2a00      	cmp	r2, #0
 8012a70:	d1ef      	bne.n	8012a52 <quorem+0xe8>
 8012a72:	3c01      	subs	r4, #1
 8012a74:	e7ea      	b.n	8012a4c <quorem+0xe2>
 8012a76:	2000      	movs	r0, #0
 8012a78:	e7ee      	b.n	8012a58 <quorem+0xee>
 8012a7a:	0000      	movs	r0, r0
 8012a7c:	0000      	movs	r0, r0
	...

08012a80 <_dtoa_r>:
 8012a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012a84:	ed2d 8b02 	vpush	{d8}
 8012a88:	69c7      	ldr	r7, [r0, #28]
 8012a8a:	b091      	sub	sp, #68	@ 0x44
 8012a8c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012a90:	ec55 4b10 	vmov	r4, r5, d0
 8012a94:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8012a96:	9107      	str	r1, [sp, #28]
 8012a98:	4681      	mov	r9, r0
 8012a9a:	9209      	str	r2, [sp, #36]	@ 0x24
 8012a9c:	930d      	str	r3, [sp, #52]	@ 0x34
 8012a9e:	b97f      	cbnz	r7, 8012ac0 <_dtoa_r+0x40>
 8012aa0:	2010      	movs	r0, #16
 8012aa2:	f000 fd8d 	bl	80135c0 <malloc>
 8012aa6:	4602      	mov	r2, r0
 8012aa8:	f8c9 001c 	str.w	r0, [r9, #28]
 8012aac:	b920      	cbnz	r0, 8012ab8 <_dtoa_r+0x38>
 8012aae:	4ba0      	ldr	r3, [pc, #640]	@ (8012d30 <_dtoa_r+0x2b0>)
 8012ab0:	21ef      	movs	r1, #239	@ 0xef
 8012ab2:	48a0      	ldr	r0, [pc, #640]	@ (8012d34 <_dtoa_r+0x2b4>)
 8012ab4:	f001 fbf8 	bl	80142a8 <__assert_func>
 8012ab8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012abc:	6007      	str	r7, [r0, #0]
 8012abe:	60c7      	str	r7, [r0, #12]
 8012ac0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012ac4:	6819      	ldr	r1, [r3, #0]
 8012ac6:	b159      	cbz	r1, 8012ae0 <_dtoa_r+0x60>
 8012ac8:	685a      	ldr	r2, [r3, #4]
 8012aca:	604a      	str	r2, [r1, #4]
 8012acc:	2301      	movs	r3, #1
 8012ace:	4093      	lsls	r3, r2
 8012ad0:	608b      	str	r3, [r1, #8]
 8012ad2:	4648      	mov	r0, r9
 8012ad4:	f000 fe6a 	bl	80137ac <_Bfree>
 8012ad8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012adc:	2200      	movs	r2, #0
 8012ade:	601a      	str	r2, [r3, #0]
 8012ae0:	1e2b      	subs	r3, r5, #0
 8012ae2:	bfbb      	ittet	lt
 8012ae4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012ae8:	9303      	strlt	r3, [sp, #12]
 8012aea:	2300      	movge	r3, #0
 8012aec:	2201      	movlt	r2, #1
 8012aee:	bfac      	ite	ge
 8012af0:	6033      	strge	r3, [r6, #0]
 8012af2:	6032      	strlt	r2, [r6, #0]
 8012af4:	4b90      	ldr	r3, [pc, #576]	@ (8012d38 <_dtoa_r+0x2b8>)
 8012af6:	9e03      	ldr	r6, [sp, #12]
 8012af8:	43b3      	bics	r3, r6
 8012afa:	d110      	bne.n	8012b1e <_dtoa_r+0x9e>
 8012afc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012afe:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012b02:	6013      	str	r3, [r2, #0]
 8012b04:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8012b08:	4323      	orrs	r3, r4
 8012b0a:	f000 84de 	beq.w	80134ca <_dtoa_r+0xa4a>
 8012b0e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012b10:	4f8a      	ldr	r7, [pc, #552]	@ (8012d3c <_dtoa_r+0x2bc>)
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	f000 84e0 	beq.w	80134d8 <_dtoa_r+0xa58>
 8012b18:	1cfb      	adds	r3, r7, #3
 8012b1a:	f000 bcdb 	b.w	80134d4 <_dtoa_r+0xa54>
 8012b1e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8012b22:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b2a:	d10a      	bne.n	8012b42 <_dtoa_r+0xc2>
 8012b2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012b2e:	2301      	movs	r3, #1
 8012b30:	6013      	str	r3, [r2, #0]
 8012b32:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012b34:	b113      	cbz	r3, 8012b3c <_dtoa_r+0xbc>
 8012b36:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012b38:	4b81      	ldr	r3, [pc, #516]	@ (8012d40 <_dtoa_r+0x2c0>)
 8012b3a:	6013      	str	r3, [r2, #0]
 8012b3c:	4f81      	ldr	r7, [pc, #516]	@ (8012d44 <_dtoa_r+0x2c4>)
 8012b3e:	f000 bccb 	b.w	80134d8 <_dtoa_r+0xa58>
 8012b42:	aa0e      	add	r2, sp, #56	@ 0x38
 8012b44:	a90f      	add	r1, sp, #60	@ 0x3c
 8012b46:	4648      	mov	r0, r9
 8012b48:	eeb0 0b48 	vmov.f64	d0, d8
 8012b4c:	f001 f918 	bl	8013d80 <__d2b>
 8012b50:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8012b54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012b56:	9001      	str	r0, [sp, #4]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d045      	beq.n	8012be8 <_dtoa_r+0x168>
 8012b5c:	eeb0 7b48 	vmov.f64	d7, d8
 8012b60:	ee18 1a90 	vmov	r1, s17
 8012b64:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012b68:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8012b6c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8012b70:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8012b74:	2500      	movs	r5, #0
 8012b76:	ee07 1a90 	vmov	s15, r1
 8012b7a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8012b7e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012d18 <_dtoa_r+0x298>
 8012b82:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012b86:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8012d20 <_dtoa_r+0x2a0>
 8012b8a:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012b8e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8012d28 <_dtoa_r+0x2a8>
 8012b92:	ee07 3a90 	vmov	s15, r3
 8012b96:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8012b9a:	eeb0 7b46 	vmov.f64	d7, d6
 8012b9e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8012ba2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012ba6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bae:	ee16 8a90 	vmov	r8, s13
 8012bb2:	d508      	bpl.n	8012bc6 <_dtoa_r+0x146>
 8012bb4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012bb8:	eeb4 6b47 	vcmp.f64	d6, d7
 8012bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bc0:	bf18      	it	ne
 8012bc2:	f108 38ff 	addne.w	r8, r8, #4294967295
 8012bc6:	f1b8 0f16 	cmp.w	r8, #22
 8012bca:	d82b      	bhi.n	8012c24 <_dtoa_r+0x1a4>
 8012bcc:	495e      	ldr	r1, [pc, #376]	@ (8012d48 <_dtoa_r+0x2c8>)
 8012bce:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8012bd2:	ed91 7b00 	vldr	d7, [r1]
 8012bd6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012bde:	d501      	bpl.n	8012be4 <_dtoa_r+0x164>
 8012be0:	f108 38ff 	add.w	r8, r8, #4294967295
 8012be4:	2100      	movs	r1, #0
 8012be6:	e01e      	b.n	8012c26 <_dtoa_r+0x1a6>
 8012be8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012bea:	4413      	add	r3, r2
 8012bec:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8012bf0:	2920      	cmp	r1, #32
 8012bf2:	bfc1      	itttt	gt
 8012bf4:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8012bf8:	408e      	lslgt	r6, r1
 8012bfa:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8012bfe:	fa24 f101 	lsrgt.w	r1, r4, r1
 8012c02:	bfd6      	itet	le
 8012c04:	f1c1 0120 	rsble	r1, r1, #32
 8012c08:	4331      	orrgt	r1, r6
 8012c0a:	fa04 f101 	lslle.w	r1, r4, r1
 8012c0e:	ee07 1a90 	vmov	s15, r1
 8012c12:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012c16:	3b01      	subs	r3, #1
 8012c18:	ee17 1a90 	vmov	r1, s15
 8012c1c:	2501      	movs	r5, #1
 8012c1e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8012c22:	e7a8      	b.n	8012b76 <_dtoa_r+0xf6>
 8012c24:	2101      	movs	r1, #1
 8012c26:	1ad2      	subs	r2, r2, r3
 8012c28:	1e53      	subs	r3, r2, #1
 8012c2a:	9306      	str	r3, [sp, #24]
 8012c2c:	bf45      	ittet	mi
 8012c2e:	f1c2 0301 	rsbmi	r3, r2, #1
 8012c32:	9305      	strmi	r3, [sp, #20]
 8012c34:	2300      	movpl	r3, #0
 8012c36:	2300      	movmi	r3, #0
 8012c38:	bf4c      	ite	mi
 8012c3a:	9306      	strmi	r3, [sp, #24]
 8012c3c:	9305      	strpl	r3, [sp, #20]
 8012c3e:	f1b8 0f00 	cmp.w	r8, #0
 8012c42:	910c      	str	r1, [sp, #48]	@ 0x30
 8012c44:	db18      	blt.n	8012c78 <_dtoa_r+0x1f8>
 8012c46:	9b06      	ldr	r3, [sp, #24]
 8012c48:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8012c4c:	4443      	add	r3, r8
 8012c4e:	9306      	str	r3, [sp, #24]
 8012c50:	2300      	movs	r3, #0
 8012c52:	9a07      	ldr	r2, [sp, #28]
 8012c54:	2a09      	cmp	r2, #9
 8012c56:	d849      	bhi.n	8012cec <_dtoa_r+0x26c>
 8012c58:	2a05      	cmp	r2, #5
 8012c5a:	bfc4      	itt	gt
 8012c5c:	3a04      	subgt	r2, #4
 8012c5e:	9207      	strgt	r2, [sp, #28]
 8012c60:	9a07      	ldr	r2, [sp, #28]
 8012c62:	f1a2 0202 	sub.w	r2, r2, #2
 8012c66:	bfcc      	ite	gt
 8012c68:	2400      	movgt	r4, #0
 8012c6a:	2401      	movle	r4, #1
 8012c6c:	2a03      	cmp	r2, #3
 8012c6e:	d848      	bhi.n	8012d02 <_dtoa_r+0x282>
 8012c70:	e8df f002 	tbb	[pc, r2]
 8012c74:	3a2c2e0b 	.word	0x3a2c2e0b
 8012c78:	9b05      	ldr	r3, [sp, #20]
 8012c7a:	2200      	movs	r2, #0
 8012c7c:	eba3 0308 	sub.w	r3, r3, r8
 8012c80:	9305      	str	r3, [sp, #20]
 8012c82:	920a      	str	r2, [sp, #40]	@ 0x28
 8012c84:	f1c8 0300 	rsb	r3, r8, #0
 8012c88:	e7e3      	b.n	8012c52 <_dtoa_r+0x1d2>
 8012c8a:	2200      	movs	r2, #0
 8012c8c:	9208      	str	r2, [sp, #32]
 8012c8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012c90:	2a00      	cmp	r2, #0
 8012c92:	dc39      	bgt.n	8012d08 <_dtoa_r+0x288>
 8012c94:	f04f 0b01 	mov.w	fp, #1
 8012c98:	46da      	mov	sl, fp
 8012c9a:	465a      	mov	r2, fp
 8012c9c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8012ca0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8012ca4:	2100      	movs	r1, #0
 8012ca6:	2004      	movs	r0, #4
 8012ca8:	f100 0614 	add.w	r6, r0, #20
 8012cac:	4296      	cmp	r6, r2
 8012cae:	d930      	bls.n	8012d12 <_dtoa_r+0x292>
 8012cb0:	6079      	str	r1, [r7, #4]
 8012cb2:	4648      	mov	r0, r9
 8012cb4:	9304      	str	r3, [sp, #16]
 8012cb6:	f000 fd39 	bl	801372c <_Balloc>
 8012cba:	9b04      	ldr	r3, [sp, #16]
 8012cbc:	4607      	mov	r7, r0
 8012cbe:	2800      	cmp	r0, #0
 8012cc0:	d146      	bne.n	8012d50 <_dtoa_r+0x2d0>
 8012cc2:	4b22      	ldr	r3, [pc, #136]	@ (8012d4c <_dtoa_r+0x2cc>)
 8012cc4:	4602      	mov	r2, r0
 8012cc6:	f240 11af 	movw	r1, #431	@ 0x1af
 8012cca:	e6f2      	b.n	8012ab2 <_dtoa_r+0x32>
 8012ccc:	2201      	movs	r2, #1
 8012cce:	e7dd      	b.n	8012c8c <_dtoa_r+0x20c>
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	9208      	str	r2, [sp, #32]
 8012cd4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012cd6:	eb08 0b02 	add.w	fp, r8, r2
 8012cda:	f10b 0a01 	add.w	sl, fp, #1
 8012cde:	4652      	mov	r2, sl
 8012ce0:	2a01      	cmp	r2, #1
 8012ce2:	bfb8      	it	lt
 8012ce4:	2201      	movlt	r2, #1
 8012ce6:	e7db      	b.n	8012ca0 <_dtoa_r+0x220>
 8012ce8:	2201      	movs	r2, #1
 8012cea:	e7f2      	b.n	8012cd2 <_dtoa_r+0x252>
 8012cec:	2401      	movs	r4, #1
 8012cee:	2200      	movs	r2, #0
 8012cf0:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8012cf4:	f04f 3bff 	mov.w	fp, #4294967295
 8012cf8:	2100      	movs	r1, #0
 8012cfa:	46da      	mov	sl, fp
 8012cfc:	2212      	movs	r2, #18
 8012cfe:	9109      	str	r1, [sp, #36]	@ 0x24
 8012d00:	e7ce      	b.n	8012ca0 <_dtoa_r+0x220>
 8012d02:	2201      	movs	r2, #1
 8012d04:	9208      	str	r2, [sp, #32]
 8012d06:	e7f5      	b.n	8012cf4 <_dtoa_r+0x274>
 8012d08:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8012d0c:	46da      	mov	sl, fp
 8012d0e:	465a      	mov	r2, fp
 8012d10:	e7c6      	b.n	8012ca0 <_dtoa_r+0x220>
 8012d12:	3101      	adds	r1, #1
 8012d14:	0040      	lsls	r0, r0, #1
 8012d16:	e7c7      	b.n	8012ca8 <_dtoa_r+0x228>
 8012d18:	636f4361 	.word	0x636f4361
 8012d1c:	3fd287a7 	.word	0x3fd287a7
 8012d20:	8b60c8b3 	.word	0x8b60c8b3
 8012d24:	3fc68a28 	.word	0x3fc68a28
 8012d28:	509f79fb 	.word	0x509f79fb
 8012d2c:	3fd34413 	.word	0x3fd34413
 8012d30:	08014aa1 	.word	0x08014aa1
 8012d34:	08014ab8 	.word	0x08014ab8
 8012d38:	7ff00000 	.word	0x7ff00000
 8012d3c:	08014a9d 	.word	0x08014a9d
 8012d40:	08014a71 	.word	0x08014a71
 8012d44:	08014a70 	.word	0x08014a70
 8012d48:	08014bb0 	.word	0x08014bb0
 8012d4c:	08014b10 	.word	0x08014b10
 8012d50:	f8d9 201c 	ldr.w	r2, [r9, #28]
 8012d54:	f1ba 0f0e 	cmp.w	sl, #14
 8012d58:	6010      	str	r0, [r2, #0]
 8012d5a:	d86f      	bhi.n	8012e3c <_dtoa_r+0x3bc>
 8012d5c:	2c00      	cmp	r4, #0
 8012d5e:	d06d      	beq.n	8012e3c <_dtoa_r+0x3bc>
 8012d60:	f1b8 0f00 	cmp.w	r8, #0
 8012d64:	f340 80c2 	ble.w	8012eec <_dtoa_r+0x46c>
 8012d68:	4aca      	ldr	r2, [pc, #808]	@ (8013094 <_dtoa_r+0x614>)
 8012d6a:	f008 010f 	and.w	r1, r8, #15
 8012d6e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8012d72:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8012d76:	ed92 7b00 	vldr	d7, [r2]
 8012d7a:	ea4f 1128 	mov.w	r1, r8, asr #4
 8012d7e:	f000 80a9 	beq.w	8012ed4 <_dtoa_r+0x454>
 8012d82:	4ac5      	ldr	r2, [pc, #788]	@ (8013098 <_dtoa_r+0x618>)
 8012d84:	ed92 6b08 	vldr	d6, [r2, #32]
 8012d88:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8012d8c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8012d90:	f001 010f 	and.w	r1, r1, #15
 8012d94:	2203      	movs	r2, #3
 8012d96:	48c0      	ldr	r0, [pc, #768]	@ (8013098 <_dtoa_r+0x618>)
 8012d98:	2900      	cmp	r1, #0
 8012d9a:	f040 809d 	bne.w	8012ed8 <_dtoa_r+0x458>
 8012d9e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012da2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8012da6:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012daa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012dac:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012db0:	2900      	cmp	r1, #0
 8012db2:	f000 80c1 	beq.w	8012f38 <_dtoa_r+0x4b8>
 8012db6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8012dba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012dc2:	f140 80b9 	bpl.w	8012f38 <_dtoa_r+0x4b8>
 8012dc6:	f1ba 0f00 	cmp.w	sl, #0
 8012dca:	f000 80b5 	beq.w	8012f38 <_dtoa_r+0x4b8>
 8012dce:	f1bb 0f00 	cmp.w	fp, #0
 8012dd2:	dd31      	ble.n	8012e38 <_dtoa_r+0x3b8>
 8012dd4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8012dd8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012ddc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012de0:	f108 31ff 	add.w	r1, r8, #4294967295
 8012de4:	9104      	str	r1, [sp, #16]
 8012de6:	3201      	adds	r2, #1
 8012de8:	465c      	mov	r4, fp
 8012dea:	ed9d 6b02 	vldr	d6, [sp, #8]
 8012dee:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8012df2:	ee07 2a90 	vmov	s15, r2
 8012df6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012dfa:	eea7 5b06 	vfma.f64	d5, d7, d6
 8012dfe:	ee15 2a90 	vmov	r2, s11
 8012e02:	ec51 0b15 	vmov	r0, r1, d5
 8012e06:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8012e0a:	2c00      	cmp	r4, #0
 8012e0c:	f040 8098 	bne.w	8012f40 <_dtoa_r+0x4c0>
 8012e10:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8012e14:	ee36 6b47 	vsub.f64	d6, d6, d7
 8012e18:	ec41 0b17 	vmov	d7, r0, r1
 8012e1c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e24:	f300 8261 	bgt.w	80132ea <_dtoa_r+0x86a>
 8012e28:	eeb1 7b47 	vneg.f64	d7, d7
 8012e2c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e34:	f100 80f5 	bmi.w	8013022 <_dtoa_r+0x5a2>
 8012e38:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012e3c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8012e3e:	2a00      	cmp	r2, #0
 8012e40:	f2c0 812c 	blt.w	801309c <_dtoa_r+0x61c>
 8012e44:	f1b8 0f0e 	cmp.w	r8, #14
 8012e48:	f300 8128 	bgt.w	801309c <_dtoa_r+0x61c>
 8012e4c:	4b91      	ldr	r3, [pc, #580]	@ (8013094 <_dtoa_r+0x614>)
 8012e4e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8012e52:	ed93 6b00 	vldr	d6, [r3]
 8012e56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	da03      	bge.n	8012e64 <_dtoa_r+0x3e4>
 8012e5c:	f1ba 0f00 	cmp.w	sl, #0
 8012e60:	f340 80d2 	ble.w	8013008 <_dtoa_r+0x588>
 8012e64:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8012e68:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012e6c:	463e      	mov	r6, r7
 8012e6e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8012e72:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8012e76:	ee15 3a10 	vmov	r3, s10
 8012e7a:	3330      	adds	r3, #48	@ 0x30
 8012e7c:	f806 3b01 	strb.w	r3, [r6], #1
 8012e80:	1bf3      	subs	r3, r6, r7
 8012e82:	459a      	cmp	sl, r3
 8012e84:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8012e88:	eea3 7b46 	vfms.f64	d7, d3, d6
 8012e8c:	f040 80f8 	bne.w	8013080 <_dtoa_r+0x600>
 8012e90:	ee37 7b07 	vadd.f64	d7, d7, d7
 8012e94:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012e98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012e9c:	f300 80dd 	bgt.w	801305a <_dtoa_r+0x5da>
 8012ea0:	eeb4 7b46 	vcmp.f64	d7, d6
 8012ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ea8:	d104      	bne.n	8012eb4 <_dtoa_r+0x434>
 8012eaa:	ee15 3a10 	vmov	r3, s10
 8012eae:	07db      	lsls	r3, r3, #31
 8012eb0:	f100 80d3 	bmi.w	801305a <_dtoa_r+0x5da>
 8012eb4:	9901      	ldr	r1, [sp, #4]
 8012eb6:	4648      	mov	r0, r9
 8012eb8:	f000 fc78 	bl	80137ac <_Bfree>
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012ec0:	7033      	strb	r3, [r6, #0]
 8012ec2:	f108 0301 	add.w	r3, r8, #1
 8012ec6:	6013      	str	r3, [r2, #0]
 8012ec8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	f000 8304 	beq.w	80134d8 <_dtoa_r+0xa58>
 8012ed0:	601e      	str	r6, [r3, #0]
 8012ed2:	e301      	b.n	80134d8 <_dtoa_r+0xa58>
 8012ed4:	2202      	movs	r2, #2
 8012ed6:	e75e      	b.n	8012d96 <_dtoa_r+0x316>
 8012ed8:	07cc      	lsls	r4, r1, #31
 8012eda:	d504      	bpl.n	8012ee6 <_dtoa_r+0x466>
 8012edc:	ed90 6b00 	vldr	d6, [r0]
 8012ee0:	3201      	adds	r2, #1
 8012ee2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012ee6:	1049      	asrs	r1, r1, #1
 8012ee8:	3008      	adds	r0, #8
 8012eea:	e755      	b.n	8012d98 <_dtoa_r+0x318>
 8012eec:	d022      	beq.n	8012f34 <_dtoa_r+0x4b4>
 8012eee:	f1c8 0100 	rsb	r1, r8, #0
 8012ef2:	4a68      	ldr	r2, [pc, #416]	@ (8013094 <_dtoa_r+0x614>)
 8012ef4:	f001 000f 	and.w	r0, r1, #15
 8012ef8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8012efc:	ed92 7b00 	vldr	d7, [r2]
 8012f00:	ee28 7b07 	vmul.f64	d7, d8, d7
 8012f04:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012f08:	4863      	ldr	r0, [pc, #396]	@ (8013098 <_dtoa_r+0x618>)
 8012f0a:	1109      	asrs	r1, r1, #4
 8012f0c:	2400      	movs	r4, #0
 8012f0e:	2202      	movs	r2, #2
 8012f10:	b929      	cbnz	r1, 8012f1e <_dtoa_r+0x49e>
 8012f12:	2c00      	cmp	r4, #0
 8012f14:	f43f af49 	beq.w	8012daa <_dtoa_r+0x32a>
 8012f18:	ed8d 7b02 	vstr	d7, [sp, #8]
 8012f1c:	e745      	b.n	8012daa <_dtoa_r+0x32a>
 8012f1e:	07ce      	lsls	r6, r1, #31
 8012f20:	d505      	bpl.n	8012f2e <_dtoa_r+0x4ae>
 8012f22:	ed90 6b00 	vldr	d6, [r0]
 8012f26:	3201      	adds	r2, #1
 8012f28:	2401      	movs	r4, #1
 8012f2a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8012f2e:	1049      	asrs	r1, r1, #1
 8012f30:	3008      	adds	r0, #8
 8012f32:	e7ed      	b.n	8012f10 <_dtoa_r+0x490>
 8012f34:	2202      	movs	r2, #2
 8012f36:	e738      	b.n	8012daa <_dtoa_r+0x32a>
 8012f38:	f8cd 8010 	str.w	r8, [sp, #16]
 8012f3c:	4654      	mov	r4, sl
 8012f3e:	e754      	b.n	8012dea <_dtoa_r+0x36a>
 8012f40:	4a54      	ldr	r2, [pc, #336]	@ (8013094 <_dtoa_r+0x614>)
 8012f42:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8012f46:	ed12 4b02 	vldr	d4, [r2, #-8]
 8012f4a:	9a08      	ldr	r2, [sp, #32]
 8012f4c:	ec41 0b17 	vmov	d7, r0, r1
 8012f50:	443c      	add	r4, r7
 8012f52:	b34a      	cbz	r2, 8012fa8 <_dtoa_r+0x528>
 8012f54:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8012f58:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8012f5c:	463e      	mov	r6, r7
 8012f5e:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8012f62:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012f66:	ee35 7b47 	vsub.f64	d7, d5, d7
 8012f6a:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012f6e:	ee14 2a90 	vmov	r2, s9
 8012f72:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012f76:	3230      	adds	r2, #48	@ 0x30
 8012f78:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012f7c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8012f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f84:	f806 2b01 	strb.w	r2, [r6], #1
 8012f88:	d438      	bmi.n	8012ffc <_dtoa_r+0x57c>
 8012f8a:	ee32 5b46 	vsub.f64	d5, d2, d6
 8012f8e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8012f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f96:	d462      	bmi.n	801305e <_dtoa_r+0x5de>
 8012f98:	42a6      	cmp	r6, r4
 8012f9a:	f43f af4d 	beq.w	8012e38 <_dtoa_r+0x3b8>
 8012f9e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8012fa2:	ee26 6b03 	vmul.f64	d6, d6, d3
 8012fa6:	e7e0      	b.n	8012f6a <_dtoa_r+0x4ea>
 8012fa8:	4621      	mov	r1, r4
 8012faa:	463e      	mov	r6, r7
 8012fac:	ee27 7b04 	vmul.f64	d7, d7, d4
 8012fb0:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8012fb4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8012fb8:	ee14 2a90 	vmov	r2, s9
 8012fbc:	3230      	adds	r2, #48	@ 0x30
 8012fbe:	f806 2b01 	strb.w	r2, [r6], #1
 8012fc2:	42a6      	cmp	r6, r4
 8012fc4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8012fc8:	ee36 6b45 	vsub.f64	d6, d6, d5
 8012fcc:	d119      	bne.n	8013002 <_dtoa_r+0x582>
 8012fce:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8012fd2:	ee37 4b05 	vadd.f64	d4, d7, d5
 8012fd6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8012fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fde:	dc3e      	bgt.n	801305e <_dtoa_r+0x5de>
 8012fe0:	ee35 5b47 	vsub.f64	d5, d5, d7
 8012fe4:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8012fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fec:	f57f af24 	bpl.w	8012e38 <_dtoa_r+0x3b8>
 8012ff0:	460e      	mov	r6, r1
 8012ff2:	3901      	subs	r1, #1
 8012ff4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8012ff8:	2b30      	cmp	r3, #48	@ 0x30
 8012ffa:	d0f9      	beq.n	8012ff0 <_dtoa_r+0x570>
 8012ffc:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8013000:	e758      	b.n	8012eb4 <_dtoa_r+0x434>
 8013002:	ee26 6b03 	vmul.f64	d6, d6, d3
 8013006:	e7d5      	b.n	8012fb4 <_dtoa_r+0x534>
 8013008:	d10b      	bne.n	8013022 <_dtoa_r+0x5a2>
 801300a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801300e:	ee26 6b07 	vmul.f64	d6, d6, d7
 8013012:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013016:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801301a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801301e:	f2c0 8161 	blt.w	80132e4 <_dtoa_r+0x864>
 8013022:	2400      	movs	r4, #0
 8013024:	4625      	mov	r5, r4
 8013026:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013028:	43db      	mvns	r3, r3
 801302a:	9304      	str	r3, [sp, #16]
 801302c:	463e      	mov	r6, r7
 801302e:	f04f 0800 	mov.w	r8, #0
 8013032:	4621      	mov	r1, r4
 8013034:	4648      	mov	r0, r9
 8013036:	f000 fbb9 	bl	80137ac <_Bfree>
 801303a:	2d00      	cmp	r5, #0
 801303c:	d0de      	beq.n	8012ffc <_dtoa_r+0x57c>
 801303e:	f1b8 0f00 	cmp.w	r8, #0
 8013042:	d005      	beq.n	8013050 <_dtoa_r+0x5d0>
 8013044:	45a8      	cmp	r8, r5
 8013046:	d003      	beq.n	8013050 <_dtoa_r+0x5d0>
 8013048:	4641      	mov	r1, r8
 801304a:	4648      	mov	r0, r9
 801304c:	f000 fbae 	bl	80137ac <_Bfree>
 8013050:	4629      	mov	r1, r5
 8013052:	4648      	mov	r0, r9
 8013054:	f000 fbaa 	bl	80137ac <_Bfree>
 8013058:	e7d0      	b.n	8012ffc <_dtoa_r+0x57c>
 801305a:	f8cd 8010 	str.w	r8, [sp, #16]
 801305e:	4633      	mov	r3, r6
 8013060:	461e      	mov	r6, r3
 8013062:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013066:	2a39      	cmp	r2, #57	@ 0x39
 8013068:	d106      	bne.n	8013078 <_dtoa_r+0x5f8>
 801306a:	429f      	cmp	r7, r3
 801306c:	d1f8      	bne.n	8013060 <_dtoa_r+0x5e0>
 801306e:	9a04      	ldr	r2, [sp, #16]
 8013070:	3201      	adds	r2, #1
 8013072:	9204      	str	r2, [sp, #16]
 8013074:	2230      	movs	r2, #48	@ 0x30
 8013076:	703a      	strb	r2, [r7, #0]
 8013078:	781a      	ldrb	r2, [r3, #0]
 801307a:	3201      	adds	r2, #1
 801307c:	701a      	strb	r2, [r3, #0]
 801307e:	e7bd      	b.n	8012ffc <_dtoa_r+0x57c>
 8013080:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013084:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801308c:	f47f aeef 	bne.w	8012e6e <_dtoa_r+0x3ee>
 8013090:	e710      	b.n	8012eb4 <_dtoa_r+0x434>
 8013092:	bf00      	nop
 8013094:	08014bb0 	.word	0x08014bb0
 8013098:	08014b88 	.word	0x08014b88
 801309c:	9908      	ldr	r1, [sp, #32]
 801309e:	2900      	cmp	r1, #0
 80130a0:	f000 80e3 	beq.w	801326a <_dtoa_r+0x7ea>
 80130a4:	9907      	ldr	r1, [sp, #28]
 80130a6:	2901      	cmp	r1, #1
 80130a8:	f300 80c8 	bgt.w	801323c <_dtoa_r+0x7bc>
 80130ac:	2d00      	cmp	r5, #0
 80130ae:	f000 80c1 	beq.w	8013234 <_dtoa_r+0x7b4>
 80130b2:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80130b6:	9e05      	ldr	r6, [sp, #20]
 80130b8:	461c      	mov	r4, r3
 80130ba:	9304      	str	r3, [sp, #16]
 80130bc:	9b05      	ldr	r3, [sp, #20]
 80130be:	4413      	add	r3, r2
 80130c0:	9305      	str	r3, [sp, #20]
 80130c2:	9b06      	ldr	r3, [sp, #24]
 80130c4:	2101      	movs	r1, #1
 80130c6:	4413      	add	r3, r2
 80130c8:	4648      	mov	r0, r9
 80130ca:	9306      	str	r3, [sp, #24]
 80130cc:	f000 fc22 	bl	8013914 <__i2b>
 80130d0:	9b04      	ldr	r3, [sp, #16]
 80130d2:	4605      	mov	r5, r0
 80130d4:	b166      	cbz	r6, 80130f0 <_dtoa_r+0x670>
 80130d6:	9a06      	ldr	r2, [sp, #24]
 80130d8:	2a00      	cmp	r2, #0
 80130da:	dd09      	ble.n	80130f0 <_dtoa_r+0x670>
 80130dc:	42b2      	cmp	r2, r6
 80130de:	9905      	ldr	r1, [sp, #20]
 80130e0:	bfa8      	it	ge
 80130e2:	4632      	movge	r2, r6
 80130e4:	1a89      	subs	r1, r1, r2
 80130e6:	9105      	str	r1, [sp, #20]
 80130e8:	9906      	ldr	r1, [sp, #24]
 80130ea:	1ab6      	subs	r6, r6, r2
 80130ec:	1a8a      	subs	r2, r1, r2
 80130ee:	9206      	str	r2, [sp, #24]
 80130f0:	b1fb      	cbz	r3, 8013132 <_dtoa_r+0x6b2>
 80130f2:	9a08      	ldr	r2, [sp, #32]
 80130f4:	2a00      	cmp	r2, #0
 80130f6:	f000 80bc 	beq.w	8013272 <_dtoa_r+0x7f2>
 80130fa:	b19c      	cbz	r4, 8013124 <_dtoa_r+0x6a4>
 80130fc:	4629      	mov	r1, r5
 80130fe:	4622      	mov	r2, r4
 8013100:	4648      	mov	r0, r9
 8013102:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013104:	f000 fcc6 	bl	8013a94 <__pow5mult>
 8013108:	9a01      	ldr	r2, [sp, #4]
 801310a:	4601      	mov	r1, r0
 801310c:	4605      	mov	r5, r0
 801310e:	4648      	mov	r0, r9
 8013110:	f000 fc16 	bl	8013940 <__multiply>
 8013114:	9901      	ldr	r1, [sp, #4]
 8013116:	9004      	str	r0, [sp, #16]
 8013118:	4648      	mov	r0, r9
 801311a:	f000 fb47 	bl	80137ac <_Bfree>
 801311e:	9a04      	ldr	r2, [sp, #16]
 8013120:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013122:	9201      	str	r2, [sp, #4]
 8013124:	1b1a      	subs	r2, r3, r4
 8013126:	d004      	beq.n	8013132 <_dtoa_r+0x6b2>
 8013128:	9901      	ldr	r1, [sp, #4]
 801312a:	4648      	mov	r0, r9
 801312c:	f000 fcb2 	bl	8013a94 <__pow5mult>
 8013130:	9001      	str	r0, [sp, #4]
 8013132:	2101      	movs	r1, #1
 8013134:	4648      	mov	r0, r9
 8013136:	f000 fbed 	bl	8013914 <__i2b>
 801313a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801313c:	4604      	mov	r4, r0
 801313e:	2b00      	cmp	r3, #0
 8013140:	f000 81d0 	beq.w	80134e4 <_dtoa_r+0xa64>
 8013144:	461a      	mov	r2, r3
 8013146:	4601      	mov	r1, r0
 8013148:	4648      	mov	r0, r9
 801314a:	f000 fca3 	bl	8013a94 <__pow5mult>
 801314e:	9b07      	ldr	r3, [sp, #28]
 8013150:	2b01      	cmp	r3, #1
 8013152:	4604      	mov	r4, r0
 8013154:	f300 8095 	bgt.w	8013282 <_dtoa_r+0x802>
 8013158:	9b02      	ldr	r3, [sp, #8]
 801315a:	2b00      	cmp	r3, #0
 801315c:	f040 808b 	bne.w	8013276 <_dtoa_r+0x7f6>
 8013160:	9b03      	ldr	r3, [sp, #12]
 8013162:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8013166:	2a00      	cmp	r2, #0
 8013168:	f040 8087 	bne.w	801327a <_dtoa_r+0x7fa>
 801316c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8013170:	0d12      	lsrs	r2, r2, #20
 8013172:	0512      	lsls	r2, r2, #20
 8013174:	2a00      	cmp	r2, #0
 8013176:	f000 8082 	beq.w	801327e <_dtoa_r+0x7fe>
 801317a:	9b05      	ldr	r3, [sp, #20]
 801317c:	3301      	adds	r3, #1
 801317e:	9305      	str	r3, [sp, #20]
 8013180:	9b06      	ldr	r3, [sp, #24]
 8013182:	3301      	adds	r3, #1
 8013184:	9306      	str	r3, [sp, #24]
 8013186:	2301      	movs	r3, #1
 8013188:	930b      	str	r3, [sp, #44]	@ 0x2c
 801318a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801318c:	2b00      	cmp	r3, #0
 801318e:	f000 81af 	beq.w	80134f0 <_dtoa_r+0xa70>
 8013192:	6922      	ldr	r2, [r4, #16]
 8013194:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013198:	6910      	ldr	r0, [r2, #16]
 801319a:	f000 fb6f 	bl	801387c <__hi0bits>
 801319e:	f1c0 0020 	rsb	r0, r0, #32
 80131a2:	9b06      	ldr	r3, [sp, #24]
 80131a4:	4418      	add	r0, r3
 80131a6:	f010 001f 	ands.w	r0, r0, #31
 80131aa:	d076      	beq.n	801329a <_dtoa_r+0x81a>
 80131ac:	f1c0 0220 	rsb	r2, r0, #32
 80131b0:	2a04      	cmp	r2, #4
 80131b2:	dd69      	ble.n	8013288 <_dtoa_r+0x808>
 80131b4:	9b05      	ldr	r3, [sp, #20]
 80131b6:	f1c0 001c 	rsb	r0, r0, #28
 80131ba:	4403      	add	r3, r0
 80131bc:	9305      	str	r3, [sp, #20]
 80131be:	9b06      	ldr	r3, [sp, #24]
 80131c0:	4406      	add	r6, r0
 80131c2:	4403      	add	r3, r0
 80131c4:	9306      	str	r3, [sp, #24]
 80131c6:	9b05      	ldr	r3, [sp, #20]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	dd05      	ble.n	80131d8 <_dtoa_r+0x758>
 80131cc:	9901      	ldr	r1, [sp, #4]
 80131ce:	461a      	mov	r2, r3
 80131d0:	4648      	mov	r0, r9
 80131d2:	f000 fcb9 	bl	8013b48 <__lshift>
 80131d6:	9001      	str	r0, [sp, #4]
 80131d8:	9b06      	ldr	r3, [sp, #24]
 80131da:	2b00      	cmp	r3, #0
 80131dc:	dd05      	ble.n	80131ea <_dtoa_r+0x76a>
 80131de:	4621      	mov	r1, r4
 80131e0:	461a      	mov	r2, r3
 80131e2:	4648      	mov	r0, r9
 80131e4:	f000 fcb0 	bl	8013b48 <__lshift>
 80131e8:	4604      	mov	r4, r0
 80131ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d056      	beq.n	801329e <_dtoa_r+0x81e>
 80131f0:	9801      	ldr	r0, [sp, #4]
 80131f2:	4621      	mov	r1, r4
 80131f4:	f000 fd14 	bl	8013c20 <__mcmp>
 80131f8:	2800      	cmp	r0, #0
 80131fa:	da50      	bge.n	801329e <_dtoa_r+0x81e>
 80131fc:	f108 33ff 	add.w	r3, r8, #4294967295
 8013200:	9304      	str	r3, [sp, #16]
 8013202:	9901      	ldr	r1, [sp, #4]
 8013204:	2300      	movs	r3, #0
 8013206:	220a      	movs	r2, #10
 8013208:	4648      	mov	r0, r9
 801320a:	f000 faf1 	bl	80137f0 <__multadd>
 801320e:	9b08      	ldr	r3, [sp, #32]
 8013210:	9001      	str	r0, [sp, #4]
 8013212:	2b00      	cmp	r3, #0
 8013214:	f000 816e 	beq.w	80134f4 <_dtoa_r+0xa74>
 8013218:	4629      	mov	r1, r5
 801321a:	2300      	movs	r3, #0
 801321c:	220a      	movs	r2, #10
 801321e:	4648      	mov	r0, r9
 8013220:	f000 fae6 	bl	80137f0 <__multadd>
 8013224:	f1bb 0f00 	cmp.w	fp, #0
 8013228:	4605      	mov	r5, r0
 801322a:	dc64      	bgt.n	80132f6 <_dtoa_r+0x876>
 801322c:	9b07      	ldr	r3, [sp, #28]
 801322e:	2b02      	cmp	r3, #2
 8013230:	dc3e      	bgt.n	80132b0 <_dtoa_r+0x830>
 8013232:	e060      	b.n	80132f6 <_dtoa_r+0x876>
 8013234:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013236:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 801323a:	e73c      	b.n	80130b6 <_dtoa_r+0x636>
 801323c:	f10a 34ff 	add.w	r4, sl, #4294967295
 8013240:	42a3      	cmp	r3, r4
 8013242:	bfbf      	itttt	lt
 8013244:	1ae2      	sublt	r2, r4, r3
 8013246:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013248:	189b      	addlt	r3, r3, r2
 801324a:	930a      	strlt	r3, [sp, #40]	@ 0x28
 801324c:	bfae      	itee	ge
 801324e:	1b1c      	subge	r4, r3, r4
 8013250:	4623      	movlt	r3, r4
 8013252:	2400      	movlt	r4, #0
 8013254:	f1ba 0f00 	cmp.w	sl, #0
 8013258:	bfb5      	itete	lt
 801325a:	9a05      	ldrlt	r2, [sp, #20]
 801325c:	9e05      	ldrge	r6, [sp, #20]
 801325e:	eba2 060a 	sublt.w	r6, r2, sl
 8013262:	4652      	movge	r2, sl
 8013264:	bfb8      	it	lt
 8013266:	2200      	movlt	r2, #0
 8013268:	e727      	b.n	80130ba <_dtoa_r+0x63a>
 801326a:	9e05      	ldr	r6, [sp, #20]
 801326c:	9d08      	ldr	r5, [sp, #32]
 801326e:	461c      	mov	r4, r3
 8013270:	e730      	b.n	80130d4 <_dtoa_r+0x654>
 8013272:	461a      	mov	r2, r3
 8013274:	e758      	b.n	8013128 <_dtoa_r+0x6a8>
 8013276:	2300      	movs	r3, #0
 8013278:	e786      	b.n	8013188 <_dtoa_r+0x708>
 801327a:	9b02      	ldr	r3, [sp, #8]
 801327c:	e784      	b.n	8013188 <_dtoa_r+0x708>
 801327e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013280:	e783      	b.n	801318a <_dtoa_r+0x70a>
 8013282:	2300      	movs	r3, #0
 8013284:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013286:	e784      	b.n	8013192 <_dtoa_r+0x712>
 8013288:	d09d      	beq.n	80131c6 <_dtoa_r+0x746>
 801328a:	9b05      	ldr	r3, [sp, #20]
 801328c:	321c      	adds	r2, #28
 801328e:	4413      	add	r3, r2
 8013290:	9305      	str	r3, [sp, #20]
 8013292:	9b06      	ldr	r3, [sp, #24]
 8013294:	4416      	add	r6, r2
 8013296:	4413      	add	r3, r2
 8013298:	e794      	b.n	80131c4 <_dtoa_r+0x744>
 801329a:	4602      	mov	r2, r0
 801329c:	e7f5      	b.n	801328a <_dtoa_r+0x80a>
 801329e:	f1ba 0f00 	cmp.w	sl, #0
 80132a2:	f8cd 8010 	str.w	r8, [sp, #16]
 80132a6:	46d3      	mov	fp, sl
 80132a8:	dc21      	bgt.n	80132ee <_dtoa_r+0x86e>
 80132aa:	9b07      	ldr	r3, [sp, #28]
 80132ac:	2b02      	cmp	r3, #2
 80132ae:	dd1e      	ble.n	80132ee <_dtoa_r+0x86e>
 80132b0:	f1bb 0f00 	cmp.w	fp, #0
 80132b4:	f47f aeb7 	bne.w	8013026 <_dtoa_r+0x5a6>
 80132b8:	4621      	mov	r1, r4
 80132ba:	465b      	mov	r3, fp
 80132bc:	2205      	movs	r2, #5
 80132be:	4648      	mov	r0, r9
 80132c0:	f000 fa96 	bl	80137f0 <__multadd>
 80132c4:	4601      	mov	r1, r0
 80132c6:	4604      	mov	r4, r0
 80132c8:	9801      	ldr	r0, [sp, #4]
 80132ca:	f000 fca9 	bl	8013c20 <__mcmp>
 80132ce:	2800      	cmp	r0, #0
 80132d0:	f77f aea9 	ble.w	8013026 <_dtoa_r+0x5a6>
 80132d4:	463e      	mov	r6, r7
 80132d6:	2331      	movs	r3, #49	@ 0x31
 80132d8:	f806 3b01 	strb.w	r3, [r6], #1
 80132dc:	9b04      	ldr	r3, [sp, #16]
 80132de:	3301      	adds	r3, #1
 80132e0:	9304      	str	r3, [sp, #16]
 80132e2:	e6a4      	b.n	801302e <_dtoa_r+0x5ae>
 80132e4:	f8cd 8010 	str.w	r8, [sp, #16]
 80132e8:	4654      	mov	r4, sl
 80132ea:	4625      	mov	r5, r4
 80132ec:	e7f2      	b.n	80132d4 <_dtoa_r+0x854>
 80132ee:	9b08      	ldr	r3, [sp, #32]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	f000 8103 	beq.w	80134fc <_dtoa_r+0xa7c>
 80132f6:	2e00      	cmp	r6, #0
 80132f8:	dd05      	ble.n	8013306 <_dtoa_r+0x886>
 80132fa:	4629      	mov	r1, r5
 80132fc:	4632      	mov	r2, r6
 80132fe:	4648      	mov	r0, r9
 8013300:	f000 fc22 	bl	8013b48 <__lshift>
 8013304:	4605      	mov	r5, r0
 8013306:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013308:	2b00      	cmp	r3, #0
 801330a:	d058      	beq.n	80133be <_dtoa_r+0x93e>
 801330c:	6869      	ldr	r1, [r5, #4]
 801330e:	4648      	mov	r0, r9
 8013310:	f000 fa0c 	bl	801372c <_Balloc>
 8013314:	4606      	mov	r6, r0
 8013316:	b928      	cbnz	r0, 8013324 <_dtoa_r+0x8a4>
 8013318:	4b82      	ldr	r3, [pc, #520]	@ (8013524 <_dtoa_r+0xaa4>)
 801331a:	4602      	mov	r2, r0
 801331c:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013320:	f7ff bbc7 	b.w	8012ab2 <_dtoa_r+0x32>
 8013324:	692a      	ldr	r2, [r5, #16]
 8013326:	3202      	adds	r2, #2
 8013328:	0092      	lsls	r2, r2, #2
 801332a:	f105 010c 	add.w	r1, r5, #12
 801332e:	300c      	adds	r0, #12
 8013330:	f000 ffac 	bl	801428c <memcpy>
 8013334:	2201      	movs	r2, #1
 8013336:	4631      	mov	r1, r6
 8013338:	4648      	mov	r0, r9
 801333a:	f000 fc05 	bl	8013b48 <__lshift>
 801333e:	1c7b      	adds	r3, r7, #1
 8013340:	9305      	str	r3, [sp, #20]
 8013342:	eb07 030b 	add.w	r3, r7, fp
 8013346:	9309      	str	r3, [sp, #36]	@ 0x24
 8013348:	9b02      	ldr	r3, [sp, #8]
 801334a:	f003 0301 	and.w	r3, r3, #1
 801334e:	46a8      	mov	r8, r5
 8013350:	9308      	str	r3, [sp, #32]
 8013352:	4605      	mov	r5, r0
 8013354:	9b05      	ldr	r3, [sp, #20]
 8013356:	9801      	ldr	r0, [sp, #4]
 8013358:	4621      	mov	r1, r4
 801335a:	f103 3bff 	add.w	fp, r3, #4294967295
 801335e:	f7ff fb04 	bl	801296a <quorem>
 8013362:	4641      	mov	r1, r8
 8013364:	9002      	str	r0, [sp, #8]
 8013366:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801336a:	9801      	ldr	r0, [sp, #4]
 801336c:	f000 fc58 	bl	8013c20 <__mcmp>
 8013370:	462a      	mov	r2, r5
 8013372:	9006      	str	r0, [sp, #24]
 8013374:	4621      	mov	r1, r4
 8013376:	4648      	mov	r0, r9
 8013378:	f000 fc6e 	bl	8013c58 <__mdiff>
 801337c:	68c2      	ldr	r2, [r0, #12]
 801337e:	4606      	mov	r6, r0
 8013380:	b9fa      	cbnz	r2, 80133c2 <_dtoa_r+0x942>
 8013382:	4601      	mov	r1, r0
 8013384:	9801      	ldr	r0, [sp, #4]
 8013386:	f000 fc4b 	bl	8013c20 <__mcmp>
 801338a:	4602      	mov	r2, r0
 801338c:	4631      	mov	r1, r6
 801338e:	4648      	mov	r0, r9
 8013390:	920a      	str	r2, [sp, #40]	@ 0x28
 8013392:	f000 fa0b 	bl	80137ac <_Bfree>
 8013396:	9b07      	ldr	r3, [sp, #28]
 8013398:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801339a:	9e05      	ldr	r6, [sp, #20]
 801339c:	ea43 0102 	orr.w	r1, r3, r2
 80133a0:	9b08      	ldr	r3, [sp, #32]
 80133a2:	4319      	orrs	r1, r3
 80133a4:	d10f      	bne.n	80133c6 <_dtoa_r+0x946>
 80133a6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80133aa:	d028      	beq.n	80133fe <_dtoa_r+0x97e>
 80133ac:	9b06      	ldr	r3, [sp, #24]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	dd02      	ble.n	80133b8 <_dtoa_r+0x938>
 80133b2:	9b02      	ldr	r3, [sp, #8]
 80133b4:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80133b8:	f88b a000 	strb.w	sl, [fp]
 80133bc:	e639      	b.n	8013032 <_dtoa_r+0x5b2>
 80133be:	4628      	mov	r0, r5
 80133c0:	e7bd      	b.n	801333e <_dtoa_r+0x8be>
 80133c2:	2201      	movs	r2, #1
 80133c4:	e7e2      	b.n	801338c <_dtoa_r+0x90c>
 80133c6:	9b06      	ldr	r3, [sp, #24]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	db04      	blt.n	80133d6 <_dtoa_r+0x956>
 80133cc:	9907      	ldr	r1, [sp, #28]
 80133ce:	430b      	orrs	r3, r1
 80133d0:	9908      	ldr	r1, [sp, #32]
 80133d2:	430b      	orrs	r3, r1
 80133d4:	d120      	bne.n	8013418 <_dtoa_r+0x998>
 80133d6:	2a00      	cmp	r2, #0
 80133d8:	ddee      	ble.n	80133b8 <_dtoa_r+0x938>
 80133da:	9901      	ldr	r1, [sp, #4]
 80133dc:	2201      	movs	r2, #1
 80133de:	4648      	mov	r0, r9
 80133e0:	f000 fbb2 	bl	8013b48 <__lshift>
 80133e4:	4621      	mov	r1, r4
 80133e6:	9001      	str	r0, [sp, #4]
 80133e8:	f000 fc1a 	bl	8013c20 <__mcmp>
 80133ec:	2800      	cmp	r0, #0
 80133ee:	dc03      	bgt.n	80133f8 <_dtoa_r+0x978>
 80133f0:	d1e2      	bne.n	80133b8 <_dtoa_r+0x938>
 80133f2:	f01a 0f01 	tst.w	sl, #1
 80133f6:	d0df      	beq.n	80133b8 <_dtoa_r+0x938>
 80133f8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80133fc:	d1d9      	bne.n	80133b2 <_dtoa_r+0x932>
 80133fe:	2339      	movs	r3, #57	@ 0x39
 8013400:	f88b 3000 	strb.w	r3, [fp]
 8013404:	4633      	mov	r3, r6
 8013406:	461e      	mov	r6, r3
 8013408:	3b01      	subs	r3, #1
 801340a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801340e:	2a39      	cmp	r2, #57	@ 0x39
 8013410:	d053      	beq.n	80134ba <_dtoa_r+0xa3a>
 8013412:	3201      	adds	r2, #1
 8013414:	701a      	strb	r2, [r3, #0]
 8013416:	e60c      	b.n	8013032 <_dtoa_r+0x5b2>
 8013418:	2a00      	cmp	r2, #0
 801341a:	dd07      	ble.n	801342c <_dtoa_r+0x9ac>
 801341c:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013420:	d0ed      	beq.n	80133fe <_dtoa_r+0x97e>
 8013422:	f10a 0301 	add.w	r3, sl, #1
 8013426:	f88b 3000 	strb.w	r3, [fp]
 801342a:	e602      	b.n	8013032 <_dtoa_r+0x5b2>
 801342c:	9b05      	ldr	r3, [sp, #20]
 801342e:	9a05      	ldr	r2, [sp, #20]
 8013430:	f803 ac01 	strb.w	sl, [r3, #-1]
 8013434:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013436:	4293      	cmp	r3, r2
 8013438:	d029      	beq.n	801348e <_dtoa_r+0xa0e>
 801343a:	9901      	ldr	r1, [sp, #4]
 801343c:	2300      	movs	r3, #0
 801343e:	220a      	movs	r2, #10
 8013440:	4648      	mov	r0, r9
 8013442:	f000 f9d5 	bl	80137f0 <__multadd>
 8013446:	45a8      	cmp	r8, r5
 8013448:	9001      	str	r0, [sp, #4]
 801344a:	f04f 0300 	mov.w	r3, #0
 801344e:	f04f 020a 	mov.w	r2, #10
 8013452:	4641      	mov	r1, r8
 8013454:	4648      	mov	r0, r9
 8013456:	d107      	bne.n	8013468 <_dtoa_r+0x9e8>
 8013458:	f000 f9ca 	bl	80137f0 <__multadd>
 801345c:	4680      	mov	r8, r0
 801345e:	4605      	mov	r5, r0
 8013460:	9b05      	ldr	r3, [sp, #20]
 8013462:	3301      	adds	r3, #1
 8013464:	9305      	str	r3, [sp, #20]
 8013466:	e775      	b.n	8013354 <_dtoa_r+0x8d4>
 8013468:	f000 f9c2 	bl	80137f0 <__multadd>
 801346c:	4629      	mov	r1, r5
 801346e:	4680      	mov	r8, r0
 8013470:	2300      	movs	r3, #0
 8013472:	220a      	movs	r2, #10
 8013474:	4648      	mov	r0, r9
 8013476:	f000 f9bb 	bl	80137f0 <__multadd>
 801347a:	4605      	mov	r5, r0
 801347c:	e7f0      	b.n	8013460 <_dtoa_r+0x9e0>
 801347e:	f1bb 0f00 	cmp.w	fp, #0
 8013482:	bfcc      	ite	gt
 8013484:	465e      	movgt	r6, fp
 8013486:	2601      	movle	r6, #1
 8013488:	443e      	add	r6, r7
 801348a:	f04f 0800 	mov.w	r8, #0
 801348e:	9901      	ldr	r1, [sp, #4]
 8013490:	2201      	movs	r2, #1
 8013492:	4648      	mov	r0, r9
 8013494:	f000 fb58 	bl	8013b48 <__lshift>
 8013498:	4621      	mov	r1, r4
 801349a:	9001      	str	r0, [sp, #4]
 801349c:	f000 fbc0 	bl	8013c20 <__mcmp>
 80134a0:	2800      	cmp	r0, #0
 80134a2:	dcaf      	bgt.n	8013404 <_dtoa_r+0x984>
 80134a4:	d102      	bne.n	80134ac <_dtoa_r+0xa2c>
 80134a6:	f01a 0f01 	tst.w	sl, #1
 80134aa:	d1ab      	bne.n	8013404 <_dtoa_r+0x984>
 80134ac:	4633      	mov	r3, r6
 80134ae:	461e      	mov	r6, r3
 80134b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80134b4:	2a30      	cmp	r2, #48	@ 0x30
 80134b6:	d0fa      	beq.n	80134ae <_dtoa_r+0xa2e>
 80134b8:	e5bb      	b.n	8013032 <_dtoa_r+0x5b2>
 80134ba:	429f      	cmp	r7, r3
 80134bc:	d1a3      	bne.n	8013406 <_dtoa_r+0x986>
 80134be:	9b04      	ldr	r3, [sp, #16]
 80134c0:	3301      	adds	r3, #1
 80134c2:	9304      	str	r3, [sp, #16]
 80134c4:	2331      	movs	r3, #49	@ 0x31
 80134c6:	703b      	strb	r3, [r7, #0]
 80134c8:	e5b3      	b.n	8013032 <_dtoa_r+0x5b2>
 80134ca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80134cc:	4f16      	ldr	r7, [pc, #88]	@ (8013528 <_dtoa_r+0xaa8>)
 80134ce:	b11b      	cbz	r3, 80134d8 <_dtoa_r+0xa58>
 80134d0:	f107 0308 	add.w	r3, r7, #8
 80134d4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80134d6:	6013      	str	r3, [r2, #0]
 80134d8:	4638      	mov	r0, r7
 80134da:	b011      	add	sp, #68	@ 0x44
 80134dc:	ecbd 8b02 	vpop	{d8}
 80134e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80134e4:	9b07      	ldr	r3, [sp, #28]
 80134e6:	2b01      	cmp	r3, #1
 80134e8:	f77f ae36 	ble.w	8013158 <_dtoa_r+0x6d8>
 80134ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80134ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80134f0:	2001      	movs	r0, #1
 80134f2:	e656      	b.n	80131a2 <_dtoa_r+0x722>
 80134f4:	f1bb 0f00 	cmp.w	fp, #0
 80134f8:	f77f aed7 	ble.w	80132aa <_dtoa_r+0x82a>
 80134fc:	463e      	mov	r6, r7
 80134fe:	9801      	ldr	r0, [sp, #4]
 8013500:	4621      	mov	r1, r4
 8013502:	f7ff fa32 	bl	801296a <quorem>
 8013506:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 801350a:	f806 ab01 	strb.w	sl, [r6], #1
 801350e:	1bf2      	subs	r2, r6, r7
 8013510:	4593      	cmp	fp, r2
 8013512:	ddb4      	ble.n	801347e <_dtoa_r+0x9fe>
 8013514:	9901      	ldr	r1, [sp, #4]
 8013516:	2300      	movs	r3, #0
 8013518:	220a      	movs	r2, #10
 801351a:	4648      	mov	r0, r9
 801351c:	f000 f968 	bl	80137f0 <__multadd>
 8013520:	9001      	str	r0, [sp, #4]
 8013522:	e7ec      	b.n	80134fe <_dtoa_r+0xa7e>
 8013524:	08014b10 	.word	0x08014b10
 8013528:	08014a94 	.word	0x08014a94

0801352c <_free_r>:
 801352c:	b538      	push	{r3, r4, r5, lr}
 801352e:	4605      	mov	r5, r0
 8013530:	2900      	cmp	r1, #0
 8013532:	d041      	beq.n	80135b8 <_free_r+0x8c>
 8013534:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013538:	1f0c      	subs	r4, r1, #4
 801353a:	2b00      	cmp	r3, #0
 801353c:	bfb8      	it	lt
 801353e:	18e4      	addlt	r4, r4, r3
 8013540:	f000 f8e8 	bl	8013714 <__malloc_lock>
 8013544:	4a1d      	ldr	r2, [pc, #116]	@ (80135bc <_free_r+0x90>)
 8013546:	6813      	ldr	r3, [r2, #0]
 8013548:	b933      	cbnz	r3, 8013558 <_free_r+0x2c>
 801354a:	6063      	str	r3, [r4, #4]
 801354c:	6014      	str	r4, [r2, #0]
 801354e:	4628      	mov	r0, r5
 8013550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8013554:	f000 b8e4 	b.w	8013720 <__malloc_unlock>
 8013558:	42a3      	cmp	r3, r4
 801355a:	d908      	bls.n	801356e <_free_r+0x42>
 801355c:	6820      	ldr	r0, [r4, #0]
 801355e:	1821      	adds	r1, r4, r0
 8013560:	428b      	cmp	r3, r1
 8013562:	bf01      	itttt	eq
 8013564:	6819      	ldreq	r1, [r3, #0]
 8013566:	685b      	ldreq	r3, [r3, #4]
 8013568:	1809      	addeq	r1, r1, r0
 801356a:	6021      	streq	r1, [r4, #0]
 801356c:	e7ed      	b.n	801354a <_free_r+0x1e>
 801356e:	461a      	mov	r2, r3
 8013570:	685b      	ldr	r3, [r3, #4]
 8013572:	b10b      	cbz	r3, 8013578 <_free_r+0x4c>
 8013574:	42a3      	cmp	r3, r4
 8013576:	d9fa      	bls.n	801356e <_free_r+0x42>
 8013578:	6811      	ldr	r1, [r2, #0]
 801357a:	1850      	adds	r0, r2, r1
 801357c:	42a0      	cmp	r0, r4
 801357e:	d10b      	bne.n	8013598 <_free_r+0x6c>
 8013580:	6820      	ldr	r0, [r4, #0]
 8013582:	4401      	add	r1, r0
 8013584:	1850      	adds	r0, r2, r1
 8013586:	4283      	cmp	r3, r0
 8013588:	6011      	str	r1, [r2, #0]
 801358a:	d1e0      	bne.n	801354e <_free_r+0x22>
 801358c:	6818      	ldr	r0, [r3, #0]
 801358e:	685b      	ldr	r3, [r3, #4]
 8013590:	6053      	str	r3, [r2, #4]
 8013592:	4408      	add	r0, r1
 8013594:	6010      	str	r0, [r2, #0]
 8013596:	e7da      	b.n	801354e <_free_r+0x22>
 8013598:	d902      	bls.n	80135a0 <_free_r+0x74>
 801359a:	230c      	movs	r3, #12
 801359c:	602b      	str	r3, [r5, #0]
 801359e:	e7d6      	b.n	801354e <_free_r+0x22>
 80135a0:	6820      	ldr	r0, [r4, #0]
 80135a2:	1821      	adds	r1, r4, r0
 80135a4:	428b      	cmp	r3, r1
 80135a6:	bf04      	itt	eq
 80135a8:	6819      	ldreq	r1, [r3, #0]
 80135aa:	685b      	ldreq	r3, [r3, #4]
 80135ac:	6063      	str	r3, [r4, #4]
 80135ae:	bf04      	itt	eq
 80135b0:	1809      	addeq	r1, r1, r0
 80135b2:	6021      	streq	r1, [r4, #0]
 80135b4:	6054      	str	r4, [r2, #4]
 80135b6:	e7ca      	b.n	801354e <_free_r+0x22>
 80135b8:	bd38      	pop	{r3, r4, r5, pc}
 80135ba:	bf00      	nop
 80135bc:	24002734 	.word	0x24002734

080135c0 <malloc>:
 80135c0:	4b02      	ldr	r3, [pc, #8]	@ (80135cc <malloc+0xc>)
 80135c2:	4601      	mov	r1, r0
 80135c4:	6818      	ldr	r0, [r3, #0]
 80135c6:	f000 b825 	b.w	8013614 <_malloc_r>
 80135ca:	bf00      	nop
 80135cc:	24000134 	.word	0x24000134

080135d0 <sbrk_aligned>:
 80135d0:	b570      	push	{r4, r5, r6, lr}
 80135d2:	4e0f      	ldr	r6, [pc, #60]	@ (8013610 <sbrk_aligned+0x40>)
 80135d4:	460c      	mov	r4, r1
 80135d6:	6831      	ldr	r1, [r6, #0]
 80135d8:	4605      	mov	r5, r0
 80135da:	b911      	cbnz	r1, 80135e2 <sbrk_aligned+0x12>
 80135dc:	f000 fe46 	bl	801426c <_sbrk_r>
 80135e0:	6030      	str	r0, [r6, #0]
 80135e2:	4621      	mov	r1, r4
 80135e4:	4628      	mov	r0, r5
 80135e6:	f000 fe41 	bl	801426c <_sbrk_r>
 80135ea:	1c43      	adds	r3, r0, #1
 80135ec:	d103      	bne.n	80135f6 <sbrk_aligned+0x26>
 80135ee:	f04f 34ff 	mov.w	r4, #4294967295
 80135f2:	4620      	mov	r0, r4
 80135f4:	bd70      	pop	{r4, r5, r6, pc}
 80135f6:	1cc4      	adds	r4, r0, #3
 80135f8:	f024 0403 	bic.w	r4, r4, #3
 80135fc:	42a0      	cmp	r0, r4
 80135fe:	d0f8      	beq.n	80135f2 <sbrk_aligned+0x22>
 8013600:	1a21      	subs	r1, r4, r0
 8013602:	4628      	mov	r0, r5
 8013604:	f000 fe32 	bl	801426c <_sbrk_r>
 8013608:	3001      	adds	r0, #1
 801360a:	d1f2      	bne.n	80135f2 <sbrk_aligned+0x22>
 801360c:	e7ef      	b.n	80135ee <sbrk_aligned+0x1e>
 801360e:	bf00      	nop
 8013610:	24002730 	.word	0x24002730

08013614 <_malloc_r>:
 8013614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013618:	1ccd      	adds	r5, r1, #3
 801361a:	f025 0503 	bic.w	r5, r5, #3
 801361e:	3508      	adds	r5, #8
 8013620:	2d0c      	cmp	r5, #12
 8013622:	bf38      	it	cc
 8013624:	250c      	movcc	r5, #12
 8013626:	2d00      	cmp	r5, #0
 8013628:	4606      	mov	r6, r0
 801362a:	db01      	blt.n	8013630 <_malloc_r+0x1c>
 801362c:	42a9      	cmp	r1, r5
 801362e:	d904      	bls.n	801363a <_malloc_r+0x26>
 8013630:	230c      	movs	r3, #12
 8013632:	6033      	str	r3, [r6, #0]
 8013634:	2000      	movs	r0, #0
 8013636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801363a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013710 <_malloc_r+0xfc>
 801363e:	f000 f869 	bl	8013714 <__malloc_lock>
 8013642:	f8d8 3000 	ldr.w	r3, [r8]
 8013646:	461c      	mov	r4, r3
 8013648:	bb44      	cbnz	r4, 801369c <_malloc_r+0x88>
 801364a:	4629      	mov	r1, r5
 801364c:	4630      	mov	r0, r6
 801364e:	f7ff ffbf 	bl	80135d0 <sbrk_aligned>
 8013652:	1c43      	adds	r3, r0, #1
 8013654:	4604      	mov	r4, r0
 8013656:	d158      	bne.n	801370a <_malloc_r+0xf6>
 8013658:	f8d8 4000 	ldr.w	r4, [r8]
 801365c:	4627      	mov	r7, r4
 801365e:	2f00      	cmp	r7, #0
 8013660:	d143      	bne.n	80136ea <_malloc_r+0xd6>
 8013662:	2c00      	cmp	r4, #0
 8013664:	d04b      	beq.n	80136fe <_malloc_r+0xea>
 8013666:	6823      	ldr	r3, [r4, #0]
 8013668:	4639      	mov	r1, r7
 801366a:	4630      	mov	r0, r6
 801366c:	eb04 0903 	add.w	r9, r4, r3
 8013670:	f000 fdfc 	bl	801426c <_sbrk_r>
 8013674:	4581      	cmp	r9, r0
 8013676:	d142      	bne.n	80136fe <_malloc_r+0xea>
 8013678:	6821      	ldr	r1, [r4, #0]
 801367a:	1a6d      	subs	r5, r5, r1
 801367c:	4629      	mov	r1, r5
 801367e:	4630      	mov	r0, r6
 8013680:	f7ff ffa6 	bl	80135d0 <sbrk_aligned>
 8013684:	3001      	adds	r0, #1
 8013686:	d03a      	beq.n	80136fe <_malloc_r+0xea>
 8013688:	6823      	ldr	r3, [r4, #0]
 801368a:	442b      	add	r3, r5
 801368c:	6023      	str	r3, [r4, #0]
 801368e:	f8d8 3000 	ldr.w	r3, [r8]
 8013692:	685a      	ldr	r2, [r3, #4]
 8013694:	bb62      	cbnz	r2, 80136f0 <_malloc_r+0xdc>
 8013696:	f8c8 7000 	str.w	r7, [r8]
 801369a:	e00f      	b.n	80136bc <_malloc_r+0xa8>
 801369c:	6822      	ldr	r2, [r4, #0]
 801369e:	1b52      	subs	r2, r2, r5
 80136a0:	d420      	bmi.n	80136e4 <_malloc_r+0xd0>
 80136a2:	2a0b      	cmp	r2, #11
 80136a4:	d917      	bls.n	80136d6 <_malloc_r+0xc2>
 80136a6:	1961      	adds	r1, r4, r5
 80136a8:	42a3      	cmp	r3, r4
 80136aa:	6025      	str	r5, [r4, #0]
 80136ac:	bf18      	it	ne
 80136ae:	6059      	strne	r1, [r3, #4]
 80136b0:	6863      	ldr	r3, [r4, #4]
 80136b2:	bf08      	it	eq
 80136b4:	f8c8 1000 	streq.w	r1, [r8]
 80136b8:	5162      	str	r2, [r4, r5]
 80136ba:	604b      	str	r3, [r1, #4]
 80136bc:	4630      	mov	r0, r6
 80136be:	f000 f82f 	bl	8013720 <__malloc_unlock>
 80136c2:	f104 000b 	add.w	r0, r4, #11
 80136c6:	1d23      	adds	r3, r4, #4
 80136c8:	f020 0007 	bic.w	r0, r0, #7
 80136cc:	1ac2      	subs	r2, r0, r3
 80136ce:	bf1c      	itt	ne
 80136d0:	1a1b      	subne	r3, r3, r0
 80136d2:	50a3      	strne	r3, [r4, r2]
 80136d4:	e7af      	b.n	8013636 <_malloc_r+0x22>
 80136d6:	6862      	ldr	r2, [r4, #4]
 80136d8:	42a3      	cmp	r3, r4
 80136da:	bf0c      	ite	eq
 80136dc:	f8c8 2000 	streq.w	r2, [r8]
 80136e0:	605a      	strne	r2, [r3, #4]
 80136e2:	e7eb      	b.n	80136bc <_malloc_r+0xa8>
 80136e4:	4623      	mov	r3, r4
 80136e6:	6864      	ldr	r4, [r4, #4]
 80136e8:	e7ae      	b.n	8013648 <_malloc_r+0x34>
 80136ea:	463c      	mov	r4, r7
 80136ec:	687f      	ldr	r7, [r7, #4]
 80136ee:	e7b6      	b.n	801365e <_malloc_r+0x4a>
 80136f0:	461a      	mov	r2, r3
 80136f2:	685b      	ldr	r3, [r3, #4]
 80136f4:	42a3      	cmp	r3, r4
 80136f6:	d1fb      	bne.n	80136f0 <_malloc_r+0xdc>
 80136f8:	2300      	movs	r3, #0
 80136fa:	6053      	str	r3, [r2, #4]
 80136fc:	e7de      	b.n	80136bc <_malloc_r+0xa8>
 80136fe:	230c      	movs	r3, #12
 8013700:	6033      	str	r3, [r6, #0]
 8013702:	4630      	mov	r0, r6
 8013704:	f000 f80c 	bl	8013720 <__malloc_unlock>
 8013708:	e794      	b.n	8013634 <_malloc_r+0x20>
 801370a:	6005      	str	r5, [r0, #0]
 801370c:	e7d6      	b.n	80136bc <_malloc_r+0xa8>
 801370e:	bf00      	nop
 8013710:	24002734 	.word	0x24002734

08013714 <__malloc_lock>:
 8013714:	4801      	ldr	r0, [pc, #4]	@ (801371c <__malloc_lock+0x8>)
 8013716:	f7ff b926 	b.w	8012966 <__retarget_lock_acquire_recursive>
 801371a:	bf00      	nop
 801371c:	2400272c 	.word	0x2400272c

08013720 <__malloc_unlock>:
 8013720:	4801      	ldr	r0, [pc, #4]	@ (8013728 <__malloc_unlock+0x8>)
 8013722:	f7ff b921 	b.w	8012968 <__retarget_lock_release_recursive>
 8013726:	bf00      	nop
 8013728:	2400272c 	.word	0x2400272c

0801372c <_Balloc>:
 801372c:	b570      	push	{r4, r5, r6, lr}
 801372e:	69c6      	ldr	r6, [r0, #28]
 8013730:	4604      	mov	r4, r0
 8013732:	460d      	mov	r5, r1
 8013734:	b976      	cbnz	r6, 8013754 <_Balloc+0x28>
 8013736:	2010      	movs	r0, #16
 8013738:	f7ff ff42 	bl	80135c0 <malloc>
 801373c:	4602      	mov	r2, r0
 801373e:	61e0      	str	r0, [r4, #28]
 8013740:	b920      	cbnz	r0, 801374c <_Balloc+0x20>
 8013742:	4b18      	ldr	r3, [pc, #96]	@ (80137a4 <_Balloc+0x78>)
 8013744:	4818      	ldr	r0, [pc, #96]	@ (80137a8 <_Balloc+0x7c>)
 8013746:	216b      	movs	r1, #107	@ 0x6b
 8013748:	f000 fdae 	bl	80142a8 <__assert_func>
 801374c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013750:	6006      	str	r6, [r0, #0]
 8013752:	60c6      	str	r6, [r0, #12]
 8013754:	69e6      	ldr	r6, [r4, #28]
 8013756:	68f3      	ldr	r3, [r6, #12]
 8013758:	b183      	cbz	r3, 801377c <_Balloc+0x50>
 801375a:	69e3      	ldr	r3, [r4, #28]
 801375c:	68db      	ldr	r3, [r3, #12]
 801375e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013762:	b9b8      	cbnz	r0, 8013794 <_Balloc+0x68>
 8013764:	2101      	movs	r1, #1
 8013766:	fa01 f605 	lsl.w	r6, r1, r5
 801376a:	1d72      	adds	r2, r6, #5
 801376c:	0092      	lsls	r2, r2, #2
 801376e:	4620      	mov	r0, r4
 8013770:	f000 fdb8 	bl	80142e4 <_calloc_r>
 8013774:	b160      	cbz	r0, 8013790 <_Balloc+0x64>
 8013776:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801377a:	e00e      	b.n	801379a <_Balloc+0x6e>
 801377c:	2221      	movs	r2, #33	@ 0x21
 801377e:	2104      	movs	r1, #4
 8013780:	4620      	mov	r0, r4
 8013782:	f000 fdaf 	bl	80142e4 <_calloc_r>
 8013786:	69e3      	ldr	r3, [r4, #28]
 8013788:	60f0      	str	r0, [r6, #12]
 801378a:	68db      	ldr	r3, [r3, #12]
 801378c:	2b00      	cmp	r3, #0
 801378e:	d1e4      	bne.n	801375a <_Balloc+0x2e>
 8013790:	2000      	movs	r0, #0
 8013792:	bd70      	pop	{r4, r5, r6, pc}
 8013794:	6802      	ldr	r2, [r0, #0]
 8013796:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801379a:	2300      	movs	r3, #0
 801379c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80137a0:	e7f7      	b.n	8013792 <_Balloc+0x66>
 80137a2:	bf00      	nop
 80137a4:	08014aa1 	.word	0x08014aa1
 80137a8:	08014b21 	.word	0x08014b21

080137ac <_Bfree>:
 80137ac:	b570      	push	{r4, r5, r6, lr}
 80137ae:	69c6      	ldr	r6, [r0, #28]
 80137b0:	4605      	mov	r5, r0
 80137b2:	460c      	mov	r4, r1
 80137b4:	b976      	cbnz	r6, 80137d4 <_Bfree+0x28>
 80137b6:	2010      	movs	r0, #16
 80137b8:	f7ff ff02 	bl	80135c0 <malloc>
 80137bc:	4602      	mov	r2, r0
 80137be:	61e8      	str	r0, [r5, #28]
 80137c0:	b920      	cbnz	r0, 80137cc <_Bfree+0x20>
 80137c2:	4b09      	ldr	r3, [pc, #36]	@ (80137e8 <_Bfree+0x3c>)
 80137c4:	4809      	ldr	r0, [pc, #36]	@ (80137ec <_Bfree+0x40>)
 80137c6:	218f      	movs	r1, #143	@ 0x8f
 80137c8:	f000 fd6e 	bl	80142a8 <__assert_func>
 80137cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80137d0:	6006      	str	r6, [r0, #0]
 80137d2:	60c6      	str	r6, [r0, #12]
 80137d4:	b13c      	cbz	r4, 80137e6 <_Bfree+0x3a>
 80137d6:	69eb      	ldr	r3, [r5, #28]
 80137d8:	6862      	ldr	r2, [r4, #4]
 80137da:	68db      	ldr	r3, [r3, #12]
 80137dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80137e0:	6021      	str	r1, [r4, #0]
 80137e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80137e6:	bd70      	pop	{r4, r5, r6, pc}
 80137e8:	08014aa1 	.word	0x08014aa1
 80137ec:	08014b21 	.word	0x08014b21

080137f0 <__multadd>:
 80137f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80137f4:	690d      	ldr	r5, [r1, #16]
 80137f6:	4607      	mov	r7, r0
 80137f8:	460c      	mov	r4, r1
 80137fa:	461e      	mov	r6, r3
 80137fc:	f101 0c14 	add.w	ip, r1, #20
 8013800:	2000      	movs	r0, #0
 8013802:	f8dc 3000 	ldr.w	r3, [ip]
 8013806:	b299      	uxth	r1, r3
 8013808:	fb02 6101 	mla	r1, r2, r1, r6
 801380c:	0c1e      	lsrs	r6, r3, #16
 801380e:	0c0b      	lsrs	r3, r1, #16
 8013810:	fb02 3306 	mla	r3, r2, r6, r3
 8013814:	b289      	uxth	r1, r1
 8013816:	3001      	adds	r0, #1
 8013818:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801381c:	4285      	cmp	r5, r0
 801381e:	f84c 1b04 	str.w	r1, [ip], #4
 8013822:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013826:	dcec      	bgt.n	8013802 <__multadd+0x12>
 8013828:	b30e      	cbz	r6, 801386e <__multadd+0x7e>
 801382a:	68a3      	ldr	r3, [r4, #8]
 801382c:	42ab      	cmp	r3, r5
 801382e:	dc19      	bgt.n	8013864 <__multadd+0x74>
 8013830:	6861      	ldr	r1, [r4, #4]
 8013832:	4638      	mov	r0, r7
 8013834:	3101      	adds	r1, #1
 8013836:	f7ff ff79 	bl	801372c <_Balloc>
 801383a:	4680      	mov	r8, r0
 801383c:	b928      	cbnz	r0, 801384a <__multadd+0x5a>
 801383e:	4602      	mov	r2, r0
 8013840:	4b0c      	ldr	r3, [pc, #48]	@ (8013874 <__multadd+0x84>)
 8013842:	480d      	ldr	r0, [pc, #52]	@ (8013878 <__multadd+0x88>)
 8013844:	21ba      	movs	r1, #186	@ 0xba
 8013846:	f000 fd2f 	bl	80142a8 <__assert_func>
 801384a:	6922      	ldr	r2, [r4, #16]
 801384c:	3202      	adds	r2, #2
 801384e:	f104 010c 	add.w	r1, r4, #12
 8013852:	0092      	lsls	r2, r2, #2
 8013854:	300c      	adds	r0, #12
 8013856:	f000 fd19 	bl	801428c <memcpy>
 801385a:	4621      	mov	r1, r4
 801385c:	4638      	mov	r0, r7
 801385e:	f7ff ffa5 	bl	80137ac <_Bfree>
 8013862:	4644      	mov	r4, r8
 8013864:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013868:	3501      	adds	r5, #1
 801386a:	615e      	str	r6, [r3, #20]
 801386c:	6125      	str	r5, [r4, #16]
 801386e:	4620      	mov	r0, r4
 8013870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013874:	08014b10 	.word	0x08014b10
 8013878:	08014b21 	.word	0x08014b21

0801387c <__hi0bits>:
 801387c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013880:	4603      	mov	r3, r0
 8013882:	bf36      	itet	cc
 8013884:	0403      	lslcc	r3, r0, #16
 8013886:	2000      	movcs	r0, #0
 8013888:	2010      	movcc	r0, #16
 801388a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801388e:	bf3c      	itt	cc
 8013890:	021b      	lslcc	r3, r3, #8
 8013892:	3008      	addcc	r0, #8
 8013894:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013898:	bf3c      	itt	cc
 801389a:	011b      	lslcc	r3, r3, #4
 801389c:	3004      	addcc	r0, #4
 801389e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80138a2:	bf3c      	itt	cc
 80138a4:	009b      	lslcc	r3, r3, #2
 80138a6:	3002      	addcc	r0, #2
 80138a8:	2b00      	cmp	r3, #0
 80138aa:	db05      	blt.n	80138b8 <__hi0bits+0x3c>
 80138ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80138b0:	f100 0001 	add.w	r0, r0, #1
 80138b4:	bf08      	it	eq
 80138b6:	2020      	moveq	r0, #32
 80138b8:	4770      	bx	lr

080138ba <__lo0bits>:
 80138ba:	6803      	ldr	r3, [r0, #0]
 80138bc:	4602      	mov	r2, r0
 80138be:	f013 0007 	ands.w	r0, r3, #7
 80138c2:	d00b      	beq.n	80138dc <__lo0bits+0x22>
 80138c4:	07d9      	lsls	r1, r3, #31
 80138c6:	d421      	bmi.n	801390c <__lo0bits+0x52>
 80138c8:	0798      	lsls	r0, r3, #30
 80138ca:	bf49      	itett	mi
 80138cc:	085b      	lsrmi	r3, r3, #1
 80138ce:	089b      	lsrpl	r3, r3, #2
 80138d0:	2001      	movmi	r0, #1
 80138d2:	6013      	strmi	r3, [r2, #0]
 80138d4:	bf5c      	itt	pl
 80138d6:	6013      	strpl	r3, [r2, #0]
 80138d8:	2002      	movpl	r0, #2
 80138da:	4770      	bx	lr
 80138dc:	b299      	uxth	r1, r3
 80138de:	b909      	cbnz	r1, 80138e4 <__lo0bits+0x2a>
 80138e0:	0c1b      	lsrs	r3, r3, #16
 80138e2:	2010      	movs	r0, #16
 80138e4:	b2d9      	uxtb	r1, r3
 80138e6:	b909      	cbnz	r1, 80138ec <__lo0bits+0x32>
 80138e8:	3008      	adds	r0, #8
 80138ea:	0a1b      	lsrs	r3, r3, #8
 80138ec:	0719      	lsls	r1, r3, #28
 80138ee:	bf04      	itt	eq
 80138f0:	091b      	lsreq	r3, r3, #4
 80138f2:	3004      	addeq	r0, #4
 80138f4:	0799      	lsls	r1, r3, #30
 80138f6:	bf04      	itt	eq
 80138f8:	089b      	lsreq	r3, r3, #2
 80138fa:	3002      	addeq	r0, #2
 80138fc:	07d9      	lsls	r1, r3, #31
 80138fe:	d403      	bmi.n	8013908 <__lo0bits+0x4e>
 8013900:	085b      	lsrs	r3, r3, #1
 8013902:	f100 0001 	add.w	r0, r0, #1
 8013906:	d003      	beq.n	8013910 <__lo0bits+0x56>
 8013908:	6013      	str	r3, [r2, #0]
 801390a:	4770      	bx	lr
 801390c:	2000      	movs	r0, #0
 801390e:	4770      	bx	lr
 8013910:	2020      	movs	r0, #32
 8013912:	4770      	bx	lr

08013914 <__i2b>:
 8013914:	b510      	push	{r4, lr}
 8013916:	460c      	mov	r4, r1
 8013918:	2101      	movs	r1, #1
 801391a:	f7ff ff07 	bl	801372c <_Balloc>
 801391e:	4602      	mov	r2, r0
 8013920:	b928      	cbnz	r0, 801392e <__i2b+0x1a>
 8013922:	4b05      	ldr	r3, [pc, #20]	@ (8013938 <__i2b+0x24>)
 8013924:	4805      	ldr	r0, [pc, #20]	@ (801393c <__i2b+0x28>)
 8013926:	f240 1145 	movw	r1, #325	@ 0x145
 801392a:	f000 fcbd 	bl	80142a8 <__assert_func>
 801392e:	2301      	movs	r3, #1
 8013930:	6144      	str	r4, [r0, #20]
 8013932:	6103      	str	r3, [r0, #16]
 8013934:	bd10      	pop	{r4, pc}
 8013936:	bf00      	nop
 8013938:	08014b10 	.word	0x08014b10
 801393c:	08014b21 	.word	0x08014b21

08013940 <__multiply>:
 8013940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013944:	4614      	mov	r4, r2
 8013946:	690a      	ldr	r2, [r1, #16]
 8013948:	6923      	ldr	r3, [r4, #16]
 801394a:	429a      	cmp	r2, r3
 801394c:	bfa8      	it	ge
 801394e:	4623      	movge	r3, r4
 8013950:	460f      	mov	r7, r1
 8013952:	bfa4      	itt	ge
 8013954:	460c      	movge	r4, r1
 8013956:	461f      	movge	r7, r3
 8013958:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801395c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013960:	68a3      	ldr	r3, [r4, #8]
 8013962:	6861      	ldr	r1, [r4, #4]
 8013964:	eb0a 0609 	add.w	r6, sl, r9
 8013968:	42b3      	cmp	r3, r6
 801396a:	b085      	sub	sp, #20
 801396c:	bfb8      	it	lt
 801396e:	3101      	addlt	r1, #1
 8013970:	f7ff fedc 	bl	801372c <_Balloc>
 8013974:	b930      	cbnz	r0, 8013984 <__multiply+0x44>
 8013976:	4602      	mov	r2, r0
 8013978:	4b44      	ldr	r3, [pc, #272]	@ (8013a8c <__multiply+0x14c>)
 801397a:	4845      	ldr	r0, [pc, #276]	@ (8013a90 <__multiply+0x150>)
 801397c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013980:	f000 fc92 	bl	80142a8 <__assert_func>
 8013984:	f100 0514 	add.w	r5, r0, #20
 8013988:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801398c:	462b      	mov	r3, r5
 801398e:	2200      	movs	r2, #0
 8013990:	4543      	cmp	r3, r8
 8013992:	d321      	bcc.n	80139d8 <__multiply+0x98>
 8013994:	f107 0114 	add.w	r1, r7, #20
 8013998:	f104 0214 	add.w	r2, r4, #20
 801399c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80139a0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80139a4:	9302      	str	r3, [sp, #8]
 80139a6:	1b13      	subs	r3, r2, r4
 80139a8:	3b15      	subs	r3, #21
 80139aa:	f023 0303 	bic.w	r3, r3, #3
 80139ae:	3304      	adds	r3, #4
 80139b0:	f104 0715 	add.w	r7, r4, #21
 80139b4:	42ba      	cmp	r2, r7
 80139b6:	bf38      	it	cc
 80139b8:	2304      	movcc	r3, #4
 80139ba:	9301      	str	r3, [sp, #4]
 80139bc:	9b02      	ldr	r3, [sp, #8]
 80139be:	9103      	str	r1, [sp, #12]
 80139c0:	428b      	cmp	r3, r1
 80139c2:	d80c      	bhi.n	80139de <__multiply+0x9e>
 80139c4:	2e00      	cmp	r6, #0
 80139c6:	dd03      	ble.n	80139d0 <__multiply+0x90>
 80139c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d05b      	beq.n	8013a88 <__multiply+0x148>
 80139d0:	6106      	str	r6, [r0, #16]
 80139d2:	b005      	add	sp, #20
 80139d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139d8:	f843 2b04 	str.w	r2, [r3], #4
 80139dc:	e7d8      	b.n	8013990 <__multiply+0x50>
 80139de:	f8b1 a000 	ldrh.w	sl, [r1]
 80139e2:	f1ba 0f00 	cmp.w	sl, #0
 80139e6:	d024      	beq.n	8013a32 <__multiply+0xf2>
 80139e8:	f104 0e14 	add.w	lr, r4, #20
 80139ec:	46a9      	mov	r9, r5
 80139ee:	f04f 0c00 	mov.w	ip, #0
 80139f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80139f6:	f8d9 3000 	ldr.w	r3, [r9]
 80139fa:	fa1f fb87 	uxth.w	fp, r7
 80139fe:	b29b      	uxth	r3, r3
 8013a00:	fb0a 330b 	mla	r3, sl, fp, r3
 8013a04:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013a08:	f8d9 7000 	ldr.w	r7, [r9]
 8013a0c:	4463      	add	r3, ip
 8013a0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013a12:	fb0a c70b 	mla	r7, sl, fp, ip
 8013a16:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013a1a:	b29b      	uxth	r3, r3
 8013a1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013a20:	4572      	cmp	r2, lr
 8013a22:	f849 3b04 	str.w	r3, [r9], #4
 8013a26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013a2a:	d8e2      	bhi.n	80139f2 <__multiply+0xb2>
 8013a2c:	9b01      	ldr	r3, [sp, #4]
 8013a2e:	f845 c003 	str.w	ip, [r5, r3]
 8013a32:	9b03      	ldr	r3, [sp, #12]
 8013a34:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013a38:	3104      	adds	r1, #4
 8013a3a:	f1b9 0f00 	cmp.w	r9, #0
 8013a3e:	d021      	beq.n	8013a84 <__multiply+0x144>
 8013a40:	682b      	ldr	r3, [r5, #0]
 8013a42:	f104 0c14 	add.w	ip, r4, #20
 8013a46:	46ae      	mov	lr, r5
 8013a48:	f04f 0a00 	mov.w	sl, #0
 8013a4c:	f8bc b000 	ldrh.w	fp, [ip]
 8013a50:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013a54:	fb09 770b 	mla	r7, r9, fp, r7
 8013a58:	4457      	add	r7, sl
 8013a5a:	b29b      	uxth	r3, r3
 8013a5c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013a60:	f84e 3b04 	str.w	r3, [lr], #4
 8013a64:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013a68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013a6c:	f8be 3000 	ldrh.w	r3, [lr]
 8013a70:	fb09 330a 	mla	r3, r9, sl, r3
 8013a74:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013a78:	4562      	cmp	r2, ip
 8013a7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013a7e:	d8e5      	bhi.n	8013a4c <__multiply+0x10c>
 8013a80:	9f01      	ldr	r7, [sp, #4]
 8013a82:	51eb      	str	r3, [r5, r7]
 8013a84:	3504      	adds	r5, #4
 8013a86:	e799      	b.n	80139bc <__multiply+0x7c>
 8013a88:	3e01      	subs	r6, #1
 8013a8a:	e79b      	b.n	80139c4 <__multiply+0x84>
 8013a8c:	08014b10 	.word	0x08014b10
 8013a90:	08014b21 	.word	0x08014b21

08013a94 <__pow5mult>:
 8013a94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013a98:	4615      	mov	r5, r2
 8013a9a:	f012 0203 	ands.w	r2, r2, #3
 8013a9e:	4607      	mov	r7, r0
 8013aa0:	460e      	mov	r6, r1
 8013aa2:	d007      	beq.n	8013ab4 <__pow5mult+0x20>
 8013aa4:	4c25      	ldr	r4, [pc, #148]	@ (8013b3c <__pow5mult+0xa8>)
 8013aa6:	3a01      	subs	r2, #1
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013aae:	f7ff fe9f 	bl	80137f0 <__multadd>
 8013ab2:	4606      	mov	r6, r0
 8013ab4:	10ad      	asrs	r5, r5, #2
 8013ab6:	d03d      	beq.n	8013b34 <__pow5mult+0xa0>
 8013ab8:	69fc      	ldr	r4, [r7, #28]
 8013aba:	b97c      	cbnz	r4, 8013adc <__pow5mult+0x48>
 8013abc:	2010      	movs	r0, #16
 8013abe:	f7ff fd7f 	bl	80135c0 <malloc>
 8013ac2:	4602      	mov	r2, r0
 8013ac4:	61f8      	str	r0, [r7, #28]
 8013ac6:	b928      	cbnz	r0, 8013ad4 <__pow5mult+0x40>
 8013ac8:	4b1d      	ldr	r3, [pc, #116]	@ (8013b40 <__pow5mult+0xac>)
 8013aca:	481e      	ldr	r0, [pc, #120]	@ (8013b44 <__pow5mult+0xb0>)
 8013acc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013ad0:	f000 fbea 	bl	80142a8 <__assert_func>
 8013ad4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013ad8:	6004      	str	r4, [r0, #0]
 8013ada:	60c4      	str	r4, [r0, #12]
 8013adc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013ae0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013ae4:	b94c      	cbnz	r4, 8013afa <__pow5mult+0x66>
 8013ae6:	f240 2171 	movw	r1, #625	@ 0x271
 8013aea:	4638      	mov	r0, r7
 8013aec:	f7ff ff12 	bl	8013914 <__i2b>
 8013af0:	2300      	movs	r3, #0
 8013af2:	f8c8 0008 	str.w	r0, [r8, #8]
 8013af6:	4604      	mov	r4, r0
 8013af8:	6003      	str	r3, [r0, #0]
 8013afa:	f04f 0900 	mov.w	r9, #0
 8013afe:	07eb      	lsls	r3, r5, #31
 8013b00:	d50a      	bpl.n	8013b18 <__pow5mult+0x84>
 8013b02:	4631      	mov	r1, r6
 8013b04:	4622      	mov	r2, r4
 8013b06:	4638      	mov	r0, r7
 8013b08:	f7ff ff1a 	bl	8013940 <__multiply>
 8013b0c:	4631      	mov	r1, r6
 8013b0e:	4680      	mov	r8, r0
 8013b10:	4638      	mov	r0, r7
 8013b12:	f7ff fe4b 	bl	80137ac <_Bfree>
 8013b16:	4646      	mov	r6, r8
 8013b18:	106d      	asrs	r5, r5, #1
 8013b1a:	d00b      	beq.n	8013b34 <__pow5mult+0xa0>
 8013b1c:	6820      	ldr	r0, [r4, #0]
 8013b1e:	b938      	cbnz	r0, 8013b30 <__pow5mult+0x9c>
 8013b20:	4622      	mov	r2, r4
 8013b22:	4621      	mov	r1, r4
 8013b24:	4638      	mov	r0, r7
 8013b26:	f7ff ff0b 	bl	8013940 <__multiply>
 8013b2a:	6020      	str	r0, [r4, #0]
 8013b2c:	f8c0 9000 	str.w	r9, [r0]
 8013b30:	4604      	mov	r4, r0
 8013b32:	e7e4      	b.n	8013afe <__pow5mult+0x6a>
 8013b34:	4630      	mov	r0, r6
 8013b36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013b3a:	bf00      	nop
 8013b3c:	08014b7c 	.word	0x08014b7c
 8013b40:	08014aa1 	.word	0x08014aa1
 8013b44:	08014b21 	.word	0x08014b21

08013b48 <__lshift>:
 8013b48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b4c:	460c      	mov	r4, r1
 8013b4e:	6849      	ldr	r1, [r1, #4]
 8013b50:	6923      	ldr	r3, [r4, #16]
 8013b52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013b56:	68a3      	ldr	r3, [r4, #8]
 8013b58:	4607      	mov	r7, r0
 8013b5a:	4691      	mov	r9, r2
 8013b5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013b60:	f108 0601 	add.w	r6, r8, #1
 8013b64:	42b3      	cmp	r3, r6
 8013b66:	db0b      	blt.n	8013b80 <__lshift+0x38>
 8013b68:	4638      	mov	r0, r7
 8013b6a:	f7ff fddf 	bl	801372c <_Balloc>
 8013b6e:	4605      	mov	r5, r0
 8013b70:	b948      	cbnz	r0, 8013b86 <__lshift+0x3e>
 8013b72:	4602      	mov	r2, r0
 8013b74:	4b28      	ldr	r3, [pc, #160]	@ (8013c18 <__lshift+0xd0>)
 8013b76:	4829      	ldr	r0, [pc, #164]	@ (8013c1c <__lshift+0xd4>)
 8013b78:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013b7c:	f000 fb94 	bl	80142a8 <__assert_func>
 8013b80:	3101      	adds	r1, #1
 8013b82:	005b      	lsls	r3, r3, #1
 8013b84:	e7ee      	b.n	8013b64 <__lshift+0x1c>
 8013b86:	2300      	movs	r3, #0
 8013b88:	f100 0114 	add.w	r1, r0, #20
 8013b8c:	f100 0210 	add.w	r2, r0, #16
 8013b90:	4618      	mov	r0, r3
 8013b92:	4553      	cmp	r3, sl
 8013b94:	db33      	blt.n	8013bfe <__lshift+0xb6>
 8013b96:	6920      	ldr	r0, [r4, #16]
 8013b98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013b9c:	f104 0314 	add.w	r3, r4, #20
 8013ba0:	f019 091f 	ands.w	r9, r9, #31
 8013ba4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013ba8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013bac:	d02b      	beq.n	8013c06 <__lshift+0xbe>
 8013bae:	f1c9 0e20 	rsb	lr, r9, #32
 8013bb2:	468a      	mov	sl, r1
 8013bb4:	2200      	movs	r2, #0
 8013bb6:	6818      	ldr	r0, [r3, #0]
 8013bb8:	fa00 f009 	lsl.w	r0, r0, r9
 8013bbc:	4310      	orrs	r0, r2
 8013bbe:	f84a 0b04 	str.w	r0, [sl], #4
 8013bc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8013bc6:	459c      	cmp	ip, r3
 8013bc8:	fa22 f20e 	lsr.w	r2, r2, lr
 8013bcc:	d8f3      	bhi.n	8013bb6 <__lshift+0x6e>
 8013bce:	ebac 0304 	sub.w	r3, ip, r4
 8013bd2:	3b15      	subs	r3, #21
 8013bd4:	f023 0303 	bic.w	r3, r3, #3
 8013bd8:	3304      	adds	r3, #4
 8013bda:	f104 0015 	add.w	r0, r4, #21
 8013bde:	4584      	cmp	ip, r0
 8013be0:	bf38      	it	cc
 8013be2:	2304      	movcc	r3, #4
 8013be4:	50ca      	str	r2, [r1, r3]
 8013be6:	b10a      	cbz	r2, 8013bec <__lshift+0xa4>
 8013be8:	f108 0602 	add.w	r6, r8, #2
 8013bec:	3e01      	subs	r6, #1
 8013bee:	4638      	mov	r0, r7
 8013bf0:	612e      	str	r6, [r5, #16]
 8013bf2:	4621      	mov	r1, r4
 8013bf4:	f7ff fdda 	bl	80137ac <_Bfree>
 8013bf8:	4628      	mov	r0, r5
 8013bfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bfe:	f842 0f04 	str.w	r0, [r2, #4]!
 8013c02:	3301      	adds	r3, #1
 8013c04:	e7c5      	b.n	8013b92 <__lshift+0x4a>
 8013c06:	3904      	subs	r1, #4
 8013c08:	f853 2b04 	ldr.w	r2, [r3], #4
 8013c0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8013c10:	459c      	cmp	ip, r3
 8013c12:	d8f9      	bhi.n	8013c08 <__lshift+0xc0>
 8013c14:	e7ea      	b.n	8013bec <__lshift+0xa4>
 8013c16:	bf00      	nop
 8013c18:	08014b10 	.word	0x08014b10
 8013c1c:	08014b21 	.word	0x08014b21

08013c20 <__mcmp>:
 8013c20:	690a      	ldr	r2, [r1, #16]
 8013c22:	4603      	mov	r3, r0
 8013c24:	6900      	ldr	r0, [r0, #16]
 8013c26:	1a80      	subs	r0, r0, r2
 8013c28:	b530      	push	{r4, r5, lr}
 8013c2a:	d10e      	bne.n	8013c4a <__mcmp+0x2a>
 8013c2c:	3314      	adds	r3, #20
 8013c2e:	3114      	adds	r1, #20
 8013c30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013c34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8013c38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8013c3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8013c40:	4295      	cmp	r5, r2
 8013c42:	d003      	beq.n	8013c4c <__mcmp+0x2c>
 8013c44:	d205      	bcs.n	8013c52 <__mcmp+0x32>
 8013c46:	f04f 30ff 	mov.w	r0, #4294967295
 8013c4a:	bd30      	pop	{r4, r5, pc}
 8013c4c:	42a3      	cmp	r3, r4
 8013c4e:	d3f3      	bcc.n	8013c38 <__mcmp+0x18>
 8013c50:	e7fb      	b.n	8013c4a <__mcmp+0x2a>
 8013c52:	2001      	movs	r0, #1
 8013c54:	e7f9      	b.n	8013c4a <__mcmp+0x2a>
	...

08013c58 <__mdiff>:
 8013c58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013c5c:	4689      	mov	r9, r1
 8013c5e:	4606      	mov	r6, r0
 8013c60:	4611      	mov	r1, r2
 8013c62:	4648      	mov	r0, r9
 8013c64:	4614      	mov	r4, r2
 8013c66:	f7ff ffdb 	bl	8013c20 <__mcmp>
 8013c6a:	1e05      	subs	r5, r0, #0
 8013c6c:	d112      	bne.n	8013c94 <__mdiff+0x3c>
 8013c6e:	4629      	mov	r1, r5
 8013c70:	4630      	mov	r0, r6
 8013c72:	f7ff fd5b 	bl	801372c <_Balloc>
 8013c76:	4602      	mov	r2, r0
 8013c78:	b928      	cbnz	r0, 8013c86 <__mdiff+0x2e>
 8013c7a:	4b3f      	ldr	r3, [pc, #252]	@ (8013d78 <__mdiff+0x120>)
 8013c7c:	f240 2137 	movw	r1, #567	@ 0x237
 8013c80:	483e      	ldr	r0, [pc, #248]	@ (8013d7c <__mdiff+0x124>)
 8013c82:	f000 fb11 	bl	80142a8 <__assert_func>
 8013c86:	2301      	movs	r3, #1
 8013c88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013c8c:	4610      	mov	r0, r2
 8013c8e:	b003      	add	sp, #12
 8013c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c94:	bfbc      	itt	lt
 8013c96:	464b      	movlt	r3, r9
 8013c98:	46a1      	movlt	r9, r4
 8013c9a:	4630      	mov	r0, r6
 8013c9c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8013ca0:	bfba      	itte	lt
 8013ca2:	461c      	movlt	r4, r3
 8013ca4:	2501      	movlt	r5, #1
 8013ca6:	2500      	movge	r5, #0
 8013ca8:	f7ff fd40 	bl	801372c <_Balloc>
 8013cac:	4602      	mov	r2, r0
 8013cae:	b918      	cbnz	r0, 8013cb8 <__mdiff+0x60>
 8013cb0:	4b31      	ldr	r3, [pc, #196]	@ (8013d78 <__mdiff+0x120>)
 8013cb2:	f240 2145 	movw	r1, #581	@ 0x245
 8013cb6:	e7e3      	b.n	8013c80 <__mdiff+0x28>
 8013cb8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8013cbc:	6926      	ldr	r6, [r4, #16]
 8013cbe:	60c5      	str	r5, [r0, #12]
 8013cc0:	f109 0310 	add.w	r3, r9, #16
 8013cc4:	f109 0514 	add.w	r5, r9, #20
 8013cc8:	f104 0e14 	add.w	lr, r4, #20
 8013ccc:	f100 0b14 	add.w	fp, r0, #20
 8013cd0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8013cd4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8013cd8:	9301      	str	r3, [sp, #4]
 8013cda:	46d9      	mov	r9, fp
 8013cdc:	f04f 0c00 	mov.w	ip, #0
 8013ce0:	9b01      	ldr	r3, [sp, #4]
 8013ce2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8013ce6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8013cea:	9301      	str	r3, [sp, #4]
 8013cec:	fa1f f38a 	uxth.w	r3, sl
 8013cf0:	4619      	mov	r1, r3
 8013cf2:	b283      	uxth	r3, r0
 8013cf4:	1acb      	subs	r3, r1, r3
 8013cf6:	0c00      	lsrs	r0, r0, #16
 8013cf8:	4463      	add	r3, ip
 8013cfa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8013cfe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8013d02:	b29b      	uxth	r3, r3
 8013d04:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8013d08:	4576      	cmp	r6, lr
 8013d0a:	f849 3b04 	str.w	r3, [r9], #4
 8013d0e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013d12:	d8e5      	bhi.n	8013ce0 <__mdiff+0x88>
 8013d14:	1b33      	subs	r3, r6, r4
 8013d16:	3b15      	subs	r3, #21
 8013d18:	f023 0303 	bic.w	r3, r3, #3
 8013d1c:	3415      	adds	r4, #21
 8013d1e:	3304      	adds	r3, #4
 8013d20:	42a6      	cmp	r6, r4
 8013d22:	bf38      	it	cc
 8013d24:	2304      	movcc	r3, #4
 8013d26:	441d      	add	r5, r3
 8013d28:	445b      	add	r3, fp
 8013d2a:	461e      	mov	r6, r3
 8013d2c:	462c      	mov	r4, r5
 8013d2e:	4544      	cmp	r4, r8
 8013d30:	d30e      	bcc.n	8013d50 <__mdiff+0xf8>
 8013d32:	f108 0103 	add.w	r1, r8, #3
 8013d36:	1b49      	subs	r1, r1, r5
 8013d38:	f021 0103 	bic.w	r1, r1, #3
 8013d3c:	3d03      	subs	r5, #3
 8013d3e:	45a8      	cmp	r8, r5
 8013d40:	bf38      	it	cc
 8013d42:	2100      	movcc	r1, #0
 8013d44:	440b      	add	r3, r1
 8013d46:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8013d4a:	b191      	cbz	r1, 8013d72 <__mdiff+0x11a>
 8013d4c:	6117      	str	r7, [r2, #16]
 8013d4e:	e79d      	b.n	8013c8c <__mdiff+0x34>
 8013d50:	f854 1b04 	ldr.w	r1, [r4], #4
 8013d54:	46e6      	mov	lr, ip
 8013d56:	0c08      	lsrs	r0, r1, #16
 8013d58:	fa1c fc81 	uxtah	ip, ip, r1
 8013d5c:	4471      	add	r1, lr
 8013d5e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8013d62:	b289      	uxth	r1, r1
 8013d64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8013d68:	f846 1b04 	str.w	r1, [r6], #4
 8013d6c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8013d70:	e7dd      	b.n	8013d2e <__mdiff+0xd6>
 8013d72:	3f01      	subs	r7, #1
 8013d74:	e7e7      	b.n	8013d46 <__mdiff+0xee>
 8013d76:	bf00      	nop
 8013d78:	08014b10 	.word	0x08014b10
 8013d7c:	08014b21 	.word	0x08014b21

08013d80 <__d2b>:
 8013d80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013d84:	460f      	mov	r7, r1
 8013d86:	2101      	movs	r1, #1
 8013d88:	ec59 8b10 	vmov	r8, r9, d0
 8013d8c:	4616      	mov	r6, r2
 8013d8e:	f7ff fccd 	bl	801372c <_Balloc>
 8013d92:	4604      	mov	r4, r0
 8013d94:	b930      	cbnz	r0, 8013da4 <__d2b+0x24>
 8013d96:	4602      	mov	r2, r0
 8013d98:	4b23      	ldr	r3, [pc, #140]	@ (8013e28 <__d2b+0xa8>)
 8013d9a:	4824      	ldr	r0, [pc, #144]	@ (8013e2c <__d2b+0xac>)
 8013d9c:	f240 310f 	movw	r1, #783	@ 0x30f
 8013da0:	f000 fa82 	bl	80142a8 <__assert_func>
 8013da4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8013da8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013dac:	b10d      	cbz	r5, 8013db2 <__d2b+0x32>
 8013dae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013db2:	9301      	str	r3, [sp, #4]
 8013db4:	f1b8 0300 	subs.w	r3, r8, #0
 8013db8:	d023      	beq.n	8013e02 <__d2b+0x82>
 8013dba:	4668      	mov	r0, sp
 8013dbc:	9300      	str	r3, [sp, #0]
 8013dbe:	f7ff fd7c 	bl	80138ba <__lo0bits>
 8013dc2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013dc6:	b1d0      	cbz	r0, 8013dfe <__d2b+0x7e>
 8013dc8:	f1c0 0320 	rsb	r3, r0, #32
 8013dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8013dd0:	430b      	orrs	r3, r1
 8013dd2:	40c2      	lsrs	r2, r0
 8013dd4:	6163      	str	r3, [r4, #20]
 8013dd6:	9201      	str	r2, [sp, #4]
 8013dd8:	9b01      	ldr	r3, [sp, #4]
 8013dda:	61a3      	str	r3, [r4, #24]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	bf0c      	ite	eq
 8013de0:	2201      	moveq	r2, #1
 8013de2:	2202      	movne	r2, #2
 8013de4:	6122      	str	r2, [r4, #16]
 8013de6:	b1a5      	cbz	r5, 8013e12 <__d2b+0x92>
 8013de8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8013dec:	4405      	add	r5, r0
 8013dee:	603d      	str	r5, [r7, #0]
 8013df0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8013df4:	6030      	str	r0, [r6, #0]
 8013df6:	4620      	mov	r0, r4
 8013df8:	b003      	add	sp, #12
 8013dfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013dfe:	6161      	str	r1, [r4, #20]
 8013e00:	e7ea      	b.n	8013dd8 <__d2b+0x58>
 8013e02:	a801      	add	r0, sp, #4
 8013e04:	f7ff fd59 	bl	80138ba <__lo0bits>
 8013e08:	9b01      	ldr	r3, [sp, #4]
 8013e0a:	6163      	str	r3, [r4, #20]
 8013e0c:	3020      	adds	r0, #32
 8013e0e:	2201      	movs	r2, #1
 8013e10:	e7e8      	b.n	8013de4 <__d2b+0x64>
 8013e12:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013e16:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8013e1a:	6038      	str	r0, [r7, #0]
 8013e1c:	6918      	ldr	r0, [r3, #16]
 8013e1e:	f7ff fd2d 	bl	801387c <__hi0bits>
 8013e22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013e26:	e7e5      	b.n	8013df4 <__d2b+0x74>
 8013e28:	08014b10 	.word	0x08014b10
 8013e2c:	08014b21 	.word	0x08014b21

08013e30 <__ssputs_r>:
 8013e30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013e34:	688e      	ldr	r6, [r1, #8]
 8013e36:	461f      	mov	r7, r3
 8013e38:	42be      	cmp	r6, r7
 8013e3a:	680b      	ldr	r3, [r1, #0]
 8013e3c:	4682      	mov	sl, r0
 8013e3e:	460c      	mov	r4, r1
 8013e40:	4690      	mov	r8, r2
 8013e42:	d82d      	bhi.n	8013ea0 <__ssputs_r+0x70>
 8013e44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013e48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8013e4c:	d026      	beq.n	8013e9c <__ssputs_r+0x6c>
 8013e4e:	6965      	ldr	r5, [r4, #20]
 8013e50:	6909      	ldr	r1, [r1, #16]
 8013e52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013e56:	eba3 0901 	sub.w	r9, r3, r1
 8013e5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013e5e:	1c7b      	adds	r3, r7, #1
 8013e60:	444b      	add	r3, r9
 8013e62:	106d      	asrs	r5, r5, #1
 8013e64:	429d      	cmp	r5, r3
 8013e66:	bf38      	it	cc
 8013e68:	461d      	movcc	r5, r3
 8013e6a:	0553      	lsls	r3, r2, #21
 8013e6c:	d527      	bpl.n	8013ebe <__ssputs_r+0x8e>
 8013e6e:	4629      	mov	r1, r5
 8013e70:	f7ff fbd0 	bl	8013614 <_malloc_r>
 8013e74:	4606      	mov	r6, r0
 8013e76:	b360      	cbz	r0, 8013ed2 <__ssputs_r+0xa2>
 8013e78:	6921      	ldr	r1, [r4, #16]
 8013e7a:	464a      	mov	r2, r9
 8013e7c:	f000 fa06 	bl	801428c <memcpy>
 8013e80:	89a3      	ldrh	r3, [r4, #12]
 8013e82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8013e86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8013e8a:	81a3      	strh	r3, [r4, #12]
 8013e8c:	6126      	str	r6, [r4, #16]
 8013e8e:	6165      	str	r5, [r4, #20]
 8013e90:	444e      	add	r6, r9
 8013e92:	eba5 0509 	sub.w	r5, r5, r9
 8013e96:	6026      	str	r6, [r4, #0]
 8013e98:	60a5      	str	r5, [r4, #8]
 8013e9a:	463e      	mov	r6, r7
 8013e9c:	42be      	cmp	r6, r7
 8013e9e:	d900      	bls.n	8013ea2 <__ssputs_r+0x72>
 8013ea0:	463e      	mov	r6, r7
 8013ea2:	6820      	ldr	r0, [r4, #0]
 8013ea4:	4632      	mov	r2, r6
 8013ea6:	4641      	mov	r1, r8
 8013ea8:	f000 f9c6 	bl	8014238 <memmove>
 8013eac:	68a3      	ldr	r3, [r4, #8]
 8013eae:	1b9b      	subs	r3, r3, r6
 8013eb0:	60a3      	str	r3, [r4, #8]
 8013eb2:	6823      	ldr	r3, [r4, #0]
 8013eb4:	4433      	add	r3, r6
 8013eb6:	6023      	str	r3, [r4, #0]
 8013eb8:	2000      	movs	r0, #0
 8013eba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ebe:	462a      	mov	r2, r5
 8013ec0:	f000 fa36 	bl	8014330 <_realloc_r>
 8013ec4:	4606      	mov	r6, r0
 8013ec6:	2800      	cmp	r0, #0
 8013ec8:	d1e0      	bne.n	8013e8c <__ssputs_r+0x5c>
 8013eca:	6921      	ldr	r1, [r4, #16]
 8013ecc:	4650      	mov	r0, sl
 8013ece:	f7ff fb2d 	bl	801352c <_free_r>
 8013ed2:	230c      	movs	r3, #12
 8013ed4:	f8ca 3000 	str.w	r3, [sl]
 8013ed8:	89a3      	ldrh	r3, [r4, #12]
 8013eda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8013ede:	81a3      	strh	r3, [r4, #12]
 8013ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8013ee4:	e7e9      	b.n	8013eba <__ssputs_r+0x8a>
	...

08013ee8 <_svfiprintf_r>:
 8013ee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013eec:	4698      	mov	r8, r3
 8013eee:	898b      	ldrh	r3, [r1, #12]
 8013ef0:	061b      	lsls	r3, r3, #24
 8013ef2:	b09d      	sub	sp, #116	@ 0x74
 8013ef4:	4607      	mov	r7, r0
 8013ef6:	460d      	mov	r5, r1
 8013ef8:	4614      	mov	r4, r2
 8013efa:	d510      	bpl.n	8013f1e <_svfiprintf_r+0x36>
 8013efc:	690b      	ldr	r3, [r1, #16]
 8013efe:	b973      	cbnz	r3, 8013f1e <_svfiprintf_r+0x36>
 8013f00:	2140      	movs	r1, #64	@ 0x40
 8013f02:	f7ff fb87 	bl	8013614 <_malloc_r>
 8013f06:	6028      	str	r0, [r5, #0]
 8013f08:	6128      	str	r0, [r5, #16]
 8013f0a:	b930      	cbnz	r0, 8013f1a <_svfiprintf_r+0x32>
 8013f0c:	230c      	movs	r3, #12
 8013f0e:	603b      	str	r3, [r7, #0]
 8013f10:	f04f 30ff 	mov.w	r0, #4294967295
 8013f14:	b01d      	add	sp, #116	@ 0x74
 8013f16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013f1a:	2340      	movs	r3, #64	@ 0x40
 8013f1c:	616b      	str	r3, [r5, #20]
 8013f1e:	2300      	movs	r3, #0
 8013f20:	9309      	str	r3, [sp, #36]	@ 0x24
 8013f22:	2320      	movs	r3, #32
 8013f24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8013f28:	f8cd 800c 	str.w	r8, [sp, #12]
 8013f2c:	2330      	movs	r3, #48	@ 0x30
 8013f2e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80140cc <_svfiprintf_r+0x1e4>
 8013f32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8013f36:	f04f 0901 	mov.w	r9, #1
 8013f3a:	4623      	mov	r3, r4
 8013f3c:	469a      	mov	sl, r3
 8013f3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013f42:	b10a      	cbz	r2, 8013f48 <_svfiprintf_r+0x60>
 8013f44:	2a25      	cmp	r2, #37	@ 0x25
 8013f46:	d1f9      	bne.n	8013f3c <_svfiprintf_r+0x54>
 8013f48:	ebba 0b04 	subs.w	fp, sl, r4
 8013f4c:	d00b      	beq.n	8013f66 <_svfiprintf_r+0x7e>
 8013f4e:	465b      	mov	r3, fp
 8013f50:	4622      	mov	r2, r4
 8013f52:	4629      	mov	r1, r5
 8013f54:	4638      	mov	r0, r7
 8013f56:	f7ff ff6b 	bl	8013e30 <__ssputs_r>
 8013f5a:	3001      	adds	r0, #1
 8013f5c:	f000 80a7 	beq.w	80140ae <_svfiprintf_r+0x1c6>
 8013f60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013f62:	445a      	add	r2, fp
 8013f64:	9209      	str	r2, [sp, #36]	@ 0x24
 8013f66:	f89a 3000 	ldrb.w	r3, [sl]
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	f000 809f 	beq.w	80140ae <_svfiprintf_r+0x1c6>
 8013f70:	2300      	movs	r3, #0
 8013f72:	f04f 32ff 	mov.w	r2, #4294967295
 8013f76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013f7a:	f10a 0a01 	add.w	sl, sl, #1
 8013f7e:	9304      	str	r3, [sp, #16]
 8013f80:	9307      	str	r3, [sp, #28]
 8013f82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8013f86:	931a      	str	r3, [sp, #104]	@ 0x68
 8013f88:	4654      	mov	r4, sl
 8013f8a:	2205      	movs	r2, #5
 8013f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f90:	484e      	ldr	r0, [pc, #312]	@ (80140cc <_svfiprintf_r+0x1e4>)
 8013f92:	f7ec f9a5 	bl	80002e0 <memchr>
 8013f96:	9a04      	ldr	r2, [sp, #16]
 8013f98:	b9d8      	cbnz	r0, 8013fd2 <_svfiprintf_r+0xea>
 8013f9a:	06d0      	lsls	r0, r2, #27
 8013f9c:	bf44      	itt	mi
 8013f9e:	2320      	movmi	r3, #32
 8013fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013fa4:	0711      	lsls	r1, r2, #28
 8013fa6:	bf44      	itt	mi
 8013fa8:	232b      	movmi	r3, #43	@ 0x2b
 8013faa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8013fae:	f89a 3000 	ldrb.w	r3, [sl]
 8013fb2:	2b2a      	cmp	r3, #42	@ 0x2a
 8013fb4:	d015      	beq.n	8013fe2 <_svfiprintf_r+0xfa>
 8013fb6:	9a07      	ldr	r2, [sp, #28]
 8013fb8:	4654      	mov	r4, sl
 8013fba:	2000      	movs	r0, #0
 8013fbc:	f04f 0c0a 	mov.w	ip, #10
 8013fc0:	4621      	mov	r1, r4
 8013fc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013fc6:	3b30      	subs	r3, #48	@ 0x30
 8013fc8:	2b09      	cmp	r3, #9
 8013fca:	d94b      	bls.n	8014064 <_svfiprintf_r+0x17c>
 8013fcc:	b1b0      	cbz	r0, 8013ffc <_svfiprintf_r+0x114>
 8013fce:	9207      	str	r2, [sp, #28]
 8013fd0:	e014      	b.n	8013ffc <_svfiprintf_r+0x114>
 8013fd2:	eba0 0308 	sub.w	r3, r0, r8
 8013fd6:	fa09 f303 	lsl.w	r3, r9, r3
 8013fda:	4313      	orrs	r3, r2
 8013fdc:	9304      	str	r3, [sp, #16]
 8013fde:	46a2      	mov	sl, r4
 8013fe0:	e7d2      	b.n	8013f88 <_svfiprintf_r+0xa0>
 8013fe2:	9b03      	ldr	r3, [sp, #12]
 8013fe4:	1d19      	adds	r1, r3, #4
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	9103      	str	r1, [sp, #12]
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	bfbb      	ittet	lt
 8013fee:	425b      	neglt	r3, r3
 8013ff0:	f042 0202 	orrlt.w	r2, r2, #2
 8013ff4:	9307      	strge	r3, [sp, #28]
 8013ff6:	9307      	strlt	r3, [sp, #28]
 8013ff8:	bfb8      	it	lt
 8013ffa:	9204      	strlt	r2, [sp, #16]
 8013ffc:	7823      	ldrb	r3, [r4, #0]
 8013ffe:	2b2e      	cmp	r3, #46	@ 0x2e
 8014000:	d10a      	bne.n	8014018 <_svfiprintf_r+0x130>
 8014002:	7863      	ldrb	r3, [r4, #1]
 8014004:	2b2a      	cmp	r3, #42	@ 0x2a
 8014006:	d132      	bne.n	801406e <_svfiprintf_r+0x186>
 8014008:	9b03      	ldr	r3, [sp, #12]
 801400a:	1d1a      	adds	r2, r3, #4
 801400c:	681b      	ldr	r3, [r3, #0]
 801400e:	9203      	str	r2, [sp, #12]
 8014010:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014014:	3402      	adds	r4, #2
 8014016:	9305      	str	r3, [sp, #20]
 8014018:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80140dc <_svfiprintf_r+0x1f4>
 801401c:	7821      	ldrb	r1, [r4, #0]
 801401e:	2203      	movs	r2, #3
 8014020:	4650      	mov	r0, sl
 8014022:	f7ec f95d 	bl	80002e0 <memchr>
 8014026:	b138      	cbz	r0, 8014038 <_svfiprintf_r+0x150>
 8014028:	9b04      	ldr	r3, [sp, #16]
 801402a:	eba0 000a 	sub.w	r0, r0, sl
 801402e:	2240      	movs	r2, #64	@ 0x40
 8014030:	4082      	lsls	r2, r0
 8014032:	4313      	orrs	r3, r2
 8014034:	3401      	adds	r4, #1
 8014036:	9304      	str	r3, [sp, #16]
 8014038:	f814 1b01 	ldrb.w	r1, [r4], #1
 801403c:	4824      	ldr	r0, [pc, #144]	@ (80140d0 <_svfiprintf_r+0x1e8>)
 801403e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014042:	2206      	movs	r2, #6
 8014044:	f7ec f94c 	bl	80002e0 <memchr>
 8014048:	2800      	cmp	r0, #0
 801404a:	d036      	beq.n	80140ba <_svfiprintf_r+0x1d2>
 801404c:	4b21      	ldr	r3, [pc, #132]	@ (80140d4 <_svfiprintf_r+0x1ec>)
 801404e:	bb1b      	cbnz	r3, 8014098 <_svfiprintf_r+0x1b0>
 8014050:	9b03      	ldr	r3, [sp, #12]
 8014052:	3307      	adds	r3, #7
 8014054:	f023 0307 	bic.w	r3, r3, #7
 8014058:	3308      	adds	r3, #8
 801405a:	9303      	str	r3, [sp, #12]
 801405c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801405e:	4433      	add	r3, r6
 8014060:	9309      	str	r3, [sp, #36]	@ 0x24
 8014062:	e76a      	b.n	8013f3a <_svfiprintf_r+0x52>
 8014064:	fb0c 3202 	mla	r2, ip, r2, r3
 8014068:	460c      	mov	r4, r1
 801406a:	2001      	movs	r0, #1
 801406c:	e7a8      	b.n	8013fc0 <_svfiprintf_r+0xd8>
 801406e:	2300      	movs	r3, #0
 8014070:	3401      	adds	r4, #1
 8014072:	9305      	str	r3, [sp, #20]
 8014074:	4619      	mov	r1, r3
 8014076:	f04f 0c0a 	mov.w	ip, #10
 801407a:	4620      	mov	r0, r4
 801407c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014080:	3a30      	subs	r2, #48	@ 0x30
 8014082:	2a09      	cmp	r2, #9
 8014084:	d903      	bls.n	801408e <_svfiprintf_r+0x1a6>
 8014086:	2b00      	cmp	r3, #0
 8014088:	d0c6      	beq.n	8014018 <_svfiprintf_r+0x130>
 801408a:	9105      	str	r1, [sp, #20]
 801408c:	e7c4      	b.n	8014018 <_svfiprintf_r+0x130>
 801408e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014092:	4604      	mov	r4, r0
 8014094:	2301      	movs	r3, #1
 8014096:	e7f0      	b.n	801407a <_svfiprintf_r+0x192>
 8014098:	ab03      	add	r3, sp, #12
 801409a:	9300      	str	r3, [sp, #0]
 801409c:	462a      	mov	r2, r5
 801409e:	4b0e      	ldr	r3, [pc, #56]	@ (80140d8 <_svfiprintf_r+0x1f0>)
 80140a0:	a904      	add	r1, sp, #16
 80140a2:	4638      	mov	r0, r7
 80140a4:	f7fd ff14 	bl	8011ed0 <_printf_float>
 80140a8:	1c42      	adds	r2, r0, #1
 80140aa:	4606      	mov	r6, r0
 80140ac:	d1d6      	bne.n	801405c <_svfiprintf_r+0x174>
 80140ae:	89ab      	ldrh	r3, [r5, #12]
 80140b0:	065b      	lsls	r3, r3, #25
 80140b2:	f53f af2d 	bmi.w	8013f10 <_svfiprintf_r+0x28>
 80140b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80140b8:	e72c      	b.n	8013f14 <_svfiprintf_r+0x2c>
 80140ba:	ab03      	add	r3, sp, #12
 80140bc:	9300      	str	r3, [sp, #0]
 80140be:	462a      	mov	r2, r5
 80140c0:	4b05      	ldr	r3, [pc, #20]	@ (80140d8 <_svfiprintf_r+0x1f0>)
 80140c2:	a904      	add	r1, sp, #16
 80140c4:	4638      	mov	r0, r7
 80140c6:	f7fe f98b 	bl	80123e0 <_printf_i>
 80140ca:	e7ed      	b.n	80140a8 <_svfiprintf_r+0x1c0>
 80140cc:	08014c78 	.word	0x08014c78
 80140d0:	08014c82 	.word	0x08014c82
 80140d4:	08011ed1 	.word	0x08011ed1
 80140d8:	08013e31 	.word	0x08013e31
 80140dc:	08014c7e 	.word	0x08014c7e

080140e0 <__sflush_r>:
 80140e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80140e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140e8:	0716      	lsls	r6, r2, #28
 80140ea:	4605      	mov	r5, r0
 80140ec:	460c      	mov	r4, r1
 80140ee:	d454      	bmi.n	801419a <__sflush_r+0xba>
 80140f0:	684b      	ldr	r3, [r1, #4]
 80140f2:	2b00      	cmp	r3, #0
 80140f4:	dc02      	bgt.n	80140fc <__sflush_r+0x1c>
 80140f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	dd48      	ble.n	801418e <__sflush_r+0xae>
 80140fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80140fe:	2e00      	cmp	r6, #0
 8014100:	d045      	beq.n	801418e <__sflush_r+0xae>
 8014102:	2300      	movs	r3, #0
 8014104:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014108:	682f      	ldr	r7, [r5, #0]
 801410a:	6a21      	ldr	r1, [r4, #32]
 801410c:	602b      	str	r3, [r5, #0]
 801410e:	d030      	beq.n	8014172 <__sflush_r+0x92>
 8014110:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014112:	89a3      	ldrh	r3, [r4, #12]
 8014114:	0759      	lsls	r1, r3, #29
 8014116:	d505      	bpl.n	8014124 <__sflush_r+0x44>
 8014118:	6863      	ldr	r3, [r4, #4]
 801411a:	1ad2      	subs	r2, r2, r3
 801411c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801411e:	b10b      	cbz	r3, 8014124 <__sflush_r+0x44>
 8014120:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014122:	1ad2      	subs	r2, r2, r3
 8014124:	2300      	movs	r3, #0
 8014126:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014128:	6a21      	ldr	r1, [r4, #32]
 801412a:	4628      	mov	r0, r5
 801412c:	47b0      	blx	r6
 801412e:	1c43      	adds	r3, r0, #1
 8014130:	89a3      	ldrh	r3, [r4, #12]
 8014132:	d106      	bne.n	8014142 <__sflush_r+0x62>
 8014134:	6829      	ldr	r1, [r5, #0]
 8014136:	291d      	cmp	r1, #29
 8014138:	d82b      	bhi.n	8014192 <__sflush_r+0xb2>
 801413a:	4a2a      	ldr	r2, [pc, #168]	@ (80141e4 <__sflush_r+0x104>)
 801413c:	410a      	asrs	r2, r1
 801413e:	07d6      	lsls	r6, r2, #31
 8014140:	d427      	bmi.n	8014192 <__sflush_r+0xb2>
 8014142:	2200      	movs	r2, #0
 8014144:	6062      	str	r2, [r4, #4]
 8014146:	04d9      	lsls	r1, r3, #19
 8014148:	6922      	ldr	r2, [r4, #16]
 801414a:	6022      	str	r2, [r4, #0]
 801414c:	d504      	bpl.n	8014158 <__sflush_r+0x78>
 801414e:	1c42      	adds	r2, r0, #1
 8014150:	d101      	bne.n	8014156 <__sflush_r+0x76>
 8014152:	682b      	ldr	r3, [r5, #0]
 8014154:	b903      	cbnz	r3, 8014158 <__sflush_r+0x78>
 8014156:	6560      	str	r0, [r4, #84]	@ 0x54
 8014158:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801415a:	602f      	str	r7, [r5, #0]
 801415c:	b1b9      	cbz	r1, 801418e <__sflush_r+0xae>
 801415e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014162:	4299      	cmp	r1, r3
 8014164:	d002      	beq.n	801416c <__sflush_r+0x8c>
 8014166:	4628      	mov	r0, r5
 8014168:	f7ff f9e0 	bl	801352c <_free_r>
 801416c:	2300      	movs	r3, #0
 801416e:	6363      	str	r3, [r4, #52]	@ 0x34
 8014170:	e00d      	b.n	801418e <__sflush_r+0xae>
 8014172:	2301      	movs	r3, #1
 8014174:	4628      	mov	r0, r5
 8014176:	47b0      	blx	r6
 8014178:	4602      	mov	r2, r0
 801417a:	1c50      	adds	r0, r2, #1
 801417c:	d1c9      	bne.n	8014112 <__sflush_r+0x32>
 801417e:	682b      	ldr	r3, [r5, #0]
 8014180:	2b00      	cmp	r3, #0
 8014182:	d0c6      	beq.n	8014112 <__sflush_r+0x32>
 8014184:	2b1d      	cmp	r3, #29
 8014186:	d001      	beq.n	801418c <__sflush_r+0xac>
 8014188:	2b16      	cmp	r3, #22
 801418a:	d11e      	bne.n	80141ca <__sflush_r+0xea>
 801418c:	602f      	str	r7, [r5, #0]
 801418e:	2000      	movs	r0, #0
 8014190:	e022      	b.n	80141d8 <__sflush_r+0xf8>
 8014192:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014196:	b21b      	sxth	r3, r3
 8014198:	e01b      	b.n	80141d2 <__sflush_r+0xf2>
 801419a:	690f      	ldr	r7, [r1, #16]
 801419c:	2f00      	cmp	r7, #0
 801419e:	d0f6      	beq.n	801418e <__sflush_r+0xae>
 80141a0:	0793      	lsls	r3, r2, #30
 80141a2:	680e      	ldr	r6, [r1, #0]
 80141a4:	bf08      	it	eq
 80141a6:	694b      	ldreq	r3, [r1, #20]
 80141a8:	600f      	str	r7, [r1, #0]
 80141aa:	bf18      	it	ne
 80141ac:	2300      	movne	r3, #0
 80141ae:	eba6 0807 	sub.w	r8, r6, r7
 80141b2:	608b      	str	r3, [r1, #8]
 80141b4:	f1b8 0f00 	cmp.w	r8, #0
 80141b8:	dde9      	ble.n	801418e <__sflush_r+0xae>
 80141ba:	6a21      	ldr	r1, [r4, #32]
 80141bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80141be:	4643      	mov	r3, r8
 80141c0:	463a      	mov	r2, r7
 80141c2:	4628      	mov	r0, r5
 80141c4:	47b0      	blx	r6
 80141c6:	2800      	cmp	r0, #0
 80141c8:	dc08      	bgt.n	80141dc <__sflush_r+0xfc>
 80141ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80141ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80141d2:	81a3      	strh	r3, [r4, #12]
 80141d4:	f04f 30ff 	mov.w	r0, #4294967295
 80141d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141dc:	4407      	add	r7, r0
 80141de:	eba8 0800 	sub.w	r8, r8, r0
 80141e2:	e7e7      	b.n	80141b4 <__sflush_r+0xd4>
 80141e4:	dfbffffe 	.word	0xdfbffffe

080141e8 <_fflush_r>:
 80141e8:	b538      	push	{r3, r4, r5, lr}
 80141ea:	690b      	ldr	r3, [r1, #16]
 80141ec:	4605      	mov	r5, r0
 80141ee:	460c      	mov	r4, r1
 80141f0:	b913      	cbnz	r3, 80141f8 <_fflush_r+0x10>
 80141f2:	2500      	movs	r5, #0
 80141f4:	4628      	mov	r0, r5
 80141f6:	bd38      	pop	{r3, r4, r5, pc}
 80141f8:	b118      	cbz	r0, 8014202 <_fflush_r+0x1a>
 80141fa:	6a03      	ldr	r3, [r0, #32]
 80141fc:	b90b      	cbnz	r3, 8014202 <_fflush_r+0x1a>
 80141fe:	f7fe fa9b 	bl	8012738 <__sinit>
 8014202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014206:	2b00      	cmp	r3, #0
 8014208:	d0f3      	beq.n	80141f2 <_fflush_r+0xa>
 801420a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801420c:	07d0      	lsls	r0, r2, #31
 801420e:	d404      	bmi.n	801421a <_fflush_r+0x32>
 8014210:	0599      	lsls	r1, r3, #22
 8014212:	d402      	bmi.n	801421a <_fflush_r+0x32>
 8014214:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014216:	f7fe fba6 	bl	8012966 <__retarget_lock_acquire_recursive>
 801421a:	4628      	mov	r0, r5
 801421c:	4621      	mov	r1, r4
 801421e:	f7ff ff5f 	bl	80140e0 <__sflush_r>
 8014222:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014224:	07da      	lsls	r2, r3, #31
 8014226:	4605      	mov	r5, r0
 8014228:	d4e4      	bmi.n	80141f4 <_fflush_r+0xc>
 801422a:	89a3      	ldrh	r3, [r4, #12]
 801422c:	059b      	lsls	r3, r3, #22
 801422e:	d4e1      	bmi.n	80141f4 <_fflush_r+0xc>
 8014230:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014232:	f7fe fb99 	bl	8012968 <__retarget_lock_release_recursive>
 8014236:	e7dd      	b.n	80141f4 <_fflush_r+0xc>

08014238 <memmove>:
 8014238:	4288      	cmp	r0, r1
 801423a:	b510      	push	{r4, lr}
 801423c:	eb01 0402 	add.w	r4, r1, r2
 8014240:	d902      	bls.n	8014248 <memmove+0x10>
 8014242:	4284      	cmp	r4, r0
 8014244:	4623      	mov	r3, r4
 8014246:	d807      	bhi.n	8014258 <memmove+0x20>
 8014248:	1e43      	subs	r3, r0, #1
 801424a:	42a1      	cmp	r1, r4
 801424c:	d008      	beq.n	8014260 <memmove+0x28>
 801424e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8014252:	f803 2f01 	strb.w	r2, [r3, #1]!
 8014256:	e7f8      	b.n	801424a <memmove+0x12>
 8014258:	4402      	add	r2, r0
 801425a:	4601      	mov	r1, r0
 801425c:	428a      	cmp	r2, r1
 801425e:	d100      	bne.n	8014262 <memmove+0x2a>
 8014260:	bd10      	pop	{r4, pc}
 8014262:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8014266:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801426a:	e7f7      	b.n	801425c <memmove+0x24>

0801426c <_sbrk_r>:
 801426c:	b538      	push	{r3, r4, r5, lr}
 801426e:	4d06      	ldr	r5, [pc, #24]	@ (8014288 <_sbrk_r+0x1c>)
 8014270:	2300      	movs	r3, #0
 8014272:	4604      	mov	r4, r0
 8014274:	4608      	mov	r0, r1
 8014276:	602b      	str	r3, [r5, #0]
 8014278:	f7ed fb8c 	bl	8001994 <_sbrk>
 801427c:	1c43      	adds	r3, r0, #1
 801427e:	d102      	bne.n	8014286 <_sbrk_r+0x1a>
 8014280:	682b      	ldr	r3, [r5, #0]
 8014282:	b103      	cbz	r3, 8014286 <_sbrk_r+0x1a>
 8014284:	6023      	str	r3, [r4, #0]
 8014286:	bd38      	pop	{r3, r4, r5, pc}
 8014288:	24002728 	.word	0x24002728

0801428c <memcpy>:
 801428c:	440a      	add	r2, r1
 801428e:	4291      	cmp	r1, r2
 8014290:	f100 33ff 	add.w	r3, r0, #4294967295
 8014294:	d100      	bne.n	8014298 <memcpy+0xc>
 8014296:	4770      	bx	lr
 8014298:	b510      	push	{r4, lr}
 801429a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801429e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80142a2:	4291      	cmp	r1, r2
 80142a4:	d1f9      	bne.n	801429a <memcpy+0xe>
 80142a6:	bd10      	pop	{r4, pc}

080142a8 <__assert_func>:
 80142a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80142aa:	4614      	mov	r4, r2
 80142ac:	461a      	mov	r2, r3
 80142ae:	4b09      	ldr	r3, [pc, #36]	@ (80142d4 <__assert_func+0x2c>)
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	4605      	mov	r5, r0
 80142b4:	68d8      	ldr	r0, [r3, #12]
 80142b6:	b954      	cbnz	r4, 80142ce <__assert_func+0x26>
 80142b8:	4b07      	ldr	r3, [pc, #28]	@ (80142d8 <__assert_func+0x30>)
 80142ba:	461c      	mov	r4, r3
 80142bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80142c0:	9100      	str	r1, [sp, #0]
 80142c2:	462b      	mov	r3, r5
 80142c4:	4905      	ldr	r1, [pc, #20]	@ (80142dc <__assert_func+0x34>)
 80142c6:	f000 f86f 	bl	80143a8 <fiprintf>
 80142ca:	f000 f87f 	bl	80143cc <abort>
 80142ce:	4b04      	ldr	r3, [pc, #16]	@ (80142e0 <__assert_func+0x38>)
 80142d0:	e7f4      	b.n	80142bc <__assert_func+0x14>
 80142d2:	bf00      	nop
 80142d4:	24000134 	.word	0x24000134
 80142d8:	08014cce 	.word	0x08014cce
 80142dc:	08014ca0 	.word	0x08014ca0
 80142e0:	08014c93 	.word	0x08014c93

080142e4 <_calloc_r>:
 80142e4:	b570      	push	{r4, r5, r6, lr}
 80142e6:	fba1 5402 	umull	r5, r4, r1, r2
 80142ea:	b93c      	cbnz	r4, 80142fc <_calloc_r+0x18>
 80142ec:	4629      	mov	r1, r5
 80142ee:	f7ff f991 	bl	8013614 <_malloc_r>
 80142f2:	4606      	mov	r6, r0
 80142f4:	b928      	cbnz	r0, 8014302 <_calloc_r+0x1e>
 80142f6:	2600      	movs	r6, #0
 80142f8:	4630      	mov	r0, r6
 80142fa:	bd70      	pop	{r4, r5, r6, pc}
 80142fc:	220c      	movs	r2, #12
 80142fe:	6002      	str	r2, [r0, #0]
 8014300:	e7f9      	b.n	80142f6 <_calloc_r+0x12>
 8014302:	462a      	mov	r2, r5
 8014304:	4621      	mov	r1, r4
 8014306:	f7fe fab0 	bl	801286a <memset>
 801430a:	e7f5      	b.n	80142f8 <_calloc_r+0x14>

0801430c <__ascii_mbtowc>:
 801430c:	b082      	sub	sp, #8
 801430e:	b901      	cbnz	r1, 8014312 <__ascii_mbtowc+0x6>
 8014310:	a901      	add	r1, sp, #4
 8014312:	b142      	cbz	r2, 8014326 <__ascii_mbtowc+0x1a>
 8014314:	b14b      	cbz	r3, 801432a <__ascii_mbtowc+0x1e>
 8014316:	7813      	ldrb	r3, [r2, #0]
 8014318:	600b      	str	r3, [r1, #0]
 801431a:	7812      	ldrb	r2, [r2, #0]
 801431c:	1e10      	subs	r0, r2, #0
 801431e:	bf18      	it	ne
 8014320:	2001      	movne	r0, #1
 8014322:	b002      	add	sp, #8
 8014324:	4770      	bx	lr
 8014326:	4610      	mov	r0, r2
 8014328:	e7fb      	b.n	8014322 <__ascii_mbtowc+0x16>
 801432a:	f06f 0001 	mvn.w	r0, #1
 801432e:	e7f8      	b.n	8014322 <__ascii_mbtowc+0x16>

08014330 <_realloc_r>:
 8014330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014334:	4680      	mov	r8, r0
 8014336:	4615      	mov	r5, r2
 8014338:	460c      	mov	r4, r1
 801433a:	b921      	cbnz	r1, 8014346 <_realloc_r+0x16>
 801433c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014340:	4611      	mov	r1, r2
 8014342:	f7ff b967 	b.w	8013614 <_malloc_r>
 8014346:	b92a      	cbnz	r2, 8014354 <_realloc_r+0x24>
 8014348:	f7ff f8f0 	bl	801352c <_free_r>
 801434c:	2400      	movs	r4, #0
 801434e:	4620      	mov	r0, r4
 8014350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014354:	f000 f841 	bl	80143da <_malloc_usable_size_r>
 8014358:	4285      	cmp	r5, r0
 801435a:	4606      	mov	r6, r0
 801435c:	d802      	bhi.n	8014364 <_realloc_r+0x34>
 801435e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8014362:	d8f4      	bhi.n	801434e <_realloc_r+0x1e>
 8014364:	4629      	mov	r1, r5
 8014366:	4640      	mov	r0, r8
 8014368:	f7ff f954 	bl	8013614 <_malloc_r>
 801436c:	4607      	mov	r7, r0
 801436e:	2800      	cmp	r0, #0
 8014370:	d0ec      	beq.n	801434c <_realloc_r+0x1c>
 8014372:	42b5      	cmp	r5, r6
 8014374:	462a      	mov	r2, r5
 8014376:	4621      	mov	r1, r4
 8014378:	bf28      	it	cs
 801437a:	4632      	movcs	r2, r6
 801437c:	f7ff ff86 	bl	801428c <memcpy>
 8014380:	4621      	mov	r1, r4
 8014382:	4640      	mov	r0, r8
 8014384:	f7ff f8d2 	bl	801352c <_free_r>
 8014388:	463c      	mov	r4, r7
 801438a:	e7e0      	b.n	801434e <_realloc_r+0x1e>

0801438c <__ascii_wctomb>:
 801438c:	4603      	mov	r3, r0
 801438e:	4608      	mov	r0, r1
 8014390:	b141      	cbz	r1, 80143a4 <__ascii_wctomb+0x18>
 8014392:	2aff      	cmp	r2, #255	@ 0xff
 8014394:	d904      	bls.n	80143a0 <__ascii_wctomb+0x14>
 8014396:	228a      	movs	r2, #138	@ 0x8a
 8014398:	601a      	str	r2, [r3, #0]
 801439a:	f04f 30ff 	mov.w	r0, #4294967295
 801439e:	4770      	bx	lr
 80143a0:	700a      	strb	r2, [r1, #0]
 80143a2:	2001      	movs	r0, #1
 80143a4:	4770      	bx	lr
	...

080143a8 <fiprintf>:
 80143a8:	b40e      	push	{r1, r2, r3}
 80143aa:	b503      	push	{r0, r1, lr}
 80143ac:	4601      	mov	r1, r0
 80143ae:	ab03      	add	r3, sp, #12
 80143b0:	4805      	ldr	r0, [pc, #20]	@ (80143c8 <fiprintf+0x20>)
 80143b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80143b6:	6800      	ldr	r0, [r0, #0]
 80143b8:	9301      	str	r3, [sp, #4]
 80143ba:	f000 f83f 	bl	801443c <_vfiprintf_r>
 80143be:	b002      	add	sp, #8
 80143c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80143c4:	b003      	add	sp, #12
 80143c6:	4770      	bx	lr
 80143c8:	24000134 	.word	0x24000134

080143cc <abort>:
 80143cc:	b508      	push	{r3, lr}
 80143ce:	2006      	movs	r0, #6
 80143d0:	f000 fa08 	bl	80147e4 <raise>
 80143d4:	2001      	movs	r0, #1
 80143d6:	f7ed fa65 	bl	80018a4 <_exit>

080143da <_malloc_usable_size_r>:
 80143da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80143de:	1f18      	subs	r0, r3, #4
 80143e0:	2b00      	cmp	r3, #0
 80143e2:	bfbc      	itt	lt
 80143e4:	580b      	ldrlt	r3, [r1, r0]
 80143e6:	18c0      	addlt	r0, r0, r3
 80143e8:	4770      	bx	lr

080143ea <__sfputc_r>:
 80143ea:	6893      	ldr	r3, [r2, #8]
 80143ec:	3b01      	subs	r3, #1
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	b410      	push	{r4}
 80143f2:	6093      	str	r3, [r2, #8]
 80143f4:	da08      	bge.n	8014408 <__sfputc_r+0x1e>
 80143f6:	6994      	ldr	r4, [r2, #24]
 80143f8:	42a3      	cmp	r3, r4
 80143fa:	db01      	blt.n	8014400 <__sfputc_r+0x16>
 80143fc:	290a      	cmp	r1, #10
 80143fe:	d103      	bne.n	8014408 <__sfputc_r+0x1e>
 8014400:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014404:	f000 b932 	b.w	801466c <__swbuf_r>
 8014408:	6813      	ldr	r3, [r2, #0]
 801440a:	1c58      	adds	r0, r3, #1
 801440c:	6010      	str	r0, [r2, #0]
 801440e:	7019      	strb	r1, [r3, #0]
 8014410:	4608      	mov	r0, r1
 8014412:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014416:	4770      	bx	lr

08014418 <__sfputs_r>:
 8014418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801441a:	4606      	mov	r6, r0
 801441c:	460f      	mov	r7, r1
 801441e:	4614      	mov	r4, r2
 8014420:	18d5      	adds	r5, r2, r3
 8014422:	42ac      	cmp	r4, r5
 8014424:	d101      	bne.n	801442a <__sfputs_r+0x12>
 8014426:	2000      	movs	r0, #0
 8014428:	e007      	b.n	801443a <__sfputs_r+0x22>
 801442a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801442e:	463a      	mov	r2, r7
 8014430:	4630      	mov	r0, r6
 8014432:	f7ff ffda 	bl	80143ea <__sfputc_r>
 8014436:	1c43      	adds	r3, r0, #1
 8014438:	d1f3      	bne.n	8014422 <__sfputs_r+0xa>
 801443a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801443c <_vfiprintf_r>:
 801443c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014440:	460d      	mov	r5, r1
 8014442:	b09d      	sub	sp, #116	@ 0x74
 8014444:	4614      	mov	r4, r2
 8014446:	4698      	mov	r8, r3
 8014448:	4606      	mov	r6, r0
 801444a:	b118      	cbz	r0, 8014454 <_vfiprintf_r+0x18>
 801444c:	6a03      	ldr	r3, [r0, #32]
 801444e:	b90b      	cbnz	r3, 8014454 <_vfiprintf_r+0x18>
 8014450:	f7fe f972 	bl	8012738 <__sinit>
 8014454:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014456:	07d9      	lsls	r1, r3, #31
 8014458:	d405      	bmi.n	8014466 <_vfiprintf_r+0x2a>
 801445a:	89ab      	ldrh	r3, [r5, #12]
 801445c:	059a      	lsls	r2, r3, #22
 801445e:	d402      	bmi.n	8014466 <_vfiprintf_r+0x2a>
 8014460:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014462:	f7fe fa80 	bl	8012966 <__retarget_lock_acquire_recursive>
 8014466:	89ab      	ldrh	r3, [r5, #12]
 8014468:	071b      	lsls	r3, r3, #28
 801446a:	d501      	bpl.n	8014470 <_vfiprintf_r+0x34>
 801446c:	692b      	ldr	r3, [r5, #16]
 801446e:	b99b      	cbnz	r3, 8014498 <_vfiprintf_r+0x5c>
 8014470:	4629      	mov	r1, r5
 8014472:	4630      	mov	r0, r6
 8014474:	f000 f938 	bl	80146e8 <__swsetup_r>
 8014478:	b170      	cbz	r0, 8014498 <_vfiprintf_r+0x5c>
 801447a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801447c:	07dc      	lsls	r4, r3, #31
 801447e:	d504      	bpl.n	801448a <_vfiprintf_r+0x4e>
 8014480:	f04f 30ff 	mov.w	r0, #4294967295
 8014484:	b01d      	add	sp, #116	@ 0x74
 8014486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801448a:	89ab      	ldrh	r3, [r5, #12]
 801448c:	0598      	lsls	r0, r3, #22
 801448e:	d4f7      	bmi.n	8014480 <_vfiprintf_r+0x44>
 8014490:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014492:	f7fe fa69 	bl	8012968 <__retarget_lock_release_recursive>
 8014496:	e7f3      	b.n	8014480 <_vfiprintf_r+0x44>
 8014498:	2300      	movs	r3, #0
 801449a:	9309      	str	r3, [sp, #36]	@ 0x24
 801449c:	2320      	movs	r3, #32
 801449e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80144a2:	f8cd 800c 	str.w	r8, [sp, #12]
 80144a6:	2330      	movs	r3, #48	@ 0x30
 80144a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014658 <_vfiprintf_r+0x21c>
 80144ac:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80144b0:	f04f 0901 	mov.w	r9, #1
 80144b4:	4623      	mov	r3, r4
 80144b6:	469a      	mov	sl, r3
 80144b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80144bc:	b10a      	cbz	r2, 80144c2 <_vfiprintf_r+0x86>
 80144be:	2a25      	cmp	r2, #37	@ 0x25
 80144c0:	d1f9      	bne.n	80144b6 <_vfiprintf_r+0x7a>
 80144c2:	ebba 0b04 	subs.w	fp, sl, r4
 80144c6:	d00b      	beq.n	80144e0 <_vfiprintf_r+0xa4>
 80144c8:	465b      	mov	r3, fp
 80144ca:	4622      	mov	r2, r4
 80144cc:	4629      	mov	r1, r5
 80144ce:	4630      	mov	r0, r6
 80144d0:	f7ff ffa2 	bl	8014418 <__sfputs_r>
 80144d4:	3001      	adds	r0, #1
 80144d6:	f000 80a7 	beq.w	8014628 <_vfiprintf_r+0x1ec>
 80144da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80144dc:	445a      	add	r2, fp
 80144de:	9209      	str	r2, [sp, #36]	@ 0x24
 80144e0:	f89a 3000 	ldrb.w	r3, [sl]
 80144e4:	2b00      	cmp	r3, #0
 80144e6:	f000 809f 	beq.w	8014628 <_vfiprintf_r+0x1ec>
 80144ea:	2300      	movs	r3, #0
 80144ec:	f04f 32ff 	mov.w	r2, #4294967295
 80144f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80144f4:	f10a 0a01 	add.w	sl, sl, #1
 80144f8:	9304      	str	r3, [sp, #16]
 80144fa:	9307      	str	r3, [sp, #28]
 80144fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014500:	931a      	str	r3, [sp, #104]	@ 0x68
 8014502:	4654      	mov	r4, sl
 8014504:	2205      	movs	r2, #5
 8014506:	f814 1b01 	ldrb.w	r1, [r4], #1
 801450a:	4853      	ldr	r0, [pc, #332]	@ (8014658 <_vfiprintf_r+0x21c>)
 801450c:	f7eb fee8 	bl	80002e0 <memchr>
 8014510:	9a04      	ldr	r2, [sp, #16]
 8014512:	b9d8      	cbnz	r0, 801454c <_vfiprintf_r+0x110>
 8014514:	06d1      	lsls	r1, r2, #27
 8014516:	bf44      	itt	mi
 8014518:	2320      	movmi	r3, #32
 801451a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801451e:	0713      	lsls	r3, r2, #28
 8014520:	bf44      	itt	mi
 8014522:	232b      	movmi	r3, #43	@ 0x2b
 8014524:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014528:	f89a 3000 	ldrb.w	r3, [sl]
 801452c:	2b2a      	cmp	r3, #42	@ 0x2a
 801452e:	d015      	beq.n	801455c <_vfiprintf_r+0x120>
 8014530:	9a07      	ldr	r2, [sp, #28]
 8014532:	4654      	mov	r4, sl
 8014534:	2000      	movs	r0, #0
 8014536:	f04f 0c0a 	mov.w	ip, #10
 801453a:	4621      	mov	r1, r4
 801453c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014540:	3b30      	subs	r3, #48	@ 0x30
 8014542:	2b09      	cmp	r3, #9
 8014544:	d94b      	bls.n	80145de <_vfiprintf_r+0x1a2>
 8014546:	b1b0      	cbz	r0, 8014576 <_vfiprintf_r+0x13a>
 8014548:	9207      	str	r2, [sp, #28]
 801454a:	e014      	b.n	8014576 <_vfiprintf_r+0x13a>
 801454c:	eba0 0308 	sub.w	r3, r0, r8
 8014550:	fa09 f303 	lsl.w	r3, r9, r3
 8014554:	4313      	orrs	r3, r2
 8014556:	9304      	str	r3, [sp, #16]
 8014558:	46a2      	mov	sl, r4
 801455a:	e7d2      	b.n	8014502 <_vfiprintf_r+0xc6>
 801455c:	9b03      	ldr	r3, [sp, #12]
 801455e:	1d19      	adds	r1, r3, #4
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	9103      	str	r1, [sp, #12]
 8014564:	2b00      	cmp	r3, #0
 8014566:	bfbb      	ittet	lt
 8014568:	425b      	neglt	r3, r3
 801456a:	f042 0202 	orrlt.w	r2, r2, #2
 801456e:	9307      	strge	r3, [sp, #28]
 8014570:	9307      	strlt	r3, [sp, #28]
 8014572:	bfb8      	it	lt
 8014574:	9204      	strlt	r2, [sp, #16]
 8014576:	7823      	ldrb	r3, [r4, #0]
 8014578:	2b2e      	cmp	r3, #46	@ 0x2e
 801457a:	d10a      	bne.n	8014592 <_vfiprintf_r+0x156>
 801457c:	7863      	ldrb	r3, [r4, #1]
 801457e:	2b2a      	cmp	r3, #42	@ 0x2a
 8014580:	d132      	bne.n	80145e8 <_vfiprintf_r+0x1ac>
 8014582:	9b03      	ldr	r3, [sp, #12]
 8014584:	1d1a      	adds	r2, r3, #4
 8014586:	681b      	ldr	r3, [r3, #0]
 8014588:	9203      	str	r2, [sp, #12]
 801458a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801458e:	3402      	adds	r4, #2
 8014590:	9305      	str	r3, [sp, #20]
 8014592:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014668 <_vfiprintf_r+0x22c>
 8014596:	7821      	ldrb	r1, [r4, #0]
 8014598:	2203      	movs	r2, #3
 801459a:	4650      	mov	r0, sl
 801459c:	f7eb fea0 	bl	80002e0 <memchr>
 80145a0:	b138      	cbz	r0, 80145b2 <_vfiprintf_r+0x176>
 80145a2:	9b04      	ldr	r3, [sp, #16]
 80145a4:	eba0 000a 	sub.w	r0, r0, sl
 80145a8:	2240      	movs	r2, #64	@ 0x40
 80145aa:	4082      	lsls	r2, r0
 80145ac:	4313      	orrs	r3, r2
 80145ae:	3401      	adds	r4, #1
 80145b0:	9304      	str	r3, [sp, #16]
 80145b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80145b6:	4829      	ldr	r0, [pc, #164]	@ (801465c <_vfiprintf_r+0x220>)
 80145b8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80145bc:	2206      	movs	r2, #6
 80145be:	f7eb fe8f 	bl	80002e0 <memchr>
 80145c2:	2800      	cmp	r0, #0
 80145c4:	d03f      	beq.n	8014646 <_vfiprintf_r+0x20a>
 80145c6:	4b26      	ldr	r3, [pc, #152]	@ (8014660 <_vfiprintf_r+0x224>)
 80145c8:	bb1b      	cbnz	r3, 8014612 <_vfiprintf_r+0x1d6>
 80145ca:	9b03      	ldr	r3, [sp, #12]
 80145cc:	3307      	adds	r3, #7
 80145ce:	f023 0307 	bic.w	r3, r3, #7
 80145d2:	3308      	adds	r3, #8
 80145d4:	9303      	str	r3, [sp, #12]
 80145d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80145d8:	443b      	add	r3, r7
 80145da:	9309      	str	r3, [sp, #36]	@ 0x24
 80145dc:	e76a      	b.n	80144b4 <_vfiprintf_r+0x78>
 80145de:	fb0c 3202 	mla	r2, ip, r2, r3
 80145e2:	460c      	mov	r4, r1
 80145e4:	2001      	movs	r0, #1
 80145e6:	e7a8      	b.n	801453a <_vfiprintf_r+0xfe>
 80145e8:	2300      	movs	r3, #0
 80145ea:	3401      	adds	r4, #1
 80145ec:	9305      	str	r3, [sp, #20]
 80145ee:	4619      	mov	r1, r3
 80145f0:	f04f 0c0a 	mov.w	ip, #10
 80145f4:	4620      	mov	r0, r4
 80145f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80145fa:	3a30      	subs	r2, #48	@ 0x30
 80145fc:	2a09      	cmp	r2, #9
 80145fe:	d903      	bls.n	8014608 <_vfiprintf_r+0x1cc>
 8014600:	2b00      	cmp	r3, #0
 8014602:	d0c6      	beq.n	8014592 <_vfiprintf_r+0x156>
 8014604:	9105      	str	r1, [sp, #20]
 8014606:	e7c4      	b.n	8014592 <_vfiprintf_r+0x156>
 8014608:	fb0c 2101 	mla	r1, ip, r1, r2
 801460c:	4604      	mov	r4, r0
 801460e:	2301      	movs	r3, #1
 8014610:	e7f0      	b.n	80145f4 <_vfiprintf_r+0x1b8>
 8014612:	ab03      	add	r3, sp, #12
 8014614:	9300      	str	r3, [sp, #0]
 8014616:	462a      	mov	r2, r5
 8014618:	4b12      	ldr	r3, [pc, #72]	@ (8014664 <_vfiprintf_r+0x228>)
 801461a:	a904      	add	r1, sp, #16
 801461c:	4630      	mov	r0, r6
 801461e:	f7fd fc57 	bl	8011ed0 <_printf_float>
 8014622:	4607      	mov	r7, r0
 8014624:	1c78      	adds	r0, r7, #1
 8014626:	d1d6      	bne.n	80145d6 <_vfiprintf_r+0x19a>
 8014628:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801462a:	07d9      	lsls	r1, r3, #31
 801462c:	d405      	bmi.n	801463a <_vfiprintf_r+0x1fe>
 801462e:	89ab      	ldrh	r3, [r5, #12]
 8014630:	059a      	lsls	r2, r3, #22
 8014632:	d402      	bmi.n	801463a <_vfiprintf_r+0x1fe>
 8014634:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014636:	f7fe f997 	bl	8012968 <__retarget_lock_release_recursive>
 801463a:	89ab      	ldrh	r3, [r5, #12]
 801463c:	065b      	lsls	r3, r3, #25
 801463e:	f53f af1f 	bmi.w	8014480 <_vfiprintf_r+0x44>
 8014642:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014644:	e71e      	b.n	8014484 <_vfiprintf_r+0x48>
 8014646:	ab03      	add	r3, sp, #12
 8014648:	9300      	str	r3, [sp, #0]
 801464a:	462a      	mov	r2, r5
 801464c:	4b05      	ldr	r3, [pc, #20]	@ (8014664 <_vfiprintf_r+0x228>)
 801464e:	a904      	add	r1, sp, #16
 8014650:	4630      	mov	r0, r6
 8014652:	f7fd fec5 	bl	80123e0 <_printf_i>
 8014656:	e7e4      	b.n	8014622 <_vfiprintf_r+0x1e6>
 8014658:	08014c78 	.word	0x08014c78
 801465c:	08014c82 	.word	0x08014c82
 8014660:	08011ed1 	.word	0x08011ed1
 8014664:	08014419 	.word	0x08014419
 8014668:	08014c7e 	.word	0x08014c7e

0801466c <__swbuf_r>:
 801466c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801466e:	460e      	mov	r6, r1
 8014670:	4614      	mov	r4, r2
 8014672:	4605      	mov	r5, r0
 8014674:	b118      	cbz	r0, 801467e <__swbuf_r+0x12>
 8014676:	6a03      	ldr	r3, [r0, #32]
 8014678:	b90b      	cbnz	r3, 801467e <__swbuf_r+0x12>
 801467a:	f7fe f85d 	bl	8012738 <__sinit>
 801467e:	69a3      	ldr	r3, [r4, #24]
 8014680:	60a3      	str	r3, [r4, #8]
 8014682:	89a3      	ldrh	r3, [r4, #12]
 8014684:	071a      	lsls	r2, r3, #28
 8014686:	d501      	bpl.n	801468c <__swbuf_r+0x20>
 8014688:	6923      	ldr	r3, [r4, #16]
 801468a:	b943      	cbnz	r3, 801469e <__swbuf_r+0x32>
 801468c:	4621      	mov	r1, r4
 801468e:	4628      	mov	r0, r5
 8014690:	f000 f82a 	bl	80146e8 <__swsetup_r>
 8014694:	b118      	cbz	r0, 801469e <__swbuf_r+0x32>
 8014696:	f04f 37ff 	mov.w	r7, #4294967295
 801469a:	4638      	mov	r0, r7
 801469c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801469e:	6823      	ldr	r3, [r4, #0]
 80146a0:	6922      	ldr	r2, [r4, #16]
 80146a2:	1a98      	subs	r0, r3, r2
 80146a4:	6963      	ldr	r3, [r4, #20]
 80146a6:	b2f6      	uxtb	r6, r6
 80146a8:	4283      	cmp	r3, r0
 80146aa:	4637      	mov	r7, r6
 80146ac:	dc05      	bgt.n	80146ba <__swbuf_r+0x4e>
 80146ae:	4621      	mov	r1, r4
 80146b0:	4628      	mov	r0, r5
 80146b2:	f7ff fd99 	bl	80141e8 <_fflush_r>
 80146b6:	2800      	cmp	r0, #0
 80146b8:	d1ed      	bne.n	8014696 <__swbuf_r+0x2a>
 80146ba:	68a3      	ldr	r3, [r4, #8]
 80146bc:	3b01      	subs	r3, #1
 80146be:	60a3      	str	r3, [r4, #8]
 80146c0:	6823      	ldr	r3, [r4, #0]
 80146c2:	1c5a      	adds	r2, r3, #1
 80146c4:	6022      	str	r2, [r4, #0]
 80146c6:	701e      	strb	r6, [r3, #0]
 80146c8:	6962      	ldr	r2, [r4, #20]
 80146ca:	1c43      	adds	r3, r0, #1
 80146cc:	429a      	cmp	r2, r3
 80146ce:	d004      	beq.n	80146da <__swbuf_r+0x6e>
 80146d0:	89a3      	ldrh	r3, [r4, #12]
 80146d2:	07db      	lsls	r3, r3, #31
 80146d4:	d5e1      	bpl.n	801469a <__swbuf_r+0x2e>
 80146d6:	2e0a      	cmp	r6, #10
 80146d8:	d1df      	bne.n	801469a <__swbuf_r+0x2e>
 80146da:	4621      	mov	r1, r4
 80146dc:	4628      	mov	r0, r5
 80146de:	f7ff fd83 	bl	80141e8 <_fflush_r>
 80146e2:	2800      	cmp	r0, #0
 80146e4:	d0d9      	beq.n	801469a <__swbuf_r+0x2e>
 80146e6:	e7d6      	b.n	8014696 <__swbuf_r+0x2a>

080146e8 <__swsetup_r>:
 80146e8:	b538      	push	{r3, r4, r5, lr}
 80146ea:	4b29      	ldr	r3, [pc, #164]	@ (8014790 <__swsetup_r+0xa8>)
 80146ec:	4605      	mov	r5, r0
 80146ee:	6818      	ldr	r0, [r3, #0]
 80146f0:	460c      	mov	r4, r1
 80146f2:	b118      	cbz	r0, 80146fc <__swsetup_r+0x14>
 80146f4:	6a03      	ldr	r3, [r0, #32]
 80146f6:	b90b      	cbnz	r3, 80146fc <__swsetup_r+0x14>
 80146f8:	f7fe f81e 	bl	8012738 <__sinit>
 80146fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014700:	0719      	lsls	r1, r3, #28
 8014702:	d422      	bmi.n	801474a <__swsetup_r+0x62>
 8014704:	06da      	lsls	r2, r3, #27
 8014706:	d407      	bmi.n	8014718 <__swsetup_r+0x30>
 8014708:	2209      	movs	r2, #9
 801470a:	602a      	str	r2, [r5, #0]
 801470c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014710:	81a3      	strh	r3, [r4, #12]
 8014712:	f04f 30ff 	mov.w	r0, #4294967295
 8014716:	e033      	b.n	8014780 <__swsetup_r+0x98>
 8014718:	0758      	lsls	r0, r3, #29
 801471a:	d512      	bpl.n	8014742 <__swsetup_r+0x5a>
 801471c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801471e:	b141      	cbz	r1, 8014732 <__swsetup_r+0x4a>
 8014720:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014724:	4299      	cmp	r1, r3
 8014726:	d002      	beq.n	801472e <__swsetup_r+0x46>
 8014728:	4628      	mov	r0, r5
 801472a:	f7fe feff 	bl	801352c <_free_r>
 801472e:	2300      	movs	r3, #0
 8014730:	6363      	str	r3, [r4, #52]	@ 0x34
 8014732:	89a3      	ldrh	r3, [r4, #12]
 8014734:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014738:	81a3      	strh	r3, [r4, #12]
 801473a:	2300      	movs	r3, #0
 801473c:	6063      	str	r3, [r4, #4]
 801473e:	6923      	ldr	r3, [r4, #16]
 8014740:	6023      	str	r3, [r4, #0]
 8014742:	89a3      	ldrh	r3, [r4, #12]
 8014744:	f043 0308 	orr.w	r3, r3, #8
 8014748:	81a3      	strh	r3, [r4, #12]
 801474a:	6923      	ldr	r3, [r4, #16]
 801474c:	b94b      	cbnz	r3, 8014762 <__swsetup_r+0x7a>
 801474e:	89a3      	ldrh	r3, [r4, #12]
 8014750:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014754:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014758:	d003      	beq.n	8014762 <__swsetup_r+0x7a>
 801475a:	4621      	mov	r1, r4
 801475c:	4628      	mov	r0, r5
 801475e:	f000 f883 	bl	8014868 <__smakebuf_r>
 8014762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014766:	f013 0201 	ands.w	r2, r3, #1
 801476a:	d00a      	beq.n	8014782 <__swsetup_r+0x9a>
 801476c:	2200      	movs	r2, #0
 801476e:	60a2      	str	r2, [r4, #8]
 8014770:	6962      	ldr	r2, [r4, #20]
 8014772:	4252      	negs	r2, r2
 8014774:	61a2      	str	r2, [r4, #24]
 8014776:	6922      	ldr	r2, [r4, #16]
 8014778:	b942      	cbnz	r2, 801478c <__swsetup_r+0xa4>
 801477a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801477e:	d1c5      	bne.n	801470c <__swsetup_r+0x24>
 8014780:	bd38      	pop	{r3, r4, r5, pc}
 8014782:	0799      	lsls	r1, r3, #30
 8014784:	bf58      	it	pl
 8014786:	6962      	ldrpl	r2, [r4, #20]
 8014788:	60a2      	str	r2, [r4, #8]
 801478a:	e7f4      	b.n	8014776 <__swsetup_r+0x8e>
 801478c:	2000      	movs	r0, #0
 801478e:	e7f7      	b.n	8014780 <__swsetup_r+0x98>
 8014790:	24000134 	.word	0x24000134

08014794 <_raise_r>:
 8014794:	291f      	cmp	r1, #31
 8014796:	b538      	push	{r3, r4, r5, lr}
 8014798:	4605      	mov	r5, r0
 801479a:	460c      	mov	r4, r1
 801479c:	d904      	bls.n	80147a8 <_raise_r+0x14>
 801479e:	2316      	movs	r3, #22
 80147a0:	6003      	str	r3, [r0, #0]
 80147a2:	f04f 30ff 	mov.w	r0, #4294967295
 80147a6:	bd38      	pop	{r3, r4, r5, pc}
 80147a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80147aa:	b112      	cbz	r2, 80147b2 <_raise_r+0x1e>
 80147ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80147b0:	b94b      	cbnz	r3, 80147c6 <_raise_r+0x32>
 80147b2:	4628      	mov	r0, r5
 80147b4:	f000 f830 	bl	8014818 <_getpid_r>
 80147b8:	4622      	mov	r2, r4
 80147ba:	4601      	mov	r1, r0
 80147bc:	4628      	mov	r0, r5
 80147be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80147c2:	f000 b817 	b.w	80147f4 <_kill_r>
 80147c6:	2b01      	cmp	r3, #1
 80147c8:	d00a      	beq.n	80147e0 <_raise_r+0x4c>
 80147ca:	1c59      	adds	r1, r3, #1
 80147cc:	d103      	bne.n	80147d6 <_raise_r+0x42>
 80147ce:	2316      	movs	r3, #22
 80147d0:	6003      	str	r3, [r0, #0]
 80147d2:	2001      	movs	r0, #1
 80147d4:	e7e7      	b.n	80147a6 <_raise_r+0x12>
 80147d6:	2100      	movs	r1, #0
 80147d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80147dc:	4620      	mov	r0, r4
 80147de:	4798      	blx	r3
 80147e0:	2000      	movs	r0, #0
 80147e2:	e7e0      	b.n	80147a6 <_raise_r+0x12>

080147e4 <raise>:
 80147e4:	4b02      	ldr	r3, [pc, #8]	@ (80147f0 <raise+0xc>)
 80147e6:	4601      	mov	r1, r0
 80147e8:	6818      	ldr	r0, [r3, #0]
 80147ea:	f7ff bfd3 	b.w	8014794 <_raise_r>
 80147ee:	bf00      	nop
 80147f0:	24000134 	.word	0x24000134

080147f4 <_kill_r>:
 80147f4:	b538      	push	{r3, r4, r5, lr}
 80147f6:	4d07      	ldr	r5, [pc, #28]	@ (8014814 <_kill_r+0x20>)
 80147f8:	2300      	movs	r3, #0
 80147fa:	4604      	mov	r4, r0
 80147fc:	4608      	mov	r0, r1
 80147fe:	4611      	mov	r1, r2
 8014800:	602b      	str	r3, [r5, #0]
 8014802:	f7ed f83f 	bl	8001884 <_kill>
 8014806:	1c43      	adds	r3, r0, #1
 8014808:	d102      	bne.n	8014810 <_kill_r+0x1c>
 801480a:	682b      	ldr	r3, [r5, #0]
 801480c:	b103      	cbz	r3, 8014810 <_kill_r+0x1c>
 801480e:	6023      	str	r3, [r4, #0]
 8014810:	bd38      	pop	{r3, r4, r5, pc}
 8014812:	bf00      	nop
 8014814:	24002728 	.word	0x24002728

08014818 <_getpid_r>:
 8014818:	f7ed b82c 	b.w	8001874 <_getpid>

0801481c <__swhatbuf_r>:
 801481c:	b570      	push	{r4, r5, r6, lr}
 801481e:	460c      	mov	r4, r1
 8014820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014824:	2900      	cmp	r1, #0
 8014826:	b096      	sub	sp, #88	@ 0x58
 8014828:	4615      	mov	r5, r2
 801482a:	461e      	mov	r6, r3
 801482c:	da0d      	bge.n	801484a <__swhatbuf_r+0x2e>
 801482e:	89a3      	ldrh	r3, [r4, #12]
 8014830:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014834:	f04f 0100 	mov.w	r1, #0
 8014838:	bf14      	ite	ne
 801483a:	2340      	movne	r3, #64	@ 0x40
 801483c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014840:	2000      	movs	r0, #0
 8014842:	6031      	str	r1, [r6, #0]
 8014844:	602b      	str	r3, [r5, #0]
 8014846:	b016      	add	sp, #88	@ 0x58
 8014848:	bd70      	pop	{r4, r5, r6, pc}
 801484a:	466a      	mov	r2, sp
 801484c:	f000 f848 	bl	80148e0 <_fstat_r>
 8014850:	2800      	cmp	r0, #0
 8014852:	dbec      	blt.n	801482e <__swhatbuf_r+0x12>
 8014854:	9901      	ldr	r1, [sp, #4]
 8014856:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801485a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801485e:	4259      	negs	r1, r3
 8014860:	4159      	adcs	r1, r3
 8014862:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014866:	e7eb      	b.n	8014840 <__swhatbuf_r+0x24>

08014868 <__smakebuf_r>:
 8014868:	898b      	ldrh	r3, [r1, #12]
 801486a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801486c:	079d      	lsls	r5, r3, #30
 801486e:	4606      	mov	r6, r0
 8014870:	460c      	mov	r4, r1
 8014872:	d507      	bpl.n	8014884 <__smakebuf_r+0x1c>
 8014874:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014878:	6023      	str	r3, [r4, #0]
 801487a:	6123      	str	r3, [r4, #16]
 801487c:	2301      	movs	r3, #1
 801487e:	6163      	str	r3, [r4, #20]
 8014880:	b003      	add	sp, #12
 8014882:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014884:	ab01      	add	r3, sp, #4
 8014886:	466a      	mov	r2, sp
 8014888:	f7ff ffc8 	bl	801481c <__swhatbuf_r>
 801488c:	9f00      	ldr	r7, [sp, #0]
 801488e:	4605      	mov	r5, r0
 8014890:	4639      	mov	r1, r7
 8014892:	4630      	mov	r0, r6
 8014894:	f7fe febe 	bl	8013614 <_malloc_r>
 8014898:	b948      	cbnz	r0, 80148ae <__smakebuf_r+0x46>
 801489a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801489e:	059a      	lsls	r2, r3, #22
 80148a0:	d4ee      	bmi.n	8014880 <__smakebuf_r+0x18>
 80148a2:	f023 0303 	bic.w	r3, r3, #3
 80148a6:	f043 0302 	orr.w	r3, r3, #2
 80148aa:	81a3      	strh	r3, [r4, #12]
 80148ac:	e7e2      	b.n	8014874 <__smakebuf_r+0xc>
 80148ae:	89a3      	ldrh	r3, [r4, #12]
 80148b0:	6020      	str	r0, [r4, #0]
 80148b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80148b6:	81a3      	strh	r3, [r4, #12]
 80148b8:	9b01      	ldr	r3, [sp, #4]
 80148ba:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80148be:	b15b      	cbz	r3, 80148d8 <__smakebuf_r+0x70>
 80148c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80148c4:	4630      	mov	r0, r6
 80148c6:	f000 f81d 	bl	8014904 <_isatty_r>
 80148ca:	b128      	cbz	r0, 80148d8 <__smakebuf_r+0x70>
 80148cc:	89a3      	ldrh	r3, [r4, #12]
 80148ce:	f023 0303 	bic.w	r3, r3, #3
 80148d2:	f043 0301 	orr.w	r3, r3, #1
 80148d6:	81a3      	strh	r3, [r4, #12]
 80148d8:	89a3      	ldrh	r3, [r4, #12]
 80148da:	431d      	orrs	r5, r3
 80148dc:	81a5      	strh	r5, [r4, #12]
 80148de:	e7cf      	b.n	8014880 <__smakebuf_r+0x18>

080148e0 <_fstat_r>:
 80148e0:	b538      	push	{r3, r4, r5, lr}
 80148e2:	4d07      	ldr	r5, [pc, #28]	@ (8014900 <_fstat_r+0x20>)
 80148e4:	2300      	movs	r3, #0
 80148e6:	4604      	mov	r4, r0
 80148e8:	4608      	mov	r0, r1
 80148ea:	4611      	mov	r1, r2
 80148ec:	602b      	str	r3, [r5, #0]
 80148ee:	f7ed f829 	bl	8001944 <_fstat>
 80148f2:	1c43      	adds	r3, r0, #1
 80148f4:	d102      	bne.n	80148fc <_fstat_r+0x1c>
 80148f6:	682b      	ldr	r3, [r5, #0]
 80148f8:	b103      	cbz	r3, 80148fc <_fstat_r+0x1c>
 80148fa:	6023      	str	r3, [r4, #0]
 80148fc:	bd38      	pop	{r3, r4, r5, pc}
 80148fe:	bf00      	nop
 8014900:	24002728 	.word	0x24002728

08014904 <_isatty_r>:
 8014904:	b538      	push	{r3, r4, r5, lr}
 8014906:	4d06      	ldr	r5, [pc, #24]	@ (8014920 <_isatty_r+0x1c>)
 8014908:	2300      	movs	r3, #0
 801490a:	4604      	mov	r4, r0
 801490c:	4608      	mov	r0, r1
 801490e:	602b      	str	r3, [r5, #0]
 8014910:	f7ed f828 	bl	8001964 <_isatty>
 8014914:	1c43      	adds	r3, r0, #1
 8014916:	d102      	bne.n	801491e <_isatty_r+0x1a>
 8014918:	682b      	ldr	r3, [r5, #0]
 801491a:	b103      	cbz	r3, 801491e <_isatty_r+0x1a>
 801491c:	6023      	str	r3, [r4, #0]
 801491e:	bd38      	pop	{r3, r4, r5, pc}
 8014920:	24002728 	.word	0x24002728

08014924 <lrintf>:
 8014924:	ee10 3a10 	vmov	r3, s0
 8014928:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801492c:	f1a2 007f 	sub.w	r0, r2, #127	@ 0x7f
 8014930:	281e      	cmp	r0, #30
 8014932:	b082      	sub	sp, #8
 8014934:	dc2f      	bgt.n	8014996 <lrintf+0x72>
 8014936:	1c41      	adds	r1, r0, #1
 8014938:	da02      	bge.n	8014940 <lrintf+0x1c>
 801493a:	2000      	movs	r0, #0
 801493c:	b002      	add	sp, #8
 801493e:	4770      	bx	lr
 8014940:	2816      	cmp	r0, #22
 8014942:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8014946:	dd0a      	ble.n	801495e <lrintf+0x3a>
 8014948:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801494c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8014950:	3a96      	subs	r2, #150	@ 0x96
 8014952:	fa03 f002 	lsl.w	r0, r3, r2
 8014956:	2900      	cmp	r1, #0
 8014958:	d0f0      	beq.n	801493c <lrintf+0x18>
 801495a:	4240      	negs	r0, r0
 801495c:	e7ee      	b.n	801493c <lrintf+0x18>
 801495e:	4b10      	ldr	r3, [pc, #64]	@ (80149a0 <lrintf+0x7c>)
 8014960:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8014964:	ed93 7a00 	vldr	s14, [r3]
 8014968:	ee37 0a00 	vadd.f32	s0, s14, s0
 801496c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8014970:	eddd 7a01 	vldr	s15, [sp, #4]
 8014974:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014978:	ee17 3a90 	vmov	r3, s15
 801497c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8014980:	d0db      	beq.n	801493a <lrintf+0x16>
 8014982:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8014986:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 801498a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801498e:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8014992:	40d8      	lsrs	r0, r3
 8014994:	e7df      	b.n	8014956 <lrintf+0x32>
 8014996:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801499a:	ee17 0a90 	vmov	r0, s15
 801499e:	e7cd      	b.n	801493c <lrintf+0x18>
 80149a0:	08014dd0 	.word	0x08014dd0

080149a4 <_init>:
 80149a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149a6:	bf00      	nop
 80149a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80149aa:	bc08      	pop	{r3}
 80149ac:	469e      	mov	lr, r3
 80149ae:	4770      	bx	lr

080149b0 <_fini>:
 80149b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149b2:	bf00      	nop
 80149b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80149b6:	bc08      	pop	{r3}
 80149b8:	469e      	mov	lr, r3
 80149ba:	4770      	bx	lr
