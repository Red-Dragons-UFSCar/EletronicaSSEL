
Rx_M4_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014794  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000400  08014a38  08014a38  00015a38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014e38  08014e38  000162f4  2**0
                  CONTENTS
  4 .ARM          00000008  08014e38  08014e38  00015e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014e40  08014e40  000162f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014e40  08014e40  00015e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08014e44  08014e44  00015e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002f4  24000000  08014e48  00016000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000243c  240002f4  0801513c  000162f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24002730  0801513c  00016730  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000162f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029ab3  00000000  00000000  00016322  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000561e  00000000  00000000  0003fdd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f60  00000000  00000000  000453f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001817  00000000  00000000  00047358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00042939  00000000  00000000  00048b6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002d92c  00000000  00000000  0008b4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a2d26  00000000  00000000  000b8dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0025bafa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000092ac  00000000  00000000  0025bb40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00264dec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002f4 	.word	0x240002f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08014a1c 	.word	0x08014a1c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002f8 	.word	0x240002f8
 80002dc:	08014a1c 	.word	0x08014a1c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	@ 0x28
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80007be:	463b      	mov	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]
 80007c6:	609a      	str	r2, [r3, #8]
 80007c8:	60da      	str	r2, [r3, #12]
 80007ca:	611a      	str	r2, [r3, #16]
 80007cc:	615a      	str	r2, [r3, #20]
 80007ce:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80007d0:	4b30      	ldr	r3, [pc, #192]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007d2:	4a31      	ldr	r2, [pc, #196]	@ (8000898 <MX_ADC1_Init+0xec>)
 80007d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80007d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007d8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80007dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 80007de:	4b2d      	ldr	r3, [pc, #180]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007e4:	4b2b      	ldr	r3, [pc, #172]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007ec:	2204      	movs	r2, #4
 80007ee:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007f0:	4b28      	ldr	r3, [pc, #160]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007f6:	4b27      	ldr	r3, [pc, #156]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 80007fc:	4b25      	ldr	r3, [pc, #148]	@ (8000894 <MX_ADC1_Init+0xe8>)
 80007fe:	2201      	movs	r2, #1
 8000800:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000802:	4b24      	ldr	r3, [pc, #144]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000804:	2200      	movs	r2, #0
 8000806:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000808:	4b22      	ldr	r3, [pc, #136]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800080a:	2200      	movs	r2, #0
 800080c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800080e:	4b21      	ldr	r3, [pc, #132]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000810:	2200      	movs	r2, #0
 8000812:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000814:	4b1f      	ldr	r3, [pc, #124]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000816:	2200      	movs	r2, #0
 8000818:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800081a:	4b1e      	ldr	r3, [pc, #120]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800081c:	2200      	movs	r2, #0
 800081e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000820:	4b1c      	ldr	r3, [pc, #112]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000822:	2200      	movs	r2, #0
 8000824:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000826:	4b1b      	ldr	r3, [pc, #108]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000828:	2200      	movs	r2, #0
 800082a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800082e:	4819      	ldr	r0, [pc, #100]	@ (8000894 <MX_ADC1_Init+0xe8>)
 8000830:	f002 fa98 	bl	8002d64 <HAL_ADC_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800083a:	f000 fd22 	bl	8001282 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800083e:	2300      	movs	r3, #0
 8000840:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000842:	f107 031c 	add.w	r3, r7, #28
 8000846:	4619      	mov	r1, r3
 8000848:	4812      	ldr	r0, [pc, #72]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800084a:	f003 fb11 	bl	8003e70 <HAL_ADCEx_MultiModeConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000854:	f000 fd15 	bl	8001282 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000858:	4b10      	ldr	r3, [pc, #64]	@ (800089c <MX_ADC1_Init+0xf0>)
 800085a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800085c:	2306      	movs	r3, #6
 800085e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000864:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000868:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800086a:	2304      	movs	r3, #4
 800086c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000872:	2300      	movs	r3, #0
 8000874:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000876:	463b      	mov	r3, r7
 8000878:	4619      	mov	r1, r3
 800087a:	4806      	ldr	r0, [pc, #24]	@ (8000894 <MX_ADC1_Init+0xe8>)
 800087c:	f002 fde0 	bl	8003440 <HAL_ADC_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000886:	f000 fcfc 	bl	8001282 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800088a:	bf00      	nop
 800088c:	3728      	adds	r7, #40	@ 0x28
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	24000310 	.word	0x24000310
 8000898:	40022000 	.word	0x40022000
 800089c:	2a000400 	.word	0x2a000400

080008a0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	@ 0x28
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a8:	f107 0314 	add.w	r3, r7, #20
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a18      	ldr	r2, [pc, #96]	@ (8000920 <HAL_ADC_MspInit+0x80>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d129      	bne.n	8000916 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80008c2:	4b18      	ldr	r3, [pc, #96]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008c8:	4a16      	ldr	r2, [pc, #88]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008ca:	f043 0320 	orr.w	r3, r3, #32
 80008ce:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80008d2:	4b14      	ldr	r3, [pc, #80]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80008d8:	f003 0320 	and.w	r3, r3, #32
 80008dc:	613b      	str	r3, [r7, #16]
 80008de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e0:	4b10      	ldr	r3, [pc, #64]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008e8:	f043 0304 	orr.w	r3, r3, #4
 80008ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80008f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000924 <HAL_ADC_MspInit+0x84>)
 80008f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80008f6:	f003 0304 	and.w	r3, r3, #4
 80008fa:	60fb      	str	r3, [r7, #12]
 80008fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008fe:	2301      	movs	r3, #1
 8000900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000902:	2303      	movs	r3, #3
 8000904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	2300      	movs	r3, #0
 8000908:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4805      	ldr	r0, [pc, #20]	@ (8000928 <HAL_ADC_MspInit+0x88>)
 8000912:	f005 fdf7 	bl	8006504 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000916:	bf00      	nop
 8000918:	3728      	adds	r7, #40	@ 0x28
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40022000 	.word	0x40022000
 8000924:	58024400 	.word	0x58024400
 8000928:	58020800 	.word	0x58020800

0800092c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000932:	4b19      	ldr	r3, [pc, #100]	@ (8000998 <MX_DMA_Init+0x6c>)
 8000934:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000938:	4a17      	ldr	r2, [pc, #92]	@ (8000998 <MX_DMA_Init+0x6c>)
 800093a:	f043 0301 	orr.w	r3, r3, #1
 800093e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000942:	4b15      	ldr	r3, [pc, #84]	@ (8000998 <MX_DMA_Init+0x6c>)
 8000944:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000948:	f003 0301 	and.w	r3, r3, #1
 800094c:	607b      	str	r3, [r7, #4]
 800094e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	200c      	movs	r0, #12
 8000956:	f003 fc44 	bl	80041e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800095a:	200c      	movs	r0, #12
 800095c:	f003 fc5b 	bl	8004216 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000960:	2200      	movs	r2, #0
 8000962:	2100      	movs	r1, #0
 8000964:	200e      	movs	r0, #14
 8000966:	f003 fc3c 	bl	80041e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 800096a:	200e      	movs	r0, #14
 800096c:	f003 fc53 	bl	8004216 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000970:	2200      	movs	r2, #0
 8000972:	2100      	movs	r1, #0
 8000974:	200f      	movs	r0, #15
 8000976:	f003 fc34 	bl	80041e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800097a:	200f      	movs	r0, #15
 800097c:	f003 fc4b 	bl	8004216 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	2010      	movs	r0, #16
 8000986:	f003 fc2c 	bl	80041e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800098a:	2010      	movs	r0, #16
 800098c:	f003 fc43 	bl	8004216 <HAL_NVIC_EnableIRQ>

}
 8000990:	bf00      	nop
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}
 8000998:	58024400 	.word	0x58024400

0800099c <dshot_init>:
static void dshot_enable_dma_request();


/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	4603      	mov	r3, r0
 80009a4:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 80009a6:	79fb      	ldrb	r3, [r7, #7]
 80009a8:	4618      	mov	r0, r3
 80009aa:	f000 f833 	bl	8000a14 <dshot_set_timer>
	dshot_put_tc_callback_function();
 80009ae:	f000 f8d3 	bl	8000b58 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 80009b2:	f000 f8ef 	bl	8000b94 <dshot_start_pwm>
}
 80009b6:	bf00      	nop
 80009b8:	3708      	adds	r7, #8
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}

080009be <dshot_write>:

void dshot_write(uint16_t* motor_value)
{
 80009be:	b580      	push	{r7, lr}
 80009c0:	b082      	sub	sp, #8
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer_all(motor_value);
 80009c6:	6878      	ldr	r0, [r7, #4]
 80009c8:	f000 f962 	bl	8000c90 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 80009cc:	f000 f98c 	bl	8000ce8 <dshot_dma_start>
	dshot_enable_dma_request();
 80009d0:	f000 f9c2 	bl	8000d58 <dshot_enable_dma_request>
}
 80009d4:	bf00      	nop
 80009d6:	3708      	adds	r7, #8
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <dshot_choose_type>:


/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d003      	beq.n	80009f4 <dshot_choose_type+0x18>
 80009ec:	2b02      	cmp	r3, #2
 80009ee:	d103      	bne.n	80009f8 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return DSHOT600_HZ;
 80009f0:	4b05      	ldr	r3, [pc, #20]	@ (8000a08 <dshot_choose_type+0x2c>)
 80009f2:	e002      	b.n	80009fa <dshot_choose_type+0x1e>

		case(DSHOT300):
				return DSHOT300_HZ;
 80009f4:	4b05      	ldr	r3, [pc, #20]	@ (8000a0c <dshot_choose_type+0x30>)
 80009f6:	e000      	b.n	80009fa <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return DSHOT150_HZ;
 80009f8:	4b05      	ldr	r3, [pc, #20]	@ (8000a10 <dshot_choose_type+0x34>)
	}
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	00b71b00 	.word	0x00b71b00
 8000a0c:	005b8d80 	.word	0x005b8d80
 8000a10:	002dc6c0 	.word	0x002dc6c0

08000a14 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	ed2d 8b02 	vpush	{d8}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	4603      	mov	r3, r0
 8000a20:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 8000a22:	4b27      	ldr	r3, [pc, #156]	@ (8000ac0 <dshot_set_timer+0xac>)
 8000a24:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	ee07 3a90 	vmov	s15, r3
 8000a2c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	4618      	mov	r0, r3
 8000a34:	f7ff ffd2 	bl	80009dc <dshot_choose_type>
 8000a38:	ee07 0a90 	vmov	s15, r0
 8000a3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a40:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8000a44:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000ac4 <dshot_set_timer+0xb0>
 8000a48:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a50:	f013 ffa4 	bl	801499c <lrintf>
 8000a54:	4603      	mov	r3, r0
 8000a56:	b29b      	uxth	r3, r3
 8000a58:	3b01      	subs	r3, #1
 8000a5a:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 8000a5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	897a      	ldrh	r2, [r7, #10]
 8000a62:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 8000a64:	4b18      	ldr	r3, [pc, #96]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	2214      	movs	r2, #20
 8000a6a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a6c:	4b16      	ldr	r3, [pc, #88]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000a6e:	2214      	movs	r2, #20
 8000a70:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 8000a72:	4b16      	ldr	r3, [pc, #88]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	897a      	ldrh	r2, [r7, #10]
 8000a78:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 8000a7a:	4b14      	ldr	r3, [pc, #80]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2214      	movs	r2, #20
 8000a80:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a82:	4b12      	ldr	r3, [pc, #72]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a84:	2214      	movs	r2, #20
 8000a86:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8000a88:	4b10      	ldr	r3, [pc, #64]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	897a      	ldrh	r2, [r7, #10]
 8000a8e:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 8000a90:	4b0e      	ldr	r3, [pc, #56]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	2214      	movs	r2, #20
 8000a96:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a98:	4b0c      	ldr	r3, [pc, #48]	@ (8000acc <dshot_set_timer+0xb8>)
 8000a9a:	2214      	movs	r2, #20
 8000a9c:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 8000a9e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	897a      	ldrh	r2, [r7, #10]
 8000aa4:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 8000aa6:	4b08      	ldr	r3, [pc, #32]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2214      	movs	r2, #20
 8000aac:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000aae:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <dshot_set_timer+0xb4>)
 8000ab0:	2214      	movs	r2, #20
 8000ab2:	60da      	str	r2, [r3, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	3710      	adds	r7, #16
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	ecbd 8b02 	vpop	{d8}
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	0bebc200 	.word	0x0bebc200
 8000ac4:	3c23d70a 	.word	0x3c23d70a
 8000ac8:	24000698 	.word	0x24000698
 8000acc:	240005b4 	.word	0x240005b4

08000ad0 <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000adc:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ae2:	687a      	ldr	r2, [r7, #4]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d108      	bne.n	8000afa <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	68da      	ldr	r2, [r3, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000af6:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 8000af8:	e028      	b.n	8000b4c <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000afe:	687a      	ldr	r2, [r7, #4]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d108      	bne.n	8000b16 <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	68da      	ldr	r2, [r3, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000b12:	60da      	str	r2, [r3, #12]
}
 8000b14:	e01a      	b.n	8000b4c <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	429a      	cmp	r2, r3
 8000b1e:	d108      	bne.n	8000b32 <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	68da      	ldr	r2, [r3, #12]
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8000b2e:	60da      	str	r2, [r3, #12]
}
 8000b30:	e00c      	b.n	8000b4c <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d107      	bne.n	8000b4c <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	68da      	ldr	r2, [r3, #12]
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000b4a:	60da      	str	r2, [r3, #12]
}
 8000b4c:	bf00      	nop
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000b88 <dshot_put_tc_callback_function+0x30>)
 8000b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b60:	4a0a      	ldr	r2, [pc, #40]	@ (8000b8c <dshot_put_tc_callback_function+0x34>)
 8000b62:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 8000b64:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <dshot_put_tc_callback_function+0x38>)
 8000b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b68:	4a08      	ldr	r2, [pc, #32]	@ (8000b8c <dshot_put_tc_callback_function+0x34>)
 8000b6a:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <dshot_put_tc_callback_function+0x38>)
 8000b6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b70:	4a06      	ldr	r2, [pc, #24]	@ (8000b8c <dshot_put_tc_callback_function+0x34>)
 8000b72:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 8000b74:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <dshot_put_tc_callback_function+0x30>)
 8000b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b78:	4a04      	ldr	r2, [pc, #16]	@ (8000b8c <dshot_put_tc_callback_function+0x34>)
 8000b7a:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	24000698 	.word	0x24000698
 8000b8c:	08000ad1 	.word	0x08000ad1
 8000b90:	240005b4 	.word	0x240005b4

08000b94 <dshot_start_pwm>:

static void dshot_start_pwm()
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 8000b98:	210c      	movs	r1, #12
 8000b9a:	4808      	ldr	r0, [pc, #32]	@ (8000bbc <dshot_start_pwm+0x28>)
 8000b9c:	f00a ffd8 	bl	800bb50 <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 8000ba0:	2108      	movs	r1, #8
 8000ba2:	4807      	ldr	r0, [pc, #28]	@ (8000bc0 <dshot_start_pwm+0x2c>)
 8000ba4:	f00a ffd4 	bl	800bb50 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <dshot_start_pwm+0x2c>)
 8000bac:	f00a ffd0 	bl	800bb50 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 8000bb0:	2104      	movs	r1, #4
 8000bb2:	4802      	ldr	r0, [pc, #8]	@ (8000bbc <dshot_start_pwm+0x28>)
 8000bb4:	f00a ffcc 	bl	800bb50 <HAL_TIM_PWM_Start>
}
 8000bb8:	bf00      	nop
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	24000698 	.word	0x24000698
 8000bc0:	240005b4 	.word	0x240005b4

08000bc4 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b087      	sub	sp, #28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	4603      	mov	r3, r0
 8000bcc:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 8000bd2:	88fb      	ldrh	r3, [r7, #6]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	b21a      	sxth	r2, r3
 8000bd8:	7afb      	ldrb	r3, [r7, #11]
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	b21b      	sxth	r3, r3
 8000be0:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 8000be6:	893b      	ldrh	r3, [r7, #8]
 8000be8:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
 8000bee:	e009      	b.n	8000c04 <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 8000bf0:	697a      	ldr	r2, [r7, #20]
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	4053      	eors	r3, r2
 8000bf6:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 8000bf8:	693b      	ldr	r3, [r7, #16]
 8000bfa:	091b      	lsrs	r3, r3, #4
 8000bfc:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	3301      	adds	r3, #1
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	ddf2      	ble.n	8000bf0 <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	f003 030f 	and.w	r3, r3, #15
 8000c10:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 8000c12:	893b      	ldrh	r3, [r7, #8]
 8000c14:	011b      	lsls	r3, r3, #4
 8000c16:	b29a      	uxth	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	b29b      	uxth	r3, r3
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	813b      	strh	r3, [r7, #8]

	return packet;
 8000c20:	893b      	ldrh	r3, [r7, #8]
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	371c      	adds	r7, #28
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr

08000c2e <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b084      	sub	sp, #16
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
 8000c36:	460b      	mov	r3, r1
 8000c38:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 8000c3a:	887b      	ldrh	r3, [r7, #2]
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff ffc1 	bl	8000bc4 <dshot_prepare_packet>
 8000c42:	4603      	mov	r3, r0
 8000c44:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	e011      	b.n	8000c70 <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 8000c4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	da01      	bge.n	8000c58 <dshot_prepare_dmabuffer+0x2a>
 8000c54:	220e      	movs	r2, #14
 8000c56:	e000      	b.n	8000c5a <dshot_prepare_dmabuffer+0x2c>
 8000c58:	2207      	movs	r2, #7
 8000c5a:	68bb      	ldr	r3, [r7, #8]
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	6879      	ldr	r1, [r7, #4]
 8000c60:	440b      	add	r3, r1
 8000c62:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8000c64:	89fb      	ldrh	r3, [r7, #14]
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	3301      	adds	r3, #1
 8000c6e:	60bb      	str	r3, [r7, #8]
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b0f      	cmp	r3, #15
 8000c74:	ddea      	ble.n	8000c4c <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3340      	adds	r3, #64	@ 0x40
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	3344      	adds	r3, #68	@ 0x44
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
}
 8000c86:	bf00      	nop
 8000c88:	3710      	adds	r7, #16
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	881b      	ldrh	r3, [r3, #0]
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	480e      	ldr	r0, [pc, #56]	@ (8000cd8 <dshot_prepare_dmabuffer_all+0x48>)
 8000ca0:	f7ff ffc5 	bl	8000c2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3302      	adds	r3, #2
 8000ca8:	881b      	ldrh	r3, [r3, #0]
 8000caa:	4619      	mov	r1, r3
 8000cac:	480b      	ldr	r0, [pc, #44]	@ (8000cdc <dshot_prepare_dmabuffer_all+0x4c>)
 8000cae:	f7ff ffbe 	bl	8000c2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3304      	adds	r3, #4
 8000cb6:	881b      	ldrh	r3, [r3, #0]
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4809      	ldr	r0, [pc, #36]	@ (8000ce0 <dshot_prepare_dmabuffer_all+0x50>)
 8000cbc:	f7ff ffb7 	bl	8000c2e <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3306      	adds	r3, #6
 8000cc4:	881b      	ldrh	r3, [r3, #0]
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4806      	ldr	r0, [pc, #24]	@ (8000ce4 <dshot_prepare_dmabuffer_all+0x54>)
 8000cca:	f7ff ffb0 	bl	8000c2e <dshot_prepare_dmabuffer>
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	24000374 	.word	0x24000374
 8000cdc:	240003bc 	.word	0x240003bc
 8000ce0:	24000404 	.word	0x24000404
 8000ce4:	2400044c 	.word	0x2400044c

08000ce8 <dshot_dma_start>:

static void dshot_dma_start()
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 8000cec:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <dshot_dma_start+0x58>)
 8000cee:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000cf0:	4914      	ldr	r1, [pc, #80]	@ (8000d44 <dshot_dma_start+0x5c>)
 8000cf2:	4b13      	ldr	r3, [pc, #76]	@ (8000d40 <dshot_dma_start+0x58>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	3340      	adds	r3, #64	@ 0x40
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	2312      	movs	r3, #18
 8000cfc:	f003 fe16 	bl	800492c <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
 8000d00:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <dshot_dma_start+0x60>)
 8000d02:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8000d04:	4911      	ldr	r1, [pc, #68]	@ (8000d4c <dshot_dma_start+0x64>)
 8000d06:	4b10      	ldr	r3, [pc, #64]	@ (8000d48 <dshot_dma_start+0x60>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	333c      	adds	r3, #60	@ 0x3c
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	2312      	movs	r3, #18
 8000d10:	f003 fe0c 	bl	800492c <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR1, DSHOT_DMA_BUFFER_SIZE);
 8000d14:	4b0c      	ldr	r3, [pc, #48]	@ (8000d48 <dshot_dma_start+0x60>)
 8000d16:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000d18:	490d      	ldr	r1, [pc, #52]	@ (8000d50 <dshot_dma_start+0x68>)
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	@ (8000d48 <dshot_dma_start+0x60>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	3334      	adds	r3, #52	@ 0x34
 8000d20:	461a      	mov	r2, r3
 8000d22:	2312      	movs	r3, #18
 8000d24:	f003 fe02 	bl	800492c <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
 8000d28:	4b05      	ldr	r3, [pc, #20]	@ (8000d40 <dshot_dma_start+0x58>)
 8000d2a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000d2c:	4909      	ldr	r1, [pc, #36]	@ (8000d54 <dshot_dma_start+0x6c>)
 8000d2e:	4b04      	ldr	r3, [pc, #16]	@ (8000d40 <dshot_dma_start+0x58>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	3338      	adds	r3, #56	@ 0x38
 8000d34:	461a      	mov	r2, r3
 8000d36:	2312      	movs	r3, #18
 8000d38:	f003 fdf8 	bl	800492c <HAL_DMA_Start_IT>
}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	24000698 	.word	0x24000698
 8000d44:	24000374 	.word	0x24000374
 8000d48:	240005b4 	.word	0x240005b4
 8000d4c:	240003bc 	.word	0x240003bc
 8000d50:	24000404 	.word	0x24000404
 8000d54:	2400044c 	.word	0x2400044c

08000d58 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC4);
 8000d5c:	4b12      	ldr	r3, [pc, #72]	@ (8000da8 <dshot_enable_dma_request+0x50>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	68da      	ldr	r2, [r3, #12]
 8000d62:	4b11      	ldr	r3, [pc, #68]	@ (8000da8 <dshot_enable_dma_request+0x50>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000d6a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000dac <dshot_enable_dma_request+0x54>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	4b0e      	ldr	r3, [pc, #56]	@ (8000dac <dshot_enable_dma_request+0x54>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000d7a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC1);
 8000d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000dac <dshot_enable_dma_request+0x54>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	68da      	ldr	r2, [r3, #12]
 8000d82:	4b0a      	ldr	r3, [pc, #40]	@ (8000dac <dshot_enable_dma_request+0x54>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000d8a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC2);
 8000d8c:	4b06      	ldr	r3, [pc, #24]	@ (8000da8 <dshot_enable_dma_request+0x50>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	68da      	ldr	r2, [r3, #12]
 8000d92:	4b05      	ldr	r3, [pc, #20]	@ (8000da8 <dshot_enable_dma_request+0x50>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000d9a:	60da      	str	r2, [r3, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	24000698 	.word	0x24000698
 8000dac:	240005b4 	.word	0x240005b4

08000db0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b087      	sub	sp, #28
 8000db4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000db6:	4b28      	ldr	r3, [pc, #160]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000db8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dbc:	4a26      	ldr	r2, [pc, #152]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000dbe:	f043 0304 	orr.w	r3, r3, #4
 8000dc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc6:	4b24      	ldr	r3, [pc, #144]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000dc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dcc:	f003 0304 	and.w	r3, r3, #4
 8000dd0:	617b      	str	r3, [r7, #20]
 8000dd2:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd4:	4b20      	ldr	r3, [pc, #128]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000dd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dda:	4a1f      	ldr	r2, [pc, #124]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000ddc:	f043 0301 	orr.w	r3, r3, #1
 8000de0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de4:	4b1c      	ldr	r3, [pc, #112]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000de6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	613b      	str	r3, [r7, #16]
 8000df0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000df2:	4b19      	ldr	r3, [pc, #100]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000df4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df8:	4a17      	ldr	r2, [pc, #92]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000dfa:	f043 0310 	orr.w	r3, r3, #16
 8000dfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e02:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e08:	f003 0310 	and.w	r3, r3, #16
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e10:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e16:	4a10      	ldr	r2, [pc, #64]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e18:	f043 0308 	orr.w	r3, r3, #8
 8000e1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e20:	4b0d      	ldr	r3, [pc, #52]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e26:	f003 0308 	and.w	r3, r3, #8
 8000e2a:	60bb      	str	r3, [r7, #8]
 8000e2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e34:	4a08      	ldr	r2, [pc, #32]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e36:	f043 0302 	orr.w	r3, r3, #2
 8000e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <MX_GPIO_Init+0xa8>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e44:	f003 0302 	and.w	r3, r3, #2
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	687b      	ldr	r3, [r7, #4]

}
 8000e4c:	bf00      	nop
 8000e4e:	371c      	adds	r7, #28
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr
 8000e58:	58024400 	.word	0x58024400

08000e5c <elevado>:
void put_M7(uint8_t buffer[32]); // put data from M7 to M4
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
float elevado (uint32_t num , uint8_t pot){
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	70fb      	strb	r3, [r7, #3]
	float res = 1;
 8000e68:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000e6c:	60fb      	str	r3, [r7, #12]
	for(int n=0;n<pot;n++){
 8000e6e:	2300      	movs	r3, #0
 8000e70:	60bb      	str	r3, [r7, #8]
 8000e72:	e00d      	b.n	8000e90 <elevado+0x34>
		res = res*num;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	ee07 3a90 	vmov	s15, r3
 8000e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e7e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000e82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e86:	edc7 7a03 	vstr	s15, [r7, #12]
	for(int n=0;n<pot;n++){
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	78fb      	ldrb	r3, [r7, #3]
 8000e92:	68ba      	ldr	r2, [r7, #8]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	dbed      	blt.n	8000e74 <elevado+0x18>
	}
	return res;
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	ee07 3a90 	vmov	s15, r3
}
 8000e9e:	eeb0 0a67 	vmov.f32	s0, s15
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <HAL_TIM_IC_CaptureCallback>:
		}
		xfr_ptr->sts_4to7 = 0; // M4 to M7 buffer is empty
	}
	return buffer; // return the buffer (pointer)
}
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
	contador = __HAL_TIM_GET_COUNTER(&htim4);
 8000eb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ecc <HAL_TIM_IC_CaptureCallback+0x20>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eba:	4a05      	ldr	r2, [pc, #20]	@ (8000ed0 <HAL_TIM_IC_CaptureCallback+0x24>)
 8000ebc:	6013      	str	r3, [r2, #0]
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	2400064c 	.word	0x2400064c
 8000ed0:	240004a4 	.word	0x240004a4
 8000ed4:	00000000 	.word	0x00000000

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	ed2d 8b02 	vpush	{d8}
 8000ede:	b09e      	sub	sp, #120	@ 0x78
 8000ee0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000ee2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ee6:	677b      	str	r3, [r7, #116]	@ 0x74
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000ee8:	bf00      	nop
 8000eea:	4b81      	ldr	r3, [pc, #516]	@ (80010f0 <main+0x218>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d004      	beq.n	8000f00 <main+0x28>
 8000ef6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000ef8:	1e5a      	subs	r2, r3, #1
 8000efa:	677a      	str	r2, [r7, #116]	@ 0x74
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	dcf4      	bgt.n	8000eea <main+0x12>
  if ( timeout < 0 )
 8000f00:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	da01      	bge.n	8000f0a <main+0x32>
  {
  Error_Handler();
 8000f06:	f000 f9bc 	bl	8001282 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f0a:	f001 fc87 	bl	800281c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f0e:	f000 f905 	bl	800111c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000f12:	f000 f983 	bl	800121c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000f16:	4b76      	ldr	r3, [pc, #472]	@ (80010f0 <main+0x218>)
 8000f18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f1c:	4a74      	ldr	r2, [pc, #464]	@ (80010f0 <main+0x218>)
 8000f1e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f22:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f26:	4b72      	ldr	r3, [pc, #456]	@ (80010f0 <main+0x218>)
 8000f28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000f34:	2000      	movs	r0, #0
 8000f36:	f005 fcc9 	bl	80068cc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	2000      	movs	r0, #0
 8000f3e:	f005 fcdf 	bl	8006900 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000f42:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f46:	677b      	str	r3, [r7, #116]	@ 0x74
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f48:	bf00      	nop
 8000f4a:	4b69      	ldr	r3, [pc, #420]	@ (80010f0 <main+0x218>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d104      	bne.n	8000f60 <main+0x88>
 8000f56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f58:	1e5a      	subs	r2, r3, #1
 8000f5a:	677a      	str	r2, [r7, #116]	@ 0x74
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	dcf4      	bgt.n	8000f4a <main+0x72>
if ( timeout < 0 )
 8000f60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	da01      	bge.n	8000f6a <main+0x92>
{
Error_Handler();
 8000f66:	f000 f98c 	bl	8001282 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f6a:	f7ff ff21 	bl	8000db0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f6e:	f7ff fcdd 	bl	800092c <MX_DMA_Init>
  MX_TIM2_Init();
 8000f72:	f000 fd75 	bl	8001a60 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000f76:	f000 fe83 	bl	8001c80 <MX_TIM5_Init>
  MX_TIM3_Init();
 8000f7a:	f000 fdd5 	bl	8001b28 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f7e:	f000 fe29 	bl	8001bd4 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000f82:	f010 fbef 	bl	8011764 <MX_USB_DEVICE_Init>
  MX_TIM1_Init();
 8000f86:	f000 fd11 	bl	80019ac <MX_TIM1_Init>
  MX_TIM8_Init();
 8000f8a:	f000 fedd 	bl	8001d48 <MX_TIM8_Init>
  MX_TIM15_Init();
 8000f8e:	f000 ff35 	bl	8001dfc <MX_TIM15_Init>
  MX_ADC1_Init();
 8000f92:	f7ff fc0b 	bl	80007ac <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000f96:	213c      	movs	r1, #60	@ 0x3c
 8000f98:	4856      	ldr	r0, [pc, #344]	@ (80010f4 <main+0x21c>)
 8000f9a:	f00a ff8d 	bl	800beb8 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim1, TIM_CHANNEL_ALL);
 8000f9e:	213c      	movs	r1, #60	@ 0x3c
 8000fa0:	4855      	ldr	r0, [pc, #340]	@ (80010f8 <main+0x220>)
 8000fa2:	f00a ff89 	bl	800beb8 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim8, TIM_CHANNEL_ALL);
 8000fa6:	213c      	movs	r1, #60	@ 0x3c
 8000fa8:	4854      	ldr	r0, [pc, #336]	@ (80010fc <main+0x224>)
 8000faa:	f00a ff85 	bl	800beb8 <HAL_TIM_Encoder_Start_IT>
  HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000fae:	213c      	movs	r1, #60	@ 0x3c
 8000fb0:	4853      	ldr	r0, [pc, #332]	@ (8001100 <main+0x228>)
 8000fb2:	f00a ff81 	bl	800beb8 <HAL_TIM_Encoder_Start_IT>
	uint8_t * xfr_data; // pointer to transfer data


	//initialize inter-core status pointers
	xfr_ptr->sts_4to7 = 0;
 8000fb6:	4b53      	ldr	r3, [pc, #332]	@ (8001104 <main+0x22c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	701a      	strb	r2, [r3, #0]
	xfr_ptr->sts_7to4 = 0;
 8000fbc:	4b51      	ldr	r3, [pc, #324]	@ (8001104 <main+0x22c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	705a      	strb	r2, [r3, #1]


	  if (HAL_TIM_Base_Start_IT(&htim15) != HAL_OK)
 8000fc2:	4851      	ldr	r0, [pc, #324]	@ (8001108 <main+0x230>)
 8000fc4:	f00a fcf4 	bl	800b9b0 <HAL_TIM_Base_Start_IT>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <main+0xfa>
	    {
	      /* Starting Error */
	      Error_Handler();
 8000fce:	f000 f958 	bl	8001282 <Error_Handler>
	    }
	  dshot_init(DSHOT300);
 8000fd2:	2001      	movs	r0, #1
 8000fd4:	f7ff fce2 	bl	800099c <dshot_init>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000fd8:	2000      	movs	r0, #0
 8000fda:	f001 fa3b 	bl	8002454 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000fde:	2001      	movs	r0, #1
 8000fe0:	f001 fa38 	bl	8002454 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000fe4:	2002      	movs	r0, #2
 8000fe6:	f001 fa35 	bl	8002454 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000fea:	2101      	movs	r1, #1
 8000fec:	2000      	movs	r0, #0
 8000fee:	f001 faa7 	bl	8002540 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000ff2:	4b46      	ldr	r3, [pc, #280]	@ (800110c <main+0x234>)
 8000ff4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ff8:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000ffa:	4b44      	ldr	r3, [pc, #272]	@ (800110c <main+0x234>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8001000:	4b42      	ldr	r3, [pc, #264]	@ (800110c <main+0x234>)
 8001002:	2200      	movs	r2, #0
 8001004:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8001006:	4b41      	ldr	r3, [pc, #260]	@ (800110c <main+0x234>)
 8001008:	2200      	movs	r2, #0
 800100a:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 800100c:	4b3f      	ldr	r3, [pc, #252]	@ (800110c <main+0x234>)
 800100e:	2200      	movs	r2, #0
 8001010:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8001012:	493e      	ldr	r1, [pc, #248]	@ (800110c <main+0x234>)
 8001014:	2000      	movs	r0, #0
 8001016:	f001 fb23 	bl	8002660 <BSP_COM_Init>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <main+0x14c>
  {
    Error_Handler();
 8001020:	f000 f92f 	bl	8001282 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char message[100]={'\0'};
 8001024:	2300      	movs	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	f107 0308 	add.w	r3, r7, #8
 800102c:	2260      	movs	r2, #96	@ 0x60
 800102e:	2100      	movs	r1, #0
 8001030:	4618      	mov	r0, r3
 8001032:	f011 fdfe 	bl	8012c32 <memset>
  //Inicializa referencia como zero
  for(uint8_t i =0;i<4;i++){
 8001036:	2300      	movs	r3, #0
 8001038:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 800103c:	e00c      	b.n	8001058 <main+0x180>
	  ref[i] =0;
 800103e:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001042:	4a33      	ldr	r2, [pc, #204]	@ (8001110 <main+0x238>)
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	f04f 0200 	mov.w	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
  for(uint8_t i =0;i<4;i++){
 800104e:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 8001052:	3301      	adds	r3, #1
 8001054:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
 8001058:	f897 3073 	ldrb.w	r3, [r7, #115]	@ 0x73
 800105c:	2b03      	cmp	r3, #3
 800105e:	d9ee      	bls.n	800103e <main+0x166>
  }
  HAL_Delay(7000);
 8001060:	f641 3058 	movw	r0, #7000	@ 0x1b58
 8001064:	f001 fc6c 	bl	8002940 <HAL_Delay>
  uint32_t Leitura= 0;
 8001068:	2300      	movs	r3, #0
 800106a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  float Leitura2 = 0;
 800106c:	f04f 0300 	mov.w	r3, #0
 8001070:	66bb      	str	r3, [r7, #104]	@ 0x68
	  	  CDC_Transmit_FS(message,sizeof(message));

	  	  //delay
	  	   *
	  	   */
	  	  for(uint8_t i = 0;i<4;i++){
 8001072:	2300      	movs	r3, #0
 8001074:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 8001078:	e00b      	b.n	8001092 <main+0x1ba>
	  		  ref[i] = 6;
 800107a:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800107e:	4a24      	ldr	r2, [pc, #144]	@ (8001110 <main+0x238>)
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	4413      	add	r3, r2
 8001084:	4a23      	ldr	r2, [pc, #140]	@ (8001114 <main+0x23c>)
 8001086:	601a      	str	r2, [r3, #0]
	  	  for(uint8_t i = 0;i<4;i++){
 8001088:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 800108c:	3301      	adds	r3, #1
 800108e:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
 8001092:	f897 3072 	ldrb.w	r3, [r7, #114]	@ 0x72
 8001096:	2b03      	cmp	r3, #3
 8001098:	d9ef      	bls.n	800107a <main+0x1a2>
	  	  }
	  	  //Iniciar ADC
	  	  HAL_ADC_Start(&hadc1);
 800109a:	481f      	ldr	r0, [pc, #124]	@ (8001118 <main+0x240>)
 800109c:	f002 f804 	bl	80030a8 <HAL_ADC_Start>
	  	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80010a0:	f04f 31ff 	mov.w	r1, #4294967295
 80010a4:	481c      	ldr	r0, [pc, #112]	@ (8001118 <main+0x240>)
 80010a6:	f002 f8c9 	bl	800323c <HAL_ADC_PollForConversion>
	  	  Leitura = HAL_ADC_GetValue(&hadc1);
 80010aa:	481b      	ldr	r0, [pc, #108]	@ (8001118 <main+0x240>)
 80010ac:	f002 f9ba 	bl	8003424 <HAL_ADC_GetValue>
 80010b0:	66f8      	str	r0, [r7, #108]	@ 0x6c
	  	  Leitura2 = (Leitura*3.3)/elevado(2,16);
 80010b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80010b4:	ee07 3a90 	vmov	s15, r3
 80010b8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80010bc:	ed9f 6b0a 	vldr	d6, [pc, #40]	@ 80010e8 <main+0x210>
 80010c0:	ee27 8b06 	vmul.f64	d8, d7, d6
 80010c4:	2110      	movs	r1, #16
 80010c6:	2002      	movs	r0, #2
 80010c8:	f7ff fec8 	bl	8000e5c <elevado>
 80010cc:	eef0 7a40 	vmov.f32	s15, s0
 80010d0:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80010d4:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80010d8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80010dc:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68


	  	  HAL_Delay(10);
 80010e0:	200a      	movs	r0, #10
 80010e2:	f001 fc2d 	bl	8002940 <HAL_Delay>
	  	  for(uint8_t i = 0;i<4;i++){
 80010e6:	e7c4      	b.n	8001072 <main+0x19a>
 80010e8:	66666666 	.word	0x66666666
 80010ec:	400a6666 	.word	0x400a6666
 80010f0:	58024400 	.word	0x58024400
 80010f4:	2400064c 	.word	0x2400064c
 80010f8:	24000568 	.word	0x24000568
 80010fc:	240006e4 	.word	0x240006e4
 8001100:	24000600 	.word	0x24000600
 8001104:	38001000 	.word	0x38001000
 8001108:	24000730 	.word	0x24000730
 800110c:	24000494 	.word	0x24000494
 8001110:	240004b8 	.word	0x240004b8
 8001114:	40c00000 	.word	0x40c00000
 8001118:	24000310 	.word	0x24000310

0800111c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b09c      	sub	sp, #112	@ 0x70
 8001120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001122:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001126:	224c      	movs	r2, #76	@ 0x4c
 8001128:	2100      	movs	r1, #0
 800112a:	4618      	mov	r0, r3
 800112c:	f011 fd81 	bl	8012c32 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2220      	movs	r2, #32
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f011 fd7b 	bl	8012c32 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800113c:	2004      	movs	r0, #4
 800113e:	f006 fe91 	bl	8007e64 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001142:	2300      	movs	r3, #0
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	4b33      	ldr	r3, [pc, #204]	@ (8001214 <SystemClock_Config+0xf8>)
 8001148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800114a:	4a32      	ldr	r2, [pc, #200]	@ (8001214 <SystemClock_Config+0xf8>)
 800114c:	f023 0301 	bic.w	r3, r3, #1
 8001150:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8001152:	4b30      	ldr	r3, [pc, #192]	@ (8001214 <SystemClock_Config+0xf8>)
 8001154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	4b2e      	ldr	r3, [pc, #184]	@ (8001218 <SystemClock_Config+0xfc>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001164:	4a2c      	ldr	r2, [pc, #176]	@ (8001218 <SystemClock_Config+0xfc>)
 8001166:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b2a      	ldr	r3, [pc, #168]	@ (8001218 <SystemClock_Config+0xfc>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001174:	603b      	str	r3, [r7, #0]
 8001176:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001178:	bf00      	nop
 800117a:	4b27      	ldr	r3, [pc, #156]	@ (8001218 <SystemClock_Config+0xfc>)
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001182:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001186:	d1f8      	bne.n	800117a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8001188:	2322      	movs	r3, #34	@ 0x22
 800118a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800118c:	2301      	movs	r3, #1
 800118e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001190:	2340      	movs	r3, #64	@ 0x40
 8001192:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001194:	2301      	movs	r3, #1
 8001196:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001198:	2302      	movs	r3, #2
 800119a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800119c:	2300      	movs	r3, #0
 800119e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011a0:	2304      	movs	r3, #4
 80011a2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 80011a4:	2319      	movs	r3, #25
 80011a6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80011a8:	2302      	movs	r3, #2
 80011aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80011ac:	2305      	movs	r3, #5
 80011ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011b0:	2302      	movs	r3, #2
 80011b2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80011b4:	230c      	movs	r3, #12
 80011b6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011c4:	4618      	mov	r0, r3
 80011c6:	f006 feb7 	bl	8007f38 <HAL_RCC_OscConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 80011d0:	f000 f857 	bl	8001282 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d4:	233f      	movs	r3, #63	@ 0x3f
 80011d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d8:	2303      	movs	r3, #3
 80011da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80011e0:	2300      	movs	r3, #0
 80011e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80011e4:	2340      	movs	r3, #64	@ 0x40
 80011e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80011e8:	2340      	movs	r3, #64	@ 0x40
 80011ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80011ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80011f2:	2340      	movs	r3, #64	@ 0x40
 80011f4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80011f6:	1d3b      	adds	r3, r7, #4
 80011f8:	2104      	movs	r1, #4
 80011fa:	4618      	mov	r0, r3
 80011fc:	f007 faf6 	bl	80087ec <HAL_RCC_ClockConfig>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <SystemClock_Config+0xee>
  {
    Error_Handler();
 8001206:	f000 f83c 	bl	8001282 <Error_Handler>
  }
}
 800120a:	bf00      	nop
 800120c:	3770      	adds	r7, #112	@ 0x70
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	58000400 	.word	0x58000400
 8001218:	58024800 	.word	0x58024800

0800121c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b0b0      	sub	sp, #192	@ 0xc0
 8001220:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001222:	463b      	mov	r3, r7
 8001224:	22c0      	movs	r2, #192	@ 0xc0
 8001226:	2100      	movs	r1, #0
 8001228:	4618      	mov	r0, r3
 800122a:	f011 fd02 	bl	8012c32 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SPI1;
 800122e:	f44f 2201 	mov.w	r2, #528384	@ 0x81000
 8001232:	f04f 0300 	mov.w	r3, #0
 8001236:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800123a:	2304      	movs	r3, #4
 800123c:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 9;
 800123e:	2309      	movs	r3, #9
 8001240:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8001242:	2302      	movs	r3, #2
 8001244:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8001246:	2302      	movs	r3, #2
 8001248:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800124a:	2302      	movs	r3, #2
 800124c:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800124e:	23c0      	movs	r3, #192	@ 0xc0
 8001250:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8001252:	2320      	movs	r3, #32
 8001254:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 3072;
 8001256:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800125a:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800125c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001260:	663b      	str	r3, [r7, #96]	@ 0x60
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001262:	2300      	movs	r3, #0
 8001264:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001268:	463b      	mov	r3, r7
 800126a:	4618      	mov	r0, r3
 800126c:	f007 fe4a 	bl	8008f04 <HAL_RCCEx_PeriphCLKConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <PeriphCommonClock_Config+0x5e>
  {
    Error_Handler();
 8001276:	f000 f804 	bl	8001282 <Error_Handler>
  }
}
 800127a:	bf00      	nop
 800127c:	37c0      	adds	r7, #192	@ 0xc0
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001286:	b672      	cpsid	i
}
 8001288:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800128a:	bf00      	nop
 800128c:	e7fd      	b.n	800128a <Error_Handler+0x8>
	...

08001290 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001296:	4b0a      	ldr	r3, [pc, #40]	@ (80012c0 <HAL_MspInit+0x30>)
 8001298:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800129c:	4a08      	ldr	r2, [pc, #32]	@ (80012c0 <HAL_MspInit+0x30>)
 800129e:	f043 0302 	orr.w	r3, r3, #2
 80012a2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80012a6:	4b06      	ldr	r3, [pc, #24]	@ (80012c0 <HAL_MspInit+0x30>)
 80012a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80012ac:	f003 0302 	and.w	r3, r3, #2
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	58024400 	.word	0x58024400

080012c4 <map>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//Função de mapeamento
uint16_t map(float x, int in_min, int in_max, int out_min, int out_max) {
 80012c4:	b480      	push	{r7}
 80012c6:	b087      	sub	sp, #28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	ed87 0a05 	vstr	s0, [r7, #20]
 80012ce:	6138      	str	r0, [r7, #16]
 80012d0:	60f9      	str	r1, [r7, #12]
 80012d2:	60ba      	str	r2, [r7, #8]
 80012d4:	607b      	str	r3, [r7, #4]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	ee07 3a90 	vmov	s15, r3
 80012dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80012e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	ee07 3a90 	vmov	s15, r3
 80012f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012f6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80012fa:	68fa      	ldr	r2, [r7, #12]
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	ee07 3a90 	vmov	s15, r3
 8001304:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001308:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	ee07 3a90 	vmov	s15, r3
 8001312:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001316:	ee77 7a27 	vadd.f32	s15, s14, s15
 800131a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800131e:	ee17 3a90 	vmov	r3, s15
 8001322:	b29b      	uxth	r3, r3
}
 8001324:	4618      	mov	r0, r3
 8001326:	371c      	adds	r7, #28
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <Controle>:

void Controle(){
 8001330:	b590      	push	{r4, r7, lr}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
	for(uint8_t n=0;n<4;n++){
 8001336:	2300      	movs	r3, #0
 8001338:	71fb      	strb	r3, [r7, #7]
 800133a:	e0e9      	b.n	8001510 <Controle+0x1e0>
		//Calculo de erro
		error[n] =ref[n] -  speed[n];
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	4aa3      	ldr	r2, [pc, #652]	@ (80015cc <Controle+0x29c>)
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	ed93 7a00 	vldr	s14, [r3]
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	4aa1      	ldr	r2, [pc, #644]	@ (80015d0 <Controle+0x2a0>)
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	4413      	add	r3, r2
 8001350:	edd3 7a00 	vldr	s15, [r3]
 8001354:	79fb      	ldrb	r3, [r7, #7]
 8001356:	ee77 7a67 	vsub.f32	s15, s14, s15
 800135a:	4a9e      	ldr	r2, [pc, #632]	@ (80015d4 <Controle+0x2a4>)
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4413      	add	r3, r2
 8001360:	edc3 7a00 	vstr	s15, [r3]
		//Variação da ação de controle para esta iteração
		deltaU[n] = Kc*(error[n]- preverror[n]) + error[n]*Ki -Kd*(speed[n]-2*prevspeed[n] + prevspeed2[n]);
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	4a9b      	ldr	r2, [pc, #620]	@ (80015d4 <Controle+0x2a4>)
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	4413      	add	r3, r2
 800136c:	ed93 7a00 	vldr	s14, [r3]
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	4a99      	ldr	r2, [pc, #612]	@ (80015d8 <Controle+0x2a8>)
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	4413      	add	r3, r2
 8001378:	edd3 7a00 	vldr	s15, [r3]
 800137c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001380:	4b96      	ldr	r3, [pc, #600]	@ (80015dc <Controle+0x2ac>)
 8001382:	edd3 7a00 	vldr	s15, [r3]
 8001386:	ee27 7a27 	vmul.f32	s14, s14, s15
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	4a91      	ldr	r2, [pc, #580]	@ (80015d4 <Controle+0x2a4>)
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	4413      	add	r3, r2
 8001392:	edd3 6a00 	vldr	s13, [r3]
 8001396:	4b92      	ldr	r3, [pc, #584]	@ (80015e0 <Controle+0x2b0>)
 8001398:	edd3 7a00 	vldr	s15, [r3]
 800139c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	4a8a      	ldr	r2, [pc, #552]	@ (80015d0 <Controle+0x2a0>)
 80013a8:	009b      	lsls	r3, r3, #2
 80013aa:	4413      	add	r3, r2
 80013ac:	edd3 6a00 	vldr	s13, [r3]
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	4a8c      	ldr	r2, [pc, #560]	@ (80015e4 <Controle+0x2b4>)
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	edd3 7a00 	vldr	s15, [r3]
 80013bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80013c0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	4a88      	ldr	r2, [pc, #544]	@ (80015e8 <Controle+0x2b8>)
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	4413      	add	r3, r2
 80013cc:	edd3 7a00 	vldr	s15, [r3]
 80013d0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80013d4:	4b85      	ldr	r3, [pc, #532]	@ (80015ec <Controle+0x2bc>)
 80013d6:	edd3 7a00 	vldr	s15, [r3]
 80013da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013de:	79fb      	ldrb	r3, [r7, #7]
 80013e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013e4:	4a82      	ldr	r2, [pc, #520]	@ (80015f0 <Controle+0x2c0>)
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	4413      	add	r3, r2
 80013ea:	edc3 7a00 	vstr	s15, [r3]
		//Ação de controle
		uM[n] = uM[n] + deltaU[n];
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	4a80      	ldr	r2, [pc, #512]	@ (80015f4 <Controle+0x2c4>)
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	4413      	add	r3, r2
 80013f6:	ed93 7a00 	vldr	s14, [r3]
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	4a7c      	ldr	r2, [pc, #496]	@ (80015f0 <Controle+0x2c0>)
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	edd3 7a00 	vldr	s15, [r3]
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800140c:	4a79      	ldr	r2, [pc, #484]	@ (80015f4 <Controle+0x2c4>)
 800140e:	009b      	lsls	r3, r3, #2
 8001410:	4413      	add	r3, r2
 8001412:	edc3 7a00 	vstr	s15, [r3]
		//Saturado para evitar que a ação de controle ultrapasse o limite
		if( uM[n] < -1023){
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	4a76      	ldr	r2, [pc, #472]	@ (80015f4 <Controle+0x2c4>)
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	4413      	add	r3, r2
 800141e:	edd3 7a00 	vldr	s15, [r3]
 8001422:	ed9f 7a75 	vldr	s14, [pc, #468]	@ 80015f8 <Controle+0x2c8>
 8001426:	eef4 7ac7 	vcmpe.f32	s15, s14
 800142a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800142e:	d505      	bpl.n	800143c <Controle+0x10c>
			uM[n]= -1023;
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	4a70      	ldr	r2, [pc, #448]	@ (80015f4 <Controle+0x2c4>)
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	4413      	add	r3, r2
 8001438:	4a70      	ldr	r2, [pc, #448]	@ (80015fc <Controle+0x2cc>)
 800143a:	601a      	str	r2, [r3, #0]
		}
		if(uM[n]>1023){
 800143c:	79fb      	ldrb	r3, [r7, #7]
 800143e:	4a6d      	ldr	r2, [pc, #436]	@ (80015f4 <Controle+0x2c4>)
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	4413      	add	r3, r2
 8001444:	edd3 7a00 	vldr	s15, [r3]
 8001448:	ed9f 7a6d 	vldr	s14, [pc, #436]	@ 8001600 <Controle+0x2d0>
 800144c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001454:	dd05      	ble.n	8001462 <Controle+0x132>
			uM[n]= 1023;
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	4a66      	ldr	r2, [pc, #408]	@ (80015f4 <Controle+0x2c4>)
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	4a69      	ldr	r2, [pc, #420]	@ (8001604 <Controle+0x2d4>)
 8001460:	601a      	str	r2, [r3, #0]
		}
		//Mapeamento da variavel de ação de controle no alcançe dado
		if(ref[n]==0){
 8001462:	79fb      	ldrb	r3, [r7, #7]
 8001464:	4a59      	ldr	r2, [pc, #356]	@ (80015cc <Controle+0x29c>)
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	4413      	add	r3, r2
 800146a:	edd3 7a00 	vldr	s15, [r3]
 800146e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001476:	d105      	bne.n	8001484 <Controle+0x154>
			D[n]=0;
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	4a63      	ldr	r2, [pc, #396]	@ (8001608 <Controle+0x2d8>)
 800147c:	2100      	movs	r1, #0
 800147e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001482:	e042      	b.n	800150a <Controle+0x1da>
		}else if(uM[n]>=0 ){
 8001484:	79fb      	ldrb	r3, [r7, #7]
 8001486:	4a5b      	ldr	r2, [pc, #364]	@ (80015f4 <Controle+0x2c4>)
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	edd3 7a00 	vldr	s15, [r3]
 8001490:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001498:	db16      	blt.n	80014c8 <Controle+0x198>
			D[n] = map(uM[n],0,1023,0,1023);
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	4a55      	ldr	r2, [pc, #340]	@ (80015f4 <Controle+0x2c4>)
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	edd3 7a00 	vldr	s15, [r3]
 80014a6:	79fc      	ldrb	r4, [r7, #7]
 80014a8:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80014ac:	2200      	movs	r2, #0
 80014ae:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80014b2:	2000      	movs	r0, #0
 80014b4:	eeb0 0a67 	vmov.f32	s0, s15
 80014b8:	f7ff ff04 	bl	80012c4 <map>
 80014bc:	4603      	mov	r3, r0
 80014be:	461a      	mov	r2, r3
 80014c0:	4b51      	ldr	r3, [pc, #324]	@ (8001608 <Controle+0x2d8>)
 80014c2:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
 80014c6:	e020      	b.n	800150a <Controle+0x1da>
		}else if(uM[n]<0){
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	4a4a      	ldr	r2, [pc, #296]	@ (80015f4 <Controle+0x2c4>)
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	4413      	add	r3, r2
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014dc:	d515      	bpl.n	800150a <Controle+0x1da>
			D[n]= map(uM[n],-1023,0,2047,1023);
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	4a44      	ldr	r2, [pc, #272]	@ (80015f4 <Controle+0x2c4>)
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	edd3 7a00 	vldr	s15, [r3]
 80014ea:	79fc      	ldrb	r4, [r7, #7]
 80014ec:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80014f0:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80014f4:	2100      	movs	r1, #0
 80014f6:	4845      	ldr	r0, [pc, #276]	@ (800160c <Controle+0x2dc>)
 80014f8:	eeb0 0a67 	vmov.f32	s0, s15
 80014fc:	f7ff fee2 	bl	80012c4 <map>
 8001500:	4603      	mov	r3, r0
 8001502:	461a      	mov	r2, r3
 8001504:	4b40      	ldr	r3, [pc, #256]	@ (8001608 <Controle+0x2d8>)
 8001506:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for(uint8_t n=0;n<4;n++){
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	3301      	adds	r3, #1
 800150e:	71fb      	strb	r3, [r7, #7]
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	2b03      	cmp	r3, #3
 8001514:	f67f af12 	bls.w	800133c <Controle+0xc>
		}
	}

	//Logica para salvar o erro e a velocidade anterior
	cont = cont +1;
 8001518:	4b3d      	ldr	r3, [pc, #244]	@ (8001610 <Controle+0x2e0>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	3301      	adds	r3, #1
 800151e:	b2da      	uxtb	r2, r3
 8001520:	4b3b      	ldr	r3, [pc, #236]	@ (8001610 <Controle+0x2e0>)
 8001522:	701a      	strb	r2, [r3, #0]
	if(cont == 1){
 8001524:	4b3a      	ldr	r3, [pc, #232]	@ (8001610 <Controle+0x2e0>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b01      	cmp	r3, #1
 800152a:	d11d      	bne.n	8001568 <Controle+0x238>
		for(uint8_t n=0;n<4;n++){
 800152c:	2300      	movs	r3, #0
 800152e:	71bb      	strb	r3, [r7, #6]
 8001530:	e016      	b.n	8001560 <Controle+0x230>
			prevspeed[n] = speed[n];
 8001532:	79ba      	ldrb	r2, [r7, #6]
 8001534:	79bb      	ldrb	r3, [r7, #6]
 8001536:	4926      	ldr	r1, [pc, #152]	@ (80015d0 <Controle+0x2a0>)
 8001538:	0092      	lsls	r2, r2, #2
 800153a:	440a      	add	r2, r1
 800153c:	6812      	ldr	r2, [r2, #0]
 800153e:	4929      	ldr	r1, [pc, #164]	@ (80015e4 <Controle+0x2b4>)
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	440b      	add	r3, r1
 8001544:	601a      	str	r2, [r3, #0]
			preverror[n] = error[n];
 8001546:	79ba      	ldrb	r2, [r7, #6]
 8001548:	79bb      	ldrb	r3, [r7, #6]
 800154a:	4922      	ldr	r1, [pc, #136]	@ (80015d4 <Controle+0x2a4>)
 800154c:	0092      	lsls	r2, r2, #2
 800154e:	440a      	add	r2, r1
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	4921      	ldr	r1, [pc, #132]	@ (80015d8 <Controle+0x2a8>)
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	601a      	str	r2, [r3, #0]
		for(uint8_t n=0;n<4;n++){
 800155a:	79bb      	ldrb	r3, [r7, #6]
 800155c:	3301      	adds	r3, #1
 800155e:	71bb      	strb	r3, [r7, #6]
 8001560:	79bb      	ldrb	r3, [r7, #6]
 8001562:	2b03      	cmp	r3, #3
 8001564:	d9e5      	bls.n	8001532 <Controle+0x202>
			prevspeed[n] = speed[n];
			preverror[n] = error[n];
		}
		cont = 1;
	}
}
 8001566:	e02d      	b.n	80015c4 <Controle+0x294>
	} else if(cont ==2){
 8001568:	4b29      	ldr	r3, [pc, #164]	@ (8001610 <Controle+0x2e0>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d129      	bne.n	80015c4 <Controle+0x294>
		for(uint8_t n=0;n<4;n++){
 8001570:	2300      	movs	r3, #0
 8001572:	717b      	strb	r3, [r7, #5]
 8001574:	e020      	b.n	80015b8 <Controle+0x288>
			prevspeed2[n] = prevspeed[n];
 8001576:	797a      	ldrb	r2, [r7, #5]
 8001578:	797b      	ldrb	r3, [r7, #5]
 800157a:	491a      	ldr	r1, [pc, #104]	@ (80015e4 <Controle+0x2b4>)
 800157c:	0092      	lsls	r2, r2, #2
 800157e:	440a      	add	r2, r1
 8001580:	6812      	ldr	r2, [r2, #0]
 8001582:	4919      	ldr	r1, [pc, #100]	@ (80015e8 <Controle+0x2b8>)
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	440b      	add	r3, r1
 8001588:	601a      	str	r2, [r3, #0]
			prevspeed[n] = speed[n];
 800158a:	797a      	ldrb	r2, [r7, #5]
 800158c:	797b      	ldrb	r3, [r7, #5]
 800158e:	4910      	ldr	r1, [pc, #64]	@ (80015d0 <Controle+0x2a0>)
 8001590:	0092      	lsls	r2, r2, #2
 8001592:	440a      	add	r2, r1
 8001594:	6812      	ldr	r2, [r2, #0]
 8001596:	4913      	ldr	r1, [pc, #76]	@ (80015e4 <Controle+0x2b4>)
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	440b      	add	r3, r1
 800159c:	601a      	str	r2, [r3, #0]
			preverror[n] = error[n];
 800159e:	797a      	ldrb	r2, [r7, #5]
 80015a0:	797b      	ldrb	r3, [r7, #5]
 80015a2:	490c      	ldr	r1, [pc, #48]	@ (80015d4 <Controle+0x2a4>)
 80015a4:	0092      	lsls	r2, r2, #2
 80015a6:	440a      	add	r2, r1
 80015a8:	6812      	ldr	r2, [r2, #0]
 80015aa:	490b      	ldr	r1, [pc, #44]	@ (80015d8 <Controle+0x2a8>)
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	440b      	add	r3, r1
 80015b0:	601a      	str	r2, [r3, #0]
		for(uint8_t n=0;n<4;n++){
 80015b2:	797b      	ldrb	r3, [r7, #5]
 80015b4:	3301      	adds	r3, #1
 80015b6:	717b      	strb	r3, [r7, #5]
 80015b8:	797b      	ldrb	r3, [r7, #5]
 80015ba:	2b03      	cmp	r3, #3
 80015bc:	d9db      	bls.n	8001576 <Controle+0x246>
		cont = 1;
 80015be:	4b14      	ldr	r3, [pc, #80]	@ (8001610 <Controle+0x2e0>)
 80015c0:	2201      	movs	r2, #1
 80015c2:	701a      	strb	r2, [r3, #0]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd90      	pop	{r4, r7, pc}
 80015cc:	240004b8 	.word	0x240004b8
 80015d0:	24000554 	.word	0x24000554
 80015d4:	240004c8 	.word	0x240004c8
 80015d8:	24000518 	.word	0x24000518
 80015dc:	24000008 	.word	0x24000008
 80015e0:	2400000c 	.word	0x2400000c
 80015e4:	240004f8 	.word	0x240004f8
 80015e8:	24000508 	.word	0x24000508
 80015ec:	24000010 	.word	0x24000010
 80015f0:	240004d8 	.word	0x240004d8
 80015f4:	240004e8 	.word	0x240004e8
 80015f8:	c47fc000 	.word	0xc47fc000
 80015fc:	c47fc000 	.word	0xc47fc000
 8001600:	447fc000 	.word	0x447fc000
 8001604:	447fc000 	.word	0x447fc000
 8001608:	2400052c 	.word	0x2400052c
 800160c:	fffffc01 	.word	0xfffffc01
 8001610:	24000528 	.word	0x24000528

08001614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001618:	bf00      	nop
 800161a:	e7fd      	b.n	8001618 <NMI_Handler+0x4>

0800161c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001620:	bf00      	nop
 8001622:	e7fd      	b.n	8001620 <HardFault_Handler+0x4>

08001624 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001628:	bf00      	nop
 800162a:	e7fd      	b.n	8001628 <MemManage_Handler+0x4>

0800162c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <BusFault_Handler+0x4>

08001634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <UsageFault_Handler+0x4>

0800163c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800166a:	f001 f949 	bl	8002900 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
	...

08001674 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 8001678:	4802      	ldr	r0, [pc, #8]	@ (8001684 <DMA1_Stream1_IRQHandler+0x10>)
 800167a:	f003 fbc1 	bl	8004e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	240007f4 	.word	0x240007f4

08001688 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 800168c:	4802      	ldr	r0, [pc, #8]	@ (8001698 <DMA1_Stream3_IRQHandler+0x10>)
 800168e:	f003 fbb7 	bl	8004e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	2400086c 	.word	0x2400086c

0800169c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 80016a0:	4802      	ldr	r0, [pc, #8]	@ (80016ac <DMA1_Stream4_IRQHandler+0x10>)
 80016a2:	f003 fbad 	bl	8004e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	240008e4 	.word	0x240008e4

080016b0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80016b4:	4802      	ldr	r0, [pc, #8]	@ (80016c0 <DMA1_Stream5_IRQHandler+0x10>)
 80016b6:	f003 fba3 	bl	8004e00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80016ba:	bf00      	nop
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	2400077c 	.word	0x2400077c

080016c4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80016c8:	4802      	ldr	r0, [pc, #8]	@ (80016d4 <TIM4_IRQHandler+0x10>)
 80016ca:	f00a fca3 	bl	800c014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	2400064c 	.word	0x2400064c

080016d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80016dc:	2000      	movs	r0, #0
 80016de:	f000 ffa1 	bl	8002624 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80016ec:	4802      	ldr	r0, [pc, #8]	@ (80016f8 <OTG_FS_IRQHandler+0x10>)
 80016ee:	f005 fa5c 	bl	8006baa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	24001ee0 	.word	0x24001ee0
 80016fc:	00000000 	.word	0x00000000

08001700 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8001706:	483a      	ldr	r0, [pc, #232]	@ (80017f0 <TIM15_IRQHandler+0xf0>)
 8001708:	f00a fc84 	bl	800c014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */
  //
  Enc[0] = TIM4->CNT;
 800170c:	4b39      	ldr	r3, [pc, #228]	@ (80017f4 <TIM15_IRQHandler+0xf4>)
 800170e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001710:	4a39      	ldr	r2, [pc, #228]	@ (80017f8 <TIM15_IRQHandler+0xf8>)
 8001712:	6013      	str	r3, [r2, #0]
  Enc[1] = TIM1->CNT;
 8001714:	4b39      	ldr	r3, [pc, #228]	@ (80017fc <TIM15_IRQHandler+0xfc>)
 8001716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001718:	4a37      	ldr	r2, [pc, #220]	@ (80017f8 <TIM15_IRQHandler+0xf8>)
 800171a:	6053      	str	r3, [r2, #4]
  Enc[2] = TIM8->CNT;
 800171c:	4b38      	ldr	r3, [pc, #224]	@ (8001800 <TIM15_IRQHandler+0x100>)
 800171e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001720:	4a35      	ldr	r2, [pc, #212]	@ (80017f8 <TIM15_IRQHandler+0xf8>)
 8001722:	6093      	str	r3, [r2, #8]
  Enc[3] = TIM3->CNT;
 8001724:	4b37      	ldr	r3, [pc, #220]	@ (8001804 <TIM15_IRQHandler+0x104>)
 8001726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001728:	4a33      	ldr	r2, [pc, #204]	@ (80017f8 <TIM15_IRQHandler+0xf8>)
 800172a:	60d3      	str	r3, [r2, #12]
  TIM4->CNT = 0;
 800172c:	4b31      	ldr	r3, [pc, #196]	@ (80017f4 <TIM15_IRQHandler+0xf4>)
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM1->CNT = 0;
 8001732:	4b32      	ldr	r3, [pc, #200]	@ (80017fc <TIM15_IRQHandler+0xfc>)
 8001734:	2200      	movs	r2, #0
 8001736:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM8->CNT = 0;
 8001738:	4b31      	ldr	r3, [pc, #196]	@ (8001800 <TIM15_IRQHandler+0x100>)
 800173a:	2200      	movs	r2, #0
 800173c:	625a      	str	r2, [r3, #36]	@ 0x24
  TIM3->CNT = 0;
 800173e:	4b31      	ldr	r3, [pc, #196]	@ (8001804 <TIM15_IRQHandler+0x104>)
 8001740:	2200      	movs	r2, #0
 8001742:	625a      	str	r2, [r3, #36]	@ 0x24

  for(uint8_t i=0;i<4;i++){
 8001744:	2300      	movs	r3, #0
 8001746:	71fb      	strb	r3, [r7, #7]
 8001748:	e03b      	b.n	80017c2 <TIM15_IRQHandler+0xc2>
	  vel[i] = Enc[i];
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	4a2a      	ldr	r2, [pc, #168]	@ (80017f8 <TIM15_IRQHandler+0xf8>)
 800174e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	4611      	mov	r1, r2
 8001756:	4a2c      	ldr	r2, [pc, #176]	@ (8001808 <TIM15_IRQHandler+0x108>)
 8001758:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  if(vel[i]>60000){
 800175c:	79fb      	ldrb	r3, [r7, #7]
 800175e:	4a2a      	ldr	r2, [pc, #168]	@ (8001808 <TIM15_IRQHandler+0x108>)
 8001760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001764:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001768:	4293      	cmp	r3, r2
 800176a:	dd09      	ble.n	8001780 <TIM15_IRQHandler+0x80>
			  vel[i] = vel[i] - 65356;
 800176c:	79fb      	ldrb	r3, [r7, #7]
 800176e:	4a26      	ldr	r2, [pc, #152]	@ (8001808 <TIM15_IRQHandler+0x108>)
 8001770:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001774:	79fa      	ldrb	r2, [r7, #7]
 8001776:	4b25      	ldr	r3, [pc, #148]	@ (800180c <TIM15_IRQHandler+0x10c>)
 8001778:	440b      	add	r3, r1
 800177a:	4923      	ldr	r1, [pc, #140]	@ (8001808 <TIM15_IRQHandler+0x108>)
 800177c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	  }
	  speed[i] = vel[i]/(81.92);
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	4a21      	ldr	r2, [pc, #132]	@ (8001808 <TIM15_IRQHandler+0x108>)
 8001784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001788:	ee07 3a90 	vmov	s15, r3
 800178c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8001790:	ed9f 5b15 	vldr	d5, [pc, #84]	@ 80017e8 <TIM15_IRQHandler+0xe8>
 8001794:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800179e:	4a1c      	ldr	r2, [pc, #112]	@ (8001810 <TIM15_IRQHandler+0x110>)
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	edc3 7a00 	vstr	s15, [r3]
	  velocidade[i] = speed[i];
 80017a8:	79fa      	ldrb	r2, [r7, #7]
 80017aa:	79fb      	ldrb	r3, [r7, #7]
 80017ac:	4918      	ldr	r1, [pc, #96]	@ (8001810 <TIM15_IRQHandler+0x110>)
 80017ae:	0092      	lsls	r2, r2, #2
 80017b0:	440a      	add	r2, r1
 80017b2:	6812      	ldr	r2, [r2, #0]
 80017b4:	4917      	ldr	r1, [pc, #92]	@ (8001814 <TIM15_IRQHandler+0x114>)
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	601a      	str	r2, [r3, #0]
  for(uint8_t i=0;i<4;i++){
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	3301      	adds	r3, #1
 80017c0:	71fb      	strb	r3, [r7, #7]
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	d9c0      	bls.n	800174a <TIM15_IRQHandler+0x4a>
  }

  //velocidade = speed[0];
  Controle();
 80017c8:	f7ff fdb2 	bl	8001330 <Controle>

  dshot_write(D);
 80017cc:	4812      	ldr	r0, [pc, #72]	@ (8001818 <TIM15_IRQHandler+0x118>)
 80017ce:	f7ff f8f6 	bl	80009be <dshot_write>

  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 80017d2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80017d6:	4811      	ldr	r0, [pc, #68]	@ (800181c <TIM15_IRQHandler+0x11c>)
 80017d8:	f005 f85d 	bl	8006896 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM15_IRQn 1 */
}
 80017dc:	bf00      	nop
 80017de:	3708      	adds	r7, #8
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	f3af 8000 	nop.w
 80017e8:	47ae147b 	.word	0x47ae147b
 80017ec:	40547ae1 	.word	0x40547ae1
 80017f0:	24000730 	.word	0x24000730
 80017f4:	40000800 	.word	0x40000800
 80017f8:	24000534 	.word	0x24000534
 80017fc:	40010000 	.word	0x40010000
 8001800:	40010400 	.word	0x40010400
 8001804:	40000400 	.word	0x40000400
 8001808:	24000544 	.word	0x24000544
 800180c:	ffff00b4 	.word	0xffff00b4
 8001810:	24000554 	.word	0x24000554
 8001814:	240004a8 	.word	0x240004a8
 8001818:	2400052c 	.word	0x2400052c
 800181c:	58020400 	.word	0x58020400

08001820 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return 1;
 8001824:	2301      	movs	r3, #1
}
 8001826:	4618      	mov	r0, r3
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <_kill>:

int _kill(int pid, int sig)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800183a:	f011 fa4d 	bl	8012cd8 <__errno>
 800183e:	4603      	mov	r3, r0
 8001840:	2216      	movs	r2, #22
 8001842:	601a      	str	r2, [r3, #0]
  return -1;
 8001844:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001848:	4618      	mov	r0, r3
 800184a:	3708      	adds	r7, #8
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <_exit>:

void _exit (int status)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001858:	f04f 31ff 	mov.w	r1, #4294967295
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f7ff ffe7 	bl	8001830 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001862:	bf00      	nop
 8001864:	e7fd      	b.n	8001862 <_exit+0x12>

08001866 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b086      	sub	sp, #24
 800186a:	af00      	add	r7, sp, #0
 800186c:	60f8      	str	r0, [r7, #12]
 800186e:	60b9      	str	r1, [r7, #8]
 8001870:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001872:	2300      	movs	r3, #0
 8001874:	617b      	str	r3, [r7, #20]
 8001876:	e00a      	b.n	800188e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001878:	f3af 8000 	nop.w
 800187c:	4601      	mov	r1, r0
 800187e:	68bb      	ldr	r3, [r7, #8]
 8001880:	1c5a      	adds	r2, r3, #1
 8001882:	60ba      	str	r2, [r7, #8]
 8001884:	b2ca      	uxtb	r2, r1
 8001886:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	3301      	adds	r3, #1
 800188c:	617b      	str	r3, [r7, #20]
 800188e:	697a      	ldr	r2, [r7, #20]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	429a      	cmp	r2, r3
 8001894:	dbf0      	blt.n	8001878 <_read+0x12>
  }

  return len;
 8001896:	687b      	ldr	r3, [r7, #4]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3718      	adds	r7, #24
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b086      	sub	sp, #24
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]
 80018b0:	e009      	b.n	80018c6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	1c5a      	adds	r2, r3, #1
 80018b6:	60ba      	str	r2, [r7, #8]
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f000 ff32 	bl	8002724 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	3301      	adds	r3, #1
 80018c4:	617b      	str	r3, [r7, #20]
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	dbf1      	blt.n	80018b2 <_write+0x12>
  }
  return len;
 80018ce:	687b      	ldr	r3, [r7, #4]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <_close>:

int _close(int file)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	370c      	adds	r7, #12
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr

080018f0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
 80018f8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001900:	605a      	str	r2, [r3, #4]
  return 0;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr

08001910 <_isatty>:

int _isatty(int file)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001918:	2301      	movs	r3, #1
}
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001926:	b480      	push	{r7}
 8001928:	b085      	sub	sp, #20
 800192a:	af00      	add	r7, sp, #0
 800192c:	60f8      	str	r0, [r7, #12]
 800192e:	60b9      	str	r1, [r7, #8]
 8001930:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001948:	4a14      	ldr	r2, [pc, #80]	@ (800199c <_sbrk+0x5c>)
 800194a:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <_sbrk+0x60>)
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001954:	4b13      	ldr	r3, [pc, #76]	@ (80019a4 <_sbrk+0x64>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d102      	bne.n	8001962 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800195c:	4b11      	ldr	r3, [pc, #68]	@ (80019a4 <_sbrk+0x64>)
 800195e:	4a12      	ldr	r2, [pc, #72]	@ (80019a8 <_sbrk+0x68>)
 8001960:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001962:	4b10      	ldr	r3, [pc, #64]	@ (80019a4 <_sbrk+0x64>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4413      	add	r3, r2
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	429a      	cmp	r2, r3
 800196e:	d207      	bcs.n	8001980 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001970:	f011 f9b2 	bl	8012cd8 <__errno>
 8001974:	4603      	mov	r3, r0
 8001976:	220c      	movs	r2, #12
 8001978:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800197a:	f04f 33ff 	mov.w	r3, #4294967295
 800197e:	e009      	b.n	8001994 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001980:	4b08      	ldr	r3, [pc, #32]	@ (80019a4 <_sbrk+0x64>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001986:	4b07      	ldr	r3, [pc, #28]	@ (80019a4 <_sbrk+0x64>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	4a05      	ldr	r2, [pc, #20]	@ (80019a4 <_sbrk+0x64>)
 8001990:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001992:	68fb      	ldr	r3, [r7, #12]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	24080000 	.word	0x24080000
 80019a0:	00000400 	.word	0x00000400
 80019a4:	24000564 	.word	0x24000564
 80019a8:	24002730 	.word	0x24002730

080019ac <MX_TIM1_Init>:
DMA_HandleTypeDef hdma_tim5_ch4;
DMA_HandleTypeDef hdma_tim5_ch2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08c      	sub	sp, #48	@ 0x30
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019b2:	f107 030c 	add.w	r3, r7, #12
 80019b6:	2224      	movs	r2, #36	@ 0x24
 80019b8:	2100      	movs	r1, #0
 80019ba:	4618      	mov	r0, r3
 80019bc:	f011 f939 	bl	8012c32 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019c0:	463b      	mov	r3, r7
 80019c2:	2200      	movs	r2, #0
 80019c4:	601a      	str	r2, [r3, #0]
 80019c6:	605a      	str	r2, [r3, #4]
 80019c8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019ca:	4b23      	ldr	r3, [pc, #140]	@ (8001a58 <MX_TIM1_Init+0xac>)
 80019cc:	4a23      	ldr	r2, [pc, #140]	@ (8001a5c <MX_TIM1_Init+0xb0>)
 80019ce:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019d0:	4b21      	ldr	r3, [pc, #132]	@ (8001a58 <MX_TIM1_Init+0xac>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019d6:	4b20      	ldr	r3, [pc, #128]	@ (8001a58 <MX_TIM1_Init+0xac>)
 80019d8:	2200      	movs	r2, #0
 80019da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80019dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001a58 <MX_TIM1_Init+0xac>)
 80019de:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001a58 <MX_TIM1_Init+0xac>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019ea:	4b1b      	ldr	r3, [pc, #108]	@ (8001a58 <MX_TIM1_Init+0xac>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019f0:	4b19      	ldr	r3, [pc, #100]	@ (8001a58 <MX_TIM1_Init+0xac>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80019f6:	2303      	movs	r3, #3
 80019f8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80019fa:	2302      	movs	r3, #2
 80019fc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019fe:	2301      	movs	r3, #1
 8001a00:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a12:	2300      	movs	r3, #0
 8001a14:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001a1a:	f107 030c 	add.w	r3, r7, #12
 8001a1e:	4619      	mov	r1, r3
 8001a20:	480d      	ldr	r0, [pc, #52]	@ (8001a58 <MX_TIM1_Init+0xac>)
 8001a22:	f00a f9a3 	bl	800bd6c <HAL_TIM_Encoder_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001a2c:	f7ff fc29 	bl	8001282 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a30:	2300      	movs	r3, #0
 8001a32:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a34:	2300      	movs	r3, #0
 8001a36:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a3c:	463b      	mov	r3, r7
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4805      	ldr	r0, [pc, #20]	@ (8001a58 <MX_TIM1_Init+0xac>)
 8001a42:	f00b fa63 	bl	800cf0c <HAL_TIMEx_MasterConfigSynchronization>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001a4c:	f7ff fc19 	bl	8001282 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001a50:	bf00      	nop
 8001a52:	3730      	adds	r7, #48	@ 0x30
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	24000568 	.word	0x24000568
 8001a5c:	40010000 	.word	0x40010000

08001a60 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	@ 0x28
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a66:	f107 031c 	add.w	r3, r7, #28
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a72:	463b      	mov	r3, r7
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
 8001a80:	615a      	str	r2, [r3, #20]
 8001a82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001a84:	4b27      	ldr	r3, [pc, #156]	@ (8001b24 <MX_TIM2_Init+0xc4>)
 8001a86:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001a8a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001a8c:	4b25      	ldr	r3, [pc, #148]	@ (8001b24 <MX_TIM2_Init+0xc4>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a92:	4b24      	ldr	r3, [pc, #144]	@ (8001b24 <MX_TIM2_Init+0xc4>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8001a98:	4b22      	ldr	r3, [pc, #136]	@ (8001b24 <MX_TIM2_Init+0xc4>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a9e:	4b21      	ldr	r3, [pc, #132]	@ (8001b24 <MX_TIM2_Init+0xc4>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b24 <MX_TIM2_Init+0xc4>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001aaa:	481e      	ldr	r0, [pc, #120]	@ (8001b24 <MX_TIM2_Init+0xc4>)
 8001aac:	f009 fff8 	bl	800baa0 <HAL_TIM_PWM_Init>
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d001      	beq.n	8001aba <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001ab6:	f7ff fbe4 	bl	8001282 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ac2:	f107 031c 	add.w	r3, r7, #28
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4816      	ldr	r0, [pc, #88]	@ (8001b24 <MX_TIM2_Init+0xc4>)
 8001aca:	f00b fa1f 	bl	800cf0c <HAL_TIMEx_MasterConfigSynchronization>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001ad4:	f7ff fbd5 	bl	8001282 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ad8:	2360      	movs	r3, #96	@ 0x60
 8001ada:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001adc:	2300      	movs	r3, #0
 8001ade:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ae8:	463b      	mov	r3, r7
 8001aea:	2200      	movs	r2, #0
 8001aec:	4619      	mov	r1, r3
 8001aee:	480d      	ldr	r0, [pc, #52]	@ (8001b24 <MX_TIM2_Init+0xc4>)
 8001af0:	f00a fb98 	bl	800c224 <HAL_TIM_PWM_ConfigChannel>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001afa:	f7ff fbc2 	bl	8001282 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001afe:	463b      	mov	r3, r7
 8001b00:	2208      	movs	r2, #8
 8001b02:	4619      	mov	r1, r3
 8001b04:	4807      	ldr	r0, [pc, #28]	@ (8001b24 <MX_TIM2_Init+0xc4>)
 8001b06:	f00a fb8d 	bl	800c224 <HAL_TIM_PWM_ConfigChannel>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b10:	f7ff fbb7 	bl	8001282 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b14:	4803      	ldr	r0, [pc, #12]	@ (8001b24 <MX_TIM2_Init+0xc4>)
 8001b16:	f000 fc13 	bl	8002340 <HAL_TIM_MspPostInit>

}
 8001b1a:	bf00      	nop
 8001b1c:	3728      	adds	r7, #40	@ 0x28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	240005b4 	.word	0x240005b4

08001b28 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08c      	sub	sp, #48	@ 0x30
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b2e:	f107 030c 	add.w	r3, r7, #12
 8001b32:	2224      	movs	r2, #36	@ 0x24
 8001b34:	2100      	movs	r1, #0
 8001b36:	4618      	mov	r0, r3
 8001b38:	f011 f87b 	bl	8012c32 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b46:	4b21      	ldr	r3, [pc, #132]	@ (8001bcc <MX_TIM3_Init+0xa4>)
 8001b48:	4a21      	ldr	r2, [pc, #132]	@ (8001bd0 <MX_TIM3_Init+0xa8>)
 8001b4a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001bcc <MX_TIM3_Init+0xa4>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b52:	4b1e      	ldr	r3, [pc, #120]	@ (8001bcc <MX_TIM3_Init+0xa4>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b58:	4b1c      	ldr	r3, [pc, #112]	@ (8001bcc <MX_TIM3_Init+0xa4>)
 8001b5a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b5e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b60:	4b1a      	ldr	r3, [pc, #104]	@ (8001bcc <MX_TIM3_Init+0xa4>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b66:	4b19      	ldr	r3, [pc, #100]	@ (8001bcc <MX_TIM3_Init+0xa4>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b6c:	2303      	movs	r3, #3
 8001b6e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001b70:	2302      	movs	r3, #2
 8001b72:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b74:	2301      	movs	r3, #1
 8001b76:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001b80:	2302      	movs	r3, #2
 8001b82:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b84:	2301      	movs	r3, #1
 8001b86:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001b90:	f107 030c 	add.w	r3, r7, #12
 8001b94:	4619      	mov	r1, r3
 8001b96:	480d      	ldr	r0, [pc, #52]	@ (8001bcc <MX_TIM3_Init+0xa4>)
 8001b98:	f00a f8e8 	bl	800bd6c <HAL_TIM_Encoder_Init>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001ba2:	f7ff fb6e 	bl	8001282 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001baa:	2300      	movs	r3, #0
 8001bac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bae:	463b      	mov	r3, r7
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4806      	ldr	r0, [pc, #24]	@ (8001bcc <MX_TIM3_Init+0xa4>)
 8001bb4:	f00b f9aa 	bl	800cf0c <HAL_TIMEx_MasterConfigSynchronization>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001bbe:	f7ff fb60 	bl	8001282 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bc2:	bf00      	nop
 8001bc4:	3730      	adds	r7, #48	@ 0x30
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	24000600 	.word	0x24000600
 8001bd0:	40000400 	.word	0x40000400

08001bd4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08c      	sub	sp, #48	@ 0x30
 8001bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bda:	f107 030c 	add.w	r3, r7, #12
 8001bde:	2224      	movs	r2, #36	@ 0x24
 8001be0:	2100      	movs	r1, #0
 8001be2:	4618      	mov	r0, r3
 8001be4:	f011 f825 	bl	8012c32 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be8:	463b      	mov	r3, r7
 8001bea:	2200      	movs	r2, #0
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	605a      	str	r2, [r3, #4]
 8001bf0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001bf2:	4b21      	ldr	r3, [pc, #132]	@ (8001c78 <MX_TIM4_Init+0xa4>)
 8001bf4:	4a21      	ldr	r2, [pc, #132]	@ (8001c7c <MX_TIM4_Init+0xa8>)
 8001bf6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001bf8:	4b1f      	ldr	r3, [pc, #124]	@ (8001c78 <MX_TIM4_Init+0xa4>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001c78 <MX_TIM4_Init+0xa4>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c04:	4b1c      	ldr	r3, [pc, #112]	@ (8001c78 <MX_TIM4_Init+0xa4>)
 8001c06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c0a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001c78 <MX_TIM4_Init+0xa4>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c12:	4b19      	ldr	r3, [pc, #100]	@ (8001c78 <MX_TIM4_Init+0xa4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c18:	2303      	movs	r3, #3
 8001c1a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c20:	2301      	movs	r3, #1
 8001c22:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c24:	2300      	movs	r3, #0
 8001c26:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c30:	2301      	movs	r3, #1
 8001c32:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c34:	2300      	movs	r3, #0
 8001c36:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001c3c:	f107 030c 	add.w	r3, r7, #12
 8001c40:	4619      	mov	r1, r3
 8001c42:	480d      	ldr	r0, [pc, #52]	@ (8001c78 <MX_TIM4_Init+0xa4>)
 8001c44:	f00a f892 	bl	800bd6c <HAL_TIM_Encoder_Init>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001c4e:	f7ff fb18 	bl	8001282 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c52:	2300      	movs	r3, #0
 8001c54:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001c5a:	463b      	mov	r3, r7
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	4806      	ldr	r0, [pc, #24]	@ (8001c78 <MX_TIM4_Init+0xa4>)
 8001c60:	f00b f954 	bl	800cf0c <HAL_TIMEx_MasterConfigSynchronization>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 8001c6a:	f7ff fb0a 	bl	8001282 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001c6e:	bf00      	nop
 8001c70:	3730      	adds	r7, #48	@ 0x30
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	2400064c 	.word	0x2400064c
 8001c7c:	40000800 	.word	0x40000800

08001c80 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	@ 0x28
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c86:	f107 031c 	add.w	r3, r7, #28
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]
 8001c90:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c92:	463b      	mov	r3, r7
 8001c94:	2200      	movs	r2, #0
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	605a      	str	r2, [r3, #4]
 8001c9a:	609a      	str	r2, [r3, #8]
 8001c9c:	60da      	str	r2, [r3, #12]
 8001c9e:	611a      	str	r2, [r3, #16]
 8001ca0:	615a      	str	r2, [r3, #20]
 8001ca2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ca4:	4b26      	ldr	r3, [pc, #152]	@ (8001d40 <MX_TIM5_Init+0xc0>)
 8001ca6:	4a27      	ldr	r2, [pc, #156]	@ (8001d44 <MX_TIM5_Init+0xc4>)
 8001ca8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001caa:	4b25      	ldr	r3, [pc, #148]	@ (8001d40 <MX_TIM5_Init+0xc0>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb0:	4b23      	ldr	r3, [pc, #140]	@ (8001d40 <MX_TIM5_Init+0xc0>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8001cb6:	4b22      	ldr	r3, [pc, #136]	@ (8001d40 <MX_TIM5_Init+0xc0>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cbc:	4b20      	ldr	r3, [pc, #128]	@ (8001d40 <MX_TIM5_Init+0xc0>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc2:	4b1f      	ldr	r3, [pc, #124]	@ (8001d40 <MX_TIM5_Init+0xc0>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001cc8:	481d      	ldr	r0, [pc, #116]	@ (8001d40 <MX_TIM5_Init+0xc0>)
 8001cca:	f009 fee9 	bl	800baa0 <HAL_TIM_PWM_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001cd4:	f7ff fad5 	bl	8001282 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001ce0:	f107 031c 	add.w	r3, r7, #28
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4816      	ldr	r0, [pc, #88]	@ (8001d40 <MX_TIM5_Init+0xc0>)
 8001ce8:	f00b f910 	bl	800cf0c <HAL_TIMEx_MasterConfigSynchronization>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001cf2:	f7ff fac6 	bl	8001282 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cf6:	2360      	movs	r3, #96	@ 0x60
 8001cf8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d02:	2300      	movs	r3, #0
 8001d04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d06:	463b      	mov	r3, r7
 8001d08:	2204      	movs	r2, #4
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	480c      	ldr	r0, [pc, #48]	@ (8001d40 <MX_TIM5_Init+0xc0>)
 8001d0e:	f00a fa89 	bl	800c224 <HAL_TIM_PWM_ConfigChannel>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001d18:	f7ff fab3 	bl	8001282 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d1c:	463b      	mov	r3, r7
 8001d1e:	220c      	movs	r2, #12
 8001d20:	4619      	mov	r1, r3
 8001d22:	4807      	ldr	r0, [pc, #28]	@ (8001d40 <MX_TIM5_Init+0xc0>)
 8001d24:	f00a fa7e 	bl	800c224 <HAL_TIM_PWM_ConfigChannel>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001d2e:	f7ff faa8 	bl	8001282 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001d32:	4803      	ldr	r0, [pc, #12]	@ (8001d40 <MX_TIM5_Init+0xc0>)
 8001d34:	f000 fb04 	bl	8002340 <HAL_TIM_MspPostInit>

}
 8001d38:	bf00      	nop
 8001d3a:	3728      	adds	r7, #40	@ 0x28
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	24000698 	.word	0x24000698
 8001d44:	40000c00 	.word	0x40000c00

08001d48 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b08c      	sub	sp, #48	@ 0x30
 8001d4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d4e:	f107 030c 	add.w	r3, r7, #12
 8001d52:	2224      	movs	r2, #36	@ 0x24
 8001d54:	2100      	movs	r1, #0
 8001d56:	4618      	mov	r0, r3
 8001d58:	f010 ff6b 	bl	8012c32 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d5c:	463b      	mov	r3, r7
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	605a      	str	r2, [r3, #4]
 8001d64:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d66:	4b23      	ldr	r3, [pc, #140]	@ (8001df4 <MX_TIM8_Init+0xac>)
 8001d68:	4a23      	ldr	r2, [pc, #140]	@ (8001df8 <MX_TIM8_Init+0xb0>)
 8001d6a:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001d6c:	4b21      	ldr	r3, [pc, #132]	@ (8001df4 <MX_TIM8_Init+0xac>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d72:	4b20      	ldr	r3, [pc, #128]	@ (8001df4 <MX_TIM8_Init+0xac>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001d78:	4b1e      	ldr	r3, [pc, #120]	@ (8001df4 <MX_TIM8_Init+0xac>)
 8001d7a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001d7e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d80:	4b1c      	ldr	r3, [pc, #112]	@ (8001df4 <MX_TIM8_Init+0xac>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001d86:	4b1b      	ldr	r3, [pc, #108]	@ (8001df4 <MX_TIM8_Init+0xac>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8c:	4b19      	ldr	r3, [pc, #100]	@ (8001df4 <MX_TIM8_Init+0xac>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d92:	2303      	movs	r3, #3
 8001d94:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001d96:	2302      	movs	r3, #2
 8001d98:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001da6:	2302      	movs	r3, #2
 8001da8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001daa:	2301      	movs	r3, #1
 8001dac:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001dae:	2300      	movs	r3, #0
 8001db0:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001db2:	2300      	movs	r3, #0
 8001db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001db6:	f107 030c 	add.w	r3, r7, #12
 8001dba:	4619      	mov	r1, r3
 8001dbc:	480d      	ldr	r0, [pc, #52]	@ (8001df4 <MX_TIM8_Init+0xac>)
 8001dbe:	f009 ffd5 	bl	800bd6c <HAL_TIM_Encoder_Init>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d001      	beq.n	8001dcc <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001dc8:	f7ff fa5b 	bl	8001282 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001dd8:	463b      	mov	r3, r7
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4805      	ldr	r0, [pc, #20]	@ (8001df4 <MX_TIM8_Init+0xac>)
 8001dde:	f00b f895 	bl	800cf0c <HAL_TIMEx_MasterConfigSynchronization>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001de8:	f7ff fa4b 	bl	8001282 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001dec:	bf00      	nop
 8001dee:	3730      	adds	r7, #48	@ 0x30
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	240006e4 	.word	0x240006e4
 8001df8:	40010400 	.word	0x40010400

08001dfc <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e02:	f107 0310 	add.w	r3, r7, #16
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e10:	1d3b      	adds	r3, r7, #4
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001e1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001e98 <MX_TIM15_Init+0x9c>)
 8001e1c:	4a1f      	ldr	r2, [pc, #124]	@ (8001e9c <MX_TIM15_Init+0xa0>)
 8001e1e:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 19999;
 8001e20:	4b1d      	ldr	r3, [pc, #116]	@ (8001e98 <MX_TIM15_Init+0x9c>)
 8001e22:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001e26:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e28:	4b1b      	ldr	r3, [pc, #108]	@ (8001e98 <MX_TIM15_Init+0x9c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 99;
 8001e2e:	4b1a      	ldr	r3, [pc, #104]	@ (8001e98 <MX_TIM15_Init+0x9c>)
 8001e30:	2263      	movs	r2, #99	@ 0x63
 8001e32:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e34:	4b18      	ldr	r3, [pc, #96]	@ (8001e98 <MX_TIM15_Init+0x9c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001e3a:	4b17      	ldr	r3, [pc, #92]	@ (8001e98 <MX_TIM15_Init+0x9c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e40:	4b15      	ldr	r3, [pc, #84]	@ (8001e98 <MX_TIM15_Init+0x9c>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8001e46:	4814      	ldr	r0, [pc, #80]	@ (8001e98 <MX_TIM15_Init+0x9c>)
 8001e48:	f009 fd5a 	bl	800b900 <HAL_TIM_Base_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM15_Init+0x5a>
  {
    Error_Handler();
 8001e52:	f7ff fa16 	bl	8001282 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e5a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001e5c:	f107 0310 	add.w	r3, r7, #16
 8001e60:	4619      	mov	r1, r3
 8001e62:	480d      	ldr	r0, [pc, #52]	@ (8001e98 <MX_TIM15_Init+0x9c>)
 8001e64:	f00a faf2 	bl	800c44c <HAL_TIM_ConfigClockSource>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM15_Init+0x76>
  {
    Error_Handler();
 8001e6e:	f7ff fa08 	bl	8001282 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e72:	2300      	movs	r3, #0
 8001e74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e76:	2300      	movs	r3, #0
 8001e78:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001e7a:	1d3b      	adds	r3, r7, #4
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	4806      	ldr	r0, [pc, #24]	@ (8001e98 <MX_TIM15_Init+0x9c>)
 8001e80:	f00b f844 	bl	800cf0c <HAL_TIMEx_MasterConfigSynchronization>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_TIM15_Init+0x92>
  {
    Error_Handler();
 8001e8a:	f7ff f9fa 	bl	8001282 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 8001e8e:	bf00      	nop
 8001e90:	3720      	adds	r7, #32
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	24000730 	.word	0x24000730
 8001e9c:	40014000 	.word	0x40014000

08001ea0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b090      	sub	sp, #64	@ 0x40
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
 8001eb2:	609a      	str	r2, [r3, #8]
 8001eb4:	60da      	str	r2, [r3, #12]
 8001eb6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a6d      	ldr	r2, [pc, #436]	@ (8002074 <HAL_TIM_Encoder_MspInit+0x1d4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d12f      	bne.n	8001f22 <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ec2:	4b6d      	ldr	r3, [pc, #436]	@ (8002078 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001ec4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ec8:	4a6b      	ldr	r2, [pc, #428]	@ (8002078 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001ed2:	4b69      	ldr	r3, [pc, #420]	@ (8002078 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001ed4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ee0:	4b65      	ldr	r3, [pc, #404]	@ (8002078 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ee6:	4a64      	ldr	r2, [pc, #400]	@ (8002078 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001ee8:	f043 0310 	orr.w	r3, r3, #16
 8001eec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ef0:	4b61      	ldr	r3, [pc, #388]	@ (8002078 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ef6:	f003 0310 	and.w	r3, r3, #16
 8001efa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENC2_A_Pin|ENC2_B_Pin;
 8001efe:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f04:	2302      	movs	r3, #2
 8001f06:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f10:	2301      	movs	r3, #1
 8001f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f14:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f18:	4619      	mov	r1, r3
 8001f1a:	4858      	ldr	r0, [pc, #352]	@ (800207c <HAL_TIM_Encoder_MspInit+0x1dc>)
 8001f1c:	f004 faf2 	bl	8006504 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001f20:	e0a3      	b.n	800206a <HAL_TIM_Encoder_MspInit+0x1ca>
  else if(tim_encoderHandle->Instance==TIM3)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a56      	ldr	r2, [pc, #344]	@ (8002080 <HAL_TIM_Encoder_MspInit+0x1e0>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d12e      	bne.n	8001f8a <HAL_TIM_Encoder_MspInit+0xea>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f2c:	4b52      	ldr	r3, [pc, #328]	@ (8002078 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001f2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f32:	4a51      	ldr	r2, [pc, #324]	@ (8002078 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001f34:	f043 0302 	orr.w	r3, r3, #2
 8001f38:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f3c:	4b4e      	ldr	r3, [pc, #312]	@ (8002078 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001f3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	623b      	str	r3, [r7, #32]
 8001f48:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f4a:	4b4b      	ldr	r3, [pc, #300]	@ (8002078 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f50:	4a49      	ldr	r2, [pc, #292]	@ (8002078 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001f52:	f043 0302 	orr.w	r3, r3, #2
 8001f56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001f5a:	4b47      	ldr	r3, [pc, #284]	@ (8002078 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	61fb      	str	r3, [r7, #28]
 8001f66:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = ENC4_A_Pin|ENC4_B_Pin;
 8001f68:	2330      	movs	r3, #48	@ 0x30
 8001f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6c:	2302      	movs	r3, #2
 8001f6e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f74:	2300      	movs	r3, #0
 8001f76:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f80:	4619      	mov	r1, r3
 8001f82:	4840      	ldr	r0, [pc, #256]	@ (8002084 <HAL_TIM_Encoder_MspInit+0x1e4>)
 8001f84:	f004 fabe 	bl	8006504 <HAL_GPIO_Init>
}
 8001f88:	e06f      	b.n	800206a <HAL_TIM_Encoder_MspInit+0x1ca>
  else if(tim_encoderHandle->Instance==TIM4)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a3e      	ldr	r2, [pc, #248]	@ (8002088 <HAL_TIM_Encoder_MspInit+0x1e8>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d137      	bne.n	8002004 <HAL_TIM_Encoder_MspInit+0x164>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001f94:	4b38      	ldr	r3, [pc, #224]	@ (8002078 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001f96:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f9a:	4a37      	ldr	r2, [pc, #220]	@ (8002078 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001f9c:	f043 0304 	orr.w	r3, r3, #4
 8001fa0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001fa4:	4b34      	ldr	r3, [pc, #208]	@ (8002078 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001fa6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	61bb      	str	r3, [r7, #24]
 8001fb0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fb2:	4b31      	ldr	r3, [pc, #196]	@ (8002078 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001fb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fb8:	4a2f      	ldr	r2, [pc, #188]	@ (8002078 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001fba:	f043 0308 	orr.w	r3, r3, #8
 8001fbe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001fc2:	4b2d      	ldr	r3, [pc, #180]	@ (8002078 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8001fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001fc8:	f003 0308 	and.w	r3, r3, #8
 8001fcc:	617b      	str	r3, [r7, #20]
 8001fce:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ENC1_A_Pin|ENC1_B_Pin;
 8001fd0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fe6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001fea:	4619      	mov	r1, r3
 8001fec:	4827      	ldr	r0, [pc, #156]	@ (800208c <HAL_TIM_Encoder_MspInit+0x1ec>)
 8001fee:	f004 fa89 	bl	8006504 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	201e      	movs	r0, #30
 8001ff8:	f002 f8f3 	bl	80041e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ffc:	201e      	movs	r0, #30
 8001ffe:	f002 f90a 	bl	8004216 <HAL_NVIC_EnableIRQ>
}
 8002002:	e032      	b.n	800206a <HAL_TIM_Encoder_MspInit+0x1ca>
  else if(tim_encoderHandle->Instance==TIM8)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a21      	ldr	r2, [pc, #132]	@ (8002090 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d12d      	bne.n	800206a <HAL_TIM_Encoder_MspInit+0x1ca>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800200e:	4b1a      	ldr	r3, [pc, #104]	@ (8002078 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002010:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002014:	4a18      	ldr	r2, [pc, #96]	@ (8002078 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002016:	f043 0302 	orr.w	r3, r3, #2
 800201a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800201e:	4b16      	ldr	r3, [pc, #88]	@ (8002078 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002020:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800202c:	4b12      	ldr	r3, [pc, #72]	@ (8002078 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800202e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002032:	4a11      	ldr	r2, [pc, #68]	@ (8002078 <HAL_TIM_Encoder_MspInit+0x1d8>)
 8002034:	f043 0304 	orr.w	r3, r3, #4
 8002038:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800203c:	4b0e      	ldr	r3, [pc, #56]	@ (8002078 <HAL_TIM_Encoder_MspInit+0x1d8>)
 800203e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ENC3_A_Pin|ENC3_B_Pin;
 800204a:	23c0      	movs	r3, #192	@ 0xc0
 800204c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204e:	2302      	movs	r3, #2
 8002050:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002052:	2300      	movs	r3, #0
 8002054:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002056:	2300      	movs	r3, #0
 8002058:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800205a:	2303      	movs	r3, #3
 800205c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800205e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002062:	4619      	mov	r1, r3
 8002064:	480b      	ldr	r0, [pc, #44]	@ (8002094 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002066:	f004 fa4d 	bl	8006504 <HAL_GPIO_Init>
}
 800206a:	bf00      	nop
 800206c:	3740      	adds	r7, #64	@ 0x40
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	40010000 	.word	0x40010000
 8002078:	58024400 	.word	0x58024400
 800207c:	58021000 	.word	0x58021000
 8002080:	40000400 	.word	0x40000400
 8002084:	58020400 	.word	0x58020400
 8002088:	40000800 	.word	0x40000800
 800208c:	58020c00 	.word	0x58020c00
 8002090:	40010400 	.word	0x40010400
 8002094:	58020800 	.word	0x58020800

08002098 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020a8:	f040 8082 	bne.w	80021b0 <HAL_TIM_PWM_MspInit+0x118>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80020ac:	4b86      	ldr	r3, [pc, #536]	@ (80022c8 <HAL_TIM_PWM_MspInit+0x230>)
 80020ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020b2:	4a85      	ldr	r2, [pc, #532]	@ (80022c8 <HAL_TIM_PWM_MspInit+0x230>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80020bc:	4b82      	ldr	r3, [pc, #520]	@ (80022c8 <HAL_TIM_PWM_MspInit+0x230>)
 80020be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 80020ca:	4b80      	ldr	r3, [pc, #512]	@ (80022cc <HAL_TIM_PWM_MspInit+0x234>)
 80020cc:	4a80      	ldr	r2, [pc, #512]	@ (80022d0 <HAL_TIM_PWM_MspInit+0x238>)
 80020ce:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 80020d0:	4b7e      	ldr	r3, [pc, #504]	@ (80022cc <HAL_TIM_PWM_MspInit+0x234>)
 80020d2:	2212      	movs	r2, #18
 80020d4:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020d6:	4b7d      	ldr	r3, [pc, #500]	@ (80022cc <HAL_TIM_PWM_MspInit+0x234>)
 80020d8:	2240      	movs	r2, #64	@ 0x40
 80020da:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80020dc:	4b7b      	ldr	r3, [pc, #492]	@ (80022cc <HAL_TIM_PWM_MspInit+0x234>)
 80020de:	2200      	movs	r2, #0
 80020e0:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80020e2:	4b7a      	ldr	r3, [pc, #488]	@ (80022cc <HAL_TIM_PWM_MspInit+0x234>)
 80020e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020e8:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80020ea:	4b78      	ldr	r3, [pc, #480]	@ (80022cc <HAL_TIM_PWM_MspInit+0x234>)
 80020ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80020f0:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80020f2:	4b76      	ldr	r3, [pc, #472]	@ (80022cc <HAL_TIM_PWM_MspInit+0x234>)
 80020f4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020f8:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80020fa:	4b74      	ldr	r3, [pc, #464]	@ (80022cc <HAL_TIM_PWM_MspInit+0x234>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8002100:	4b72      	ldr	r3, [pc, #456]	@ (80022cc <HAL_TIM_PWM_MspInit+0x234>)
 8002102:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002106:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002108:	4b70      	ldr	r3, [pc, #448]	@ (80022cc <HAL_TIM_PWM_MspInit+0x234>)
 800210a:	2204      	movs	r2, #4
 800210c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim2_ch1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800210e:	4b6f      	ldr	r3, [pc, #444]	@ (80022cc <HAL_TIM_PWM_MspInit+0x234>)
 8002110:	2200      	movs	r2, #0
 8002112:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim2_ch1.Init.MemBurst = DMA_MBURST_SINGLE;
 8002114:	4b6d      	ldr	r3, [pc, #436]	@ (80022cc <HAL_TIM_PWM_MspInit+0x234>)
 8002116:	2200      	movs	r2, #0
 8002118:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim2_ch1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800211a:	4b6c      	ldr	r3, [pc, #432]	@ (80022cc <HAL_TIM_PWM_MspInit+0x234>)
 800211c:	2200      	movs	r2, #0
 800211e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8002120:	486a      	ldr	r0, [pc, #424]	@ (80022cc <HAL_TIM_PWM_MspInit+0x234>)
 8002122:	f002 f8a7 	bl	8004274 <HAL_DMA_Init>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <HAL_TIM_PWM_MspInit+0x98>
    {
      Error_Handler();
 800212c:	f7ff f8a9 	bl	8001282 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a66      	ldr	r2, [pc, #408]	@ (80022cc <HAL_TIM_PWM_MspInit+0x234>)
 8002134:	625a      	str	r2, [r3, #36]	@ 0x24
 8002136:	4a65      	ldr	r2, [pc, #404]	@ (80022cc <HAL_TIM_PWM_MspInit+0x234>)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 800213c:	4b65      	ldr	r3, [pc, #404]	@ (80022d4 <HAL_TIM_PWM_MspInit+0x23c>)
 800213e:	4a66      	ldr	r2, [pc, #408]	@ (80022d8 <HAL_TIM_PWM_MspInit+0x240>)
 8002140:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 8002142:	4b64      	ldr	r3, [pc, #400]	@ (80022d4 <HAL_TIM_PWM_MspInit+0x23c>)
 8002144:	2214      	movs	r2, #20
 8002146:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002148:	4b62      	ldr	r3, [pc, #392]	@ (80022d4 <HAL_TIM_PWM_MspInit+0x23c>)
 800214a:	2240      	movs	r2, #64	@ 0x40
 800214c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 800214e:	4b61      	ldr	r3, [pc, #388]	@ (80022d4 <HAL_TIM_PWM_MspInit+0x23c>)
 8002150:	2200      	movs	r2, #0
 8002152:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 8002154:	4b5f      	ldr	r3, [pc, #380]	@ (80022d4 <HAL_TIM_PWM_MspInit+0x23c>)
 8002156:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800215a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800215c:	4b5d      	ldr	r3, [pc, #372]	@ (80022d4 <HAL_TIM_PWM_MspInit+0x23c>)
 800215e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002162:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002164:	4b5b      	ldr	r3, [pc, #364]	@ (80022d4 <HAL_TIM_PWM_MspInit+0x23c>)
 8002166:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800216a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 800216c:	4b59      	ldr	r3, [pc, #356]	@ (80022d4 <HAL_TIM_PWM_MspInit+0x23c>)
 800216e:	2200      	movs	r2, #0
 8002170:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8002172:	4b58      	ldr	r3, [pc, #352]	@ (80022d4 <HAL_TIM_PWM_MspInit+0x23c>)
 8002174:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002178:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800217a:	4b56      	ldr	r3, [pc, #344]	@ (80022d4 <HAL_TIM_PWM_MspInit+0x23c>)
 800217c:	2204      	movs	r2, #4
 800217e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim2_ch3.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002180:	4b54      	ldr	r3, [pc, #336]	@ (80022d4 <HAL_TIM_PWM_MspInit+0x23c>)
 8002182:	2200      	movs	r2, #0
 8002184:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim2_ch3.Init.MemBurst = DMA_MBURST_SINGLE;
 8002186:	4b53      	ldr	r3, [pc, #332]	@ (80022d4 <HAL_TIM_PWM_MspInit+0x23c>)
 8002188:	2200      	movs	r2, #0
 800218a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim2_ch3.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800218c:	4b51      	ldr	r3, [pc, #324]	@ (80022d4 <HAL_TIM_PWM_MspInit+0x23c>)
 800218e:	2200      	movs	r2, #0
 8002190:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8002192:	4850      	ldr	r0, [pc, #320]	@ (80022d4 <HAL_TIM_PWM_MspInit+0x23c>)
 8002194:	f002 f86e 	bl	8004274 <HAL_DMA_Init>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <HAL_TIM_PWM_MspInit+0x10a>
    {
      Error_Handler();
 800219e:	f7ff f870 	bl	8001282 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a4b      	ldr	r2, [pc, #300]	@ (80022d4 <HAL_TIM_PWM_MspInit+0x23c>)
 80021a6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80021a8:	4a4a      	ldr	r2, [pc, #296]	@ (80022d4 <HAL_TIM_PWM_MspInit+0x23c>)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80021ae:	e086      	b.n	80022be <HAL_TIM_PWM_MspInit+0x226>
  else if(tim_pwmHandle->Instance==TIM5)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a49      	ldr	r2, [pc, #292]	@ (80022dc <HAL_TIM_PWM_MspInit+0x244>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	f040 8081 	bne.w	80022be <HAL_TIM_PWM_MspInit+0x226>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80021bc:	4b42      	ldr	r3, [pc, #264]	@ (80022c8 <HAL_TIM_PWM_MspInit+0x230>)
 80021be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021c2:	4a41      	ldr	r2, [pc, #260]	@ (80022c8 <HAL_TIM_PWM_MspInit+0x230>)
 80021c4:	f043 0308 	orr.w	r3, r3, #8
 80021c8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80021cc:	4b3e      	ldr	r3, [pc, #248]	@ (80022c8 <HAL_TIM_PWM_MspInit+0x230>)
 80021ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	60bb      	str	r3, [r7, #8]
 80021d8:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch4.Instance = DMA1_Stream3;
 80021da:	4b41      	ldr	r3, [pc, #260]	@ (80022e0 <HAL_TIM_PWM_MspInit+0x248>)
 80021dc:	4a41      	ldr	r2, [pc, #260]	@ (80022e4 <HAL_TIM_PWM_MspInit+0x24c>)
 80021de:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80021e0:	4b3f      	ldr	r3, [pc, #252]	@ (80022e0 <HAL_TIM_PWM_MspInit+0x248>)
 80021e2:	223a      	movs	r2, #58	@ 0x3a
 80021e4:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021e6:	4b3e      	ldr	r3, [pc, #248]	@ (80022e0 <HAL_TIM_PWM_MspInit+0x248>)
 80021e8:	2240      	movs	r2, #64	@ 0x40
 80021ea:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ec:	4b3c      	ldr	r3, [pc, #240]	@ (80022e0 <HAL_TIM_PWM_MspInit+0x248>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80021f2:	4b3b      	ldr	r3, [pc, #236]	@ (80022e0 <HAL_TIM_PWM_MspInit+0x248>)
 80021f4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021f8:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80021fa:	4b39      	ldr	r3, [pc, #228]	@ (80022e0 <HAL_TIM_PWM_MspInit+0x248>)
 80021fc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002200:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002202:	4b37      	ldr	r3, [pc, #220]	@ (80022e0 <HAL_TIM_PWM_MspInit+0x248>)
 8002204:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002208:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 800220a:	4b35      	ldr	r3, [pc, #212]	@ (80022e0 <HAL_TIM_PWM_MspInit+0x248>)
 800220c:	2200      	movs	r2, #0
 800220e:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8002210:	4b33      	ldr	r3, [pc, #204]	@ (80022e0 <HAL_TIM_PWM_MspInit+0x248>)
 8002212:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002216:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002218:	4b31      	ldr	r3, [pc, #196]	@ (80022e0 <HAL_TIM_PWM_MspInit+0x248>)
 800221a:	2204      	movs	r2, #4
 800221c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch4.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800221e:	4b30      	ldr	r3, [pc, #192]	@ (80022e0 <HAL_TIM_PWM_MspInit+0x248>)
 8002220:	2200      	movs	r2, #0
 8002222:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch4.Init.MemBurst = DMA_MBURST_SINGLE;
 8002224:	4b2e      	ldr	r3, [pc, #184]	@ (80022e0 <HAL_TIM_PWM_MspInit+0x248>)
 8002226:	2200      	movs	r2, #0
 8002228:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch4.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800222a:	4b2d      	ldr	r3, [pc, #180]	@ (80022e0 <HAL_TIM_PWM_MspInit+0x248>)
 800222c:	2200      	movs	r2, #0
 800222e:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8002230:	482b      	ldr	r0, [pc, #172]	@ (80022e0 <HAL_TIM_PWM_MspInit+0x248>)
 8002232:	f002 f81f 	bl	8004274 <HAL_DMA_Init>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <HAL_TIM_PWM_MspInit+0x1a8>
      Error_Handler();
 800223c:	f7ff f821 	bl	8001282 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a27      	ldr	r2, [pc, #156]	@ (80022e0 <HAL_TIM_PWM_MspInit+0x248>)
 8002244:	631a      	str	r2, [r3, #48]	@ 0x30
 8002246:	4a26      	ldr	r2, [pc, #152]	@ (80022e0 <HAL_TIM_PWM_MspInit+0x248>)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 800224c:	4b26      	ldr	r3, [pc, #152]	@ (80022e8 <HAL_TIM_PWM_MspInit+0x250>)
 800224e:	4a27      	ldr	r2, [pc, #156]	@ (80022ec <HAL_TIM_PWM_MspInit+0x254>)
 8002250:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Request = DMA_REQUEST_TIM5_CH2;
 8002252:	4b25      	ldr	r3, [pc, #148]	@ (80022e8 <HAL_TIM_PWM_MspInit+0x250>)
 8002254:	2238      	movs	r2, #56	@ 0x38
 8002256:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002258:	4b23      	ldr	r3, [pc, #140]	@ (80022e8 <HAL_TIM_PWM_MspInit+0x250>)
 800225a:	2240      	movs	r2, #64	@ 0x40
 800225c:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800225e:	4b22      	ldr	r3, [pc, #136]	@ (80022e8 <HAL_TIM_PWM_MspInit+0x250>)
 8002260:	2200      	movs	r2, #0
 8002262:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8002264:	4b20      	ldr	r3, [pc, #128]	@ (80022e8 <HAL_TIM_PWM_MspInit+0x250>)
 8002266:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800226a:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800226c:	4b1e      	ldr	r3, [pc, #120]	@ (80022e8 <HAL_TIM_PWM_MspInit+0x250>)
 800226e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002272:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002274:	4b1c      	ldr	r3, [pc, #112]	@ (80022e8 <HAL_TIM_PWM_MspInit+0x250>)
 8002276:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800227a:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 800227c:	4b1a      	ldr	r3, [pc, #104]	@ (80022e8 <HAL_TIM_PWM_MspInit+0x250>)
 800227e:	2200      	movs	r2, #0
 8002280:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8002282:	4b19      	ldr	r3, [pc, #100]	@ (80022e8 <HAL_TIM_PWM_MspInit+0x250>)
 8002284:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002288:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800228a:	4b17      	ldr	r3, [pc, #92]	@ (80022e8 <HAL_TIM_PWM_MspInit+0x250>)
 800228c:	2204      	movs	r2, #4
 800228e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_tim5_ch2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 8002290:	4b15      	ldr	r3, [pc, #84]	@ (80022e8 <HAL_TIM_PWM_MspInit+0x250>)
 8002292:	2200      	movs	r2, #0
 8002294:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_tim5_ch2.Init.MemBurst = DMA_MBURST_SINGLE;
 8002296:	4b14      	ldr	r3, [pc, #80]	@ (80022e8 <HAL_TIM_PWM_MspInit+0x250>)
 8002298:	2200      	movs	r2, #0
 800229a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_tim5_ch2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800229c:	4b12      	ldr	r3, [pc, #72]	@ (80022e8 <HAL_TIM_PWM_MspInit+0x250>)
 800229e:	2200      	movs	r2, #0
 80022a0:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 80022a2:	4811      	ldr	r0, [pc, #68]	@ (80022e8 <HAL_TIM_PWM_MspInit+0x250>)
 80022a4:	f001 ffe6 	bl	8004274 <HAL_DMA_Init>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_TIM_PWM_MspInit+0x21a>
      Error_Handler();
 80022ae:	f7fe ffe8 	bl	8001282 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a0c      	ldr	r2, [pc, #48]	@ (80022e8 <HAL_TIM_PWM_MspInit+0x250>)
 80022b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80022b8:	4a0b      	ldr	r2, [pc, #44]	@ (80022e8 <HAL_TIM_PWM_MspInit+0x250>)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80022be:	bf00      	nop
 80022c0:	3710      	adds	r7, #16
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	58024400 	.word	0x58024400
 80022cc:	2400077c 	.word	0x2400077c
 80022d0:	40020088 	.word	0x40020088
 80022d4:	240007f4 	.word	0x240007f4
 80022d8:	40020028 	.word	0x40020028
 80022dc:	40000c00 	.word	0x40000c00
 80022e0:	2400086c 	.word	0x2400086c
 80022e4:	40020058 	.word	0x40020058
 80022e8:	240008e4 	.word	0x240008e4
 80022ec:	40020070 	.word	0x40020070

080022f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM15)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a0e      	ldr	r2, [pc, #56]	@ (8002338 <HAL_TIM_Base_MspInit+0x48>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d116      	bne.n	8002330 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002302:	4b0e      	ldr	r3, [pc, #56]	@ (800233c <HAL_TIM_Base_MspInit+0x4c>)
 8002304:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002308:	4a0c      	ldr	r2, [pc, #48]	@ (800233c <HAL_TIM_Base_MspInit+0x4c>)
 800230a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800230e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8002312:	4b0a      	ldr	r3, [pc, #40]	@ (800233c <HAL_TIM_Base_MspInit+0x4c>)
 8002314:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8002318:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800231c:	60fb      	str	r3, [r7, #12]
 800231e:	68fb      	ldr	r3, [r7, #12]

    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8002320:	2200      	movs	r2, #0
 8002322:	2100      	movs	r1, #0
 8002324:	2074      	movs	r0, #116	@ 0x74
 8002326:	f001 ff5c 	bl	80041e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800232a:	2074      	movs	r0, #116	@ 0x74
 800232c:	f001 ff73 	bl	8004216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002330:	bf00      	nop
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40014000 	.word	0x40014000
 800233c:	58024400 	.word	0x58024400

08002340 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08a      	sub	sp, #40	@ 0x28
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002360:	d11f      	bne.n	80023a2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002362:	4b24      	ldr	r3, [pc, #144]	@ (80023f4 <HAL_TIM_MspPostInit+0xb4>)
 8002364:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002368:	4a22      	ldr	r2, [pc, #136]	@ (80023f4 <HAL_TIM_MspPostInit+0xb4>)
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002372:	4b20      	ldr	r3, [pc, #128]	@ (80023f4 <HAL_TIM_MspPostInit+0xb4>)
 8002374:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = M3_Pin|M2_Pin;
 8002380:	2305      	movs	r3, #5
 8002382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238c:	2300      	movs	r3, #0
 800238e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002390:	2301      	movs	r3, #1
 8002392:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	4619      	mov	r1, r3
 800239a:	4817      	ldr	r0, [pc, #92]	@ (80023f8 <HAL_TIM_MspPostInit+0xb8>)
 800239c:	f004 f8b2 	bl	8006504 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80023a0:	e023      	b.n	80023ea <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM5)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a15      	ldr	r2, [pc, #84]	@ (80023fc <HAL_TIM_MspPostInit+0xbc>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d11e      	bne.n	80023ea <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023ac:	4b11      	ldr	r3, [pc, #68]	@ (80023f4 <HAL_TIM_MspPostInit+0xb4>)
 80023ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023b2:	4a10      	ldr	r2, [pc, #64]	@ (80023f4 <HAL_TIM_MspPostInit+0xb4>)
 80023b4:	f043 0301 	orr.w	r3, r3, #1
 80023b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80023bc:	4b0d      	ldr	r3, [pc, #52]	@ (80023f4 <HAL_TIM_MspPostInit+0xb4>)
 80023be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M4_Pin|M1_Pin;
 80023ca:	230a      	movs	r3, #10
 80023cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ce:	2302      	movs	r3, #2
 80023d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	2300      	movs	r3, #0
 80023d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80023da:	2302      	movs	r3, #2
 80023dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023de:	f107 0314 	add.w	r3, r7, #20
 80023e2:	4619      	mov	r1, r3
 80023e4:	4804      	ldr	r0, [pc, #16]	@ (80023f8 <HAL_TIM_MspPostInit+0xb8>)
 80023e6:	f004 f88d 	bl	8006504 <HAL_GPIO_Init>
}
 80023ea:	bf00      	nop
 80023ec:	3728      	adds	r7, #40	@ 0x28
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	58024400 	.word	0x58024400
 80023f8:	58020000 	.word	0x58020000
 80023fc:	40000c00 	.word	0x40000c00

08002400 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002400:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002438 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002404:	f7fe f93c 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002408:	480c      	ldr	r0, [pc, #48]	@ (800243c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800240a:	490d      	ldr	r1, [pc, #52]	@ (8002440 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800240c:	4a0d      	ldr	r2, [pc, #52]	@ (8002444 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800240e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002410:	e002      	b.n	8002418 <LoopCopyDataInit>

08002412 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002412:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002414:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002416:	3304      	adds	r3, #4

08002418 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002418:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800241a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800241c:	d3f9      	bcc.n	8002412 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800241e:	4a0a      	ldr	r2, [pc, #40]	@ (8002448 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002420:	4c0a      	ldr	r4, [pc, #40]	@ (800244c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002422:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002424:	e001      	b.n	800242a <LoopFillZerobss>

08002426 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002426:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002428:	3204      	adds	r2, #4

0800242a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800242a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800242c:	d3fb      	bcc.n	8002426 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800242e:	f010 fc59 	bl	8012ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002432:	f7fe fd51 	bl	8000ed8 <main>
  bx  lr
 8002436:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002438:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800243c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002440:	240002f4 	.word	0x240002f4
  ldr r2, =_sidata
 8002444:	08014e48 	.word	0x08014e48
  ldr r2, =_sbss
 8002448:	240002f4 	.word	0x240002f4
  ldr r4, =_ebss
 800244c:	24002730 	.word	0x24002730

08002450 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002450:	e7fe      	b.n	8002450 <ADC3_IRQHandler>
	...

08002454 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b08c      	sub	sp, #48	@ 0x30
 8002458:	af00      	add	r7, sp, #0
 800245a:	4603      	mov	r3, r0
 800245c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800245e:	2300      	movs	r3, #0
 8002460:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8002462:	79fb      	ldrb	r3, [r7, #7]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d009      	beq.n	800247c <BSP_LED_Init+0x28>
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d006      	beq.n	800247c <BSP_LED_Init+0x28>
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	2b02      	cmp	r3, #2
 8002472:	d003      	beq.n	800247c <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002474:	f06f 0301 	mvn.w	r3, #1
 8002478:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800247a:	e055      	b.n	8002528 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10f      	bne.n	80024a2 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8002482:	4b2c      	ldr	r3, [pc, #176]	@ (8002534 <BSP_LED_Init+0xe0>)
 8002484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002488:	4a2a      	ldr	r2, [pc, #168]	@ (8002534 <BSP_LED_Init+0xe0>)
 800248a:	f043 0302 	orr.w	r3, r3, #2
 800248e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002492:	4b28      	ldr	r3, [pc, #160]	@ (8002534 <BSP_LED_Init+0xe0>)
 8002494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	e021      	b.n	80024e6 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d10f      	bne.n	80024c8 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80024a8:	4b22      	ldr	r3, [pc, #136]	@ (8002534 <BSP_LED_Init+0xe0>)
 80024aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ae:	4a21      	ldr	r2, [pc, #132]	@ (8002534 <BSP_LED_Init+0xe0>)
 80024b0:	f043 0310 	orr.w	r3, r3, #16
 80024b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002534 <BSP_LED_Init+0xe0>)
 80024ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024be:	f003 0310 	and.w	r3, r3, #16
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693b      	ldr	r3, [r7, #16]
 80024c6:	e00e      	b.n	80024e6 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80024c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002534 <BSP_LED_Init+0xe0>)
 80024ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024ce:	4a19      	ldr	r2, [pc, #100]	@ (8002534 <BSP_LED_Init+0xe0>)
 80024d0:	f043 0302 	orr.w	r3, r3, #2
 80024d4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80024d8:	4b16      	ldr	r3, [pc, #88]	@ (8002534 <BSP_LED_Init+0xe0>)
 80024da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80024e6:	79fb      	ldrb	r3, [r7, #7]
 80024e8:	4a13      	ldr	r2, [pc, #76]	@ (8002538 <BSP_LED_Init+0xe4>)
 80024ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80024ee:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80024f0:	2301      	movs	r3, #1
 80024f2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f8:	2303      	movs	r3, #3
 80024fa:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	4a0f      	ldr	r2, [pc, #60]	@ (800253c <BSP_LED_Init+0xe8>)
 8002500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002504:	f107 0218 	add.w	r2, r7, #24
 8002508:	4611      	mov	r1, r2
 800250a:	4618      	mov	r0, r3
 800250c:	f003 fffa 	bl	8006504 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8002510:	79fb      	ldrb	r3, [r7, #7]
 8002512:	4a0a      	ldr	r2, [pc, #40]	@ (800253c <BSP_LED_Init+0xe8>)
 8002514:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002518:	79fb      	ldrb	r3, [r7, #7]
 800251a:	4a07      	ldr	r2, [pc, #28]	@ (8002538 <BSP_LED_Init+0xe4>)
 800251c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002520:	2200      	movs	r2, #0
 8002522:	4619      	mov	r1, r3
 8002524:	f004 f99e 	bl	8006864 <HAL_GPIO_WritePin>
  }

  return ret;
 8002528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800252a:	4618      	mov	r0, r3
 800252c:	3730      	adds	r7, #48	@ 0x30
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	58024400 	.word	0x58024400
 8002538:	08014a90 	.word	0x08014a90
 800253c:	24000018 	.word	0x24000018

08002540 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	460a      	mov	r2, r1
 800254a:	71fb      	strb	r3, [r7, #7]
 800254c:	4613      	mov	r3, r2
 800254e:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8002550:	4b2e      	ldr	r3, [pc, #184]	@ (800260c <BSP_PB_Init+0xcc>)
 8002552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002556:	4a2d      	ldr	r2, [pc, #180]	@ (800260c <BSP_PB_Init+0xcc>)
 8002558:	f043 0304 	orr.w	r3, r3, #4
 800255c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002560:	4b2a      	ldr	r3, [pc, #168]	@ (800260c <BSP_PB_Init+0xcc>)
 8002562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800256e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002572:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8002574:	2302      	movs	r3, #2
 8002576:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8002578:	2302      	movs	r3, #2
 800257a:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800257c:	79bb      	ldrb	r3, [r7, #6]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10c      	bne.n	800259c <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8002586:	79fb      	ldrb	r3, [r7, #7]
 8002588:	4a21      	ldr	r2, [pc, #132]	@ (8002610 <BSP_PB_Init+0xd0>)
 800258a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258e:	f107 020c 	add.w	r2, r7, #12
 8002592:	4611      	mov	r1, r2
 8002594:	4618      	mov	r0, r3
 8002596:	f003 ffb5 	bl	8006504 <HAL_GPIO_Init>
 800259a:	e031      	b.n	8002600 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800259c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80025a0:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002610 <BSP_PB_Init+0xd0>)
 80025a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025aa:	f107 020c 	add.w	r2, r7, #12
 80025ae:	4611      	mov	r1, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f003 ffa7 	bl	8006504 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	00db      	lsls	r3, r3, #3
 80025ba:	4a16      	ldr	r2, [pc, #88]	@ (8002614 <BSP_PB_Init+0xd4>)
 80025bc:	441a      	add	r2, r3
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	4915      	ldr	r1, [pc, #84]	@ (8002618 <BSP_PB_Init+0xd8>)
 80025c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80025c6:	4619      	mov	r1, r3
 80025c8:	4610      	mov	r0, r2
 80025ca:	f003 ff4a 	bl	8006462 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4a10      	ldr	r2, [pc, #64]	@ (8002614 <BSP_PB_Init+0xd4>)
 80025d4:	1898      	adds	r0, r3, r2
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	4a10      	ldr	r2, [pc, #64]	@ (800261c <BSP_PB_Init+0xdc>)
 80025da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025de:	461a      	mov	r2, r3
 80025e0:	2100      	movs	r1, #0
 80025e2:	f003 ff1f 	bl	8006424 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80025e6:	2028      	movs	r0, #40	@ 0x28
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	4a0d      	ldr	r2, [pc, #52]	@ (8002620 <BSP_PB_Init+0xe0>)
 80025ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f0:	2200      	movs	r2, #0
 80025f2:	4619      	mov	r1, r3
 80025f4:	f001 fdf5 	bl	80041e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80025f8:	2328      	movs	r3, #40	@ 0x28
 80025fa:	4618      	mov	r0, r3
 80025fc:	f001 fe0b 	bl	8004216 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8002600:	2300      	movs	r3, #0
}
 8002602:	4618      	mov	r0, r3
 8002604:	3720      	adds	r7, #32
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	58024400 	.word	0x58024400
 8002610:	24000024 	.word	0x24000024
 8002614:	2400095c 	.word	0x2400095c
 8002618:	08014a98 	.word	0x08014a98
 800261c:	24000028 	.word	0x24000028
 8002620:	2400002c 	.word	0x2400002c

08002624 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	00db      	lsls	r3, r3, #3
 8002632:	4a04      	ldr	r2, [pc, #16]	@ (8002644 <BSP_PB_IRQHandler+0x20>)
 8002634:	4413      	add	r3, r2
 8002636:	4618      	mov	r0, r3
 8002638:	f003 ff28 	bl	800648c <HAL_EXTI_IRQHandler>
}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	2400095c 	.word	0x2400095c

08002648 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	4603      	mov	r3, r0
 8002650:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
	...

08002660 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b084      	sub	sp, #16
 8002664:	af00      	add	r7, sp, #0
 8002666:	4603      	mov	r3, r0
 8002668:	6039      	str	r1, [r7, #0]
 800266a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800266c:	2300      	movs	r3, #0
 800266e:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8002670:	79fb      	ldrb	r3, [r7, #7]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8002676:	f06f 0301 	mvn.w	r3, #1
 800267a:	60fb      	str	r3, [r7, #12]
 800267c:	e018      	b.n	80026b0 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	2294      	movs	r2, #148	@ 0x94
 8002682:	fb02 f303 	mul.w	r3, r2, r3
 8002686:	4a0d      	ldr	r2, [pc, #52]	@ (80026bc <BSP_COM_Init+0x5c>)
 8002688:	4413      	add	r3, r2
 800268a:	4618      	mov	r0, r3
 800268c:	f000 f86e 	bl	800276c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8002690:	79fb      	ldrb	r3, [r7, #7]
 8002692:	2294      	movs	r2, #148	@ 0x94
 8002694:	fb02 f303 	mul.w	r3, r2, r3
 8002698:	4a08      	ldr	r2, [pc, #32]	@ (80026bc <BSP_COM_Init+0x5c>)
 800269a:	4413      	add	r3, r2
 800269c:	6839      	ldr	r1, [r7, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 f80e 	bl	80026c0 <MX_USART3_Init>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d002      	beq.n	80026b0 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80026aa:	f06f 0303 	mvn.w	r3, #3
 80026ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80026b0:	68fb      	ldr	r3, [r7, #12]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3710      	adds	r7, #16
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	24000964 	.word	0x24000964

080026c0 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80026ca:	4b15      	ldr	r3, [pc, #84]	@ (8002720 <MX_USART3_Init+0x60>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	220c      	movs	r2, #12
 80026de:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	895b      	ldrh	r3, [r3, #10]
 80026e4:	461a      	mov	r2, r3
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	891b      	ldrh	r3, [r3, #8]
 80026f6:	461a      	mov	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	899b      	ldrh	r3, [r3, #12]
 8002700:	461a      	mov	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800270c:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f00a fca8 	bl	800d064 <HAL_UART_Init>
 8002714:	4603      	mov	r3, r0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	24000014 	.word	0x24000014

08002724 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 800272c:	4b09      	ldr	r3, [pc, #36]	@ (8002754 <__io_putchar+0x30>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	461a      	mov	r2, r3
 8002732:	2394      	movs	r3, #148	@ 0x94
 8002734:	fb02 f303 	mul.w	r3, r2, r3
 8002738:	4a07      	ldr	r2, [pc, #28]	@ (8002758 <__io_putchar+0x34>)
 800273a:	1898      	adds	r0, r3, r2
 800273c:	1d39      	adds	r1, r7, #4
 800273e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002742:	2201      	movs	r2, #1
 8002744:	f00a fce8 	bl	800d118 <HAL_UART_Transmit>
  return ch;
 8002748:	687b      	ldr	r3, [r7, #4]
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	240009f8 	.word	0x240009f8
 8002758:	24000964 	.word	0x24000964

0800275c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8002760:	2000      	movs	r0, #0
 8002762:	f7ff ff71 	bl	8002648 <BSP_PB_Callback>
}
 8002766:	bf00      	nop
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	@ 0x28
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8002774:	4b27      	ldr	r3, [pc, #156]	@ (8002814 <COM1_MspInit+0xa8>)
 8002776:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800277a:	4a26      	ldr	r2, [pc, #152]	@ (8002814 <COM1_MspInit+0xa8>)
 800277c:	f043 0308 	orr.w	r3, r3, #8
 8002780:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002784:	4b23      	ldr	r3, [pc, #140]	@ (8002814 <COM1_MspInit+0xa8>)
 8002786:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800278a:	f003 0308 	and.w	r3, r3, #8
 800278e:	613b      	str	r3, [r7, #16]
 8002790:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8002792:	4b20      	ldr	r3, [pc, #128]	@ (8002814 <COM1_MspInit+0xa8>)
 8002794:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002798:	4a1e      	ldr	r2, [pc, #120]	@ (8002814 <COM1_MspInit+0xa8>)
 800279a:	f043 0308 	orr.w	r3, r3, #8
 800279e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80027a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002814 <COM1_MspInit+0xa8>)
 80027a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80027a8:	f003 0308 	and.w	r3, r3, #8
 80027ac:	60fb      	str	r3, [r7, #12]
 80027ae:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80027b0:	4b18      	ldr	r3, [pc, #96]	@ (8002814 <COM1_MspInit+0xa8>)
 80027b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027b6:	4a17      	ldr	r2, [pc, #92]	@ (8002814 <COM1_MspInit+0xa8>)
 80027b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027bc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80027c0:	4b14      	ldr	r3, [pc, #80]	@ (8002814 <COM1_MspInit+0xa8>)
 80027c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80027c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80027ce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027d2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80027d4:	2302      	movs	r3, #2
 80027d6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80027d8:	2302      	movs	r3, #2
 80027da:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80027dc:	2301      	movs	r3, #1
 80027de:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80027e0:	2307      	movs	r3, #7
 80027e2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80027e4:	f107 0314 	add.w	r3, r7, #20
 80027e8:	4619      	mov	r1, r3
 80027ea:	480b      	ldr	r0, [pc, #44]	@ (8002818 <COM1_MspInit+0xac>)
 80027ec:	f003 fe8a 	bl	8006504 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80027f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80027f4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80027f6:	2302      	movs	r3, #2
 80027f8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80027fa:	2307      	movs	r3, #7
 80027fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80027fe:	f107 0314 	add.w	r3, r7, #20
 8002802:	4619      	mov	r1, r3
 8002804:	4804      	ldr	r0, [pc, #16]	@ (8002818 <COM1_MspInit+0xac>)
 8002806:	f003 fe7d 	bl	8006504 <HAL_GPIO_Init>
}
 800280a:	bf00      	nop
 800280c:	3728      	adds	r7, #40	@ 0x28
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	58024400 	.word	0x58024400
 8002818:	58020c00 	.word	0x58020c00

0800281c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002822:	2003      	movs	r0, #3
 8002824:	f001 fcd2 	bl	80041cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002828:	f006 f996 	bl	8008b58 <HAL_RCC_GetSysClockFreq>
 800282c:	4602      	mov	r2, r0
 800282e:	4b15      	ldr	r3, [pc, #84]	@ (8002884 <HAL_Init+0x68>)
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	0a1b      	lsrs	r3, r3, #8
 8002834:	f003 030f 	and.w	r3, r3, #15
 8002838:	4913      	ldr	r1, [pc, #76]	@ (8002888 <HAL_Init+0x6c>)
 800283a:	5ccb      	ldrb	r3, [r1, r3]
 800283c:	f003 031f 	and.w	r3, r3, #31
 8002840:	fa22 f303 	lsr.w	r3, r2, r3
 8002844:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002846:	4b0f      	ldr	r3, [pc, #60]	@ (8002884 <HAL_Init+0x68>)
 8002848:	699b      	ldr	r3, [r3, #24]
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	4a0e      	ldr	r2, [pc, #56]	@ (8002888 <HAL_Init+0x6c>)
 8002850:	5cd3      	ldrb	r3, [r2, r3]
 8002852:	f003 031f 	and.w	r3, r3, #31
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	fa22 f303 	lsr.w	r3, r2, r3
 800285c:	4a0b      	ldr	r2, [pc, #44]	@ (800288c <HAL_Init+0x70>)
 800285e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002860:	4a0b      	ldr	r2, [pc, #44]	@ (8002890 <HAL_Init+0x74>)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002866:	2000      	movs	r0, #0
 8002868:	f000 f814 	bl	8002894 <HAL_InitTick>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e002      	b.n	800287c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002876:	f7fe fd0b 	bl	8001290 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	58024400 	.word	0x58024400
 8002888:	08014a80 	.word	0x08014a80
 800288c:	24000004 	.word	0x24000004
 8002890:	24000000 	.word	0x24000000

08002894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800289c:	4b15      	ldr	r3, [pc, #84]	@ (80028f4 <HAL_InitTick+0x60>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e021      	b.n	80028ec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80028a8:	4b13      	ldr	r3, [pc, #76]	@ (80028f8 <HAL_InitTick+0x64>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4b11      	ldr	r3, [pc, #68]	@ (80028f4 <HAL_InitTick+0x60>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	4619      	mov	r1, r3
 80028b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80028ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80028be:	4618      	mov	r0, r3
 80028c0:	f001 fcb7 	bl	8004232 <HAL_SYSTICK_Config>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e00e      	b.n	80028ec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b0f      	cmp	r3, #15
 80028d2:	d80a      	bhi.n	80028ea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028d4:	2200      	movs	r2, #0
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	f04f 30ff 	mov.w	r0, #4294967295
 80028dc:	f001 fc81 	bl	80041e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028e0:	4a06      	ldr	r2, [pc, #24]	@ (80028fc <HAL_InitTick+0x68>)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028e6:	2300      	movs	r3, #0
 80028e8:	e000      	b.n	80028ec <HAL_InitTick+0x58>
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3708      	adds	r7, #8
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	24000034 	.word	0x24000034
 80028f8:	24000000 	.word	0x24000000
 80028fc:	24000030 	.word	0x24000030

08002900 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002904:	4b06      	ldr	r3, [pc, #24]	@ (8002920 <HAL_IncTick+0x20>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	4b06      	ldr	r3, [pc, #24]	@ (8002924 <HAL_IncTick+0x24>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4413      	add	r3, r2
 8002910:	4a04      	ldr	r2, [pc, #16]	@ (8002924 <HAL_IncTick+0x24>)
 8002912:	6013      	str	r3, [r2, #0]
}
 8002914:	bf00      	nop
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
 800291e:	bf00      	nop
 8002920:	24000034 	.word	0x24000034
 8002924:	240009fc 	.word	0x240009fc

08002928 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0
  return uwTick;
 800292c:	4b03      	ldr	r3, [pc, #12]	@ (800293c <HAL_GetTick+0x14>)
 800292e:	681b      	ldr	r3, [r3, #0]
}
 8002930:	4618      	mov	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	240009fc 	.word	0x240009fc

08002940 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002948:	f7ff ffee 	bl	8002928 <HAL_GetTick>
 800294c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002958:	d005      	beq.n	8002966 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800295a:	4b0a      	ldr	r3, [pc, #40]	@ (8002984 <HAL_Delay+0x44>)
 800295c:	781b      	ldrb	r3, [r3, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4413      	add	r3, r2
 8002964:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002966:	bf00      	nop
 8002968:	f7ff ffde 	bl	8002928 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	429a      	cmp	r2, r3
 8002976:	d8f7      	bhi.n	8002968 <HAL_Delay+0x28>
  {
  }
}
 8002978:	bf00      	nop
 800297a:	bf00      	nop
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	24000034 	.word	0x24000034

08002988 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002988:	b480      	push	{r7}
 800298a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800298c:	4b03      	ldr	r3, [pc, #12]	@ (800299c <HAL_GetREVID+0x14>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	0c1b      	lsrs	r3, r3, #16
}
 8002992:	4618      	mov	r0, r3
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	5c001000 	.word	0x5c001000

080029a0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	431a      	orrs	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	609a      	str	r2, [r3, #8]
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr

080029c6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029c6:	b480      	push	{r7}
 80029c8:	b083      	sub	sp, #12
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
 80029ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	609a      	str	r2, [r3, #8]
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
 8002a14:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	3360      	adds	r3, #96	@ 0x60
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	430b      	orrs	r3, r1
 8002a36:	431a      	orrs	r2, r3
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002a3c:	bf00      	nop
 8002a3e:	371c      	adds	r7, #28
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	f003 031f 	and.w	r3, r3, #31
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	fa01 f303 	lsl.w	r3, r1, r3
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	611a      	str	r2, [r3, #16]
}
 8002a6e:	bf00      	nop
 8002a70:	3714      	adds	r7, #20
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b087      	sub	sp, #28
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	3360      	adds	r3, #96	@ 0x60
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	601a      	str	r2, [r3, #0]
  }
}
 8002aa4:	bf00      	nop
 8002aa6:	371c      	adds	r7, #28
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	68db      	ldr	r3, [r3, #12]
 8002abc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b087      	sub	sp, #28
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	60f8      	str	r0, [r7, #12]
 8002ade:	60b9      	str	r1, [r7, #8]
 8002ae0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	3330      	adds	r3, #48	@ 0x30
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	0a1b      	lsrs	r3, r3, #8
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	f003 030c 	and.w	r3, r3, #12
 8002af2:	4413      	add	r3, r2
 8002af4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f003 031f 	and.w	r3, r3, #31
 8002b00:	211f      	movs	r1, #31
 8002b02:	fa01 f303 	lsl.w	r3, r1, r3
 8002b06:	43db      	mvns	r3, r3
 8002b08:	401a      	ands	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	0e9b      	lsrs	r3, r3, #26
 8002b0e:	f003 011f 	and.w	r1, r3, #31
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f003 031f 	and.w	r3, r3, #31
 8002b18:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b22:	bf00      	nop
 8002b24:	371c      	adds	r7, #28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b087      	sub	sp, #28
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	60f8      	str	r0, [r7, #12]
 8002b36:	60b9      	str	r1, [r7, #8]
 8002b38:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	3314      	adds	r3, #20
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	0e5b      	lsrs	r3, r3, #25
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	4413      	add	r3, r2
 8002b4c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	0d1b      	lsrs	r3, r3, #20
 8002b56:	f003 031f 	and.w	r3, r3, #31
 8002b5a:	2107      	movs	r1, #7
 8002b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b60:	43db      	mvns	r3, r3
 8002b62:	401a      	ands	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	0d1b      	lsrs	r3, r3, #20
 8002b68:	f003 031f 	and.w	r3, r3, #31
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b72:	431a      	orrs	r2, r3
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b78:	bf00      	nop
 8002b7a:	371c      	adds	r7, #28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	401a      	ands	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f003 0318 	and.w	r3, r3, #24
 8002ba6:	4908      	ldr	r1, [pc, #32]	@ (8002bc8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002ba8:	40d9      	lsrs	r1, r3
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	400b      	ands	r3, r1
 8002bae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002bba:	bf00      	nop
 8002bbc:	3714      	adds	r7, #20
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
 8002bc6:	bf00      	nop
 8002bc8:	000fffff 	.word	0x000fffff

08002bcc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f003 031f 	and.w	r3, r3, #31
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	4b04      	ldr	r3, [pc, #16]	@ (8002c24 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002c12:	4013      	ands	r3, r2
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6093      	str	r3, [r2, #8]
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	5fffffc0 	.word	0x5fffffc0

08002c28 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c3c:	d101      	bne.n	8002c42 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	370c      	adds	r7, #12
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	4b05      	ldr	r3, [pc, #20]	@ (8002c74 <LL_ADC_EnableInternalRegulator+0x24>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c68:	bf00      	nop
 8002c6a:	370c      	adds	r7, #12
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr
 8002c74:	6fffffc0 	.word	0x6fffffc0

08002c78 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b083      	sub	sp, #12
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c88:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c8c:	d101      	bne.n	8002c92 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr

08002ca0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b083      	sub	sp, #12
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	4b05      	ldr	r3, [pc, #20]	@ (8002cc4 <LL_ADC_Enable+0x24>)
 8002cae:	4013      	ands	r3, r2
 8002cb0:	f043 0201 	orr.w	r2, r3, #1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	7fffffc0 	.word	0x7fffffc0

08002cc8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <LL_ADC_IsEnabled+0x18>
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <LL_ADC_IsEnabled+0x1a>
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <LL_ADC_REG_StartConversion+0x24>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	f043 0204 	orr.w	r2, r3, #4
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d08:	bf00      	nop
 8002d0a:	370c      	adds	r7, #12
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	7fffffc0 	.word	0x7fffffc0

08002d18 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d101      	bne.n	8002d30 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e000      	b.n	8002d32 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b08      	cmp	r3, #8
 8002d50:	d101      	bne.n	8002d56 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d64:	b590      	push	{r4, r7, lr}
 8002d66:	b089      	sub	sp, #36	@ 0x24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d101      	bne.n	8002d7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e18f      	b.n	800309e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d109      	bne.n	8002da0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7fd fd87 	bl	80008a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7ff ff3f 	bl	8002c28 <LL_ADC_IsDeepPowerDownEnabled>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d004      	beq.n	8002dba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff ff25 	bl	8002c04 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff ff5a 	bl	8002c78 <LL_ADC_IsInternalRegulatorEnabled>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d114      	bne.n	8002df4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff ff3e 	bl	8002c50 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dd4:	4b87      	ldr	r3, [pc, #540]	@ (8002ff4 <HAL_ADC_Init+0x290>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	099b      	lsrs	r3, r3, #6
 8002dda:	4a87      	ldr	r2, [pc, #540]	@ (8002ff8 <HAL_ADC_Init+0x294>)
 8002ddc:	fba2 2303 	umull	r2, r3, r2, r3
 8002de0:	099b      	lsrs	r3, r3, #6
 8002de2:	3301      	adds	r3, #1
 8002de4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002de6:	e002      	b.n	8002dee <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1f9      	bne.n	8002de8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4618      	mov	r0, r3
 8002dfa:	f7ff ff3d 	bl	8002c78 <LL_ADC_IsInternalRegulatorEnabled>
 8002dfe:	4603      	mov	r3, r0
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d10d      	bne.n	8002e20 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e08:	f043 0210 	orr.w	r2, r3, #16
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e14:	f043 0201 	orr.w	r2, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7ff ff77 	bl	8002d18 <LL_ADC_REG_IsConversionOngoing>
 8002e2a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e30:	f003 0310 	and.w	r3, r3, #16
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f040 8129 	bne.w	800308c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f040 8125 	bne.w	800308c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e46:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002e4a:	f043 0202 	orr.w	r2, r3, #2
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff ff36 	bl	8002cc8 <LL_ADC_IsEnabled>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d136      	bne.n	8002ed0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a65      	ldr	r2, [pc, #404]	@ (8002ffc <HAL_ADC_Init+0x298>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d004      	beq.n	8002e76 <HAL_ADC_Init+0x112>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a63      	ldr	r2, [pc, #396]	@ (8003000 <HAL_ADC_Init+0x29c>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d10e      	bne.n	8002e94 <HAL_ADC_Init+0x130>
 8002e76:	4861      	ldr	r0, [pc, #388]	@ (8002ffc <HAL_ADC_Init+0x298>)
 8002e78:	f7ff ff26 	bl	8002cc8 <LL_ADC_IsEnabled>
 8002e7c:	4604      	mov	r4, r0
 8002e7e:	4860      	ldr	r0, [pc, #384]	@ (8003000 <HAL_ADC_Init+0x29c>)
 8002e80:	f7ff ff22 	bl	8002cc8 <LL_ADC_IsEnabled>
 8002e84:	4603      	mov	r3, r0
 8002e86:	4323      	orrs	r3, r4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	bf0c      	ite	eq
 8002e8c:	2301      	moveq	r3, #1
 8002e8e:	2300      	movne	r3, #0
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	e008      	b.n	8002ea6 <HAL_ADC_Init+0x142>
 8002e94:	485b      	ldr	r0, [pc, #364]	@ (8003004 <HAL_ADC_Init+0x2a0>)
 8002e96:	f7ff ff17 	bl	8002cc8 <LL_ADC_IsEnabled>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d012      	beq.n	8002ed0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a53      	ldr	r2, [pc, #332]	@ (8002ffc <HAL_ADC_Init+0x298>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d004      	beq.n	8002ebe <HAL_ADC_Init+0x15a>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a51      	ldr	r2, [pc, #324]	@ (8003000 <HAL_ADC_Init+0x29c>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d101      	bne.n	8002ec2 <HAL_ADC_Init+0x15e>
 8002ebe:	4a52      	ldr	r2, [pc, #328]	@ (8003008 <HAL_ADC_Init+0x2a4>)
 8002ec0:	e000      	b.n	8002ec4 <HAL_ADC_Init+0x160>
 8002ec2:	4a52      	ldr	r2, [pc, #328]	@ (800300c <HAL_ADC_Init+0x2a8>)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	4619      	mov	r1, r3
 8002eca:	4610      	mov	r0, r2
 8002ecc:	f7ff fd68 	bl	80029a0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002ed0:	f7ff fd5a 	bl	8002988 <HAL_GetREVID>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d914      	bls.n	8002f08 <HAL_ADC_Init+0x1a4>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	2b10      	cmp	r3, #16
 8002ee4:	d110      	bne.n	8002f08 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	7d5b      	ldrb	r3, [r3, #21]
 8002eea:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002ef0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002ef6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	7f1b      	ldrb	r3, [r3, #28]
 8002efc:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002efe:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f00:	f043 030c 	orr.w	r3, r3, #12
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	e00d      	b.n	8002f24 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	7d5b      	ldrb	r3, [r3, #21]
 8002f0c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f12:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002f18:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	7f1b      	ldrb	r3, [r3, #28]
 8002f1e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	7f1b      	ldrb	r3, [r3, #28]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d106      	bne.n	8002f3a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a1b      	ldr	r3, [r3, #32]
 8002f30:	3b01      	subs	r3, #1
 8002f32:	045b      	lsls	r3, r3, #17
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d009      	beq.n	8002f56 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f46:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	4b2c      	ldr	r3, [pc, #176]	@ (8003010 <HAL_ADC_Init+0x2ac>)
 8002f5e:	4013      	ands	r3, r2
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	69b9      	ldr	r1, [r7, #24]
 8002f66:	430b      	orrs	r3, r1
 8002f68:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f7ff fed2 	bl	8002d18 <LL_ADC_REG_IsConversionOngoing>
 8002f74:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff fedf 	bl	8002d3e <LL_ADC_INJ_IsConversionOngoing>
 8002f80:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d15f      	bne.n	8003048 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d15c      	bne.n	8003048 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	7d1b      	ldrb	r3, [r3, #20]
 8002f92:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68da      	ldr	r2, [r3, #12]
 8002fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8003014 <HAL_ADC_Init+0x2b0>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6812      	ldr	r2, [r2, #0]
 8002faa:	69b9      	ldr	r1, [r7, #24]
 8002fac:	430b      	orrs	r3, r1
 8002fae:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d130      	bne.n	800301c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbe:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	691a      	ldr	r2, [r3, #16]
 8002fc6:	4b14      	ldr	r3, [pc, #80]	@ (8003018 <HAL_ADC_Init+0x2b4>)
 8002fc8:	4013      	ands	r3, r2
 8002fca:	687a      	ldr	r2, [r7, #4]
 8002fcc:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002fce:	3a01      	subs	r2, #1
 8002fd0:	0411      	lsls	r1, r2, #16
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002fd6:	4311      	orrs	r1, r2
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002fdc:	4311      	orrs	r1, r2
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	611a      	str	r2, [r3, #16]
 8002ff0:	e01c      	b.n	800302c <HAL_ADC_Init+0x2c8>
 8002ff2:	bf00      	nop
 8002ff4:	24000000 	.word	0x24000000
 8002ff8:	053e2d63 	.word	0x053e2d63
 8002ffc:	40022000 	.word	0x40022000
 8003000:	40022100 	.word	0x40022100
 8003004:	58026000 	.word	0x58026000
 8003008:	40022300 	.word	0x40022300
 800300c:	58026300 	.word	0x58026300
 8003010:	fff0c003 	.word	0xfff0c003
 8003014:	ffffbffc 	.word	0xffffbffc
 8003018:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691a      	ldr	r2, [r3, #16]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0201 	bic.w	r2, r2, #1
 800302a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	691b      	ldr	r3, [r3, #16]
 8003032:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fde2 	bl	8003c0c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d10c      	bne.n	800306a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003056:	f023 010f 	bic.w	r1, r3, #15
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	1e5a      	subs	r2, r3, #1
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	631a      	str	r2, [r3, #48]	@ 0x30
 8003068:	e007      	b.n	800307a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 020f 	bic.w	r2, r2, #15
 8003078:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800307e:	f023 0303 	bic.w	r3, r3, #3
 8003082:	f043 0201 	orr.w	r2, r3, #1
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	655a      	str	r2, [r3, #84]	@ 0x54
 800308a:	e007      	b.n	800309c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003090:	f043 0210 	orr.w	r2, r3, #16
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800309c:	7ffb      	ldrb	r3, [r7, #31]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3724      	adds	r7, #36	@ 0x24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd90      	pop	{r4, r7, pc}
 80030a6:	bf00      	nop

080030a8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b086      	sub	sp, #24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a5c      	ldr	r2, [pc, #368]	@ (8003228 <HAL_ADC_Start+0x180>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d004      	beq.n	80030c4 <HAL_ADC_Start+0x1c>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a5b      	ldr	r2, [pc, #364]	@ (800322c <HAL_ADC_Start+0x184>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d101      	bne.n	80030c8 <HAL_ADC_Start+0x20>
 80030c4:	4b5a      	ldr	r3, [pc, #360]	@ (8003230 <HAL_ADC_Start+0x188>)
 80030c6:	e000      	b.n	80030ca <HAL_ADC_Start+0x22>
 80030c8:	4b5a      	ldr	r3, [pc, #360]	@ (8003234 <HAL_ADC_Start+0x18c>)
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7ff fd7e 	bl	8002bcc <LL_ADC_GetMultimode>
 80030d0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff fe1e 	bl	8002d18 <LL_ADC_REG_IsConversionOngoing>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f040 809a 	bne.w	8003218 <HAL_ADC_Start+0x170>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_ADC_Start+0x4a>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e095      	b.n	800321e <HAL_ADC_Start+0x176>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 fcfc 	bl	8003af8 <ADC_Enable>
 8003100:	4603      	mov	r3, r0
 8003102:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003104:	7dfb      	ldrb	r3, [r7, #23]
 8003106:	2b00      	cmp	r3, #0
 8003108:	f040 8081 	bne.w	800320e <HAL_ADC_Start+0x166>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003110:	4b49      	ldr	r3, [pc, #292]	@ (8003238 <HAL_ADC_Start+0x190>)
 8003112:	4013      	ands	r3, r2
 8003114:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a42      	ldr	r2, [pc, #264]	@ (800322c <HAL_ADC_Start+0x184>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d002      	beq.n	800312c <HAL_ADC_Start+0x84>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	e000      	b.n	800312e <HAL_ADC_Start+0x86>
 800312c:	4b3e      	ldr	r3, [pc, #248]	@ (8003228 <HAL_ADC_Start+0x180>)
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	6812      	ldr	r2, [r2, #0]
 8003132:	4293      	cmp	r3, r2
 8003134:	d002      	beq.n	800313c <HAL_ADC_Start+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d105      	bne.n	8003148 <HAL_ADC_Start+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003140:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	655a      	str	r2, [r3, #84]	@ 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800314c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003150:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003154:	d106      	bne.n	8003164 <HAL_ADC_Start+0xbc>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315a:	f023 0206 	bic.w	r2, r3, #6
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	659a      	str	r2, [r3, #88]	@ 0x58
 8003162:	e002      	b.n	800316a <HAL_ADC_Start+0xc2>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	221c      	movs	r2, #28
 8003170:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a2b      	ldr	r2, [pc, #172]	@ (800322c <HAL_ADC_Start+0x184>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d002      	beq.n	800318a <HAL_ADC_Start+0xe2>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	e000      	b.n	800318c <HAL_ADC_Start+0xe4>
 800318a:	4b27      	ldr	r3, [pc, #156]	@ (8003228 <HAL_ADC_Start+0x180>)
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	6812      	ldr	r2, [r2, #0]
 8003190:	4293      	cmp	r3, r2
 8003192:	d008      	beq.n	80031a6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d005      	beq.n	80031a6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	2b05      	cmp	r3, #5
 800319e:	d002      	beq.n	80031a6 <HAL_ADC_Start+0xfe>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	2b09      	cmp	r3, #9
 80031a4:	d114      	bne.n	80031d0 <HAL_ADC_Start+0x128>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d007      	beq.n	80031c4 <HAL_ADC_Start+0x11c>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80031bc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fd91 	bl	8002cf0 <LL_ADC_REG_StartConversion>
 80031ce:	e025      	b.n	800321c <HAL_ADC_Start+0x174>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031d4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a12      	ldr	r2, [pc, #72]	@ (800322c <HAL_ADC_Start+0x184>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d002      	beq.n	80031ec <HAL_ADC_Start+0x144>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	e000      	b.n	80031ee <HAL_ADC_Start+0x146>
 80031ec:	4b0e      	ldr	r3, [pc, #56]	@ (8003228 <HAL_ADC_Start+0x180>)
 80031ee:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00f      	beq.n	800321c <HAL_ADC_Start+0x174>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003200:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003204:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	655a      	str	r2, [r3, #84]	@ 0x54
 800320c:	e006      	b.n	800321c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8003216:	e001      	b.n	800321c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003218:	2302      	movs	r3, #2
 800321a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800321c:	7dfb      	ldrb	r3, [r7, #23]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	40022000 	.word	0x40022000
 800322c:	40022100 	.word	0x40022100
 8003230:	40022300 	.word	0x40022300
 8003234:	58026300 	.word	0x58026300
 8003238:	fffff0fe 	.word	0xfffff0fe

0800323c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b088      	sub	sp, #32
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a72      	ldr	r2, [pc, #456]	@ (8003414 <HAL_ADC_PollForConversion+0x1d8>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d004      	beq.n	800325a <HAL_ADC_PollForConversion+0x1e>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a70      	ldr	r2, [pc, #448]	@ (8003418 <HAL_ADC_PollForConversion+0x1dc>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d101      	bne.n	800325e <HAL_ADC_PollForConversion+0x22>
 800325a:	4b70      	ldr	r3, [pc, #448]	@ (800341c <HAL_ADC_PollForConversion+0x1e0>)
 800325c:	e000      	b.n	8003260 <HAL_ADC_PollForConversion+0x24>
 800325e:	4b70      	ldr	r3, [pc, #448]	@ (8003420 <HAL_ADC_PollForConversion+0x1e4>)
 8003260:	4618      	mov	r0, r3
 8003262:	f7ff fcb3 	bl	8002bcc <LL_ADC_GetMultimode>
 8003266:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	691b      	ldr	r3, [r3, #16]
 800326c:	2b08      	cmp	r3, #8
 800326e:	d102      	bne.n	8003276 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003270:	2308      	movs	r3, #8
 8003272:	61fb      	str	r3, [r7, #28]
 8003274:	e037      	b.n	80032e6 <HAL_ADC_PollForConversion+0xaa>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d005      	beq.n	8003288 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	2b05      	cmp	r3, #5
 8003280:	d002      	beq.n	8003288 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	2b09      	cmp	r3, #9
 8003286:	d111      	bne.n	80032ac <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check DMNGT bit in handle ADC CFGR register */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f003 0301 	and.w	r3, r3, #1
 8003292:	2b00      	cmp	r3, #0
 8003294:	d007      	beq.n	80032a6 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800329a:	f043 0220 	orr.w	r2, r3, #32
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e0b1      	b.n	800340a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80032a6:	2304      	movs	r3, #4
 80032a8:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0) != 0UL)
 80032aa:	e01c      	b.n	80032e6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a58      	ldr	r2, [pc, #352]	@ (8003414 <HAL_ADC_PollForConversion+0x1d8>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d004      	beq.n	80032c0 <HAL_ADC_PollForConversion+0x84>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a57      	ldr	r2, [pc, #348]	@ (8003418 <HAL_ADC_PollForConversion+0x1dc>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d101      	bne.n	80032c4 <HAL_ADC_PollForConversion+0x88>
 80032c0:	4b56      	ldr	r3, [pc, #344]	@ (800341c <HAL_ADC_PollForConversion+0x1e0>)
 80032c2:	e000      	b.n	80032c6 <HAL_ADC_PollForConversion+0x8a>
 80032c4:	4b56      	ldr	r3, [pc, #344]	@ (8003420 <HAL_ADC_PollForConversion+0x1e4>)
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff fc8e 	bl	8002be8 <LL_ADC_GetMultiDMATransfer>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d007      	beq.n	80032e2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032d6:	f043 0220 	orr.w	r2, r3, #32
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e093      	b.n	800340a <HAL_ADC_PollForConversion+0x1ce>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80032e2:	2304      	movs	r3, #4
 80032e4:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80032e6:	f7ff fb1f 	bl	8002928 <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80032ec:	e021      	b.n	8003332 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f4:	d01d      	beq.n	8003332 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80032f6:	f7ff fb17 	bl	8002928 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d302      	bcc.n	800330c <HAL_ADC_PollForConversion+0xd0>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d112      	bne.n	8003332 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	4013      	ands	r3, r2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10b      	bne.n	8003332 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800331e:	f043 0204 	orr.w	r2, r3, #4
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e06b      	b.n	800340a <HAL_ADC_PollForConversion+0x1ce>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	4013      	ands	r3, r2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0d6      	beq.n	80032ee <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003344:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff fbad 	bl	8002ab0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d01c      	beq.n	8003396 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	7d5b      	ldrb	r3, [r3, #21]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d118      	bne.n	8003396 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0308 	and.w	r3, r3, #8
 800336e:	2b08      	cmp	r3, #8
 8003370:	d111      	bne.n	8003396 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003376:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003382:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d105      	bne.n	8003396 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800338e:	f043 0201 	orr.w	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a1f      	ldr	r2, [pc, #124]	@ (8003418 <HAL_ADC_PollForConversion+0x1dc>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d002      	beq.n	80033a6 <HAL_ADC_PollForConversion+0x16a>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	e000      	b.n	80033a8 <HAL_ADC_PollForConversion+0x16c>
 80033a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003414 <HAL_ADC_PollForConversion+0x1d8>)
 80033a8:	687a      	ldr	r2, [r7, #4]
 80033aa:	6812      	ldr	r2, [r2, #0]
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d008      	beq.n	80033c2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d005      	beq.n	80033c2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2b05      	cmp	r3, #5
 80033ba:	d002      	beq.n	80033c2 <HAL_ADC_PollForConversion+0x186>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	2b09      	cmp	r3, #9
 80033c0:	d104      	bne.n	80033cc <HAL_ADC_PollForConversion+0x190>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	61bb      	str	r3, [r7, #24]
 80033ca:	e00c      	b.n	80033e6 <HAL_ADC_PollForConversion+0x1aa>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a11      	ldr	r2, [pc, #68]	@ (8003418 <HAL_ADC_PollForConversion+0x1dc>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d002      	beq.n	80033dc <HAL_ADC_PollForConversion+0x1a0>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	e000      	b.n	80033de <HAL_ADC_PollForConversion+0x1a2>
 80033dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003414 <HAL_ADC_PollForConversion+0x1d8>)
 80033de:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	68db      	ldr	r3, [r3, #12]
 80033e4:	61bb      	str	r3, [r7, #24]
  }

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d104      	bne.n	80033f6 <HAL_ADC_PollForConversion+0x1ba>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2208      	movs	r2, #8
 80033f2:	601a      	str	r2, [r3, #0]
 80033f4:	e008      	b.n	8003408 <HAL_ADC_PollForConversion+0x1cc>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d103      	bne.n	8003408 <HAL_ADC_PollForConversion+0x1cc>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	220c      	movs	r2, #12
 8003406:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3720      	adds	r7, #32
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40022000 	.word	0x40022000
 8003418:	40022100 	.word	0x40022100
 800341c:	40022300 	.word	0x40022300
 8003420:	58026300 	.word	0x58026300

08003424 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8003432:	4618      	mov	r0, r3
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
	...

08003440 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003440:	b590      	push	{r4, r7, lr}
 8003442:	b0a1      	sub	sp, #132	@ 0x84
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
 8003448:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003450:	2300      	movs	r3, #0
 8003452:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	68db      	ldr	r3, [r3, #12]
 8003458:	4a65      	ldr	r2, [pc, #404]	@ (80035f0 <HAL_ADC_ConfigChannel+0x1b0>)
 800345a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_ADC_ConfigChannel+0x2a>
 8003466:	2302      	movs	r3, #2
 8003468:	e32e      	b.n	8003ac8 <HAL_ADC_ConfigChannel+0x688>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff fc4e 	bl	8002d18 <LL_ADC_REG_IsConversionOngoing>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	f040 8313 	bne.w	8003aaa <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	db2c      	blt.n	80034e6 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003494:	2b00      	cmp	r3, #0
 8003496:	d108      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x6a>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	0e9b      	lsrs	r3, r3, #26
 800349e:	f003 031f 	and.w	r3, r3, #31
 80034a2:	2201      	movs	r2, #1
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	e016      	b.n	80034d8 <HAL_ADC_ConfigChannel+0x98>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80034b2:	fa93 f3a3 	rbit	r3, r3
 80034b6:	663b      	str	r3, [r7, #96]	@ 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80034b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034ba:	66bb      	str	r3, [r7, #104]	@ 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80034bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d101      	bne.n	80034c6 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 80034c2:	2320      	movs	r3, #32
 80034c4:	e003      	b.n	80034ce <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 80034c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80034c8:	fab3 f383 	clz	r3, r3
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	f003 031f 	and.w	r3, r3, #31
 80034d2:	2201      	movs	r2, #1
 80034d4:	fa02 f303 	lsl.w	r3, r2, r3
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	6812      	ldr	r2, [r2, #0]
 80034dc:	69d1      	ldr	r1, [r2, #28]
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	6812      	ldr	r2, [r2, #0]
 80034e2:	430b      	orrs	r3, r1
 80034e4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6818      	ldr	r0, [r3, #0]
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	6859      	ldr	r1, [r3, #4]
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	461a      	mov	r2, r3
 80034f4:	f7ff faef 	bl	8002ad6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7ff fc0b 	bl	8002d18 <LL_ADC_REG_IsConversionOngoing>
 8003502:	67b8      	str	r0, [r7, #120]	@ 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff fc18 	bl	8002d3e <LL_ADC_INJ_IsConversionOngoing>
 800350e:	6778      	str	r0, [r7, #116]	@ 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003510:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003512:	2b00      	cmp	r3, #0
 8003514:	f040 80b8 	bne.w	8003688 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003518:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800351a:	2b00      	cmp	r3, #0
 800351c:	f040 80b4 	bne.w	8003688 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6818      	ldr	r0, [r3, #0]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	6819      	ldr	r1, [r3, #0]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	461a      	mov	r2, r3
 800352e:	f7ff fafe 	bl	8002b2e <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003532:	4b30      	ldr	r3, [pc, #192]	@ (80035f4 <HAL_ADC_ConfigChannel+0x1b4>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800353a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800353e:	d10b      	bne.n	8003558 <HAL_ADC_ConfigChannel+0x118>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	695a      	ldr	r2, [r3, #20]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	089b      	lsrs	r3, r3, #2
 800354c:	f003 0307 	and.w	r3, r3, #7
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	fa02 f303 	lsl.w	r3, r2, r3
 8003556:	e01d      	b.n	8003594 <HAL_ADC_ConfigChannel+0x154>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	f003 0310 	and.w	r3, r3, #16
 8003562:	2b00      	cmp	r3, #0
 8003564:	d10b      	bne.n	800357e <HAL_ADC_ConfigChannel+0x13e>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	695a      	ldr	r2, [r3, #20]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	089b      	lsrs	r3, r3, #2
 8003572:	f003 0307 	and.w	r3, r3, #7
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	e00a      	b.n	8003594 <HAL_ADC_ConfigChannel+0x154>
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	695a      	ldr	r2, [r3, #20]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	089b      	lsrs	r3, r3, #2
 800358a:	f003 0304 	and.w	r3, r3, #4
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	673b      	str	r3, [r7, #112]	@ 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	691b      	ldr	r3, [r3, #16]
 800359a:	2b04      	cmp	r3, #4
 800359c:	d02c      	beq.n	80035f8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6818      	ldr	r0, [r3, #0]
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	6919      	ldr	r1, [r3, #16]
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80035ac:	f7ff fa2c 	bl	8002a08 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6818      	ldr	r0, [r3, #0]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	6919      	ldr	r1, [r3, #16]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	7e5b      	ldrb	r3, [r3, #25]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d102      	bne.n	80035c6 <HAL_ADC_ConfigChannel+0x186>
 80035c0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80035c4:	e000      	b.n	80035c8 <HAL_ADC_ConfigChannel+0x188>
 80035c6:	2300      	movs	r3, #0
 80035c8:	461a      	mov	r2, r3
 80035ca:	f7ff fa56 	bl	8002a7a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6818      	ldr	r0, [r3, #0]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	6919      	ldr	r1, [r3, #16]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	7e1b      	ldrb	r3, [r3, #24]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d102      	bne.n	80035e4 <HAL_ADC_ConfigChannel+0x1a4>
 80035de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80035e2:	e000      	b.n	80035e6 <HAL_ADC_ConfigChannel+0x1a6>
 80035e4:	2300      	movs	r3, #0
 80035e6:	461a      	mov	r2, r3
 80035e8:	f7ff fa2e 	bl	8002a48 <LL_ADC_SetDataRightShift>
 80035ec:	e04c      	b.n	8003688 <HAL_ADC_ConfigChannel+0x248>
 80035ee:	bf00      	nop
 80035f0:	47ff0000 	.word	0x47ff0000
 80035f4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035fe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	069b      	lsls	r3, r3, #26
 8003608:	429a      	cmp	r2, r3
 800360a:	d107      	bne.n	800361c <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800361a:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003622:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	069b      	lsls	r3, r3, #26
 800362c:	429a      	cmp	r2, r3
 800362e:	d107      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800363e:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003646:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	069b      	lsls	r3, r3, #26
 8003650:	429a      	cmp	r2, r3
 8003652:	d107      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003662:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800366a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	069b      	lsls	r3, r3, #26
 8003674:	429a      	cmp	r2, r3
 8003676:	d107      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003686:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4618      	mov	r0, r3
 800368e:	f7ff fb1b 	bl	8002cc8 <LL_ADC_IsEnabled>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	f040 8211 	bne.w	8003abc <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6818      	ldr	r0, [r3, #0]
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	6819      	ldr	r1, [r3, #0]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	461a      	mov	r2, r3
 80036a8:	f7ff fa6c 	bl	8002b84 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	4aa1      	ldr	r2, [pc, #644]	@ (8003938 <HAL_ADC_ConfigChannel+0x4f8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	f040 812e 	bne.w	8003914 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d10b      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x2a0>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	0e9b      	lsrs	r3, r3, #26
 80036ce:	3301      	adds	r3, #1
 80036d0:	f003 031f 	and.w	r3, r3, #31
 80036d4:	2b09      	cmp	r3, #9
 80036d6:	bf94      	ite	ls
 80036d8:	2301      	movls	r3, #1
 80036da:	2300      	movhi	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	e019      	b.n	8003714 <HAL_ADC_ConfigChannel+0x2d4>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80036e8:	fa93 f3a3 	rbit	r3, r3
 80036ec:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 80036ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 80036f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80036f8:	2320      	movs	r3, #32
 80036fa:	e003      	b.n	8003704 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80036fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036fe:	fab3 f383 	clz	r3, r3
 8003702:	b2db      	uxtb	r3, r3
 8003704:	3301      	adds	r3, #1
 8003706:	f003 031f 	and.w	r3, r3, #31
 800370a:	2b09      	cmp	r3, #9
 800370c:	bf94      	ite	ls
 800370e:	2301      	movls	r3, #1
 8003710:	2300      	movhi	r3, #0
 8003712:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003714:	2b00      	cmp	r3, #0
 8003716:	d079      	beq.n	800380c <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003720:	2b00      	cmp	r3, #0
 8003722:	d107      	bne.n	8003734 <HAL_ADC_ConfigChannel+0x2f4>
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	0e9b      	lsrs	r3, r3, #26
 800372a:	3301      	adds	r3, #1
 800372c:	069b      	lsls	r3, r3, #26
 800372e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003732:	e015      	b.n	8003760 <HAL_ADC_ConfigChannel+0x320>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800373c:	fa93 f3a3 	rbit	r3, r3
 8003740:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8003742:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003744:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8003746:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003748:	2b00      	cmp	r3, #0
 800374a:	d101      	bne.n	8003750 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 800374c:	2320      	movs	r3, #32
 800374e:	e003      	b.n	8003758 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8003750:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003752:	fab3 f383 	clz	r3, r3
 8003756:	b2db      	uxtb	r3, r3
 8003758:	3301      	adds	r3, #1
 800375a:	069b      	lsls	r3, r3, #26
 800375c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003768:	2b00      	cmp	r3, #0
 800376a:	d109      	bne.n	8003780 <HAL_ADC_ConfigChannel+0x340>
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	0e9b      	lsrs	r3, r3, #26
 8003772:	3301      	adds	r3, #1
 8003774:	f003 031f 	and.w	r3, r3, #31
 8003778:	2101      	movs	r1, #1
 800377a:	fa01 f303 	lsl.w	r3, r1, r3
 800377e:	e017      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x370>
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003786:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003788:	fa93 f3a3 	rbit	r3, r3
 800378c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 800378e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003790:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003792:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8003798:	2320      	movs	r3, #32
 800379a:	e003      	b.n	80037a4 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 800379c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800379e:	fab3 f383 	clz	r3, r3
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	3301      	adds	r3, #1
 80037a6:	f003 031f 	and.w	r3, r3, #31
 80037aa:	2101      	movs	r1, #1
 80037ac:	fa01 f303 	lsl.w	r3, r1, r3
 80037b0:	ea42 0103 	orr.w	r1, r2, r3
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10a      	bne.n	80037d6 <HAL_ADC_ConfigChannel+0x396>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	0e9b      	lsrs	r3, r3, #26
 80037c6:	3301      	adds	r3, #1
 80037c8:	f003 021f 	and.w	r2, r3, #31
 80037cc:	4613      	mov	r3, r2
 80037ce:	005b      	lsls	r3, r3, #1
 80037d0:	4413      	add	r3, r2
 80037d2:	051b      	lsls	r3, r3, #20
 80037d4:	e018      	b.n	8003808 <HAL_ADC_ConfigChannel+0x3c8>
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037de:	fa93 f3a3 	rbit	r3, r3
 80037e2:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 80037e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 80037e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 80037ee:	2320      	movs	r3, #32
 80037f0:	e003      	b.n	80037fa <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80037f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037f4:	fab3 f383 	clz	r3, r3
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	3301      	adds	r3, #1
 80037fc:	f003 021f 	and.w	r2, r3, #31
 8003800:	4613      	mov	r3, r2
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	4413      	add	r3, r2
 8003806:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003808:	430b      	orrs	r3, r1
 800380a:	e07e      	b.n	800390a <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003814:	2b00      	cmp	r3, #0
 8003816:	d107      	bne.n	8003828 <HAL_ADC_ConfigChannel+0x3e8>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	0e9b      	lsrs	r3, r3, #26
 800381e:	3301      	adds	r3, #1
 8003820:	069b      	lsls	r3, r3, #26
 8003822:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003826:	e015      	b.n	8003854 <HAL_ADC_ConfigChannel+0x414>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800382e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003830:	fa93 f3a3 	rbit	r3, r3
 8003834:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8003836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003838:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 800383a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800383c:	2b00      	cmp	r3, #0
 800383e:	d101      	bne.n	8003844 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8003840:	2320      	movs	r3, #32
 8003842:	e003      	b.n	800384c <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8003844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003846:	fab3 f383 	clz	r3, r3
 800384a:	b2db      	uxtb	r3, r3
 800384c:	3301      	adds	r3, #1
 800384e:	069b      	lsls	r3, r3, #26
 8003850:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800385c:	2b00      	cmp	r3, #0
 800385e:	d109      	bne.n	8003874 <HAL_ADC_ConfigChannel+0x434>
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	0e9b      	lsrs	r3, r3, #26
 8003866:	3301      	adds	r3, #1
 8003868:	f003 031f 	and.w	r3, r3, #31
 800386c:	2101      	movs	r1, #1
 800386e:	fa01 f303 	lsl.w	r3, r1, r3
 8003872:	e017      	b.n	80038a4 <HAL_ADC_ConfigChannel+0x464>
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	fa93 f3a3 	rbit	r3, r3
 8003880:	61bb      	str	r3, [r7, #24]
  return result;
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8003886:	6a3b      	ldr	r3, [r7, #32]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d101      	bne.n	8003890 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 800388c:	2320      	movs	r3, #32
 800388e:	e003      	b.n	8003898 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8003890:	6a3b      	ldr	r3, [r7, #32]
 8003892:	fab3 f383 	clz	r3, r3
 8003896:	b2db      	uxtb	r3, r3
 8003898:	3301      	adds	r3, #1
 800389a:	f003 031f 	and.w	r3, r3, #31
 800389e:	2101      	movs	r1, #1
 80038a0:	fa01 f303 	lsl.w	r3, r1, r3
 80038a4:	ea42 0103 	orr.w	r1, r2, r3
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10d      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x490>
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	0e9b      	lsrs	r3, r3, #26
 80038ba:	3301      	adds	r3, #1
 80038bc:	f003 021f 	and.w	r2, r3, #31
 80038c0:	4613      	mov	r3, r2
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	4413      	add	r3, r2
 80038c6:	3b1e      	subs	r3, #30
 80038c8:	051b      	lsls	r3, r3, #20
 80038ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80038ce:	e01b      	b.n	8003908 <HAL_ADC_ConfigChannel+0x4c8>
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	fa93 f3a3 	rbit	r3, r3
 80038dc:	60fb      	str	r3, [r7, #12]
  return result;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 80038e8:	2320      	movs	r3, #32
 80038ea:	e003      	b.n	80038f4 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	fab3 f383 	clz	r3, r3
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	3301      	adds	r3, #1
 80038f6:	f003 021f 	and.w	r2, r3, #31
 80038fa:	4613      	mov	r3, r2
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	4413      	add	r3, r2
 8003900:	3b1e      	subs	r3, #30
 8003902:	051b      	lsls	r3, r3, #20
 8003904:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003908:	430b      	orrs	r3, r1
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	6892      	ldr	r2, [r2, #8]
 800390e:	4619      	mov	r1, r3
 8003910:	f7ff f90d 	bl	8002b2e <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	f280 80cf 	bge.w	8003abc <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a06      	ldr	r2, [pc, #24]	@ (800393c <HAL_ADC_ConfigChannel+0x4fc>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d004      	beq.n	8003932 <HAL_ADC_ConfigChannel+0x4f2>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a04      	ldr	r2, [pc, #16]	@ (8003940 <HAL_ADC_ConfigChannel+0x500>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d10a      	bne.n	8003948 <HAL_ADC_ConfigChannel+0x508>
 8003932:	4b04      	ldr	r3, [pc, #16]	@ (8003944 <HAL_ADC_ConfigChannel+0x504>)
 8003934:	e009      	b.n	800394a <HAL_ADC_ConfigChannel+0x50a>
 8003936:	bf00      	nop
 8003938:	47ff0000 	.word	0x47ff0000
 800393c:	40022000 	.word	0x40022000
 8003940:	40022100 	.word	0x40022100
 8003944:	40022300 	.word	0x40022300
 8003948:	4b61      	ldr	r3, [pc, #388]	@ (8003ad0 <HAL_ADC_ConfigChannel+0x690>)
 800394a:	4618      	mov	r0, r3
 800394c:	f7ff f84e 	bl	80029ec <LL_ADC_GetCommonPathInternalCh>
 8003950:	66f8      	str	r0, [r7, #108]	@ 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a5f      	ldr	r2, [pc, #380]	@ (8003ad4 <HAL_ADC_ConfigChannel+0x694>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d004      	beq.n	8003966 <HAL_ADC_ConfigChannel+0x526>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a5d      	ldr	r2, [pc, #372]	@ (8003ad8 <HAL_ADC_ConfigChannel+0x698>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d10e      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x544>
 8003966:	485b      	ldr	r0, [pc, #364]	@ (8003ad4 <HAL_ADC_ConfigChannel+0x694>)
 8003968:	f7ff f9ae 	bl	8002cc8 <LL_ADC_IsEnabled>
 800396c:	4604      	mov	r4, r0
 800396e:	485a      	ldr	r0, [pc, #360]	@ (8003ad8 <HAL_ADC_ConfigChannel+0x698>)
 8003970:	f7ff f9aa 	bl	8002cc8 <LL_ADC_IsEnabled>
 8003974:	4603      	mov	r3, r0
 8003976:	4323      	orrs	r3, r4
 8003978:	2b00      	cmp	r3, #0
 800397a:	bf0c      	ite	eq
 800397c:	2301      	moveq	r3, #1
 800397e:	2300      	movne	r3, #0
 8003980:	b2db      	uxtb	r3, r3
 8003982:	e008      	b.n	8003996 <HAL_ADC_ConfigChannel+0x556>
 8003984:	4855      	ldr	r0, [pc, #340]	@ (8003adc <HAL_ADC_ConfigChannel+0x69c>)
 8003986:	f7ff f99f 	bl	8002cc8 <LL_ADC_IsEnabled>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	bf0c      	ite	eq
 8003990:	2301      	moveq	r3, #1
 8003992:	2300      	movne	r3, #0
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d07d      	beq.n	8003a96 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a50      	ldr	r2, [pc, #320]	@ (8003ae0 <HAL_ADC_ConfigChannel+0x6a0>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d130      	bne.n	8003a06 <HAL_ADC_ConfigChannel+0x5c6>
 80039a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d12b      	bne.n	8003a06 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a4a      	ldr	r2, [pc, #296]	@ (8003adc <HAL_ADC_ConfigChannel+0x69c>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	f040 8081 	bne.w	8003abc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a45      	ldr	r2, [pc, #276]	@ (8003ad4 <HAL_ADC_ConfigChannel+0x694>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d004      	beq.n	80039ce <HAL_ADC_ConfigChannel+0x58e>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a43      	ldr	r2, [pc, #268]	@ (8003ad8 <HAL_ADC_ConfigChannel+0x698>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d101      	bne.n	80039d2 <HAL_ADC_ConfigChannel+0x592>
 80039ce:	4a45      	ldr	r2, [pc, #276]	@ (8003ae4 <HAL_ADC_ConfigChannel+0x6a4>)
 80039d0:	e000      	b.n	80039d4 <HAL_ADC_ConfigChannel+0x594>
 80039d2:	4a3f      	ldr	r2, [pc, #252]	@ (8003ad0 <HAL_ADC_ConfigChannel+0x690>)
 80039d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80039d6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80039da:	4619      	mov	r1, r3
 80039dc:	4610      	mov	r0, r2
 80039de:	f7fe fff2 	bl	80029c6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80039e2:	4b41      	ldr	r3, [pc, #260]	@ (8003ae8 <HAL_ADC_ConfigChannel+0x6a8>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	099b      	lsrs	r3, r3, #6
 80039e8:	4a40      	ldr	r2, [pc, #256]	@ (8003aec <HAL_ADC_ConfigChannel+0x6ac>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	099b      	lsrs	r3, r3, #6
 80039f0:	3301      	adds	r3, #1
 80039f2:	005b      	lsls	r3, r3, #1
 80039f4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80039f6:	e002      	b.n	80039fe <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d1f9      	bne.n	80039f8 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a04:	e05a      	b.n	8003abc <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a39      	ldr	r2, [pc, #228]	@ (8003af0 <HAL_ADC_ConfigChannel+0x6b0>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d11e      	bne.n	8003a4e <HAL_ADC_ConfigChannel+0x60e>
 8003a10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d119      	bne.n	8003a4e <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a2f      	ldr	r2, [pc, #188]	@ (8003adc <HAL_ADC_ConfigChannel+0x69c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d14b      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a2a      	ldr	r2, [pc, #168]	@ (8003ad4 <HAL_ADC_ConfigChannel+0x694>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d004      	beq.n	8003a38 <HAL_ADC_ConfigChannel+0x5f8>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a29      	ldr	r2, [pc, #164]	@ (8003ad8 <HAL_ADC_ConfigChannel+0x698>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d101      	bne.n	8003a3c <HAL_ADC_ConfigChannel+0x5fc>
 8003a38:	4a2a      	ldr	r2, [pc, #168]	@ (8003ae4 <HAL_ADC_ConfigChannel+0x6a4>)
 8003a3a:	e000      	b.n	8003a3e <HAL_ADC_ConfigChannel+0x5fe>
 8003a3c:	4a24      	ldr	r2, [pc, #144]	@ (8003ad0 <HAL_ADC_ConfigChannel+0x690>)
 8003a3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a44:	4619      	mov	r1, r3
 8003a46:	4610      	mov	r0, r2
 8003a48:	f7fe ffbd 	bl	80029c6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a4c:	e036      	b.n	8003abc <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a28      	ldr	r2, [pc, #160]	@ (8003af4 <HAL_ADC_ConfigChannel+0x6b4>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d131      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x67c>
 8003a58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d12c      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a1d      	ldr	r2, [pc, #116]	@ (8003adc <HAL_ADC_ConfigChannel+0x69c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d127      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a18      	ldr	r2, [pc, #96]	@ (8003ad4 <HAL_ADC_ConfigChannel+0x694>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d004      	beq.n	8003a80 <HAL_ADC_ConfigChannel+0x640>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a17      	ldr	r2, [pc, #92]	@ (8003ad8 <HAL_ADC_ConfigChannel+0x698>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d101      	bne.n	8003a84 <HAL_ADC_ConfigChannel+0x644>
 8003a80:	4a18      	ldr	r2, [pc, #96]	@ (8003ae4 <HAL_ADC_ConfigChannel+0x6a4>)
 8003a82:	e000      	b.n	8003a86 <HAL_ADC_ConfigChannel+0x646>
 8003a84:	4a12      	ldr	r2, [pc, #72]	@ (8003ad0 <HAL_ADC_ConfigChannel+0x690>)
 8003a86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003a88:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4610      	mov	r0, r2
 8003a90:	f7fe ff99 	bl	80029c6 <LL_ADC_SetCommonPathInternalCh>
 8003a94:	e012      	b.n	8003abc <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a9a:	f043 0220 	orr.w	r2, r3, #32
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8003aa8:	e008      	b.n	8003abc <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aae:	f043 0220 	orr.w	r2, r3, #32
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ac4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3784      	adds	r7, #132	@ 0x84
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd90      	pop	{r4, r7, pc}
 8003ad0:	58026300 	.word	0x58026300
 8003ad4:	40022000 	.word	0x40022000
 8003ad8:	40022100 	.word	0x40022100
 8003adc:	58026000 	.word	0x58026000
 8003ae0:	cb840000 	.word	0xcb840000
 8003ae4:	40022300 	.word	0x40022300
 8003ae8:	24000000 	.word	0x24000000
 8003aec:	053e2d63 	.word	0x053e2d63
 8003af0:	c7520000 	.word	0xc7520000
 8003af4:	cfb80000 	.word	0xcfb80000

08003af8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff f8df 	bl	8002cc8 <LL_ADC_IsEnabled>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d16e      	bne.n	8003bee <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689a      	ldr	r2, [r3, #8]
 8003b16:	4b38      	ldr	r3, [pc, #224]	@ (8003bf8 <ADC_Enable+0x100>)
 8003b18:	4013      	ands	r3, r2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00d      	beq.n	8003b3a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b22:	f043 0210 	orr.w	r2, r3, #16
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b2e:	f043 0201 	orr.w	r2, r3, #1
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e05a      	b.n	8003bf0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff f8ae 	bl	8002ca0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003b44:	f7fe fef0 	bl	8002928 <HAL_GetTick>
 8003b48:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a2b      	ldr	r2, [pc, #172]	@ (8003bfc <ADC_Enable+0x104>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d004      	beq.n	8003b5e <ADC_Enable+0x66>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a29      	ldr	r2, [pc, #164]	@ (8003c00 <ADC_Enable+0x108>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d101      	bne.n	8003b62 <ADC_Enable+0x6a>
 8003b5e:	4b29      	ldr	r3, [pc, #164]	@ (8003c04 <ADC_Enable+0x10c>)
 8003b60:	e000      	b.n	8003b64 <ADC_Enable+0x6c>
 8003b62:	4b29      	ldr	r3, [pc, #164]	@ (8003c08 <ADC_Enable+0x110>)
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7ff f831 	bl	8002bcc <LL_ADC_GetMultimode>
 8003b6a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a23      	ldr	r2, [pc, #140]	@ (8003c00 <ADC_Enable+0x108>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d002      	beq.n	8003b7c <ADC_Enable+0x84>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	e000      	b.n	8003b7e <ADC_Enable+0x86>
 8003b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8003bfc <ADC_Enable+0x104>)
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	6812      	ldr	r2, [r2, #0]
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d02c      	beq.n	8003be0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d130      	bne.n	8003bee <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b8c:	e028      	b.n	8003be0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7ff f898 	bl	8002cc8 <LL_ADC_IsEnabled>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d104      	bne.n	8003ba8 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f7ff f87c 	bl	8002ca0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ba8:	f7fe febe 	bl	8002928 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d914      	bls.n	8003be0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d00d      	beq.n	8003be0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc8:	f043 0210 	orr.w	r2, r3, #16
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd4:	f043 0201 	orr.w	r2, r3, #1
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e007      	b.n	8003bf0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d1cf      	bne.n	8003b8e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003bee:	2300      	movs	r3, #0
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	8000003f 	.word	0x8000003f
 8003bfc:	40022000 	.word	0x40022000
 8003c00:	40022100 	.word	0x40022100
 8003c04:	40022300 	.word	0x40022300
 8003c08:	58026300 	.word	0x58026300

08003c0c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b084      	sub	sp, #16
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a7a      	ldr	r2, [pc, #488]	@ (8003e04 <ADC_ConfigureBoostMode+0x1f8>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d004      	beq.n	8003c28 <ADC_ConfigureBoostMode+0x1c>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a79      	ldr	r2, [pc, #484]	@ (8003e08 <ADC_ConfigureBoostMode+0x1fc>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d109      	bne.n	8003c3c <ADC_ConfigureBoostMode+0x30>
 8003c28:	4b78      	ldr	r3, [pc, #480]	@ (8003e0c <ADC_ConfigureBoostMode+0x200>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	bf14      	ite	ne
 8003c34:	2301      	movne	r3, #1
 8003c36:	2300      	moveq	r3, #0
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	e008      	b.n	8003c4e <ADC_ConfigureBoostMode+0x42>
 8003c3c:	4b74      	ldr	r3, [pc, #464]	@ (8003e10 <ADC_ConfigureBoostMode+0x204>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	bf14      	ite	ne
 8003c48:	2301      	movne	r3, #1
 8003c4a:	2300      	moveq	r3, #0
 8003c4c:	b2db      	uxtb	r3, r3
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d01c      	beq.n	8003c8c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003c52:	f005 f8fb 	bl	8008e4c <HAL_RCC_GetHCLKFreq>
 8003c56:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c60:	d010      	beq.n	8003c84 <ADC_ConfigureBoostMode+0x78>
 8003c62:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003c66:	d873      	bhi.n	8003d50 <ADC_ConfigureBoostMode+0x144>
 8003c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c6c:	d002      	beq.n	8003c74 <ADC_ConfigureBoostMode+0x68>
 8003c6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003c72:	d16d      	bne.n	8003d50 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	0c1b      	lsrs	r3, r3, #16
 8003c7a:	68fa      	ldr	r2, [r7, #12]
 8003c7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c80:	60fb      	str	r3, [r7, #12]
        break;
 8003c82:	e068      	b.n	8003d56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	089b      	lsrs	r3, r3, #2
 8003c88:	60fb      	str	r3, [r7, #12]
        break;
 8003c8a:	e064      	b.n	8003d56 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003c8c:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8003c90:	f04f 0100 	mov.w	r1, #0
 8003c94:	f006 fb40 	bl	800a318 <HAL_RCCEx_GetPeriphCLKFreq>
 8003c98:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003ca2:	d051      	beq.n	8003d48 <ADC_ConfigureBoostMode+0x13c>
 8003ca4:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8003ca8:	d854      	bhi.n	8003d54 <ADC_ConfigureBoostMode+0x148>
 8003caa:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003cae:	d047      	beq.n	8003d40 <ADC_ConfigureBoostMode+0x134>
 8003cb0:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8003cb4:	d84e      	bhi.n	8003d54 <ADC_ConfigureBoostMode+0x148>
 8003cb6:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003cba:	d03d      	beq.n	8003d38 <ADC_ConfigureBoostMode+0x12c>
 8003cbc:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8003cc0:	d848      	bhi.n	8003d54 <ADC_ConfigureBoostMode+0x148>
 8003cc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003cc6:	d033      	beq.n	8003d30 <ADC_ConfigureBoostMode+0x124>
 8003cc8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ccc:	d842      	bhi.n	8003d54 <ADC_ConfigureBoostMode+0x148>
 8003cce:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003cd2:	d029      	beq.n	8003d28 <ADC_ConfigureBoostMode+0x11c>
 8003cd4:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8003cd8:	d83c      	bhi.n	8003d54 <ADC_ConfigureBoostMode+0x148>
 8003cda:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003cde:	d01a      	beq.n	8003d16 <ADC_ConfigureBoostMode+0x10a>
 8003ce0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8003ce4:	d836      	bhi.n	8003d54 <ADC_ConfigureBoostMode+0x148>
 8003ce6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003cea:	d014      	beq.n	8003d16 <ADC_ConfigureBoostMode+0x10a>
 8003cec:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8003cf0:	d830      	bhi.n	8003d54 <ADC_ConfigureBoostMode+0x148>
 8003cf2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cf6:	d00e      	beq.n	8003d16 <ADC_ConfigureBoostMode+0x10a>
 8003cf8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cfc:	d82a      	bhi.n	8003d54 <ADC_ConfigureBoostMode+0x148>
 8003cfe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d02:	d008      	beq.n	8003d16 <ADC_ConfigureBoostMode+0x10a>
 8003d04:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8003d08:	d824      	bhi.n	8003d54 <ADC_ConfigureBoostMode+0x148>
 8003d0a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003d0e:	d002      	beq.n	8003d16 <ADC_ConfigureBoostMode+0x10a>
 8003d10:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003d14:	d11e      	bne.n	8003d54 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	0c9b      	lsrs	r3, r3, #18
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d24:	60fb      	str	r3, [r7, #12]
        break;
 8003d26:	e016      	b.n	8003d56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	091b      	lsrs	r3, r3, #4
 8003d2c:	60fb      	str	r3, [r7, #12]
        break;
 8003d2e:	e012      	b.n	8003d56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	60fb      	str	r3, [r7, #12]
        break;
 8003d36:	e00e      	b.n	8003d56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	099b      	lsrs	r3, r3, #6
 8003d3c:	60fb      	str	r3, [r7, #12]
        break;
 8003d3e:	e00a      	b.n	8003d56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	09db      	lsrs	r3, r3, #7
 8003d44:	60fb      	str	r3, [r7, #12]
        break;
 8003d46:	e006      	b.n	8003d56 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	0a1b      	lsrs	r3, r3, #8
 8003d4c:	60fb      	str	r3, [r7, #12]
        break;
 8003d4e:	e002      	b.n	8003d56 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003d50:	bf00      	nop
 8003d52:	e000      	b.n	8003d56 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003d54:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003d56:	f7fe fe17 	bl	8002988 <HAL_GetREVID>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d815      	bhi.n	8003d90 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4a2b      	ldr	r2, [pc, #172]	@ (8003e14 <ADC_ConfigureBoostMode+0x208>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d908      	bls.n	8003d7e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003d7a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003d7c:	e03e      	b.n	8003dfc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d8c:	609a      	str	r2, [r3, #8]
}
 8003d8e:	e035      	b.n	8003dfc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	085b      	lsrs	r3, r3, #1
 8003d94:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	4a1f      	ldr	r2, [pc, #124]	@ (8003e18 <ADC_ConfigureBoostMode+0x20c>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d808      	bhi.n	8003db0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8003dac:	609a      	str	r2, [r3, #8]
}
 8003dae:	e025      	b.n	8003dfc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4a1a      	ldr	r2, [pc, #104]	@ (8003e1c <ADC_ConfigureBoostMode+0x210>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d80a      	bhi.n	8003dce <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dca:	609a      	str	r2, [r3, #8]
}
 8003dcc:	e016      	b.n	8003dfc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	4a13      	ldr	r2, [pc, #76]	@ (8003e20 <ADC_ConfigureBoostMode+0x214>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d80a      	bhi.n	8003dec <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003de8:	609a      	str	r2, [r3, #8]
}
 8003dea:	e007      	b.n	8003dfc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8003dfa:	609a      	str	r2, [r3, #8]
}
 8003dfc:	bf00      	nop
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	40022000 	.word	0x40022000
 8003e08:	40022100 	.word	0x40022100
 8003e0c:	40022300 	.word	0x40022300
 8003e10:	58026300 	.word	0x58026300
 8003e14:	01312d00 	.word	0x01312d00
 8003e18:	005f5e10 	.word	0x005f5e10
 8003e1c:	00bebc20 	.word	0x00bebc20
 8003e20:	017d7840 	.word	0x017d7840

08003e24 <LL_ADC_IsEnabled>:
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d101      	bne.n	8003e3c <LL_ADC_IsEnabled+0x18>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e000      	b.n	8003e3e <LL_ADC_IsEnabled+0x1a>
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <LL_ADC_REG_IsConversionOngoing>:
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 0304 	and.w	r3, r3, #4
 8003e5a:	2b04      	cmp	r3, #4
 8003e5c:	d101      	bne.n	8003e62 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e000      	b.n	8003e64 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e62:	2300      	movs	r3, #0
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	370c      	adds	r7, #12
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003e70:	b590      	push	{r4, r7, lr}
 8003e72:	b09f      	sub	sp, #124	@ 0x7c
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d101      	bne.n	8003e8e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e0be      	b.n	800400c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003e96:	2300      	movs	r3, #0
 8003e98:	65fb      	str	r3, [r7, #92]	@ 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a5c      	ldr	r2, [pc, #368]	@ (8004014 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d102      	bne.n	8003eae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003ea8:	4b5b      	ldr	r3, [pc, #364]	@ (8004018 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003eaa:	60bb      	str	r3, [r7, #8]
 8003eac:	e001      	b.n	8003eb2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d10b      	bne.n	8003ed0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ebc:	f043 0220 	orr.w	r2, r3, #32
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e09d      	b.n	800400c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7ff ffb9 	bl	8003e4a <LL_ADC_REG_IsConversionOngoing>
 8003ed8:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f7ff ffb3 	bl	8003e4a <LL_ADC_REG_IsConversionOngoing>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d17f      	bne.n	8003fea <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003eea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d17c      	bne.n	8003fea <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a47      	ldr	r2, [pc, #284]	@ (8004014 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d004      	beq.n	8003f04 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a46      	ldr	r2, [pc, #280]	@ (8004018 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d101      	bne.n	8003f08 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003f04:	4b45      	ldr	r3, [pc, #276]	@ (800401c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003f06:	e000      	b.n	8003f0a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003f08:	4b45      	ldr	r3, [pc, #276]	@ (8004020 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003f0a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d039      	beq.n	8003f88 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003f14:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	431a      	orrs	r2, r3
 8003f22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f24:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a3a      	ldr	r2, [pc, #232]	@ (8004014 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d004      	beq.n	8003f3a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a38      	ldr	r2, [pc, #224]	@ (8004018 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d10e      	bne.n	8003f58 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003f3a:	4836      	ldr	r0, [pc, #216]	@ (8004014 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003f3c:	f7ff ff72 	bl	8003e24 <LL_ADC_IsEnabled>
 8003f40:	4604      	mov	r4, r0
 8003f42:	4835      	ldr	r0, [pc, #212]	@ (8004018 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003f44:	f7ff ff6e 	bl	8003e24 <LL_ADC_IsEnabled>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	4323      	orrs	r3, r4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	bf0c      	ite	eq
 8003f50:	2301      	moveq	r3, #1
 8003f52:	2300      	movne	r3, #0
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	e008      	b.n	8003f6a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003f58:	4832      	ldr	r0, [pc, #200]	@ (8004024 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003f5a:	f7ff ff63 	bl	8003e24 <LL_ADC_IsEnabled>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	bf0c      	ite	eq
 8003f64:	2301      	moveq	r3, #1
 8003f66:	2300      	movne	r3, #0
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d047      	beq.n	8003ffe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003f6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f70:	689a      	ldr	r2, [r3, #8]
 8003f72:	4b2d      	ldr	r3, [pc, #180]	@ (8004028 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003f74:	4013      	ands	r3, r2
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	6811      	ldr	r1, [r2, #0]
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	6892      	ldr	r2, [r2, #8]
 8003f7e:	430a      	orrs	r2, r1
 8003f80:	431a      	orrs	r2, r3
 8003f82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f84:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f86:	e03a      	b.n	8003ffe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003f88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003f90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003f92:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a1e      	ldr	r2, [pc, #120]	@ (8004014 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d004      	beq.n	8003fa8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a1d      	ldr	r2, [pc, #116]	@ (8004018 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d10e      	bne.n	8003fc6 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003fa8:	481a      	ldr	r0, [pc, #104]	@ (8004014 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003faa:	f7ff ff3b 	bl	8003e24 <LL_ADC_IsEnabled>
 8003fae:	4604      	mov	r4, r0
 8003fb0:	4819      	ldr	r0, [pc, #100]	@ (8004018 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003fb2:	f7ff ff37 	bl	8003e24 <LL_ADC_IsEnabled>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	4323      	orrs	r3, r4
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	bf0c      	ite	eq
 8003fbe:	2301      	moveq	r3, #1
 8003fc0:	2300      	movne	r3, #0
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	e008      	b.n	8003fd8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003fc6:	4817      	ldr	r0, [pc, #92]	@ (8004024 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003fc8:	f7ff ff2c 	bl	8003e24 <LL_ADC_IsEnabled>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	bf0c      	ite	eq
 8003fd2:	2301      	moveq	r3, #1
 8003fd4:	2300      	movne	r3, #0
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d010      	beq.n	8003ffe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003fdc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	4b11      	ldr	r3, [pc, #68]	@ (8004028 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003fe6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003fe8:	e009      	b.n	8003ffe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fee:	f043 0220 	orr.w	r2, r3, #32
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8003ffc:	e000      	b.n	8004000 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ffe:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004008:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 800400c:	4618      	mov	r0, r3
 800400e:	377c      	adds	r7, #124	@ 0x7c
 8004010:	46bd      	mov	sp, r7
 8004012:	bd90      	pop	{r4, r7, pc}
 8004014:	40022000 	.word	0x40022000
 8004018:	40022100 	.word	0x40022100
 800401c:	40022300 	.word	0x40022300
 8004020:	58026300 	.word	0x58026300
 8004024:	58026000 	.word	0x58026000
 8004028:	fffff0e0 	.word	0xfffff0e0

0800402c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f003 0307 	and.w	r3, r3, #7
 800403a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800403c:	4b0b      	ldr	r3, [pc, #44]	@ (800406c <__NVIC_SetPriorityGrouping+0x40>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004042:	68ba      	ldr	r2, [r7, #8]
 8004044:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004048:	4013      	ands	r3, r2
 800404a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004054:	4b06      	ldr	r3, [pc, #24]	@ (8004070 <__NVIC_SetPriorityGrouping+0x44>)
 8004056:	4313      	orrs	r3, r2
 8004058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800405a:	4a04      	ldr	r2, [pc, #16]	@ (800406c <__NVIC_SetPriorityGrouping+0x40>)
 800405c:	68bb      	ldr	r3, [r7, #8]
 800405e:	60d3      	str	r3, [r2, #12]
}
 8004060:	bf00      	nop
 8004062:	3714      	adds	r7, #20
 8004064:	46bd      	mov	sp, r7
 8004066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406a:	4770      	bx	lr
 800406c:	e000ed00 	.word	0xe000ed00
 8004070:	05fa0000 	.word	0x05fa0000

08004074 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004078:	4b04      	ldr	r3, [pc, #16]	@ (800408c <__NVIC_GetPriorityGrouping+0x18>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	0a1b      	lsrs	r3, r3, #8
 800407e:	f003 0307 	and.w	r3, r3, #7
}
 8004082:	4618      	mov	r0, r3
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	e000ed00 	.word	0xe000ed00

08004090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	4603      	mov	r3, r0
 8004098:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800409a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	db0b      	blt.n	80040ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040a2:	88fb      	ldrh	r3, [r7, #6]
 80040a4:	f003 021f 	and.w	r2, r3, #31
 80040a8:	4907      	ldr	r1, [pc, #28]	@ (80040c8 <__NVIC_EnableIRQ+0x38>)
 80040aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	2001      	movs	r0, #1
 80040b2:	fa00 f202 	lsl.w	r2, r0, r2
 80040b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	e000e100 	.word	0xe000e100

080040cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	4603      	mov	r3, r0
 80040d4:	6039      	str	r1, [r7, #0]
 80040d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80040d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	db0a      	blt.n	80040f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	490c      	ldr	r1, [pc, #48]	@ (8004118 <__NVIC_SetPriority+0x4c>)
 80040e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040ea:	0112      	lsls	r2, r2, #4
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	440b      	add	r3, r1
 80040f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040f4:	e00a      	b.n	800410c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	4908      	ldr	r1, [pc, #32]	@ (800411c <__NVIC_SetPriority+0x50>)
 80040fc:	88fb      	ldrh	r3, [r7, #6]
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	3b04      	subs	r3, #4
 8004104:	0112      	lsls	r2, r2, #4
 8004106:	b2d2      	uxtb	r2, r2
 8004108:	440b      	add	r3, r1
 800410a:	761a      	strb	r2, [r3, #24]
}
 800410c:	bf00      	nop
 800410e:	370c      	adds	r7, #12
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr
 8004118:	e000e100 	.word	0xe000e100
 800411c:	e000ed00 	.word	0xe000ed00

08004120 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004120:	b480      	push	{r7}
 8004122:	b089      	sub	sp, #36	@ 0x24
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	f1c3 0307 	rsb	r3, r3, #7
 800413a:	2b04      	cmp	r3, #4
 800413c:	bf28      	it	cs
 800413e:	2304      	movcs	r3, #4
 8004140:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	3304      	adds	r3, #4
 8004146:	2b06      	cmp	r3, #6
 8004148:	d902      	bls.n	8004150 <NVIC_EncodePriority+0x30>
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	3b03      	subs	r3, #3
 800414e:	e000      	b.n	8004152 <NVIC_EncodePriority+0x32>
 8004150:	2300      	movs	r3, #0
 8004152:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004154:	f04f 32ff 	mov.w	r2, #4294967295
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	fa02 f303 	lsl.w	r3, r2, r3
 800415e:	43da      	mvns	r2, r3
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	401a      	ands	r2, r3
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004168:	f04f 31ff 	mov.w	r1, #4294967295
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	fa01 f303 	lsl.w	r3, r1, r3
 8004172:	43d9      	mvns	r1, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004178:	4313      	orrs	r3, r2
         );
}
 800417a:	4618      	mov	r0, r3
 800417c:	3724      	adds	r7, #36	@ 0x24
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr
	...

08004188 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3b01      	subs	r3, #1
 8004194:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004198:	d301      	bcc.n	800419e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800419a:	2301      	movs	r3, #1
 800419c:	e00f      	b.n	80041be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800419e:	4a0a      	ldr	r2, [pc, #40]	@ (80041c8 <SysTick_Config+0x40>)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	3b01      	subs	r3, #1
 80041a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041a6:	210f      	movs	r1, #15
 80041a8:	f04f 30ff 	mov.w	r0, #4294967295
 80041ac:	f7ff ff8e 	bl	80040cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041b0:	4b05      	ldr	r3, [pc, #20]	@ (80041c8 <SysTick_Config+0x40>)
 80041b2:	2200      	movs	r2, #0
 80041b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041b6:	4b04      	ldr	r3, [pc, #16]	@ (80041c8 <SysTick_Config+0x40>)
 80041b8:	2207      	movs	r2, #7
 80041ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3708      	adds	r7, #8
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	e000e010 	.word	0xe000e010

080041cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff ff29 	bl	800402c <__NVIC_SetPriorityGrouping>
}
 80041da:	bf00      	nop
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b086      	sub	sp, #24
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	4603      	mov	r3, r0
 80041ea:	60b9      	str	r1, [r7, #8]
 80041ec:	607a      	str	r2, [r7, #4]
 80041ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80041f0:	f7ff ff40 	bl	8004074 <__NVIC_GetPriorityGrouping>
 80041f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041f6:	687a      	ldr	r2, [r7, #4]
 80041f8:	68b9      	ldr	r1, [r7, #8]
 80041fa:	6978      	ldr	r0, [r7, #20]
 80041fc:	f7ff ff90 	bl	8004120 <NVIC_EncodePriority>
 8004200:	4602      	mov	r2, r0
 8004202:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004206:	4611      	mov	r1, r2
 8004208:	4618      	mov	r0, r3
 800420a:	f7ff ff5f 	bl	80040cc <__NVIC_SetPriority>
}
 800420e:	bf00      	nop
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b082      	sub	sp, #8
 800421a:	af00      	add	r7, sp, #0
 800421c:	4603      	mov	r3, r0
 800421e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004220:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004224:	4618      	mov	r0, r3
 8004226:	f7ff ff33 	bl	8004090 <__NVIC_EnableIRQ>
}
 800422a:	bf00      	nop
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b082      	sub	sp, #8
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f7ff ffa4 	bl	8004188 <SysTick_Config>
 8004240:	4603      	mov	r3, r0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3708      	adds	r7, #8
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
	...

0800424c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 800424c:	b480      	push	{r7}
 800424e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8004250:	4b07      	ldr	r3, [pc, #28]	@ (8004270 <HAL_GetCurrentCPUID+0x24>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	091b      	lsrs	r3, r3, #4
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	2b07      	cmp	r3, #7
 800425c:	d101      	bne.n	8004262 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 800425e:	2303      	movs	r3, #3
 8004260:	e000      	b.n	8004264 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8004262:	2301      	movs	r3, #1
  }
}
 8004264:	4618      	mov	r0, r3
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	e000ed00 	.word	0xe000ed00

08004274 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b086      	sub	sp, #24
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800427c:	f7fe fb54 	bl	8002928 <HAL_GetTick>
 8004280:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d101      	bne.n	800428c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e316      	b.n	80048ba <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a66      	ldr	r2, [pc, #408]	@ (800442c <HAL_DMA_Init+0x1b8>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d04a      	beq.n	800432c <HAL_DMA_Init+0xb8>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a65      	ldr	r2, [pc, #404]	@ (8004430 <HAL_DMA_Init+0x1bc>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d045      	beq.n	800432c <HAL_DMA_Init+0xb8>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a63      	ldr	r2, [pc, #396]	@ (8004434 <HAL_DMA_Init+0x1c0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d040      	beq.n	800432c <HAL_DMA_Init+0xb8>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a62      	ldr	r2, [pc, #392]	@ (8004438 <HAL_DMA_Init+0x1c4>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d03b      	beq.n	800432c <HAL_DMA_Init+0xb8>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a60      	ldr	r2, [pc, #384]	@ (800443c <HAL_DMA_Init+0x1c8>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d036      	beq.n	800432c <HAL_DMA_Init+0xb8>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a5f      	ldr	r2, [pc, #380]	@ (8004440 <HAL_DMA_Init+0x1cc>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d031      	beq.n	800432c <HAL_DMA_Init+0xb8>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a5d      	ldr	r2, [pc, #372]	@ (8004444 <HAL_DMA_Init+0x1d0>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d02c      	beq.n	800432c <HAL_DMA_Init+0xb8>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a5c      	ldr	r2, [pc, #368]	@ (8004448 <HAL_DMA_Init+0x1d4>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d027      	beq.n	800432c <HAL_DMA_Init+0xb8>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a5a      	ldr	r2, [pc, #360]	@ (800444c <HAL_DMA_Init+0x1d8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d022      	beq.n	800432c <HAL_DMA_Init+0xb8>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a59      	ldr	r2, [pc, #356]	@ (8004450 <HAL_DMA_Init+0x1dc>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d01d      	beq.n	800432c <HAL_DMA_Init+0xb8>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a57      	ldr	r2, [pc, #348]	@ (8004454 <HAL_DMA_Init+0x1e0>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d018      	beq.n	800432c <HAL_DMA_Init+0xb8>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a56      	ldr	r2, [pc, #344]	@ (8004458 <HAL_DMA_Init+0x1e4>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d013      	beq.n	800432c <HAL_DMA_Init+0xb8>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a54      	ldr	r2, [pc, #336]	@ (800445c <HAL_DMA_Init+0x1e8>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d00e      	beq.n	800432c <HAL_DMA_Init+0xb8>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a53      	ldr	r2, [pc, #332]	@ (8004460 <HAL_DMA_Init+0x1ec>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d009      	beq.n	800432c <HAL_DMA_Init+0xb8>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a51      	ldr	r2, [pc, #324]	@ (8004464 <HAL_DMA_Init+0x1f0>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d004      	beq.n	800432c <HAL_DMA_Init+0xb8>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a50      	ldr	r2, [pc, #320]	@ (8004468 <HAL_DMA_Init+0x1f4>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d101      	bne.n	8004330 <HAL_DMA_Init+0xbc>
 800432c:	2301      	movs	r3, #1
 800432e:	e000      	b.n	8004332 <HAL_DMA_Init+0xbe>
 8004330:	2300      	movs	r3, #0
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 813b 	beq.w	80045ae <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a37      	ldr	r2, [pc, #220]	@ (800442c <HAL_DMA_Init+0x1b8>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d04a      	beq.n	80043e8 <HAL_DMA_Init+0x174>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a36      	ldr	r2, [pc, #216]	@ (8004430 <HAL_DMA_Init+0x1bc>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d045      	beq.n	80043e8 <HAL_DMA_Init+0x174>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a34      	ldr	r2, [pc, #208]	@ (8004434 <HAL_DMA_Init+0x1c0>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d040      	beq.n	80043e8 <HAL_DMA_Init+0x174>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a33      	ldr	r2, [pc, #204]	@ (8004438 <HAL_DMA_Init+0x1c4>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d03b      	beq.n	80043e8 <HAL_DMA_Init+0x174>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a31      	ldr	r2, [pc, #196]	@ (800443c <HAL_DMA_Init+0x1c8>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d036      	beq.n	80043e8 <HAL_DMA_Init+0x174>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a30      	ldr	r2, [pc, #192]	@ (8004440 <HAL_DMA_Init+0x1cc>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d031      	beq.n	80043e8 <HAL_DMA_Init+0x174>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a2e      	ldr	r2, [pc, #184]	@ (8004444 <HAL_DMA_Init+0x1d0>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d02c      	beq.n	80043e8 <HAL_DMA_Init+0x174>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a2d      	ldr	r2, [pc, #180]	@ (8004448 <HAL_DMA_Init+0x1d4>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d027      	beq.n	80043e8 <HAL_DMA_Init+0x174>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a2b      	ldr	r2, [pc, #172]	@ (800444c <HAL_DMA_Init+0x1d8>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d022      	beq.n	80043e8 <HAL_DMA_Init+0x174>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a2a      	ldr	r2, [pc, #168]	@ (8004450 <HAL_DMA_Init+0x1dc>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d01d      	beq.n	80043e8 <HAL_DMA_Init+0x174>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a28      	ldr	r2, [pc, #160]	@ (8004454 <HAL_DMA_Init+0x1e0>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d018      	beq.n	80043e8 <HAL_DMA_Init+0x174>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a27      	ldr	r2, [pc, #156]	@ (8004458 <HAL_DMA_Init+0x1e4>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d013      	beq.n	80043e8 <HAL_DMA_Init+0x174>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a25      	ldr	r2, [pc, #148]	@ (800445c <HAL_DMA_Init+0x1e8>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d00e      	beq.n	80043e8 <HAL_DMA_Init+0x174>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a24      	ldr	r2, [pc, #144]	@ (8004460 <HAL_DMA_Init+0x1ec>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d009      	beq.n	80043e8 <HAL_DMA_Init+0x174>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a22      	ldr	r2, [pc, #136]	@ (8004464 <HAL_DMA_Init+0x1f0>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d004      	beq.n	80043e8 <HAL_DMA_Init+0x174>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a21      	ldr	r2, [pc, #132]	@ (8004468 <HAL_DMA_Init+0x1f4>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d108      	bne.n	80043fa <HAL_DMA_Init+0x186>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0201 	bic.w	r2, r2, #1
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	e007      	b.n	800440a <HAL_DMA_Init+0x196>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f022 0201 	bic.w	r2, r2, #1
 8004408:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800440a:	e02f      	b.n	800446c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800440c:	f7fe fa8c 	bl	8002928 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b05      	cmp	r3, #5
 8004418:	d928      	bls.n	800446c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2220      	movs	r2, #32
 800441e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2203      	movs	r2, #3
 8004424:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8004428:	2301      	movs	r3, #1
 800442a:	e246      	b.n	80048ba <HAL_DMA_Init+0x646>
 800442c:	40020010 	.word	0x40020010
 8004430:	40020028 	.word	0x40020028
 8004434:	40020040 	.word	0x40020040
 8004438:	40020058 	.word	0x40020058
 800443c:	40020070 	.word	0x40020070
 8004440:	40020088 	.word	0x40020088
 8004444:	400200a0 	.word	0x400200a0
 8004448:	400200b8 	.word	0x400200b8
 800444c:	40020410 	.word	0x40020410
 8004450:	40020428 	.word	0x40020428
 8004454:	40020440 	.word	0x40020440
 8004458:	40020458 	.word	0x40020458
 800445c:	40020470 	.word	0x40020470
 8004460:	40020488 	.word	0x40020488
 8004464:	400204a0 	.word	0x400204a0
 8004468:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1c8      	bne.n	800440c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4b83      	ldr	r3, [pc, #524]	@ (8004694 <HAL_DMA_Init+0x420>)
 8004486:	4013      	ands	r3, r2
 8004488:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004492:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800449e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044aa:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d107      	bne.n	80044d0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044c8:	4313      	orrs	r3, r2
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80044d0:	4b71      	ldr	r3, [pc, #452]	@ (8004698 <HAL_DMA_Init+0x424>)
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	4b71      	ldr	r3, [pc, #452]	@ (800469c <HAL_DMA_Init+0x428>)
 80044d6:	4013      	ands	r3, r2
 80044d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80044dc:	d328      	bcc.n	8004530 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b28      	cmp	r3, #40	@ 0x28
 80044e4:	d903      	bls.n	80044ee <HAL_DMA_Init+0x27a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80044ec:	d917      	bls.n	800451e <HAL_DMA_Init+0x2aa>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80044f4:	d903      	bls.n	80044fe <HAL_DMA_Init+0x28a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	2b42      	cmp	r3, #66	@ 0x42
 80044fc:	d90f      	bls.n	800451e <HAL_DMA_Init+0x2aa>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2b46      	cmp	r3, #70	@ 0x46
 8004504:	d903      	bls.n	800450e <HAL_DMA_Init+0x29a>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2b48      	cmp	r3, #72	@ 0x48
 800450c:	d907      	bls.n	800451e <HAL_DMA_Init+0x2aa>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	2b4e      	cmp	r3, #78	@ 0x4e
 8004514:	d905      	bls.n	8004522 <HAL_DMA_Init+0x2ae>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	2b52      	cmp	r3, #82	@ 0x52
 800451c:	d801      	bhi.n	8004522 <HAL_DMA_Init+0x2ae>
 800451e:	2301      	movs	r3, #1
 8004520:	e000      	b.n	8004524 <HAL_DMA_Init+0x2b0>
 8004522:	2300      	movs	r3, #0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d003      	beq.n	8004530 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800452e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	697a      	ldr	r2, [r7, #20]
 8004536:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	f023 0307 	bic.w	r3, r3, #7
 8004546:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	4313      	orrs	r3, r2
 8004550:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004556:	2b04      	cmp	r3, #4
 8004558:	d117      	bne.n	800458a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455e:	697a      	ldr	r2, [r7, #20]
 8004560:	4313      	orrs	r3, r2
 8004562:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00e      	beq.n	800458a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f001 fdcf 	bl	8006110 <DMA_CheckFifoParam>
 8004572:	4603      	mov	r3, r0
 8004574:	2b00      	cmp	r3, #0
 8004576:	d008      	beq.n	800458a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2240      	movs	r2, #64	@ 0x40
 800457c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e197      	b.n	80048ba <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	697a      	ldr	r2, [r7, #20]
 8004590:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f001 fd0a 	bl	8005fac <DMA_CalcBaseAndBitshift>
 8004598:	4603      	mov	r3, r0
 800459a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045a0:	f003 031f 	and.w	r3, r3, #31
 80045a4:	223f      	movs	r2, #63	@ 0x3f
 80045a6:	409a      	lsls	r2, r3
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	609a      	str	r2, [r3, #8]
 80045ac:	e0cd      	b.n	800474a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a3b      	ldr	r2, [pc, #236]	@ (80046a0 <HAL_DMA_Init+0x42c>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d022      	beq.n	80045fe <HAL_DMA_Init+0x38a>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a39      	ldr	r2, [pc, #228]	@ (80046a4 <HAL_DMA_Init+0x430>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d01d      	beq.n	80045fe <HAL_DMA_Init+0x38a>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a38      	ldr	r2, [pc, #224]	@ (80046a8 <HAL_DMA_Init+0x434>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d018      	beq.n	80045fe <HAL_DMA_Init+0x38a>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a36      	ldr	r2, [pc, #216]	@ (80046ac <HAL_DMA_Init+0x438>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d013      	beq.n	80045fe <HAL_DMA_Init+0x38a>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a35      	ldr	r2, [pc, #212]	@ (80046b0 <HAL_DMA_Init+0x43c>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d00e      	beq.n	80045fe <HAL_DMA_Init+0x38a>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a33      	ldr	r2, [pc, #204]	@ (80046b4 <HAL_DMA_Init+0x440>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d009      	beq.n	80045fe <HAL_DMA_Init+0x38a>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a32      	ldr	r2, [pc, #200]	@ (80046b8 <HAL_DMA_Init+0x444>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d004      	beq.n	80045fe <HAL_DMA_Init+0x38a>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a30      	ldr	r2, [pc, #192]	@ (80046bc <HAL_DMA_Init+0x448>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d101      	bne.n	8004602 <HAL_DMA_Init+0x38e>
 80045fe:	2301      	movs	r3, #1
 8004600:	e000      	b.n	8004604 <HAL_DMA_Init+0x390>
 8004602:	2300      	movs	r3, #0
 8004604:	2b00      	cmp	r3, #0
 8004606:	f000 8097 	beq.w	8004738 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a24      	ldr	r2, [pc, #144]	@ (80046a0 <HAL_DMA_Init+0x42c>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d021      	beq.n	8004658 <HAL_DMA_Init+0x3e4>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a22      	ldr	r2, [pc, #136]	@ (80046a4 <HAL_DMA_Init+0x430>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d01c      	beq.n	8004658 <HAL_DMA_Init+0x3e4>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a21      	ldr	r2, [pc, #132]	@ (80046a8 <HAL_DMA_Init+0x434>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d017      	beq.n	8004658 <HAL_DMA_Init+0x3e4>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a1f      	ldr	r2, [pc, #124]	@ (80046ac <HAL_DMA_Init+0x438>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d012      	beq.n	8004658 <HAL_DMA_Init+0x3e4>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a1e      	ldr	r2, [pc, #120]	@ (80046b0 <HAL_DMA_Init+0x43c>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d00d      	beq.n	8004658 <HAL_DMA_Init+0x3e4>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a1c      	ldr	r2, [pc, #112]	@ (80046b4 <HAL_DMA_Init+0x440>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d008      	beq.n	8004658 <HAL_DMA_Init+0x3e4>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a1b      	ldr	r2, [pc, #108]	@ (80046b8 <HAL_DMA_Init+0x444>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d003      	beq.n	8004658 <HAL_DMA_Init+0x3e4>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a19      	ldr	r2, [pc, #100]	@ (80046bc <HAL_DMA_Init+0x448>)
 8004656:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	4b13      	ldr	r3, [pc, #76]	@ (80046c0 <HAL_DMA_Init+0x44c>)
 8004674:	4013      	ands	r3, r2
 8004676:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	2b40      	cmp	r3, #64	@ 0x40
 800467e:	d021      	beq.n	80046c4 <HAL_DMA_Init+0x450>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	2b80      	cmp	r3, #128	@ 0x80
 8004686:	d102      	bne.n	800468e <HAL_DMA_Init+0x41a>
 8004688:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800468c:	e01b      	b.n	80046c6 <HAL_DMA_Init+0x452>
 800468e:	2300      	movs	r3, #0
 8004690:	e019      	b.n	80046c6 <HAL_DMA_Init+0x452>
 8004692:	bf00      	nop
 8004694:	fe10803f 	.word	0xfe10803f
 8004698:	5c001000 	.word	0x5c001000
 800469c:	ffff0000 	.word	0xffff0000
 80046a0:	58025408 	.word	0x58025408
 80046a4:	5802541c 	.word	0x5802541c
 80046a8:	58025430 	.word	0x58025430
 80046ac:	58025444 	.word	0x58025444
 80046b0:	58025458 	.word	0x58025458
 80046b4:	5802546c 	.word	0x5802546c
 80046b8:	58025480 	.word	0x58025480
 80046bc:	58025494 	.word	0x58025494
 80046c0:	fffe000f 	.word	0xfffe000f
 80046c4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	68d2      	ldr	r2, [r2, #12]
 80046ca:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80046cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	691b      	ldr	r3, [r3, #16]
 80046d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80046d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	695b      	ldr	r3, [r3, #20]
 80046da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80046dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	699b      	ldr	r3, [r3, #24]
 80046e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80046e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80046ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80046f4:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	697a      	ldr	r2, [r7, #20]
 8004702:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	461a      	mov	r2, r3
 800470a:	4b6e      	ldr	r3, [pc, #440]	@ (80048c4 <HAL_DMA_Init+0x650>)
 800470c:	4413      	add	r3, r2
 800470e:	4a6e      	ldr	r2, [pc, #440]	@ (80048c8 <HAL_DMA_Init+0x654>)
 8004710:	fba2 2303 	umull	r2, r3, r2, r3
 8004714:	091b      	lsrs	r3, r3, #4
 8004716:	009a      	lsls	r2, r3, #2
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f001 fc45 	bl	8005fac <DMA_CalcBaseAndBitshift>
 8004722:	4603      	mov	r3, r0
 8004724:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800472a:	f003 031f 	and.w	r3, r3, #31
 800472e:	2201      	movs	r2, #1
 8004730:	409a      	lsls	r2, r3
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	605a      	str	r2, [r3, #4]
 8004736:	e008      	b.n	800474a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2240      	movs	r2, #64	@ 0x40
 800473c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2203      	movs	r2, #3
 8004742:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
 8004748:	e0b7      	b.n	80048ba <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4a5f      	ldr	r2, [pc, #380]	@ (80048cc <HAL_DMA_Init+0x658>)
 8004750:	4293      	cmp	r3, r2
 8004752:	d072      	beq.n	800483a <HAL_DMA_Init+0x5c6>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a5d      	ldr	r2, [pc, #372]	@ (80048d0 <HAL_DMA_Init+0x65c>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d06d      	beq.n	800483a <HAL_DMA_Init+0x5c6>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4a5c      	ldr	r2, [pc, #368]	@ (80048d4 <HAL_DMA_Init+0x660>)
 8004764:	4293      	cmp	r3, r2
 8004766:	d068      	beq.n	800483a <HAL_DMA_Init+0x5c6>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a5a      	ldr	r2, [pc, #360]	@ (80048d8 <HAL_DMA_Init+0x664>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d063      	beq.n	800483a <HAL_DMA_Init+0x5c6>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a59      	ldr	r2, [pc, #356]	@ (80048dc <HAL_DMA_Init+0x668>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d05e      	beq.n	800483a <HAL_DMA_Init+0x5c6>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a57      	ldr	r2, [pc, #348]	@ (80048e0 <HAL_DMA_Init+0x66c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d059      	beq.n	800483a <HAL_DMA_Init+0x5c6>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a56      	ldr	r2, [pc, #344]	@ (80048e4 <HAL_DMA_Init+0x670>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d054      	beq.n	800483a <HAL_DMA_Init+0x5c6>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a54      	ldr	r2, [pc, #336]	@ (80048e8 <HAL_DMA_Init+0x674>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d04f      	beq.n	800483a <HAL_DMA_Init+0x5c6>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a53      	ldr	r2, [pc, #332]	@ (80048ec <HAL_DMA_Init+0x678>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d04a      	beq.n	800483a <HAL_DMA_Init+0x5c6>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a51      	ldr	r2, [pc, #324]	@ (80048f0 <HAL_DMA_Init+0x67c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d045      	beq.n	800483a <HAL_DMA_Init+0x5c6>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a50      	ldr	r2, [pc, #320]	@ (80048f4 <HAL_DMA_Init+0x680>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d040      	beq.n	800483a <HAL_DMA_Init+0x5c6>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a4e      	ldr	r2, [pc, #312]	@ (80048f8 <HAL_DMA_Init+0x684>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d03b      	beq.n	800483a <HAL_DMA_Init+0x5c6>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a4d      	ldr	r2, [pc, #308]	@ (80048fc <HAL_DMA_Init+0x688>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d036      	beq.n	800483a <HAL_DMA_Init+0x5c6>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a4b      	ldr	r2, [pc, #300]	@ (8004900 <HAL_DMA_Init+0x68c>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d031      	beq.n	800483a <HAL_DMA_Init+0x5c6>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a4a      	ldr	r2, [pc, #296]	@ (8004904 <HAL_DMA_Init+0x690>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d02c      	beq.n	800483a <HAL_DMA_Init+0x5c6>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a48      	ldr	r2, [pc, #288]	@ (8004908 <HAL_DMA_Init+0x694>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d027      	beq.n	800483a <HAL_DMA_Init+0x5c6>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a47      	ldr	r2, [pc, #284]	@ (800490c <HAL_DMA_Init+0x698>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d022      	beq.n	800483a <HAL_DMA_Init+0x5c6>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a45      	ldr	r2, [pc, #276]	@ (8004910 <HAL_DMA_Init+0x69c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d01d      	beq.n	800483a <HAL_DMA_Init+0x5c6>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a44      	ldr	r2, [pc, #272]	@ (8004914 <HAL_DMA_Init+0x6a0>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d018      	beq.n	800483a <HAL_DMA_Init+0x5c6>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a42      	ldr	r2, [pc, #264]	@ (8004918 <HAL_DMA_Init+0x6a4>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d013      	beq.n	800483a <HAL_DMA_Init+0x5c6>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a41      	ldr	r2, [pc, #260]	@ (800491c <HAL_DMA_Init+0x6a8>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d00e      	beq.n	800483a <HAL_DMA_Init+0x5c6>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a3f      	ldr	r2, [pc, #252]	@ (8004920 <HAL_DMA_Init+0x6ac>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d009      	beq.n	800483a <HAL_DMA_Init+0x5c6>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a3e      	ldr	r2, [pc, #248]	@ (8004924 <HAL_DMA_Init+0x6b0>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d004      	beq.n	800483a <HAL_DMA_Init+0x5c6>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a3c      	ldr	r2, [pc, #240]	@ (8004928 <HAL_DMA_Init+0x6b4>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d101      	bne.n	800483e <HAL_DMA_Init+0x5ca>
 800483a:	2301      	movs	r3, #1
 800483c:	e000      	b.n	8004840 <HAL_DMA_Init+0x5cc>
 800483e:	2300      	movs	r3, #0
 8004840:	2b00      	cmp	r3, #0
 8004842:	d032      	beq.n	80048aa <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f001 fcdf 	bl	8006208 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	2b80      	cmp	r3, #128	@ 0x80
 8004850:	d102      	bne.n	8004858 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004860:	b2d2      	uxtb	r2, r2
 8004862:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800486c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d010      	beq.n	8004898 <HAL_DMA_Init+0x624>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	2b08      	cmp	r3, #8
 800487c:	d80c      	bhi.n	8004898 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f001 fd5c 	bl	800633c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004888:	2200      	movs	r2, #0
 800488a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004894:	605a      	str	r2, [r3, #4]
 8004896:	e008      	b.n	80048aa <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2201      	movs	r2, #1
 80048b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3718      	adds	r7, #24
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	a7fdabf8 	.word	0xa7fdabf8
 80048c8:	cccccccd 	.word	0xcccccccd
 80048cc:	40020010 	.word	0x40020010
 80048d0:	40020028 	.word	0x40020028
 80048d4:	40020040 	.word	0x40020040
 80048d8:	40020058 	.word	0x40020058
 80048dc:	40020070 	.word	0x40020070
 80048e0:	40020088 	.word	0x40020088
 80048e4:	400200a0 	.word	0x400200a0
 80048e8:	400200b8 	.word	0x400200b8
 80048ec:	40020410 	.word	0x40020410
 80048f0:	40020428 	.word	0x40020428
 80048f4:	40020440 	.word	0x40020440
 80048f8:	40020458 	.word	0x40020458
 80048fc:	40020470 	.word	0x40020470
 8004900:	40020488 	.word	0x40020488
 8004904:	400204a0 	.word	0x400204a0
 8004908:	400204b8 	.word	0x400204b8
 800490c:	58025408 	.word	0x58025408
 8004910:	5802541c 	.word	0x5802541c
 8004914:	58025430 	.word	0x58025430
 8004918:	58025444 	.word	0x58025444
 800491c:	58025458 	.word	0x58025458
 8004920:	5802546c 	.word	0x5802546c
 8004924:	58025480 	.word	0x58025480
 8004928:	58025494 	.word	0x58025494

0800492c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b086      	sub	sp, #24
 8004930:	af00      	add	r7, sp, #0
 8004932:	60f8      	str	r0, [r7, #12]
 8004934:	60b9      	str	r1, [r7, #8]
 8004936:	607a      	str	r2, [r7, #4]
 8004938:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800493a:	2300      	movs	r3, #0
 800493c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e226      	b.n	8004d96 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800494e:	2b01      	cmp	r3, #1
 8004950:	d101      	bne.n	8004956 <HAL_DMA_Start_IT+0x2a>
 8004952:	2302      	movs	r3, #2
 8004954:	e21f      	b.n	8004d96 <HAL_DMA_Start_IT+0x46a>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2201      	movs	r2, #1
 800495a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2b01      	cmp	r3, #1
 8004968:	f040 820a 	bne.w	8004d80 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a68      	ldr	r2, [pc, #416]	@ (8004b20 <HAL_DMA_Start_IT+0x1f4>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d04a      	beq.n	8004a1a <HAL_DMA_Start_IT+0xee>
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a66      	ldr	r2, [pc, #408]	@ (8004b24 <HAL_DMA_Start_IT+0x1f8>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d045      	beq.n	8004a1a <HAL_DMA_Start_IT+0xee>
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a65      	ldr	r2, [pc, #404]	@ (8004b28 <HAL_DMA_Start_IT+0x1fc>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d040      	beq.n	8004a1a <HAL_DMA_Start_IT+0xee>
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a63      	ldr	r2, [pc, #396]	@ (8004b2c <HAL_DMA_Start_IT+0x200>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d03b      	beq.n	8004a1a <HAL_DMA_Start_IT+0xee>
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a62      	ldr	r2, [pc, #392]	@ (8004b30 <HAL_DMA_Start_IT+0x204>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d036      	beq.n	8004a1a <HAL_DMA_Start_IT+0xee>
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a60      	ldr	r2, [pc, #384]	@ (8004b34 <HAL_DMA_Start_IT+0x208>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d031      	beq.n	8004a1a <HAL_DMA_Start_IT+0xee>
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a5f      	ldr	r2, [pc, #380]	@ (8004b38 <HAL_DMA_Start_IT+0x20c>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d02c      	beq.n	8004a1a <HAL_DMA_Start_IT+0xee>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a5d      	ldr	r2, [pc, #372]	@ (8004b3c <HAL_DMA_Start_IT+0x210>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d027      	beq.n	8004a1a <HAL_DMA_Start_IT+0xee>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a5c      	ldr	r2, [pc, #368]	@ (8004b40 <HAL_DMA_Start_IT+0x214>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d022      	beq.n	8004a1a <HAL_DMA_Start_IT+0xee>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a5a      	ldr	r2, [pc, #360]	@ (8004b44 <HAL_DMA_Start_IT+0x218>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d01d      	beq.n	8004a1a <HAL_DMA_Start_IT+0xee>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a59      	ldr	r2, [pc, #356]	@ (8004b48 <HAL_DMA_Start_IT+0x21c>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d018      	beq.n	8004a1a <HAL_DMA_Start_IT+0xee>
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a57      	ldr	r2, [pc, #348]	@ (8004b4c <HAL_DMA_Start_IT+0x220>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d013      	beq.n	8004a1a <HAL_DMA_Start_IT+0xee>
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a56      	ldr	r2, [pc, #344]	@ (8004b50 <HAL_DMA_Start_IT+0x224>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d00e      	beq.n	8004a1a <HAL_DMA_Start_IT+0xee>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a54      	ldr	r2, [pc, #336]	@ (8004b54 <HAL_DMA_Start_IT+0x228>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d009      	beq.n	8004a1a <HAL_DMA_Start_IT+0xee>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a53      	ldr	r2, [pc, #332]	@ (8004b58 <HAL_DMA_Start_IT+0x22c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d004      	beq.n	8004a1a <HAL_DMA_Start_IT+0xee>
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a51      	ldr	r2, [pc, #324]	@ (8004b5c <HAL_DMA_Start_IT+0x230>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d108      	bne.n	8004a2c <HAL_DMA_Start_IT+0x100>
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f022 0201 	bic.w	r2, r2, #1
 8004a28:	601a      	str	r2, [r3, #0]
 8004a2a:	e007      	b.n	8004a3c <HAL_DMA_Start_IT+0x110>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f022 0201 	bic.w	r2, r2, #1
 8004a3a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	68b9      	ldr	r1, [r7, #8]
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f001 f906 	bl	8005c54 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a34      	ldr	r2, [pc, #208]	@ (8004b20 <HAL_DMA_Start_IT+0x1f4>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d04a      	beq.n	8004ae8 <HAL_DMA_Start_IT+0x1bc>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4a33      	ldr	r2, [pc, #204]	@ (8004b24 <HAL_DMA_Start_IT+0x1f8>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d045      	beq.n	8004ae8 <HAL_DMA_Start_IT+0x1bc>
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a31      	ldr	r2, [pc, #196]	@ (8004b28 <HAL_DMA_Start_IT+0x1fc>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d040      	beq.n	8004ae8 <HAL_DMA_Start_IT+0x1bc>
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a30      	ldr	r2, [pc, #192]	@ (8004b2c <HAL_DMA_Start_IT+0x200>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d03b      	beq.n	8004ae8 <HAL_DMA_Start_IT+0x1bc>
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a2e      	ldr	r2, [pc, #184]	@ (8004b30 <HAL_DMA_Start_IT+0x204>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d036      	beq.n	8004ae8 <HAL_DMA_Start_IT+0x1bc>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a2d      	ldr	r2, [pc, #180]	@ (8004b34 <HAL_DMA_Start_IT+0x208>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d031      	beq.n	8004ae8 <HAL_DMA_Start_IT+0x1bc>
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a2b      	ldr	r2, [pc, #172]	@ (8004b38 <HAL_DMA_Start_IT+0x20c>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d02c      	beq.n	8004ae8 <HAL_DMA_Start_IT+0x1bc>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a2a      	ldr	r2, [pc, #168]	@ (8004b3c <HAL_DMA_Start_IT+0x210>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d027      	beq.n	8004ae8 <HAL_DMA_Start_IT+0x1bc>
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a28      	ldr	r2, [pc, #160]	@ (8004b40 <HAL_DMA_Start_IT+0x214>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d022      	beq.n	8004ae8 <HAL_DMA_Start_IT+0x1bc>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a27      	ldr	r2, [pc, #156]	@ (8004b44 <HAL_DMA_Start_IT+0x218>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d01d      	beq.n	8004ae8 <HAL_DMA_Start_IT+0x1bc>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a25      	ldr	r2, [pc, #148]	@ (8004b48 <HAL_DMA_Start_IT+0x21c>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d018      	beq.n	8004ae8 <HAL_DMA_Start_IT+0x1bc>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a24      	ldr	r2, [pc, #144]	@ (8004b4c <HAL_DMA_Start_IT+0x220>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d013      	beq.n	8004ae8 <HAL_DMA_Start_IT+0x1bc>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a22      	ldr	r2, [pc, #136]	@ (8004b50 <HAL_DMA_Start_IT+0x224>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d00e      	beq.n	8004ae8 <HAL_DMA_Start_IT+0x1bc>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a21      	ldr	r2, [pc, #132]	@ (8004b54 <HAL_DMA_Start_IT+0x228>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d009      	beq.n	8004ae8 <HAL_DMA_Start_IT+0x1bc>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a1f      	ldr	r2, [pc, #124]	@ (8004b58 <HAL_DMA_Start_IT+0x22c>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d004      	beq.n	8004ae8 <HAL_DMA_Start_IT+0x1bc>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a1e      	ldr	r2, [pc, #120]	@ (8004b5c <HAL_DMA_Start_IT+0x230>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d101      	bne.n	8004aec <HAL_DMA_Start_IT+0x1c0>
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e000      	b.n	8004aee <HAL_DMA_Start_IT+0x1c2>
 8004aec:	2300      	movs	r3, #0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d036      	beq.n	8004b60 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f023 021e 	bic.w	r2, r3, #30
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f042 0216 	orr.w	r2, r2, #22
 8004b04:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d03e      	beq.n	8004b8c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f042 0208 	orr.w	r2, r2, #8
 8004b1c:	601a      	str	r2, [r3, #0]
 8004b1e:	e035      	b.n	8004b8c <HAL_DMA_Start_IT+0x260>
 8004b20:	40020010 	.word	0x40020010
 8004b24:	40020028 	.word	0x40020028
 8004b28:	40020040 	.word	0x40020040
 8004b2c:	40020058 	.word	0x40020058
 8004b30:	40020070 	.word	0x40020070
 8004b34:	40020088 	.word	0x40020088
 8004b38:	400200a0 	.word	0x400200a0
 8004b3c:	400200b8 	.word	0x400200b8
 8004b40:	40020410 	.word	0x40020410
 8004b44:	40020428 	.word	0x40020428
 8004b48:	40020440 	.word	0x40020440
 8004b4c:	40020458 	.word	0x40020458
 8004b50:	40020470 	.word	0x40020470
 8004b54:	40020488 	.word	0x40020488
 8004b58:	400204a0 	.word	0x400204a0
 8004b5c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f023 020e 	bic.w	r2, r3, #14
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f042 020a 	orr.w	r2, r2, #10
 8004b72:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d007      	beq.n	8004b8c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0204 	orr.w	r2, r2, #4
 8004b8a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a83      	ldr	r2, [pc, #524]	@ (8004da0 <HAL_DMA_Start_IT+0x474>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d072      	beq.n	8004c7c <HAL_DMA_Start_IT+0x350>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a82      	ldr	r2, [pc, #520]	@ (8004da4 <HAL_DMA_Start_IT+0x478>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d06d      	beq.n	8004c7c <HAL_DMA_Start_IT+0x350>
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a80      	ldr	r2, [pc, #512]	@ (8004da8 <HAL_DMA_Start_IT+0x47c>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d068      	beq.n	8004c7c <HAL_DMA_Start_IT+0x350>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a7f      	ldr	r2, [pc, #508]	@ (8004dac <HAL_DMA_Start_IT+0x480>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d063      	beq.n	8004c7c <HAL_DMA_Start_IT+0x350>
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a7d      	ldr	r2, [pc, #500]	@ (8004db0 <HAL_DMA_Start_IT+0x484>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d05e      	beq.n	8004c7c <HAL_DMA_Start_IT+0x350>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a7c      	ldr	r2, [pc, #496]	@ (8004db4 <HAL_DMA_Start_IT+0x488>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d059      	beq.n	8004c7c <HAL_DMA_Start_IT+0x350>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a7a      	ldr	r2, [pc, #488]	@ (8004db8 <HAL_DMA_Start_IT+0x48c>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d054      	beq.n	8004c7c <HAL_DMA_Start_IT+0x350>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a79      	ldr	r2, [pc, #484]	@ (8004dbc <HAL_DMA_Start_IT+0x490>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d04f      	beq.n	8004c7c <HAL_DMA_Start_IT+0x350>
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a77      	ldr	r2, [pc, #476]	@ (8004dc0 <HAL_DMA_Start_IT+0x494>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d04a      	beq.n	8004c7c <HAL_DMA_Start_IT+0x350>
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a76      	ldr	r2, [pc, #472]	@ (8004dc4 <HAL_DMA_Start_IT+0x498>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d045      	beq.n	8004c7c <HAL_DMA_Start_IT+0x350>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a74      	ldr	r2, [pc, #464]	@ (8004dc8 <HAL_DMA_Start_IT+0x49c>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d040      	beq.n	8004c7c <HAL_DMA_Start_IT+0x350>
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a73      	ldr	r2, [pc, #460]	@ (8004dcc <HAL_DMA_Start_IT+0x4a0>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d03b      	beq.n	8004c7c <HAL_DMA_Start_IT+0x350>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a71      	ldr	r2, [pc, #452]	@ (8004dd0 <HAL_DMA_Start_IT+0x4a4>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d036      	beq.n	8004c7c <HAL_DMA_Start_IT+0x350>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a70      	ldr	r2, [pc, #448]	@ (8004dd4 <HAL_DMA_Start_IT+0x4a8>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d031      	beq.n	8004c7c <HAL_DMA_Start_IT+0x350>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a6e      	ldr	r2, [pc, #440]	@ (8004dd8 <HAL_DMA_Start_IT+0x4ac>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d02c      	beq.n	8004c7c <HAL_DMA_Start_IT+0x350>
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a6d      	ldr	r2, [pc, #436]	@ (8004ddc <HAL_DMA_Start_IT+0x4b0>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d027      	beq.n	8004c7c <HAL_DMA_Start_IT+0x350>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a6b      	ldr	r2, [pc, #428]	@ (8004de0 <HAL_DMA_Start_IT+0x4b4>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d022      	beq.n	8004c7c <HAL_DMA_Start_IT+0x350>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a6a      	ldr	r2, [pc, #424]	@ (8004de4 <HAL_DMA_Start_IT+0x4b8>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d01d      	beq.n	8004c7c <HAL_DMA_Start_IT+0x350>
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a68      	ldr	r2, [pc, #416]	@ (8004de8 <HAL_DMA_Start_IT+0x4bc>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d018      	beq.n	8004c7c <HAL_DMA_Start_IT+0x350>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a67      	ldr	r2, [pc, #412]	@ (8004dec <HAL_DMA_Start_IT+0x4c0>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d013      	beq.n	8004c7c <HAL_DMA_Start_IT+0x350>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a65      	ldr	r2, [pc, #404]	@ (8004df0 <HAL_DMA_Start_IT+0x4c4>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d00e      	beq.n	8004c7c <HAL_DMA_Start_IT+0x350>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a64      	ldr	r2, [pc, #400]	@ (8004df4 <HAL_DMA_Start_IT+0x4c8>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d009      	beq.n	8004c7c <HAL_DMA_Start_IT+0x350>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a62      	ldr	r2, [pc, #392]	@ (8004df8 <HAL_DMA_Start_IT+0x4cc>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d004      	beq.n	8004c7c <HAL_DMA_Start_IT+0x350>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a61      	ldr	r2, [pc, #388]	@ (8004dfc <HAL_DMA_Start_IT+0x4d0>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d101      	bne.n	8004c80 <HAL_DMA_Start_IT+0x354>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	e000      	b.n	8004c82 <HAL_DMA_Start_IT+0x356>
 8004c80:	2300      	movs	r3, #0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d01a      	beq.n	8004cbc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d007      	beq.n	8004ca4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c9e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ca2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d007      	beq.n	8004cbc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004cb6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cba:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a37      	ldr	r2, [pc, #220]	@ (8004da0 <HAL_DMA_Start_IT+0x474>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d04a      	beq.n	8004d5c <HAL_DMA_Start_IT+0x430>
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a36      	ldr	r2, [pc, #216]	@ (8004da4 <HAL_DMA_Start_IT+0x478>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d045      	beq.n	8004d5c <HAL_DMA_Start_IT+0x430>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a34      	ldr	r2, [pc, #208]	@ (8004da8 <HAL_DMA_Start_IT+0x47c>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d040      	beq.n	8004d5c <HAL_DMA_Start_IT+0x430>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a33      	ldr	r2, [pc, #204]	@ (8004dac <HAL_DMA_Start_IT+0x480>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d03b      	beq.n	8004d5c <HAL_DMA_Start_IT+0x430>
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a31      	ldr	r2, [pc, #196]	@ (8004db0 <HAL_DMA_Start_IT+0x484>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d036      	beq.n	8004d5c <HAL_DMA_Start_IT+0x430>
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a30      	ldr	r2, [pc, #192]	@ (8004db4 <HAL_DMA_Start_IT+0x488>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d031      	beq.n	8004d5c <HAL_DMA_Start_IT+0x430>
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a2e      	ldr	r2, [pc, #184]	@ (8004db8 <HAL_DMA_Start_IT+0x48c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d02c      	beq.n	8004d5c <HAL_DMA_Start_IT+0x430>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a2d      	ldr	r2, [pc, #180]	@ (8004dbc <HAL_DMA_Start_IT+0x490>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d027      	beq.n	8004d5c <HAL_DMA_Start_IT+0x430>
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a2b      	ldr	r2, [pc, #172]	@ (8004dc0 <HAL_DMA_Start_IT+0x494>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d022      	beq.n	8004d5c <HAL_DMA_Start_IT+0x430>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a2a      	ldr	r2, [pc, #168]	@ (8004dc4 <HAL_DMA_Start_IT+0x498>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d01d      	beq.n	8004d5c <HAL_DMA_Start_IT+0x430>
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a28      	ldr	r2, [pc, #160]	@ (8004dc8 <HAL_DMA_Start_IT+0x49c>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d018      	beq.n	8004d5c <HAL_DMA_Start_IT+0x430>
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a27      	ldr	r2, [pc, #156]	@ (8004dcc <HAL_DMA_Start_IT+0x4a0>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d013      	beq.n	8004d5c <HAL_DMA_Start_IT+0x430>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a25      	ldr	r2, [pc, #148]	@ (8004dd0 <HAL_DMA_Start_IT+0x4a4>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d00e      	beq.n	8004d5c <HAL_DMA_Start_IT+0x430>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a24      	ldr	r2, [pc, #144]	@ (8004dd4 <HAL_DMA_Start_IT+0x4a8>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d009      	beq.n	8004d5c <HAL_DMA_Start_IT+0x430>
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a22      	ldr	r2, [pc, #136]	@ (8004dd8 <HAL_DMA_Start_IT+0x4ac>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d004      	beq.n	8004d5c <HAL_DMA_Start_IT+0x430>
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a21      	ldr	r2, [pc, #132]	@ (8004ddc <HAL_DMA_Start_IT+0x4b0>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d108      	bne.n	8004d6e <HAL_DMA_Start_IT+0x442>
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	681a      	ldr	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f042 0201 	orr.w	r2, r2, #1
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	e012      	b.n	8004d94 <HAL_DMA_Start_IT+0x468>
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f042 0201 	orr.w	r2, r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	e009      	b.n	8004d94 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004d86:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004d94:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3718      	adds	r7, #24
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	40020010 	.word	0x40020010
 8004da4:	40020028 	.word	0x40020028
 8004da8:	40020040 	.word	0x40020040
 8004dac:	40020058 	.word	0x40020058
 8004db0:	40020070 	.word	0x40020070
 8004db4:	40020088 	.word	0x40020088
 8004db8:	400200a0 	.word	0x400200a0
 8004dbc:	400200b8 	.word	0x400200b8
 8004dc0:	40020410 	.word	0x40020410
 8004dc4:	40020428 	.word	0x40020428
 8004dc8:	40020440 	.word	0x40020440
 8004dcc:	40020458 	.word	0x40020458
 8004dd0:	40020470 	.word	0x40020470
 8004dd4:	40020488 	.word	0x40020488
 8004dd8:	400204a0 	.word	0x400204a0
 8004ddc:	400204b8 	.word	0x400204b8
 8004de0:	58025408 	.word	0x58025408
 8004de4:	5802541c 	.word	0x5802541c
 8004de8:	58025430 	.word	0x58025430
 8004dec:	58025444 	.word	0x58025444
 8004df0:	58025458 	.word	0x58025458
 8004df4:	5802546c 	.word	0x5802546c
 8004df8:	58025480 	.word	0x58025480
 8004dfc:	58025494 	.word	0x58025494

08004e00 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	b08a      	sub	sp, #40	@ 0x28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004e0c:	4b67      	ldr	r3, [pc, #412]	@ (8004fac <HAL_DMA_IRQHandler+0x1ac>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	4a67      	ldr	r2, [pc, #412]	@ (8004fb0 <HAL_DMA_IRQHandler+0x1b0>)
 8004e12:	fba2 2303 	umull	r2, r3, r2, r3
 8004e16:	0a9b      	lsrs	r3, r3, #10
 8004e18:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e1e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e24:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004e26:	6a3b      	ldr	r3, [r7, #32]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a5f      	ldr	r2, [pc, #380]	@ (8004fb4 <HAL_DMA_IRQHandler+0x1b4>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d04a      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0xd2>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a5d      	ldr	r2, [pc, #372]	@ (8004fb8 <HAL_DMA_IRQHandler+0x1b8>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d045      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0xd2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a5c      	ldr	r2, [pc, #368]	@ (8004fbc <HAL_DMA_IRQHandler+0x1bc>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d040      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0xd2>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a5a      	ldr	r2, [pc, #360]	@ (8004fc0 <HAL_DMA_IRQHandler+0x1c0>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d03b      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0xd2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a59      	ldr	r2, [pc, #356]	@ (8004fc4 <HAL_DMA_IRQHandler+0x1c4>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d036      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0xd2>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a57      	ldr	r2, [pc, #348]	@ (8004fc8 <HAL_DMA_IRQHandler+0x1c8>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d031      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0xd2>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a56      	ldr	r2, [pc, #344]	@ (8004fcc <HAL_DMA_IRQHandler+0x1cc>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d02c      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0xd2>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	4a54      	ldr	r2, [pc, #336]	@ (8004fd0 <HAL_DMA_IRQHandler+0x1d0>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d027      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0xd2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a53      	ldr	r2, [pc, #332]	@ (8004fd4 <HAL_DMA_IRQHandler+0x1d4>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d022      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0xd2>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a51      	ldr	r2, [pc, #324]	@ (8004fd8 <HAL_DMA_IRQHandler+0x1d8>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d01d      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0xd2>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a50      	ldr	r2, [pc, #320]	@ (8004fdc <HAL_DMA_IRQHandler+0x1dc>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d018      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0xd2>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a4e      	ldr	r2, [pc, #312]	@ (8004fe0 <HAL_DMA_IRQHandler+0x1e0>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d013      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0xd2>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a4d      	ldr	r2, [pc, #308]	@ (8004fe4 <HAL_DMA_IRQHandler+0x1e4>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d00e      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0xd2>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a4b      	ldr	r2, [pc, #300]	@ (8004fe8 <HAL_DMA_IRQHandler+0x1e8>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d009      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0xd2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a4a      	ldr	r2, [pc, #296]	@ (8004fec <HAL_DMA_IRQHandler+0x1ec>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d004      	beq.n	8004ed2 <HAL_DMA_IRQHandler+0xd2>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a48      	ldr	r2, [pc, #288]	@ (8004ff0 <HAL_DMA_IRQHandler+0x1f0>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d101      	bne.n	8004ed6 <HAL_DMA_IRQHandler+0xd6>
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e000      	b.n	8004ed8 <HAL_DMA_IRQHandler+0xd8>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 842b 	beq.w	8005734 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ee2:	f003 031f 	and.w	r3, r3, #31
 8004ee6:	2208      	movs	r2, #8
 8004ee8:	409a      	lsls	r2, r3
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	4013      	ands	r3, r2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f000 80a2 	beq.w	8005038 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a2e      	ldr	r2, [pc, #184]	@ (8004fb4 <HAL_DMA_IRQHandler+0x1b4>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d04a      	beq.n	8004f94 <HAL_DMA_IRQHandler+0x194>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a2d      	ldr	r2, [pc, #180]	@ (8004fb8 <HAL_DMA_IRQHandler+0x1b8>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d045      	beq.n	8004f94 <HAL_DMA_IRQHandler+0x194>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a2b      	ldr	r2, [pc, #172]	@ (8004fbc <HAL_DMA_IRQHandler+0x1bc>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d040      	beq.n	8004f94 <HAL_DMA_IRQHandler+0x194>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a2a      	ldr	r2, [pc, #168]	@ (8004fc0 <HAL_DMA_IRQHandler+0x1c0>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d03b      	beq.n	8004f94 <HAL_DMA_IRQHandler+0x194>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a28      	ldr	r2, [pc, #160]	@ (8004fc4 <HAL_DMA_IRQHandler+0x1c4>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d036      	beq.n	8004f94 <HAL_DMA_IRQHandler+0x194>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a27      	ldr	r2, [pc, #156]	@ (8004fc8 <HAL_DMA_IRQHandler+0x1c8>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d031      	beq.n	8004f94 <HAL_DMA_IRQHandler+0x194>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a25      	ldr	r2, [pc, #148]	@ (8004fcc <HAL_DMA_IRQHandler+0x1cc>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d02c      	beq.n	8004f94 <HAL_DMA_IRQHandler+0x194>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a24      	ldr	r2, [pc, #144]	@ (8004fd0 <HAL_DMA_IRQHandler+0x1d0>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d027      	beq.n	8004f94 <HAL_DMA_IRQHandler+0x194>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a22      	ldr	r2, [pc, #136]	@ (8004fd4 <HAL_DMA_IRQHandler+0x1d4>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d022      	beq.n	8004f94 <HAL_DMA_IRQHandler+0x194>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a21      	ldr	r2, [pc, #132]	@ (8004fd8 <HAL_DMA_IRQHandler+0x1d8>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d01d      	beq.n	8004f94 <HAL_DMA_IRQHandler+0x194>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a1f      	ldr	r2, [pc, #124]	@ (8004fdc <HAL_DMA_IRQHandler+0x1dc>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d018      	beq.n	8004f94 <HAL_DMA_IRQHandler+0x194>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a1e      	ldr	r2, [pc, #120]	@ (8004fe0 <HAL_DMA_IRQHandler+0x1e0>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d013      	beq.n	8004f94 <HAL_DMA_IRQHandler+0x194>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a1c      	ldr	r2, [pc, #112]	@ (8004fe4 <HAL_DMA_IRQHandler+0x1e4>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d00e      	beq.n	8004f94 <HAL_DMA_IRQHandler+0x194>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a1b      	ldr	r2, [pc, #108]	@ (8004fe8 <HAL_DMA_IRQHandler+0x1e8>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d009      	beq.n	8004f94 <HAL_DMA_IRQHandler+0x194>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a19      	ldr	r2, [pc, #100]	@ (8004fec <HAL_DMA_IRQHandler+0x1ec>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d004      	beq.n	8004f94 <HAL_DMA_IRQHandler+0x194>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a18      	ldr	r2, [pc, #96]	@ (8004ff0 <HAL_DMA_IRQHandler+0x1f0>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d12f      	bne.n	8004ff4 <HAL_DMA_IRQHandler+0x1f4>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0304 	and.w	r3, r3, #4
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	bf14      	ite	ne
 8004fa2:	2301      	movne	r3, #1
 8004fa4:	2300      	moveq	r3, #0
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	e02e      	b.n	8005008 <HAL_DMA_IRQHandler+0x208>
 8004faa:	bf00      	nop
 8004fac:	24000000 	.word	0x24000000
 8004fb0:	1b4e81b5 	.word	0x1b4e81b5
 8004fb4:	40020010 	.word	0x40020010
 8004fb8:	40020028 	.word	0x40020028
 8004fbc:	40020040 	.word	0x40020040
 8004fc0:	40020058 	.word	0x40020058
 8004fc4:	40020070 	.word	0x40020070
 8004fc8:	40020088 	.word	0x40020088
 8004fcc:	400200a0 	.word	0x400200a0
 8004fd0:	400200b8 	.word	0x400200b8
 8004fd4:	40020410 	.word	0x40020410
 8004fd8:	40020428 	.word	0x40020428
 8004fdc:	40020440 	.word	0x40020440
 8004fe0:	40020458 	.word	0x40020458
 8004fe4:	40020470 	.word	0x40020470
 8004fe8:	40020488 	.word	0x40020488
 8004fec:	400204a0 	.word	0x400204a0
 8004ff0:	400204b8 	.word	0x400204b8
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0308 	and.w	r3, r3, #8
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	bf14      	ite	ne
 8005002:	2301      	movne	r3, #1
 8005004:	2300      	moveq	r3, #0
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b00      	cmp	r3, #0
 800500a:	d015      	beq.n	8005038 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 0204 	bic.w	r2, r2, #4
 800501a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005020:	f003 031f 	and.w	r3, r3, #31
 8005024:	2208      	movs	r2, #8
 8005026:	409a      	lsls	r2, r3
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005030:	f043 0201 	orr.w	r2, r3, #1
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800503c:	f003 031f 	and.w	r3, r3, #31
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	fa22 f303 	lsr.w	r3, r2, r3
 8005046:	f003 0301 	and.w	r3, r3, #1
 800504a:	2b00      	cmp	r3, #0
 800504c:	d06e      	beq.n	800512c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a69      	ldr	r2, [pc, #420]	@ (80051f8 <HAL_DMA_IRQHandler+0x3f8>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d04a      	beq.n	80050ee <HAL_DMA_IRQHandler+0x2ee>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a67      	ldr	r2, [pc, #412]	@ (80051fc <HAL_DMA_IRQHandler+0x3fc>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d045      	beq.n	80050ee <HAL_DMA_IRQHandler+0x2ee>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a66      	ldr	r2, [pc, #408]	@ (8005200 <HAL_DMA_IRQHandler+0x400>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d040      	beq.n	80050ee <HAL_DMA_IRQHandler+0x2ee>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a64      	ldr	r2, [pc, #400]	@ (8005204 <HAL_DMA_IRQHandler+0x404>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d03b      	beq.n	80050ee <HAL_DMA_IRQHandler+0x2ee>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a63      	ldr	r2, [pc, #396]	@ (8005208 <HAL_DMA_IRQHandler+0x408>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d036      	beq.n	80050ee <HAL_DMA_IRQHandler+0x2ee>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a61      	ldr	r2, [pc, #388]	@ (800520c <HAL_DMA_IRQHandler+0x40c>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d031      	beq.n	80050ee <HAL_DMA_IRQHandler+0x2ee>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a60      	ldr	r2, [pc, #384]	@ (8005210 <HAL_DMA_IRQHandler+0x410>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d02c      	beq.n	80050ee <HAL_DMA_IRQHandler+0x2ee>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a5e      	ldr	r2, [pc, #376]	@ (8005214 <HAL_DMA_IRQHandler+0x414>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d027      	beq.n	80050ee <HAL_DMA_IRQHandler+0x2ee>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a5d      	ldr	r2, [pc, #372]	@ (8005218 <HAL_DMA_IRQHandler+0x418>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d022      	beq.n	80050ee <HAL_DMA_IRQHandler+0x2ee>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a5b      	ldr	r2, [pc, #364]	@ (800521c <HAL_DMA_IRQHandler+0x41c>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d01d      	beq.n	80050ee <HAL_DMA_IRQHandler+0x2ee>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a5a      	ldr	r2, [pc, #360]	@ (8005220 <HAL_DMA_IRQHandler+0x420>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d018      	beq.n	80050ee <HAL_DMA_IRQHandler+0x2ee>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a58      	ldr	r2, [pc, #352]	@ (8005224 <HAL_DMA_IRQHandler+0x424>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d013      	beq.n	80050ee <HAL_DMA_IRQHandler+0x2ee>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a57      	ldr	r2, [pc, #348]	@ (8005228 <HAL_DMA_IRQHandler+0x428>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d00e      	beq.n	80050ee <HAL_DMA_IRQHandler+0x2ee>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4a55      	ldr	r2, [pc, #340]	@ (800522c <HAL_DMA_IRQHandler+0x42c>)
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d009      	beq.n	80050ee <HAL_DMA_IRQHandler+0x2ee>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a54      	ldr	r2, [pc, #336]	@ (8005230 <HAL_DMA_IRQHandler+0x430>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d004      	beq.n	80050ee <HAL_DMA_IRQHandler+0x2ee>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a52      	ldr	r2, [pc, #328]	@ (8005234 <HAL_DMA_IRQHandler+0x434>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d10a      	bne.n	8005104 <HAL_DMA_IRQHandler+0x304>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	bf14      	ite	ne
 80050fc:	2301      	movne	r3, #1
 80050fe:	2300      	moveq	r3, #0
 8005100:	b2db      	uxtb	r3, r3
 8005102:	e003      	b.n	800510c <HAL_DMA_IRQHandler+0x30c>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2300      	movs	r3, #0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00d      	beq.n	800512c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005114:	f003 031f 	and.w	r3, r3, #31
 8005118:	2201      	movs	r2, #1
 800511a:	409a      	lsls	r2, r3
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005124:	f043 0202 	orr.w	r2, r3, #2
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005130:	f003 031f 	and.w	r3, r3, #31
 8005134:	2204      	movs	r2, #4
 8005136:	409a      	lsls	r2, r3
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	4013      	ands	r3, r2
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 808f 	beq.w	8005260 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a2c      	ldr	r2, [pc, #176]	@ (80051f8 <HAL_DMA_IRQHandler+0x3f8>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d04a      	beq.n	80051e2 <HAL_DMA_IRQHandler+0x3e2>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a2a      	ldr	r2, [pc, #168]	@ (80051fc <HAL_DMA_IRQHandler+0x3fc>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d045      	beq.n	80051e2 <HAL_DMA_IRQHandler+0x3e2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a29      	ldr	r2, [pc, #164]	@ (8005200 <HAL_DMA_IRQHandler+0x400>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d040      	beq.n	80051e2 <HAL_DMA_IRQHandler+0x3e2>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a27      	ldr	r2, [pc, #156]	@ (8005204 <HAL_DMA_IRQHandler+0x404>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d03b      	beq.n	80051e2 <HAL_DMA_IRQHandler+0x3e2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a26      	ldr	r2, [pc, #152]	@ (8005208 <HAL_DMA_IRQHandler+0x408>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d036      	beq.n	80051e2 <HAL_DMA_IRQHandler+0x3e2>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a24      	ldr	r2, [pc, #144]	@ (800520c <HAL_DMA_IRQHandler+0x40c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d031      	beq.n	80051e2 <HAL_DMA_IRQHandler+0x3e2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a23      	ldr	r2, [pc, #140]	@ (8005210 <HAL_DMA_IRQHandler+0x410>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d02c      	beq.n	80051e2 <HAL_DMA_IRQHandler+0x3e2>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a21      	ldr	r2, [pc, #132]	@ (8005214 <HAL_DMA_IRQHandler+0x414>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d027      	beq.n	80051e2 <HAL_DMA_IRQHandler+0x3e2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a20      	ldr	r2, [pc, #128]	@ (8005218 <HAL_DMA_IRQHandler+0x418>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d022      	beq.n	80051e2 <HAL_DMA_IRQHandler+0x3e2>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a1e      	ldr	r2, [pc, #120]	@ (800521c <HAL_DMA_IRQHandler+0x41c>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d01d      	beq.n	80051e2 <HAL_DMA_IRQHandler+0x3e2>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a1d      	ldr	r2, [pc, #116]	@ (8005220 <HAL_DMA_IRQHandler+0x420>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d018      	beq.n	80051e2 <HAL_DMA_IRQHandler+0x3e2>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a1b      	ldr	r2, [pc, #108]	@ (8005224 <HAL_DMA_IRQHandler+0x424>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d013      	beq.n	80051e2 <HAL_DMA_IRQHandler+0x3e2>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a1a      	ldr	r2, [pc, #104]	@ (8005228 <HAL_DMA_IRQHandler+0x428>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d00e      	beq.n	80051e2 <HAL_DMA_IRQHandler+0x3e2>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a18      	ldr	r2, [pc, #96]	@ (800522c <HAL_DMA_IRQHandler+0x42c>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d009      	beq.n	80051e2 <HAL_DMA_IRQHandler+0x3e2>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a17      	ldr	r2, [pc, #92]	@ (8005230 <HAL_DMA_IRQHandler+0x430>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d004      	beq.n	80051e2 <HAL_DMA_IRQHandler+0x3e2>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a15      	ldr	r2, [pc, #84]	@ (8005234 <HAL_DMA_IRQHandler+0x434>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d12a      	bne.n	8005238 <HAL_DMA_IRQHandler+0x438>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	bf14      	ite	ne
 80051f0:	2301      	movne	r3, #1
 80051f2:	2300      	moveq	r3, #0
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	e023      	b.n	8005240 <HAL_DMA_IRQHandler+0x440>
 80051f8:	40020010 	.word	0x40020010
 80051fc:	40020028 	.word	0x40020028
 8005200:	40020040 	.word	0x40020040
 8005204:	40020058 	.word	0x40020058
 8005208:	40020070 	.word	0x40020070
 800520c:	40020088 	.word	0x40020088
 8005210:	400200a0 	.word	0x400200a0
 8005214:	400200b8 	.word	0x400200b8
 8005218:	40020410 	.word	0x40020410
 800521c:	40020428 	.word	0x40020428
 8005220:	40020440 	.word	0x40020440
 8005224:	40020458 	.word	0x40020458
 8005228:	40020470 	.word	0x40020470
 800522c:	40020488 	.word	0x40020488
 8005230:	400204a0 	.word	0x400204a0
 8005234:	400204b8 	.word	0x400204b8
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2300      	movs	r3, #0
 8005240:	2b00      	cmp	r3, #0
 8005242:	d00d      	beq.n	8005260 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005248:	f003 031f 	and.w	r3, r3, #31
 800524c:	2204      	movs	r2, #4
 800524e:	409a      	lsls	r2, r3
 8005250:	6a3b      	ldr	r3, [r7, #32]
 8005252:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005258:	f043 0204 	orr.w	r2, r3, #4
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005264:	f003 031f 	and.w	r3, r3, #31
 8005268:	2210      	movs	r2, #16
 800526a:	409a      	lsls	r2, r3
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	4013      	ands	r3, r2
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 80a6 	beq.w	80053c2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a85      	ldr	r2, [pc, #532]	@ (8005490 <HAL_DMA_IRQHandler+0x690>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d04a      	beq.n	8005316 <HAL_DMA_IRQHandler+0x516>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a83      	ldr	r2, [pc, #524]	@ (8005494 <HAL_DMA_IRQHandler+0x694>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d045      	beq.n	8005316 <HAL_DMA_IRQHandler+0x516>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a82      	ldr	r2, [pc, #520]	@ (8005498 <HAL_DMA_IRQHandler+0x698>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d040      	beq.n	8005316 <HAL_DMA_IRQHandler+0x516>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a80      	ldr	r2, [pc, #512]	@ (800549c <HAL_DMA_IRQHandler+0x69c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d03b      	beq.n	8005316 <HAL_DMA_IRQHandler+0x516>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a7f      	ldr	r2, [pc, #508]	@ (80054a0 <HAL_DMA_IRQHandler+0x6a0>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d036      	beq.n	8005316 <HAL_DMA_IRQHandler+0x516>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a7d      	ldr	r2, [pc, #500]	@ (80054a4 <HAL_DMA_IRQHandler+0x6a4>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d031      	beq.n	8005316 <HAL_DMA_IRQHandler+0x516>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a7c      	ldr	r2, [pc, #496]	@ (80054a8 <HAL_DMA_IRQHandler+0x6a8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d02c      	beq.n	8005316 <HAL_DMA_IRQHandler+0x516>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a7a      	ldr	r2, [pc, #488]	@ (80054ac <HAL_DMA_IRQHandler+0x6ac>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d027      	beq.n	8005316 <HAL_DMA_IRQHandler+0x516>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a79      	ldr	r2, [pc, #484]	@ (80054b0 <HAL_DMA_IRQHandler+0x6b0>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d022      	beq.n	8005316 <HAL_DMA_IRQHandler+0x516>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a77      	ldr	r2, [pc, #476]	@ (80054b4 <HAL_DMA_IRQHandler+0x6b4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d01d      	beq.n	8005316 <HAL_DMA_IRQHandler+0x516>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a76      	ldr	r2, [pc, #472]	@ (80054b8 <HAL_DMA_IRQHandler+0x6b8>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d018      	beq.n	8005316 <HAL_DMA_IRQHandler+0x516>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a74      	ldr	r2, [pc, #464]	@ (80054bc <HAL_DMA_IRQHandler+0x6bc>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d013      	beq.n	8005316 <HAL_DMA_IRQHandler+0x516>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a73      	ldr	r2, [pc, #460]	@ (80054c0 <HAL_DMA_IRQHandler+0x6c0>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d00e      	beq.n	8005316 <HAL_DMA_IRQHandler+0x516>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a71      	ldr	r2, [pc, #452]	@ (80054c4 <HAL_DMA_IRQHandler+0x6c4>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d009      	beq.n	8005316 <HAL_DMA_IRQHandler+0x516>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a70      	ldr	r2, [pc, #448]	@ (80054c8 <HAL_DMA_IRQHandler+0x6c8>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d004      	beq.n	8005316 <HAL_DMA_IRQHandler+0x516>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a6e      	ldr	r2, [pc, #440]	@ (80054cc <HAL_DMA_IRQHandler+0x6cc>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d10a      	bne.n	800532c <HAL_DMA_IRQHandler+0x52c>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f003 0308 	and.w	r3, r3, #8
 8005320:	2b00      	cmp	r3, #0
 8005322:	bf14      	ite	ne
 8005324:	2301      	movne	r3, #1
 8005326:	2300      	moveq	r3, #0
 8005328:	b2db      	uxtb	r3, r3
 800532a:	e009      	b.n	8005340 <HAL_DMA_IRQHandler+0x540>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 0304 	and.w	r3, r3, #4
 8005336:	2b00      	cmp	r3, #0
 8005338:	bf14      	ite	ne
 800533a:	2301      	movne	r3, #1
 800533c:	2300      	moveq	r3, #0
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d03e      	beq.n	80053c2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005348:	f003 031f 	and.w	r3, r3, #31
 800534c:	2210      	movs	r2, #16
 800534e:	409a      	lsls	r2, r3
 8005350:	6a3b      	ldr	r3, [r7, #32]
 8005352:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d018      	beq.n	8005394 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d108      	bne.n	8005382 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005374:	2b00      	cmp	r3, #0
 8005376:	d024      	beq.n	80053c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	4798      	blx	r3
 8005380:	e01f      	b.n	80053c2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005386:	2b00      	cmp	r3, #0
 8005388:	d01b      	beq.n	80053c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800538e:	6878      	ldr	r0, [r7, #4]
 8005390:	4798      	blx	r3
 8005392:	e016      	b.n	80053c2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d107      	bne.n	80053b2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 0208 	bic.w	r2, r2, #8
 80053b0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80053c6:	f003 031f 	and.w	r3, r3, #31
 80053ca:	2220      	movs	r2, #32
 80053cc:	409a      	lsls	r2, r3
 80053ce:	69bb      	ldr	r3, [r7, #24]
 80053d0:	4013      	ands	r3, r2
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 8110 	beq.w	80055f8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a2c      	ldr	r2, [pc, #176]	@ (8005490 <HAL_DMA_IRQHandler+0x690>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d04a      	beq.n	8005478 <HAL_DMA_IRQHandler+0x678>
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a2b      	ldr	r2, [pc, #172]	@ (8005494 <HAL_DMA_IRQHandler+0x694>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d045      	beq.n	8005478 <HAL_DMA_IRQHandler+0x678>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a29      	ldr	r2, [pc, #164]	@ (8005498 <HAL_DMA_IRQHandler+0x698>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d040      	beq.n	8005478 <HAL_DMA_IRQHandler+0x678>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a28      	ldr	r2, [pc, #160]	@ (800549c <HAL_DMA_IRQHandler+0x69c>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d03b      	beq.n	8005478 <HAL_DMA_IRQHandler+0x678>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a26      	ldr	r2, [pc, #152]	@ (80054a0 <HAL_DMA_IRQHandler+0x6a0>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d036      	beq.n	8005478 <HAL_DMA_IRQHandler+0x678>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a25      	ldr	r2, [pc, #148]	@ (80054a4 <HAL_DMA_IRQHandler+0x6a4>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d031      	beq.n	8005478 <HAL_DMA_IRQHandler+0x678>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a23      	ldr	r2, [pc, #140]	@ (80054a8 <HAL_DMA_IRQHandler+0x6a8>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d02c      	beq.n	8005478 <HAL_DMA_IRQHandler+0x678>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a22      	ldr	r2, [pc, #136]	@ (80054ac <HAL_DMA_IRQHandler+0x6ac>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d027      	beq.n	8005478 <HAL_DMA_IRQHandler+0x678>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a20      	ldr	r2, [pc, #128]	@ (80054b0 <HAL_DMA_IRQHandler+0x6b0>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d022      	beq.n	8005478 <HAL_DMA_IRQHandler+0x678>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a1f      	ldr	r2, [pc, #124]	@ (80054b4 <HAL_DMA_IRQHandler+0x6b4>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d01d      	beq.n	8005478 <HAL_DMA_IRQHandler+0x678>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a1d      	ldr	r2, [pc, #116]	@ (80054b8 <HAL_DMA_IRQHandler+0x6b8>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d018      	beq.n	8005478 <HAL_DMA_IRQHandler+0x678>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a1c      	ldr	r2, [pc, #112]	@ (80054bc <HAL_DMA_IRQHandler+0x6bc>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d013      	beq.n	8005478 <HAL_DMA_IRQHandler+0x678>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a1a      	ldr	r2, [pc, #104]	@ (80054c0 <HAL_DMA_IRQHandler+0x6c0>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d00e      	beq.n	8005478 <HAL_DMA_IRQHandler+0x678>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a19      	ldr	r2, [pc, #100]	@ (80054c4 <HAL_DMA_IRQHandler+0x6c4>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d009      	beq.n	8005478 <HAL_DMA_IRQHandler+0x678>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a17      	ldr	r2, [pc, #92]	@ (80054c8 <HAL_DMA_IRQHandler+0x6c8>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d004      	beq.n	8005478 <HAL_DMA_IRQHandler+0x678>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a16      	ldr	r2, [pc, #88]	@ (80054cc <HAL_DMA_IRQHandler+0x6cc>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d12b      	bne.n	80054d0 <HAL_DMA_IRQHandler+0x6d0>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0310 	and.w	r3, r3, #16
 8005482:	2b00      	cmp	r3, #0
 8005484:	bf14      	ite	ne
 8005486:	2301      	movne	r3, #1
 8005488:	2300      	moveq	r3, #0
 800548a:	b2db      	uxtb	r3, r3
 800548c:	e02a      	b.n	80054e4 <HAL_DMA_IRQHandler+0x6e4>
 800548e:	bf00      	nop
 8005490:	40020010 	.word	0x40020010
 8005494:	40020028 	.word	0x40020028
 8005498:	40020040 	.word	0x40020040
 800549c:	40020058 	.word	0x40020058
 80054a0:	40020070 	.word	0x40020070
 80054a4:	40020088 	.word	0x40020088
 80054a8:	400200a0 	.word	0x400200a0
 80054ac:	400200b8 	.word	0x400200b8
 80054b0:	40020410 	.word	0x40020410
 80054b4:	40020428 	.word	0x40020428
 80054b8:	40020440 	.word	0x40020440
 80054bc:	40020458 	.word	0x40020458
 80054c0:	40020470 	.word	0x40020470
 80054c4:	40020488 	.word	0x40020488
 80054c8:	400204a0 	.word	0x400204a0
 80054cc:	400204b8 	.word	0x400204b8
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b00      	cmp	r3, #0
 80054dc:	bf14      	ite	ne
 80054de:	2301      	movne	r3, #1
 80054e0:	2300      	moveq	r3, #0
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 8087 	beq.w	80055f8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80054ee:	f003 031f 	and.w	r3, r3, #31
 80054f2:	2220      	movs	r2, #32
 80054f4:	409a      	lsls	r2, r3
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005500:	b2db      	uxtb	r3, r3
 8005502:	2b04      	cmp	r3, #4
 8005504:	d139      	bne.n	800557a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f022 0216 	bic.w	r2, r2, #22
 8005514:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	695a      	ldr	r2, [r3, #20]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005524:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552a:	2b00      	cmp	r3, #0
 800552c:	d103      	bne.n	8005536 <HAL_DMA_IRQHandler+0x736>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005532:	2b00      	cmp	r3, #0
 8005534:	d007      	beq.n	8005546 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f022 0208 	bic.w	r2, r2, #8
 8005544:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800554a:	f003 031f 	and.w	r3, r3, #31
 800554e:	223f      	movs	r2, #63	@ 0x3f
 8005550:	409a      	lsls	r2, r3
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2201      	movs	r2, #1
 800555a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800556a:	2b00      	cmp	r3, #0
 800556c:	f000 834a 	beq.w	8005c04 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	4798      	blx	r3
          }
          return;
 8005578:	e344      	b.n	8005c04 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d018      	beq.n	80055ba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005592:	2b00      	cmp	r3, #0
 8005594:	d108      	bne.n	80055a8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800559a:	2b00      	cmp	r3, #0
 800559c:	d02c      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	4798      	blx	r3
 80055a6:	e027      	b.n	80055f8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d023      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	4798      	blx	r3
 80055b8:	e01e      	b.n	80055f8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10f      	bne.n	80055e8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 0210 	bic.w	r2, r2, #16
 80055d6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2201      	movs	r2, #1
 80055dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d003      	beq.n	80055f8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	f000 8306 	beq.w	8005c0e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005606:	f003 0301 	and.w	r3, r3, #1
 800560a:	2b00      	cmp	r3, #0
 800560c:	f000 8088 	beq.w	8005720 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2204      	movs	r2, #4
 8005614:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a7a      	ldr	r2, [pc, #488]	@ (8005808 <HAL_DMA_IRQHandler+0xa08>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d04a      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x8b8>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a79      	ldr	r2, [pc, #484]	@ (800580c <HAL_DMA_IRQHandler+0xa0c>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d045      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x8b8>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a77      	ldr	r2, [pc, #476]	@ (8005810 <HAL_DMA_IRQHandler+0xa10>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d040      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x8b8>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a76      	ldr	r2, [pc, #472]	@ (8005814 <HAL_DMA_IRQHandler+0xa14>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d03b      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x8b8>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a74      	ldr	r2, [pc, #464]	@ (8005818 <HAL_DMA_IRQHandler+0xa18>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d036      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x8b8>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a73      	ldr	r2, [pc, #460]	@ (800581c <HAL_DMA_IRQHandler+0xa1c>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d031      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x8b8>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a71      	ldr	r2, [pc, #452]	@ (8005820 <HAL_DMA_IRQHandler+0xa20>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d02c      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x8b8>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a70      	ldr	r2, [pc, #448]	@ (8005824 <HAL_DMA_IRQHandler+0xa24>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d027      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x8b8>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a6e      	ldr	r2, [pc, #440]	@ (8005828 <HAL_DMA_IRQHandler+0xa28>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d022      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x8b8>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a6d      	ldr	r2, [pc, #436]	@ (800582c <HAL_DMA_IRQHandler+0xa2c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d01d      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x8b8>
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a6b      	ldr	r2, [pc, #428]	@ (8005830 <HAL_DMA_IRQHandler+0xa30>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d018      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x8b8>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a6a      	ldr	r2, [pc, #424]	@ (8005834 <HAL_DMA_IRQHandler+0xa34>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d013      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x8b8>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a68      	ldr	r2, [pc, #416]	@ (8005838 <HAL_DMA_IRQHandler+0xa38>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d00e      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x8b8>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a67      	ldr	r2, [pc, #412]	@ (800583c <HAL_DMA_IRQHandler+0xa3c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d009      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x8b8>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a65      	ldr	r2, [pc, #404]	@ (8005840 <HAL_DMA_IRQHandler+0xa40>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d004      	beq.n	80056b8 <HAL_DMA_IRQHandler+0x8b8>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a64      	ldr	r2, [pc, #400]	@ (8005844 <HAL_DMA_IRQHandler+0xa44>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d108      	bne.n	80056ca <HAL_DMA_IRQHandler+0x8ca>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f022 0201 	bic.w	r2, r2, #1
 80056c6:	601a      	str	r2, [r3, #0]
 80056c8:	e007      	b.n	80056da <HAL_DMA_IRQHandler+0x8da>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f022 0201 	bic.w	r2, r2, #1
 80056d8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	3301      	adds	r3, #1
 80056de:	60fb      	str	r3, [r7, #12]
 80056e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d307      	bcc.n	80056f6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1f2      	bne.n	80056da <HAL_DMA_IRQHandler+0x8da>
 80056f4:	e000      	b.n	80056f8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80056f6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d004      	beq.n	8005710 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2203      	movs	r2, #3
 800570a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800570e:	e003      	b.n	8005718 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 8272 	beq.w	8005c0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	4798      	blx	r3
 8005732:	e26c      	b.n	8005c0e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a43      	ldr	r2, [pc, #268]	@ (8005848 <HAL_DMA_IRQHandler+0xa48>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d022      	beq.n	8005784 <HAL_DMA_IRQHandler+0x984>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a42      	ldr	r2, [pc, #264]	@ (800584c <HAL_DMA_IRQHandler+0xa4c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d01d      	beq.n	8005784 <HAL_DMA_IRQHandler+0x984>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a40      	ldr	r2, [pc, #256]	@ (8005850 <HAL_DMA_IRQHandler+0xa50>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d018      	beq.n	8005784 <HAL_DMA_IRQHandler+0x984>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a3f      	ldr	r2, [pc, #252]	@ (8005854 <HAL_DMA_IRQHandler+0xa54>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d013      	beq.n	8005784 <HAL_DMA_IRQHandler+0x984>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a3d      	ldr	r2, [pc, #244]	@ (8005858 <HAL_DMA_IRQHandler+0xa58>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d00e      	beq.n	8005784 <HAL_DMA_IRQHandler+0x984>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a3c      	ldr	r2, [pc, #240]	@ (800585c <HAL_DMA_IRQHandler+0xa5c>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d009      	beq.n	8005784 <HAL_DMA_IRQHandler+0x984>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a3a      	ldr	r2, [pc, #232]	@ (8005860 <HAL_DMA_IRQHandler+0xa60>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d004      	beq.n	8005784 <HAL_DMA_IRQHandler+0x984>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a39      	ldr	r2, [pc, #228]	@ (8005864 <HAL_DMA_IRQHandler+0xa64>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d101      	bne.n	8005788 <HAL_DMA_IRQHandler+0x988>
 8005784:	2301      	movs	r3, #1
 8005786:	e000      	b.n	800578a <HAL_DMA_IRQHandler+0x98a>
 8005788:	2300      	movs	r3, #0
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 823f 	beq.w	8005c0e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800579c:	f003 031f 	and.w	r3, r3, #31
 80057a0:	2204      	movs	r2, #4
 80057a2:	409a      	lsls	r2, r3
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	4013      	ands	r3, r2
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f000 80cd 	beq.w	8005948 <HAL_DMA_IRQHandler+0xb48>
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	f003 0304 	and.w	r3, r3, #4
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 80c7 	beq.w	8005948 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80057be:	f003 031f 	and.w	r3, r3, #31
 80057c2:	2204      	movs	r2, #4
 80057c4:	409a      	lsls	r2, r3
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d049      	beq.n	8005868 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d109      	bne.n	80057f2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	f000 8210 	beq.w	8005c08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80057f0:	e20a      	b.n	8005c08 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	f000 8206 	beq.w	8005c08 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005804:	e200      	b.n	8005c08 <HAL_DMA_IRQHandler+0xe08>
 8005806:	bf00      	nop
 8005808:	40020010 	.word	0x40020010
 800580c:	40020028 	.word	0x40020028
 8005810:	40020040 	.word	0x40020040
 8005814:	40020058 	.word	0x40020058
 8005818:	40020070 	.word	0x40020070
 800581c:	40020088 	.word	0x40020088
 8005820:	400200a0 	.word	0x400200a0
 8005824:	400200b8 	.word	0x400200b8
 8005828:	40020410 	.word	0x40020410
 800582c:	40020428 	.word	0x40020428
 8005830:	40020440 	.word	0x40020440
 8005834:	40020458 	.word	0x40020458
 8005838:	40020470 	.word	0x40020470
 800583c:	40020488 	.word	0x40020488
 8005840:	400204a0 	.word	0x400204a0
 8005844:	400204b8 	.word	0x400204b8
 8005848:	58025408 	.word	0x58025408
 800584c:	5802541c 	.word	0x5802541c
 8005850:	58025430 	.word	0x58025430
 8005854:	58025444 	.word	0x58025444
 8005858:	58025458 	.word	0x58025458
 800585c:	5802546c 	.word	0x5802546c
 8005860:	58025480 	.word	0x58025480
 8005864:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	f003 0320 	and.w	r3, r3, #32
 800586e:	2b00      	cmp	r3, #0
 8005870:	d160      	bne.n	8005934 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a7f      	ldr	r2, [pc, #508]	@ (8005a74 <HAL_DMA_IRQHandler+0xc74>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d04a      	beq.n	8005912 <HAL_DMA_IRQHandler+0xb12>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a7d      	ldr	r2, [pc, #500]	@ (8005a78 <HAL_DMA_IRQHandler+0xc78>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d045      	beq.n	8005912 <HAL_DMA_IRQHandler+0xb12>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a7c      	ldr	r2, [pc, #496]	@ (8005a7c <HAL_DMA_IRQHandler+0xc7c>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d040      	beq.n	8005912 <HAL_DMA_IRQHandler+0xb12>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a7a      	ldr	r2, [pc, #488]	@ (8005a80 <HAL_DMA_IRQHandler+0xc80>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d03b      	beq.n	8005912 <HAL_DMA_IRQHandler+0xb12>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a79      	ldr	r2, [pc, #484]	@ (8005a84 <HAL_DMA_IRQHandler+0xc84>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d036      	beq.n	8005912 <HAL_DMA_IRQHandler+0xb12>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a77      	ldr	r2, [pc, #476]	@ (8005a88 <HAL_DMA_IRQHandler+0xc88>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d031      	beq.n	8005912 <HAL_DMA_IRQHandler+0xb12>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a76      	ldr	r2, [pc, #472]	@ (8005a8c <HAL_DMA_IRQHandler+0xc8c>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d02c      	beq.n	8005912 <HAL_DMA_IRQHandler+0xb12>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a74      	ldr	r2, [pc, #464]	@ (8005a90 <HAL_DMA_IRQHandler+0xc90>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d027      	beq.n	8005912 <HAL_DMA_IRQHandler+0xb12>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a73      	ldr	r2, [pc, #460]	@ (8005a94 <HAL_DMA_IRQHandler+0xc94>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d022      	beq.n	8005912 <HAL_DMA_IRQHandler+0xb12>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a71      	ldr	r2, [pc, #452]	@ (8005a98 <HAL_DMA_IRQHandler+0xc98>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d01d      	beq.n	8005912 <HAL_DMA_IRQHandler+0xb12>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a70      	ldr	r2, [pc, #448]	@ (8005a9c <HAL_DMA_IRQHandler+0xc9c>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d018      	beq.n	8005912 <HAL_DMA_IRQHandler+0xb12>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a6e      	ldr	r2, [pc, #440]	@ (8005aa0 <HAL_DMA_IRQHandler+0xca0>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d013      	beq.n	8005912 <HAL_DMA_IRQHandler+0xb12>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a6d      	ldr	r2, [pc, #436]	@ (8005aa4 <HAL_DMA_IRQHandler+0xca4>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d00e      	beq.n	8005912 <HAL_DMA_IRQHandler+0xb12>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a6b      	ldr	r2, [pc, #428]	@ (8005aa8 <HAL_DMA_IRQHandler+0xca8>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d009      	beq.n	8005912 <HAL_DMA_IRQHandler+0xb12>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a6a      	ldr	r2, [pc, #424]	@ (8005aac <HAL_DMA_IRQHandler+0xcac>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d004      	beq.n	8005912 <HAL_DMA_IRQHandler+0xb12>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a68      	ldr	r2, [pc, #416]	@ (8005ab0 <HAL_DMA_IRQHandler+0xcb0>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d108      	bne.n	8005924 <HAL_DMA_IRQHandler+0xb24>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f022 0208 	bic.w	r2, r2, #8
 8005920:	601a      	str	r2, [r3, #0]
 8005922:	e007      	b.n	8005934 <HAL_DMA_IRQHandler+0xb34>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 0204 	bic.w	r2, r2, #4
 8005932:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 8165 	beq.w	8005c08 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005946:	e15f      	b.n	8005c08 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800594c:	f003 031f 	and.w	r3, r3, #31
 8005950:	2202      	movs	r2, #2
 8005952:	409a      	lsls	r2, r3
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	4013      	ands	r3, r2
 8005958:	2b00      	cmp	r3, #0
 800595a:	f000 80c5 	beq.w	8005ae8 <HAL_DMA_IRQHandler+0xce8>
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 80bf 	beq.w	8005ae8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800596e:	f003 031f 	and.w	r3, r3, #31
 8005972:	2202      	movs	r2, #2
 8005974:	409a      	lsls	r2, r3
 8005976:	69fb      	ldr	r3, [r7, #28]
 8005978:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005980:	2b00      	cmp	r3, #0
 8005982:	d018      	beq.n	80059b6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005984:	693b      	ldr	r3, [r7, #16]
 8005986:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800598a:	2b00      	cmp	r3, #0
 800598c:	d109      	bne.n	80059a2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005992:	2b00      	cmp	r3, #0
 8005994:	f000 813a 	beq.w	8005c0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059a0:	e134      	b.n	8005c0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 8130 	beq.w	8005c0c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80059b4:	e12a      	b.n	8005c0c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	f003 0320 	and.w	r3, r3, #32
 80059bc:	2b00      	cmp	r3, #0
 80059be:	f040 8089 	bne.w	8005ad4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a2b      	ldr	r2, [pc, #172]	@ (8005a74 <HAL_DMA_IRQHandler+0xc74>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d04a      	beq.n	8005a62 <HAL_DMA_IRQHandler+0xc62>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a29      	ldr	r2, [pc, #164]	@ (8005a78 <HAL_DMA_IRQHandler+0xc78>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d045      	beq.n	8005a62 <HAL_DMA_IRQHandler+0xc62>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a28      	ldr	r2, [pc, #160]	@ (8005a7c <HAL_DMA_IRQHandler+0xc7c>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d040      	beq.n	8005a62 <HAL_DMA_IRQHandler+0xc62>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a26      	ldr	r2, [pc, #152]	@ (8005a80 <HAL_DMA_IRQHandler+0xc80>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d03b      	beq.n	8005a62 <HAL_DMA_IRQHandler+0xc62>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a25      	ldr	r2, [pc, #148]	@ (8005a84 <HAL_DMA_IRQHandler+0xc84>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d036      	beq.n	8005a62 <HAL_DMA_IRQHandler+0xc62>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a23      	ldr	r2, [pc, #140]	@ (8005a88 <HAL_DMA_IRQHandler+0xc88>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d031      	beq.n	8005a62 <HAL_DMA_IRQHandler+0xc62>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a22      	ldr	r2, [pc, #136]	@ (8005a8c <HAL_DMA_IRQHandler+0xc8c>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d02c      	beq.n	8005a62 <HAL_DMA_IRQHandler+0xc62>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a20      	ldr	r2, [pc, #128]	@ (8005a90 <HAL_DMA_IRQHandler+0xc90>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d027      	beq.n	8005a62 <HAL_DMA_IRQHandler+0xc62>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a1f      	ldr	r2, [pc, #124]	@ (8005a94 <HAL_DMA_IRQHandler+0xc94>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d022      	beq.n	8005a62 <HAL_DMA_IRQHandler+0xc62>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a1d      	ldr	r2, [pc, #116]	@ (8005a98 <HAL_DMA_IRQHandler+0xc98>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d01d      	beq.n	8005a62 <HAL_DMA_IRQHandler+0xc62>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a1c      	ldr	r2, [pc, #112]	@ (8005a9c <HAL_DMA_IRQHandler+0xc9c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d018      	beq.n	8005a62 <HAL_DMA_IRQHandler+0xc62>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a1a      	ldr	r2, [pc, #104]	@ (8005aa0 <HAL_DMA_IRQHandler+0xca0>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d013      	beq.n	8005a62 <HAL_DMA_IRQHandler+0xc62>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a19      	ldr	r2, [pc, #100]	@ (8005aa4 <HAL_DMA_IRQHandler+0xca4>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d00e      	beq.n	8005a62 <HAL_DMA_IRQHandler+0xc62>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a17      	ldr	r2, [pc, #92]	@ (8005aa8 <HAL_DMA_IRQHandler+0xca8>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d009      	beq.n	8005a62 <HAL_DMA_IRQHandler+0xc62>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a16      	ldr	r2, [pc, #88]	@ (8005aac <HAL_DMA_IRQHandler+0xcac>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d004      	beq.n	8005a62 <HAL_DMA_IRQHandler+0xc62>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a14      	ldr	r2, [pc, #80]	@ (8005ab0 <HAL_DMA_IRQHandler+0xcb0>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d128      	bne.n	8005ab4 <HAL_DMA_IRQHandler+0xcb4>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 0214 	bic.w	r2, r2, #20
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	e027      	b.n	8005ac4 <HAL_DMA_IRQHandler+0xcc4>
 8005a74:	40020010 	.word	0x40020010
 8005a78:	40020028 	.word	0x40020028
 8005a7c:	40020040 	.word	0x40020040
 8005a80:	40020058 	.word	0x40020058
 8005a84:	40020070 	.word	0x40020070
 8005a88:	40020088 	.word	0x40020088
 8005a8c:	400200a0 	.word	0x400200a0
 8005a90:	400200b8 	.word	0x400200b8
 8005a94:	40020410 	.word	0x40020410
 8005a98:	40020428 	.word	0x40020428
 8005a9c:	40020440 	.word	0x40020440
 8005aa0:	40020458 	.word	0x40020458
 8005aa4:	40020470 	.word	0x40020470
 8005aa8:	40020488 	.word	0x40020488
 8005aac:	400204a0 	.word	0x400204a0
 8005ab0:	400204b8 	.word	0x400204b8
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681a      	ldr	r2, [r3, #0]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 020a 	bic.w	r2, r2, #10
 8005ac2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	f000 8097 	beq.w	8005c0c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ae6:	e091      	b.n	8005c0c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aec:	f003 031f 	and.w	r3, r3, #31
 8005af0:	2208      	movs	r2, #8
 8005af2:	409a      	lsls	r2, r3
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	4013      	ands	r3, r2
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	f000 8088 	beq.w	8005c0e <HAL_DMA_IRQHandler+0xe0e>
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	f003 0308 	and.w	r3, r3, #8
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	f000 8082 	beq.w	8005c0e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a41      	ldr	r2, [pc, #260]	@ (8005c14 <HAL_DMA_IRQHandler+0xe14>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d04a      	beq.n	8005baa <HAL_DMA_IRQHandler+0xdaa>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a3f      	ldr	r2, [pc, #252]	@ (8005c18 <HAL_DMA_IRQHandler+0xe18>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d045      	beq.n	8005baa <HAL_DMA_IRQHandler+0xdaa>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4a3e      	ldr	r2, [pc, #248]	@ (8005c1c <HAL_DMA_IRQHandler+0xe1c>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d040      	beq.n	8005baa <HAL_DMA_IRQHandler+0xdaa>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4a3c      	ldr	r2, [pc, #240]	@ (8005c20 <HAL_DMA_IRQHandler+0xe20>)
 8005b2e:	4293      	cmp	r3, r2
 8005b30:	d03b      	beq.n	8005baa <HAL_DMA_IRQHandler+0xdaa>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a3b      	ldr	r2, [pc, #236]	@ (8005c24 <HAL_DMA_IRQHandler+0xe24>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d036      	beq.n	8005baa <HAL_DMA_IRQHandler+0xdaa>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a39      	ldr	r2, [pc, #228]	@ (8005c28 <HAL_DMA_IRQHandler+0xe28>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d031      	beq.n	8005baa <HAL_DMA_IRQHandler+0xdaa>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a38      	ldr	r2, [pc, #224]	@ (8005c2c <HAL_DMA_IRQHandler+0xe2c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d02c      	beq.n	8005baa <HAL_DMA_IRQHandler+0xdaa>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a36      	ldr	r2, [pc, #216]	@ (8005c30 <HAL_DMA_IRQHandler+0xe30>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d027      	beq.n	8005baa <HAL_DMA_IRQHandler+0xdaa>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a35      	ldr	r2, [pc, #212]	@ (8005c34 <HAL_DMA_IRQHandler+0xe34>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d022      	beq.n	8005baa <HAL_DMA_IRQHandler+0xdaa>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a33      	ldr	r2, [pc, #204]	@ (8005c38 <HAL_DMA_IRQHandler+0xe38>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d01d      	beq.n	8005baa <HAL_DMA_IRQHandler+0xdaa>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a32      	ldr	r2, [pc, #200]	@ (8005c3c <HAL_DMA_IRQHandler+0xe3c>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d018      	beq.n	8005baa <HAL_DMA_IRQHandler+0xdaa>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a30      	ldr	r2, [pc, #192]	@ (8005c40 <HAL_DMA_IRQHandler+0xe40>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d013      	beq.n	8005baa <HAL_DMA_IRQHandler+0xdaa>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a2f      	ldr	r2, [pc, #188]	@ (8005c44 <HAL_DMA_IRQHandler+0xe44>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d00e      	beq.n	8005baa <HAL_DMA_IRQHandler+0xdaa>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a2d      	ldr	r2, [pc, #180]	@ (8005c48 <HAL_DMA_IRQHandler+0xe48>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d009      	beq.n	8005baa <HAL_DMA_IRQHandler+0xdaa>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a2c      	ldr	r2, [pc, #176]	@ (8005c4c <HAL_DMA_IRQHandler+0xe4c>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d004      	beq.n	8005baa <HAL_DMA_IRQHandler+0xdaa>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a2a      	ldr	r2, [pc, #168]	@ (8005c50 <HAL_DMA_IRQHandler+0xe50>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d108      	bne.n	8005bbc <HAL_DMA_IRQHandler+0xdbc>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 021c 	bic.w	r2, r2, #28
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	e007      	b.n	8005bcc <HAL_DMA_IRQHandler+0xdcc>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 020e 	bic.w	r2, r2, #14
 8005bca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005bd0:	f003 031f 	and.w	r3, r3, #31
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	409a      	lsls	r2, r3
 8005bd8:	69fb      	ldr	r3, [r7, #28]
 8005bda:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d009      	beq.n	8005c0e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	4798      	blx	r3
 8005c02:	e004      	b.n	8005c0e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005c04:	bf00      	nop
 8005c06:	e002      	b.n	8005c0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c08:	bf00      	nop
 8005c0a:	e000      	b.n	8005c0e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005c0c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005c0e:	3728      	adds	r7, #40	@ 0x28
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	40020010 	.word	0x40020010
 8005c18:	40020028 	.word	0x40020028
 8005c1c:	40020040 	.word	0x40020040
 8005c20:	40020058 	.word	0x40020058
 8005c24:	40020070 	.word	0x40020070
 8005c28:	40020088 	.word	0x40020088
 8005c2c:	400200a0 	.word	0x400200a0
 8005c30:	400200b8 	.word	0x400200b8
 8005c34:	40020410 	.word	0x40020410
 8005c38:	40020428 	.word	0x40020428
 8005c3c:	40020440 	.word	0x40020440
 8005c40:	40020458 	.word	0x40020458
 8005c44:	40020470 	.word	0x40020470
 8005c48:	40020488 	.word	0x40020488
 8005c4c:	400204a0 	.word	0x400204a0
 8005c50:	400204b8 	.word	0x400204b8

08005c54 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
 8005c60:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c66:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c6c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a7f      	ldr	r2, [pc, #508]	@ (8005e70 <DMA_SetConfig+0x21c>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d072      	beq.n	8005d5e <DMA_SetConfig+0x10a>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a7d      	ldr	r2, [pc, #500]	@ (8005e74 <DMA_SetConfig+0x220>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d06d      	beq.n	8005d5e <DMA_SetConfig+0x10a>
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a7c      	ldr	r2, [pc, #496]	@ (8005e78 <DMA_SetConfig+0x224>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d068      	beq.n	8005d5e <DMA_SetConfig+0x10a>
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a7a      	ldr	r2, [pc, #488]	@ (8005e7c <DMA_SetConfig+0x228>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d063      	beq.n	8005d5e <DMA_SetConfig+0x10a>
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a79      	ldr	r2, [pc, #484]	@ (8005e80 <DMA_SetConfig+0x22c>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d05e      	beq.n	8005d5e <DMA_SetConfig+0x10a>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	4a77      	ldr	r2, [pc, #476]	@ (8005e84 <DMA_SetConfig+0x230>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d059      	beq.n	8005d5e <DMA_SetConfig+0x10a>
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a76      	ldr	r2, [pc, #472]	@ (8005e88 <DMA_SetConfig+0x234>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d054      	beq.n	8005d5e <DMA_SetConfig+0x10a>
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a74      	ldr	r2, [pc, #464]	@ (8005e8c <DMA_SetConfig+0x238>)
 8005cba:	4293      	cmp	r3, r2
 8005cbc:	d04f      	beq.n	8005d5e <DMA_SetConfig+0x10a>
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a73      	ldr	r2, [pc, #460]	@ (8005e90 <DMA_SetConfig+0x23c>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d04a      	beq.n	8005d5e <DMA_SetConfig+0x10a>
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a71      	ldr	r2, [pc, #452]	@ (8005e94 <DMA_SetConfig+0x240>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d045      	beq.n	8005d5e <DMA_SetConfig+0x10a>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a70      	ldr	r2, [pc, #448]	@ (8005e98 <DMA_SetConfig+0x244>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d040      	beq.n	8005d5e <DMA_SetConfig+0x10a>
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4a6e      	ldr	r2, [pc, #440]	@ (8005e9c <DMA_SetConfig+0x248>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d03b      	beq.n	8005d5e <DMA_SetConfig+0x10a>
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a6d      	ldr	r2, [pc, #436]	@ (8005ea0 <DMA_SetConfig+0x24c>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d036      	beq.n	8005d5e <DMA_SetConfig+0x10a>
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	4a6b      	ldr	r2, [pc, #428]	@ (8005ea4 <DMA_SetConfig+0x250>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d031      	beq.n	8005d5e <DMA_SetConfig+0x10a>
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	4a6a      	ldr	r2, [pc, #424]	@ (8005ea8 <DMA_SetConfig+0x254>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d02c      	beq.n	8005d5e <DMA_SetConfig+0x10a>
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a68      	ldr	r2, [pc, #416]	@ (8005eac <DMA_SetConfig+0x258>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d027      	beq.n	8005d5e <DMA_SetConfig+0x10a>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a67      	ldr	r2, [pc, #412]	@ (8005eb0 <DMA_SetConfig+0x25c>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d022      	beq.n	8005d5e <DMA_SetConfig+0x10a>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a65      	ldr	r2, [pc, #404]	@ (8005eb4 <DMA_SetConfig+0x260>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d01d      	beq.n	8005d5e <DMA_SetConfig+0x10a>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a64      	ldr	r2, [pc, #400]	@ (8005eb8 <DMA_SetConfig+0x264>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d018      	beq.n	8005d5e <DMA_SetConfig+0x10a>
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a62      	ldr	r2, [pc, #392]	@ (8005ebc <DMA_SetConfig+0x268>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d013      	beq.n	8005d5e <DMA_SetConfig+0x10a>
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a61      	ldr	r2, [pc, #388]	@ (8005ec0 <DMA_SetConfig+0x26c>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d00e      	beq.n	8005d5e <DMA_SetConfig+0x10a>
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a5f      	ldr	r2, [pc, #380]	@ (8005ec4 <DMA_SetConfig+0x270>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d009      	beq.n	8005d5e <DMA_SetConfig+0x10a>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a5e      	ldr	r2, [pc, #376]	@ (8005ec8 <DMA_SetConfig+0x274>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d004      	beq.n	8005d5e <DMA_SetConfig+0x10a>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a5c      	ldr	r2, [pc, #368]	@ (8005ecc <DMA_SetConfig+0x278>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d101      	bne.n	8005d62 <DMA_SetConfig+0x10e>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <DMA_SetConfig+0x110>
 8005d62:	2300      	movs	r3, #0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d00d      	beq.n	8005d84 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005d70:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d004      	beq.n	8005d84 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005d82:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a39      	ldr	r2, [pc, #228]	@ (8005e70 <DMA_SetConfig+0x21c>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d04a      	beq.n	8005e24 <DMA_SetConfig+0x1d0>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a38      	ldr	r2, [pc, #224]	@ (8005e74 <DMA_SetConfig+0x220>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d045      	beq.n	8005e24 <DMA_SetConfig+0x1d0>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a36      	ldr	r2, [pc, #216]	@ (8005e78 <DMA_SetConfig+0x224>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d040      	beq.n	8005e24 <DMA_SetConfig+0x1d0>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a35      	ldr	r2, [pc, #212]	@ (8005e7c <DMA_SetConfig+0x228>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d03b      	beq.n	8005e24 <DMA_SetConfig+0x1d0>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a33      	ldr	r2, [pc, #204]	@ (8005e80 <DMA_SetConfig+0x22c>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d036      	beq.n	8005e24 <DMA_SetConfig+0x1d0>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a32      	ldr	r2, [pc, #200]	@ (8005e84 <DMA_SetConfig+0x230>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d031      	beq.n	8005e24 <DMA_SetConfig+0x1d0>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a30      	ldr	r2, [pc, #192]	@ (8005e88 <DMA_SetConfig+0x234>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d02c      	beq.n	8005e24 <DMA_SetConfig+0x1d0>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a2f      	ldr	r2, [pc, #188]	@ (8005e8c <DMA_SetConfig+0x238>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d027      	beq.n	8005e24 <DMA_SetConfig+0x1d0>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a2d      	ldr	r2, [pc, #180]	@ (8005e90 <DMA_SetConfig+0x23c>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d022      	beq.n	8005e24 <DMA_SetConfig+0x1d0>
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4a2c      	ldr	r2, [pc, #176]	@ (8005e94 <DMA_SetConfig+0x240>)
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d01d      	beq.n	8005e24 <DMA_SetConfig+0x1d0>
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a2a      	ldr	r2, [pc, #168]	@ (8005e98 <DMA_SetConfig+0x244>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d018      	beq.n	8005e24 <DMA_SetConfig+0x1d0>
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a29      	ldr	r2, [pc, #164]	@ (8005e9c <DMA_SetConfig+0x248>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d013      	beq.n	8005e24 <DMA_SetConfig+0x1d0>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a27      	ldr	r2, [pc, #156]	@ (8005ea0 <DMA_SetConfig+0x24c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d00e      	beq.n	8005e24 <DMA_SetConfig+0x1d0>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a26      	ldr	r2, [pc, #152]	@ (8005ea4 <DMA_SetConfig+0x250>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d009      	beq.n	8005e24 <DMA_SetConfig+0x1d0>
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a24      	ldr	r2, [pc, #144]	@ (8005ea8 <DMA_SetConfig+0x254>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d004      	beq.n	8005e24 <DMA_SetConfig+0x1d0>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a23      	ldr	r2, [pc, #140]	@ (8005eac <DMA_SetConfig+0x258>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d101      	bne.n	8005e28 <DMA_SetConfig+0x1d4>
 8005e24:	2301      	movs	r3, #1
 8005e26:	e000      	b.n	8005e2a <DMA_SetConfig+0x1d6>
 8005e28:	2300      	movs	r3, #0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d059      	beq.n	8005ee2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e32:	f003 031f 	and.w	r3, r3, #31
 8005e36:	223f      	movs	r2, #63	@ 0x3f
 8005e38:	409a      	lsls	r2, r3
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005e4c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	689b      	ldr	r3, [r3, #8]
 8005e5a:	2b40      	cmp	r3, #64	@ 0x40
 8005e5c:	d138      	bne.n	8005ed0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	687a      	ldr	r2, [r7, #4]
 8005e64:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68ba      	ldr	r2, [r7, #8]
 8005e6c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8005e6e:	e086      	b.n	8005f7e <DMA_SetConfig+0x32a>
 8005e70:	40020010 	.word	0x40020010
 8005e74:	40020028 	.word	0x40020028
 8005e78:	40020040 	.word	0x40020040
 8005e7c:	40020058 	.word	0x40020058
 8005e80:	40020070 	.word	0x40020070
 8005e84:	40020088 	.word	0x40020088
 8005e88:	400200a0 	.word	0x400200a0
 8005e8c:	400200b8 	.word	0x400200b8
 8005e90:	40020410 	.word	0x40020410
 8005e94:	40020428 	.word	0x40020428
 8005e98:	40020440 	.word	0x40020440
 8005e9c:	40020458 	.word	0x40020458
 8005ea0:	40020470 	.word	0x40020470
 8005ea4:	40020488 	.word	0x40020488
 8005ea8:	400204a0 	.word	0x400204a0
 8005eac:	400204b8 	.word	0x400204b8
 8005eb0:	58025408 	.word	0x58025408
 8005eb4:	5802541c 	.word	0x5802541c
 8005eb8:	58025430 	.word	0x58025430
 8005ebc:	58025444 	.word	0x58025444
 8005ec0:	58025458 	.word	0x58025458
 8005ec4:	5802546c 	.word	0x5802546c
 8005ec8:	58025480 	.word	0x58025480
 8005ecc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	60da      	str	r2, [r3, #12]
}
 8005ee0:	e04d      	b.n	8005f7e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a29      	ldr	r2, [pc, #164]	@ (8005f8c <DMA_SetConfig+0x338>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d022      	beq.n	8005f32 <DMA_SetConfig+0x2de>
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a27      	ldr	r2, [pc, #156]	@ (8005f90 <DMA_SetConfig+0x33c>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d01d      	beq.n	8005f32 <DMA_SetConfig+0x2de>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a26      	ldr	r2, [pc, #152]	@ (8005f94 <DMA_SetConfig+0x340>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d018      	beq.n	8005f32 <DMA_SetConfig+0x2de>
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a24      	ldr	r2, [pc, #144]	@ (8005f98 <DMA_SetConfig+0x344>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d013      	beq.n	8005f32 <DMA_SetConfig+0x2de>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a23      	ldr	r2, [pc, #140]	@ (8005f9c <DMA_SetConfig+0x348>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d00e      	beq.n	8005f32 <DMA_SetConfig+0x2de>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a21      	ldr	r2, [pc, #132]	@ (8005fa0 <DMA_SetConfig+0x34c>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d009      	beq.n	8005f32 <DMA_SetConfig+0x2de>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a20      	ldr	r2, [pc, #128]	@ (8005fa4 <DMA_SetConfig+0x350>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d004      	beq.n	8005f32 <DMA_SetConfig+0x2de>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a1e      	ldr	r2, [pc, #120]	@ (8005fa8 <DMA_SetConfig+0x354>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d101      	bne.n	8005f36 <DMA_SetConfig+0x2e2>
 8005f32:	2301      	movs	r3, #1
 8005f34:	e000      	b.n	8005f38 <DMA_SetConfig+0x2e4>
 8005f36:	2300      	movs	r3, #0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d020      	beq.n	8005f7e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f40:	f003 031f 	and.w	r3, r3, #31
 8005f44:	2201      	movs	r2, #1
 8005f46:	409a      	lsls	r2, r3
 8005f48:	693b      	ldr	r3, [r7, #16]
 8005f4a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	2b40      	cmp	r3, #64	@ 0x40
 8005f5a:	d108      	bne.n	8005f6e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	60da      	str	r2, [r3, #12]
}
 8005f6c:	e007      	b.n	8005f7e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	687a      	ldr	r2, [r7, #4]
 8005f7c:	60da      	str	r2, [r3, #12]
}
 8005f7e:	bf00      	nop
 8005f80:	371c      	adds	r7, #28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	58025408 	.word	0x58025408
 8005f90:	5802541c 	.word	0x5802541c
 8005f94:	58025430 	.word	0x58025430
 8005f98:	58025444 	.word	0x58025444
 8005f9c:	58025458 	.word	0x58025458
 8005fa0:	5802546c 	.word	0x5802546c
 8005fa4:	58025480 	.word	0x58025480
 8005fa8:	58025494 	.word	0x58025494

08005fac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a42      	ldr	r2, [pc, #264]	@ (80060c4 <DMA_CalcBaseAndBitshift+0x118>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d04a      	beq.n	8006054 <DMA_CalcBaseAndBitshift+0xa8>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a41      	ldr	r2, [pc, #260]	@ (80060c8 <DMA_CalcBaseAndBitshift+0x11c>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d045      	beq.n	8006054 <DMA_CalcBaseAndBitshift+0xa8>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a3f      	ldr	r2, [pc, #252]	@ (80060cc <DMA_CalcBaseAndBitshift+0x120>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d040      	beq.n	8006054 <DMA_CalcBaseAndBitshift+0xa8>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a3e      	ldr	r2, [pc, #248]	@ (80060d0 <DMA_CalcBaseAndBitshift+0x124>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d03b      	beq.n	8006054 <DMA_CalcBaseAndBitshift+0xa8>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a3c      	ldr	r2, [pc, #240]	@ (80060d4 <DMA_CalcBaseAndBitshift+0x128>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d036      	beq.n	8006054 <DMA_CalcBaseAndBitshift+0xa8>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a3b      	ldr	r2, [pc, #236]	@ (80060d8 <DMA_CalcBaseAndBitshift+0x12c>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d031      	beq.n	8006054 <DMA_CalcBaseAndBitshift+0xa8>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a39      	ldr	r2, [pc, #228]	@ (80060dc <DMA_CalcBaseAndBitshift+0x130>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d02c      	beq.n	8006054 <DMA_CalcBaseAndBitshift+0xa8>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a38      	ldr	r2, [pc, #224]	@ (80060e0 <DMA_CalcBaseAndBitshift+0x134>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d027      	beq.n	8006054 <DMA_CalcBaseAndBitshift+0xa8>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a36      	ldr	r2, [pc, #216]	@ (80060e4 <DMA_CalcBaseAndBitshift+0x138>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d022      	beq.n	8006054 <DMA_CalcBaseAndBitshift+0xa8>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a35      	ldr	r2, [pc, #212]	@ (80060e8 <DMA_CalcBaseAndBitshift+0x13c>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d01d      	beq.n	8006054 <DMA_CalcBaseAndBitshift+0xa8>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a33      	ldr	r2, [pc, #204]	@ (80060ec <DMA_CalcBaseAndBitshift+0x140>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d018      	beq.n	8006054 <DMA_CalcBaseAndBitshift+0xa8>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a32      	ldr	r2, [pc, #200]	@ (80060f0 <DMA_CalcBaseAndBitshift+0x144>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d013      	beq.n	8006054 <DMA_CalcBaseAndBitshift+0xa8>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a30      	ldr	r2, [pc, #192]	@ (80060f4 <DMA_CalcBaseAndBitshift+0x148>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d00e      	beq.n	8006054 <DMA_CalcBaseAndBitshift+0xa8>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a2f      	ldr	r2, [pc, #188]	@ (80060f8 <DMA_CalcBaseAndBitshift+0x14c>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d009      	beq.n	8006054 <DMA_CalcBaseAndBitshift+0xa8>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a2d      	ldr	r2, [pc, #180]	@ (80060fc <DMA_CalcBaseAndBitshift+0x150>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d004      	beq.n	8006054 <DMA_CalcBaseAndBitshift+0xa8>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a2c      	ldr	r2, [pc, #176]	@ (8006100 <DMA_CalcBaseAndBitshift+0x154>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d101      	bne.n	8006058 <DMA_CalcBaseAndBitshift+0xac>
 8006054:	2301      	movs	r3, #1
 8006056:	e000      	b.n	800605a <DMA_CalcBaseAndBitshift+0xae>
 8006058:	2300      	movs	r3, #0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d024      	beq.n	80060a8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	b2db      	uxtb	r3, r3
 8006064:	3b10      	subs	r3, #16
 8006066:	4a27      	ldr	r2, [pc, #156]	@ (8006104 <DMA_CalcBaseAndBitshift+0x158>)
 8006068:	fba2 2303 	umull	r2, r3, r2, r3
 800606c:	091b      	lsrs	r3, r3, #4
 800606e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	f003 0307 	and.w	r3, r3, #7
 8006076:	4a24      	ldr	r2, [pc, #144]	@ (8006108 <DMA_CalcBaseAndBitshift+0x15c>)
 8006078:	5cd3      	ldrb	r3, [r2, r3]
 800607a:	461a      	mov	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2b03      	cmp	r3, #3
 8006084:	d908      	bls.n	8006098 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	461a      	mov	r2, r3
 800608c:	4b1f      	ldr	r3, [pc, #124]	@ (800610c <DMA_CalcBaseAndBitshift+0x160>)
 800608e:	4013      	ands	r3, r2
 8006090:	1d1a      	adds	r2, r3, #4
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	659a      	str	r2, [r3, #88]	@ 0x58
 8006096:	e00d      	b.n	80060b4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	461a      	mov	r2, r3
 800609e:	4b1b      	ldr	r3, [pc, #108]	@ (800610c <DMA_CalcBaseAndBitshift+0x160>)
 80060a0:	4013      	ands	r3, r2
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80060a6:	e005      	b.n	80060b4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	40020010 	.word	0x40020010
 80060c8:	40020028 	.word	0x40020028
 80060cc:	40020040 	.word	0x40020040
 80060d0:	40020058 	.word	0x40020058
 80060d4:	40020070 	.word	0x40020070
 80060d8:	40020088 	.word	0x40020088
 80060dc:	400200a0 	.word	0x400200a0
 80060e0:	400200b8 	.word	0x400200b8
 80060e4:	40020410 	.word	0x40020410
 80060e8:	40020428 	.word	0x40020428
 80060ec:	40020440 	.word	0x40020440
 80060f0:	40020458 	.word	0x40020458
 80060f4:	40020470 	.word	0x40020470
 80060f8:	40020488 	.word	0x40020488
 80060fc:	400204a0 	.word	0x400204a0
 8006100:	400204b8 	.word	0x400204b8
 8006104:	aaaaaaab 	.word	0xaaaaaaab
 8006108:	08014a9c 	.word	0x08014a9c
 800610c:	fffffc00 	.word	0xfffffc00

08006110 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006118:	2300      	movs	r3, #0
 800611a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	699b      	ldr	r3, [r3, #24]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d120      	bne.n	8006166 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006128:	2b03      	cmp	r3, #3
 800612a:	d858      	bhi.n	80061de <DMA_CheckFifoParam+0xce>
 800612c:	a201      	add	r2, pc, #4	@ (adr r2, 8006134 <DMA_CheckFifoParam+0x24>)
 800612e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006132:	bf00      	nop
 8006134:	08006145 	.word	0x08006145
 8006138:	08006157 	.word	0x08006157
 800613c:	08006145 	.word	0x08006145
 8006140:	080061df 	.word	0x080061df
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006148:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d048      	beq.n	80061e2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006154:	e045      	b.n	80061e2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800615a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800615e:	d142      	bne.n	80061e6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006164:	e03f      	b.n	80061e6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800616e:	d123      	bne.n	80061b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006174:	2b03      	cmp	r3, #3
 8006176:	d838      	bhi.n	80061ea <DMA_CheckFifoParam+0xda>
 8006178:	a201      	add	r2, pc, #4	@ (adr r2, 8006180 <DMA_CheckFifoParam+0x70>)
 800617a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800617e:	bf00      	nop
 8006180:	08006191 	.word	0x08006191
 8006184:	08006197 	.word	0x08006197
 8006188:	08006191 	.word	0x08006191
 800618c:	080061a9 	.word	0x080061a9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006190:	2301      	movs	r3, #1
 8006192:	73fb      	strb	r3, [r7, #15]
        break;
 8006194:	e030      	b.n	80061f8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800619a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d025      	beq.n	80061ee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80061a6:	e022      	b.n	80061ee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80061b0:	d11f      	bne.n	80061f2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80061b6:	e01c      	b.n	80061f2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061bc:	2b02      	cmp	r3, #2
 80061be:	d902      	bls.n	80061c6 <DMA_CheckFifoParam+0xb6>
 80061c0:	2b03      	cmp	r3, #3
 80061c2:	d003      	beq.n	80061cc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80061c4:	e018      	b.n	80061f8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	73fb      	strb	r3, [r7, #15]
        break;
 80061ca:	e015      	b.n	80061f8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00e      	beq.n	80061f6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	73fb      	strb	r3, [r7, #15]
    break;
 80061dc:	e00b      	b.n	80061f6 <DMA_CheckFifoParam+0xe6>
        break;
 80061de:	bf00      	nop
 80061e0:	e00a      	b.n	80061f8 <DMA_CheckFifoParam+0xe8>
        break;
 80061e2:	bf00      	nop
 80061e4:	e008      	b.n	80061f8 <DMA_CheckFifoParam+0xe8>
        break;
 80061e6:	bf00      	nop
 80061e8:	e006      	b.n	80061f8 <DMA_CheckFifoParam+0xe8>
        break;
 80061ea:	bf00      	nop
 80061ec:	e004      	b.n	80061f8 <DMA_CheckFifoParam+0xe8>
        break;
 80061ee:	bf00      	nop
 80061f0:	e002      	b.n	80061f8 <DMA_CheckFifoParam+0xe8>
        break;
 80061f2:	bf00      	nop
 80061f4:	e000      	b.n	80061f8 <DMA_CheckFifoParam+0xe8>
    break;
 80061f6:	bf00      	nop
    }
  }

  return status;
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3714      	adds	r7, #20
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop

08006208 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8006208:	b480      	push	{r7}
 800620a:	b085      	sub	sp, #20
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	4a38      	ldr	r2, [pc, #224]	@ (80062fc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d022      	beq.n	8006266 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	4a36      	ldr	r2, [pc, #216]	@ (8006300 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d01d      	beq.n	8006266 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	4a35      	ldr	r2, [pc, #212]	@ (8006304 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8006230:	4293      	cmp	r3, r2
 8006232:	d018      	beq.n	8006266 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	4a33      	ldr	r2, [pc, #204]	@ (8006308 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d013      	beq.n	8006266 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	4a32      	ldr	r2, [pc, #200]	@ (800630c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8006244:	4293      	cmp	r3, r2
 8006246:	d00e      	beq.n	8006266 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	4a30      	ldr	r2, [pc, #192]	@ (8006310 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d009      	beq.n	8006266 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a2f      	ldr	r2, [pc, #188]	@ (8006314 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d004      	beq.n	8006266 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a2d      	ldr	r2, [pc, #180]	@ (8006318 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d101      	bne.n	800626a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8006266:	2301      	movs	r3, #1
 8006268:	e000      	b.n	800626c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800626a:	2300      	movs	r3, #0
 800626c:	2b00      	cmp	r3, #0
 800626e:	d01a      	beq.n	80062a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	b2db      	uxtb	r3, r3
 8006276:	3b08      	subs	r3, #8
 8006278:	4a28      	ldr	r2, [pc, #160]	@ (800631c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800627a:	fba2 2303 	umull	r2, r3, r2, r3
 800627e:	091b      	lsrs	r3, r3, #4
 8006280:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006282:	68fa      	ldr	r2, [r7, #12]
 8006284:	4b26      	ldr	r3, [pc, #152]	@ (8006320 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8006286:	4413      	add	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	461a      	mov	r2, r3
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a24      	ldr	r2, [pc, #144]	@ (8006324 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006294:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f003 031f 	and.w	r3, r3, #31
 800629c:	2201      	movs	r2, #1
 800629e:	409a      	lsls	r2, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80062a4:	e024      	b.n	80062f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	3b10      	subs	r3, #16
 80062ae:	4a1e      	ldr	r2, [pc, #120]	@ (8006328 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80062b0:	fba2 2303 	umull	r2, r3, r2, r3
 80062b4:	091b      	lsrs	r3, r3, #4
 80062b6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	4a1c      	ldr	r2, [pc, #112]	@ (800632c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d806      	bhi.n	80062ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	4a1b      	ldr	r2, [pc, #108]	@ (8006330 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d902      	bls.n	80062ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	3308      	adds	r3, #8
 80062cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	4b18      	ldr	r3, [pc, #96]	@ (8006334 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80062d2:	4413      	add	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	461a      	mov	r2, r3
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	4a16      	ldr	r2, [pc, #88]	@ (8006338 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80062e0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	f003 031f 	and.w	r3, r3, #31
 80062e8:	2201      	movs	r2, #1
 80062ea:	409a      	lsls	r2, r3
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80062f0:	bf00      	nop
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	58025408 	.word	0x58025408
 8006300:	5802541c 	.word	0x5802541c
 8006304:	58025430 	.word	0x58025430
 8006308:	58025444 	.word	0x58025444
 800630c:	58025458 	.word	0x58025458
 8006310:	5802546c 	.word	0x5802546c
 8006314:	58025480 	.word	0x58025480
 8006318:	58025494 	.word	0x58025494
 800631c:	cccccccd 	.word	0xcccccccd
 8006320:	16009600 	.word	0x16009600
 8006324:	58025880 	.word	0x58025880
 8006328:	aaaaaaab 	.word	0xaaaaaaab
 800632c:	400204b8 	.word	0x400204b8
 8006330:	4002040f 	.word	0x4002040f
 8006334:	10008200 	.word	0x10008200
 8006338:	40020880 	.word	0x40020880

0800633c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	b2db      	uxtb	r3, r3
 800634a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d04a      	beq.n	80063e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2b08      	cmp	r3, #8
 8006356:	d847      	bhi.n	80063e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a25      	ldr	r2, [pc, #148]	@ (80063f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d022      	beq.n	80063a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a24      	ldr	r2, [pc, #144]	@ (80063f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d01d      	beq.n	80063a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a22      	ldr	r2, [pc, #136]	@ (80063fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d018      	beq.n	80063a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a21      	ldr	r2, [pc, #132]	@ (8006400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d013      	beq.n	80063a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a1f      	ldr	r2, [pc, #124]	@ (8006404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d00e      	beq.n	80063a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a1e      	ldr	r2, [pc, #120]	@ (8006408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d009      	beq.n	80063a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a1c      	ldr	r2, [pc, #112]	@ (800640c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d004      	beq.n	80063a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a1b      	ldr	r2, [pc, #108]	@ (8006410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d101      	bne.n	80063ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80063a8:	2301      	movs	r3, #1
 80063aa:	e000      	b.n	80063ae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80063ac:	2300      	movs	r3, #0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00a      	beq.n	80063c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	4b17      	ldr	r3, [pc, #92]	@ (8006414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80063b6:	4413      	add	r3, r2
 80063b8:	009b      	lsls	r3, r3, #2
 80063ba:	461a      	mov	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	4a15      	ldr	r2, [pc, #84]	@ (8006418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80063c4:	671a      	str	r2, [r3, #112]	@ 0x70
 80063c6:	e009      	b.n	80063dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	4b14      	ldr	r3, [pc, #80]	@ (800641c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80063cc:	4413      	add	r3, r2
 80063ce:	009b      	lsls	r3, r3, #2
 80063d0:	461a      	mov	r2, r3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a11      	ldr	r2, [pc, #68]	@ (8006420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80063da:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	3b01      	subs	r3, #1
 80063e0:	2201      	movs	r2, #1
 80063e2:	409a      	lsls	r2, r3
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80063e8:	bf00      	nop
 80063ea:	3714      	adds	r7, #20
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr
 80063f4:	58025408 	.word	0x58025408
 80063f8:	5802541c 	.word	0x5802541c
 80063fc:	58025430 	.word	0x58025430
 8006400:	58025444 	.word	0x58025444
 8006404:	58025458 	.word	0x58025458
 8006408:	5802546c 	.word	0x5802546c
 800640c:	58025480 	.word	0x58025480
 8006410:	58025494 	.word	0x58025494
 8006414:	1600963f 	.word	0x1600963f
 8006418:	58025940 	.word	0x58025940
 800641c:	1000823f 	.word	0x1000823f
 8006420:	40020940 	.word	0x40020940

08006424 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	60f8      	str	r0, [r7, #12]
 800642c:	460b      	mov	r3, r1
 800642e:	607a      	str	r2, [r7, #4]
 8006430:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006432:	2300      	movs	r3, #0
 8006434:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d101      	bne.n	8006440 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e00a      	b.n	8006456 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8006440:	7afb      	ldrb	r3, [r7, #11]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d103      	bne.n	800644e <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	687a      	ldr	r2, [r7, #4]
 800644a:	605a      	str	r2, [r3, #4]
      break;
 800644c:	e002      	b.n	8006454 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	75fb      	strb	r3, [r7, #23]
      break;
 8006452:	bf00      	nop
  }

  return status;
 8006454:	7dfb      	ldrb	r3, [r7, #23]
}
 8006456:	4618      	mov	r0, r3
 8006458:	371c      	adds	r7, #28
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr

08006462 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8006462:	b480      	push	{r7}
 8006464:	b083      	sub	sp, #12
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e003      	b.n	800647e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	683a      	ldr	r2, [r7, #0]
 800647a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800647c:	2300      	movs	r3, #0
  }
}
 800647e:	4618      	mov	r0, r3
 8006480:	370c      	adds	r7, #12
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
	...

0800648c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	0c1b      	lsrs	r3, r3, #16
 800649a:	f003 0303 	and.w	r3, r3, #3
 800649e:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 031f 	and.w	r3, r3, #31
 80064a8:	2201      	movs	r2, #1
 80064aa:	fa02 f303 	lsl.w	r3, r2, r3
 80064ae:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80064b0:	f7fd fecc 	bl	800424c <HAL_GetCurrentCPUID>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d105      	bne.n	80064c6 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	011a      	lsls	r2, r3, #4
 80064be:	4b0f      	ldr	r3, [pc, #60]	@ (80064fc <HAL_EXTI_IRQHandler+0x70>)
 80064c0:	4413      	add	r3, r2
 80064c2:	617b      	str	r3, [r7, #20]
 80064c4:	e004      	b.n	80064d0 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	011a      	lsls	r2, r3, #4
 80064ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006500 <HAL_EXTI_IRQHandler+0x74>)
 80064cc:	4413      	add	r3, r2
 80064ce:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	68fa      	ldr	r2, [r7, #12]
 80064d6:	4013      	ands	r3, r2
 80064d8:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d009      	beq.n	80064f4 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	68fa      	ldr	r2, [r7, #12]
 80064e4:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d002      	beq.n	80064f4 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	685b      	ldr	r3, [r3, #4]
 80064f2:	4798      	blx	r3
    }
  }
}
 80064f4:	bf00      	nop
 80064f6:	3718      	adds	r7, #24
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	58000088 	.word	0x58000088
 8006500:	580000c8 	.word	0x580000c8

08006504 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006504:	b480      	push	{r7}
 8006506:	b089      	sub	sp, #36	@ 0x24
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800650e:	2300      	movs	r3, #0
 8006510:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006512:	4b89      	ldr	r3, [pc, #548]	@ (8006738 <HAL_GPIO_Init+0x234>)
 8006514:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006516:	e194      	b.n	8006842 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	2101      	movs	r1, #1
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	fa01 f303 	lsl.w	r3, r1, r3
 8006524:	4013      	ands	r3, r2
 8006526:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	2b00      	cmp	r3, #0
 800652c:	f000 8186 	beq.w	800683c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f003 0303 	and.w	r3, r3, #3
 8006538:	2b01      	cmp	r3, #1
 800653a:	d005      	beq.n	8006548 <HAL_GPIO_Init+0x44>
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f003 0303 	and.w	r3, r3, #3
 8006544:	2b02      	cmp	r3, #2
 8006546:	d130      	bne.n	80065aa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	005b      	lsls	r3, r3, #1
 8006552:	2203      	movs	r2, #3
 8006554:	fa02 f303 	lsl.w	r3, r2, r3
 8006558:	43db      	mvns	r3, r3
 800655a:	69ba      	ldr	r2, [r7, #24]
 800655c:	4013      	ands	r3, r2
 800655e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	68da      	ldr	r2, [r3, #12]
 8006564:	69fb      	ldr	r3, [r7, #28]
 8006566:	005b      	lsls	r3, r3, #1
 8006568:	fa02 f303 	lsl.w	r3, r2, r3
 800656c:	69ba      	ldr	r2, [r7, #24]
 800656e:	4313      	orrs	r3, r2
 8006570:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800657e:	2201      	movs	r2, #1
 8006580:	69fb      	ldr	r3, [r7, #28]
 8006582:	fa02 f303 	lsl.w	r3, r2, r3
 8006586:	43db      	mvns	r3, r3
 8006588:	69ba      	ldr	r2, [r7, #24]
 800658a:	4013      	ands	r3, r2
 800658c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	091b      	lsrs	r3, r3, #4
 8006594:	f003 0201 	and.w	r2, r3, #1
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	fa02 f303 	lsl.w	r3, r2, r3
 800659e:	69ba      	ldr	r2, [r7, #24]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	69ba      	ldr	r2, [r7, #24]
 80065a8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f003 0303 	and.w	r3, r3, #3
 80065b2:	2b03      	cmp	r3, #3
 80065b4:	d017      	beq.n	80065e6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	005b      	lsls	r3, r3, #1
 80065c0:	2203      	movs	r2, #3
 80065c2:	fa02 f303 	lsl.w	r3, r2, r3
 80065c6:	43db      	mvns	r3, r3
 80065c8:	69ba      	ldr	r2, [r7, #24]
 80065ca:	4013      	ands	r3, r2
 80065cc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	689a      	ldr	r2, [r3, #8]
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	005b      	lsls	r3, r3, #1
 80065d6:	fa02 f303 	lsl.w	r3, r2, r3
 80065da:	69ba      	ldr	r2, [r7, #24]
 80065dc:	4313      	orrs	r3, r2
 80065de:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	69ba      	ldr	r2, [r7, #24]
 80065e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f003 0303 	and.w	r3, r3, #3
 80065ee:	2b02      	cmp	r3, #2
 80065f0:	d123      	bne.n	800663a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80065f2:	69fb      	ldr	r3, [r7, #28]
 80065f4:	08da      	lsrs	r2, r3, #3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	3208      	adds	r2, #8
 80065fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006600:	69fb      	ldr	r3, [r7, #28]
 8006602:	f003 0307 	and.w	r3, r3, #7
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	220f      	movs	r2, #15
 800660a:	fa02 f303 	lsl.w	r3, r2, r3
 800660e:	43db      	mvns	r3, r3
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	4013      	ands	r3, r2
 8006614:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	691a      	ldr	r2, [r3, #16]
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	f003 0307 	and.w	r3, r3, #7
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	fa02 f303 	lsl.w	r3, r2, r3
 8006626:	69ba      	ldr	r2, [r7, #24]
 8006628:	4313      	orrs	r3, r2
 800662a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	08da      	lsrs	r2, r3, #3
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	3208      	adds	r2, #8
 8006634:	69b9      	ldr	r1, [r7, #24]
 8006636:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	005b      	lsls	r3, r3, #1
 8006644:	2203      	movs	r2, #3
 8006646:	fa02 f303 	lsl.w	r3, r2, r3
 800664a:	43db      	mvns	r3, r3
 800664c:	69ba      	ldr	r2, [r7, #24]
 800664e:	4013      	ands	r3, r2
 8006650:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	f003 0203 	and.w	r2, r3, #3
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	005b      	lsls	r3, r3, #1
 800665e:	fa02 f303 	lsl.w	r3, r2, r3
 8006662:	69ba      	ldr	r2, [r7, #24]
 8006664:	4313      	orrs	r3, r2
 8006666:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	69ba      	ldr	r2, [r7, #24]
 800666c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006676:	2b00      	cmp	r3, #0
 8006678:	f000 80e0 	beq.w	800683c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800667c:	4b2f      	ldr	r3, [pc, #188]	@ (800673c <HAL_GPIO_Init+0x238>)
 800667e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006682:	4a2e      	ldr	r2, [pc, #184]	@ (800673c <HAL_GPIO_Init+0x238>)
 8006684:	f043 0302 	orr.w	r3, r3, #2
 8006688:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800668c:	4b2b      	ldr	r3, [pc, #172]	@ (800673c <HAL_GPIO_Init+0x238>)
 800668e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006692:	f003 0302 	and.w	r3, r3, #2
 8006696:	60fb      	str	r3, [r7, #12]
 8006698:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800669a:	4a29      	ldr	r2, [pc, #164]	@ (8006740 <HAL_GPIO_Init+0x23c>)
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	089b      	lsrs	r3, r3, #2
 80066a0:	3302      	adds	r3, #2
 80066a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	f003 0303 	and.w	r3, r3, #3
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	220f      	movs	r2, #15
 80066b2:	fa02 f303 	lsl.w	r3, r2, r3
 80066b6:	43db      	mvns	r3, r3
 80066b8:	69ba      	ldr	r2, [r7, #24]
 80066ba:	4013      	ands	r3, r2
 80066bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a20      	ldr	r2, [pc, #128]	@ (8006744 <HAL_GPIO_Init+0x240>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d052      	beq.n	800676c <HAL_GPIO_Init+0x268>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a1f      	ldr	r2, [pc, #124]	@ (8006748 <HAL_GPIO_Init+0x244>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d031      	beq.n	8006732 <HAL_GPIO_Init+0x22e>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a1e      	ldr	r2, [pc, #120]	@ (800674c <HAL_GPIO_Init+0x248>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d02b      	beq.n	800672e <HAL_GPIO_Init+0x22a>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006750 <HAL_GPIO_Init+0x24c>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d025      	beq.n	800672a <HAL_GPIO_Init+0x226>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a1c      	ldr	r2, [pc, #112]	@ (8006754 <HAL_GPIO_Init+0x250>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d01f      	beq.n	8006726 <HAL_GPIO_Init+0x222>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006758 <HAL_GPIO_Init+0x254>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d019      	beq.n	8006722 <HAL_GPIO_Init+0x21e>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a1a      	ldr	r2, [pc, #104]	@ (800675c <HAL_GPIO_Init+0x258>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d013      	beq.n	800671e <HAL_GPIO_Init+0x21a>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a19      	ldr	r2, [pc, #100]	@ (8006760 <HAL_GPIO_Init+0x25c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d00d      	beq.n	800671a <HAL_GPIO_Init+0x216>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a18      	ldr	r2, [pc, #96]	@ (8006764 <HAL_GPIO_Init+0x260>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d007      	beq.n	8006716 <HAL_GPIO_Init+0x212>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a17      	ldr	r2, [pc, #92]	@ (8006768 <HAL_GPIO_Init+0x264>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d101      	bne.n	8006712 <HAL_GPIO_Init+0x20e>
 800670e:	2309      	movs	r3, #9
 8006710:	e02d      	b.n	800676e <HAL_GPIO_Init+0x26a>
 8006712:	230a      	movs	r3, #10
 8006714:	e02b      	b.n	800676e <HAL_GPIO_Init+0x26a>
 8006716:	2308      	movs	r3, #8
 8006718:	e029      	b.n	800676e <HAL_GPIO_Init+0x26a>
 800671a:	2307      	movs	r3, #7
 800671c:	e027      	b.n	800676e <HAL_GPIO_Init+0x26a>
 800671e:	2306      	movs	r3, #6
 8006720:	e025      	b.n	800676e <HAL_GPIO_Init+0x26a>
 8006722:	2305      	movs	r3, #5
 8006724:	e023      	b.n	800676e <HAL_GPIO_Init+0x26a>
 8006726:	2304      	movs	r3, #4
 8006728:	e021      	b.n	800676e <HAL_GPIO_Init+0x26a>
 800672a:	2303      	movs	r3, #3
 800672c:	e01f      	b.n	800676e <HAL_GPIO_Init+0x26a>
 800672e:	2302      	movs	r3, #2
 8006730:	e01d      	b.n	800676e <HAL_GPIO_Init+0x26a>
 8006732:	2301      	movs	r3, #1
 8006734:	e01b      	b.n	800676e <HAL_GPIO_Init+0x26a>
 8006736:	bf00      	nop
 8006738:	58000080 	.word	0x58000080
 800673c:	58024400 	.word	0x58024400
 8006740:	58000400 	.word	0x58000400
 8006744:	58020000 	.word	0x58020000
 8006748:	58020400 	.word	0x58020400
 800674c:	58020800 	.word	0x58020800
 8006750:	58020c00 	.word	0x58020c00
 8006754:	58021000 	.word	0x58021000
 8006758:	58021400 	.word	0x58021400
 800675c:	58021800 	.word	0x58021800
 8006760:	58021c00 	.word	0x58021c00
 8006764:	58022000 	.word	0x58022000
 8006768:	58022400 	.word	0x58022400
 800676c:	2300      	movs	r3, #0
 800676e:	69fa      	ldr	r2, [r7, #28]
 8006770:	f002 0203 	and.w	r2, r2, #3
 8006774:	0092      	lsls	r2, r2, #2
 8006776:	4093      	lsls	r3, r2
 8006778:	69ba      	ldr	r2, [r7, #24]
 800677a:	4313      	orrs	r3, r2
 800677c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800677e:	4938      	ldr	r1, [pc, #224]	@ (8006860 <HAL_GPIO_Init+0x35c>)
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	089b      	lsrs	r3, r3, #2
 8006784:	3302      	adds	r3, #2
 8006786:	69ba      	ldr	r2, [r7, #24]
 8006788:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800678c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	43db      	mvns	r3, r3
 8006798:	69ba      	ldr	r2, [r7, #24]
 800679a:	4013      	ands	r3, r2
 800679c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80067aa:	69ba      	ldr	r2, [r7, #24]
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	4313      	orrs	r3, r2
 80067b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80067b2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80067ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	43db      	mvns	r3, r3
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	4013      	ands	r3, r2
 80067ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d003      	beq.n	80067e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80067d8:	69ba      	ldr	r2, [r7, #24]
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	4313      	orrs	r3, r2
 80067de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80067e0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	43db      	mvns	r3, r3
 80067f2:	69ba      	ldr	r2, [r7, #24]
 80067f4:	4013      	ands	r3, r2
 80067f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006800:	2b00      	cmp	r3, #0
 8006802:	d003      	beq.n	800680c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006804:	69ba      	ldr	r2, [r7, #24]
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	4313      	orrs	r3, r2
 800680a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	69ba      	ldr	r2, [r7, #24]
 8006810:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	43db      	mvns	r3, r3
 800681c:	69ba      	ldr	r2, [r7, #24]
 800681e:	4013      	ands	r3, r2
 8006820:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d003      	beq.n	8006836 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800682e:	69ba      	ldr	r2, [r7, #24]
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	4313      	orrs	r3, r2
 8006834:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	69ba      	ldr	r2, [r7, #24]
 800683a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	3301      	adds	r3, #1
 8006840:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	69fb      	ldr	r3, [r7, #28]
 8006848:	fa22 f303 	lsr.w	r3, r2, r3
 800684c:	2b00      	cmp	r3, #0
 800684e:	f47f ae63 	bne.w	8006518 <HAL_GPIO_Init+0x14>
  }
}
 8006852:	bf00      	nop
 8006854:	bf00      	nop
 8006856:	3724      	adds	r7, #36	@ 0x24
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr
 8006860:	58000400 	.word	0x58000400

08006864 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	460b      	mov	r3, r1
 800686e:	807b      	strh	r3, [r7, #2]
 8006870:	4613      	mov	r3, r2
 8006872:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006874:	787b      	ldrb	r3, [r7, #1]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800687a:	887a      	ldrh	r2, [r7, #2]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006880:	e003      	b.n	800688a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8006882:	887b      	ldrh	r3, [r7, #2]
 8006884:	041a      	lsls	r2, r3, #16
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	619a      	str	r2, [r3, #24]
}
 800688a:	bf00      	nop
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006896:	b480      	push	{r7}
 8006898:	b085      	sub	sp, #20
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
 800689e:	460b      	mov	r3, r1
 80068a0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	695b      	ldr	r3, [r3, #20]
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80068a8:	887a      	ldrh	r2, [r7, #2]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	4013      	ands	r3, r2
 80068ae:	041a      	lsls	r2, r3, #16
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	43d9      	mvns	r1, r3
 80068b4:	887b      	ldrh	r3, [r7, #2]
 80068b6:	400b      	ands	r3, r1
 80068b8:	431a      	orrs	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	619a      	str	r2, [r3, #24]
}
 80068be:	bf00      	nop
 80068c0:	3714      	adds	r7, #20
 80068c2:	46bd      	mov	sp, r7
 80068c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c8:	4770      	bx	lr
	...

080068cc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80068d4:	4a08      	ldr	r2, [pc, #32]	@ (80068f8 <HAL_HSEM_FastTake+0x2c>)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	3320      	adds	r3, #32
 80068da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068de:	4a07      	ldr	r2, [pc, #28]	@ (80068fc <HAL_HSEM_FastTake+0x30>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d101      	bne.n	80068e8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80068e4:	2300      	movs	r3, #0
 80068e6:	e000      	b.n	80068ea <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	58026400 	.word	0x58026400
 80068fc:	80000300 	.word	0x80000300

08006900 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800690a:	4906      	ldr	r1, [pc, #24]	@ (8006924 <HAL_HSEM_Release+0x24>)
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr
 8006924:	58026400 	.word	0x58026400

08006928 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b086      	sub	sp, #24
 800692c:	af02      	add	r7, sp, #8
 800692e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d101      	bne.n	800693a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006936:	2301      	movs	r3, #1
 8006938:	e0fe      	b.n	8006b38 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	d106      	bne.n	8006954 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f00b f8ea 	bl	8011b28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2203      	movs	r2, #3
 8006958:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4618      	mov	r0, r3
 8006962:	f007 fd14 	bl	800e38e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6818      	ldr	r0, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	7c1a      	ldrb	r2, [r3, #16]
 800696e:	f88d 2000 	strb.w	r2, [sp]
 8006972:	3304      	adds	r3, #4
 8006974:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006976:	f007 fbe5 	bl	800e144 <USB_CoreInit>
 800697a:	4603      	mov	r3, r0
 800697c:	2b00      	cmp	r3, #0
 800697e:	d005      	beq.n	800698c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2202      	movs	r2, #2
 8006984:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e0d5      	b.n	8006b38 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	2100      	movs	r1, #0
 8006992:	4618      	mov	r0, r3
 8006994:	f007 fd0c 	bl	800e3b0 <USB_SetCurrentMode>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d005      	beq.n	80069aa <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2202      	movs	r2, #2
 80069a2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	e0c6      	b.n	8006b38 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069aa:	2300      	movs	r3, #0
 80069ac:	73fb      	strb	r3, [r7, #15]
 80069ae:	e04a      	b.n	8006a46 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80069b0:	7bfa      	ldrb	r2, [r7, #15]
 80069b2:	6879      	ldr	r1, [r7, #4]
 80069b4:	4613      	mov	r3, r2
 80069b6:	00db      	lsls	r3, r3, #3
 80069b8:	4413      	add	r3, r2
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	440b      	add	r3, r1
 80069be:	3315      	adds	r3, #21
 80069c0:	2201      	movs	r2, #1
 80069c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80069c4:	7bfa      	ldrb	r2, [r7, #15]
 80069c6:	6879      	ldr	r1, [r7, #4]
 80069c8:	4613      	mov	r3, r2
 80069ca:	00db      	lsls	r3, r3, #3
 80069cc:	4413      	add	r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	440b      	add	r3, r1
 80069d2:	3314      	adds	r3, #20
 80069d4:	7bfa      	ldrb	r2, [r7, #15]
 80069d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80069d8:	7bfa      	ldrb	r2, [r7, #15]
 80069da:	7bfb      	ldrb	r3, [r7, #15]
 80069dc:	b298      	uxth	r0, r3
 80069de:	6879      	ldr	r1, [r7, #4]
 80069e0:	4613      	mov	r3, r2
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	4413      	add	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	440b      	add	r3, r1
 80069ea:	332e      	adds	r3, #46	@ 0x2e
 80069ec:	4602      	mov	r2, r0
 80069ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80069f0:	7bfa      	ldrb	r2, [r7, #15]
 80069f2:	6879      	ldr	r1, [r7, #4]
 80069f4:	4613      	mov	r3, r2
 80069f6:	00db      	lsls	r3, r3, #3
 80069f8:	4413      	add	r3, r2
 80069fa:	009b      	lsls	r3, r3, #2
 80069fc:	440b      	add	r3, r1
 80069fe:	3318      	adds	r3, #24
 8006a00:	2200      	movs	r2, #0
 8006a02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006a04:	7bfa      	ldrb	r2, [r7, #15]
 8006a06:	6879      	ldr	r1, [r7, #4]
 8006a08:	4613      	mov	r3, r2
 8006a0a:	00db      	lsls	r3, r3, #3
 8006a0c:	4413      	add	r3, r2
 8006a0e:	009b      	lsls	r3, r3, #2
 8006a10:	440b      	add	r3, r1
 8006a12:	331c      	adds	r3, #28
 8006a14:	2200      	movs	r2, #0
 8006a16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006a18:	7bfa      	ldrb	r2, [r7, #15]
 8006a1a:	6879      	ldr	r1, [r7, #4]
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	00db      	lsls	r3, r3, #3
 8006a20:	4413      	add	r3, r2
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	440b      	add	r3, r1
 8006a26:	3320      	adds	r3, #32
 8006a28:	2200      	movs	r2, #0
 8006a2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006a2c:	7bfa      	ldrb	r2, [r7, #15]
 8006a2e:	6879      	ldr	r1, [r7, #4]
 8006a30:	4613      	mov	r3, r2
 8006a32:	00db      	lsls	r3, r3, #3
 8006a34:	4413      	add	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	440b      	add	r3, r1
 8006a3a:	3324      	adds	r3, #36	@ 0x24
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a40:	7bfb      	ldrb	r3, [r7, #15]
 8006a42:	3301      	adds	r3, #1
 8006a44:	73fb      	strb	r3, [r7, #15]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	791b      	ldrb	r3, [r3, #4]
 8006a4a:	7bfa      	ldrb	r2, [r7, #15]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d3af      	bcc.n	80069b0 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a50:	2300      	movs	r3, #0
 8006a52:	73fb      	strb	r3, [r7, #15]
 8006a54:	e044      	b.n	8006ae0 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006a56:	7bfa      	ldrb	r2, [r7, #15]
 8006a58:	6879      	ldr	r1, [r7, #4]
 8006a5a:	4613      	mov	r3, r2
 8006a5c:	00db      	lsls	r3, r3, #3
 8006a5e:	4413      	add	r3, r2
 8006a60:	009b      	lsls	r3, r3, #2
 8006a62:	440b      	add	r3, r1
 8006a64:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006a68:	2200      	movs	r2, #0
 8006a6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006a6c:	7bfa      	ldrb	r2, [r7, #15]
 8006a6e:	6879      	ldr	r1, [r7, #4]
 8006a70:	4613      	mov	r3, r2
 8006a72:	00db      	lsls	r3, r3, #3
 8006a74:	4413      	add	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	440b      	add	r3, r1
 8006a7a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006a7e:	7bfa      	ldrb	r2, [r7, #15]
 8006a80:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006a82:	7bfa      	ldrb	r2, [r7, #15]
 8006a84:	6879      	ldr	r1, [r7, #4]
 8006a86:	4613      	mov	r3, r2
 8006a88:	00db      	lsls	r3, r3, #3
 8006a8a:	4413      	add	r3, r2
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	440b      	add	r3, r1
 8006a90:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006a94:	2200      	movs	r2, #0
 8006a96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006a98:	7bfa      	ldrb	r2, [r7, #15]
 8006a9a:	6879      	ldr	r1, [r7, #4]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	00db      	lsls	r3, r3, #3
 8006aa0:	4413      	add	r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	440b      	add	r3, r1
 8006aa6:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006aaa:	2200      	movs	r2, #0
 8006aac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006aae:	7bfa      	ldrb	r2, [r7, #15]
 8006ab0:	6879      	ldr	r1, [r7, #4]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	00db      	lsls	r3, r3, #3
 8006ab6:	4413      	add	r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	440b      	add	r3, r1
 8006abc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006ac4:	7bfa      	ldrb	r2, [r7, #15]
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	4613      	mov	r3, r2
 8006aca:	00db      	lsls	r3, r3, #3
 8006acc:	4413      	add	r3, r2
 8006ace:	009b      	lsls	r3, r3, #2
 8006ad0:	440b      	add	r3, r1
 8006ad2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006ada:	7bfb      	ldrb	r3, [r7, #15]
 8006adc:	3301      	adds	r3, #1
 8006ade:	73fb      	strb	r3, [r7, #15]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	791b      	ldrb	r3, [r3, #4]
 8006ae4:	7bfa      	ldrb	r2, [r7, #15]
 8006ae6:	429a      	cmp	r2, r3
 8006ae8:	d3b5      	bcc.n	8006a56 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6818      	ldr	r0, [r3, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	7c1a      	ldrb	r2, [r3, #16]
 8006af2:	f88d 2000 	strb.w	r2, [sp]
 8006af6:	3304      	adds	r3, #4
 8006af8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006afa:	f007 fca5 	bl	800e448 <USB_DevInit>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d005      	beq.n	8006b10 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2202      	movs	r2, #2
 8006b08:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e013      	b.n	8006b38 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	7b1b      	ldrb	r3, [r3, #12]
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d102      	bne.n	8006b2c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f001 f96c 	bl	8007e04 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4618      	mov	r0, r3
 8006b32:	f008 fce4 	bl	800f4fe <USB_DevDisconnect>

  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}

08006b40 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d101      	bne.n	8006b5c <HAL_PCD_Start+0x1c>
 8006b58:	2302      	movs	r3, #2
 8006b5a:	e022      	b.n	8006ba2 <HAL_PCD_Start+0x62>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d009      	beq.n	8006b84 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d105      	bne.n	8006b84 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b7c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4618      	mov	r0, r3
 8006b8a:	f007 fbef 	bl	800e36c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4618      	mov	r0, r3
 8006b94:	f008 fc92 	bl	800f4bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3710      	adds	r7, #16
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}

08006baa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006baa:	b590      	push	{r4, r7, lr}
 8006bac:	b08d      	sub	sp, #52	@ 0x34
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f008 fd50 	bl	800f666 <USB_GetMode>
 8006bc6:	4603      	mov	r3, r0
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	f040 84b9 	bne.w	8007540 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f008 fcb4 	bl	800f540 <USB_ReadInterrupts>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f000 84af 	beq.w	800753e <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006be0:	69fb      	ldr	r3, [r7, #28]
 8006be2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	0a1b      	lsrs	r3, r3, #8
 8006bea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f008 fca1 	bl	800f540 <USB_ReadInterrupts>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	f003 0302 	and.w	r3, r3, #2
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d107      	bne.n	8006c18 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	695a      	ldr	r2, [r3, #20]
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f002 0202 	and.w	r2, r2, #2
 8006c16:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	f008 fc8f 	bl	800f540 <USB_ReadInterrupts>
 8006c22:	4603      	mov	r3, r0
 8006c24:	f003 0310 	and.w	r3, r3, #16
 8006c28:	2b10      	cmp	r3, #16
 8006c2a:	d161      	bne.n	8006cf0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	699a      	ldr	r2, [r3, #24]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f022 0210 	bic.w	r2, r2, #16
 8006c3a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006c3c:	6a3b      	ldr	r3, [r7, #32]
 8006c3e:	6a1b      	ldr	r3, [r3, #32]
 8006c40:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	f003 020f 	and.w	r2, r3, #15
 8006c48:	4613      	mov	r3, r2
 8006c4a:	00db      	lsls	r3, r3, #3
 8006c4c:	4413      	add	r3, r2
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	4413      	add	r3, r2
 8006c58:	3304      	adds	r3, #4
 8006c5a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006c5c:	69bb      	ldr	r3, [r7, #24]
 8006c5e:	0c5b      	lsrs	r3, r3, #17
 8006c60:	f003 030f 	and.w	r3, r3, #15
 8006c64:	2b02      	cmp	r3, #2
 8006c66:	d124      	bne.n	8006cb2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006c68:	69ba      	ldr	r2, [r7, #24]
 8006c6a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006c6e:	4013      	ands	r3, r2
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d035      	beq.n	8006ce0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	091b      	lsrs	r3, r3, #4
 8006c7c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006c7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c82:	b29b      	uxth	r3, r3
 8006c84:	461a      	mov	r2, r3
 8006c86:	6a38      	ldr	r0, [r7, #32]
 8006c88:	f008 fac6 	bl	800f218 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	68da      	ldr	r2, [r3, #12]
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	091b      	lsrs	r3, r3, #4
 8006c94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c98:	441a      	add	r2, r3
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	695a      	ldr	r2, [r3, #20]
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	091b      	lsrs	r3, r3, #4
 8006ca6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006caa:	441a      	add	r2, r3
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	615a      	str	r2, [r3, #20]
 8006cb0:	e016      	b.n	8006ce0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	0c5b      	lsrs	r3, r3, #17
 8006cb6:	f003 030f 	and.w	r3, r3, #15
 8006cba:	2b06      	cmp	r3, #6
 8006cbc:	d110      	bne.n	8006ce0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006cc4:	2208      	movs	r2, #8
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	6a38      	ldr	r0, [r7, #32]
 8006cca:	f008 faa5 	bl	800f218 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	695a      	ldr	r2, [r3, #20]
 8006cd2:	69bb      	ldr	r3, [r7, #24]
 8006cd4:	091b      	lsrs	r3, r3, #4
 8006cd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cda:	441a      	add	r2, r3
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	699a      	ldr	r2, [r3, #24]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f042 0210 	orr.w	r2, r2, #16
 8006cee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4618      	mov	r0, r3
 8006cf6:	f008 fc23 	bl	800f540 <USB_ReadInterrupts>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006d00:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006d04:	f040 80a7 	bne.w	8006e56 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4618      	mov	r0, r3
 8006d12:	f008 fc28 	bl	800f566 <USB_ReadDevAllOutEpInterrupt>
 8006d16:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006d18:	e099      	b.n	8006e4e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d1c:	f003 0301 	and.w	r3, r3, #1
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	f000 808e 	beq.w	8006e42 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d2c:	b2d2      	uxtb	r2, r2
 8006d2e:	4611      	mov	r1, r2
 8006d30:	4618      	mov	r0, r3
 8006d32:	f008 fc4c 	bl	800f5ce <USB_ReadDevOutEPInterrupt>
 8006d36:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00c      	beq.n	8006d5c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d4e:	461a      	mov	r2, r3
 8006d50:	2301      	movs	r3, #1
 8006d52:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006d54:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 fece 	bl	8007af8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	f003 0308 	and.w	r3, r3, #8
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00c      	beq.n	8006d80 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d68:	015a      	lsls	r2, r3, #5
 8006d6a:	69fb      	ldr	r3, [r7, #28]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d72:	461a      	mov	r2, r3
 8006d74:	2308      	movs	r3, #8
 8006d76:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006d78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 ffa4 	bl	8007cc8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	f003 0310 	and.w	r3, r3, #16
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d008      	beq.n	8006d9c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	69fb      	ldr	r3, [r7, #28]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d96:	461a      	mov	r2, r3
 8006d98:	2310      	movs	r3, #16
 8006d9a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	f003 0302 	and.w	r3, r3, #2
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d030      	beq.n	8006e08 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006da6:	6a3b      	ldr	r3, [r7, #32]
 8006da8:	695b      	ldr	r3, [r3, #20]
 8006daa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006dae:	2b80      	cmp	r3, #128	@ 0x80
 8006db0:	d109      	bne.n	8006dc6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	69fa      	ldr	r2, [r7, #28]
 8006dbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006dc0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006dc4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dc8:	4613      	mov	r3, r2
 8006dca:	00db      	lsls	r3, r3, #3
 8006dcc:	4413      	add	r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006dd4:	687a      	ldr	r2, [r7, #4]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	3304      	adds	r3, #4
 8006dda:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	78db      	ldrb	r3, [r3, #3]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d108      	bne.n	8006df6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	2200      	movs	r2, #0
 8006de8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	4619      	mov	r1, r3
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	f00a ffcf 	bl	8011d94 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df8:	015a      	lsls	r2, r3, #5
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e02:	461a      	mov	r2, r3
 8006e04:	2302      	movs	r3, #2
 8006e06:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	f003 0320 	and.w	r3, r3, #32
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d008      	beq.n	8006e24 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e14:	015a      	lsls	r2, r3, #5
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	4413      	add	r3, r2
 8006e1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e1e:	461a      	mov	r2, r3
 8006e20:	2320      	movs	r3, #32
 8006e22:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d009      	beq.n	8006e42 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e30:	015a      	lsls	r2, r3, #5
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	4413      	add	r3, r2
 8006e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006e40:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e44:	3301      	adds	r3, #1
 8006e46:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e4a:	085b      	lsrs	r3, r3, #1
 8006e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f47f af62 	bne.w	8006d1a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f008 fb70 	bl	800f540 <USB_ReadInterrupts>
 8006e60:	4603      	mov	r3, r0
 8006e62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e66:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006e6a:	f040 80db 	bne.w	8007024 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4618      	mov	r0, r3
 8006e74:	f008 fb91 	bl	800f59a <USB_ReadDevAllInEpInterrupt>
 8006e78:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006e7e:	e0cd      	b.n	800701c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	f000 80c2 	beq.w	8007010 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e92:	b2d2      	uxtb	r2, r2
 8006e94:	4611      	mov	r1, r2
 8006e96:	4618      	mov	r0, r3
 8006e98:	f008 fbb7 	bl	800f60a <USB_ReadDevInEPInterrupt>
 8006e9c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d057      	beq.n	8006f58 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eaa:	f003 030f 	and.w	r3, r3, #15
 8006eae:	2201      	movs	r2, #1
 8006eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006eb6:	69fb      	ldr	r3, [r7, #28]
 8006eb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ebc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	43db      	mvns	r3, r3
 8006ec2:	69f9      	ldr	r1, [r7, #28]
 8006ec4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006ec8:	4013      	ands	r3, r2
 8006eca:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ed8:	461a      	mov	r2, r3
 8006eda:	2301      	movs	r3, #1
 8006edc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	799b      	ldrb	r3, [r3, #6]
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d132      	bne.n	8006f4c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006ee6:	6879      	ldr	r1, [r7, #4]
 8006ee8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eea:	4613      	mov	r3, r2
 8006eec:	00db      	lsls	r3, r3, #3
 8006eee:	4413      	add	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	440b      	add	r3, r1
 8006ef4:	3320      	adds	r3, #32
 8006ef6:	6819      	ldr	r1, [r3, #0]
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006efc:	4613      	mov	r3, r2
 8006efe:	00db      	lsls	r3, r3, #3
 8006f00:	4413      	add	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	4403      	add	r3, r0
 8006f06:	331c      	adds	r3, #28
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4419      	add	r1, r3
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f10:	4613      	mov	r3, r2
 8006f12:	00db      	lsls	r3, r3, #3
 8006f14:	4413      	add	r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	4403      	add	r3, r0
 8006f1a:	3320      	adds	r3, #32
 8006f1c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d113      	bne.n	8006f4c <HAL_PCD_IRQHandler+0x3a2>
 8006f24:	6879      	ldr	r1, [r7, #4]
 8006f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f28:	4613      	mov	r3, r2
 8006f2a:	00db      	lsls	r3, r3, #3
 8006f2c:	4413      	add	r3, r2
 8006f2e:	009b      	lsls	r3, r3, #2
 8006f30:	440b      	add	r3, r1
 8006f32:	3324      	adds	r3, #36	@ 0x24
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d108      	bne.n	8006f4c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6818      	ldr	r0, [r3, #0]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006f44:	461a      	mov	r2, r3
 8006f46:	2101      	movs	r1, #1
 8006f48:	f008 fbc0 	bl	800f6cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	4619      	mov	r1, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f00a fe99 	bl	8011c8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	f003 0308 	and.w	r3, r3, #8
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d008      	beq.n	8006f74 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f64:	015a      	lsls	r2, r3, #5
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	4413      	add	r3, r2
 8006f6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f6e:	461a      	mov	r2, r3
 8006f70:	2308      	movs	r3, #8
 8006f72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006f74:	693b      	ldr	r3, [r7, #16]
 8006f76:	f003 0310 	and.w	r3, r3, #16
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d008      	beq.n	8006f90 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f80:	015a      	lsls	r2, r3, #5
 8006f82:	69fb      	ldr	r3, [r7, #28]
 8006f84:	4413      	add	r3, r2
 8006f86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	2310      	movs	r3, #16
 8006f8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d008      	beq.n	8006fac <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9c:	015a      	lsls	r2, r3, #5
 8006f9e:	69fb      	ldr	r3, [r7, #28]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	2340      	movs	r3, #64	@ 0x40
 8006faa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	f003 0302 	and.w	r3, r3, #2
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d023      	beq.n	8006ffe <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006fb6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006fb8:	6a38      	ldr	r0, [r7, #32]
 8006fba:	f007 fba3 	bl	800e704 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006fbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	00db      	lsls	r3, r3, #3
 8006fc4:	4413      	add	r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	3310      	adds	r3, #16
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	4413      	add	r3, r2
 8006fce:	3304      	adds	r3, #4
 8006fd0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	78db      	ldrb	r3, [r3, #3]
 8006fd6:	2b01      	cmp	r3, #1
 8006fd8:	d108      	bne.n	8006fec <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f00a fee6 	bl	8011db8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fee:	015a      	lsls	r2, r3, #5
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ff8:	461a      	mov	r2, r3
 8006ffa:	2302      	movs	r3, #2
 8006ffc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007008:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800700a:	6878      	ldr	r0, [r7, #4]
 800700c:	f000 fce8 	bl	80079e0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007012:	3301      	adds	r3, #1
 8007014:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007018:	085b      	lsrs	r3, r3, #1
 800701a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800701c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800701e:	2b00      	cmp	r3, #0
 8007020:	f47f af2e 	bne.w	8006e80 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4618      	mov	r0, r3
 800702a:	f008 fa89 	bl	800f540 <USB_ReadInterrupts>
 800702e:	4603      	mov	r3, r0
 8007030:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007034:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007038:	d122      	bne.n	8007080 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	69fa      	ldr	r2, [r7, #28]
 8007044:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007048:	f023 0301 	bic.w	r3, r3, #1
 800704c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007054:	2b01      	cmp	r3, #1
 8007056:	d108      	bne.n	800706a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007060:	2100      	movs	r1, #0
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f000 fef2 	bl	8007e4c <HAL_PCDEx_LPM_Callback>
 8007068:	e002      	b.n	8007070 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f00a fe84 	bl	8011d78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	695a      	ldr	r2, [r3, #20]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800707e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4618      	mov	r0, r3
 8007086:	f008 fa5b 	bl	800f540 <USB_ReadInterrupts>
 800708a:	4603      	mov	r3, r0
 800708c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007090:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007094:	d112      	bne.n	80070bc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	f003 0301 	and.w	r3, r3, #1
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d102      	bne.n	80070ac <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f00a fe40 	bl	8011d2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	695a      	ldr	r2, [r3, #20]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80070ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4618      	mov	r0, r3
 80070c2:	f008 fa3d 	bl	800f540 <USB_ReadInterrupts>
 80070c6:	4603      	mov	r3, r0
 80070c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80070cc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80070d0:	d121      	bne.n	8007116 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	695a      	ldr	r2, [r3, #20]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 80070e0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d111      	bne.n	8007110 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80070fa:	089b      	lsrs	r3, r3, #2
 80070fc:	f003 020f 	and.w	r2, r3, #15
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8007106:	2101      	movs	r1, #1
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 fe9f 	bl	8007e4c <HAL_PCDEx_LPM_Callback>
 800710e:	e002      	b.n	8007116 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f00a fe0b 	bl	8011d2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4618      	mov	r0, r3
 800711c:	f008 fa10 	bl	800f540 <USB_ReadInterrupts>
 8007120:	4603      	mov	r3, r0
 8007122:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007126:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800712a:	f040 80b7 	bne.w	800729c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	69fa      	ldr	r2, [r7, #28]
 8007138:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800713c:	f023 0301 	bic.w	r3, r3, #1
 8007140:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2110      	movs	r1, #16
 8007148:	4618      	mov	r0, r3
 800714a:	f007 fadb 	bl	800e704 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800714e:	2300      	movs	r3, #0
 8007150:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007152:	e046      	b.n	80071e2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007156:	015a      	lsls	r2, r3, #5
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	4413      	add	r3, r2
 800715c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007160:	461a      	mov	r2, r3
 8007162:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007166:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800716a:	015a      	lsls	r2, r3, #5
 800716c:	69fb      	ldr	r3, [r7, #28]
 800716e:	4413      	add	r3, r2
 8007170:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007178:	0151      	lsls	r1, r2, #5
 800717a:	69fa      	ldr	r2, [r7, #28]
 800717c:	440a      	add	r2, r1
 800717e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007182:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007186:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800718a:	015a      	lsls	r2, r3, #5
 800718c:	69fb      	ldr	r3, [r7, #28]
 800718e:	4413      	add	r3, r2
 8007190:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007194:	461a      	mov	r2, r3
 8007196:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800719a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800719c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071ac:	0151      	lsls	r1, r2, #5
 80071ae:	69fa      	ldr	r2, [r7, #28]
 80071b0:	440a      	add	r2, r1
 80071b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071b6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80071ba:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80071bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071be:	015a      	lsls	r2, r3, #5
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	4413      	add	r3, r2
 80071c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071cc:	0151      	lsls	r1, r2, #5
 80071ce:	69fa      	ldr	r2, [r7, #28]
 80071d0:	440a      	add	r2, r1
 80071d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80071d6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80071da:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071de:	3301      	adds	r3, #1
 80071e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	791b      	ldrb	r3, [r3, #4]
 80071e6:	461a      	mov	r2, r3
 80071e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d3b2      	bcc.n	8007154 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071f4:	69db      	ldr	r3, [r3, #28]
 80071f6:	69fa      	ldr	r2, [r7, #28]
 80071f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071fc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007200:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	7bdb      	ldrb	r3, [r3, #15]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d016      	beq.n	8007238 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007210:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007214:	69fa      	ldr	r2, [r7, #28]
 8007216:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800721a:	f043 030b 	orr.w	r3, r3, #11
 800721e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800722a:	69fa      	ldr	r2, [r7, #28]
 800722c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007230:	f043 030b 	orr.w	r3, r3, #11
 8007234:	6453      	str	r3, [r2, #68]	@ 0x44
 8007236:	e015      	b.n	8007264 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007238:	69fb      	ldr	r3, [r7, #28]
 800723a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800723e:	695a      	ldr	r2, [r3, #20]
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007246:	4619      	mov	r1, r3
 8007248:	f242 032b 	movw	r3, #8235	@ 0x202b
 800724c:	4313      	orrs	r3, r2
 800724e:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007250:	69fb      	ldr	r3, [r7, #28]
 8007252:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	69fa      	ldr	r2, [r7, #28]
 800725a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800725e:	f043 030b 	orr.w	r3, r3, #11
 8007262:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007264:	69fb      	ldr	r3, [r7, #28]
 8007266:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	69fa      	ldr	r2, [r7, #28]
 800726e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007272:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007276:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6818      	ldr	r0, [r3, #0]
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007286:	461a      	mov	r2, r3
 8007288:	f008 fa20 	bl	800f6cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	695a      	ldr	r2, [r3, #20]
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800729a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4618      	mov	r0, r3
 80072a2:	f008 f94d 	bl	800f540 <USB_ReadInterrupts>
 80072a6:	4603      	mov	r3, r0
 80072a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80072ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072b0:	d123      	bne.n	80072fa <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4618      	mov	r0, r3
 80072b8:	f008 f9e4 	bl	800f684 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4618      	mov	r0, r3
 80072c2:	f007 fa98 	bl	800e7f6 <USB_GetDevSpeed>
 80072c6:	4603      	mov	r3, r0
 80072c8:	461a      	mov	r2, r3
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681c      	ldr	r4, [r3, #0]
 80072d2:	f001 fdbb 	bl	8008e4c <HAL_RCC_GetHCLKFreq>
 80072d6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80072dc:	461a      	mov	r2, r3
 80072de:	4620      	mov	r0, r4
 80072e0:	f006 ffa2 	bl	800e228 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80072e4:	6878      	ldr	r0, [r7, #4]
 80072e6:	f00a fcf8 	bl	8011cda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	695a      	ldr	r2, [r3, #20]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80072f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4618      	mov	r0, r3
 8007300:	f008 f91e 	bl	800f540 <USB_ReadInterrupts>
 8007304:	4603      	mov	r3, r0
 8007306:	f003 0308 	and.w	r3, r3, #8
 800730a:	2b08      	cmp	r3, #8
 800730c:	d10a      	bne.n	8007324 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f00a fcd5 	bl	8011cbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	695a      	ldr	r2, [r3, #20]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f002 0208 	and.w	r2, r2, #8
 8007322:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4618      	mov	r0, r3
 800732a:	f008 f909 	bl	800f540 <USB_ReadInterrupts>
 800732e:	4603      	mov	r3, r0
 8007330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007334:	2b80      	cmp	r3, #128	@ 0x80
 8007336:	d123      	bne.n	8007380 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007338:	6a3b      	ldr	r3, [r7, #32]
 800733a:	699b      	ldr	r3, [r3, #24]
 800733c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007344:	2301      	movs	r3, #1
 8007346:	627b      	str	r3, [r7, #36]	@ 0x24
 8007348:	e014      	b.n	8007374 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800734a:	6879      	ldr	r1, [r7, #4]
 800734c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800734e:	4613      	mov	r3, r2
 8007350:	00db      	lsls	r3, r3, #3
 8007352:	4413      	add	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	440b      	add	r3, r1
 8007358:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800735c:	781b      	ldrb	r3, [r3, #0]
 800735e:	2b01      	cmp	r3, #1
 8007360:	d105      	bne.n	800736e <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007364:	b2db      	uxtb	r3, r3
 8007366:	4619      	mov	r1, r3
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fb08 	bl	800797e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800736e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007370:	3301      	adds	r3, #1
 8007372:	627b      	str	r3, [r7, #36]	@ 0x24
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	791b      	ldrb	r3, [r3, #4]
 8007378:	461a      	mov	r2, r3
 800737a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737c:	4293      	cmp	r3, r2
 800737e:	d3e4      	bcc.n	800734a <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4618      	mov	r0, r3
 8007386:	f008 f8db 	bl	800f540 <USB_ReadInterrupts>
 800738a:	4603      	mov	r3, r0
 800738c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007390:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007394:	d13c      	bne.n	8007410 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007396:	2301      	movs	r3, #1
 8007398:	627b      	str	r3, [r7, #36]	@ 0x24
 800739a:	e02b      	b.n	80073f4 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800739c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739e:	015a      	lsls	r2, r3, #5
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	4413      	add	r3, r2
 80073a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80073ac:	6879      	ldr	r1, [r7, #4]
 80073ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073b0:	4613      	mov	r3, r2
 80073b2:	00db      	lsls	r3, r3, #3
 80073b4:	4413      	add	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	440b      	add	r3, r1
 80073ba:	3318      	adds	r3, #24
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d115      	bne.n	80073ee <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80073c2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	da12      	bge.n	80073ee <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80073c8:	6879      	ldr	r1, [r7, #4]
 80073ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073cc:	4613      	mov	r3, r2
 80073ce:	00db      	lsls	r3, r3, #3
 80073d0:	4413      	add	r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	440b      	add	r3, r1
 80073d6:	3317      	adds	r3, #23
 80073d8:	2201      	movs	r2, #1
 80073da:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80073dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073de:	b2db      	uxtb	r3, r3
 80073e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80073e4:	b2db      	uxtb	r3, r3
 80073e6:	4619      	mov	r1, r3
 80073e8:	6878      	ldr	r0, [r7, #4]
 80073ea:	f000 fac8 	bl	800797e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80073ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f0:	3301      	adds	r3, #1
 80073f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	791b      	ldrb	r3, [r3, #4]
 80073f8:	461a      	mov	r2, r3
 80073fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d3cd      	bcc.n	800739c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	695a      	ldr	r2, [r3, #20]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800740e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	4618      	mov	r0, r3
 8007416:	f008 f893 	bl	800f540 <USB_ReadInterrupts>
 800741a:	4603      	mov	r3, r0
 800741c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007420:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007424:	d156      	bne.n	80074d4 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007426:	2301      	movs	r3, #1
 8007428:	627b      	str	r3, [r7, #36]	@ 0x24
 800742a:	e045      	b.n	80074b8 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800742c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742e:	015a      	lsls	r2, r3, #5
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	4413      	add	r3, r2
 8007434:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800743c:	6879      	ldr	r1, [r7, #4]
 800743e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007440:	4613      	mov	r3, r2
 8007442:	00db      	lsls	r3, r3, #3
 8007444:	4413      	add	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	440b      	add	r3, r1
 800744a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d12e      	bne.n	80074b2 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007454:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007456:	2b00      	cmp	r3, #0
 8007458:	da2b      	bge.n	80074b2 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8007466:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800746a:	429a      	cmp	r2, r3
 800746c:	d121      	bne.n	80074b2 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800746e:	6879      	ldr	r1, [r7, #4]
 8007470:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007472:	4613      	mov	r3, r2
 8007474:	00db      	lsls	r3, r3, #3
 8007476:	4413      	add	r3, r2
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	440b      	add	r3, r1
 800747c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007480:	2201      	movs	r2, #1
 8007482:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007484:	6a3b      	ldr	r3, [r7, #32]
 8007486:	699b      	ldr	r3, [r3, #24]
 8007488:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800748c:	6a3b      	ldr	r3, [r7, #32]
 800748e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007498:	2b00      	cmp	r3, #0
 800749a:	d10a      	bne.n	80074b2 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	69fa      	ldr	r2, [r7, #28]
 80074a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80074ae:	6053      	str	r3, [r2, #4]
            break;
 80074b0:	e008      	b.n	80074c4 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80074b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074b4:	3301      	adds	r3, #1
 80074b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	791b      	ldrb	r3, [r3, #4]
 80074bc:	461a      	mov	r2, r3
 80074be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d3b3      	bcc.n	800742c <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	695a      	ldr	r2, [r3, #20]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80074d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4618      	mov	r0, r3
 80074da:	f008 f831 	bl	800f540 <USB_ReadInterrupts>
 80074de:	4603      	mov	r3, r0
 80074e0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80074e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80074e8:	d10a      	bne.n	8007500 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f00a fc76 	bl	8011ddc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	695a      	ldr	r2, [r3, #20]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80074fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4618      	mov	r0, r3
 8007506:	f008 f81b 	bl	800f540 <USB_ReadInterrupts>
 800750a:	4603      	mov	r3, r0
 800750c:	f003 0304 	and.w	r3, r3, #4
 8007510:	2b04      	cmp	r3, #4
 8007512:	d115      	bne.n	8007540 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	685b      	ldr	r3, [r3, #4]
 800751a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	f003 0304 	and.w	r3, r3, #4
 8007522:	2b00      	cmp	r3, #0
 8007524:	d002      	beq.n	800752c <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f00a fc66 	bl	8011df8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6859      	ldr	r1, [r3, #4]
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	69ba      	ldr	r2, [r7, #24]
 8007538:	430a      	orrs	r2, r1
 800753a:	605a      	str	r2, [r3, #4]
 800753c:	e000      	b.n	8007540 <HAL_PCD_IRQHandler+0x996>
      return;
 800753e:	bf00      	nop
    }
  }
}
 8007540:	3734      	adds	r7, #52	@ 0x34
 8007542:	46bd      	mov	sp, r7
 8007544:	bd90      	pop	{r4, r7, pc}

08007546 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007546:	b580      	push	{r7, lr}
 8007548:	b082      	sub	sp, #8
 800754a:	af00      	add	r7, sp, #0
 800754c:	6078      	str	r0, [r7, #4]
 800754e:	460b      	mov	r3, r1
 8007550:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007558:	2b01      	cmp	r3, #1
 800755a:	d101      	bne.n	8007560 <HAL_PCD_SetAddress+0x1a>
 800755c:	2302      	movs	r3, #2
 800755e:	e012      	b.n	8007586 <HAL_PCD_SetAddress+0x40>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	78fa      	ldrb	r2, [r7, #3]
 800756c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	78fa      	ldrb	r2, [r7, #3]
 8007574:	4611      	mov	r1, r2
 8007576:	4618      	mov	r0, r3
 8007578:	f007 ff7a 	bl	800f470 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3708      	adds	r7, #8
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}

0800758e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800758e:	b580      	push	{r7, lr}
 8007590:	b084      	sub	sp, #16
 8007592:	af00      	add	r7, sp, #0
 8007594:	6078      	str	r0, [r7, #4]
 8007596:	4608      	mov	r0, r1
 8007598:	4611      	mov	r1, r2
 800759a:	461a      	mov	r2, r3
 800759c:	4603      	mov	r3, r0
 800759e:	70fb      	strb	r3, [r7, #3]
 80075a0:	460b      	mov	r3, r1
 80075a2:	803b      	strh	r3, [r7, #0]
 80075a4:	4613      	mov	r3, r2
 80075a6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80075a8:	2300      	movs	r3, #0
 80075aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80075ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	da0f      	bge.n	80075d4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80075b4:	78fb      	ldrb	r3, [r7, #3]
 80075b6:	f003 020f 	and.w	r2, r3, #15
 80075ba:	4613      	mov	r3, r2
 80075bc:	00db      	lsls	r3, r3, #3
 80075be:	4413      	add	r3, r2
 80075c0:	009b      	lsls	r3, r3, #2
 80075c2:	3310      	adds	r3, #16
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	4413      	add	r3, r2
 80075c8:	3304      	adds	r3, #4
 80075ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2201      	movs	r2, #1
 80075d0:	705a      	strb	r2, [r3, #1]
 80075d2:	e00f      	b.n	80075f4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80075d4:	78fb      	ldrb	r3, [r7, #3]
 80075d6:	f003 020f 	and.w	r2, r3, #15
 80075da:	4613      	mov	r3, r2
 80075dc:	00db      	lsls	r3, r3, #3
 80075de:	4413      	add	r3, r2
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80075e6:	687a      	ldr	r2, [r7, #4]
 80075e8:	4413      	add	r3, r2
 80075ea:	3304      	adds	r3, #4
 80075ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	2200      	movs	r2, #0
 80075f2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80075f4:	78fb      	ldrb	r3, [r7, #3]
 80075f6:	f003 030f 	and.w	r3, r3, #15
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007600:	883a      	ldrh	r2, [r7, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	78ba      	ldrb	r2, [r7, #2]
 800760a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	785b      	ldrb	r3, [r3, #1]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d004      	beq.n	800761e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	781b      	ldrb	r3, [r3, #0]
 8007618:	461a      	mov	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800761e:	78bb      	ldrb	r3, [r7, #2]
 8007620:	2b02      	cmp	r3, #2
 8007622:	d102      	bne.n	800762a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007630:	2b01      	cmp	r3, #1
 8007632:	d101      	bne.n	8007638 <HAL_PCD_EP_Open+0xaa>
 8007634:	2302      	movs	r3, #2
 8007636:	e00e      	b.n	8007656 <HAL_PCD_EP_Open+0xc8>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68f9      	ldr	r1, [r7, #12]
 8007646:	4618      	mov	r0, r3
 8007648:	f007 f8fa 	bl	800e840 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	2200      	movs	r2, #0
 8007650:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8007654:	7afb      	ldrb	r3, [r7, #11]
}
 8007656:	4618      	mov	r0, r3
 8007658:	3710      	adds	r7, #16
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800765e:	b580      	push	{r7, lr}
 8007660:	b084      	sub	sp, #16
 8007662:	af00      	add	r7, sp, #0
 8007664:	6078      	str	r0, [r7, #4]
 8007666:	460b      	mov	r3, r1
 8007668:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800766a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800766e:	2b00      	cmp	r3, #0
 8007670:	da0f      	bge.n	8007692 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007672:	78fb      	ldrb	r3, [r7, #3]
 8007674:	f003 020f 	and.w	r2, r3, #15
 8007678:	4613      	mov	r3, r2
 800767a:	00db      	lsls	r3, r3, #3
 800767c:	4413      	add	r3, r2
 800767e:	009b      	lsls	r3, r3, #2
 8007680:	3310      	adds	r3, #16
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	4413      	add	r3, r2
 8007686:	3304      	adds	r3, #4
 8007688:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2201      	movs	r2, #1
 800768e:	705a      	strb	r2, [r3, #1]
 8007690:	e00f      	b.n	80076b2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007692:	78fb      	ldrb	r3, [r7, #3]
 8007694:	f003 020f 	and.w	r2, r3, #15
 8007698:	4613      	mov	r3, r2
 800769a:	00db      	lsls	r3, r3, #3
 800769c:	4413      	add	r3, r2
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	4413      	add	r3, r2
 80076a8:	3304      	adds	r3, #4
 80076aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2200      	movs	r2, #0
 80076b0:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80076b2:	78fb      	ldrb	r3, [r7, #3]
 80076b4:	f003 030f 	and.w	r3, r3, #15
 80076b8:	b2da      	uxtb	r2, r3
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80076c4:	2b01      	cmp	r3, #1
 80076c6:	d101      	bne.n	80076cc <HAL_PCD_EP_Close+0x6e>
 80076c8:	2302      	movs	r3, #2
 80076ca:	e00e      	b.n	80076ea <HAL_PCD_EP_Close+0x8c>
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	68f9      	ldr	r1, [r7, #12]
 80076da:	4618      	mov	r0, r3
 80076dc:	f007 f938 	bl	800e950 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2200      	movs	r2, #0
 80076e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3710      	adds	r7, #16
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b086      	sub	sp, #24
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	60f8      	str	r0, [r7, #12]
 80076fa:	607a      	str	r2, [r7, #4]
 80076fc:	603b      	str	r3, [r7, #0]
 80076fe:	460b      	mov	r3, r1
 8007700:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007702:	7afb      	ldrb	r3, [r7, #11]
 8007704:	f003 020f 	and.w	r2, r3, #15
 8007708:	4613      	mov	r3, r2
 800770a:	00db      	lsls	r3, r3, #3
 800770c:	4413      	add	r3, r2
 800770e:	009b      	lsls	r3, r3, #2
 8007710:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007714:	68fa      	ldr	r2, [r7, #12]
 8007716:	4413      	add	r3, r2
 8007718:	3304      	adds	r3, #4
 800771a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	683a      	ldr	r2, [r7, #0]
 8007726:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	2200      	movs	r2, #0
 800772c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	2200      	movs	r2, #0
 8007732:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007734:	7afb      	ldrb	r3, [r7, #11]
 8007736:	f003 030f 	and.w	r3, r3, #15
 800773a:	b2da      	uxtb	r2, r3
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	799b      	ldrb	r3, [r3, #6]
 8007744:	2b01      	cmp	r3, #1
 8007746:	d102      	bne.n	800774e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007748:	687a      	ldr	r2, [r7, #4]
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	6818      	ldr	r0, [r3, #0]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	799b      	ldrb	r3, [r3, #6]
 8007756:	461a      	mov	r2, r3
 8007758:	6979      	ldr	r1, [r7, #20]
 800775a:	f007 f9d5 	bl	800eb08 <USB_EPStartXfer>

  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3718      	adds	r7, #24
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	460b      	mov	r3, r1
 8007772:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007774:	78fb      	ldrb	r3, [r7, #3]
 8007776:	f003 020f 	and.w	r2, r3, #15
 800777a:	6879      	ldr	r1, [r7, #4]
 800777c:	4613      	mov	r3, r2
 800777e:	00db      	lsls	r3, r3, #3
 8007780:	4413      	add	r3, r2
 8007782:	009b      	lsls	r3, r3, #2
 8007784:	440b      	add	r3, r1
 8007786:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800778a:	681b      	ldr	r3, [r3, #0]
}
 800778c:	4618      	mov	r0, r3
 800778e:	370c      	adds	r7, #12
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	607a      	str	r2, [r7, #4]
 80077a2:	603b      	str	r3, [r7, #0]
 80077a4:	460b      	mov	r3, r1
 80077a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077a8:	7afb      	ldrb	r3, [r7, #11]
 80077aa:	f003 020f 	and.w	r2, r3, #15
 80077ae:	4613      	mov	r3, r2
 80077b0:	00db      	lsls	r3, r3, #3
 80077b2:	4413      	add	r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	3310      	adds	r3, #16
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	4413      	add	r3, r2
 80077bc:	3304      	adds	r3, #4
 80077be:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	683a      	ldr	r2, [r7, #0]
 80077ca:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	2200      	movs	r2, #0
 80077d0:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80077d2:	697b      	ldr	r3, [r7, #20]
 80077d4:	2201      	movs	r2, #1
 80077d6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80077d8:	7afb      	ldrb	r3, [r7, #11]
 80077da:	f003 030f 	and.w	r3, r3, #15
 80077de:	b2da      	uxtb	r2, r3
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	799b      	ldrb	r3, [r3, #6]
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d102      	bne.n	80077f2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6818      	ldr	r0, [r3, #0]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	799b      	ldrb	r3, [r3, #6]
 80077fa:	461a      	mov	r2, r3
 80077fc:	6979      	ldr	r1, [r7, #20]
 80077fe:	f007 f983 	bl	800eb08 <USB_EPStartXfer>

  return HAL_OK;
 8007802:	2300      	movs	r3, #0
}
 8007804:	4618      	mov	r0, r3
 8007806:	3718      	adds	r7, #24
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	460b      	mov	r3, r1
 8007816:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007818:	78fb      	ldrb	r3, [r7, #3]
 800781a:	f003 030f 	and.w	r3, r3, #15
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	7912      	ldrb	r2, [r2, #4]
 8007822:	4293      	cmp	r3, r2
 8007824:	d901      	bls.n	800782a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e04f      	b.n	80078ca <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800782a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800782e:	2b00      	cmp	r3, #0
 8007830:	da0f      	bge.n	8007852 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007832:	78fb      	ldrb	r3, [r7, #3]
 8007834:	f003 020f 	and.w	r2, r3, #15
 8007838:	4613      	mov	r3, r2
 800783a:	00db      	lsls	r3, r3, #3
 800783c:	4413      	add	r3, r2
 800783e:	009b      	lsls	r3, r3, #2
 8007840:	3310      	adds	r3, #16
 8007842:	687a      	ldr	r2, [r7, #4]
 8007844:	4413      	add	r3, r2
 8007846:	3304      	adds	r3, #4
 8007848:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2201      	movs	r2, #1
 800784e:	705a      	strb	r2, [r3, #1]
 8007850:	e00d      	b.n	800786e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007852:	78fa      	ldrb	r2, [r7, #3]
 8007854:	4613      	mov	r3, r2
 8007856:	00db      	lsls	r3, r3, #3
 8007858:	4413      	add	r3, r2
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	4413      	add	r3, r2
 8007864:	3304      	adds	r3, #4
 8007866:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2201      	movs	r2, #1
 8007872:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007874:	78fb      	ldrb	r3, [r7, #3]
 8007876:	f003 030f 	and.w	r3, r3, #15
 800787a:	b2da      	uxtb	r2, r3
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007886:	2b01      	cmp	r3, #1
 8007888:	d101      	bne.n	800788e <HAL_PCD_EP_SetStall+0x82>
 800788a:	2302      	movs	r3, #2
 800788c:	e01d      	b.n	80078ca <HAL_PCD_EP_SetStall+0xbe>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68f9      	ldr	r1, [r7, #12]
 800789c:	4618      	mov	r0, r3
 800789e:	f007 fd13 	bl	800f2c8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80078a2:	78fb      	ldrb	r3, [r7, #3]
 80078a4:	f003 030f 	and.w	r3, r3, #15
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d109      	bne.n	80078c0 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6818      	ldr	r0, [r3, #0]
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	7999      	ldrb	r1, [r3, #6]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80078ba:	461a      	mov	r2, r3
 80078bc:	f007 ff06 	bl	800f6cc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b084      	sub	sp, #16
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	460b      	mov	r3, r1
 80078dc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80078de:	78fb      	ldrb	r3, [r7, #3]
 80078e0:	f003 030f 	and.w	r3, r3, #15
 80078e4:	687a      	ldr	r2, [r7, #4]
 80078e6:	7912      	ldrb	r2, [r2, #4]
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d901      	bls.n	80078f0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	e042      	b.n	8007976 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80078f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	da0f      	bge.n	8007918 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80078f8:	78fb      	ldrb	r3, [r7, #3]
 80078fa:	f003 020f 	and.w	r2, r3, #15
 80078fe:	4613      	mov	r3, r2
 8007900:	00db      	lsls	r3, r3, #3
 8007902:	4413      	add	r3, r2
 8007904:	009b      	lsls	r3, r3, #2
 8007906:	3310      	adds	r3, #16
 8007908:	687a      	ldr	r2, [r7, #4]
 800790a:	4413      	add	r3, r2
 800790c:	3304      	adds	r3, #4
 800790e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2201      	movs	r2, #1
 8007914:	705a      	strb	r2, [r3, #1]
 8007916:	e00f      	b.n	8007938 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007918:	78fb      	ldrb	r3, [r7, #3]
 800791a:	f003 020f 	and.w	r2, r3, #15
 800791e:	4613      	mov	r3, r2
 8007920:	00db      	lsls	r3, r3, #3
 8007922:	4413      	add	r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	4413      	add	r3, r2
 800792e:	3304      	adds	r3, #4
 8007930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2200      	movs	r2, #0
 8007936:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800793e:	78fb      	ldrb	r3, [r7, #3]
 8007940:	f003 030f 	and.w	r3, r3, #15
 8007944:	b2da      	uxtb	r2, r3
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007950:	2b01      	cmp	r3, #1
 8007952:	d101      	bne.n	8007958 <HAL_PCD_EP_ClrStall+0x86>
 8007954:	2302      	movs	r3, #2
 8007956:	e00e      	b.n	8007976 <HAL_PCD_EP_ClrStall+0xa4>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2201      	movs	r2, #1
 800795c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68f9      	ldr	r1, [r7, #12]
 8007966:	4618      	mov	r0, r3
 8007968:	f007 fd1c 	bl	800f3a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b084      	sub	sp, #16
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
 8007986:	460b      	mov	r3, r1
 8007988:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800798a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800798e:	2b00      	cmp	r3, #0
 8007990:	da0c      	bge.n	80079ac <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007992:	78fb      	ldrb	r3, [r7, #3]
 8007994:	f003 020f 	and.w	r2, r3, #15
 8007998:	4613      	mov	r3, r2
 800799a:	00db      	lsls	r3, r3, #3
 800799c:	4413      	add	r3, r2
 800799e:	009b      	lsls	r3, r3, #2
 80079a0:	3310      	adds	r3, #16
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	4413      	add	r3, r2
 80079a6:	3304      	adds	r3, #4
 80079a8:	60fb      	str	r3, [r7, #12]
 80079aa:	e00c      	b.n	80079c6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80079ac:	78fb      	ldrb	r3, [r7, #3]
 80079ae:	f003 020f 	and.w	r2, r3, #15
 80079b2:	4613      	mov	r3, r2
 80079b4:	00db      	lsls	r3, r3, #3
 80079b6:	4413      	add	r3, r2
 80079b8:	009b      	lsls	r3, r3, #2
 80079ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80079be:	687a      	ldr	r2, [r7, #4]
 80079c0:	4413      	add	r3, r2
 80079c2:	3304      	adds	r3, #4
 80079c4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	68f9      	ldr	r1, [r7, #12]
 80079cc:	4618      	mov	r0, r3
 80079ce:	f007 fb3b 	bl	800f048 <USB_EPStopXfer>
 80079d2:	4603      	mov	r3, r0
 80079d4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80079d6:	7afb      	ldrb	r3, [r7, #11]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}

080079e0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b08a      	sub	sp, #40	@ 0x28
 80079e4:	af02      	add	r7, sp, #8
 80079e6:	6078      	str	r0, [r7, #4]
 80079e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80079f4:	683a      	ldr	r2, [r7, #0]
 80079f6:	4613      	mov	r3, r2
 80079f8:	00db      	lsls	r3, r3, #3
 80079fa:	4413      	add	r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	3310      	adds	r3, #16
 8007a00:	687a      	ldr	r2, [r7, #4]
 8007a02:	4413      	add	r3, r2
 8007a04:	3304      	adds	r3, #4
 8007a06:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	695a      	ldr	r2, [r3, #20]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	691b      	ldr	r3, [r3, #16]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d901      	bls.n	8007a18 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e06b      	b.n	8007af0 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	691a      	ldr	r2, [r3, #16]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	695b      	ldr	r3, [r3, #20]
 8007a20:	1ad3      	subs	r3, r2, r3
 8007a22:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	69fa      	ldr	r2, [r7, #28]
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d902      	bls.n	8007a34 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	689b      	ldr	r3, [r3, #8]
 8007a32:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007a34:	69fb      	ldr	r3, [r7, #28]
 8007a36:	3303      	adds	r3, #3
 8007a38:	089b      	lsrs	r3, r3, #2
 8007a3a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007a3c:	e02a      	b.n	8007a94 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	691a      	ldr	r2, [r3, #16]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	695b      	ldr	r3, [r3, #20]
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	689b      	ldr	r3, [r3, #8]
 8007a4e:	69fa      	ldr	r2, [r7, #28]
 8007a50:	429a      	cmp	r2, r3
 8007a52:	d902      	bls.n	8007a5a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	3303      	adds	r3, #3
 8007a5e:	089b      	lsrs	r3, r3, #2
 8007a60:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	68d9      	ldr	r1, [r3, #12]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	b2da      	uxtb	r2, r3
 8007a6a:	69fb      	ldr	r3, [r7, #28]
 8007a6c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007a72:	9300      	str	r3, [sp, #0]
 8007a74:	4603      	mov	r3, r0
 8007a76:	6978      	ldr	r0, [r7, #20]
 8007a78:	f007 fb90 	bl	800f19c <USB_WritePacket>

    ep->xfer_buff  += len;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	68da      	ldr	r2, [r3, #12]
 8007a80:	69fb      	ldr	r3, [r7, #28]
 8007a82:	441a      	add	r2, r3
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	695a      	ldr	r2, [r3, #20]
 8007a8c:	69fb      	ldr	r3, [r7, #28]
 8007a8e:	441a      	add	r2, r3
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007a94:	683b      	ldr	r3, [r7, #0]
 8007a96:	015a      	lsls	r2, r3, #5
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aa0:	699b      	ldr	r3, [r3, #24]
 8007aa2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007aa4:	69ba      	ldr	r2, [r7, #24]
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d809      	bhi.n	8007abe <PCD_WriteEmptyTxFifo+0xde>
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	695a      	ldr	r2, [r3, #20]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007ab2:	429a      	cmp	r2, r3
 8007ab4:	d203      	bcs.n	8007abe <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1bf      	bne.n	8007a3e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	691a      	ldr	r2, [r3, #16]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	695b      	ldr	r3, [r3, #20]
 8007ac6:	429a      	cmp	r2, r3
 8007ac8:	d811      	bhi.n	8007aee <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	f003 030f 	and.w	r3, r3, #15
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ad6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ade:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	43db      	mvns	r3, r3
 8007ae4:	6939      	ldr	r1, [r7, #16]
 8007ae6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007aea:	4013      	ands	r3, r2
 8007aec:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007aee:	2300      	movs	r3, #0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3720      	adds	r7, #32
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b088      	sub	sp, #32
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
 8007b00:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	333c      	adds	r3, #60	@ 0x3c
 8007b10:	3304      	adds	r3, #4
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	015a      	lsls	r2, r3, #5
 8007b1a:	69bb      	ldr	r3, [r7, #24]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	799b      	ldrb	r3, [r3, #6]
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d17b      	bne.n	8007c26 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	f003 0308 	and.w	r3, r3, #8
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d015      	beq.n	8007b64 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b38:	697b      	ldr	r3, [r7, #20]
 8007b3a:	4a61      	ldr	r2, [pc, #388]	@ (8007cc0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	f240 80b9 	bls.w	8007cb4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007b42:	693b      	ldr	r3, [r7, #16]
 8007b44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	f000 80b3 	beq.w	8007cb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	015a      	lsls	r2, r3, #5
 8007b52:	69bb      	ldr	r3, [r7, #24]
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007b60:	6093      	str	r3, [r2, #8]
 8007b62:	e0a7      	b.n	8007cb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	f003 0320 	and.w	r3, r3, #32
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d009      	beq.n	8007b82 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	015a      	lsls	r2, r3, #5
 8007b72:	69bb      	ldr	r3, [r7, #24]
 8007b74:	4413      	add	r3, r2
 8007b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	2320      	movs	r3, #32
 8007b7e:	6093      	str	r3, [r2, #8]
 8007b80:	e098      	b.n	8007cb4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	f040 8093 	bne.w	8007cb4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	4a4b      	ldr	r2, [pc, #300]	@ (8007cc0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d90f      	bls.n	8007bb6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00a      	beq.n	8007bb6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007ba0:	683b      	ldr	r3, [r7, #0]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	69bb      	ldr	r3, [r7, #24]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bac:	461a      	mov	r2, r3
 8007bae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bb2:	6093      	str	r3, [r2, #8]
 8007bb4:	e07e      	b.n	8007cb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	00db      	lsls	r3, r3, #3
 8007bbc:	4413      	add	r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007bc4:	687a      	ldr	r2, [r7, #4]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	3304      	adds	r3, #4
 8007bca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6a1a      	ldr	r2, [r3, #32]
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	0159      	lsls	r1, r3, #5
 8007bd4:	69bb      	ldr	r3, [r7, #24]
 8007bd6:	440b      	add	r3, r1
 8007bd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007be2:	1ad2      	subs	r2, r2, r3
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007be8:	683b      	ldr	r3, [r7, #0]
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d114      	bne.n	8007c18 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d109      	bne.n	8007c0a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6818      	ldr	r0, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007c00:	461a      	mov	r2, r3
 8007c02:	2101      	movs	r1, #1
 8007c04:	f007 fd62 	bl	800f6cc <USB_EP0_OutStart>
 8007c08:	e006      	b.n	8007c18 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	68da      	ldr	r2, [r3, #12]
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	695b      	ldr	r3, [r3, #20]
 8007c12:	441a      	add	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	4619      	mov	r1, r3
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f00a f818 	bl	8011c54 <HAL_PCD_DataOutStageCallback>
 8007c24:	e046      	b.n	8007cb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	4a26      	ldr	r2, [pc, #152]	@ (8007cc4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d124      	bne.n	8007c78 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00a      	beq.n	8007c4e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	015a      	lsls	r2, r3, #5
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	4413      	add	r3, r2
 8007c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c44:	461a      	mov	r2, r3
 8007c46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c4a:	6093      	str	r3, [r2, #8]
 8007c4c:	e032      	b.n	8007cb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	f003 0320 	and.w	r3, r3, #32
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d008      	beq.n	8007c6a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	015a      	lsls	r2, r3, #5
 8007c5c:	69bb      	ldr	r3, [r7, #24]
 8007c5e:	4413      	add	r3, r2
 8007c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c64:	461a      	mov	r2, r3
 8007c66:	2320      	movs	r3, #32
 8007c68:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	4619      	mov	r1, r3
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f009 ffef 	bl	8011c54 <HAL_PCD_DataOutStageCallback>
 8007c76:	e01d      	b.n	8007cb4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d114      	bne.n	8007ca8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007c7e:	6879      	ldr	r1, [r7, #4]
 8007c80:	683a      	ldr	r2, [r7, #0]
 8007c82:	4613      	mov	r3, r2
 8007c84:	00db      	lsls	r3, r3, #3
 8007c86:	4413      	add	r3, r2
 8007c88:	009b      	lsls	r3, r3, #2
 8007c8a:	440b      	add	r3, r1
 8007c8c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d108      	bne.n	8007ca8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6818      	ldr	r0, [r3, #0]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007ca0:	461a      	mov	r2, r3
 8007ca2:	2100      	movs	r1, #0
 8007ca4:	f007 fd12 	bl	800f6cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	4619      	mov	r1, r3
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f009 ffd0 	bl	8011c54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007cb4:	2300      	movs	r3, #0
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3720      	adds	r7, #32
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	4f54300a 	.word	0x4f54300a
 8007cc4:	4f54310a 	.word	0x4f54310a

08007cc8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b086      	sub	sp, #24
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
 8007cd0:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd8:	697b      	ldr	r3, [r7, #20]
 8007cda:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	333c      	adds	r3, #60	@ 0x3c
 8007ce0:	3304      	adds	r3, #4
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	015a      	lsls	r2, r3, #5
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	4413      	add	r3, r2
 8007cee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	4a15      	ldr	r2, [pc, #84]	@ (8007d50 <PCD_EP_OutSetupPacket_int+0x88>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d90e      	bls.n	8007d1c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d009      	beq.n	8007d1c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	015a      	lsls	r2, r3, #5
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	4413      	add	r3, r2
 8007d10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d14:	461a      	mov	r2, r3
 8007d16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d1a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f009 ff87 	bl	8011c30 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	4a0a      	ldr	r2, [pc, #40]	@ (8007d50 <PCD_EP_OutSetupPacket_int+0x88>)
 8007d26:	4293      	cmp	r3, r2
 8007d28:	d90c      	bls.n	8007d44 <PCD_EP_OutSetupPacket_int+0x7c>
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	799b      	ldrb	r3, [r3, #6]
 8007d2e:	2b01      	cmp	r3, #1
 8007d30:	d108      	bne.n	8007d44 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6818      	ldr	r0, [r3, #0]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	2101      	movs	r1, #1
 8007d40:	f007 fcc4 	bl	800f6cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3718      	adds	r7, #24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	4f54300a 	.word	0x4f54300a

08007d54 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b085      	sub	sp, #20
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	460b      	mov	r3, r1
 8007d5e:	70fb      	strb	r3, [r7, #3]
 8007d60:	4613      	mov	r3, r2
 8007d62:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d6a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007d6c:	78fb      	ldrb	r3, [r7, #3]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d107      	bne.n	8007d82 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007d72:	883b      	ldrh	r3, [r7, #0]
 8007d74:	0419      	lsls	r1, r3, #16
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	68ba      	ldr	r2, [r7, #8]
 8007d7c:	430a      	orrs	r2, r1
 8007d7e:	629a      	str	r2, [r3, #40]	@ 0x28
 8007d80:	e028      	b.n	8007dd4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d88:	0c1b      	lsrs	r3, r3, #16
 8007d8a:	68ba      	ldr	r2, [r7, #8]
 8007d8c:	4413      	add	r3, r2
 8007d8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007d90:	2300      	movs	r3, #0
 8007d92:	73fb      	strb	r3, [r7, #15]
 8007d94:	e00d      	b.n	8007db2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681a      	ldr	r2, [r3, #0]
 8007d9a:	7bfb      	ldrb	r3, [r7, #15]
 8007d9c:	3340      	adds	r3, #64	@ 0x40
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	4413      	add	r3, r2
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	0c1b      	lsrs	r3, r3, #16
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	4413      	add	r3, r2
 8007daa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007dac:	7bfb      	ldrb	r3, [r7, #15]
 8007dae:	3301      	adds	r3, #1
 8007db0:	73fb      	strb	r3, [r7, #15]
 8007db2:	7bfa      	ldrb	r2, [r7, #15]
 8007db4:	78fb      	ldrb	r3, [r7, #3]
 8007db6:	3b01      	subs	r3, #1
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d3ec      	bcc.n	8007d96 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007dbc:	883b      	ldrh	r3, [r7, #0]
 8007dbe:	0418      	lsls	r0, r3, #16
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6819      	ldr	r1, [r3, #0]
 8007dc4:	78fb      	ldrb	r3, [r7, #3]
 8007dc6:	3b01      	subs	r3, #1
 8007dc8:	68ba      	ldr	r2, [r7, #8]
 8007dca:	4302      	orrs	r2, r0
 8007dcc:	3340      	adds	r3, #64	@ 0x40
 8007dce:	009b      	lsls	r3, r3, #2
 8007dd0:	440b      	add	r3, r1
 8007dd2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007dd4:	2300      	movs	r3, #0
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b083      	sub	sp, #12
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
 8007dea:	460b      	mov	r3, r1
 8007dec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	887a      	ldrh	r2, [r7, #2]
 8007df4:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	370c      	adds	r7, #12
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e02:	4770      	bx	lr

08007e04 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b085      	sub	sp, #20
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	699b      	ldr	r3, [r3, #24]
 8007e26:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007e32:	4b05      	ldr	r3, [pc, #20]	@ (8007e48 <HAL_PCDEx_ActivateLPM+0x44>)
 8007e34:	4313      	orrs	r3, r2
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	3714      	adds	r7, #20
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr
 8007e48:	10000003 	.word	0x10000003

08007e4c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	460b      	mov	r3, r1
 8007e56:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	b084      	sub	sp, #16
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007e6c:	4b29      	ldr	r3, [pc, #164]	@ (8007f14 <HAL_PWREx_ConfigSupply+0xb0>)
 8007e6e:	68db      	ldr	r3, [r3, #12]
 8007e70:	f003 0307 	and.w	r3, r3, #7
 8007e74:	2b06      	cmp	r3, #6
 8007e76:	d00a      	beq.n	8007e8e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007e78:	4b26      	ldr	r3, [pc, #152]	@ (8007f14 <HAL_PWREx_ConfigSupply+0xb0>)
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e80:	687a      	ldr	r2, [r7, #4]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d001      	beq.n	8007e8a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e040      	b.n	8007f0c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	e03e      	b.n	8007f0c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007e8e:	4b21      	ldr	r3, [pc, #132]	@ (8007f14 <HAL_PWREx_ConfigSupply+0xb0>)
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8007e96:	491f      	ldr	r1, [pc, #124]	@ (8007f14 <HAL_PWREx_ConfigSupply+0xb0>)
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007e9e:	f7fa fd43 	bl	8002928 <HAL_GetTick>
 8007ea2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007ea4:	e009      	b.n	8007eba <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007ea6:	f7fa fd3f 	bl	8002928 <HAL_GetTick>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	1ad3      	subs	r3, r2, r3
 8007eb0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007eb4:	d901      	bls.n	8007eba <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	e028      	b.n	8007f0c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007eba:	4b16      	ldr	r3, [pc, #88]	@ (8007f14 <HAL_PWREx_ConfigSupply+0xb0>)
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007ec2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007ec6:	d1ee      	bne.n	8007ea6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2b1e      	cmp	r3, #30
 8007ecc:	d008      	beq.n	8007ee0 <HAL_PWREx_ConfigSupply+0x7c>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ed2:	d005      	beq.n	8007ee0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2b1d      	cmp	r3, #29
 8007ed8:	d002      	beq.n	8007ee0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b2d      	cmp	r3, #45	@ 0x2d
 8007ede:	d114      	bne.n	8007f0a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007ee0:	f7fa fd22 	bl	8002928 <HAL_GetTick>
 8007ee4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007ee6:	e009      	b.n	8007efc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007ee8:	f7fa fd1e 	bl	8002928 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ef6:	d901      	bls.n	8007efc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007ef8:	2301      	movs	r3, #1
 8007efa:	e007      	b.n	8007f0c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007efc:	4b05      	ldr	r3, [pc, #20]	@ (8007f14 <HAL_PWREx_ConfigSupply+0xb0>)
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f08:	d1ee      	bne.n	8007ee8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007f0a:	2300      	movs	r3, #0
}
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	3710      	adds	r7, #16
 8007f10:	46bd      	mov	sp, r7
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	58024800 	.word	0x58024800

08007f18 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007f1c:	4b05      	ldr	r3, [pc, #20]	@ (8007f34 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007f1e:	68db      	ldr	r3, [r3, #12]
 8007f20:	4a04      	ldr	r2, [pc, #16]	@ (8007f34 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007f22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007f26:	60d3      	str	r3, [r2, #12]
}
 8007f28:	bf00      	nop
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr
 8007f32:	bf00      	nop
 8007f34:	58024800 	.word	0x58024800

08007f38 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b08c      	sub	sp, #48	@ 0x30
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d102      	bne.n	8007f4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007f46:	2301      	movs	r3, #1
 8007f48:	f000 bc48 	b.w	80087dc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 0301 	and.w	r3, r3, #1
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f000 8088 	beq.w	800806a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f5a:	4b99      	ldr	r3, [pc, #612]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f64:	4b96      	ldr	r3, [pc, #600]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 8007f66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f68:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007f6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f6c:	2b10      	cmp	r3, #16
 8007f6e:	d007      	beq.n	8007f80 <HAL_RCC_OscConfig+0x48>
 8007f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f72:	2b18      	cmp	r3, #24
 8007f74:	d111      	bne.n	8007f9a <HAL_RCC_OscConfig+0x62>
 8007f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f78:	f003 0303 	and.w	r3, r3, #3
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d10c      	bne.n	8007f9a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f80:	4b8f      	ldr	r3, [pc, #572]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d06d      	beq.n	8008068 <HAL_RCC_OscConfig+0x130>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d169      	bne.n	8008068 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	f000 bc21 	b.w	80087dc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007fa2:	d106      	bne.n	8007fb2 <HAL_RCC_OscConfig+0x7a>
 8007fa4:	4b86      	ldr	r3, [pc, #536]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a85      	ldr	r2, [pc, #532]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 8007faa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007fae:	6013      	str	r3, [r2, #0]
 8007fb0:	e02e      	b.n	8008010 <HAL_RCC_OscConfig+0xd8>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10c      	bne.n	8007fd4 <HAL_RCC_OscConfig+0x9c>
 8007fba:	4b81      	ldr	r3, [pc, #516]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	4a80      	ldr	r2, [pc, #512]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 8007fc0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007fc4:	6013      	str	r3, [r2, #0]
 8007fc6:	4b7e      	ldr	r3, [pc, #504]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	4a7d      	ldr	r2, [pc, #500]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 8007fcc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007fd0:	6013      	str	r3, [r2, #0]
 8007fd2:	e01d      	b.n	8008010 <HAL_RCC_OscConfig+0xd8>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007fdc:	d10c      	bne.n	8007ff8 <HAL_RCC_OscConfig+0xc0>
 8007fde:	4b78      	ldr	r3, [pc, #480]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a77      	ldr	r2, [pc, #476]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 8007fe4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007fe8:	6013      	str	r3, [r2, #0]
 8007fea:	4b75      	ldr	r3, [pc, #468]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a74      	ldr	r2, [pc, #464]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 8007ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007ff4:	6013      	str	r3, [r2, #0]
 8007ff6:	e00b      	b.n	8008010 <HAL_RCC_OscConfig+0xd8>
 8007ff8:	4b71      	ldr	r3, [pc, #452]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a70      	ldr	r2, [pc, #448]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 8007ffe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008002:	6013      	str	r3, [r2, #0]
 8008004:	4b6e      	ldr	r3, [pc, #440]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	4a6d      	ldr	r2, [pc, #436]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 800800a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800800e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d013      	beq.n	8008040 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008018:	f7fa fc86 	bl	8002928 <HAL_GetTick>
 800801c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800801e:	e008      	b.n	8008032 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008020:	f7fa fc82 	bl	8002928 <HAL_GetTick>
 8008024:	4602      	mov	r2, r0
 8008026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008028:	1ad3      	subs	r3, r2, r3
 800802a:	2b64      	cmp	r3, #100	@ 0x64
 800802c:	d901      	bls.n	8008032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800802e:	2303      	movs	r3, #3
 8008030:	e3d4      	b.n	80087dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008032:	4b63      	ldr	r3, [pc, #396]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800803a:	2b00      	cmp	r3, #0
 800803c:	d0f0      	beq.n	8008020 <HAL_RCC_OscConfig+0xe8>
 800803e:	e014      	b.n	800806a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008040:	f7fa fc72 	bl	8002928 <HAL_GetTick>
 8008044:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008046:	e008      	b.n	800805a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008048:	f7fa fc6e 	bl	8002928 <HAL_GetTick>
 800804c:	4602      	mov	r2, r0
 800804e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008050:	1ad3      	subs	r3, r2, r3
 8008052:	2b64      	cmp	r3, #100	@ 0x64
 8008054:	d901      	bls.n	800805a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008056:	2303      	movs	r3, #3
 8008058:	e3c0      	b.n	80087dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800805a:	4b59      	ldr	r3, [pc, #356]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008062:	2b00      	cmp	r3, #0
 8008064:	d1f0      	bne.n	8008048 <HAL_RCC_OscConfig+0x110>
 8008066:	e000      	b.n	800806a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 0302 	and.w	r3, r3, #2
 8008072:	2b00      	cmp	r3, #0
 8008074:	f000 80ca 	beq.w	800820c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008078:	4b51      	ldr	r3, [pc, #324]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008080:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008082:	4b4f      	ldr	r3, [pc, #316]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 8008084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008086:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008088:	6a3b      	ldr	r3, [r7, #32]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d007      	beq.n	800809e <HAL_RCC_OscConfig+0x166>
 800808e:	6a3b      	ldr	r3, [r7, #32]
 8008090:	2b18      	cmp	r3, #24
 8008092:	d156      	bne.n	8008142 <HAL_RCC_OscConfig+0x20a>
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	f003 0303 	and.w	r3, r3, #3
 800809a:	2b00      	cmp	r3, #0
 800809c:	d151      	bne.n	8008142 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800809e:	4b48      	ldr	r3, [pc, #288]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f003 0304 	and.w	r3, r3, #4
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d005      	beq.n	80080b6 <HAL_RCC_OscConfig+0x17e>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d101      	bne.n	80080b6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e392      	b.n	80087dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80080b6:	4b42      	ldr	r3, [pc, #264]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f023 0219 	bic.w	r2, r3, #25
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	68db      	ldr	r3, [r3, #12]
 80080c2:	493f      	ldr	r1, [pc, #252]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 80080c4:	4313      	orrs	r3, r2
 80080c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080c8:	f7fa fc2e 	bl	8002928 <HAL_GetTick>
 80080cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080ce:	e008      	b.n	80080e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080d0:	f7fa fc2a 	bl	8002928 <HAL_GetTick>
 80080d4:	4602      	mov	r2, r0
 80080d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080d8:	1ad3      	subs	r3, r2, r3
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d901      	bls.n	80080e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80080de:	2303      	movs	r3, #3
 80080e0:	e37c      	b.n	80087dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80080e2:	4b37      	ldr	r3, [pc, #220]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f003 0304 	and.w	r3, r3, #4
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d0f0      	beq.n	80080d0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080ee:	f7fa fc4b 	bl	8002988 <HAL_GetREVID>
 80080f2:	4603      	mov	r3, r0
 80080f4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d817      	bhi.n	800812c <HAL_RCC_OscConfig+0x1f4>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	691b      	ldr	r3, [r3, #16]
 8008100:	2b40      	cmp	r3, #64	@ 0x40
 8008102:	d108      	bne.n	8008116 <HAL_RCC_OscConfig+0x1de>
 8008104:	4b2e      	ldr	r3, [pc, #184]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 8008106:	685b      	ldr	r3, [r3, #4]
 8008108:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800810c:	4a2c      	ldr	r2, [pc, #176]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 800810e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008112:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008114:	e07a      	b.n	800820c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008116:	4b2a      	ldr	r3, [pc, #168]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 8008118:	685b      	ldr	r3, [r3, #4]
 800811a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	031b      	lsls	r3, r3, #12
 8008124:	4926      	ldr	r1, [pc, #152]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 8008126:	4313      	orrs	r3, r2
 8008128:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800812a:	e06f      	b.n	800820c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800812c:	4b24      	ldr	r3, [pc, #144]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	691b      	ldr	r3, [r3, #16]
 8008138:	061b      	lsls	r3, r3, #24
 800813a:	4921      	ldr	r1, [pc, #132]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 800813c:	4313      	orrs	r3, r2
 800813e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008140:	e064      	b.n	800820c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d047      	beq.n	80081da <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800814a:	4b1d      	ldr	r3, [pc, #116]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f023 0219 	bic.w	r2, r3, #25
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	68db      	ldr	r3, [r3, #12]
 8008156:	491a      	ldr	r1, [pc, #104]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 8008158:	4313      	orrs	r3, r2
 800815a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800815c:	f7fa fbe4 	bl	8002928 <HAL_GetTick>
 8008160:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008162:	e008      	b.n	8008176 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008164:	f7fa fbe0 	bl	8002928 <HAL_GetTick>
 8008168:	4602      	mov	r2, r0
 800816a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	2b02      	cmp	r3, #2
 8008170:	d901      	bls.n	8008176 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008172:	2303      	movs	r3, #3
 8008174:	e332      	b.n	80087dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008176:	4b12      	ldr	r3, [pc, #72]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0304 	and.w	r3, r3, #4
 800817e:	2b00      	cmp	r3, #0
 8008180:	d0f0      	beq.n	8008164 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008182:	f7fa fc01 	bl	8002988 <HAL_GetREVID>
 8008186:	4603      	mov	r3, r0
 8008188:	f241 0203 	movw	r2, #4099	@ 0x1003
 800818c:	4293      	cmp	r3, r2
 800818e:	d819      	bhi.n	80081c4 <HAL_RCC_OscConfig+0x28c>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	691b      	ldr	r3, [r3, #16]
 8008194:	2b40      	cmp	r3, #64	@ 0x40
 8008196:	d108      	bne.n	80081aa <HAL_RCC_OscConfig+0x272>
 8008198:	4b09      	ldr	r3, [pc, #36]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80081a0:	4a07      	ldr	r2, [pc, #28]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 80081a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80081a6:	6053      	str	r3, [r2, #4]
 80081a8:	e030      	b.n	800820c <HAL_RCC_OscConfig+0x2d4>
 80081aa:	4b05      	ldr	r3, [pc, #20]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	031b      	lsls	r3, r3, #12
 80081b8:	4901      	ldr	r1, [pc, #4]	@ (80081c0 <HAL_RCC_OscConfig+0x288>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	604b      	str	r3, [r1, #4]
 80081be:	e025      	b.n	800820c <HAL_RCC_OscConfig+0x2d4>
 80081c0:	58024400 	.word	0x58024400
 80081c4:	4b9a      	ldr	r3, [pc, #616]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	691b      	ldr	r3, [r3, #16]
 80081d0:	061b      	lsls	r3, r3, #24
 80081d2:	4997      	ldr	r1, [pc, #604]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 80081d4:	4313      	orrs	r3, r2
 80081d6:	604b      	str	r3, [r1, #4]
 80081d8:	e018      	b.n	800820c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081da:	4b95      	ldr	r3, [pc, #596]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a94      	ldr	r2, [pc, #592]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 80081e0:	f023 0301 	bic.w	r3, r3, #1
 80081e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081e6:	f7fa fb9f 	bl	8002928 <HAL_GetTick>
 80081ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80081ec:	e008      	b.n	8008200 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081ee:	f7fa fb9b 	bl	8002928 <HAL_GetTick>
 80081f2:	4602      	mov	r2, r0
 80081f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f6:	1ad3      	subs	r3, r2, r3
 80081f8:	2b02      	cmp	r3, #2
 80081fa:	d901      	bls.n	8008200 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80081fc:	2303      	movs	r3, #3
 80081fe:	e2ed      	b.n	80087dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008200:	4b8b      	ldr	r3, [pc, #556]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f003 0304 	and.w	r3, r3, #4
 8008208:	2b00      	cmp	r3, #0
 800820a:	d1f0      	bne.n	80081ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 0310 	and.w	r3, r3, #16
 8008214:	2b00      	cmp	r3, #0
 8008216:	f000 80a9 	beq.w	800836c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800821a:	4b85      	ldr	r3, [pc, #532]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 800821c:	691b      	ldr	r3, [r3, #16]
 800821e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008222:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008224:	4b82      	ldr	r3, [pc, #520]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 8008226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008228:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800822a:	69bb      	ldr	r3, [r7, #24]
 800822c:	2b08      	cmp	r3, #8
 800822e:	d007      	beq.n	8008240 <HAL_RCC_OscConfig+0x308>
 8008230:	69bb      	ldr	r3, [r7, #24]
 8008232:	2b18      	cmp	r3, #24
 8008234:	d13a      	bne.n	80082ac <HAL_RCC_OscConfig+0x374>
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	f003 0303 	and.w	r3, r3, #3
 800823c:	2b01      	cmp	r3, #1
 800823e:	d135      	bne.n	80082ac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008240:	4b7b      	ldr	r3, [pc, #492]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008248:	2b00      	cmp	r3, #0
 800824a:	d005      	beq.n	8008258 <HAL_RCC_OscConfig+0x320>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	69db      	ldr	r3, [r3, #28]
 8008250:	2b80      	cmp	r3, #128	@ 0x80
 8008252:	d001      	beq.n	8008258 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	e2c1      	b.n	80087dc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008258:	f7fa fb96 	bl	8002988 <HAL_GetREVID>
 800825c:	4603      	mov	r3, r0
 800825e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8008262:	4293      	cmp	r3, r2
 8008264:	d817      	bhi.n	8008296 <HAL_RCC_OscConfig+0x35e>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	6a1b      	ldr	r3, [r3, #32]
 800826a:	2b20      	cmp	r3, #32
 800826c:	d108      	bne.n	8008280 <HAL_RCC_OscConfig+0x348>
 800826e:	4b70      	ldr	r3, [pc, #448]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008276:	4a6e      	ldr	r2, [pc, #440]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 8008278:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800827c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800827e:	e075      	b.n	800836c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008280:	4b6b      	ldr	r3, [pc, #428]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6a1b      	ldr	r3, [r3, #32]
 800828c:	069b      	lsls	r3, r3, #26
 800828e:	4968      	ldr	r1, [pc, #416]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 8008290:	4313      	orrs	r3, r2
 8008292:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008294:	e06a      	b.n	800836c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008296:	4b66      	ldr	r3, [pc, #408]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 8008298:	68db      	ldr	r3, [r3, #12]
 800829a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	6a1b      	ldr	r3, [r3, #32]
 80082a2:	061b      	lsls	r3, r3, #24
 80082a4:	4962      	ldr	r1, [pc, #392]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 80082a6:	4313      	orrs	r3, r2
 80082a8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80082aa:	e05f      	b.n	800836c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	69db      	ldr	r3, [r3, #28]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d042      	beq.n	800833a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80082b4:	4b5e      	ldr	r3, [pc, #376]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a5d      	ldr	r2, [pc, #372]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 80082ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80082c0:	f7fa fb32 	bl	8002928 <HAL_GetTick>
 80082c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80082c6:	e008      	b.n	80082da <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80082c8:	f7fa fb2e 	bl	8002928 <HAL_GetTick>
 80082cc:	4602      	mov	r2, r0
 80082ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	2b02      	cmp	r3, #2
 80082d4:	d901      	bls.n	80082da <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80082d6:	2303      	movs	r3, #3
 80082d8:	e280      	b.n	80087dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80082da:	4b55      	ldr	r3, [pc, #340]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d0f0      	beq.n	80082c8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80082e6:	f7fa fb4f 	bl	8002988 <HAL_GetREVID>
 80082ea:	4603      	mov	r3, r0
 80082ec:	f241 0203 	movw	r2, #4099	@ 0x1003
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d817      	bhi.n	8008324 <HAL_RCC_OscConfig+0x3ec>
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a1b      	ldr	r3, [r3, #32]
 80082f8:	2b20      	cmp	r3, #32
 80082fa:	d108      	bne.n	800830e <HAL_RCC_OscConfig+0x3d6>
 80082fc:	4b4c      	ldr	r3, [pc, #304]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 80082fe:	685b      	ldr	r3, [r3, #4]
 8008300:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8008304:	4a4a      	ldr	r2, [pc, #296]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 8008306:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800830a:	6053      	str	r3, [r2, #4]
 800830c:	e02e      	b.n	800836c <HAL_RCC_OscConfig+0x434>
 800830e:	4b48      	ldr	r3, [pc, #288]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	6a1b      	ldr	r3, [r3, #32]
 800831a:	069b      	lsls	r3, r3, #26
 800831c:	4944      	ldr	r1, [pc, #272]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 800831e:	4313      	orrs	r3, r2
 8008320:	604b      	str	r3, [r1, #4]
 8008322:	e023      	b.n	800836c <HAL_RCC_OscConfig+0x434>
 8008324:	4b42      	ldr	r3, [pc, #264]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 8008326:	68db      	ldr	r3, [r3, #12]
 8008328:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	6a1b      	ldr	r3, [r3, #32]
 8008330:	061b      	lsls	r3, r3, #24
 8008332:	493f      	ldr	r1, [pc, #252]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 8008334:	4313      	orrs	r3, r2
 8008336:	60cb      	str	r3, [r1, #12]
 8008338:	e018      	b.n	800836c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800833a:	4b3d      	ldr	r3, [pc, #244]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	4a3c      	ldr	r2, [pc, #240]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 8008340:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008344:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008346:	f7fa faef 	bl	8002928 <HAL_GetTick>
 800834a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800834c:	e008      	b.n	8008360 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800834e:	f7fa faeb 	bl	8002928 <HAL_GetTick>
 8008352:	4602      	mov	r2, r0
 8008354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008356:	1ad3      	subs	r3, r2, r3
 8008358:	2b02      	cmp	r3, #2
 800835a:	d901      	bls.n	8008360 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800835c:	2303      	movs	r3, #3
 800835e:	e23d      	b.n	80087dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008360:	4b33      	ldr	r3, [pc, #204]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1f0      	bne.n	800834e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f003 0308 	and.w	r3, r3, #8
 8008374:	2b00      	cmp	r3, #0
 8008376:	d036      	beq.n	80083e6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	695b      	ldr	r3, [r3, #20]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d019      	beq.n	80083b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008380:	4b2b      	ldr	r3, [pc, #172]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 8008382:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008384:	4a2a      	ldr	r2, [pc, #168]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 8008386:	f043 0301 	orr.w	r3, r3, #1
 800838a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800838c:	f7fa facc 	bl	8002928 <HAL_GetTick>
 8008390:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008392:	e008      	b.n	80083a6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008394:	f7fa fac8 	bl	8002928 <HAL_GetTick>
 8008398:	4602      	mov	r2, r0
 800839a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800839c:	1ad3      	subs	r3, r2, r3
 800839e:	2b02      	cmp	r3, #2
 80083a0:	d901      	bls.n	80083a6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80083a2:	2303      	movs	r3, #3
 80083a4:	e21a      	b.n	80087dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80083a6:	4b22      	ldr	r3, [pc, #136]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 80083a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083aa:	f003 0302 	and.w	r3, r3, #2
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d0f0      	beq.n	8008394 <HAL_RCC_OscConfig+0x45c>
 80083b2:	e018      	b.n	80083e6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80083b4:	4b1e      	ldr	r3, [pc, #120]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 80083b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083b8:	4a1d      	ldr	r2, [pc, #116]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 80083ba:	f023 0301 	bic.w	r3, r3, #1
 80083be:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083c0:	f7fa fab2 	bl	8002928 <HAL_GetTick>
 80083c4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80083c6:	e008      	b.n	80083da <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80083c8:	f7fa faae 	bl	8002928 <HAL_GetTick>
 80083cc:	4602      	mov	r2, r0
 80083ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d901      	bls.n	80083da <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80083d6:	2303      	movs	r3, #3
 80083d8:	e200      	b.n	80087dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80083da:	4b15      	ldr	r3, [pc, #84]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 80083dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083de:	f003 0302 	and.w	r3, r3, #2
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d1f0      	bne.n	80083c8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f003 0320 	and.w	r3, r3, #32
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d039      	beq.n	8008466 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	699b      	ldr	r3, [r3, #24]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d01c      	beq.n	8008434 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80083fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a0c      	ldr	r2, [pc, #48]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 8008400:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008404:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008406:	f7fa fa8f 	bl	8002928 <HAL_GetTick>
 800840a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800840c:	e008      	b.n	8008420 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800840e:	f7fa fa8b 	bl	8002928 <HAL_GetTick>
 8008412:	4602      	mov	r2, r0
 8008414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008416:	1ad3      	subs	r3, r2, r3
 8008418:	2b02      	cmp	r3, #2
 800841a:	d901      	bls.n	8008420 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800841c:	2303      	movs	r3, #3
 800841e:	e1dd      	b.n	80087dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008420:	4b03      	ldr	r3, [pc, #12]	@ (8008430 <HAL_RCC_OscConfig+0x4f8>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008428:	2b00      	cmp	r3, #0
 800842a:	d0f0      	beq.n	800840e <HAL_RCC_OscConfig+0x4d6>
 800842c:	e01b      	b.n	8008466 <HAL_RCC_OscConfig+0x52e>
 800842e:	bf00      	nop
 8008430:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008434:	4b9b      	ldr	r3, [pc, #620]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a9a      	ldr	r2, [pc, #616]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 800843a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800843e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008440:	f7fa fa72 	bl	8002928 <HAL_GetTick>
 8008444:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008446:	e008      	b.n	800845a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008448:	f7fa fa6e 	bl	8002928 <HAL_GetTick>
 800844c:	4602      	mov	r2, r0
 800844e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008450:	1ad3      	subs	r3, r2, r3
 8008452:	2b02      	cmp	r3, #2
 8008454:	d901      	bls.n	800845a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008456:	2303      	movs	r3, #3
 8008458:	e1c0      	b.n	80087dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800845a:	4b92      	ldr	r3, [pc, #584]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008462:	2b00      	cmp	r3, #0
 8008464:	d1f0      	bne.n	8008448 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 0304 	and.w	r3, r3, #4
 800846e:	2b00      	cmp	r3, #0
 8008470:	f000 8081 	beq.w	8008576 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008474:	4b8c      	ldr	r3, [pc, #560]	@ (80086a8 <HAL_RCC_OscConfig+0x770>)
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4a8b      	ldr	r2, [pc, #556]	@ (80086a8 <HAL_RCC_OscConfig+0x770>)
 800847a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800847e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008480:	f7fa fa52 	bl	8002928 <HAL_GetTick>
 8008484:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008486:	e008      	b.n	800849a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008488:	f7fa fa4e 	bl	8002928 <HAL_GetTick>
 800848c:	4602      	mov	r2, r0
 800848e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008490:	1ad3      	subs	r3, r2, r3
 8008492:	2b64      	cmp	r3, #100	@ 0x64
 8008494:	d901      	bls.n	800849a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008496:	2303      	movs	r3, #3
 8008498:	e1a0      	b.n	80087dc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800849a:	4b83      	ldr	r3, [pc, #524]	@ (80086a8 <HAL_RCC_OscConfig+0x770>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d0f0      	beq.n	8008488 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	2b01      	cmp	r3, #1
 80084ac:	d106      	bne.n	80084bc <HAL_RCC_OscConfig+0x584>
 80084ae:	4b7d      	ldr	r3, [pc, #500]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 80084b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084b2:	4a7c      	ldr	r2, [pc, #496]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 80084b4:	f043 0301 	orr.w	r3, r3, #1
 80084b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80084ba:	e02d      	b.n	8008518 <HAL_RCC_OscConfig+0x5e0>
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	689b      	ldr	r3, [r3, #8]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d10c      	bne.n	80084de <HAL_RCC_OscConfig+0x5a6>
 80084c4:	4b77      	ldr	r3, [pc, #476]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 80084c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084c8:	4a76      	ldr	r2, [pc, #472]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 80084ca:	f023 0301 	bic.w	r3, r3, #1
 80084ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80084d0:	4b74      	ldr	r3, [pc, #464]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 80084d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084d4:	4a73      	ldr	r2, [pc, #460]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 80084d6:	f023 0304 	bic.w	r3, r3, #4
 80084da:	6713      	str	r3, [r2, #112]	@ 0x70
 80084dc:	e01c      	b.n	8008518 <HAL_RCC_OscConfig+0x5e0>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	2b05      	cmp	r3, #5
 80084e4:	d10c      	bne.n	8008500 <HAL_RCC_OscConfig+0x5c8>
 80084e6:	4b6f      	ldr	r3, [pc, #444]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 80084e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084ea:	4a6e      	ldr	r2, [pc, #440]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 80084ec:	f043 0304 	orr.w	r3, r3, #4
 80084f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80084f2:	4b6c      	ldr	r3, [pc, #432]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 80084f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084f6:	4a6b      	ldr	r2, [pc, #428]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 80084f8:	f043 0301 	orr.w	r3, r3, #1
 80084fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80084fe:	e00b      	b.n	8008518 <HAL_RCC_OscConfig+0x5e0>
 8008500:	4b68      	ldr	r3, [pc, #416]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 8008502:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008504:	4a67      	ldr	r2, [pc, #412]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 8008506:	f023 0301 	bic.w	r3, r3, #1
 800850a:	6713      	str	r3, [r2, #112]	@ 0x70
 800850c:	4b65      	ldr	r3, [pc, #404]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 800850e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008510:	4a64      	ldr	r2, [pc, #400]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 8008512:	f023 0304 	bic.w	r3, r3, #4
 8008516:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d015      	beq.n	800854c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008520:	f7fa fa02 	bl	8002928 <HAL_GetTick>
 8008524:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008526:	e00a      	b.n	800853e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008528:	f7fa f9fe 	bl	8002928 <HAL_GetTick>
 800852c:	4602      	mov	r2, r0
 800852e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008536:	4293      	cmp	r3, r2
 8008538:	d901      	bls.n	800853e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800853a:	2303      	movs	r3, #3
 800853c:	e14e      	b.n	80087dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800853e:	4b59      	ldr	r3, [pc, #356]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 8008540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008542:	f003 0302 	and.w	r3, r3, #2
 8008546:	2b00      	cmp	r3, #0
 8008548:	d0ee      	beq.n	8008528 <HAL_RCC_OscConfig+0x5f0>
 800854a:	e014      	b.n	8008576 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800854c:	f7fa f9ec 	bl	8002928 <HAL_GetTick>
 8008550:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008552:	e00a      	b.n	800856a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008554:	f7fa f9e8 	bl	8002928 <HAL_GetTick>
 8008558:	4602      	mov	r2, r0
 800855a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800855c:	1ad3      	subs	r3, r2, r3
 800855e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008562:	4293      	cmp	r3, r2
 8008564:	d901      	bls.n	800856a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	e138      	b.n	80087dc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800856a:	4b4e      	ldr	r3, [pc, #312]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 800856c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800856e:	f003 0302 	and.w	r3, r3, #2
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1ee      	bne.n	8008554 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800857a:	2b00      	cmp	r3, #0
 800857c:	f000 812d 	beq.w	80087da <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008580:	4b48      	ldr	r3, [pc, #288]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008588:	2b18      	cmp	r3, #24
 800858a:	f000 80bd 	beq.w	8008708 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008592:	2b02      	cmp	r3, #2
 8008594:	f040 809e 	bne.w	80086d4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008598:	4b42      	ldr	r3, [pc, #264]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a41      	ldr	r2, [pc, #260]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 800859e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80085a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085a4:	f7fa f9c0 	bl	8002928 <HAL_GetTick>
 80085a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80085aa:	e008      	b.n	80085be <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80085ac:	f7fa f9bc 	bl	8002928 <HAL_GetTick>
 80085b0:	4602      	mov	r2, r0
 80085b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	2b02      	cmp	r3, #2
 80085b8:	d901      	bls.n	80085be <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80085ba:	2303      	movs	r3, #3
 80085bc:	e10e      	b.n	80087dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80085be:	4b39      	ldr	r3, [pc, #228]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d1f0      	bne.n	80085ac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80085ca:	4b36      	ldr	r3, [pc, #216]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 80085cc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80085ce:	4b37      	ldr	r3, [pc, #220]	@ (80086ac <HAL_RCC_OscConfig+0x774>)
 80085d0:	4013      	ands	r3, r2
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80085da:	0112      	lsls	r2, r2, #4
 80085dc:	430a      	orrs	r2, r1
 80085de:	4931      	ldr	r1, [pc, #196]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 80085e0:	4313      	orrs	r3, r2
 80085e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085e8:	3b01      	subs	r3, #1
 80085ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085f2:	3b01      	subs	r3, #1
 80085f4:	025b      	lsls	r3, r3, #9
 80085f6:	b29b      	uxth	r3, r3
 80085f8:	431a      	orrs	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085fe:	3b01      	subs	r3, #1
 8008600:	041b      	lsls	r3, r3, #16
 8008602:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8008606:	431a      	orrs	r2, r3
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800860c:	3b01      	subs	r3, #1
 800860e:	061b      	lsls	r3, r3, #24
 8008610:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008614:	4923      	ldr	r1, [pc, #140]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 8008616:	4313      	orrs	r3, r2
 8008618:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800861a:	4b22      	ldr	r3, [pc, #136]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 800861c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800861e:	4a21      	ldr	r2, [pc, #132]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 8008620:	f023 0301 	bic.w	r3, r3, #1
 8008624:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008626:	4b1f      	ldr	r3, [pc, #124]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 8008628:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800862a:	4b21      	ldr	r3, [pc, #132]	@ (80086b0 <HAL_RCC_OscConfig+0x778>)
 800862c:	4013      	ands	r3, r2
 800862e:	687a      	ldr	r2, [r7, #4]
 8008630:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8008632:	00d2      	lsls	r2, r2, #3
 8008634:	491b      	ldr	r1, [pc, #108]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 8008636:	4313      	orrs	r3, r2
 8008638:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800863a:	4b1a      	ldr	r3, [pc, #104]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 800863c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800863e:	f023 020c 	bic.w	r2, r3, #12
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008646:	4917      	ldr	r1, [pc, #92]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 8008648:	4313      	orrs	r3, r2
 800864a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800864c:	4b15      	ldr	r3, [pc, #84]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 800864e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008650:	f023 0202 	bic.w	r2, r3, #2
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008658:	4912      	ldr	r1, [pc, #72]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 800865a:	4313      	orrs	r3, r2
 800865c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800865e:	4b11      	ldr	r3, [pc, #68]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 8008660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008662:	4a10      	ldr	r2, [pc, #64]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 8008664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008668:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800866a:	4b0e      	ldr	r3, [pc, #56]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 800866c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800866e:	4a0d      	ldr	r2, [pc, #52]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 8008670:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008674:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008676:	4b0b      	ldr	r3, [pc, #44]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 8008678:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800867a:	4a0a      	ldr	r2, [pc, #40]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 800867c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008680:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008682:	4b08      	ldr	r3, [pc, #32]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 8008684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008686:	4a07      	ldr	r2, [pc, #28]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 8008688:	f043 0301 	orr.w	r3, r3, #1
 800868c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800868e:	4b05      	ldr	r3, [pc, #20]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	4a04      	ldr	r2, [pc, #16]	@ (80086a4 <HAL_RCC_OscConfig+0x76c>)
 8008694:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800869a:	f7fa f945 	bl	8002928 <HAL_GetTick>
 800869e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086a0:	e011      	b.n	80086c6 <HAL_RCC_OscConfig+0x78e>
 80086a2:	bf00      	nop
 80086a4:	58024400 	.word	0x58024400
 80086a8:	58024800 	.word	0x58024800
 80086ac:	fffffc0c 	.word	0xfffffc0c
 80086b0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086b4:	f7fa f938 	bl	8002928 <HAL_GetTick>
 80086b8:	4602      	mov	r2, r0
 80086ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086bc:	1ad3      	subs	r3, r2, r3
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d901      	bls.n	80086c6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80086c2:	2303      	movs	r3, #3
 80086c4:	e08a      	b.n	80087dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80086c6:	4b47      	ldr	r3, [pc, #284]	@ (80087e4 <HAL_RCC_OscConfig+0x8ac>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d0f0      	beq.n	80086b4 <HAL_RCC_OscConfig+0x77c>
 80086d2:	e082      	b.n	80087da <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80086d4:	4b43      	ldr	r3, [pc, #268]	@ (80087e4 <HAL_RCC_OscConfig+0x8ac>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4a42      	ldr	r2, [pc, #264]	@ (80087e4 <HAL_RCC_OscConfig+0x8ac>)
 80086da:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80086de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086e0:	f7fa f922 	bl	8002928 <HAL_GetTick>
 80086e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086e6:	e008      	b.n	80086fa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086e8:	f7fa f91e 	bl	8002928 <HAL_GetTick>
 80086ec:	4602      	mov	r2, r0
 80086ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f0:	1ad3      	subs	r3, r2, r3
 80086f2:	2b02      	cmp	r3, #2
 80086f4:	d901      	bls.n	80086fa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80086f6:	2303      	movs	r3, #3
 80086f8:	e070      	b.n	80087dc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80086fa:	4b3a      	ldr	r3, [pc, #232]	@ (80087e4 <HAL_RCC_OscConfig+0x8ac>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d1f0      	bne.n	80086e8 <HAL_RCC_OscConfig+0x7b0>
 8008706:	e068      	b.n	80087da <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008708:	4b36      	ldr	r3, [pc, #216]	@ (80087e4 <HAL_RCC_OscConfig+0x8ac>)
 800870a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800870c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800870e:	4b35      	ldr	r3, [pc, #212]	@ (80087e4 <HAL_RCC_OscConfig+0x8ac>)
 8008710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008712:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008718:	2b01      	cmp	r3, #1
 800871a:	d031      	beq.n	8008780 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800871c:	693b      	ldr	r3, [r7, #16]
 800871e:	f003 0203 	and.w	r2, r3, #3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008726:	429a      	cmp	r2, r3
 8008728:	d12a      	bne.n	8008780 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	091b      	lsrs	r3, r3, #4
 800872e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008736:	429a      	cmp	r2, r3
 8008738:	d122      	bne.n	8008780 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008744:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008746:	429a      	cmp	r2, r3
 8008748:	d11a      	bne.n	8008780 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	0a5b      	lsrs	r3, r3, #9
 800874e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008756:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008758:	429a      	cmp	r2, r3
 800875a:	d111      	bne.n	8008780 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	0c1b      	lsrs	r3, r3, #16
 8008760:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008768:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800876a:	429a      	cmp	r2, r3
 800876c:	d108      	bne.n	8008780 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	0e1b      	lsrs	r3, r3, #24
 8008772:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800877a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800877c:	429a      	cmp	r2, r3
 800877e:	d001      	beq.n	8008784 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	e02b      	b.n	80087dc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008784:	4b17      	ldr	r3, [pc, #92]	@ (80087e4 <HAL_RCC_OscConfig+0x8ac>)
 8008786:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008788:	08db      	lsrs	r3, r3, #3
 800878a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800878e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008794:	693a      	ldr	r2, [r7, #16]
 8008796:	429a      	cmp	r2, r3
 8008798:	d01f      	beq.n	80087da <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800879a:	4b12      	ldr	r3, [pc, #72]	@ (80087e4 <HAL_RCC_OscConfig+0x8ac>)
 800879c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800879e:	4a11      	ldr	r2, [pc, #68]	@ (80087e4 <HAL_RCC_OscConfig+0x8ac>)
 80087a0:	f023 0301 	bic.w	r3, r3, #1
 80087a4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80087a6:	f7fa f8bf 	bl	8002928 <HAL_GetTick>
 80087aa:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80087ac:	bf00      	nop
 80087ae:	f7fa f8bb 	bl	8002928 <HAL_GetTick>
 80087b2:	4602      	mov	r2, r0
 80087b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d0f9      	beq.n	80087ae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80087ba:	4b0a      	ldr	r3, [pc, #40]	@ (80087e4 <HAL_RCC_OscConfig+0x8ac>)
 80087bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80087be:	4b0a      	ldr	r3, [pc, #40]	@ (80087e8 <HAL_RCC_OscConfig+0x8b0>)
 80087c0:	4013      	ands	r3, r2
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80087c6:	00d2      	lsls	r2, r2, #3
 80087c8:	4906      	ldr	r1, [pc, #24]	@ (80087e4 <HAL_RCC_OscConfig+0x8ac>)
 80087ca:	4313      	orrs	r3, r2
 80087cc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80087ce:	4b05      	ldr	r3, [pc, #20]	@ (80087e4 <HAL_RCC_OscConfig+0x8ac>)
 80087d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087d2:	4a04      	ldr	r2, [pc, #16]	@ (80087e4 <HAL_RCC_OscConfig+0x8ac>)
 80087d4:	f043 0301 	orr.w	r3, r3, #1
 80087d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	3730      	adds	r7, #48	@ 0x30
 80087e0:	46bd      	mov	sp, r7
 80087e2:	bd80      	pop	{r7, pc}
 80087e4:	58024400 	.word	0x58024400
 80087e8:	ffff0007 	.word	0xffff0007

080087ec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b086      	sub	sp, #24
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
 80087f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d101      	bne.n	8008800 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80087fc:	2301      	movs	r3, #1
 80087fe:	e19c      	b.n	8008b3a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008800:	4b8a      	ldr	r3, [pc, #552]	@ (8008a2c <HAL_RCC_ClockConfig+0x240>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f003 030f 	and.w	r3, r3, #15
 8008808:	683a      	ldr	r2, [r7, #0]
 800880a:	429a      	cmp	r2, r3
 800880c:	d910      	bls.n	8008830 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800880e:	4b87      	ldr	r3, [pc, #540]	@ (8008a2c <HAL_RCC_ClockConfig+0x240>)
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f023 020f 	bic.w	r2, r3, #15
 8008816:	4985      	ldr	r1, [pc, #532]	@ (8008a2c <HAL_RCC_ClockConfig+0x240>)
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	4313      	orrs	r3, r2
 800881c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800881e:	4b83      	ldr	r3, [pc, #524]	@ (8008a2c <HAL_RCC_ClockConfig+0x240>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f003 030f 	and.w	r3, r3, #15
 8008826:	683a      	ldr	r2, [r7, #0]
 8008828:	429a      	cmp	r2, r3
 800882a:	d001      	beq.n	8008830 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800882c:	2301      	movs	r3, #1
 800882e:	e184      	b.n	8008b3a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 0304 	and.w	r3, r3, #4
 8008838:	2b00      	cmp	r3, #0
 800883a:	d010      	beq.n	800885e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	691a      	ldr	r2, [r3, #16]
 8008840:	4b7b      	ldr	r3, [pc, #492]	@ (8008a30 <HAL_RCC_ClockConfig+0x244>)
 8008842:	699b      	ldr	r3, [r3, #24]
 8008844:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008848:	429a      	cmp	r2, r3
 800884a:	d908      	bls.n	800885e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800884c:	4b78      	ldr	r3, [pc, #480]	@ (8008a30 <HAL_RCC_ClockConfig+0x244>)
 800884e:	699b      	ldr	r3, [r3, #24]
 8008850:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	691b      	ldr	r3, [r3, #16]
 8008858:	4975      	ldr	r1, [pc, #468]	@ (8008a30 <HAL_RCC_ClockConfig+0x244>)
 800885a:	4313      	orrs	r3, r2
 800885c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f003 0308 	and.w	r3, r3, #8
 8008866:	2b00      	cmp	r3, #0
 8008868:	d010      	beq.n	800888c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	695a      	ldr	r2, [r3, #20]
 800886e:	4b70      	ldr	r3, [pc, #448]	@ (8008a30 <HAL_RCC_ClockConfig+0x244>)
 8008870:	69db      	ldr	r3, [r3, #28]
 8008872:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008876:	429a      	cmp	r2, r3
 8008878:	d908      	bls.n	800888c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800887a:	4b6d      	ldr	r3, [pc, #436]	@ (8008a30 <HAL_RCC_ClockConfig+0x244>)
 800887c:	69db      	ldr	r3, [r3, #28]
 800887e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	496a      	ldr	r1, [pc, #424]	@ (8008a30 <HAL_RCC_ClockConfig+0x244>)
 8008888:	4313      	orrs	r3, r2
 800888a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 0310 	and.w	r3, r3, #16
 8008894:	2b00      	cmp	r3, #0
 8008896:	d010      	beq.n	80088ba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	699a      	ldr	r2, [r3, #24]
 800889c:	4b64      	ldr	r3, [pc, #400]	@ (8008a30 <HAL_RCC_ClockConfig+0x244>)
 800889e:	69db      	ldr	r3, [r3, #28]
 80088a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80088a4:	429a      	cmp	r2, r3
 80088a6:	d908      	bls.n	80088ba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80088a8:	4b61      	ldr	r3, [pc, #388]	@ (8008a30 <HAL_RCC_ClockConfig+0x244>)
 80088aa:	69db      	ldr	r3, [r3, #28]
 80088ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	495e      	ldr	r1, [pc, #376]	@ (8008a30 <HAL_RCC_ClockConfig+0x244>)
 80088b6:	4313      	orrs	r3, r2
 80088b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f003 0320 	and.w	r3, r3, #32
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d010      	beq.n	80088e8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	69da      	ldr	r2, [r3, #28]
 80088ca:	4b59      	ldr	r3, [pc, #356]	@ (8008a30 <HAL_RCC_ClockConfig+0x244>)
 80088cc:	6a1b      	ldr	r3, [r3, #32]
 80088ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80088d2:	429a      	cmp	r2, r3
 80088d4:	d908      	bls.n	80088e8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80088d6:	4b56      	ldr	r3, [pc, #344]	@ (8008a30 <HAL_RCC_ClockConfig+0x244>)
 80088d8:	6a1b      	ldr	r3, [r3, #32]
 80088da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	69db      	ldr	r3, [r3, #28]
 80088e2:	4953      	ldr	r1, [pc, #332]	@ (8008a30 <HAL_RCC_ClockConfig+0x244>)
 80088e4:	4313      	orrs	r3, r2
 80088e6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f003 0302 	and.w	r3, r3, #2
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d010      	beq.n	8008916 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	68da      	ldr	r2, [r3, #12]
 80088f8:	4b4d      	ldr	r3, [pc, #308]	@ (8008a30 <HAL_RCC_ClockConfig+0x244>)
 80088fa:	699b      	ldr	r3, [r3, #24]
 80088fc:	f003 030f 	and.w	r3, r3, #15
 8008900:	429a      	cmp	r2, r3
 8008902:	d908      	bls.n	8008916 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008904:	4b4a      	ldr	r3, [pc, #296]	@ (8008a30 <HAL_RCC_ClockConfig+0x244>)
 8008906:	699b      	ldr	r3, [r3, #24]
 8008908:	f023 020f 	bic.w	r2, r3, #15
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	4947      	ldr	r1, [pc, #284]	@ (8008a30 <HAL_RCC_ClockConfig+0x244>)
 8008912:	4313      	orrs	r3, r2
 8008914:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 0301 	and.w	r3, r3, #1
 800891e:	2b00      	cmp	r3, #0
 8008920:	d055      	beq.n	80089ce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008922:	4b43      	ldr	r3, [pc, #268]	@ (8008a30 <HAL_RCC_ClockConfig+0x244>)
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	4940      	ldr	r1, [pc, #256]	@ (8008a30 <HAL_RCC_ClockConfig+0x244>)
 8008930:	4313      	orrs	r3, r2
 8008932:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	685b      	ldr	r3, [r3, #4]
 8008938:	2b02      	cmp	r3, #2
 800893a:	d107      	bne.n	800894c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800893c:	4b3c      	ldr	r3, [pc, #240]	@ (8008a30 <HAL_RCC_ClockConfig+0x244>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008944:	2b00      	cmp	r3, #0
 8008946:	d121      	bne.n	800898c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008948:	2301      	movs	r3, #1
 800894a:	e0f6      	b.n	8008b3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	2b03      	cmp	r3, #3
 8008952:	d107      	bne.n	8008964 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008954:	4b36      	ldr	r3, [pc, #216]	@ (8008a30 <HAL_RCC_ClockConfig+0x244>)
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800895c:	2b00      	cmp	r3, #0
 800895e:	d115      	bne.n	800898c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e0ea      	b.n	8008b3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	2b01      	cmp	r3, #1
 800896a:	d107      	bne.n	800897c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800896c:	4b30      	ldr	r3, [pc, #192]	@ (8008a30 <HAL_RCC_ClockConfig+0x244>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008974:	2b00      	cmp	r3, #0
 8008976:	d109      	bne.n	800898c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008978:	2301      	movs	r3, #1
 800897a:	e0de      	b.n	8008b3a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800897c:	4b2c      	ldr	r3, [pc, #176]	@ (8008a30 <HAL_RCC_ClockConfig+0x244>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f003 0304 	and.w	r3, r3, #4
 8008984:	2b00      	cmp	r3, #0
 8008986:	d101      	bne.n	800898c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008988:	2301      	movs	r3, #1
 800898a:	e0d6      	b.n	8008b3a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800898c:	4b28      	ldr	r3, [pc, #160]	@ (8008a30 <HAL_RCC_ClockConfig+0x244>)
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	f023 0207 	bic.w	r2, r3, #7
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	4925      	ldr	r1, [pc, #148]	@ (8008a30 <HAL_RCC_ClockConfig+0x244>)
 800899a:	4313      	orrs	r3, r2
 800899c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800899e:	f7f9 ffc3 	bl	8002928 <HAL_GetTick>
 80089a2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089a4:	e00a      	b.n	80089bc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80089a6:	f7f9 ffbf 	bl	8002928 <HAL_GetTick>
 80089aa:	4602      	mov	r2, r0
 80089ac:	697b      	ldr	r3, [r7, #20]
 80089ae:	1ad3      	subs	r3, r2, r3
 80089b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80089b4:	4293      	cmp	r3, r2
 80089b6:	d901      	bls.n	80089bc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80089b8:	2303      	movs	r3, #3
 80089ba:	e0be      	b.n	8008b3a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80089bc:	4b1c      	ldr	r3, [pc, #112]	@ (8008a30 <HAL_RCC_ClockConfig+0x244>)
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	00db      	lsls	r3, r3, #3
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d1eb      	bne.n	80089a6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 0302 	and.w	r3, r3, #2
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d010      	beq.n	80089fc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	68da      	ldr	r2, [r3, #12]
 80089de:	4b14      	ldr	r3, [pc, #80]	@ (8008a30 <HAL_RCC_ClockConfig+0x244>)
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	f003 030f 	and.w	r3, r3, #15
 80089e6:	429a      	cmp	r2, r3
 80089e8:	d208      	bcs.n	80089fc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80089ea:	4b11      	ldr	r3, [pc, #68]	@ (8008a30 <HAL_RCC_ClockConfig+0x244>)
 80089ec:	699b      	ldr	r3, [r3, #24]
 80089ee:	f023 020f 	bic.w	r2, r3, #15
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	490e      	ldr	r1, [pc, #56]	@ (8008a30 <HAL_RCC_ClockConfig+0x244>)
 80089f8:	4313      	orrs	r3, r2
 80089fa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80089fc:	4b0b      	ldr	r3, [pc, #44]	@ (8008a2c <HAL_RCC_ClockConfig+0x240>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f003 030f 	and.w	r3, r3, #15
 8008a04:	683a      	ldr	r2, [r7, #0]
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d214      	bcs.n	8008a34 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a0a:	4b08      	ldr	r3, [pc, #32]	@ (8008a2c <HAL_RCC_ClockConfig+0x240>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f023 020f 	bic.w	r2, r3, #15
 8008a12:	4906      	ldr	r1, [pc, #24]	@ (8008a2c <HAL_RCC_ClockConfig+0x240>)
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	4313      	orrs	r3, r2
 8008a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a1a:	4b04      	ldr	r3, [pc, #16]	@ (8008a2c <HAL_RCC_ClockConfig+0x240>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 030f 	and.w	r3, r3, #15
 8008a22:	683a      	ldr	r2, [r7, #0]
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d005      	beq.n	8008a34 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e086      	b.n	8008b3a <HAL_RCC_ClockConfig+0x34e>
 8008a2c:	52002000 	.word	0x52002000
 8008a30:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 0304 	and.w	r3, r3, #4
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d010      	beq.n	8008a62 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	691a      	ldr	r2, [r3, #16]
 8008a44:	4b3f      	ldr	r3, [pc, #252]	@ (8008b44 <HAL_RCC_ClockConfig+0x358>)
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d208      	bcs.n	8008a62 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008a50:	4b3c      	ldr	r3, [pc, #240]	@ (8008b44 <HAL_RCC_ClockConfig+0x358>)
 8008a52:	699b      	ldr	r3, [r3, #24]
 8008a54:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	4939      	ldr	r1, [pc, #228]	@ (8008b44 <HAL_RCC_ClockConfig+0x358>)
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f003 0308 	and.w	r3, r3, #8
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d010      	beq.n	8008a90 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	695a      	ldr	r2, [r3, #20]
 8008a72:	4b34      	ldr	r3, [pc, #208]	@ (8008b44 <HAL_RCC_ClockConfig+0x358>)
 8008a74:	69db      	ldr	r3, [r3, #28]
 8008a76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d208      	bcs.n	8008a90 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008a7e:	4b31      	ldr	r3, [pc, #196]	@ (8008b44 <HAL_RCC_ClockConfig+0x358>)
 8008a80:	69db      	ldr	r3, [r3, #28]
 8008a82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	695b      	ldr	r3, [r3, #20]
 8008a8a:	492e      	ldr	r1, [pc, #184]	@ (8008b44 <HAL_RCC_ClockConfig+0x358>)
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 0310 	and.w	r3, r3, #16
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d010      	beq.n	8008abe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	699a      	ldr	r2, [r3, #24]
 8008aa0:	4b28      	ldr	r3, [pc, #160]	@ (8008b44 <HAL_RCC_ClockConfig+0x358>)
 8008aa2:	69db      	ldr	r3, [r3, #28]
 8008aa4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d208      	bcs.n	8008abe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8008aac:	4b25      	ldr	r3, [pc, #148]	@ (8008b44 <HAL_RCC_ClockConfig+0x358>)
 8008aae:	69db      	ldr	r3, [r3, #28]
 8008ab0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	699b      	ldr	r3, [r3, #24]
 8008ab8:	4922      	ldr	r1, [pc, #136]	@ (8008b44 <HAL_RCC_ClockConfig+0x358>)
 8008aba:	4313      	orrs	r3, r2
 8008abc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	f003 0320 	and.w	r3, r3, #32
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d010      	beq.n	8008aec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	69da      	ldr	r2, [r3, #28]
 8008ace:	4b1d      	ldr	r3, [pc, #116]	@ (8008b44 <HAL_RCC_ClockConfig+0x358>)
 8008ad0:	6a1b      	ldr	r3, [r3, #32]
 8008ad2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d208      	bcs.n	8008aec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8008ada:	4b1a      	ldr	r3, [pc, #104]	@ (8008b44 <HAL_RCC_ClockConfig+0x358>)
 8008adc:	6a1b      	ldr	r3, [r3, #32]
 8008ade:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	69db      	ldr	r3, [r3, #28]
 8008ae6:	4917      	ldr	r1, [pc, #92]	@ (8008b44 <HAL_RCC_ClockConfig+0x358>)
 8008ae8:	4313      	orrs	r3, r2
 8008aea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008aec:	f000 f834 	bl	8008b58 <HAL_RCC_GetSysClockFreq>
 8008af0:	4602      	mov	r2, r0
 8008af2:	4b14      	ldr	r3, [pc, #80]	@ (8008b44 <HAL_RCC_ClockConfig+0x358>)
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	0a1b      	lsrs	r3, r3, #8
 8008af8:	f003 030f 	and.w	r3, r3, #15
 8008afc:	4912      	ldr	r1, [pc, #72]	@ (8008b48 <HAL_RCC_ClockConfig+0x35c>)
 8008afe:	5ccb      	ldrb	r3, [r1, r3]
 8008b00:	f003 031f 	and.w	r3, r3, #31
 8008b04:	fa22 f303 	lsr.w	r3, r2, r3
 8008b08:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8008b44 <HAL_RCC_ClockConfig+0x358>)
 8008b0c:	699b      	ldr	r3, [r3, #24]
 8008b0e:	f003 030f 	and.w	r3, r3, #15
 8008b12:	4a0d      	ldr	r2, [pc, #52]	@ (8008b48 <HAL_RCC_ClockConfig+0x35c>)
 8008b14:	5cd3      	ldrb	r3, [r2, r3]
 8008b16:	f003 031f 	and.w	r3, r3, #31
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8008b20:	4a0a      	ldr	r2, [pc, #40]	@ (8008b4c <HAL_RCC_ClockConfig+0x360>)
 8008b22:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008b24:	4a0a      	ldr	r2, [pc, #40]	@ (8008b50 <HAL_RCC_ClockConfig+0x364>)
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008b2a:	4b0a      	ldr	r3, [pc, #40]	@ (8008b54 <HAL_RCC_ClockConfig+0x368>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7f9 feb0 	bl	8002894 <HAL_InitTick>
 8008b34:	4603      	mov	r3, r0
 8008b36:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3718      	adds	r7, #24
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}
 8008b42:	bf00      	nop
 8008b44:	58024400 	.word	0x58024400
 8008b48:	08014a80 	.word	0x08014a80
 8008b4c:	24000004 	.word	0x24000004
 8008b50:	24000000 	.word	0x24000000
 8008b54:	24000030 	.word	0x24000030

08008b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b089      	sub	sp, #36	@ 0x24
 8008b5c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008b5e:	4bb3      	ldr	r3, [pc, #716]	@ (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b60:	691b      	ldr	r3, [r3, #16]
 8008b62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8008b66:	2b18      	cmp	r3, #24
 8008b68:	f200 8155 	bhi.w	8008e16 <HAL_RCC_GetSysClockFreq+0x2be>
 8008b6c:	a201      	add	r2, pc, #4	@ (adr r2, 8008b74 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b72:	bf00      	nop
 8008b74:	08008bd9 	.word	0x08008bd9
 8008b78:	08008e17 	.word	0x08008e17
 8008b7c:	08008e17 	.word	0x08008e17
 8008b80:	08008e17 	.word	0x08008e17
 8008b84:	08008e17 	.word	0x08008e17
 8008b88:	08008e17 	.word	0x08008e17
 8008b8c:	08008e17 	.word	0x08008e17
 8008b90:	08008e17 	.word	0x08008e17
 8008b94:	08008bff 	.word	0x08008bff
 8008b98:	08008e17 	.word	0x08008e17
 8008b9c:	08008e17 	.word	0x08008e17
 8008ba0:	08008e17 	.word	0x08008e17
 8008ba4:	08008e17 	.word	0x08008e17
 8008ba8:	08008e17 	.word	0x08008e17
 8008bac:	08008e17 	.word	0x08008e17
 8008bb0:	08008e17 	.word	0x08008e17
 8008bb4:	08008c05 	.word	0x08008c05
 8008bb8:	08008e17 	.word	0x08008e17
 8008bbc:	08008e17 	.word	0x08008e17
 8008bc0:	08008e17 	.word	0x08008e17
 8008bc4:	08008e17 	.word	0x08008e17
 8008bc8:	08008e17 	.word	0x08008e17
 8008bcc:	08008e17 	.word	0x08008e17
 8008bd0:	08008e17 	.word	0x08008e17
 8008bd4:	08008c0b 	.word	0x08008c0b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008bd8:	4b94      	ldr	r3, [pc, #592]	@ (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f003 0320 	and.w	r3, r3, #32
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d009      	beq.n	8008bf8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008be4:	4b91      	ldr	r3, [pc, #580]	@ (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	08db      	lsrs	r3, r3, #3
 8008bea:	f003 0303 	and.w	r3, r3, #3
 8008bee:	4a90      	ldr	r2, [pc, #576]	@ (8008e30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8008bf4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8008bf6:	e111      	b.n	8008e1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008bf8:	4b8d      	ldr	r3, [pc, #564]	@ (8008e30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008bfa:	61bb      	str	r3, [r7, #24]
      break;
 8008bfc:	e10e      	b.n	8008e1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008bfe:	4b8d      	ldr	r3, [pc, #564]	@ (8008e34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008c00:	61bb      	str	r3, [r7, #24]
      break;
 8008c02:	e10b      	b.n	8008e1c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008c04:	4b8c      	ldr	r3, [pc, #560]	@ (8008e38 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008c06:	61bb      	str	r3, [r7, #24]
      break;
 8008c08:	e108      	b.n	8008e1c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008c0a:	4b88      	ldr	r3, [pc, #544]	@ (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c0e:	f003 0303 	and.w	r3, r3, #3
 8008c12:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008c14:	4b85      	ldr	r3, [pc, #532]	@ (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c18:	091b      	lsrs	r3, r3, #4
 8008c1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008c1e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008c20:	4b82      	ldr	r3, [pc, #520]	@ (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c24:	f003 0301 	and.w	r3, r3, #1
 8008c28:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8008c2a:	4b80      	ldr	r3, [pc, #512]	@ (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c2e:	08db      	lsrs	r3, r3, #3
 8008c30:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008c34:	68fa      	ldr	r2, [r7, #12]
 8008c36:	fb02 f303 	mul.w	r3, r2, r3
 8008c3a:	ee07 3a90 	vmov	s15, r3
 8008c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c42:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f000 80e1 	beq.w	8008e10 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	f000 8083 	beq.w	8008d5c <HAL_RCC_GetSysClockFreq+0x204>
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	f200 80a1 	bhi.w	8008da0 <HAL_RCC_GetSysClockFreq+0x248>
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d003      	beq.n	8008c6c <HAL_RCC_GetSysClockFreq+0x114>
 8008c64:	697b      	ldr	r3, [r7, #20]
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d056      	beq.n	8008d18 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008c6a:	e099      	b.n	8008da0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008c6c:	4b6f      	ldr	r3, [pc, #444]	@ (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f003 0320 	and.w	r3, r3, #32
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d02d      	beq.n	8008cd4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c78:	4b6c      	ldr	r3, [pc, #432]	@ (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	08db      	lsrs	r3, r3, #3
 8008c7e:	f003 0303 	and.w	r3, r3, #3
 8008c82:	4a6b      	ldr	r2, [pc, #428]	@ (8008e30 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008c84:	fa22 f303 	lsr.w	r3, r2, r3
 8008c88:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	ee07 3a90 	vmov	s15, r3
 8008c90:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c94:	693b      	ldr	r3, [r7, #16]
 8008c96:	ee07 3a90 	vmov	s15, r3
 8008c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ca2:	4b62      	ldr	r3, [pc, #392]	@ (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ca6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008caa:	ee07 3a90 	vmov	s15, r3
 8008cae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cb6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008cba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008cbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008cc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008cc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008cce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8008cd2:	e087      	b.n	8008de4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	ee07 3a90 	vmov	s15, r3
 8008cda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008cde:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008e40 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008ce2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ce6:	4b51      	ldr	r3, [pc, #324]	@ (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008cee:	ee07 3a90 	vmov	s15, r3
 8008cf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008cf6:	ed97 6a02 	vldr	s12, [r7, #8]
 8008cfa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008cfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008d16:	e065      	b.n	8008de4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	ee07 3a90 	vmov	s15, r3
 8008d1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d22:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008e44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008d26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d2a:	4b40      	ldr	r3, [pc, #256]	@ (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d32:	ee07 3a90 	vmov	s15, r3
 8008d36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d3a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d3e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008d5a:	e043      	b.n	8008de4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	ee07 3a90 	vmov	s15, r3
 8008d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d66:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8008e48 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008d6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008d6e:	4b2f      	ldr	r3, [pc, #188]	@ (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d76:	ee07 3a90 	vmov	s15, r3
 8008d7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008d7e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008d82:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008d86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008d8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008d8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008d92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008d96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008d9e:	e021      	b.n	8008de4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	ee07 3a90 	vmov	s15, r3
 8008da6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008daa:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008e44 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008dae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008db2:	4b1e      	ldr	r3, [pc, #120]	@ (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008db6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008dba:	ee07 3a90 	vmov	s15, r3
 8008dbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008dc2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008dc6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008e3c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008dca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008dce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008dd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008dd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008dda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dde:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8008de2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8008de4:	4b11      	ldr	r3, [pc, #68]	@ (8008e2c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008de8:	0a5b      	lsrs	r3, r3, #9
 8008dea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008dee:	3301      	adds	r3, #1
 8008df0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	ee07 3a90 	vmov	s15, r3
 8008df8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008dfc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008e04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008e08:	ee17 3a90 	vmov	r3, s15
 8008e0c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008e0e:	e005      	b.n	8008e1c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008e10:	2300      	movs	r3, #0
 8008e12:	61bb      	str	r3, [r7, #24]
      break;
 8008e14:	e002      	b.n	8008e1c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8008e16:	4b07      	ldr	r3, [pc, #28]	@ (8008e34 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008e18:	61bb      	str	r3, [r7, #24]
      break;
 8008e1a:	bf00      	nop
  }

  return sysclockfreq;
 8008e1c:	69bb      	ldr	r3, [r7, #24]
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3724      	adds	r7, #36	@ 0x24
 8008e22:	46bd      	mov	sp, r7
 8008e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e28:	4770      	bx	lr
 8008e2a:	bf00      	nop
 8008e2c:	58024400 	.word	0x58024400
 8008e30:	03d09000 	.word	0x03d09000
 8008e34:	003d0900 	.word	0x003d0900
 8008e38:	017d7840 	.word	0x017d7840
 8008e3c:	46000000 	.word	0x46000000
 8008e40:	4c742400 	.word	0x4c742400
 8008e44:	4a742400 	.word	0x4a742400
 8008e48:	4bbebc20 	.word	0x4bbebc20

08008e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b082      	sub	sp, #8
 8008e50:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008e52:	f7ff fe81 	bl	8008b58 <HAL_RCC_GetSysClockFreq>
 8008e56:	4602      	mov	r2, r0
 8008e58:	4b10      	ldr	r3, [pc, #64]	@ (8008e9c <HAL_RCC_GetHCLKFreq+0x50>)
 8008e5a:	699b      	ldr	r3, [r3, #24]
 8008e5c:	0a1b      	lsrs	r3, r3, #8
 8008e5e:	f003 030f 	and.w	r3, r3, #15
 8008e62:	490f      	ldr	r1, [pc, #60]	@ (8008ea0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008e64:	5ccb      	ldrb	r3, [r1, r3]
 8008e66:	f003 031f 	and.w	r3, r3, #31
 8008e6a:	fa22 f303 	lsr.w	r3, r2, r3
 8008e6e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008e70:	4b0a      	ldr	r3, [pc, #40]	@ (8008e9c <HAL_RCC_GetHCLKFreq+0x50>)
 8008e72:	699b      	ldr	r3, [r3, #24]
 8008e74:	f003 030f 	and.w	r3, r3, #15
 8008e78:	4a09      	ldr	r2, [pc, #36]	@ (8008ea0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008e7a:	5cd3      	ldrb	r3, [r2, r3]
 8008e7c:	f003 031f 	and.w	r3, r3, #31
 8008e80:	687a      	ldr	r2, [r7, #4]
 8008e82:	fa22 f303 	lsr.w	r3, r2, r3
 8008e86:	4a07      	ldr	r2, [pc, #28]	@ (8008ea4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008e88:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008e8a:	4a07      	ldr	r2, [pc, #28]	@ (8008ea8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008e90:	4b04      	ldr	r3, [pc, #16]	@ (8008ea4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008e92:	681b      	ldr	r3, [r3, #0]
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	3708      	adds	r7, #8
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	bd80      	pop	{r7, pc}
 8008e9c:	58024400 	.word	0x58024400
 8008ea0:	08014a80 	.word	0x08014a80
 8008ea4:	24000004 	.word	0x24000004
 8008ea8:	24000000 	.word	0x24000000

08008eac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008eb0:	f7ff ffcc 	bl	8008e4c <HAL_RCC_GetHCLKFreq>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	4b06      	ldr	r3, [pc, #24]	@ (8008ed0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008eb8:	69db      	ldr	r3, [r3, #28]
 8008eba:	091b      	lsrs	r3, r3, #4
 8008ebc:	f003 0307 	and.w	r3, r3, #7
 8008ec0:	4904      	ldr	r1, [pc, #16]	@ (8008ed4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008ec2:	5ccb      	ldrb	r3, [r1, r3]
 8008ec4:	f003 031f 	and.w	r3, r3, #31
 8008ec8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	bd80      	pop	{r7, pc}
 8008ed0:	58024400 	.word	0x58024400
 8008ed4:	08014a80 	.word	0x08014a80

08008ed8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008edc:	f7ff ffb6 	bl	8008e4c <HAL_RCC_GetHCLKFreq>
 8008ee0:	4602      	mov	r2, r0
 8008ee2:	4b06      	ldr	r3, [pc, #24]	@ (8008efc <HAL_RCC_GetPCLK2Freq+0x24>)
 8008ee4:	69db      	ldr	r3, [r3, #28]
 8008ee6:	0a1b      	lsrs	r3, r3, #8
 8008ee8:	f003 0307 	and.w	r3, r3, #7
 8008eec:	4904      	ldr	r1, [pc, #16]	@ (8008f00 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008eee:	5ccb      	ldrb	r3, [r1, r3]
 8008ef0:	f003 031f 	and.w	r3, r3, #31
 8008ef4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	bd80      	pop	{r7, pc}
 8008efc:	58024400 	.word	0x58024400
 8008f00:	08014a80 	.word	0x08014a80

08008f04 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f08:	b0ca      	sub	sp, #296	@ 0x128
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008f10:	2300      	movs	r3, #0
 8008f12:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008f16:	2300      	movs	r3, #0
 8008f18:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008f1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f24:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8008f28:	2500      	movs	r5, #0
 8008f2a:	ea54 0305 	orrs.w	r3, r4, r5
 8008f2e:	d049      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008f36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008f3a:	d02f      	beq.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008f3c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008f40:	d828      	bhi.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008f42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008f46:	d01a      	beq.n	8008f7e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8008f48:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008f4c:	d822      	bhi.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d003      	beq.n	8008f5a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008f52:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008f56:	d007      	beq.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008f58:	e01c      	b.n	8008f94 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f5a:	4bb8      	ldr	r3, [pc, #736]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f5e:	4ab7      	ldr	r2, [pc, #732]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008f60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008f66:	e01a      	b.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f6c:	3308      	adds	r3, #8
 8008f6e:	2102      	movs	r1, #2
 8008f70:	4618      	mov	r0, r3
 8008f72:	f002 fb61 	bl	800b638 <RCCEx_PLL2_Config>
 8008f76:	4603      	mov	r3, r0
 8008f78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008f7c:	e00f      	b.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f82:	3328      	adds	r3, #40	@ 0x28
 8008f84:	2102      	movs	r1, #2
 8008f86:	4618      	mov	r0, r3
 8008f88:	f002 fc08 	bl	800b79c <RCCEx_PLL3_Config>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008f92:	e004      	b.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f94:	2301      	movs	r3, #1
 8008f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f9a:	e000      	b.n	8008f9e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008f9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d10a      	bne.n	8008fbc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008fa6:	4ba5      	ldr	r3, [pc, #660]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fa8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008faa:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8008fae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8008fb4:	4aa1      	ldr	r2, [pc, #644]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008fb6:	430b      	orrs	r3, r1
 8008fb8:	6513      	str	r3, [r2, #80]	@ 0x50
 8008fba:	e003      	b.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fcc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8008fd0:	f04f 0900 	mov.w	r9, #0
 8008fd4:	ea58 0309 	orrs.w	r3, r8, r9
 8008fd8:	d047      	beq.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008fe0:	2b04      	cmp	r3, #4
 8008fe2:	d82a      	bhi.n	800903a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8008fec <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fea:	bf00      	nop
 8008fec:	08009001 	.word	0x08009001
 8008ff0:	0800900f 	.word	0x0800900f
 8008ff4:	08009025 	.word	0x08009025
 8008ff8:	08009043 	.word	0x08009043
 8008ffc:	08009043 	.word	0x08009043
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009000:	4b8e      	ldr	r3, [pc, #568]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009004:	4a8d      	ldr	r2, [pc, #564]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800900a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800900c:	e01a      	b.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800900e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009012:	3308      	adds	r3, #8
 8009014:	2100      	movs	r1, #0
 8009016:	4618      	mov	r0, r3
 8009018:	f002 fb0e 	bl	800b638 <RCCEx_PLL2_Config>
 800901c:	4603      	mov	r3, r0
 800901e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009022:	e00f      	b.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009028:	3328      	adds	r3, #40	@ 0x28
 800902a:	2100      	movs	r1, #0
 800902c:	4618      	mov	r0, r3
 800902e:	f002 fbb5 	bl	800b79c <RCCEx_PLL3_Config>
 8009032:	4603      	mov	r3, r0
 8009034:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009038:	e004      	b.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800903a:	2301      	movs	r3, #1
 800903c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009040:	e000      	b.n	8009044 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009042:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009044:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009048:	2b00      	cmp	r3, #0
 800904a:	d10a      	bne.n	8009062 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800904c:	4b7b      	ldr	r3, [pc, #492]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800904e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009050:	f023 0107 	bic.w	r1, r3, #7
 8009054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009058:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800905a:	4a78      	ldr	r2, [pc, #480]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800905c:	430b      	orrs	r3, r1
 800905e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009060:	e003      	b.n	800906a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009066:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800906a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800906e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009072:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8009076:	f04f 0b00 	mov.w	fp, #0
 800907a:	ea5a 030b 	orrs.w	r3, sl, fp
 800907e:	d04c      	beq.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8009080:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009086:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800908a:	d030      	beq.n	80090ee <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800908c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009090:	d829      	bhi.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8009092:	2bc0      	cmp	r3, #192	@ 0xc0
 8009094:	d02d      	beq.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8009096:	2bc0      	cmp	r3, #192	@ 0xc0
 8009098:	d825      	bhi.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800909a:	2b80      	cmp	r3, #128	@ 0x80
 800909c:	d018      	beq.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800909e:	2b80      	cmp	r3, #128	@ 0x80
 80090a0:	d821      	bhi.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d002      	beq.n	80090ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80090a6:	2b40      	cmp	r3, #64	@ 0x40
 80090a8:	d007      	beq.n	80090ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80090aa:	e01c      	b.n	80090e6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090ac:	4b63      	ldr	r3, [pc, #396]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b0:	4a62      	ldr	r2, [pc, #392]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090b2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80090b6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80090b8:	e01c      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80090ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090be:	3308      	adds	r3, #8
 80090c0:	2100      	movs	r1, #0
 80090c2:	4618      	mov	r0, r3
 80090c4:	f002 fab8 	bl	800b638 <RCCEx_PLL2_Config>
 80090c8:	4603      	mov	r3, r0
 80090ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80090ce:	e011      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80090d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090d4:	3328      	adds	r3, #40	@ 0x28
 80090d6:	2100      	movs	r1, #0
 80090d8:	4618      	mov	r0, r3
 80090da:	f002 fb5f 	bl	800b79c <RCCEx_PLL3_Config>
 80090de:	4603      	mov	r3, r0
 80090e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80090e4:	e006      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80090ec:	e002      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80090ee:	bf00      	nop
 80090f0:	e000      	b.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80090f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80090f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d10a      	bne.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80090fc:	4b4f      	ldr	r3, [pc, #316]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80090fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009100:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8009104:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800910a:	4a4c      	ldr	r2, [pc, #304]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800910c:	430b      	orrs	r3, r1
 800910e:	6513      	str	r3, [r2, #80]	@ 0x50
 8009110:	e003      	b.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009116:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800911a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800911e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009122:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8009126:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800912a:	2300      	movs	r3, #0
 800912c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8009130:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8009134:	460b      	mov	r3, r1
 8009136:	4313      	orrs	r3, r2
 8009138:	d053      	beq.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800913a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800913e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8009142:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009146:	d035      	beq.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009148:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800914c:	d82e      	bhi.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800914e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009152:	d031      	beq.n	80091b8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009154:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009158:	d828      	bhi.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800915a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800915e:	d01a      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009160:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009164:	d822      	bhi.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009166:	2b00      	cmp	r3, #0
 8009168:	d003      	beq.n	8009172 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800916a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800916e:	d007      	beq.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009170:	e01c      	b.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009172:	4b32      	ldr	r3, [pc, #200]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009176:	4a31      	ldr	r2, [pc, #196]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009178:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800917c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800917e:	e01c      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009180:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009184:	3308      	adds	r3, #8
 8009186:	2100      	movs	r1, #0
 8009188:	4618      	mov	r0, r3
 800918a:	f002 fa55 	bl	800b638 <RCCEx_PLL2_Config>
 800918e:	4603      	mov	r3, r0
 8009190:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009194:	e011      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800919a:	3328      	adds	r3, #40	@ 0x28
 800919c:	2100      	movs	r1, #0
 800919e:	4618      	mov	r0, r3
 80091a0:	f002 fafc 	bl	800b79c <RCCEx_PLL3_Config>
 80091a4:	4603      	mov	r3, r0
 80091a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80091aa:	e006      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80091b2:	e002      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80091b4:	bf00      	nop
 80091b6:	e000      	b.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80091b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80091ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d10b      	bne.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80091c2:	4b1e      	ldr	r3, [pc, #120]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091c6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80091ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80091d2:	4a1a      	ldr	r2, [pc, #104]	@ (800923c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80091d4:	430b      	orrs	r3, r1
 80091d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80091d8:	e003      	b.n	80091e2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80091de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80091e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80091e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ea:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80091ee:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80091f2:	2300      	movs	r3, #0
 80091f4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80091f8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80091fc:	460b      	mov	r3, r1
 80091fe:	4313      	orrs	r3, r2
 8009200:	d056      	beq.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009206:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800920a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800920e:	d038      	beq.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009210:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8009214:	d831      	bhi.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009216:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800921a:	d034      	beq.n	8009286 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800921c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8009220:	d82b      	bhi.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009222:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009226:	d01d      	beq.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009228:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800922c:	d825      	bhi.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800922e:	2b00      	cmp	r3, #0
 8009230:	d006      	beq.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009232:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009236:	d00a      	beq.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009238:	e01f      	b.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800923a:	bf00      	nop
 800923c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009240:	4ba2      	ldr	r3, [pc, #648]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009242:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009244:	4aa1      	ldr	r2, [pc, #644]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009246:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800924a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800924c:	e01c      	b.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800924e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009252:	3308      	adds	r3, #8
 8009254:	2100      	movs	r1, #0
 8009256:	4618      	mov	r0, r3
 8009258:	f002 f9ee 	bl	800b638 <RCCEx_PLL2_Config>
 800925c:	4603      	mov	r3, r0
 800925e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009262:	e011      	b.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009264:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009268:	3328      	adds	r3, #40	@ 0x28
 800926a:	2100      	movs	r1, #0
 800926c:	4618      	mov	r0, r3
 800926e:	f002 fa95 	bl	800b79c <RCCEx_PLL3_Config>
 8009272:	4603      	mov	r3, r0
 8009274:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009278:	e006      	b.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009280:	e002      	b.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009282:	bf00      	nop
 8009284:	e000      	b.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009286:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009288:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800928c:	2b00      	cmp	r3, #0
 800928e:	d10b      	bne.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009290:	4b8e      	ldr	r3, [pc, #568]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009292:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009294:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8009298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800929c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80092a0:	4a8a      	ldr	r2, [pc, #552]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092a2:	430b      	orrs	r3, r1
 80092a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80092a6:	e003      	b.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80092b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80092bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80092c0:	2300      	movs	r3, #0
 80092c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80092c6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80092ca:	460b      	mov	r3, r1
 80092cc:	4313      	orrs	r3, r2
 80092ce:	d03a      	beq.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80092d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80092d6:	2b30      	cmp	r3, #48	@ 0x30
 80092d8:	d01f      	beq.n	800931a <HAL_RCCEx_PeriphCLKConfig+0x416>
 80092da:	2b30      	cmp	r3, #48	@ 0x30
 80092dc:	d819      	bhi.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80092de:	2b20      	cmp	r3, #32
 80092e0:	d00c      	beq.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80092e2:	2b20      	cmp	r3, #32
 80092e4:	d815      	bhi.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d019      	beq.n	800931e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80092ea:	2b10      	cmp	r3, #16
 80092ec:	d111      	bne.n	8009312 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092ee:	4b77      	ldr	r3, [pc, #476]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092f2:	4a76      	ldr	r2, [pc, #472]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80092f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80092f8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80092fa:	e011      	b.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80092fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009300:	3308      	adds	r3, #8
 8009302:	2102      	movs	r1, #2
 8009304:	4618      	mov	r0, r3
 8009306:	f002 f997 	bl	800b638 <RCCEx_PLL2_Config>
 800930a:	4603      	mov	r3, r0
 800930c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009310:	e006      	b.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009312:	2301      	movs	r3, #1
 8009314:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009318:	e002      	b.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800931a:	bf00      	nop
 800931c:	e000      	b.n	8009320 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800931e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009320:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009324:	2b00      	cmp	r3, #0
 8009326:	d10a      	bne.n	800933e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009328:	4b68      	ldr	r3, [pc, #416]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800932a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800932c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8009330:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009336:	4a65      	ldr	r2, [pc, #404]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009338:	430b      	orrs	r3, r1
 800933a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800933c:	e003      	b.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800933e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009342:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009346:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800934a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800934e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8009352:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009356:	2300      	movs	r3, #0
 8009358:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800935c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009360:	460b      	mov	r3, r1
 8009362:	4313      	orrs	r3, r2
 8009364:	d051      	beq.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800936a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800936c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009370:	d035      	beq.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009372:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009376:	d82e      	bhi.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009378:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800937c:	d031      	beq.n	80093e2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800937e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8009382:	d828      	bhi.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009384:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009388:	d01a      	beq.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800938a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800938e:	d822      	bhi.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009390:	2b00      	cmp	r3, #0
 8009392:	d003      	beq.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009394:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009398:	d007      	beq.n	80093aa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800939a:	e01c      	b.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800939c:	4b4b      	ldr	r3, [pc, #300]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800939e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093a0:	4a4a      	ldr	r2, [pc, #296]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80093a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80093a8:	e01c      	b.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80093aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093ae:	3308      	adds	r3, #8
 80093b0:	2100      	movs	r1, #0
 80093b2:	4618      	mov	r0, r3
 80093b4:	f002 f940 	bl	800b638 <RCCEx_PLL2_Config>
 80093b8:	4603      	mov	r3, r0
 80093ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80093be:	e011      	b.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80093c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093c4:	3328      	adds	r3, #40	@ 0x28
 80093c6:	2100      	movs	r1, #0
 80093c8:	4618      	mov	r0, r3
 80093ca:	f002 f9e7 	bl	800b79c <RCCEx_PLL3_Config>
 80093ce:	4603      	mov	r3, r0
 80093d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80093d4:	e006      	b.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80093dc:	e002      	b.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80093de:	bf00      	nop
 80093e0:	e000      	b.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80093e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d10a      	bne.n	8009402 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80093ec:	4b37      	ldr	r3, [pc, #220]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093f0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80093f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80093fa:	4a34      	ldr	r2, [pc, #208]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80093fc:	430b      	orrs	r3, r1
 80093fe:	6513      	str	r3, [r2, #80]	@ 0x50
 8009400:	e003      	b.n	800940a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009402:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009406:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800940a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800940e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009412:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8009416:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800941a:	2300      	movs	r3, #0
 800941c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8009420:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8009424:	460b      	mov	r3, r1
 8009426:	4313      	orrs	r3, r2
 8009428:	d056      	beq.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800942a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800942e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009430:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009434:	d033      	beq.n	800949e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009436:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800943a:	d82c      	bhi.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800943c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009440:	d02f      	beq.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009442:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8009446:	d826      	bhi.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009448:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800944c:	d02b      	beq.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800944e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8009452:	d820      	bhi.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009454:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009458:	d012      	beq.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800945a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800945e:	d81a      	bhi.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009460:	2b00      	cmp	r3, #0
 8009462:	d022      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009464:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009468:	d115      	bne.n	8009496 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800946a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800946e:	3308      	adds	r3, #8
 8009470:	2101      	movs	r1, #1
 8009472:	4618      	mov	r0, r3
 8009474:	f002 f8e0 	bl	800b638 <RCCEx_PLL2_Config>
 8009478:	4603      	mov	r3, r0
 800947a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800947e:	e015      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009480:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009484:	3328      	adds	r3, #40	@ 0x28
 8009486:	2101      	movs	r1, #1
 8009488:	4618      	mov	r0, r3
 800948a:	f002 f987 	bl	800b79c <RCCEx_PLL3_Config>
 800948e:	4603      	mov	r3, r0
 8009490:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009494:	e00a      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800949c:	e006      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800949e:	bf00      	nop
 80094a0:	e004      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80094a2:	bf00      	nop
 80094a4:	e002      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80094a6:	bf00      	nop
 80094a8:	e000      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80094aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80094ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d10d      	bne.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80094b4:	4b05      	ldr	r3, [pc, #20]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80094b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80094b8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80094bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094c0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80094c2:	4a02      	ldr	r2, [pc, #8]	@ (80094cc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80094c4:	430b      	orrs	r3, r1
 80094c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80094c8:	e006      	b.n	80094d8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80094ca:	bf00      	nop
 80094cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80094d4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80094d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80094e4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80094e8:	2300      	movs	r3, #0
 80094ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80094ee:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80094f2:	460b      	mov	r3, r1
 80094f4:	4313      	orrs	r3, r2
 80094f6:	d055      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80094f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009500:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009504:	d033      	beq.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009506:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800950a:	d82c      	bhi.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800950c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009510:	d02f      	beq.n	8009572 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009512:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009516:	d826      	bhi.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009518:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800951c:	d02b      	beq.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800951e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009522:	d820      	bhi.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009524:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009528:	d012      	beq.n	8009550 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800952a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800952e:	d81a      	bhi.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009530:	2b00      	cmp	r3, #0
 8009532:	d022      	beq.n	800957a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009534:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009538:	d115      	bne.n	8009566 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800953a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800953e:	3308      	adds	r3, #8
 8009540:	2101      	movs	r1, #1
 8009542:	4618      	mov	r0, r3
 8009544:	f002 f878 	bl	800b638 <RCCEx_PLL2_Config>
 8009548:	4603      	mov	r3, r0
 800954a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800954e:	e015      	b.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009550:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009554:	3328      	adds	r3, #40	@ 0x28
 8009556:	2101      	movs	r1, #1
 8009558:	4618      	mov	r0, r3
 800955a:	f002 f91f 	bl	800b79c <RCCEx_PLL3_Config>
 800955e:	4603      	mov	r3, r0
 8009560:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009564:	e00a      	b.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009566:	2301      	movs	r3, #1
 8009568:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800956c:	e006      	b.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800956e:	bf00      	nop
 8009570:	e004      	b.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009572:	bf00      	nop
 8009574:	e002      	b.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009576:	bf00      	nop
 8009578:	e000      	b.n	800957c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800957a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800957c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009580:	2b00      	cmp	r3, #0
 8009582:	d10b      	bne.n	800959c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009584:	4ba3      	ldr	r3, [pc, #652]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009588:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800958c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009590:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8009594:	4a9f      	ldr	r2, [pc, #636]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009596:	430b      	orrs	r3, r1
 8009598:	6593      	str	r3, [r2, #88]	@ 0x58
 800959a:	e003      	b.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800959c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80095a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095ac:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80095b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80095b4:	2300      	movs	r3, #0
 80095b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80095ba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80095be:	460b      	mov	r3, r1
 80095c0:	4313      	orrs	r3, r2
 80095c2:	d037      	beq.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80095c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80095ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095ce:	d00e      	beq.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80095d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80095d4:	d816      	bhi.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d018      	beq.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x708>
 80095da:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095de:	d111      	bne.n	8009604 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80095e0:	4b8c      	ldr	r3, [pc, #560]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095e4:	4a8b      	ldr	r2, [pc, #556]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80095e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80095ea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80095ec:	e00f      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80095ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095f2:	3308      	adds	r3, #8
 80095f4:	2101      	movs	r1, #1
 80095f6:	4618      	mov	r0, r3
 80095f8:	f002 f81e 	bl	800b638 <RCCEx_PLL2_Config>
 80095fc:	4603      	mov	r3, r0
 80095fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009602:	e004      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009604:	2301      	movs	r3, #1
 8009606:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800960a:	e000      	b.n	800960e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800960c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800960e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009612:	2b00      	cmp	r3, #0
 8009614:	d10a      	bne.n	800962c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009616:	4b7f      	ldr	r3, [pc, #508]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009618:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800961a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800961e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009624:	4a7b      	ldr	r2, [pc, #492]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009626:	430b      	orrs	r3, r1
 8009628:	6513      	str	r3, [r2, #80]	@ 0x50
 800962a:	e003      	b.n	8009634 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800962c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009630:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009634:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8009640:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009644:	2300      	movs	r3, #0
 8009646:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800964a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800964e:	460b      	mov	r3, r1
 8009650:	4313      	orrs	r3, r2
 8009652:	d039      	beq.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009658:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800965a:	2b03      	cmp	r3, #3
 800965c:	d81c      	bhi.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800965e:	a201      	add	r2, pc, #4	@ (adr r2, 8009664 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009664:	080096a1 	.word	0x080096a1
 8009668:	08009675 	.word	0x08009675
 800966c:	08009683 	.word	0x08009683
 8009670:	080096a1 	.word	0x080096a1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009674:	4b67      	ldr	r3, [pc, #412]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009678:	4a66      	ldr	r2, [pc, #408]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800967a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800967e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009680:	e00f      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009682:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009686:	3308      	adds	r3, #8
 8009688:	2102      	movs	r1, #2
 800968a:	4618      	mov	r0, r3
 800968c:	f001 ffd4 	bl	800b638 <RCCEx_PLL2_Config>
 8009690:	4603      	mov	r3, r0
 8009692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009696:	e004      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800969e:	e000      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80096a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d10a      	bne.n	80096c0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80096aa:	4b5a      	ldr	r3, [pc, #360]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096ae:	f023 0103 	bic.w	r1, r3, #3
 80096b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80096b8:	4a56      	ldr	r2, [pc, #344]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80096ba:	430b      	orrs	r3, r1
 80096bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80096be:	e003      	b.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80096c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80096c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80096d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80096d8:	2300      	movs	r3, #0
 80096da:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80096de:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80096e2:	460b      	mov	r3, r1
 80096e4:	4313      	orrs	r3, r2
 80096e6:	f000 809f 	beq.w	8009828 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80096ea:	4b4b      	ldr	r3, [pc, #300]	@ (8009818 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a4a      	ldr	r2, [pc, #296]	@ (8009818 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80096f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80096f4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80096f6:	f7f9 f917 	bl	8002928 <HAL_GetTick>
 80096fa:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80096fe:	e00b      	b.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009700:	f7f9 f912 	bl	8002928 <HAL_GetTick>
 8009704:	4602      	mov	r2, r0
 8009706:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800970a:	1ad3      	subs	r3, r2, r3
 800970c:	2b64      	cmp	r3, #100	@ 0x64
 800970e:	d903      	bls.n	8009718 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009710:	2303      	movs	r3, #3
 8009712:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009716:	e005      	b.n	8009724 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009718:	4b3f      	ldr	r3, [pc, #252]	@ (8009818 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009720:	2b00      	cmp	r3, #0
 8009722:	d0ed      	beq.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009724:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009728:	2b00      	cmp	r3, #0
 800972a:	d179      	bne.n	8009820 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800972c:	4b39      	ldr	r3, [pc, #228]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800972e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009734:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009738:	4053      	eors	r3, r2
 800973a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800973e:	2b00      	cmp	r3, #0
 8009740:	d015      	beq.n	800976e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009742:	4b34      	ldr	r3, [pc, #208]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009746:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800974a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800974e:	4b31      	ldr	r3, [pc, #196]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009752:	4a30      	ldr	r2, [pc, #192]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009754:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009758:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800975a:	4b2e      	ldr	r3, [pc, #184]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800975c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800975e:	4a2d      	ldr	r2, [pc, #180]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009760:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009764:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8009766:	4a2b      	ldr	r2, [pc, #172]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009768:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800976c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800976e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009772:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009776:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800977a:	d118      	bne.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800977c:	f7f9 f8d4 	bl	8002928 <HAL_GetTick>
 8009780:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009784:	e00d      	b.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009786:	f7f9 f8cf 	bl	8002928 <HAL_GetTick>
 800978a:	4602      	mov	r2, r0
 800978c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009790:	1ad2      	subs	r2, r2, r3
 8009792:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009796:	429a      	cmp	r2, r3
 8009798:	d903      	bls.n	80097a2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800979a:	2303      	movs	r3, #3
 800979c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80097a0:	e005      	b.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80097a2:	4b1c      	ldr	r3, [pc, #112]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80097a6:	f003 0302 	and.w	r3, r3, #2
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d0eb      	beq.n	8009786 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80097ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d129      	bne.n	800980a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80097b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097ba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80097be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80097c2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80097c6:	d10e      	bne.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80097c8:	4b12      	ldr	r3, [pc, #72]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097ca:	691b      	ldr	r3, [r3, #16]
 80097cc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80097d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097d4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80097d8:	091a      	lsrs	r2, r3, #4
 80097da:	4b10      	ldr	r3, [pc, #64]	@ (800981c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80097dc:	4013      	ands	r3, r2
 80097de:	4a0d      	ldr	r2, [pc, #52]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097e0:	430b      	orrs	r3, r1
 80097e2:	6113      	str	r3, [r2, #16]
 80097e4:	e005      	b.n	80097f2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80097e6:	4b0b      	ldr	r3, [pc, #44]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097e8:	691b      	ldr	r3, [r3, #16]
 80097ea:	4a0a      	ldr	r2, [pc, #40]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097ec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80097f0:	6113      	str	r3, [r2, #16]
 80097f2:	4b08      	ldr	r3, [pc, #32]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80097f4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80097f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80097fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009802:	4a04      	ldr	r2, [pc, #16]	@ (8009814 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009804:	430b      	orrs	r3, r1
 8009806:	6713      	str	r3, [r2, #112]	@ 0x70
 8009808:	e00e      	b.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800980a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800980e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8009812:	e009      	b.n	8009828 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009814:	58024400 	.word	0x58024400
 8009818:	58024800 	.word	0x58024800
 800981c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009820:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009824:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8009828:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800982c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009830:	f002 0301 	and.w	r3, r2, #1
 8009834:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009838:	2300      	movs	r3, #0
 800983a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800983e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009842:	460b      	mov	r3, r1
 8009844:	4313      	orrs	r3, r2
 8009846:	f000 8089 	beq.w	800995c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800984a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800984e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009850:	2b28      	cmp	r3, #40	@ 0x28
 8009852:	d86b      	bhi.n	800992c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009854:	a201      	add	r2, pc, #4	@ (adr r2, 800985c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8009856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800985a:	bf00      	nop
 800985c:	08009935 	.word	0x08009935
 8009860:	0800992d 	.word	0x0800992d
 8009864:	0800992d 	.word	0x0800992d
 8009868:	0800992d 	.word	0x0800992d
 800986c:	0800992d 	.word	0x0800992d
 8009870:	0800992d 	.word	0x0800992d
 8009874:	0800992d 	.word	0x0800992d
 8009878:	0800992d 	.word	0x0800992d
 800987c:	08009901 	.word	0x08009901
 8009880:	0800992d 	.word	0x0800992d
 8009884:	0800992d 	.word	0x0800992d
 8009888:	0800992d 	.word	0x0800992d
 800988c:	0800992d 	.word	0x0800992d
 8009890:	0800992d 	.word	0x0800992d
 8009894:	0800992d 	.word	0x0800992d
 8009898:	0800992d 	.word	0x0800992d
 800989c:	08009917 	.word	0x08009917
 80098a0:	0800992d 	.word	0x0800992d
 80098a4:	0800992d 	.word	0x0800992d
 80098a8:	0800992d 	.word	0x0800992d
 80098ac:	0800992d 	.word	0x0800992d
 80098b0:	0800992d 	.word	0x0800992d
 80098b4:	0800992d 	.word	0x0800992d
 80098b8:	0800992d 	.word	0x0800992d
 80098bc:	08009935 	.word	0x08009935
 80098c0:	0800992d 	.word	0x0800992d
 80098c4:	0800992d 	.word	0x0800992d
 80098c8:	0800992d 	.word	0x0800992d
 80098cc:	0800992d 	.word	0x0800992d
 80098d0:	0800992d 	.word	0x0800992d
 80098d4:	0800992d 	.word	0x0800992d
 80098d8:	0800992d 	.word	0x0800992d
 80098dc:	08009935 	.word	0x08009935
 80098e0:	0800992d 	.word	0x0800992d
 80098e4:	0800992d 	.word	0x0800992d
 80098e8:	0800992d 	.word	0x0800992d
 80098ec:	0800992d 	.word	0x0800992d
 80098f0:	0800992d 	.word	0x0800992d
 80098f4:	0800992d 	.word	0x0800992d
 80098f8:	0800992d 	.word	0x0800992d
 80098fc:	08009935 	.word	0x08009935
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009900:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009904:	3308      	adds	r3, #8
 8009906:	2101      	movs	r1, #1
 8009908:	4618      	mov	r0, r3
 800990a:	f001 fe95 	bl	800b638 <RCCEx_PLL2_Config>
 800990e:	4603      	mov	r3, r0
 8009910:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009914:	e00f      	b.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009916:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800991a:	3328      	adds	r3, #40	@ 0x28
 800991c:	2101      	movs	r1, #1
 800991e:	4618      	mov	r0, r3
 8009920:	f001 ff3c 	bl	800b79c <RCCEx_PLL3_Config>
 8009924:	4603      	mov	r3, r0
 8009926:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800992a:	e004      	b.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009932:	e000      	b.n	8009936 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009934:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009936:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800993a:	2b00      	cmp	r3, #0
 800993c:	d10a      	bne.n	8009954 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800993e:	4bbf      	ldr	r3, [pc, #764]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009942:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8009946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800994a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800994c:	4abb      	ldr	r2, [pc, #748]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800994e:	430b      	orrs	r3, r1
 8009950:	6553      	str	r3, [r2, #84]	@ 0x54
 8009952:	e003      	b.n	800995c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009954:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009958:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800995c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009964:	f002 0302 	and.w	r3, r2, #2
 8009968:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800996c:	2300      	movs	r3, #0
 800996e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009972:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8009976:	460b      	mov	r3, r1
 8009978:	4313      	orrs	r3, r2
 800997a:	d041      	beq.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800997c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009980:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009982:	2b05      	cmp	r3, #5
 8009984:	d824      	bhi.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8009986:	a201      	add	r2, pc, #4	@ (adr r2, 800998c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800998c:	080099d9 	.word	0x080099d9
 8009990:	080099a5 	.word	0x080099a5
 8009994:	080099bb 	.word	0x080099bb
 8009998:	080099d9 	.word	0x080099d9
 800999c:	080099d9 	.word	0x080099d9
 80099a0:	080099d9 	.word	0x080099d9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80099a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099a8:	3308      	adds	r3, #8
 80099aa:	2101      	movs	r1, #1
 80099ac:	4618      	mov	r0, r3
 80099ae:	f001 fe43 	bl	800b638 <RCCEx_PLL2_Config>
 80099b2:	4603      	mov	r3, r0
 80099b4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80099b8:	e00f      	b.n	80099da <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80099ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099be:	3328      	adds	r3, #40	@ 0x28
 80099c0:	2101      	movs	r1, #1
 80099c2:	4618      	mov	r0, r3
 80099c4:	f001 feea 	bl	800b79c <RCCEx_PLL3_Config>
 80099c8:	4603      	mov	r3, r0
 80099ca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80099ce:	e004      	b.n	80099da <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80099d0:	2301      	movs	r3, #1
 80099d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80099d6:	e000      	b.n	80099da <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80099d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d10a      	bne.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80099e2:	4b96      	ldr	r3, [pc, #600]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80099e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099e6:	f023 0107 	bic.w	r1, r3, #7
 80099ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80099f0:	4a92      	ldr	r2, [pc, #584]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80099f2:	430b      	orrs	r3, r1
 80099f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80099f6:	e003      	b.n	8009a00 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80099fc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a08:	f002 0304 	and.w	r3, r2, #4
 8009a0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009a10:	2300      	movs	r3, #0
 8009a12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009a16:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8009a1a:	460b      	mov	r3, r1
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	d044      	beq.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a28:	2b05      	cmp	r3, #5
 8009a2a:	d825      	bhi.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8009a34 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a32:	bf00      	nop
 8009a34:	08009a81 	.word	0x08009a81
 8009a38:	08009a4d 	.word	0x08009a4d
 8009a3c:	08009a63 	.word	0x08009a63
 8009a40:	08009a81 	.word	0x08009a81
 8009a44:	08009a81 	.word	0x08009a81
 8009a48:	08009a81 	.word	0x08009a81
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a50:	3308      	adds	r3, #8
 8009a52:	2101      	movs	r1, #1
 8009a54:	4618      	mov	r0, r3
 8009a56:	f001 fdef 	bl	800b638 <RCCEx_PLL2_Config>
 8009a5a:	4603      	mov	r3, r0
 8009a5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009a60:	e00f      	b.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a66:	3328      	adds	r3, #40	@ 0x28
 8009a68:	2101      	movs	r1, #1
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f001 fe96 	bl	800b79c <RCCEx_PLL3_Config>
 8009a70:	4603      	mov	r3, r0
 8009a72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009a76:	e004      	b.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009a7e:	e000      	b.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009a80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d10b      	bne.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009a8a:	4b6c      	ldr	r3, [pc, #432]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009a8e:	f023 0107 	bic.w	r1, r3, #7
 8009a92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009a9a:	4a68      	ldr	r2, [pc, #416]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009a9c:	430b      	orrs	r3, r1
 8009a9e:	6593      	str	r3, [r2, #88]	@ 0x58
 8009aa0:	e003      	b.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009aa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009aa6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009aaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab2:	f002 0320 	and.w	r3, r2, #32
 8009ab6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009aba:	2300      	movs	r3, #0
 8009abc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009ac0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	4313      	orrs	r3, r2
 8009ac8:	d055      	beq.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009aca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ad2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ad6:	d033      	beq.n	8009b40 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009adc:	d82c      	bhi.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009ade:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ae2:	d02f      	beq.n	8009b44 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8009ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009ae8:	d826      	bhi.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009aea:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009aee:	d02b      	beq.n	8009b48 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009af0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8009af4:	d820      	bhi.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009af6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009afa:	d012      	beq.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009afc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009b00:	d81a      	bhi.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d022      	beq.n	8009b4c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8009b06:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009b0a:	d115      	bne.n	8009b38 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b10:	3308      	adds	r3, #8
 8009b12:	2100      	movs	r1, #0
 8009b14:	4618      	mov	r0, r3
 8009b16:	f001 fd8f 	bl	800b638 <RCCEx_PLL2_Config>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009b20:	e015      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b26:	3328      	adds	r3, #40	@ 0x28
 8009b28:	2102      	movs	r1, #2
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f001 fe36 	bl	800b79c <RCCEx_PLL3_Config>
 8009b30:	4603      	mov	r3, r0
 8009b32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009b36:	e00a      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009b38:	2301      	movs	r3, #1
 8009b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009b3e:	e006      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009b40:	bf00      	nop
 8009b42:	e004      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009b44:	bf00      	nop
 8009b46:	e002      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009b48:	bf00      	nop
 8009b4a:	e000      	b.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009b4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009b4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d10b      	bne.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009b56:	4b39      	ldr	r3, [pc, #228]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009b5a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009b66:	4a35      	ldr	r2, [pc, #212]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009b68:	430b      	orrs	r3, r1
 8009b6a:	6553      	str	r3, [r2, #84]	@ 0x54
 8009b6c:	e003      	b.n	8009b76 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b72:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009b76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b7e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009b82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009b86:	2300      	movs	r3, #0
 8009b88:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009b8c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009b90:	460b      	mov	r3, r1
 8009b92:	4313      	orrs	r3, r2
 8009b94:	d058      	beq.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8009b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009b9e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009ba2:	d033      	beq.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8009ba4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8009ba8:	d82c      	bhi.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009baa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bae:	d02f      	beq.n	8009c10 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009bb0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009bb4:	d826      	bhi.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009bb6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009bba:	d02b      	beq.n	8009c14 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009bbc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009bc0:	d820      	bhi.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009bc2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bc6:	d012      	beq.n	8009bee <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009bc8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009bcc:	d81a      	bhi.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d022      	beq.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8009bd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009bd6:	d115      	bne.n	8009c04 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bdc:	3308      	adds	r3, #8
 8009bde:	2100      	movs	r1, #0
 8009be0:	4618      	mov	r0, r3
 8009be2:	f001 fd29 	bl	800b638 <RCCEx_PLL2_Config>
 8009be6:	4603      	mov	r3, r0
 8009be8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009bec:	e015      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bf2:	3328      	adds	r3, #40	@ 0x28
 8009bf4:	2102      	movs	r1, #2
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	f001 fdd0 	bl	800b79c <RCCEx_PLL3_Config>
 8009bfc:	4603      	mov	r3, r0
 8009bfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009c02:	e00a      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009c04:	2301      	movs	r3, #1
 8009c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009c0a:	e006      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009c0c:	bf00      	nop
 8009c0e:	e004      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009c10:	bf00      	nop
 8009c12:	e002      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009c14:	bf00      	nop
 8009c16:	e000      	b.n	8009c1a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d10e      	bne.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009c22:	4b06      	ldr	r3, [pc, #24]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c26:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8009c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009c32:	4a02      	ldr	r2, [pc, #8]	@ (8009c3c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009c34:	430b      	orrs	r3, r1
 8009c36:	6593      	str	r3, [r2, #88]	@ 0x58
 8009c38:	e006      	b.n	8009c48 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8009c3a:	bf00      	nop
 8009c3c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c40:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009c44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8009c48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c50:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009c54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009c58:	2300      	movs	r3, #0
 8009c5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009c5e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009c62:	460b      	mov	r3, r1
 8009c64:	4313      	orrs	r3, r2
 8009c66:	d055      	beq.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8009c68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009c6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009c70:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009c74:	d033      	beq.n	8009cde <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8009c76:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009c7a:	d82c      	bhi.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009c7c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c80:	d02f      	beq.n	8009ce2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009c82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009c86:	d826      	bhi.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009c88:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009c8c:	d02b      	beq.n	8009ce6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009c8e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009c92:	d820      	bhi.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009c94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c98:	d012      	beq.n	8009cc0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009c9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009c9e:	d81a      	bhi.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d022      	beq.n	8009cea <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8009ca4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ca8:	d115      	bne.n	8009cd6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009caa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cae:	3308      	adds	r3, #8
 8009cb0:	2100      	movs	r1, #0
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	f001 fcc0 	bl	800b638 <RCCEx_PLL2_Config>
 8009cb8:	4603      	mov	r3, r0
 8009cba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009cbe:	e015      	b.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009cc4:	3328      	adds	r3, #40	@ 0x28
 8009cc6:	2102      	movs	r1, #2
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f001 fd67 	bl	800b79c <RCCEx_PLL3_Config>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009cd4:	e00a      	b.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cd6:	2301      	movs	r3, #1
 8009cd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009cdc:	e006      	b.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009cde:	bf00      	nop
 8009ce0:	e004      	b.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009ce2:	bf00      	nop
 8009ce4:	e002      	b.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009ce6:	bf00      	nop
 8009ce8:	e000      	b.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009cea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009cec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d10b      	bne.n	8009d0c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009cf4:	4ba1      	ldr	r3, [pc, #644]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009cf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009cf8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d00:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009d04:	4a9d      	ldr	r2, [pc, #628]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d06:	430b      	orrs	r3, r1
 8009d08:	6593      	str	r3, [r2, #88]	@ 0x58
 8009d0a:	e003      	b.n	8009d14 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d0c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009d10:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d1c:	f002 0308 	and.w	r3, r2, #8
 8009d20:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009d24:	2300      	movs	r3, #0
 8009d26:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009d2a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009d2e:	460b      	mov	r3, r1
 8009d30:	4313      	orrs	r3, r2
 8009d32:	d01e      	beq.n	8009d72 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d40:	d10c      	bne.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d46:	3328      	adds	r3, #40	@ 0x28
 8009d48:	2102      	movs	r1, #2
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	f001 fd26 	bl	800b79c <RCCEx_PLL3_Config>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d002      	beq.n	8009d5c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8009d56:	2301      	movs	r3, #1
 8009d58:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009d5c:	4b87      	ldr	r3, [pc, #540]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009d60:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009d64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d68:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009d6c:	4a83      	ldr	r2, [pc, #524]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009d6e:	430b      	orrs	r3, r1
 8009d70:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d7a:	f002 0310 	and.w	r3, r2, #16
 8009d7e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009d82:	2300      	movs	r3, #0
 8009d84:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8009d88:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	d01e      	beq.n	8009dd0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009d92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009d96:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009d9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d9e:	d10c      	bne.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009da4:	3328      	adds	r3, #40	@ 0x28
 8009da6:	2102      	movs	r1, #2
 8009da8:	4618      	mov	r0, r3
 8009daa:	f001 fcf7 	bl	800b79c <RCCEx_PLL3_Config>
 8009dae:	4603      	mov	r3, r0
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d002      	beq.n	8009dba <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8009db4:	2301      	movs	r3, #1
 8009db6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009dba:	4b70      	ldr	r3, [pc, #448]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009dbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009dbe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009dc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dc6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009dca:	4a6c      	ldr	r2, [pc, #432]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009dcc:	430b      	orrs	r3, r1
 8009dce:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8009ddc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009de0:	2300      	movs	r3, #0
 8009de2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009de6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8009dea:	460b      	mov	r3, r1
 8009dec:	4313      	orrs	r3, r2
 8009dee:	d03e      	beq.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009df4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009df8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009dfc:	d022      	beq.n	8009e44 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009dfe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e02:	d81b      	bhi.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d003      	beq.n	8009e10 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009e0c:	d00b      	beq.n	8009e26 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009e0e:	e015      	b.n	8009e3c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e14:	3308      	adds	r3, #8
 8009e16:	2100      	movs	r1, #0
 8009e18:	4618      	mov	r0, r3
 8009e1a:	f001 fc0d 	bl	800b638 <RCCEx_PLL2_Config>
 8009e1e:	4603      	mov	r3, r0
 8009e20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009e24:	e00f      	b.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009e26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e2a:	3328      	adds	r3, #40	@ 0x28
 8009e2c:	2102      	movs	r1, #2
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f001 fcb4 	bl	800b79c <RCCEx_PLL3_Config>
 8009e34:	4603      	mov	r3, r0
 8009e36:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009e3a:	e004      	b.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009e42:	e000      	b.n	8009e46 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009e44:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e46:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d10b      	bne.n	8009e66 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009e4e:	4b4b      	ldr	r3, [pc, #300]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009e52:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8009e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e5a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009e5e:	4a47      	ldr	r2, [pc, #284]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009e60:	430b      	orrs	r3, r1
 8009e62:	6593      	str	r3, [r2, #88]	@ 0x58
 8009e64:	e003      	b.n	8009e6e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009e66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009e6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e76:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8009e7a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009e80:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009e84:	460b      	mov	r3, r1
 8009e86:	4313      	orrs	r3, r2
 8009e88:	d03b      	beq.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009e8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e92:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009e96:	d01f      	beq.n	8009ed8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009e98:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8009e9c:	d818      	bhi.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009e9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009ea2:	d003      	beq.n	8009eac <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8009ea4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009ea8:	d007      	beq.n	8009eba <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009eaa:	e011      	b.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009eac:	4b33      	ldr	r3, [pc, #204]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eb0:	4a32      	ldr	r2, [pc, #200]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009eb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009eb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009eb8:	e00f      	b.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009eba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ebe:	3328      	adds	r3, #40	@ 0x28
 8009ec0:	2101      	movs	r1, #1
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	f001 fc6a 	bl	800b79c <RCCEx_PLL3_Config>
 8009ec8:	4603      	mov	r3, r0
 8009eca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009ece:	e004      	b.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009ed6:	e000      	b.n	8009eda <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009ed8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009eda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d10b      	bne.n	8009efa <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009ee2:	4b26      	ldr	r3, [pc, #152]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ee4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ee6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009ef2:	4a22      	ldr	r2, [pc, #136]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009ef4:	430b      	orrs	r3, r1
 8009ef6:	6553      	str	r3, [r2, #84]	@ 0x54
 8009ef8:	e003      	b.n	8009f02 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009efa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009efe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009f0e:	673b      	str	r3, [r7, #112]	@ 0x70
 8009f10:	2300      	movs	r3, #0
 8009f12:	677b      	str	r3, [r7, #116]	@ 0x74
 8009f14:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8009f18:	460b      	mov	r3, r1
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	d034      	beq.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f24:	2b00      	cmp	r3, #0
 8009f26:	d003      	beq.n	8009f30 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8009f28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f2c:	d007      	beq.n	8009f3e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009f2e:	e011      	b.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f30:	4b12      	ldr	r3, [pc, #72]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f34:	4a11      	ldr	r2, [pc, #68]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009f3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009f3c:	e00e      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f42:	3308      	adds	r3, #8
 8009f44:	2102      	movs	r1, #2
 8009f46:	4618      	mov	r0, r3
 8009f48:	f001 fb76 	bl	800b638 <RCCEx_PLL2_Config>
 8009f4c:	4603      	mov	r3, r0
 8009f4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009f52:	e003      	b.n	8009f5c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009f54:	2301      	movs	r3, #1
 8009f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009f5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f5c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d10d      	bne.n	8009f80 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009f64:	4b05      	ldr	r3, [pc, #20]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f68:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f70:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009f72:	4a02      	ldr	r2, [pc, #8]	@ (8009f7c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009f74:	430b      	orrs	r3, r1
 8009f76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8009f78:	e006      	b.n	8009f88 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009f7a:	bf00      	nop
 8009f7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009f84:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009f88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f90:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009f94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f96:	2300      	movs	r3, #0
 8009f98:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009f9a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8009f9e:	460b      	mov	r3, r1
 8009fa0:	4313      	orrs	r3, r2
 8009fa2:	d00c      	beq.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fa8:	3328      	adds	r3, #40	@ 0x28
 8009faa:	2102      	movs	r1, #2
 8009fac:	4618      	mov	r0, r3
 8009fae:	f001 fbf5 	bl	800b79c <RCCEx_PLL3_Config>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d002      	beq.n	8009fbe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8009fca:	663b      	str	r3, [r7, #96]	@ 0x60
 8009fcc:	2300      	movs	r3, #0
 8009fce:	667b      	str	r3, [r7, #100]	@ 0x64
 8009fd0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	d038      	beq.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009fe2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fe6:	d018      	beq.n	800a01a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009fe8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fec:	d811      	bhi.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009fee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ff2:	d014      	beq.n	800a01e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009ff4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ff8:	d80b      	bhi.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d011      	beq.n	800a022 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009ffe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a002:	d106      	bne.n	800a012 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a004:	4bc3      	ldr	r3, [pc, #780]	@ (800a314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a008:	4ac2      	ldr	r2, [pc, #776]	@ (800a314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a00a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a00e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a010:	e008      	b.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a012:	2301      	movs	r3, #1
 800a014:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800a018:	e004      	b.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a01a:	bf00      	nop
 800a01c:	e002      	b.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a01e:	bf00      	nop
 800a020:	e000      	b.n	800a024 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a022:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a024:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d10b      	bne.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a02c:	4bb9      	ldr	r3, [pc, #740]	@ (800a314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a02e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a030:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800a034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a038:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800a03c:	4ab5      	ldr	r2, [pc, #724]	@ (800a314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a03e:	430b      	orrs	r3, r1
 800a040:	6553      	str	r3, [r2, #84]	@ 0x54
 800a042:	e003      	b.n	800a04c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a044:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a048:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a04c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a054:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800a058:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a05a:	2300      	movs	r3, #0
 800a05c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a05e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800a062:	460b      	mov	r3, r1
 800a064:	4313      	orrs	r3, r2
 800a066:	d009      	beq.n	800a07c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a068:	4baa      	ldr	r3, [pc, #680]	@ (800a314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a06a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a06c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800a070:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a074:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800a076:	4aa7      	ldr	r2, [pc, #668]	@ (800a314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a078:	430b      	orrs	r3, r1
 800a07a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a07c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a084:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800a088:	653b      	str	r3, [r7, #80]	@ 0x50
 800a08a:	2300      	movs	r3, #0
 800a08c:	657b      	str	r3, [r7, #84]	@ 0x54
 800a08e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800a092:	460b      	mov	r3, r1
 800a094:	4313      	orrs	r3, r2
 800a096:	d00a      	beq.n	800a0ae <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a098:	4b9e      	ldr	r3, [pc, #632]	@ (800a314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a09a:	691b      	ldr	r3, [r3, #16]
 800a09c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800a0a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0a4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800a0a8:	4a9a      	ldr	r2, [pc, #616]	@ (800a314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0aa:	430b      	orrs	r3, r1
 800a0ac:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a0ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0b6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800a0ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a0bc:	2300      	movs	r3, #0
 800a0be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a0c0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800a0c4:	460b      	mov	r3, r1
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	d009      	beq.n	800a0de <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a0ca:	4b92      	ldr	r3, [pc, #584]	@ (800a314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a0ce:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800a0d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a0d8:	4a8e      	ldr	r2, [pc, #568]	@ (800a314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0da:	430b      	orrs	r3, r1
 800a0dc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a0de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800a0ea:	643b      	str	r3, [r7, #64]	@ 0x40
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0f0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800a0f4:	460b      	mov	r3, r1
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	d00e      	beq.n	800a118 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800a0fa:	4b86      	ldr	r3, [pc, #536]	@ (800a314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a0fc:	691b      	ldr	r3, [r3, #16]
 800a0fe:	4a85      	ldr	r2, [pc, #532]	@ (800a314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a100:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a104:	6113      	str	r3, [r2, #16]
 800a106:	4b83      	ldr	r3, [pc, #524]	@ (800a314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a108:	6919      	ldr	r1, [r3, #16]
 800a10a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a10e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800a112:	4a80      	ldr	r2, [pc, #512]	@ (800a314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a114:	430b      	orrs	r3, r1
 800a116:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800a118:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a120:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800a124:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a126:	2300      	movs	r3, #0
 800a128:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a12a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800a12e:	460b      	mov	r3, r1
 800a130:	4313      	orrs	r3, r2
 800a132:	d009      	beq.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800a134:	4b77      	ldr	r3, [pc, #476]	@ (800a314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a136:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a138:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800a13c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a142:	4a74      	ldr	r2, [pc, #464]	@ (800a314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a144:	430b      	orrs	r3, r1
 800a146:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a150:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800a154:	633b      	str	r3, [r7, #48]	@ 0x30
 800a156:	2300      	movs	r3, #0
 800a158:	637b      	str	r3, [r7, #52]	@ 0x34
 800a15a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800a15e:	460b      	mov	r3, r1
 800a160:	4313      	orrs	r3, r2
 800a162:	d00a      	beq.n	800a17a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a164:	4b6b      	ldr	r3, [pc, #428]	@ (800a314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a168:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800a16c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a170:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a174:	4a67      	ldr	r2, [pc, #412]	@ (800a314 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a176:	430b      	orrs	r3, r1
 800a178:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800a17a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a182:	2100      	movs	r1, #0
 800a184:	62b9      	str	r1, [r7, #40]	@ 0x28
 800a186:	f003 0301 	and.w	r3, r3, #1
 800a18a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a18c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800a190:	460b      	mov	r3, r1
 800a192:	4313      	orrs	r3, r2
 800a194:	d011      	beq.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a19a:	3308      	adds	r3, #8
 800a19c:	2100      	movs	r1, #0
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f001 fa4a 	bl	800b638 <RCCEx_PLL2_Config>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a1aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d003      	beq.n	800a1ba <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800a1ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1c2:	2100      	movs	r1, #0
 800a1c4:	6239      	str	r1, [r7, #32]
 800a1c6:	f003 0302 	and.w	r3, r3, #2
 800a1ca:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1cc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800a1d0:	460b      	mov	r3, r1
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	d011      	beq.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a1d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1da:	3308      	adds	r3, #8
 800a1dc:	2101      	movs	r1, #1
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f001 fa2a 	bl	800b638 <RCCEx_PLL2_Config>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a1ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d003      	beq.n	800a1fa <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a1f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a1f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800a1fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a202:	2100      	movs	r1, #0
 800a204:	61b9      	str	r1, [r7, #24]
 800a206:	f003 0304 	and.w	r3, r3, #4
 800a20a:	61fb      	str	r3, [r7, #28]
 800a20c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800a210:	460b      	mov	r3, r1
 800a212:	4313      	orrs	r3, r2
 800a214:	d011      	beq.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a21a:	3308      	adds	r3, #8
 800a21c:	2102      	movs	r1, #2
 800a21e:	4618      	mov	r0, r3
 800a220:	f001 fa0a 	bl	800b638 <RCCEx_PLL2_Config>
 800a224:	4603      	mov	r3, r0
 800a226:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a22a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d003      	beq.n	800a23a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a232:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a236:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800a23a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a23e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a242:	2100      	movs	r1, #0
 800a244:	6139      	str	r1, [r7, #16]
 800a246:	f003 0308 	and.w	r3, r3, #8
 800a24a:	617b      	str	r3, [r7, #20]
 800a24c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800a250:	460b      	mov	r3, r1
 800a252:	4313      	orrs	r3, r2
 800a254:	d011      	beq.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a25a:	3328      	adds	r3, #40	@ 0x28
 800a25c:	2100      	movs	r1, #0
 800a25e:	4618      	mov	r0, r3
 800a260:	f001 fa9c 	bl	800b79c <RCCEx_PLL3_Config>
 800a264:	4603      	mov	r3, r0
 800a266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 800a26a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d003      	beq.n	800a27a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a272:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a276:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800a27a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a282:	2100      	movs	r1, #0
 800a284:	60b9      	str	r1, [r7, #8]
 800a286:	f003 0310 	and.w	r3, r3, #16
 800a28a:	60fb      	str	r3, [r7, #12]
 800a28c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800a290:	460b      	mov	r3, r1
 800a292:	4313      	orrs	r3, r2
 800a294:	d011      	beq.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a29a:	3328      	adds	r3, #40	@ 0x28
 800a29c:	2101      	movs	r1, #1
 800a29e:	4618      	mov	r0, r3
 800a2a0:	f001 fa7c 	bl	800b79c <RCCEx_PLL3_Config>
 800a2a4:	4603      	mov	r3, r0
 800a2a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a2aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d003      	beq.n	800a2ba <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800a2ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2c2:	2100      	movs	r1, #0
 800a2c4:	6039      	str	r1, [r7, #0]
 800a2c6:	f003 0320 	and.w	r3, r3, #32
 800a2ca:	607b      	str	r3, [r7, #4]
 800a2cc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a2d0:	460b      	mov	r3, r1
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	d011      	beq.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a2d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a2da:	3328      	adds	r3, #40	@ 0x28
 800a2dc:	2102      	movs	r1, #2
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f001 fa5c 	bl	800b79c <RCCEx_PLL3_Config>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800a2ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d003      	beq.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a2f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800a2f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800a2fa:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d101      	bne.n	800a306 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800a302:	2300      	movs	r3, #0
 800a304:	e000      	b.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800a306:	2301      	movs	r3, #1
}
 800a308:	4618      	mov	r0, r3
 800a30a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800a30e:	46bd      	mov	sp, r7
 800a310:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a314:	58024400 	.word	0x58024400

0800a318 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800a318:	b580      	push	{r7, lr}
 800a31a:	b090      	sub	sp, #64	@ 0x40
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800a322:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a326:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800a32a:	430b      	orrs	r3, r1
 800a32c:	f040 8094 	bne.w	800a458 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800a330:	4b9e      	ldr	r3, [pc, #632]	@ (800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a334:	f003 0307 	and.w	r3, r3, #7
 800a338:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a33a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a33c:	2b04      	cmp	r3, #4
 800a33e:	f200 8087 	bhi.w	800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800a342:	a201      	add	r2, pc, #4	@ (adr r2, 800a348 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800a344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a348:	0800a35d 	.word	0x0800a35d
 800a34c:	0800a385 	.word	0x0800a385
 800a350:	0800a3ad 	.word	0x0800a3ad
 800a354:	0800a449 	.word	0x0800a449
 800a358:	0800a3d5 	.word	0x0800a3d5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a35c:	4b93      	ldr	r3, [pc, #588]	@ (800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a364:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a368:	d108      	bne.n	800a37c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a36a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a36e:	4618      	mov	r0, r3
 800a370:	f001 f810 	bl	800b394 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a376:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a378:	f000 bd45 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a37c:	2300      	movs	r3, #0
 800a37e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a380:	f000 bd41 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a384:	4b89      	ldr	r3, [pc, #548]	@ (800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a38c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a390:	d108      	bne.n	800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a392:	f107 0318 	add.w	r3, r7, #24
 800a396:	4618      	mov	r0, r3
 800a398:	f000 fd54 	bl	800ae44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a39c:	69bb      	ldr	r3, [r7, #24]
 800a39e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3a0:	f000 bd31 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3a8:	f000 bd2d 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a3ac:	4b7f      	ldr	r3, [pc, #508]	@ (800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a3b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a3b8:	d108      	bne.n	800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a3ba:	f107 030c 	add.w	r3, r7, #12
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f000 fe94 	bl	800b0ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3c8:	f000 bd1d 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3d0:	f000 bd19 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a3d4:	4b75      	ldr	r3, [pc, #468]	@ (800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a3d8:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a3dc:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a3de:	4b73      	ldr	r3, [pc, #460]	@ (800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f003 0304 	and.w	r3, r3, #4
 800a3e6:	2b04      	cmp	r3, #4
 800a3e8:	d10c      	bne.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800a3ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d109      	bne.n	800a404 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a3f0:	4b6e      	ldr	r3, [pc, #440]	@ (800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	08db      	lsrs	r3, r3, #3
 800a3f6:	f003 0303 	and.w	r3, r3, #3
 800a3fa:	4a6d      	ldr	r2, [pc, #436]	@ (800a5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a3fc:	fa22 f303 	lsr.w	r3, r2, r3
 800a400:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a402:	e01f      	b.n	800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a404:	4b69      	ldr	r3, [pc, #420]	@ (800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a40c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a410:	d106      	bne.n	800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800a412:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a414:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a418:	d102      	bne.n	800a420 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a41a:	4b66      	ldr	r3, [pc, #408]	@ (800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a41c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a41e:	e011      	b.n	800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a420:	4b62      	ldr	r3, [pc, #392]	@ (800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a428:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a42c:	d106      	bne.n	800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800a42e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a430:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a434:	d102      	bne.n	800a43c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a436:	4b60      	ldr	r3, [pc, #384]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a438:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a43a:	e003      	b.n	800a444 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a43c:	2300      	movs	r3, #0
 800a43e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a440:	f000 bce1 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a444:	f000 bcdf 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a448:	4b5c      	ldr	r3, [pc, #368]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a44a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a44c:	f000 bcdb 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a450:	2300      	movs	r3, #0
 800a452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a454:	f000 bcd7 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800a458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a45c:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800a460:	430b      	orrs	r3, r1
 800a462:	f040 80ad 	bne.w	800a5c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800a466:	4b51      	ldr	r3, [pc, #324]	@ (800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a46a:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800a46e:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a472:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a476:	d056      	beq.n	800a526 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800a478:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a47a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a47e:	f200 8090 	bhi.w	800a5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a484:	2bc0      	cmp	r3, #192	@ 0xc0
 800a486:	f000 8088 	beq.w	800a59a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800a48a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a48c:	2bc0      	cmp	r3, #192	@ 0xc0
 800a48e:	f200 8088 	bhi.w	800a5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a494:	2b80      	cmp	r3, #128	@ 0x80
 800a496:	d032      	beq.n	800a4fe <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800a498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a49a:	2b80      	cmp	r3, #128	@ 0x80
 800a49c:	f200 8081 	bhi.w	800a5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800a4a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d003      	beq.n	800a4ae <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800a4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a8:	2b40      	cmp	r3, #64	@ 0x40
 800a4aa:	d014      	beq.n	800a4d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800a4ac:	e079      	b.n	800a5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a4ae:	4b3f      	ldr	r3, [pc, #252]	@ (800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4ba:	d108      	bne.n	800a4ce <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a4bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	f000 ff67 	bl	800b394 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a4c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4ca:	f000 bc9c 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4d2:	f000 bc98 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a4d6:	4b35      	ldr	r3, [pc, #212]	@ (800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a4de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a4e2:	d108      	bne.n	800a4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a4e4:	f107 0318 	add.w	r3, r7, #24
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f000 fcab 	bl	800ae44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a4f2:	f000 bc88 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4fa:	f000 bc84 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a4fe:	4b2b      	ldr	r3, [pc, #172]	@ (800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a506:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a50a:	d108      	bne.n	800a51e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a50c:	f107 030c 	add.w	r3, r7, #12
 800a510:	4618      	mov	r0, r3
 800a512:	f000 fdeb 	bl	800b0ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a51a:	f000 bc74 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a51e:	2300      	movs	r3, #0
 800a520:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a522:	f000 bc70 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a526:	4b21      	ldr	r3, [pc, #132]	@ (800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a52a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a52e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a530:	4b1e      	ldr	r3, [pc, #120]	@ (800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f003 0304 	and.w	r3, r3, #4
 800a538:	2b04      	cmp	r3, #4
 800a53a:	d10c      	bne.n	800a556 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800a53c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d109      	bne.n	800a556 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a542:	4b1a      	ldr	r3, [pc, #104]	@ (800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	08db      	lsrs	r3, r3, #3
 800a548:	f003 0303 	and.w	r3, r3, #3
 800a54c:	4a18      	ldr	r2, [pc, #96]	@ (800a5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800a54e:	fa22 f303 	lsr.w	r3, r2, r3
 800a552:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a554:	e01f      	b.n	800a596 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a556:	4b15      	ldr	r3, [pc, #84]	@ (800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a55e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a562:	d106      	bne.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800a564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a566:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a56a:	d102      	bne.n	800a572 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a56c:	4b11      	ldr	r3, [pc, #68]	@ (800a5b4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800a56e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a570:	e011      	b.n	800a596 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a572:	4b0e      	ldr	r3, [pc, #56]	@ (800a5ac <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a57a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a57e:	d106      	bne.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800a580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a582:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a586:	d102      	bne.n	800a58e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a588:	4b0b      	ldr	r3, [pc, #44]	@ (800a5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800a58a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a58c:	e003      	b.n	800a596 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a58e:	2300      	movs	r3, #0
 800a590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a592:	f000 bc38 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a596:	f000 bc36 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a59a:	4b08      	ldr	r3, [pc, #32]	@ (800a5bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800a59c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a59e:	f000 bc32 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5a6:	f000 bc2e 	b.w	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a5aa:	bf00      	nop
 800a5ac:	58024400 	.word	0x58024400
 800a5b0:	03d09000 	.word	0x03d09000
 800a5b4:	003d0900 	.word	0x003d0900
 800a5b8:	017d7840 	.word	0x017d7840
 800a5bc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800a5c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5c4:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800a5c8:	430b      	orrs	r3, r1
 800a5ca:	f040 809c 	bne.w	800a706 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800a5ce:	4b9e      	ldr	r3, [pc, #632]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a5d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a5d2:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800a5d6:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a5d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a5de:	d054      	beq.n	800a68a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800a5e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a5e6:	f200 808b 	bhi.w	800a700 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a5ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ec:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a5f0:	f000 8083 	beq.w	800a6fa <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800a5f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a5fa:	f200 8081 	bhi.w	800a700 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a5fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a600:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a604:	d02f      	beq.n	800a666 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800a606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a608:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a60c:	d878      	bhi.n	800a700 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800a60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a610:	2b00      	cmp	r3, #0
 800a612:	d004      	beq.n	800a61e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800a614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a616:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a61a:	d012      	beq.n	800a642 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800a61c:	e070      	b.n	800a700 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a61e:	4b8a      	ldr	r3, [pc, #552]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a626:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a62a:	d107      	bne.n	800a63c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a62c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a630:	4618      	mov	r0, r3
 800a632:	f000 feaf 	bl	800b394 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a636:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a638:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a63a:	e3e4      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a63c:	2300      	movs	r3, #0
 800a63e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a640:	e3e1      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a642:	4b81      	ldr	r3, [pc, #516]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a64a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a64e:	d107      	bne.n	800a660 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a650:	f107 0318 	add.w	r3, r7, #24
 800a654:	4618      	mov	r0, r3
 800a656:	f000 fbf5 	bl	800ae44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a65a:	69bb      	ldr	r3, [r7, #24]
 800a65c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a65e:	e3d2      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a660:	2300      	movs	r3, #0
 800a662:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a664:	e3cf      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a666:	4b78      	ldr	r3, [pc, #480]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a66e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a672:	d107      	bne.n	800a684 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a674:	f107 030c 	add.w	r3, r7, #12
 800a678:	4618      	mov	r0, r3
 800a67a:	f000 fd37 	bl	800b0ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a682:	e3c0      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a684:	2300      	movs	r3, #0
 800a686:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a688:	e3bd      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a68a:	4b6f      	ldr	r3, [pc, #444]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a68c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a68e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a692:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a694:	4b6c      	ldr	r3, [pc, #432]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f003 0304 	and.w	r3, r3, #4
 800a69c:	2b04      	cmp	r3, #4
 800a69e:	d10c      	bne.n	800a6ba <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800a6a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d109      	bne.n	800a6ba <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6a6:	4b68      	ldr	r3, [pc, #416]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	08db      	lsrs	r3, r3, #3
 800a6ac:	f003 0303 	and.w	r3, r3, #3
 800a6b0:	4a66      	ldr	r2, [pc, #408]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a6b2:	fa22 f303 	lsr.w	r3, r2, r3
 800a6b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6b8:	e01e      	b.n	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a6ba:	4b63      	ldr	r3, [pc, #396]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a6c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6c6:	d106      	bne.n	800a6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800a6c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a6ce:	d102      	bne.n	800a6d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a6d0:	4b5f      	ldr	r3, [pc, #380]	@ (800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a6d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6d4:	e010      	b.n	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a6d6:	4b5c      	ldr	r3, [pc, #368]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6de:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6e2:	d106      	bne.n	800a6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800a6e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a6e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a6ea:	d102      	bne.n	800a6f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a6ec:	4b59      	ldr	r3, [pc, #356]	@ (800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a6ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a6f0:	e002      	b.n	800a6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a6f6:	e386      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a6f8:	e385      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a6fa:	4b57      	ldr	r3, [pc, #348]	@ (800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a6fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6fe:	e382      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a700:	2300      	movs	r3, #0
 800a702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a704:	e37f      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a706:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a70a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a70e:	430b      	orrs	r3, r1
 800a710:	f040 80a7 	bne.w	800a862 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a714:	4b4c      	ldr	r3, [pc, #304]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a716:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a718:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a71c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a720:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a724:	d055      	beq.n	800a7d2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a728:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a72c:	f200 8096 	bhi.w	800a85c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a732:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a736:	f000 8084 	beq.w	800a842 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a740:	f200 808c 	bhi.w	800a85c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a746:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a74a:	d030      	beq.n	800a7ae <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a74c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a74e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a752:	f200 8083 	bhi.w	800a85c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d004      	beq.n	800a766 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a75c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a75e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a762:	d012      	beq.n	800a78a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a764:	e07a      	b.n	800a85c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a766:	4b38      	ldr	r3, [pc, #224]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a76e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a772:	d107      	bne.n	800a784 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a774:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a778:	4618      	mov	r0, r3
 800a77a:	f000 fe0b 	bl	800b394 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a77e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a780:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a782:	e340      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a784:	2300      	movs	r3, #0
 800a786:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a788:	e33d      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a78a:	4b2f      	ldr	r3, [pc, #188]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a792:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a796:	d107      	bne.n	800a7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a798:	f107 0318 	add.w	r3, r7, #24
 800a79c:	4618      	mov	r0, r3
 800a79e:	f000 fb51 	bl	800ae44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a7a2:	69bb      	ldr	r3, [r7, #24]
 800a7a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7a6:	e32e      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7ac:	e32b      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a7ae:	4b26      	ldr	r3, [pc, #152]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a7b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a7ba:	d107      	bne.n	800a7cc <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a7bc:	f107 030c 	add.w	r3, r7, #12
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f000 fc93 	bl	800b0ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a7ca:	e31c      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a7d0:	e319      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a7d2:	4b1d      	ldr	r3, [pc, #116]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7d6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a7da:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a7dc:	4b1a      	ldr	r3, [pc, #104]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	f003 0304 	and.w	r3, r3, #4
 800a7e4:	2b04      	cmp	r3, #4
 800a7e6:	d10c      	bne.n	800a802 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a7e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d109      	bne.n	800a802 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7ee:	4b16      	ldr	r3, [pc, #88]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	08db      	lsrs	r3, r3, #3
 800a7f4:	f003 0303 	and.w	r3, r3, #3
 800a7f8:	4a14      	ldr	r2, [pc, #80]	@ (800a84c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a7fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a7fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a800:	e01e      	b.n	800a840 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a802:	4b11      	ldr	r3, [pc, #68]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a80a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a80e:	d106      	bne.n	800a81e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a812:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a816:	d102      	bne.n	800a81e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a818:	4b0d      	ldr	r3, [pc, #52]	@ (800a850 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a81a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a81c:	e010      	b.n	800a840 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a81e:	4b0a      	ldr	r3, [pc, #40]	@ (800a848 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a826:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a82a:	d106      	bne.n	800a83a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a82c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a82e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a832:	d102      	bne.n	800a83a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a834:	4b07      	ldr	r3, [pc, #28]	@ (800a854 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a836:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a838:	e002      	b.n	800a840 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a83a:	2300      	movs	r3, #0
 800a83c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a83e:	e2e2      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a840:	e2e1      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a842:	4b05      	ldr	r3, [pc, #20]	@ (800a858 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a844:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a846:	e2de      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a848:	58024400 	.word	0x58024400
 800a84c:	03d09000 	.word	0x03d09000
 800a850:	003d0900 	.word	0x003d0900
 800a854:	017d7840 	.word	0x017d7840
 800a858:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a85c:	2300      	movs	r3, #0
 800a85e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a860:	e2d1      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a862:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a866:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a86a:	430b      	orrs	r3, r1
 800a86c:	f040 809c 	bne.w	800a9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a870:	4b93      	ldr	r3, [pc, #588]	@ (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a872:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a874:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a878:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a87a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a87c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a880:	d054      	beq.n	800a92c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a882:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a884:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a888:	f200 808b 	bhi.w	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a88c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a88e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a892:	f000 8083 	beq.w	800a99c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a898:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a89c:	f200 8081 	bhi.w	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a8a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8a6:	d02f      	beq.n	800a908 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a8a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8aa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8ae:	d878      	bhi.n	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a8b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d004      	beq.n	800a8c0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a8b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8bc:	d012      	beq.n	800a8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a8be:	e070      	b.n	800a9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a8c0:	4b7f      	ldr	r3, [pc, #508]	@ (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a8c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a8cc:	d107      	bne.n	800a8de <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a8ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f000 fd5e 	bl	800b394 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a8d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a8dc:	e293      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a8e2:	e290      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a8e4:	4b76      	ldr	r3, [pc, #472]	@ (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a8e6:	681b      	ldr	r3, [r3, #0]
 800a8e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a8ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a8f0:	d107      	bne.n	800a902 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8f2:	f107 0318 	add.w	r3, r7, #24
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f000 faa4 	bl	800ae44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a8fc:	69bb      	ldr	r3, [r7, #24]
 800a8fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a900:	e281      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a902:	2300      	movs	r3, #0
 800a904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a906:	e27e      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a908:	4b6d      	ldr	r3, [pc, #436]	@ (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a910:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a914:	d107      	bne.n	800a926 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a916:	f107 030c 	add.w	r3, r7, #12
 800a91a:	4618      	mov	r0, r3
 800a91c:	f000 fbe6 	bl	800b0ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a924:	e26f      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a926:	2300      	movs	r3, #0
 800a928:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a92a:	e26c      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a92c:	4b64      	ldr	r3, [pc, #400]	@ (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a92e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a930:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a934:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a936:	4b62      	ldr	r3, [pc, #392]	@ (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	f003 0304 	and.w	r3, r3, #4
 800a93e:	2b04      	cmp	r3, #4
 800a940:	d10c      	bne.n	800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a942:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a944:	2b00      	cmp	r3, #0
 800a946:	d109      	bne.n	800a95c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a948:	4b5d      	ldr	r3, [pc, #372]	@ (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	08db      	lsrs	r3, r3, #3
 800a94e:	f003 0303 	and.w	r3, r3, #3
 800a952:	4a5c      	ldr	r2, [pc, #368]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a954:	fa22 f303 	lsr.w	r3, r2, r3
 800a958:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a95a:	e01e      	b.n	800a99a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a95c:	4b58      	ldr	r3, [pc, #352]	@ (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a964:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a968:	d106      	bne.n	800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a96a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a96c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a970:	d102      	bne.n	800a978 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a972:	4b55      	ldr	r3, [pc, #340]	@ (800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a974:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a976:	e010      	b.n	800a99a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a978:	4b51      	ldr	r3, [pc, #324]	@ (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a980:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a984:	d106      	bne.n	800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a988:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a98c:	d102      	bne.n	800a994 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a98e:	4b4f      	ldr	r3, [pc, #316]	@ (800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a990:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a992:	e002      	b.n	800a99a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a994:	2300      	movs	r3, #0
 800a996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a998:	e235      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a99a:	e234      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a99c:	4b4c      	ldr	r3, [pc, #304]	@ (800aad0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a99e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9a0:	e231      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a9a2:	2300      	movs	r3, #0
 800a9a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9a6:	e22e      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a9a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a9ac:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a9b0:	430b      	orrs	r3, r1
 800a9b2:	f040 808f 	bne.w	800aad4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a9b6:	4b42      	ldr	r3, [pc, #264]	@ (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a9b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a9ba:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a9be:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a9c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a9c6:	d06b      	beq.n	800aaa0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a9c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a9ce:	d874      	bhi.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a9d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a9d6:	d056      	beq.n	800aa86 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a9d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9da:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a9de:	d86c      	bhi.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a9e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a9e6:	d03b      	beq.n	800aa60 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a9e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ea:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a9ee:	d864      	bhi.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a9f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9f2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9f6:	d021      	beq.n	800aa3c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a9f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a9fe:	d85c      	bhi.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800aa00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d004      	beq.n	800aa10 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800aa06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa0c:	d004      	beq.n	800aa18 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800aa0e:	e054      	b.n	800aaba <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800aa10:	f7fe fa4c 	bl	8008eac <HAL_RCC_GetPCLK1Freq>
 800aa14:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa16:	e1f6      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aa18:	4b29      	ldr	r3, [pc, #164]	@ (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800aa20:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800aa24:	d107      	bne.n	800aa36 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa26:	f107 0318 	add.w	r3, r7, #24
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f000 fa0a 	bl	800ae44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800aa30:	69fb      	ldr	r3, [r7, #28]
 800aa32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa34:	e1e7      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa36:	2300      	movs	r3, #0
 800aa38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa3a:	e1e4      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800aa3c:	4b20      	ldr	r3, [pc, #128]	@ (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aa44:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800aa48:	d107      	bne.n	800aa5a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa4a:	f107 030c 	add.w	r3, r7, #12
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f000 fb4c 	bl	800b0ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800aa54:	693b      	ldr	r3, [r7, #16]
 800aa56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa58:	e1d5      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa5e:	e1d2      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800aa60:	4b17      	ldr	r3, [pc, #92]	@ (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f003 0304 	and.w	r3, r3, #4
 800aa68:	2b04      	cmp	r3, #4
 800aa6a:	d109      	bne.n	800aa80 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa6c:	4b14      	ldr	r3, [pc, #80]	@ (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	08db      	lsrs	r3, r3, #3
 800aa72:	f003 0303 	and.w	r3, r3, #3
 800aa76:	4a13      	ldr	r2, [pc, #76]	@ (800aac4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800aa78:	fa22 f303 	lsr.w	r3, r2, r3
 800aa7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa7e:	e1c2      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa80:	2300      	movs	r3, #0
 800aa82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa84:	e1bf      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800aa86:	4b0e      	ldr	r3, [pc, #56]	@ (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aa8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aa92:	d102      	bne.n	800aa9a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800aa94:	4b0c      	ldr	r3, [pc, #48]	@ (800aac8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800aa96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aa98:	e1b5      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa9e:	e1b2      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800aaa0:	4b07      	ldr	r3, [pc, #28]	@ (800aac0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aaa8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aaac:	d102      	bne.n	800aab4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800aaae:	4b07      	ldr	r3, [pc, #28]	@ (800aacc <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800aab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800aab2:	e1a8      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800aab4:	2300      	movs	r3, #0
 800aab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aab8:	e1a5      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aaba:	2300      	movs	r3, #0
 800aabc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aabe:	e1a2      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aac0:	58024400 	.word	0x58024400
 800aac4:	03d09000 	.word	0x03d09000
 800aac8:	003d0900 	.word	0x003d0900
 800aacc:	017d7840 	.word	0x017d7840
 800aad0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800aad4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aad8:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800aadc:	430b      	orrs	r3, r1
 800aade:	d173      	bne.n	800abc8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800aae0:	4b9c      	ldr	r3, [pc, #624]	@ (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aae4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800aae8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800aaea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aaf0:	d02f      	beq.n	800ab52 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800aaf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aaf4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800aaf8:	d863      	bhi.n	800abc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800aafa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d004      	beq.n	800ab0a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ab00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ab06:	d012      	beq.n	800ab2e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ab08:	e05b      	b.n	800abc2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ab0a:	4b92      	ldr	r3, [pc, #584]	@ (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ab12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ab16:	d107      	bne.n	800ab28 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ab18:	f107 0318 	add.w	r3, r7, #24
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	f000 f991 	bl	800ae44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ab22:	69bb      	ldr	r3, [r7, #24]
 800ab24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab26:	e16e      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab28:	2300      	movs	r3, #0
 800ab2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab2c:	e16b      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ab2e:	4b89      	ldr	r3, [pc, #548]	@ (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ab36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ab3a:	d107      	bne.n	800ab4c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ab3c:	f107 030c 	add.w	r3, r7, #12
 800ab40:	4618      	mov	r0, r3
 800ab42:	f000 fad3 	bl	800b0ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ab46:	697b      	ldr	r3, [r7, #20]
 800ab48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ab4a:	e15c      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ab4c:	2300      	movs	r3, #0
 800ab4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ab50:	e159      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ab52:	4b80      	ldr	r3, [pc, #512]	@ (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ab56:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ab5a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ab5c:	4b7d      	ldr	r3, [pc, #500]	@ (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f003 0304 	and.w	r3, r3, #4
 800ab64:	2b04      	cmp	r3, #4
 800ab66:	d10c      	bne.n	800ab82 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ab68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d109      	bne.n	800ab82 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ab6e:	4b79      	ldr	r3, [pc, #484]	@ (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	08db      	lsrs	r3, r3, #3
 800ab74:	f003 0303 	and.w	r3, r3, #3
 800ab78:	4a77      	ldr	r2, [pc, #476]	@ (800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ab7a:	fa22 f303 	lsr.w	r3, r2, r3
 800ab7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab80:	e01e      	b.n	800abc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ab82:	4b74      	ldr	r3, [pc, #464]	@ (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab8e:	d106      	bne.n	800ab9e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ab90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ab96:	d102      	bne.n	800ab9e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ab98:	4b70      	ldr	r3, [pc, #448]	@ (800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ab9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ab9c:	e010      	b.n	800abc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ab9e:	4b6d      	ldr	r3, [pc, #436]	@ (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800aba6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800abaa:	d106      	bne.n	800abba <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800abac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800abb2:	d102      	bne.n	800abba <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800abb4:	4b6a      	ldr	r3, [pc, #424]	@ (800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800abb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800abb8:	e002      	b.n	800abc0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800abba:	2300      	movs	r3, #0
 800abbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800abbe:	e122      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800abc0:	e121      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800abc2:	2300      	movs	r3, #0
 800abc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800abc6:	e11e      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800abc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abcc:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800abd0:	430b      	orrs	r3, r1
 800abd2:	d133      	bne.n	800ac3c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800abd4:	4b5f      	ldr	r3, [pc, #380]	@ (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800abd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800abdc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800abde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d004      	beq.n	800abee <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800abe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800abe6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800abea:	d012      	beq.n	800ac12 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800abec:	e023      	b.n	800ac36 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800abee:	4b59      	ldr	r3, [pc, #356]	@ (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800abf6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800abfa:	d107      	bne.n	800ac0c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800abfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac00:	4618      	mov	r0, r3
 800ac02:	f000 fbc7 	bl	800b394 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac08:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac0a:	e0fc      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac10:	e0f9      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ac12:	4b50      	ldr	r3, [pc, #320]	@ (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ac1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ac1e:	d107      	bne.n	800ac30 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac20:	f107 0318 	add.w	r3, r7, #24
 800ac24:	4618      	mov	r0, r3
 800ac26:	f000 f90d 	bl	800ae44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ac2a:	6a3b      	ldr	r3, [r7, #32]
 800ac2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac2e:	e0ea      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac30:	2300      	movs	r3, #0
 800ac32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac34:	e0e7      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ac36:	2300      	movs	r3, #0
 800ac38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac3a:	e0e4      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ac3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac40:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800ac44:	430b      	orrs	r3, r1
 800ac46:	f040 808d 	bne.w	800ad64 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ac4a:	4b42      	ldr	r3, [pc, #264]	@ (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ac4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ac4e:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800ac52:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ac54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ac5a:	d06b      	beq.n	800ad34 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ac5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ac62:	d874      	bhi.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ac64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac6a:	d056      	beq.n	800ad1a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ac6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ac72:	d86c      	bhi.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ac74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac76:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ac7a:	d03b      	beq.n	800acf4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ac7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ac82:	d864      	bhi.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ac84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac8a:	d021      	beq.n	800acd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ac8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac92:	d85c      	bhi.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ac94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d004      	beq.n	800aca4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ac9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aca0:	d004      	beq.n	800acac <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800aca2:	e054      	b.n	800ad4e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800aca4:	f000 f8b8 	bl	800ae18 <HAL_RCCEx_GetD3PCLK1Freq>
 800aca8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800acaa:	e0ac      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800acac:	4b29      	ldr	r3, [pc, #164]	@ (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800acb4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800acb8:	d107      	bne.n	800acca <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acba:	f107 0318 	add.w	r3, r7, #24
 800acbe:	4618      	mov	r0, r3
 800acc0:	f000 f8c0 	bl	800ae44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800acc4:	69fb      	ldr	r3, [r7, #28]
 800acc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acc8:	e09d      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acca:	2300      	movs	r3, #0
 800accc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acce:	e09a      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800acd0:	4b20      	ldr	r3, [pc, #128]	@ (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800acd8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acdc:	d107      	bne.n	800acee <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acde:	f107 030c 	add.w	r3, r7, #12
 800ace2:	4618      	mov	r0, r3
 800ace4:	f000 fa02 	bl	800b0ec <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acec:	e08b      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acee:	2300      	movs	r3, #0
 800acf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800acf2:	e088      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800acf4:	4b17      	ldr	r3, [pc, #92]	@ (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f003 0304 	and.w	r3, r3, #4
 800acfc:	2b04      	cmp	r3, #4
 800acfe:	d109      	bne.n	800ad14 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad00:	4b14      	ldr	r3, [pc, #80]	@ (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	08db      	lsrs	r3, r3, #3
 800ad06:	f003 0303 	and.w	r3, r3, #3
 800ad0a:	4a13      	ldr	r2, [pc, #76]	@ (800ad58 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ad0c:	fa22 f303 	lsr.w	r3, r2, r3
 800ad10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad12:	e078      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad14:	2300      	movs	r3, #0
 800ad16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad18:	e075      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ad1a:	4b0e      	ldr	r3, [pc, #56]	@ (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad26:	d102      	bne.n	800ad2e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ad28:	4b0c      	ldr	r3, [pc, #48]	@ (800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ad2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad2c:	e06b      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad32:	e068      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ad34:	4b07      	ldr	r3, [pc, #28]	@ (800ad54 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad3c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ad40:	d102      	bne.n	800ad48 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ad42:	4b07      	ldr	r3, [pc, #28]	@ (800ad60 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ad44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ad46:	e05e      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ad48:	2300      	movs	r3, #0
 800ad4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad4c:	e05b      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ad52:	e058      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad54:	58024400 	.word	0x58024400
 800ad58:	03d09000 	.word	0x03d09000
 800ad5c:	003d0900 	.word	0x003d0900
 800ad60:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ad64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad68:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ad6c:	430b      	orrs	r3, r1
 800ad6e:	d148      	bne.n	800ae02 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ad70:	4b27      	ldr	r3, [pc, #156]	@ (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ad72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ad74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ad78:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ad7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad80:	d02a      	beq.n	800add8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ad82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad88:	d838      	bhi.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ad8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d004      	beq.n	800ad9a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ad90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad92:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad96:	d00d      	beq.n	800adb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ad98:	e030      	b.n	800adfc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ad9a:	4b1d      	ldr	r3, [pc, #116]	@ (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ada2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ada6:	d102      	bne.n	800adae <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ada8:	4b1a      	ldr	r3, [pc, #104]	@ (800ae14 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800adaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adac:	e02b      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adae:	2300      	movs	r3, #0
 800adb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adb2:	e028      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800adb4:	4b16      	ldr	r3, [pc, #88]	@ (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800adbc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800adc0:	d107      	bne.n	800add2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800adc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800adc6:	4618      	mov	r0, r3
 800adc8:	f000 fae4 	bl	800b394 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800adcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800add0:	e019      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800add2:	2300      	movs	r3, #0
 800add4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800add6:	e016      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800add8:	4b0d      	ldr	r3, [pc, #52]	@ (800ae10 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ade0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ade4:	d107      	bne.n	800adf6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ade6:	f107 0318 	add.w	r3, r7, #24
 800adea:	4618      	mov	r0, r3
 800adec:	f000 f82a 	bl	800ae44 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800adf0:	69fb      	ldr	r3, [r7, #28]
 800adf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adf4:	e007      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adf6:	2300      	movs	r3, #0
 800adf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adfa:	e004      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800adfc:	2300      	movs	r3, #0
 800adfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae00:	e001      	b.n	800ae06 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800ae02:	2300      	movs	r3, #0
 800ae04:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800ae06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3740      	adds	r7, #64	@ 0x40
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	bd80      	pop	{r7, pc}
 800ae10:	58024400 	.word	0x58024400
 800ae14:	017d7840 	.word	0x017d7840

0800ae18 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ae1c:	f7fe f816 	bl	8008e4c <HAL_RCC_GetHCLKFreq>
 800ae20:	4602      	mov	r2, r0
 800ae22:	4b06      	ldr	r3, [pc, #24]	@ (800ae3c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ae24:	6a1b      	ldr	r3, [r3, #32]
 800ae26:	091b      	lsrs	r3, r3, #4
 800ae28:	f003 0307 	and.w	r3, r3, #7
 800ae2c:	4904      	ldr	r1, [pc, #16]	@ (800ae40 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ae2e:	5ccb      	ldrb	r3, [r1, r3]
 800ae30:	f003 031f 	and.w	r3, r3, #31
 800ae34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ae38:	4618      	mov	r0, r3
 800ae3a:	bd80      	pop	{r7, pc}
 800ae3c:	58024400 	.word	0x58024400
 800ae40:	08014a80 	.word	0x08014a80

0800ae44 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b089      	sub	sp, #36	@ 0x24
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ae4c:	4ba1      	ldr	r3, [pc, #644]	@ (800b0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae50:	f003 0303 	and.w	r3, r3, #3
 800ae54:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ae56:	4b9f      	ldr	r3, [pc, #636]	@ (800b0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae5a:	0b1b      	lsrs	r3, r3, #12
 800ae5c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ae60:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ae62:	4b9c      	ldr	r3, [pc, #624]	@ (800b0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ae66:	091b      	lsrs	r3, r3, #4
 800ae68:	f003 0301 	and.w	r3, r3, #1
 800ae6c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ae6e:	4b99      	ldr	r3, [pc, #612]	@ (800b0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ae70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ae72:	08db      	lsrs	r3, r3, #3
 800ae74:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae78:	693a      	ldr	r2, [r7, #16]
 800ae7a:	fb02 f303 	mul.w	r3, r2, r3
 800ae7e:	ee07 3a90 	vmov	s15, r3
 800ae82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae86:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	f000 8111 	beq.w	800b0b4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ae92:	69bb      	ldr	r3, [r7, #24]
 800ae94:	2b02      	cmp	r3, #2
 800ae96:	f000 8083 	beq.w	800afa0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ae9a:	69bb      	ldr	r3, [r7, #24]
 800ae9c:	2b02      	cmp	r3, #2
 800ae9e:	f200 80a1 	bhi.w	800afe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800aea2:	69bb      	ldr	r3, [r7, #24]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d003      	beq.n	800aeb0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800aea8:	69bb      	ldr	r3, [r7, #24]
 800aeaa:	2b01      	cmp	r3, #1
 800aeac:	d056      	beq.n	800af5c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800aeae:	e099      	b.n	800afe4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aeb0:	4b88      	ldr	r3, [pc, #544]	@ (800b0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f003 0320 	and.w	r3, r3, #32
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d02d      	beq.n	800af18 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aebc:	4b85      	ldr	r3, [pc, #532]	@ (800b0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	08db      	lsrs	r3, r3, #3
 800aec2:	f003 0303 	and.w	r3, r3, #3
 800aec6:	4a84      	ldr	r2, [pc, #528]	@ (800b0d8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800aec8:	fa22 f303 	lsr.w	r3, r2, r3
 800aecc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800aece:	68bb      	ldr	r3, [r7, #8]
 800aed0:	ee07 3a90 	vmov	s15, r3
 800aed4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	ee07 3a90 	vmov	s15, r3
 800aede:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aee6:	4b7b      	ldr	r3, [pc, #492]	@ (800b0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aee8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aeea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aeee:	ee07 3a90 	vmov	s15, r3
 800aef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aef6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aefa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800aefe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af12:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800af16:	e087      	b.n	800b028 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af18:	697b      	ldr	r3, [r7, #20]
 800af1a:	ee07 3a90 	vmov	s15, r3
 800af1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af22:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b0e0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800af26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af2a:	4b6a      	ldr	r3, [pc, #424]	@ (800b0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af32:	ee07 3a90 	vmov	s15, r3
 800af36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af3a:	ed97 6a03 	vldr	s12, [r7, #12]
 800af3e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af5a:	e065      	b.n	800b028 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800af5c:	697b      	ldr	r3, [r7, #20]
 800af5e:	ee07 3a90 	vmov	s15, r3
 800af62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af66:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800af6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800af6e:	4b59      	ldr	r3, [pc, #356]	@ (800b0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800af70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800af76:	ee07 3a90 	vmov	s15, r3
 800af7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800af7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800af82:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800af86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800af8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800af8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800af92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800af96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800af9e:	e043      	b.n	800b028 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	ee07 3a90 	vmov	s15, r3
 800afa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afaa:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b0e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800afae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800afb2:	4b48      	ldr	r3, [pc, #288]	@ (800b0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800afb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800afba:	ee07 3a90 	vmov	s15, r3
 800afbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800afc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800afc6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800afca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800afce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800afd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800afd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800afda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800afe2:	e021      	b.n	800b028 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	ee07 3a90 	vmov	s15, r3
 800afea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800afee:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b0e4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800aff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aff6:	4b37      	ldr	r3, [pc, #220]	@ (800b0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800aff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800affa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800affe:	ee07 3a90 	vmov	s15, r3
 800b002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b006:	ed97 6a03 	vldr	s12, [r7, #12]
 800b00a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b0dc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b00e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b01a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b01e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b022:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b026:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b028:	4b2a      	ldr	r3, [pc, #168]	@ (800b0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b02a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b02c:	0a5b      	lsrs	r3, r3, #9
 800b02e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b032:	ee07 3a90 	vmov	s15, r3
 800b036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b03a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b03e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b042:	edd7 6a07 	vldr	s13, [r7, #28]
 800b046:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b04a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b04e:	ee17 2a90 	vmov	r2, s15
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b056:	4b1f      	ldr	r3, [pc, #124]	@ (800b0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b05a:	0c1b      	lsrs	r3, r3, #16
 800b05c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b060:	ee07 3a90 	vmov	s15, r3
 800b064:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b068:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b06c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b070:	edd7 6a07 	vldr	s13, [r7, #28]
 800b074:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b078:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b07c:	ee17 2a90 	vmov	r2, s15
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b084:	4b13      	ldr	r3, [pc, #76]	@ (800b0d4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b088:	0e1b      	lsrs	r3, r3, #24
 800b08a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b08e:	ee07 3a90 	vmov	s15, r3
 800b092:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b096:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b09a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b09e:	edd7 6a07 	vldr	s13, [r7, #28]
 800b0a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b0a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b0aa:	ee17 2a90 	vmov	r2, s15
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b0b2:	e008      	b.n	800b0c6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2200      	movs	r2, #0
 800b0b8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	609a      	str	r2, [r3, #8]
}
 800b0c6:	bf00      	nop
 800b0c8:	3724      	adds	r7, #36	@ 0x24
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr
 800b0d2:	bf00      	nop
 800b0d4:	58024400 	.word	0x58024400
 800b0d8:	03d09000 	.word	0x03d09000
 800b0dc:	46000000 	.word	0x46000000
 800b0e0:	4c742400 	.word	0x4c742400
 800b0e4:	4a742400 	.word	0x4a742400
 800b0e8:	4bbebc20 	.word	0x4bbebc20

0800b0ec <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800b0ec:	b480      	push	{r7}
 800b0ee:	b089      	sub	sp, #36	@ 0x24
 800b0f0:	af00      	add	r7, sp, #0
 800b0f2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b0f4:	4ba1      	ldr	r3, [pc, #644]	@ (800b37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b0f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0f8:	f003 0303 	and.w	r3, r3, #3
 800b0fc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b0fe:	4b9f      	ldr	r3, [pc, #636]	@ (800b37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b100:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b102:	0d1b      	lsrs	r3, r3, #20
 800b104:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b108:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b10a:	4b9c      	ldr	r3, [pc, #624]	@ (800b37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b10c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b10e:	0a1b      	lsrs	r3, r3, #8
 800b110:	f003 0301 	and.w	r3, r3, #1
 800b114:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b116:	4b99      	ldr	r3, [pc, #612]	@ (800b37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b11a:	08db      	lsrs	r3, r3, #3
 800b11c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b120:	693a      	ldr	r2, [r7, #16]
 800b122:	fb02 f303 	mul.w	r3, r2, r3
 800b126:	ee07 3a90 	vmov	s15, r3
 800b12a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b12e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b132:	697b      	ldr	r3, [r7, #20]
 800b134:	2b00      	cmp	r3, #0
 800b136:	f000 8111 	beq.w	800b35c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b13a:	69bb      	ldr	r3, [r7, #24]
 800b13c:	2b02      	cmp	r3, #2
 800b13e:	f000 8083 	beq.w	800b248 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b142:	69bb      	ldr	r3, [r7, #24]
 800b144:	2b02      	cmp	r3, #2
 800b146:	f200 80a1 	bhi.w	800b28c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b14a:	69bb      	ldr	r3, [r7, #24]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d003      	beq.n	800b158 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b150:	69bb      	ldr	r3, [r7, #24]
 800b152:	2b01      	cmp	r3, #1
 800b154:	d056      	beq.n	800b204 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b156:	e099      	b.n	800b28c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b158:	4b88      	ldr	r3, [pc, #544]	@ (800b37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	f003 0320 	and.w	r3, r3, #32
 800b160:	2b00      	cmp	r3, #0
 800b162:	d02d      	beq.n	800b1c0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b164:	4b85      	ldr	r3, [pc, #532]	@ (800b37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	08db      	lsrs	r3, r3, #3
 800b16a:	f003 0303 	and.w	r3, r3, #3
 800b16e:	4a84      	ldr	r2, [pc, #528]	@ (800b380 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b170:	fa22 f303 	lsr.w	r3, r2, r3
 800b174:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	ee07 3a90 	vmov	s15, r3
 800b17c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b180:	697b      	ldr	r3, [r7, #20]
 800b182:	ee07 3a90 	vmov	s15, r3
 800b186:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b18a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b18e:	4b7b      	ldr	r3, [pc, #492]	@ (800b37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b196:	ee07 3a90 	vmov	s15, r3
 800b19a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b19e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1a2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800b384 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1ba:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b1be:	e087      	b.n	800b2d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	ee07 3a90 	vmov	s15, r3
 800b1c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b1ca:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800b388 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b1ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1d2:	4b6a      	ldr	r3, [pc, #424]	@ (800b37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b1d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1da:	ee07 3a90 	vmov	s15, r3
 800b1de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b1e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b1e6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800b384 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b1ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b1ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b1f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b1f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b1fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b202:	e065      	b.n	800b2d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	ee07 3a90 	vmov	s15, r3
 800b20a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b20e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800b38c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b216:	4b59      	ldr	r3, [pc, #356]	@ (800b37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b218:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b21a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b21e:	ee07 3a90 	vmov	s15, r3
 800b222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b226:	ed97 6a03 	vldr	s12, [r7, #12]
 800b22a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800b384 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b22e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b23a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b23e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b246:	e043      	b.n	800b2d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	ee07 3a90 	vmov	s15, r3
 800b24e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b252:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800b390 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b25a:	4b48      	ldr	r3, [pc, #288]	@ (800b37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b25c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b25e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b262:	ee07 3a90 	vmov	s15, r3
 800b266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b26a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b26e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800b384 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b27a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b27e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b282:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b286:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b28a:	e021      	b.n	800b2d0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	ee07 3a90 	vmov	s15, r3
 800b292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b296:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800b38c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b29a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b29e:	4b37      	ldr	r3, [pc, #220]	@ (800b37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2a6:	ee07 3a90 	vmov	s15, r3
 800b2aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b2ae:	ed97 6a03 	vldr	s12, [r7, #12]
 800b2b2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800b384 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b2b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b2ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b2be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b2c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b2c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b2ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b2ce:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b2d0:	4b2a      	ldr	r3, [pc, #168]	@ (800b37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b2d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2d4:	0a5b      	lsrs	r3, r3, #9
 800b2d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2da:	ee07 3a90 	vmov	s15, r3
 800b2de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b2e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b2e6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b2ea:	edd7 6a07 	vldr	s13, [r7, #28]
 800b2ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b2f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b2f6:	ee17 2a90 	vmov	r2, s15
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b2fe:	4b1f      	ldr	r3, [pc, #124]	@ (800b37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b302:	0c1b      	lsrs	r3, r3, #16
 800b304:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b308:	ee07 3a90 	vmov	s15, r3
 800b30c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b310:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b314:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b318:	edd7 6a07 	vldr	s13, [r7, #28]
 800b31c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b324:	ee17 2a90 	vmov	r2, s15
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b32c:	4b13      	ldr	r3, [pc, #76]	@ (800b37c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b32e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b330:	0e1b      	lsrs	r3, r3, #24
 800b332:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b336:	ee07 3a90 	vmov	s15, r3
 800b33a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b33e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b342:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b346:	edd7 6a07 	vldr	s13, [r7, #28]
 800b34a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b34e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b352:	ee17 2a90 	vmov	r2, s15
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800b35a:	e008      	b.n	800b36e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2200      	movs	r2, #0
 800b360:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2200      	movs	r2, #0
 800b366:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2200      	movs	r2, #0
 800b36c:	609a      	str	r2, [r3, #8]
}
 800b36e:	bf00      	nop
 800b370:	3724      	adds	r7, #36	@ 0x24
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr
 800b37a:	bf00      	nop
 800b37c:	58024400 	.word	0x58024400
 800b380:	03d09000 	.word	0x03d09000
 800b384:	46000000 	.word	0x46000000
 800b388:	4c742400 	.word	0x4c742400
 800b38c:	4a742400 	.word	0x4a742400
 800b390:	4bbebc20 	.word	0x4bbebc20

0800b394 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800b394:	b480      	push	{r7}
 800b396:	b089      	sub	sp, #36	@ 0x24
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b39c:	4ba0      	ldr	r3, [pc, #640]	@ (800b620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b39e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3a0:	f003 0303 	and.w	r3, r3, #3
 800b3a4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800b3a6:	4b9e      	ldr	r3, [pc, #632]	@ (800b620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b3aa:	091b      	lsrs	r3, r3, #4
 800b3ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b3b0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800b3b2:	4b9b      	ldr	r3, [pc, #620]	@ (800b620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3b6:	f003 0301 	and.w	r3, r3, #1
 800b3ba:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b3bc:	4b98      	ldr	r3, [pc, #608]	@ (800b620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b3be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b3c0:	08db      	lsrs	r3, r3, #3
 800b3c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b3c6:	693a      	ldr	r2, [r7, #16]
 800b3c8:	fb02 f303 	mul.w	r3, r2, r3
 800b3cc:	ee07 3a90 	vmov	s15, r3
 800b3d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b3d4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800b3d8:	697b      	ldr	r3, [r7, #20]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	f000 8111 	beq.w	800b602 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800b3e0:	69bb      	ldr	r3, [r7, #24]
 800b3e2:	2b02      	cmp	r3, #2
 800b3e4:	f000 8083 	beq.w	800b4ee <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800b3e8:	69bb      	ldr	r3, [r7, #24]
 800b3ea:	2b02      	cmp	r3, #2
 800b3ec:	f200 80a1 	bhi.w	800b532 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800b3f0:	69bb      	ldr	r3, [r7, #24]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d003      	beq.n	800b3fe <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800b3f6:	69bb      	ldr	r3, [r7, #24]
 800b3f8:	2b01      	cmp	r3, #1
 800b3fa:	d056      	beq.n	800b4aa <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800b3fc:	e099      	b.n	800b532 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b3fe:	4b88      	ldr	r3, [pc, #544]	@ (800b620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	f003 0320 	and.w	r3, r3, #32
 800b406:	2b00      	cmp	r3, #0
 800b408:	d02d      	beq.n	800b466 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b40a:	4b85      	ldr	r3, [pc, #532]	@ (800b620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	08db      	lsrs	r3, r3, #3
 800b410:	f003 0303 	and.w	r3, r3, #3
 800b414:	4a83      	ldr	r2, [pc, #524]	@ (800b624 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800b416:	fa22 f303 	lsr.w	r3, r2, r3
 800b41a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	ee07 3a90 	vmov	s15, r3
 800b422:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	ee07 3a90 	vmov	s15, r3
 800b42c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b430:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b434:	4b7a      	ldr	r3, [pc, #488]	@ (800b620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b43c:	ee07 3a90 	vmov	s15, r3
 800b440:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b444:	ed97 6a03 	vldr	s12, [r7, #12]
 800b448:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800b628 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b44c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b450:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b454:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b458:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b45c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b460:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b464:	e087      	b.n	800b576 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	ee07 3a90 	vmov	s15, r3
 800b46c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b470:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800b62c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b474:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b478:	4b69      	ldr	r3, [pc, #420]	@ (800b620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b47a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b47c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b480:	ee07 3a90 	vmov	s15, r3
 800b484:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b488:	ed97 6a03 	vldr	s12, [r7, #12]
 800b48c:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800b628 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b490:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b494:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b498:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b49c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4a4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4a8:	e065      	b.n	800b576 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	ee07 3a90 	vmov	s15, r3
 800b4b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4b4:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800b630 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800b4b8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b4bc:	4b58      	ldr	r3, [pc, #352]	@ (800b620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b4be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4c4:	ee07 3a90 	vmov	s15, r3
 800b4c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b4cc:	ed97 6a03 	vldr	s12, [r7, #12]
 800b4d0:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800b628 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b4d4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b4d8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b4dc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b4e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b4e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4e8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b4ec:	e043      	b.n	800b576 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4ee:	697b      	ldr	r3, [r7, #20]
 800b4f0:	ee07 3a90 	vmov	s15, r3
 800b4f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b4f8:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800b634 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800b4fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b500:	4b47      	ldr	r3, [pc, #284]	@ (800b620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b508:	ee07 3a90 	vmov	s15, r3
 800b50c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b510:	ed97 6a03 	vldr	s12, [r7, #12]
 800b514:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800b628 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b518:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b51c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b520:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b524:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b52c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b530:	e021      	b.n	800b576 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	ee07 3a90 	vmov	s15, r3
 800b538:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b53c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800b62c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800b540:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b544:	4b36      	ldr	r3, [pc, #216]	@ (800b620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b54c:	ee07 3a90 	vmov	s15, r3
 800b550:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b554:	ed97 6a03 	vldr	s12, [r7, #12]
 800b558:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800b628 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800b55c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b560:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b564:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800b568:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b56c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b570:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b574:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800b576:	4b2a      	ldr	r3, [pc, #168]	@ (800b620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b57a:	0a5b      	lsrs	r3, r3, #9
 800b57c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b580:	ee07 3a90 	vmov	s15, r3
 800b584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b588:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b58c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b590:	edd7 6a07 	vldr	s13, [r7, #28]
 800b594:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b598:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b59c:	ee17 2a90 	vmov	r2, s15
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800b5a4:	4b1e      	ldr	r3, [pc, #120]	@ (800b620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5a8:	0c1b      	lsrs	r3, r3, #16
 800b5aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5ae:	ee07 3a90 	vmov	s15, r3
 800b5b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b5ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5be:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5ca:	ee17 2a90 	vmov	r2, s15
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800b5d2:	4b13      	ldr	r3, [pc, #76]	@ (800b620 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800b5d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5d6:	0e1b      	lsrs	r3, r3, #24
 800b5d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b5dc:	ee07 3a90 	vmov	s15, r3
 800b5e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b5e4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b5e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b5ec:	edd7 6a07 	vldr	s13, [r7, #28]
 800b5f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b5f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b5f8:	ee17 2a90 	vmov	r2, s15
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800b600:	e008      	b.n	800b614 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	2200      	movs	r2, #0
 800b606:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	2200      	movs	r2, #0
 800b60c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2200      	movs	r2, #0
 800b612:	609a      	str	r2, [r3, #8]
}
 800b614:	bf00      	nop
 800b616:	3724      	adds	r7, #36	@ 0x24
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr
 800b620:	58024400 	.word	0x58024400
 800b624:	03d09000 	.word	0x03d09000
 800b628:	46000000 	.word	0x46000000
 800b62c:	4c742400 	.word	0x4c742400
 800b630:	4a742400 	.word	0x4a742400
 800b634:	4bbebc20 	.word	0x4bbebc20

0800b638 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b638:	b580      	push	{r7, lr}
 800b63a:	b084      	sub	sp, #16
 800b63c:	af00      	add	r7, sp, #0
 800b63e:	6078      	str	r0, [r7, #4]
 800b640:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b642:	2300      	movs	r3, #0
 800b644:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b646:	4b53      	ldr	r3, [pc, #332]	@ (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b648:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b64a:	f003 0303 	and.w	r3, r3, #3
 800b64e:	2b03      	cmp	r3, #3
 800b650:	d101      	bne.n	800b656 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800b652:	2301      	movs	r3, #1
 800b654:	e099      	b.n	800b78a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b656:	4b4f      	ldr	r3, [pc, #316]	@ (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	4a4e      	ldr	r2, [pc, #312]	@ (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b65c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b660:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b662:	f7f7 f961 	bl	8002928 <HAL_GetTick>
 800b666:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b668:	e008      	b.n	800b67c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b66a:	f7f7 f95d 	bl	8002928 <HAL_GetTick>
 800b66e:	4602      	mov	r2, r0
 800b670:	68bb      	ldr	r3, [r7, #8]
 800b672:	1ad3      	subs	r3, r2, r3
 800b674:	2b02      	cmp	r3, #2
 800b676:	d901      	bls.n	800b67c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b678:	2303      	movs	r3, #3
 800b67a:	e086      	b.n	800b78a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b67c:	4b45      	ldr	r3, [pc, #276]	@ (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b684:	2b00      	cmp	r3, #0
 800b686:	d1f0      	bne.n	800b66a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b688:	4b42      	ldr	r3, [pc, #264]	@ (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b68a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b68c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	031b      	lsls	r3, r3, #12
 800b696:	493f      	ldr	r1, [pc, #252]	@ (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b698:	4313      	orrs	r3, r2
 800b69a:	628b      	str	r3, [r1, #40]	@ 0x28
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	3b01      	subs	r3, #1
 800b6a2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	689b      	ldr	r3, [r3, #8]
 800b6aa:	3b01      	subs	r3, #1
 800b6ac:	025b      	lsls	r3, r3, #9
 800b6ae:	b29b      	uxth	r3, r3
 800b6b0:	431a      	orrs	r2, r3
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	3b01      	subs	r3, #1
 800b6b8:	041b      	lsls	r3, r3, #16
 800b6ba:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b6be:	431a      	orrs	r2, r3
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	691b      	ldr	r3, [r3, #16]
 800b6c4:	3b01      	subs	r3, #1
 800b6c6:	061b      	lsls	r3, r3, #24
 800b6c8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b6cc:	4931      	ldr	r1, [pc, #196]	@ (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b6d2:	4b30      	ldr	r3, [pc, #192]	@ (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b6d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6d6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	695b      	ldr	r3, [r3, #20]
 800b6de:	492d      	ldr	r1, [pc, #180]	@ (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b6e4:	4b2b      	ldr	r3, [pc, #172]	@ (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b6e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6e8:	f023 0220 	bic.w	r2, r3, #32
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	699b      	ldr	r3, [r3, #24]
 800b6f0:	4928      	ldr	r1, [pc, #160]	@ (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b6f6:	4b27      	ldr	r3, [pc, #156]	@ (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b6f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b6fa:	4a26      	ldr	r2, [pc, #152]	@ (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b6fc:	f023 0310 	bic.w	r3, r3, #16
 800b700:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b702:	4b24      	ldr	r3, [pc, #144]	@ (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b704:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b706:	4b24      	ldr	r3, [pc, #144]	@ (800b798 <RCCEx_PLL2_Config+0x160>)
 800b708:	4013      	ands	r3, r2
 800b70a:	687a      	ldr	r2, [r7, #4]
 800b70c:	69d2      	ldr	r2, [r2, #28]
 800b70e:	00d2      	lsls	r2, r2, #3
 800b710:	4920      	ldr	r1, [pc, #128]	@ (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b712:	4313      	orrs	r3, r2
 800b714:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b716:	4b1f      	ldr	r3, [pc, #124]	@ (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b718:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b71a:	4a1e      	ldr	r2, [pc, #120]	@ (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b71c:	f043 0310 	orr.w	r3, r3, #16
 800b720:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b722:	683b      	ldr	r3, [r7, #0]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d106      	bne.n	800b736 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b728:	4b1a      	ldr	r3, [pc, #104]	@ (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b72a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b72c:	4a19      	ldr	r2, [pc, #100]	@ (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b72e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b732:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b734:	e00f      	b.n	800b756 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	2b01      	cmp	r3, #1
 800b73a:	d106      	bne.n	800b74a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b73c:	4b15      	ldr	r3, [pc, #84]	@ (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b73e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b740:	4a14      	ldr	r2, [pc, #80]	@ (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b742:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b746:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b748:	e005      	b.n	800b756 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b74a:	4b12      	ldr	r3, [pc, #72]	@ (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b74c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b74e:	4a11      	ldr	r2, [pc, #68]	@ (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b750:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b754:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b756:	4b0f      	ldr	r3, [pc, #60]	@ (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	4a0e      	ldr	r2, [pc, #56]	@ (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b75c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b760:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b762:	f7f7 f8e1 	bl	8002928 <HAL_GetTick>
 800b766:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b768:	e008      	b.n	800b77c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b76a:	f7f7 f8dd 	bl	8002928 <HAL_GetTick>
 800b76e:	4602      	mov	r2, r0
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	1ad3      	subs	r3, r2, r3
 800b774:	2b02      	cmp	r3, #2
 800b776:	d901      	bls.n	800b77c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b778:	2303      	movs	r3, #3
 800b77a:	e006      	b.n	800b78a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b77c:	4b05      	ldr	r3, [pc, #20]	@ (800b794 <RCCEx_PLL2_Config+0x15c>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b784:	2b00      	cmp	r3, #0
 800b786:	d0f0      	beq.n	800b76a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b788:	7bfb      	ldrb	r3, [r7, #15]
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3710      	adds	r7, #16
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
 800b792:	bf00      	nop
 800b794:	58024400 	.word	0x58024400
 800b798:	ffff0007 	.word	0xffff0007

0800b79c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b084      	sub	sp, #16
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b7aa:	4b53      	ldr	r3, [pc, #332]	@ (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b7ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7ae:	f003 0303 	and.w	r3, r3, #3
 800b7b2:	2b03      	cmp	r3, #3
 800b7b4:	d101      	bne.n	800b7ba <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b7b6:	2301      	movs	r3, #1
 800b7b8:	e099      	b.n	800b8ee <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b7ba:	4b4f      	ldr	r3, [pc, #316]	@ (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	4a4e      	ldr	r2, [pc, #312]	@ (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b7c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b7c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b7c6:	f7f7 f8af 	bl	8002928 <HAL_GetTick>
 800b7ca:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b7cc:	e008      	b.n	800b7e0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b7ce:	f7f7 f8ab 	bl	8002928 <HAL_GetTick>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	1ad3      	subs	r3, r2, r3
 800b7d8:	2b02      	cmp	r3, #2
 800b7da:	d901      	bls.n	800b7e0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b7dc:	2303      	movs	r3, #3
 800b7de:	e086      	b.n	800b8ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b7e0:	4b45      	ldr	r3, [pc, #276]	@ (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d1f0      	bne.n	800b7ce <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b7ec:	4b42      	ldr	r3, [pc, #264]	@ (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b7ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b7f0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	051b      	lsls	r3, r3, #20
 800b7fa:	493f      	ldr	r1, [pc, #252]	@ (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	628b      	str	r3, [r1, #40]	@ 0x28
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	685b      	ldr	r3, [r3, #4]
 800b804:	3b01      	subs	r3, #1
 800b806:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	689b      	ldr	r3, [r3, #8]
 800b80e:	3b01      	subs	r3, #1
 800b810:	025b      	lsls	r3, r3, #9
 800b812:	b29b      	uxth	r3, r3
 800b814:	431a      	orrs	r2, r3
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	68db      	ldr	r3, [r3, #12]
 800b81a:	3b01      	subs	r3, #1
 800b81c:	041b      	lsls	r3, r3, #16
 800b81e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b822:	431a      	orrs	r2, r3
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	691b      	ldr	r3, [r3, #16]
 800b828:	3b01      	subs	r3, #1
 800b82a:	061b      	lsls	r3, r3, #24
 800b82c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b830:	4931      	ldr	r1, [pc, #196]	@ (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b832:	4313      	orrs	r3, r2
 800b834:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b836:	4b30      	ldr	r3, [pc, #192]	@ (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b83a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	695b      	ldr	r3, [r3, #20]
 800b842:	492d      	ldr	r1, [pc, #180]	@ (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b844:	4313      	orrs	r3, r2
 800b846:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b848:	4b2b      	ldr	r3, [pc, #172]	@ (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b84a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b84c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	699b      	ldr	r3, [r3, #24]
 800b854:	4928      	ldr	r1, [pc, #160]	@ (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b856:	4313      	orrs	r3, r2
 800b858:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b85a:	4b27      	ldr	r3, [pc, #156]	@ (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b85c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b85e:	4a26      	ldr	r2, [pc, #152]	@ (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b860:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b864:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b866:	4b24      	ldr	r3, [pc, #144]	@ (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b868:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b86a:	4b24      	ldr	r3, [pc, #144]	@ (800b8fc <RCCEx_PLL3_Config+0x160>)
 800b86c:	4013      	ands	r3, r2
 800b86e:	687a      	ldr	r2, [r7, #4]
 800b870:	69d2      	ldr	r2, [r2, #28]
 800b872:	00d2      	lsls	r2, r2, #3
 800b874:	4920      	ldr	r1, [pc, #128]	@ (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b876:	4313      	orrs	r3, r2
 800b878:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b87a:	4b1f      	ldr	r3, [pc, #124]	@ (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b87c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b87e:	4a1e      	ldr	r2, [pc, #120]	@ (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b880:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b884:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b886:	683b      	ldr	r3, [r7, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d106      	bne.n	800b89a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b88c:	4b1a      	ldr	r3, [pc, #104]	@ (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b88e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b890:	4a19      	ldr	r2, [pc, #100]	@ (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b892:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b896:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b898:	e00f      	b.n	800b8ba <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b89a:	683b      	ldr	r3, [r7, #0]
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d106      	bne.n	800b8ae <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b8a0:	4b15      	ldr	r3, [pc, #84]	@ (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b8a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8a4:	4a14      	ldr	r2, [pc, #80]	@ (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b8a6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b8aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b8ac:	e005      	b.n	800b8ba <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b8ae:	4b12      	ldr	r3, [pc, #72]	@ (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b8b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8b2:	4a11      	ldr	r2, [pc, #68]	@ (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b8b4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b8b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b8ba:	4b0f      	ldr	r3, [pc, #60]	@ (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	4a0e      	ldr	r2, [pc, #56]	@ (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b8c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b8c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8c6:	f7f7 f82f 	bl	8002928 <HAL_GetTick>
 800b8ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b8cc:	e008      	b.n	800b8e0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b8ce:	f7f7 f82b 	bl	8002928 <HAL_GetTick>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	1ad3      	subs	r3, r2, r3
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	d901      	bls.n	800b8e0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b8dc:	2303      	movs	r3, #3
 800b8de:	e006      	b.n	800b8ee <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b8e0:	4b05      	ldr	r3, [pc, #20]	@ (800b8f8 <RCCEx_PLL3_Config+0x15c>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d0f0      	beq.n	800b8ce <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3710      	adds	r7, #16
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	58024400 	.word	0x58024400
 800b8fc:	ffff0007 	.word	0xffff0007

0800b900 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d101      	bne.n	800b912 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b90e:	2301      	movs	r3, #1
 800b910:	e049      	b.n	800b9a6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b918:	b2db      	uxtb	r3, r3
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d106      	bne.n	800b92c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	2200      	movs	r2, #0
 800b922:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f7f6 fce2 	bl	80022f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2202      	movs	r2, #2
 800b930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681a      	ldr	r2, [r3, #0]
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	3304      	adds	r3, #4
 800b93c:	4619      	mov	r1, r3
 800b93e:	4610      	mov	r0, r2
 800b940:	f000 fea4 	bl	800c68c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2201      	movs	r2, #1
 800b948:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	2201      	movs	r2, #1
 800b950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	2201      	movs	r2, #1
 800b958:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2201      	movs	r2, #1
 800b960:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2201      	movs	r2, #1
 800b968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2201      	movs	r2, #1
 800b970:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2201      	movs	r2, #1
 800b978:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2201      	movs	r2, #1
 800b980:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2201      	movs	r2, #1
 800b988:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2201      	movs	r2, #1
 800b990:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2201      	movs	r2, #1
 800b998:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	2201      	movs	r2, #1
 800b9a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800b9a4:	2300      	movs	r3, #0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3708      	adds	r7, #8
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}
	...

0800b9b0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b9b0:	b480      	push	{r7}
 800b9b2:	b085      	sub	sp, #20
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b9be:	b2db      	uxtb	r3, r3
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d001      	beq.n	800b9c8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b9c4:	2301      	movs	r3, #1
 800b9c6:	e054      	b.n	800ba72 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2202      	movs	r2, #2
 800b9cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	68da      	ldr	r2, [r3, #12]
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	f042 0201 	orr.w	r2, r2, #1
 800b9de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	4a26      	ldr	r2, [pc, #152]	@ (800ba80 <HAL_TIM_Base_Start_IT+0xd0>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	d022      	beq.n	800ba30 <HAL_TIM_Base_Start_IT+0x80>
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b9f2:	d01d      	beq.n	800ba30 <HAL_TIM_Base_Start_IT+0x80>
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	4a22      	ldr	r2, [pc, #136]	@ (800ba84 <HAL_TIM_Base_Start_IT+0xd4>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d018      	beq.n	800ba30 <HAL_TIM_Base_Start_IT+0x80>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	4a21      	ldr	r2, [pc, #132]	@ (800ba88 <HAL_TIM_Base_Start_IT+0xd8>)
 800ba04:	4293      	cmp	r3, r2
 800ba06:	d013      	beq.n	800ba30 <HAL_TIM_Base_Start_IT+0x80>
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4a1f      	ldr	r2, [pc, #124]	@ (800ba8c <HAL_TIM_Base_Start_IT+0xdc>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d00e      	beq.n	800ba30 <HAL_TIM_Base_Start_IT+0x80>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	4a1e      	ldr	r2, [pc, #120]	@ (800ba90 <HAL_TIM_Base_Start_IT+0xe0>)
 800ba18:	4293      	cmp	r3, r2
 800ba1a:	d009      	beq.n	800ba30 <HAL_TIM_Base_Start_IT+0x80>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	4a1c      	ldr	r2, [pc, #112]	@ (800ba94 <HAL_TIM_Base_Start_IT+0xe4>)
 800ba22:	4293      	cmp	r3, r2
 800ba24:	d004      	beq.n	800ba30 <HAL_TIM_Base_Start_IT+0x80>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4a1b      	ldr	r2, [pc, #108]	@ (800ba98 <HAL_TIM_Base_Start_IT+0xe8>)
 800ba2c:	4293      	cmp	r3, r2
 800ba2e:	d115      	bne.n	800ba5c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	689a      	ldr	r2, [r3, #8]
 800ba36:	4b19      	ldr	r3, [pc, #100]	@ (800ba9c <HAL_TIM_Base_Start_IT+0xec>)
 800ba38:	4013      	ands	r3, r2
 800ba3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2b06      	cmp	r3, #6
 800ba40:	d015      	beq.n	800ba6e <HAL_TIM_Base_Start_IT+0xbe>
 800ba42:	68fb      	ldr	r3, [r7, #12]
 800ba44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ba48:	d011      	beq.n	800ba6e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	681a      	ldr	r2, [r3, #0]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	f042 0201 	orr.w	r2, r2, #1
 800ba58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba5a:	e008      	b.n	800ba6e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	681a      	ldr	r2, [r3, #0]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f042 0201 	orr.w	r2, r2, #1
 800ba6a:	601a      	str	r2, [r3, #0]
 800ba6c:	e000      	b.n	800ba70 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba6e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ba70:	2300      	movs	r3, #0
}
 800ba72:	4618      	mov	r0, r3
 800ba74:	3714      	adds	r7, #20
 800ba76:	46bd      	mov	sp, r7
 800ba78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7c:	4770      	bx	lr
 800ba7e:	bf00      	nop
 800ba80:	40010000 	.word	0x40010000
 800ba84:	40000400 	.word	0x40000400
 800ba88:	40000800 	.word	0x40000800
 800ba8c:	40000c00 	.word	0x40000c00
 800ba90:	40010400 	.word	0x40010400
 800ba94:	40001800 	.word	0x40001800
 800ba98:	40014000 	.word	0x40014000
 800ba9c:	00010007 	.word	0x00010007

0800baa0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b082      	sub	sp, #8
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d101      	bne.n	800bab2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800baae:	2301      	movs	r3, #1
 800bab0:	e049      	b.n	800bb46 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bab8:	b2db      	uxtb	r3, r3
 800baba:	2b00      	cmp	r3, #0
 800babc:	d106      	bne.n	800bacc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2200      	movs	r2, #0
 800bac2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	f7f6 fae6 	bl	8002098 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2202      	movs	r2, #2
 800bad0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681a      	ldr	r2, [r3, #0]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	3304      	adds	r3, #4
 800badc:	4619      	mov	r1, r3
 800bade:	4610      	mov	r0, r2
 800bae0:	f000 fdd4 	bl	800c68c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	2201      	movs	r2, #1
 800bae8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2201      	movs	r2, #1
 800baf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2201      	movs	r2, #1
 800baf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2201      	movs	r2, #1
 800bb00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2201      	movs	r2, #1
 800bb08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2201      	movs	r2, #1
 800bb10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2201      	movs	r2, #1
 800bb18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	2201      	movs	r2, #1
 800bb20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2201      	movs	r2, #1
 800bb28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2201      	movs	r2, #1
 800bb30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2201      	movs	r2, #1
 800bb38:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	2201      	movs	r2, #1
 800bb40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bb44:	2300      	movs	r3, #0
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3708      	adds	r7, #8
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
	...

0800bb50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d109      	bne.n	800bb74 <HAL_TIM_PWM_Start+0x24>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bb66:	b2db      	uxtb	r3, r3
 800bb68:	2b01      	cmp	r3, #1
 800bb6a:	bf14      	ite	ne
 800bb6c:	2301      	movne	r3, #1
 800bb6e:	2300      	moveq	r3, #0
 800bb70:	b2db      	uxtb	r3, r3
 800bb72:	e03c      	b.n	800bbee <HAL_TIM_PWM_Start+0x9e>
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	2b04      	cmp	r3, #4
 800bb78:	d109      	bne.n	800bb8e <HAL_TIM_PWM_Start+0x3e>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800bb80:	b2db      	uxtb	r3, r3
 800bb82:	2b01      	cmp	r3, #1
 800bb84:	bf14      	ite	ne
 800bb86:	2301      	movne	r3, #1
 800bb88:	2300      	moveq	r3, #0
 800bb8a:	b2db      	uxtb	r3, r3
 800bb8c:	e02f      	b.n	800bbee <HAL_TIM_PWM_Start+0x9e>
 800bb8e:	683b      	ldr	r3, [r7, #0]
 800bb90:	2b08      	cmp	r3, #8
 800bb92:	d109      	bne.n	800bba8 <HAL_TIM_PWM_Start+0x58>
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bb9a:	b2db      	uxtb	r3, r3
 800bb9c:	2b01      	cmp	r3, #1
 800bb9e:	bf14      	ite	ne
 800bba0:	2301      	movne	r3, #1
 800bba2:	2300      	moveq	r3, #0
 800bba4:	b2db      	uxtb	r3, r3
 800bba6:	e022      	b.n	800bbee <HAL_TIM_PWM_Start+0x9e>
 800bba8:	683b      	ldr	r3, [r7, #0]
 800bbaa:	2b0c      	cmp	r3, #12
 800bbac:	d109      	bne.n	800bbc2 <HAL_TIM_PWM_Start+0x72>
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bbb4:	b2db      	uxtb	r3, r3
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	bf14      	ite	ne
 800bbba:	2301      	movne	r3, #1
 800bbbc:	2300      	moveq	r3, #0
 800bbbe:	b2db      	uxtb	r3, r3
 800bbc0:	e015      	b.n	800bbee <HAL_TIM_PWM_Start+0x9e>
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	2b10      	cmp	r3, #16
 800bbc6:	d109      	bne.n	800bbdc <HAL_TIM_PWM_Start+0x8c>
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800bbce:	b2db      	uxtb	r3, r3
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	bf14      	ite	ne
 800bbd4:	2301      	movne	r3, #1
 800bbd6:	2300      	moveq	r3, #0
 800bbd8:	b2db      	uxtb	r3, r3
 800bbda:	e008      	b.n	800bbee <HAL_TIM_PWM_Start+0x9e>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800bbe2:	b2db      	uxtb	r3, r3
 800bbe4:	2b01      	cmp	r3, #1
 800bbe6:	bf14      	ite	ne
 800bbe8:	2301      	movne	r3, #1
 800bbea:	2300      	moveq	r3, #0
 800bbec:	b2db      	uxtb	r3, r3
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d001      	beq.n	800bbf6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	e0a1      	b.n	800bd3a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800bbf6:	683b      	ldr	r3, [r7, #0]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d104      	bne.n	800bc06 <HAL_TIM_PWM_Start+0xb6>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2202      	movs	r2, #2
 800bc00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bc04:	e023      	b.n	800bc4e <HAL_TIM_PWM_Start+0xfe>
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	2b04      	cmp	r3, #4
 800bc0a:	d104      	bne.n	800bc16 <HAL_TIM_PWM_Start+0xc6>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2202      	movs	r2, #2
 800bc10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bc14:	e01b      	b.n	800bc4e <HAL_TIM_PWM_Start+0xfe>
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	2b08      	cmp	r3, #8
 800bc1a:	d104      	bne.n	800bc26 <HAL_TIM_PWM_Start+0xd6>
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	2202      	movs	r2, #2
 800bc20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bc24:	e013      	b.n	800bc4e <HAL_TIM_PWM_Start+0xfe>
 800bc26:	683b      	ldr	r3, [r7, #0]
 800bc28:	2b0c      	cmp	r3, #12
 800bc2a:	d104      	bne.n	800bc36 <HAL_TIM_PWM_Start+0xe6>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2202      	movs	r2, #2
 800bc30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800bc34:	e00b      	b.n	800bc4e <HAL_TIM_PWM_Start+0xfe>
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	2b10      	cmp	r3, #16
 800bc3a:	d104      	bne.n	800bc46 <HAL_TIM_PWM_Start+0xf6>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2202      	movs	r2, #2
 800bc40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bc44:	e003      	b.n	800bc4e <HAL_TIM_PWM_Start+0xfe>
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2202      	movs	r2, #2
 800bc4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	2201      	movs	r2, #1
 800bc54:	6839      	ldr	r1, [r7, #0]
 800bc56:	4618      	mov	r0, r3
 800bc58:	f001 f932 	bl	800cec0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	4a38      	ldr	r2, [pc, #224]	@ (800bd44 <HAL_TIM_PWM_Start+0x1f4>)
 800bc62:	4293      	cmp	r3, r2
 800bc64:	d013      	beq.n	800bc8e <HAL_TIM_PWM_Start+0x13e>
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	4a37      	ldr	r2, [pc, #220]	@ (800bd48 <HAL_TIM_PWM_Start+0x1f8>)
 800bc6c:	4293      	cmp	r3, r2
 800bc6e:	d00e      	beq.n	800bc8e <HAL_TIM_PWM_Start+0x13e>
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	4a35      	ldr	r2, [pc, #212]	@ (800bd4c <HAL_TIM_PWM_Start+0x1fc>)
 800bc76:	4293      	cmp	r3, r2
 800bc78:	d009      	beq.n	800bc8e <HAL_TIM_PWM_Start+0x13e>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	4a34      	ldr	r2, [pc, #208]	@ (800bd50 <HAL_TIM_PWM_Start+0x200>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d004      	beq.n	800bc8e <HAL_TIM_PWM_Start+0x13e>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	4a32      	ldr	r2, [pc, #200]	@ (800bd54 <HAL_TIM_PWM_Start+0x204>)
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d101      	bne.n	800bc92 <HAL_TIM_PWM_Start+0x142>
 800bc8e:	2301      	movs	r3, #1
 800bc90:	e000      	b.n	800bc94 <HAL_TIM_PWM_Start+0x144>
 800bc92:	2300      	movs	r3, #0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d007      	beq.n	800bca8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800bca6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4a25      	ldr	r2, [pc, #148]	@ (800bd44 <HAL_TIM_PWM_Start+0x1f4>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d022      	beq.n	800bcf8 <HAL_TIM_PWM_Start+0x1a8>
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bcba:	d01d      	beq.n	800bcf8 <HAL_TIM_PWM_Start+0x1a8>
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4a25      	ldr	r2, [pc, #148]	@ (800bd58 <HAL_TIM_PWM_Start+0x208>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d018      	beq.n	800bcf8 <HAL_TIM_PWM_Start+0x1a8>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	681b      	ldr	r3, [r3, #0]
 800bcca:	4a24      	ldr	r2, [pc, #144]	@ (800bd5c <HAL_TIM_PWM_Start+0x20c>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d013      	beq.n	800bcf8 <HAL_TIM_PWM_Start+0x1a8>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	4a22      	ldr	r2, [pc, #136]	@ (800bd60 <HAL_TIM_PWM_Start+0x210>)
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d00e      	beq.n	800bcf8 <HAL_TIM_PWM_Start+0x1a8>
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4a1a      	ldr	r2, [pc, #104]	@ (800bd48 <HAL_TIM_PWM_Start+0x1f8>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	d009      	beq.n	800bcf8 <HAL_TIM_PWM_Start+0x1a8>
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	4a1e      	ldr	r2, [pc, #120]	@ (800bd64 <HAL_TIM_PWM_Start+0x214>)
 800bcea:	4293      	cmp	r3, r2
 800bcec:	d004      	beq.n	800bcf8 <HAL_TIM_PWM_Start+0x1a8>
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	4a16      	ldr	r2, [pc, #88]	@ (800bd4c <HAL_TIM_PWM_Start+0x1fc>)
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	d115      	bne.n	800bd24 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	689a      	ldr	r2, [r3, #8]
 800bcfe:	4b1a      	ldr	r3, [pc, #104]	@ (800bd68 <HAL_TIM_PWM_Start+0x218>)
 800bd00:	4013      	ands	r3, r2
 800bd02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2b06      	cmp	r3, #6
 800bd08:	d015      	beq.n	800bd36 <HAL_TIM_PWM_Start+0x1e6>
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd10:	d011      	beq.n	800bd36 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	681b      	ldr	r3, [r3, #0]
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f042 0201 	orr.w	r2, r2, #1
 800bd20:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd22:	e008      	b.n	800bd36 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	681a      	ldr	r2, [r3, #0]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f042 0201 	orr.w	r2, r2, #1
 800bd32:	601a      	str	r2, [r3, #0]
 800bd34:	e000      	b.n	800bd38 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd36:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800bd38:	2300      	movs	r3, #0
}
 800bd3a:	4618      	mov	r0, r3
 800bd3c:	3710      	adds	r7, #16
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bd80      	pop	{r7, pc}
 800bd42:	bf00      	nop
 800bd44:	40010000 	.word	0x40010000
 800bd48:	40010400 	.word	0x40010400
 800bd4c:	40014000 	.word	0x40014000
 800bd50:	40014400 	.word	0x40014400
 800bd54:	40014800 	.word	0x40014800
 800bd58:	40000400 	.word	0x40000400
 800bd5c:	40000800 	.word	0x40000800
 800bd60:	40000c00 	.word	0x40000c00
 800bd64:	40001800 	.word	0x40001800
 800bd68:	00010007 	.word	0x00010007

0800bd6c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b086      	sub	sp, #24
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d101      	bne.n	800bd80 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	e08f      	b.n	800bea0 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bd86:	b2db      	uxtb	r3, r3
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d106      	bne.n	800bd9a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	2200      	movs	r2, #0
 800bd90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f7f6 f883 	bl	8001ea0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	2202      	movs	r2, #2
 800bd9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	6899      	ldr	r1, [r3, #8]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681a      	ldr	r2, [r3, #0]
 800bdac:	4b3e      	ldr	r3, [pc, #248]	@ (800bea8 <HAL_TIM_Encoder_Init+0x13c>)
 800bdae:	400b      	ands	r3, r1
 800bdb0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681a      	ldr	r2, [r3, #0]
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	3304      	adds	r3, #4
 800bdba:	4619      	mov	r1, r3
 800bdbc:	4610      	mov	r0, r2
 800bdbe:	f000 fc65 	bl	800c68c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	689b      	ldr	r3, [r3, #8]
 800bdc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	699b      	ldr	r3, [r3, #24]
 800bdd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	6a1b      	ldr	r3, [r3, #32]
 800bdd8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	697a      	ldr	r2, [r7, #20]
 800bde0:	4313      	orrs	r3, r2
 800bde2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800bde4:	693a      	ldr	r2, [r7, #16]
 800bde6:	4b31      	ldr	r3, [pc, #196]	@ (800beac <HAL_TIM_Encoder_Init+0x140>)
 800bde8:	4013      	ands	r3, r2
 800bdea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	689a      	ldr	r2, [r3, #8]
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	699b      	ldr	r3, [r3, #24]
 800bdf4:	021b      	lsls	r3, r3, #8
 800bdf6:	4313      	orrs	r3, r2
 800bdf8:	693a      	ldr	r2, [r7, #16]
 800bdfa:	4313      	orrs	r3, r2
 800bdfc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800bdfe:	693a      	ldr	r2, [r7, #16]
 800be00:	4b2b      	ldr	r3, [pc, #172]	@ (800beb0 <HAL_TIM_Encoder_Init+0x144>)
 800be02:	4013      	ands	r3, r2
 800be04:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800be06:	693a      	ldr	r2, [r7, #16]
 800be08:	4b2a      	ldr	r3, [pc, #168]	@ (800beb4 <HAL_TIM_Encoder_Init+0x148>)
 800be0a:	4013      	ands	r3, r2
 800be0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	68da      	ldr	r2, [r3, #12]
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	69db      	ldr	r3, [r3, #28]
 800be16:	021b      	lsls	r3, r3, #8
 800be18:	4313      	orrs	r3, r2
 800be1a:	693a      	ldr	r2, [r7, #16]
 800be1c:	4313      	orrs	r3, r2
 800be1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800be20:	683b      	ldr	r3, [r7, #0]
 800be22:	691b      	ldr	r3, [r3, #16]
 800be24:	011a      	lsls	r2, r3, #4
 800be26:	683b      	ldr	r3, [r7, #0]
 800be28:	6a1b      	ldr	r3, [r3, #32]
 800be2a:	031b      	lsls	r3, r3, #12
 800be2c:	4313      	orrs	r3, r2
 800be2e:	693a      	ldr	r2, [r7, #16]
 800be30:	4313      	orrs	r3, r2
 800be32:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800be3a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800be42:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	685a      	ldr	r2, [r3, #4]
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	695b      	ldr	r3, [r3, #20]
 800be4c:	011b      	lsls	r3, r3, #4
 800be4e:	4313      	orrs	r3, r2
 800be50:	68fa      	ldr	r2, [r7, #12]
 800be52:	4313      	orrs	r3, r2
 800be54:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	697a      	ldr	r2, [r7, #20]
 800be5c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	693a      	ldr	r2, [r7, #16]
 800be64:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	68fa      	ldr	r2, [r7, #12]
 800be6c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	2201      	movs	r2, #1
 800be72:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	2201      	movs	r2, #1
 800be7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2201      	movs	r2, #1
 800be82:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	2201      	movs	r2, #1
 800be8a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	2201      	movs	r2, #1
 800be92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	2201      	movs	r2, #1
 800be9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800be9e:	2300      	movs	r3, #0
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3718      	adds	r7, #24
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}
 800bea8:	fffebff8 	.word	0xfffebff8
 800beac:	fffffcfc 	.word	0xfffffcfc
 800beb0:	fffff3f3 	.word	0xfffff3f3
 800beb4:	ffff0f0f 	.word	0xffff0f0f

0800beb8 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800bec8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800bed0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800bed8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800bee0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800bee2:	683b      	ldr	r3, [r7, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d110      	bne.n	800bf0a <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bee8:	7bfb      	ldrb	r3, [r7, #15]
 800beea:	2b01      	cmp	r3, #1
 800beec:	d102      	bne.n	800bef4 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800beee:	7b7b      	ldrb	r3, [r7, #13]
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d001      	beq.n	800bef8 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 800bef4:	2301      	movs	r3, #1
 800bef6:	e089      	b.n	800c00c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2202      	movs	r2, #2
 800befc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2202      	movs	r2, #2
 800bf04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bf08:	e031      	b.n	800bf6e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	2b04      	cmp	r3, #4
 800bf0e:	d110      	bne.n	800bf32 <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bf10:	7bbb      	ldrb	r3, [r7, #14]
 800bf12:	2b01      	cmp	r3, #1
 800bf14:	d102      	bne.n	800bf1c <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bf16:	7b3b      	ldrb	r3, [r7, #12]
 800bf18:	2b01      	cmp	r3, #1
 800bf1a:	d001      	beq.n	800bf20 <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 800bf1c:	2301      	movs	r3, #1
 800bf1e:	e075      	b.n	800c00c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2202      	movs	r2, #2
 800bf24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2202      	movs	r2, #2
 800bf2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800bf30:	e01d      	b.n	800bf6e <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bf32:	7bfb      	ldrb	r3, [r7, #15]
 800bf34:	2b01      	cmp	r3, #1
 800bf36:	d108      	bne.n	800bf4a <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800bf38:	7bbb      	ldrb	r3, [r7, #14]
 800bf3a:	2b01      	cmp	r3, #1
 800bf3c:	d105      	bne.n	800bf4a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800bf3e:	7b7b      	ldrb	r3, [r7, #13]
 800bf40:	2b01      	cmp	r3, #1
 800bf42:	d102      	bne.n	800bf4a <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800bf44:	7b3b      	ldrb	r3, [r7, #12]
 800bf46:	2b01      	cmp	r3, #1
 800bf48:	d001      	beq.n	800bf4e <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 800bf4a:	2301      	movs	r3, #1
 800bf4c:	e05e      	b.n	800c00c <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2202      	movs	r2, #2
 800bf52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	2202      	movs	r2, #2
 800bf5a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2202      	movs	r2, #2
 800bf62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2202      	movs	r2, #2
 800bf6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d003      	beq.n	800bf7c <HAL_TIM_Encoder_Start_IT+0xc4>
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	2b04      	cmp	r3, #4
 800bf78:	d010      	beq.n	800bf9c <HAL_TIM_Encoder_Start_IT+0xe4>
 800bf7a:	e01f      	b.n	800bfbc <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	2201      	movs	r2, #1
 800bf82:	2100      	movs	r1, #0
 800bf84:	4618      	mov	r0, r3
 800bf86:	f000 ff9b 	bl	800cec0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	68da      	ldr	r2, [r3, #12]
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	f042 0202 	orr.w	r2, r2, #2
 800bf98:	60da      	str	r2, [r3, #12]
      break;
 800bf9a:	e02e      	b.n	800bffa <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	2201      	movs	r2, #1
 800bfa2:	2104      	movs	r1, #4
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f000 ff8b 	bl	800cec0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	68da      	ldr	r2, [r3, #12]
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f042 0204 	orr.w	r2, r2, #4
 800bfb8:	60da      	str	r2, [r3, #12]
      break;
 800bfba:	e01e      	b.n	800bffa <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	2201      	movs	r2, #1
 800bfc2:	2100      	movs	r1, #0
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	f000 ff7b 	bl	800cec0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	2201      	movs	r2, #1
 800bfd0:	2104      	movs	r1, #4
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f000 ff74 	bl	800cec0 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	68da      	ldr	r2, [r3, #12]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	f042 0202 	orr.w	r2, r2, #2
 800bfe6:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	68da      	ldr	r2, [r3, #12]
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	f042 0204 	orr.w	r2, r2, #4
 800bff6:	60da      	str	r2, [r3, #12]
      break;
 800bff8:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	681a      	ldr	r2, [r3, #0]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f042 0201 	orr.w	r2, r2, #1
 800c008:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c00a:	2300      	movs	r3, #0
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3710      	adds	r7, #16
 800c010:	46bd      	mov	sp, r7
 800c012:	bd80      	pop	{r7, pc}

0800c014 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c014:	b580      	push	{r7, lr}
 800c016:	b084      	sub	sp, #16
 800c018:	af00      	add	r7, sp, #0
 800c01a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	68db      	ldr	r3, [r3, #12]
 800c022:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	691b      	ldr	r3, [r3, #16]
 800c02a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	f003 0302 	and.w	r3, r3, #2
 800c032:	2b00      	cmp	r3, #0
 800c034:	d020      	beq.n	800c078 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	f003 0302 	and.w	r3, r3, #2
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d01b      	beq.n	800c078 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f06f 0202 	mvn.w	r2, #2
 800c048:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	2201      	movs	r2, #1
 800c04e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	699b      	ldr	r3, [r3, #24]
 800c056:	f003 0303 	and.w	r3, r3, #3
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d003      	beq.n	800c066 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c05e:	6878      	ldr	r0, [r7, #4]
 800c060:	f7f4 ff24 	bl	8000eac <HAL_TIM_IC_CaptureCallback>
 800c064:	e005      	b.n	800c072 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f000 faf2 	bl	800c650 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 faf9 	bl	800c664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2200      	movs	r2, #0
 800c076:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c078:	68bb      	ldr	r3, [r7, #8]
 800c07a:	f003 0304 	and.w	r3, r3, #4
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d020      	beq.n	800c0c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	f003 0304 	and.w	r3, r3, #4
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d01b      	beq.n	800c0c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f06f 0204 	mvn.w	r2, #4
 800c094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	2202      	movs	r2, #2
 800c09a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	699b      	ldr	r3, [r3, #24]
 800c0a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d003      	beq.n	800c0b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c0aa:	6878      	ldr	r0, [r7, #4]
 800c0ac:	f7f4 fefe 	bl	8000eac <HAL_TIM_IC_CaptureCallback>
 800c0b0:	e005      	b.n	800c0be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0b2:	6878      	ldr	r0, [r7, #4]
 800c0b4:	f000 facc 	bl	800c650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f000 fad3 	bl	800c664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	2200      	movs	r2, #0
 800c0c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	f003 0308 	and.w	r3, r3, #8
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d020      	beq.n	800c110 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	f003 0308 	and.w	r3, r3, #8
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d01b      	beq.n	800c110 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	f06f 0208 	mvn.w	r2, #8
 800c0e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	2204      	movs	r2, #4
 800c0e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	69db      	ldr	r3, [r3, #28]
 800c0ee:	f003 0303 	and.w	r3, r3, #3
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d003      	beq.n	800c0fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c0f6:	6878      	ldr	r0, [r7, #4]
 800c0f8:	f7f4 fed8 	bl	8000eac <HAL_TIM_IC_CaptureCallback>
 800c0fc:	e005      	b.n	800c10a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f000 faa6 	bl	800c650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 faad 	bl	800c664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2200      	movs	r2, #0
 800c10e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	f003 0310 	and.w	r3, r3, #16
 800c116:	2b00      	cmp	r3, #0
 800c118:	d020      	beq.n	800c15c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c11a:	68fb      	ldr	r3, [r7, #12]
 800c11c:	f003 0310 	and.w	r3, r3, #16
 800c120:	2b00      	cmp	r3, #0
 800c122:	d01b      	beq.n	800c15c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f06f 0210 	mvn.w	r2, #16
 800c12c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	2208      	movs	r2, #8
 800c132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	69db      	ldr	r3, [r3, #28]
 800c13a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d003      	beq.n	800c14a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f7f4 feb2 	bl	8000eac <HAL_TIM_IC_CaptureCallback>
 800c148:	e005      	b.n	800c156 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f000 fa80 	bl	800c650 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c150:	6878      	ldr	r0, [r7, #4]
 800c152:	f000 fa87 	bl	800c664 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2200      	movs	r2, #0
 800c15a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c15c:	68bb      	ldr	r3, [r7, #8]
 800c15e:	f003 0301 	and.w	r3, r3, #1
 800c162:	2b00      	cmp	r3, #0
 800c164:	d00c      	beq.n	800c180 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	f003 0301 	and.w	r3, r3, #1
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d007      	beq.n	800c180 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f06f 0201 	mvn.w	r2, #1
 800c178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	f000 fa5e 	bl	800c63c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c180:	68bb      	ldr	r3, [r7, #8]
 800c182:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c186:	2b00      	cmp	r3, #0
 800c188:	d104      	bne.n	800c194 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c18a:	68bb      	ldr	r3, [r7, #8]
 800c18c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c190:	2b00      	cmp	r3, #0
 800c192:	d00c      	beq.n	800c1ae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d007      	beq.n	800c1ae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800c1a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 ff47 	bl	800d03c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d00c      	beq.n	800c1d2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d007      	beq.n	800c1d2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800c1ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f000 ff3f 	bl	800d050 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c1d2:	68bb      	ldr	r3, [r7, #8]
 800c1d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d00c      	beq.n	800c1f6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d007      	beq.n	800c1f6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800c1ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	f000 fa41 	bl	800c678 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	f003 0320 	and.w	r3, r3, #32
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d00c      	beq.n	800c21a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	f003 0320 	and.w	r3, r3, #32
 800c206:	2b00      	cmp	r3, #0
 800c208:	d007      	beq.n	800c21a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	f06f 0220 	mvn.w	r2, #32
 800c212:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c214:	6878      	ldr	r0, [r7, #4]
 800c216:	f000 ff07 	bl	800d028 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c21a:	bf00      	nop
 800c21c:	3710      	adds	r7, #16
 800c21e:	46bd      	mov	sp, r7
 800c220:	bd80      	pop	{r7, pc}
	...

0800c224 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b086      	sub	sp, #24
 800c228:	af00      	add	r7, sp, #0
 800c22a:	60f8      	str	r0, [r7, #12]
 800c22c:	60b9      	str	r1, [r7, #8]
 800c22e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c230:	2300      	movs	r3, #0
 800c232:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c23a:	2b01      	cmp	r3, #1
 800c23c:	d101      	bne.n	800c242 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c23e:	2302      	movs	r3, #2
 800c240:	e0ff      	b.n	800c442 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	2201      	movs	r2, #1
 800c246:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2b14      	cmp	r3, #20
 800c24e:	f200 80f0 	bhi.w	800c432 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c252:	a201      	add	r2, pc, #4	@ (adr r2, 800c258 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c258:	0800c2ad 	.word	0x0800c2ad
 800c25c:	0800c433 	.word	0x0800c433
 800c260:	0800c433 	.word	0x0800c433
 800c264:	0800c433 	.word	0x0800c433
 800c268:	0800c2ed 	.word	0x0800c2ed
 800c26c:	0800c433 	.word	0x0800c433
 800c270:	0800c433 	.word	0x0800c433
 800c274:	0800c433 	.word	0x0800c433
 800c278:	0800c32f 	.word	0x0800c32f
 800c27c:	0800c433 	.word	0x0800c433
 800c280:	0800c433 	.word	0x0800c433
 800c284:	0800c433 	.word	0x0800c433
 800c288:	0800c36f 	.word	0x0800c36f
 800c28c:	0800c433 	.word	0x0800c433
 800c290:	0800c433 	.word	0x0800c433
 800c294:	0800c433 	.word	0x0800c433
 800c298:	0800c3b1 	.word	0x0800c3b1
 800c29c:	0800c433 	.word	0x0800c433
 800c2a0:	0800c433 	.word	0x0800c433
 800c2a4:	0800c433 	.word	0x0800c433
 800c2a8:	0800c3f1 	.word	0x0800c3f1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	68b9      	ldr	r1, [r7, #8]
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	f000 fa90 	bl	800c7d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c2b8:	68fb      	ldr	r3, [r7, #12]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	699a      	ldr	r2, [r3, #24]
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f042 0208 	orr.w	r2, r2, #8
 800c2c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c2c8:	68fb      	ldr	r3, [r7, #12]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	699a      	ldr	r2, [r3, #24]
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	f022 0204 	bic.w	r2, r2, #4
 800c2d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	6999      	ldr	r1, [r3, #24]
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	691a      	ldr	r2, [r3, #16]
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	430a      	orrs	r2, r1
 800c2e8:	619a      	str	r2, [r3, #24]
      break;
 800c2ea:	e0a5      	b.n	800c438 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	68b9      	ldr	r1, [r7, #8]
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f000 fb00 	bl	800c8f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	699a      	ldr	r2, [r3, #24]
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c306:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	699a      	ldr	r2, [r3, #24]
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c316:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	6999      	ldr	r1, [r3, #24]
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	691b      	ldr	r3, [r3, #16]
 800c322:	021a      	lsls	r2, r3, #8
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	430a      	orrs	r2, r1
 800c32a:	619a      	str	r2, [r3, #24]
      break;
 800c32c:	e084      	b.n	800c438 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	68b9      	ldr	r1, [r7, #8]
 800c334:	4618      	mov	r0, r3
 800c336:	f000 fb69 	bl	800ca0c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	69da      	ldr	r2, [r3, #28]
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f042 0208 	orr.w	r2, r2, #8
 800c348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	69da      	ldr	r2, [r3, #28]
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f022 0204 	bic.w	r2, r2, #4
 800c358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c35a:	68fb      	ldr	r3, [r7, #12]
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	69d9      	ldr	r1, [r3, #28]
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	691a      	ldr	r2, [r3, #16]
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	430a      	orrs	r2, r1
 800c36a:	61da      	str	r2, [r3, #28]
      break;
 800c36c:	e064      	b.n	800c438 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	68b9      	ldr	r1, [r7, #8]
 800c374:	4618      	mov	r0, r3
 800c376:	f000 fbd1 	bl	800cb1c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	69da      	ldr	r2, [r3, #28]
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c388:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	69da      	ldr	r2, [r3, #28]
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c398:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800c39a:	68fb      	ldr	r3, [r7, #12]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	69d9      	ldr	r1, [r3, #28]
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	691b      	ldr	r3, [r3, #16]
 800c3a4:	021a      	lsls	r2, r3, #8
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	430a      	orrs	r2, r1
 800c3ac:	61da      	str	r2, [r3, #28]
      break;
 800c3ae:	e043      	b.n	800c438 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	68b9      	ldr	r1, [r7, #8]
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	f000 fc1a 	bl	800cbf0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	f042 0208 	orr.w	r2, r2, #8
 800c3ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f022 0204 	bic.w	r2, r2, #4
 800c3da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c3e2:	68bb      	ldr	r3, [r7, #8]
 800c3e4:	691a      	ldr	r2, [r3, #16]
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	430a      	orrs	r2, r1
 800c3ec:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c3ee:	e023      	b.n	800c438 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	68b9      	ldr	r1, [r7, #8]
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f000 fc5e 	bl	800ccb8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c40a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	681b      	ldr	r3, [r3, #0]
 800c416:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c41a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	691b      	ldr	r3, [r3, #16]
 800c426:	021a      	lsls	r2, r3, #8
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	430a      	orrs	r2, r1
 800c42e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800c430:	e002      	b.n	800c438 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800c432:	2301      	movs	r3, #1
 800c434:	75fb      	strb	r3, [r7, #23]
      break;
 800c436:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	2200      	movs	r2, #0
 800c43c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c440:	7dfb      	ldrb	r3, [r7, #23]
}
 800c442:	4618      	mov	r0, r3
 800c444:	3718      	adds	r7, #24
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
 800c44a:	bf00      	nop

0800c44c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b084      	sub	sp, #16
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c456:	2300      	movs	r3, #0
 800c458:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c460:	2b01      	cmp	r3, #1
 800c462:	d101      	bne.n	800c468 <HAL_TIM_ConfigClockSource+0x1c>
 800c464:	2302      	movs	r3, #2
 800c466:	e0dc      	b.n	800c622 <HAL_TIM_ConfigClockSource+0x1d6>
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2201      	movs	r2, #1
 800c46c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2202      	movs	r2, #2
 800c474:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	689b      	ldr	r3, [r3, #8]
 800c47e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c480:	68ba      	ldr	r2, [r7, #8]
 800c482:	4b6a      	ldr	r3, [pc, #424]	@ (800c62c <HAL_TIM_ConfigClockSource+0x1e0>)
 800c484:	4013      	ands	r3, r2
 800c486:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c48e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	68ba      	ldr	r2, [r7, #8]
 800c496:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4a64      	ldr	r2, [pc, #400]	@ (800c630 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	f000 80a9 	beq.w	800c5f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c4a4:	4a62      	ldr	r2, [pc, #392]	@ (800c630 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	f200 80ae 	bhi.w	800c608 <HAL_TIM_ConfigClockSource+0x1bc>
 800c4ac:	4a61      	ldr	r2, [pc, #388]	@ (800c634 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c4ae:	4293      	cmp	r3, r2
 800c4b0:	f000 80a1 	beq.w	800c5f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c4b4:	4a5f      	ldr	r2, [pc, #380]	@ (800c634 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c4b6:	4293      	cmp	r3, r2
 800c4b8:	f200 80a6 	bhi.w	800c608 <HAL_TIM_ConfigClockSource+0x1bc>
 800c4bc:	4a5e      	ldr	r2, [pc, #376]	@ (800c638 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	f000 8099 	beq.w	800c5f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c4c4:	4a5c      	ldr	r2, [pc, #368]	@ (800c638 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c4c6:	4293      	cmp	r3, r2
 800c4c8:	f200 809e 	bhi.w	800c608 <HAL_TIM_ConfigClockSource+0x1bc>
 800c4cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c4d0:	f000 8091 	beq.w	800c5f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c4d4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800c4d8:	f200 8096 	bhi.w	800c608 <HAL_TIM_ConfigClockSource+0x1bc>
 800c4dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c4e0:	f000 8089 	beq.w	800c5f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c4e4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c4e8:	f200 808e 	bhi.w	800c608 <HAL_TIM_ConfigClockSource+0x1bc>
 800c4ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c4f0:	d03e      	beq.n	800c570 <HAL_TIM_ConfigClockSource+0x124>
 800c4f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c4f6:	f200 8087 	bhi.w	800c608 <HAL_TIM_ConfigClockSource+0x1bc>
 800c4fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c4fe:	f000 8086 	beq.w	800c60e <HAL_TIM_ConfigClockSource+0x1c2>
 800c502:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c506:	d87f      	bhi.n	800c608 <HAL_TIM_ConfigClockSource+0x1bc>
 800c508:	2b70      	cmp	r3, #112	@ 0x70
 800c50a:	d01a      	beq.n	800c542 <HAL_TIM_ConfigClockSource+0xf6>
 800c50c:	2b70      	cmp	r3, #112	@ 0x70
 800c50e:	d87b      	bhi.n	800c608 <HAL_TIM_ConfigClockSource+0x1bc>
 800c510:	2b60      	cmp	r3, #96	@ 0x60
 800c512:	d050      	beq.n	800c5b6 <HAL_TIM_ConfigClockSource+0x16a>
 800c514:	2b60      	cmp	r3, #96	@ 0x60
 800c516:	d877      	bhi.n	800c608 <HAL_TIM_ConfigClockSource+0x1bc>
 800c518:	2b50      	cmp	r3, #80	@ 0x50
 800c51a:	d03c      	beq.n	800c596 <HAL_TIM_ConfigClockSource+0x14a>
 800c51c:	2b50      	cmp	r3, #80	@ 0x50
 800c51e:	d873      	bhi.n	800c608 <HAL_TIM_ConfigClockSource+0x1bc>
 800c520:	2b40      	cmp	r3, #64	@ 0x40
 800c522:	d058      	beq.n	800c5d6 <HAL_TIM_ConfigClockSource+0x18a>
 800c524:	2b40      	cmp	r3, #64	@ 0x40
 800c526:	d86f      	bhi.n	800c608 <HAL_TIM_ConfigClockSource+0x1bc>
 800c528:	2b30      	cmp	r3, #48	@ 0x30
 800c52a:	d064      	beq.n	800c5f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c52c:	2b30      	cmp	r3, #48	@ 0x30
 800c52e:	d86b      	bhi.n	800c608 <HAL_TIM_ConfigClockSource+0x1bc>
 800c530:	2b20      	cmp	r3, #32
 800c532:	d060      	beq.n	800c5f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c534:	2b20      	cmp	r3, #32
 800c536:	d867      	bhi.n	800c608 <HAL_TIM_ConfigClockSource+0x1bc>
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d05c      	beq.n	800c5f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c53c:	2b10      	cmp	r3, #16
 800c53e:	d05a      	beq.n	800c5f6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c540:	e062      	b.n	800c608 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c552:	f000 fc95 	bl	800ce80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	689b      	ldr	r3, [r3, #8]
 800c55c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800c564:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	68ba      	ldr	r2, [r7, #8]
 800c56c:	609a      	str	r2, [r3, #8]
      break;
 800c56e:	e04f      	b.n	800c610 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c57c:	683b      	ldr	r3, [r7, #0]
 800c57e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c580:	f000 fc7e 	bl	800ce80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	689a      	ldr	r2, [r3, #8]
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800c592:	609a      	str	r2, [r3, #8]
      break;
 800c594:	e03c      	b.n	800c610 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	f000 fbee 	bl	800cd84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	2150      	movs	r1, #80	@ 0x50
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	f000 fc48 	bl	800ce44 <TIM_ITRx_SetConfig>
      break;
 800c5b4:	e02c      	b.n	800c610 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c5ba:	683b      	ldr	r3, [r7, #0]
 800c5bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c5be:	683b      	ldr	r3, [r7, #0]
 800c5c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	f000 fc0d 	bl	800cde2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	2160      	movs	r1, #96	@ 0x60
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	f000 fc38 	bl	800ce44 <TIM_ITRx_SetConfig>
      break;
 800c5d4:	e01c      	b.n	800c610 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	f000 fbce 	bl	800cd84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	2140      	movs	r1, #64	@ 0x40
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f000 fc28 	bl	800ce44 <TIM_ITRx_SetConfig>
      break;
 800c5f4:	e00c      	b.n	800c610 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681a      	ldr	r2, [r3, #0]
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	4619      	mov	r1, r3
 800c600:	4610      	mov	r0, r2
 800c602:	f000 fc1f 	bl	800ce44 <TIM_ITRx_SetConfig>
      break;
 800c606:	e003      	b.n	800c610 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c608:	2301      	movs	r3, #1
 800c60a:	73fb      	strb	r3, [r7, #15]
      break;
 800c60c:	e000      	b.n	800c610 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c60e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	2201      	movs	r2, #1
 800c614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	2200      	movs	r2, #0
 800c61c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c620:	7bfb      	ldrb	r3, [r7, #15]
}
 800c622:	4618      	mov	r0, r3
 800c624:	3710      	adds	r7, #16
 800c626:	46bd      	mov	sp, r7
 800c628:	bd80      	pop	{r7, pc}
 800c62a:	bf00      	nop
 800c62c:	ffceff88 	.word	0xffceff88
 800c630:	00100040 	.word	0x00100040
 800c634:	00100030 	.word	0x00100030
 800c638:	00100020 	.word	0x00100020

0800c63c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c63c:	b480      	push	{r7}
 800c63e:	b083      	sub	sp, #12
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c644:	bf00      	nop
 800c646:	370c      	adds	r7, #12
 800c648:	46bd      	mov	sp, r7
 800c64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c64e:	4770      	bx	lr

0800c650 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c650:	b480      	push	{r7}
 800c652:	b083      	sub	sp, #12
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c658:	bf00      	nop
 800c65a:	370c      	adds	r7, #12
 800c65c:	46bd      	mov	sp, r7
 800c65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c662:	4770      	bx	lr

0800c664 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c664:	b480      	push	{r7}
 800c666:	b083      	sub	sp, #12
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c66c:	bf00      	nop
 800c66e:	370c      	adds	r7, #12
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr

0800c678 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c678:	b480      	push	{r7}
 800c67a:	b083      	sub	sp, #12
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c680:	bf00      	nop
 800c682:	370c      	adds	r7, #12
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr

0800c68c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b085      	sub	sp, #20
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
 800c694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	4a46      	ldr	r2, [pc, #280]	@ (800c7b8 <TIM_Base_SetConfig+0x12c>)
 800c6a0:	4293      	cmp	r3, r2
 800c6a2:	d013      	beq.n	800c6cc <TIM_Base_SetConfig+0x40>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6aa:	d00f      	beq.n	800c6cc <TIM_Base_SetConfig+0x40>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	4a43      	ldr	r2, [pc, #268]	@ (800c7bc <TIM_Base_SetConfig+0x130>)
 800c6b0:	4293      	cmp	r3, r2
 800c6b2:	d00b      	beq.n	800c6cc <TIM_Base_SetConfig+0x40>
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	4a42      	ldr	r2, [pc, #264]	@ (800c7c0 <TIM_Base_SetConfig+0x134>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d007      	beq.n	800c6cc <TIM_Base_SetConfig+0x40>
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	4a41      	ldr	r2, [pc, #260]	@ (800c7c4 <TIM_Base_SetConfig+0x138>)
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d003      	beq.n	800c6cc <TIM_Base_SetConfig+0x40>
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	4a40      	ldr	r2, [pc, #256]	@ (800c7c8 <TIM_Base_SetConfig+0x13c>)
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d108      	bne.n	800c6de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c6d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	685b      	ldr	r3, [r3, #4]
 800c6d8:	68fa      	ldr	r2, [r7, #12]
 800c6da:	4313      	orrs	r3, r2
 800c6dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	4a35      	ldr	r2, [pc, #212]	@ (800c7b8 <TIM_Base_SetConfig+0x12c>)
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d01f      	beq.n	800c726 <TIM_Base_SetConfig+0x9a>
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6ec:	d01b      	beq.n	800c726 <TIM_Base_SetConfig+0x9a>
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	4a32      	ldr	r2, [pc, #200]	@ (800c7bc <TIM_Base_SetConfig+0x130>)
 800c6f2:	4293      	cmp	r3, r2
 800c6f4:	d017      	beq.n	800c726 <TIM_Base_SetConfig+0x9a>
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	4a31      	ldr	r2, [pc, #196]	@ (800c7c0 <TIM_Base_SetConfig+0x134>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d013      	beq.n	800c726 <TIM_Base_SetConfig+0x9a>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	4a30      	ldr	r2, [pc, #192]	@ (800c7c4 <TIM_Base_SetConfig+0x138>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d00f      	beq.n	800c726 <TIM_Base_SetConfig+0x9a>
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	4a2f      	ldr	r2, [pc, #188]	@ (800c7c8 <TIM_Base_SetConfig+0x13c>)
 800c70a:	4293      	cmp	r3, r2
 800c70c:	d00b      	beq.n	800c726 <TIM_Base_SetConfig+0x9a>
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	4a2e      	ldr	r2, [pc, #184]	@ (800c7cc <TIM_Base_SetConfig+0x140>)
 800c712:	4293      	cmp	r3, r2
 800c714:	d007      	beq.n	800c726 <TIM_Base_SetConfig+0x9a>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	4a2d      	ldr	r2, [pc, #180]	@ (800c7d0 <TIM_Base_SetConfig+0x144>)
 800c71a:	4293      	cmp	r3, r2
 800c71c:	d003      	beq.n	800c726 <TIM_Base_SetConfig+0x9a>
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	4a2c      	ldr	r2, [pc, #176]	@ (800c7d4 <TIM_Base_SetConfig+0x148>)
 800c722:	4293      	cmp	r3, r2
 800c724:	d108      	bne.n	800c738 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c72c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	68db      	ldr	r3, [r3, #12]
 800c732:	68fa      	ldr	r2, [r7, #12]
 800c734:	4313      	orrs	r3, r2
 800c736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c73e:	683b      	ldr	r3, [r7, #0]
 800c740:	695b      	ldr	r3, [r3, #20]
 800c742:	4313      	orrs	r3, r2
 800c744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	68fa      	ldr	r2, [r7, #12]
 800c74a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	689a      	ldr	r2, [r3, #8]
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c754:	683b      	ldr	r3, [r7, #0]
 800c756:	681a      	ldr	r2, [r3, #0]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	4a16      	ldr	r2, [pc, #88]	@ (800c7b8 <TIM_Base_SetConfig+0x12c>)
 800c760:	4293      	cmp	r3, r2
 800c762:	d00f      	beq.n	800c784 <TIM_Base_SetConfig+0xf8>
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	4a18      	ldr	r2, [pc, #96]	@ (800c7c8 <TIM_Base_SetConfig+0x13c>)
 800c768:	4293      	cmp	r3, r2
 800c76a:	d00b      	beq.n	800c784 <TIM_Base_SetConfig+0xf8>
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	4a17      	ldr	r2, [pc, #92]	@ (800c7cc <TIM_Base_SetConfig+0x140>)
 800c770:	4293      	cmp	r3, r2
 800c772:	d007      	beq.n	800c784 <TIM_Base_SetConfig+0xf8>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	4a16      	ldr	r2, [pc, #88]	@ (800c7d0 <TIM_Base_SetConfig+0x144>)
 800c778:	4293      	cmp	r3, r2
 800c77a:	d003      	beq.n	800c784 <TIM_Base_SetConfig+0xf8>
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	4a15      	ldr	r2, [pc, #84]	@ (800c7d4 <TIM_Base_SetConfig+0x148>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d103      	bne.n	800c78c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	691a      	ldr	r2, [r3, #16]
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2201      	movs	r2, #1
 800c790:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	691b      	ldr	r3, [r3, #16]
 800c796:	f003 0301 	and.w	r3, r3, #1
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d105      	bne.n	800c7aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	691b      	ldr	r3, [r3, #16]
 800c7a2:	f023 0201 	bic.w	r2, r3, #1
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	611a      	str	r2, [r3, #16]
  }
}
 800c7aa:	bf00      	nop
 800c7ac:	3714      	adds	r7, #20
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b4:	4770      	bx	lr
 800c7b6:	bf00      	nop
 800c7b8:	40010000 	.word	0x40010000
 800c7bc:	40000400 	.word	0x40000400
 800c7c0:	40000800 	.word	0x40000800
 800c7c4:	40000c00 	.word	0x40000c00
 800c7c8:	40010400 	.word	0x40010400
 800c7cc:	40014000 	.word	0x40014000
 800c7d0:	40014400 	.word	0x40014400
 800c7d4:	40014800 	.word	0x40014800

0800c7d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c7d8:	b480      	push	{r7}
 800c7da:	b087      	sub	sp, #28
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	6a1b      	ldr	r3, [r3, #32]
 800c7e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	6a1b      	ldr	r3, [r3, #32]
 800c7ec:	f023 0201 	bic.w	r2, r3, #1
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	685b      	ldr	r3, [r3, #4]
 800c7f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	699b      	ldr	r3, [r3, #24]
 800c7fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800c800:	68fa      	ldr	r2, [r7, #12]
 800c802:	4b37      	ldr	r3, [pc, #220]	@ (800c8e0 <TIM_OC1_SetConfig+0x108>)
 800c804:	4013      	ands	r3, r2
 800c806:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	f023 0303 	bic.w	r3, r3, #3
 800c80e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	681b      	ldr	r3, [r3, #0]
 800c814:	68fa      	ldr	r2, [r7, #12]
 800c816:	4313      	orrs	r3, r2
 800c818:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800c81a:	697b      	ldr	r3, [r7, #20]
 800c81c:	f023 0302 	bic.w	r3, r3, #2
 800c820:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800c822:	683b      	ldr	r3, [r7, #0]
 800c824:	689b      	ldr	r3, [r3, #8]
 800c826:	697a      	ldr	r2, [r7, #20]
 800c828:	4313      	orrs	r3, r2
 800c82a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	4a2d      	ldr	r2, [pc, #180]	@ (800c8e4 <TIM_OC1_SetConfig+0x10c>)
 800c830:	4293      	cmp	r3, r2
 800c832:	d00f      	beq.n	800c854 <TIM_OC1_SetConfig+0x7c>
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	4a2c      	ldr	r2, [pc, #176]	@ (800c8e8 <TIM_OC1_SetConfig+0x110>)
 800c838:	4293      	cmp	r3, r2
 800c83a:	d00b      	beq.n	800c854 <TIM_OC1_SetConfig+0x7c>
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	4a2b      	ldr	r2, [pc, #172]	@ (800c8ec <TIM_OC1_SetConfig+0x114>)
 800c840:	4293      	cmp	r3, r2
 800c842:	d007      	beq.n	800c854 <TIM_OC1_SetConfig+0x7c>
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	4a2a      	ldr	r2, [pc, #168]	@ (800c8f0 <TIM_OC1_SetConfig+0x118>)
 800c848:	4293      	cmp	r3, r2
 800c84a:	d003      	beq.n	800c854 <TIM_OC1_SetConfig+0x7c>
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	4a29      	ldr	r2, [pc, #164]	@ (800c8f4 <TIM_OC1_SetConfig+0x11c>)
 800c850:	4293      	cmp	r3, r2
 800c852:	d10c      	bne.n	800c86e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800c854:	697b      	ldr	r3, [r7, #20]
 800c856:	f023 0308 	bic.w	r3, r3, #8
 800c85a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	68db      	ldr	r3, [r3, #12]
 800c860:	697a      	ldr	r2, [r7, #20]
 800c862:	4313      	orrs	r3, r2
 800c864:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	f023 0304 	bic.w	r3, r3, #4
 800c86c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	4a1c      	ldr	r2, [pc, #112]	@ (800c8e4 <TIM_OC1_SetConfig+0x10c>)
 800c872:	4293      	cmp	r3, r2
 800c874:	d00f      	beq.n	800c896 <TIM_OC1_SetConfig+0xbe>
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	4a1b      	ldr	r2, [pc, #108]	@ (800c8e8 <TIM_OC1_SetConfig+0x110>)
 800c87a:	4293      	cmp	r3, r2
 800c87c:	d00b      	beq.n	800c896 <TIM_OC1_SetConfig+0xbe>
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	4a1a      	ldr	r2, [pc, #104]	@ (800c8ec <TIM_OC1_SetConfig+0x114>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d007      	beq.n	800c896 <TIM_OC1_SetConfig+0xbe>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	4a19      	ldr	r2, [pc, #100]	@ (800c8f0 <TIM_OC1_SetConfig+0x118>)
 800c88a:	4293      	cmp	r3, r2
 800c88c:	d003      	beq.n	800c896 <TIM_OC1_SetConfig+0xbe>
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	4a18      	ldr	r2, [pc, #96]	@ (800c8f4 <TIM_OC1_SetConfig+0x11c>)
 800c892:	4293      	cmp	r3, r2
 800c894:	d111      	bne.n	800c8ba <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800c896:	693b      	ldr	r3, [r7, #16]
 800c898:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c89c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800c89e:	693b      	ldr	r3, [r7, #16]
 800c8a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800c8a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	695b      	ldr	r3, [r3, #20]
 800c8aa:	693a      	ldr	r2, [r7, #16]
 800c8ac:	4313      	orrs	r3, r2
 800c8ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	699b      	ldr	r3, [r3, #24]
 800c8b4:	693a      	ldr	r2, [r7, #16]
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	693a      	ldr	r2, [r7, #16]
 800c8be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	68fa      	ldr	r2, [r7, #12]
 800c8c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	685a      	ldr	r2, [r3, #4]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	697a      	ldr	r2, [r7, #20]
 800c8d2:	621a      	str	r2, [r3, #32]
}
 800c8d4:	bf00      	nop
 800c8d6:	371c      	adds	r7, #28
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr
 800c8e0:	fffeff8f 	.word	0xfffeff8f
 800c8e4:	40010000 	.word	0x40010000
 800c8e8:	40010400 	.word	0x40010400
 800c8ec:	40014000 	.word	0x40014000
 800c8f0:	40014400 	.word	0x40014400
 800c8f4:	40014800 	.word	0x40014800

0800c8f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b087      	sub	sp, #28
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	6a1b      	ldr	r3, [r3, #32]
 800c906:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6a1b      	ldr	r3, [r3, #32]
 800c90c:	f023 0210 	bic.w	r2, r3, #16
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	699b      	ldr	r3, [r3, #24]
 800c91e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800c920:	68fa      	ldr	r2, [r7, #12]
 800c922:	4b34      	ldr	r3, [pc, #208]	@ (800c9f4 <TIM_OC2_SetConfig+0xfc>)
 800c924:	4013      	ands	r3, r2
 800c926:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c92e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	021b      	lsls	r3, r3, #8
 800c936:	68fa      	ldr	r2, [r7, #12]
 800c938:	4313      	orrs	r3, r2
 800c93a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	f023 0320 	bic.w	r3, r3, #32
 800c942:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	689b      	ldr	r3, [r3, #8]
 800c948:	011b      	lsls	r3, r3, #4
 800c94a:	697a      	ldr	r2, [r7, #20]
 800c94c:	4313      	orrs	r3, r2
 800c94e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	4a29      	ldr	r2, [pc, #164]	@ (800c9f8 <TIM_OC2_SetConfig+0x100>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d003      	beq.n	800c960 <TIM_OC2_SetConfig+0x68>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	4a28      	ldr	r2, [pc, #160]	@ (800c9fc <TIM_OC2_SetConfig+0x104>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d10d      	bne.n	800c97c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	68db      	ldr	r3, [r3, #12]
 800c96c:	011b      	lsls	r3, r3, #4
 800c96e:	697a      	ldr	r2, [r7, #20]
 800c970:	4313      	orrs	r3, r2
 800c972:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800c974:	697b      	ldr	r3, [r7, #20]
 800c976:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c97a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	4a1e      	ldr	r2, [pc, #120]	@ (800c9f8 <TIM_OC2_SetConfig+0x100>)
 800c980:	4293      	cmp	r3, r2
 800c982:	d00f      	beq.n	800c9a4 <TIM_OC2_SetConfig+0xac>
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	4a1d      	ldr	r2, [pc, #116]	@ (800c9fc <TIM_OC2_SetConfig+0x104>)
 800c988:	4293      	cmp	r3, r2
 800c98a:	d00b      	beq.n	800c9a4 <TIM_OC2_SetConfig+0xac>
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	4a1c      	ldr	r2, [pc, #112]	@ (800ca00 <TIM_OC2_SetConfig+0x108>)
 800c990:	4293      	cmp	r3, r2
 800c992:	d007      	beq.n	800c9a4 <TIM_OC2_SetConfig+0xac>
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	4a1b      	ldr	r2, [pc, #108]	@ (800ca04 <TIM_OC2_SetConfig+0x10c>)
 800c998:	4293      	cmp	r3, r2
 800c99a:	d003      	beq.n	800c9a4 <TIM_OC2_SetConfig+0xac>
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	4a1a      	ldr	r2, [pc, #104]	@ (800ca08 <TIM_OC2_SetConfig+0x110>)
 800c9a0:	4293      	cmp	r3, r2
 800c9a2:	d113      	bne.n	800c9cc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800c9aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800c9ac:	693b      	ldr	r3, [r7, #16]
 800c9ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800c9b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800c9b4:	683b      	ldr	r3, [r7, #0]
 800c9b6:	695b      	ldr	r3, [r3, #20]
 800c9b8:	009b      	lsls	r3, r3, #2
 800c9ba:	693a      	ldr	r2, [r7, #16]
 800c9bc:	4313      	orrs	r3, r2
 800c9be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800c9c0:	683b      	ldr	r3, [r7, #0]
 800c9c2:	699b      	ldr	r3, [r3, #24]
 800c9c4:	009b      	lsls	r3, r3, #2
 800c9c6:	693a      	ldr	r2, [r7, #16]
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	693a      	ldr	r2, [r7, #16]
 800c9d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	68fa      	ldr	r2, [r7, #12]
 800c9d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	685a      	ldr	r2, [r3, #4]
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	697a      	ldr	r2, [r7, #20]
 800c9e4:	621a      	str	r2, [r3, #32]
}
 800c9e6:	bf00      	nop
 800c9e8:	371c      	adds	r7, #28
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f0:	4770      	bx	lr
 800c9f2:	bf00      	nop
 800c9f4:	feff8fff 	.word	0xfeff8fff
 800c9f8:	40010000 	.word	0x40010000
 800c9fc:	40010400 	.word	0x40010400
 800ca00:	40014000 	.word	0x40014000
 800ca04:	40014400 	.word	0x40014400
 800ca08:	40014800 	.word	0x40014800

0800ca0c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ca0c:	b480      	push	{r7}
 800ca0e:	b087      	sub	sp, #28
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	6a1b      	ldr	r3, [r3, #32]
 800ca1a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	6a1b      	ldr	r3, [r3, #32]
 800ca20:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	685b      	ldr	r3, [r3, #4]
 800ca2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	69db      	ldr	r3, [r3, #28]
 800ca32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ca34:	68fa      	ldr	r2, [r7, #12]
 800ca36:	4b33      	ldr	r3, [pc, #204]	@ (800cb04 <TIM_OC3_SetConfig+0xf8>)
 800ca38:	4013      	ands	r3, r2
 800ca3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	f023 0303 	bic.w	r3, r3, #3
 800ca42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	68fa      	ldr	r2, [r7, #12]
 800ca4a:	4313      	orrs	r3, r2
 800ca4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800ca4e:	697b      	ldr	r3, [r7, #20]
 800ca50:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ca54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	689b      	ldr	r3, [r3, #8]
 800ca5a:	021b      	lsls	r3, r3, #8
 800ca5c:	697a      	ldr	r2, [r7, #20]
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	4a28      	ldr	r2, [pc, #160]	@ (800cb08 <TIM_OC3_SetConfig+0xfc>)
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d003      	beq.n	800ca72 <TIM_OC3_SetConfig+0x66>
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	4a27      	ldr	r2, [pc, #156]	@ (800cb0c <TIM_OC3_SetConfig+0x100>)
 800ca6e:	4293      	cmp	r3, r2
 800ca70:	d10d      	bne.n	800ca8e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800ca78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	68db      	ldr	r3, [r3, #12]
 800ca7e:	021b      	lsls	r3, r3, #8
 800ca80:	697a      	ldr	r2, [r7, #20]
 800ca82:	4313      	orrs	r3, r2
 800ca84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800ca86:	697b      	ldr	r3, [r7, #20]
 800ca88:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800ca8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	4a1d      	ldr	r2, [pc, #116]	@ (800cb08 <TIM_OC3_SetConfig+0xfc>)
 800ca92:	4293      	cmp	r3, r2
 800ca94:	d00f      	beq.n	800cab6 <TIM_OC3_SetConfig+0xaa>
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	4a1c      	ldr	r2, [pc, #112]	@ (800cb0c <TIM_OC3_SetConfig+0x100>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d00b      	beq.n	800cab6 <TIM_OC3_SetConfig+0xaa>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	4a1b      	ldr	r2, [pc, #108]	@ (800cb10 <TIM_OC3_SetConfig+0x104>)
 800caa2:	4293      	cmp	r3, r2
 800caa4:	d007      	beq.n	800cab6 <TIM_OC3_SetConfig+0xaa>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	4a1a      	ldr	r2, [pc, #104]	@ (800cb14 <TIM_OC3_SetConfig+0x108>)
 800caaa:	4293      	cmp	r3, r2
 800caac:	d003      	beq.n	800cab6 <TIM_OC3_SetConfig+0xaa>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	4a19      	ldr	r2, [pc, #100]	@ (800cb18 <TIM_OC3_SetConfig+0x10c>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d113      	bne.n	800cade <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800cab6:	693b      	ldr	r3, [r7, #16]
 800cab8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cabc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	695b      	ldr	r3, [r3, #20]
 800caca:	011b      	lsls	r3, r3, #4
 800cacc:	693a      	ldr	r2, [r7, #16]
 800cace:	4313      	orrs	r3, r2
 800cad0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800cad2:	683b      	ldr	r3, [r7, #0]
 800cad4:	699b      	ldr	r3, [r3, #24]
 800cad6:	011b      	lsls	r3, r3, #4
 800cad8:	693a      	ldr	r2, [r7, #16]
 800cada:	4313      	orrs	r3, r2
 800cadc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	693a      	ldr	r2, [r7, #16]
 800cae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	68fa      	ldr	r2, [r7, #12]
 800cae8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	685a      	ldr	r2, [r3, #4]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	697a      	ldr	r2, [r7, #20]
 800caf6:	621a      	str	r2, [r3, #32]
}
 800caf8:	bf00      	nop
 800cafa:	371c      	adds	r7, #28
 800cafc:	46bd      	mov	sp, r7
 800cafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb02:	4770      	bx	lr
 800cb04:	fffeff8f 	.word	0xfffeff8f
 800cb08:	40010000 	.word	0x40010000
 800cb0c:	40010400 	.word	0x40010400
 800cb10:	40014000 	.word	0x40014000
 800cb14:	40014400 	.word	0x40014400
 800cb18:	40014800 	.word	0x40014800

0800cb1c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b087      	sub	sp, #28
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
 800cb24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	6a1b      	ldr	r3, [r3, #32]
 800cb2a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6a1b      	ldr	r3, [r3, #32]
 800cb30:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	685b      	ldr	r3, [r3, #4]
 800cb3c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	69db      	ldr	r3, [r3, #28]
 800cb42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cb44:	68fa      	ldr	r2, [r7, #12]
 800cb46:	4b24      	ldr	r3, [pc, #144]	@ (800cbd8 <TIM_OC4_SetConfig+0xbc>)
 800cb48:	4013      	ands	r3, r2
 800cb4a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cb52:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cb54:	683b      	ldr	r3, [r7, #0]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	021b      	lsls	r3, r3, #8
 800cb5a:	68fa      	ldr	r2, [r7, #12]
 800cb5c:	4313      	orrs	r3, r2
 800cb5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800cb66:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	689b      	ldr	r3, [r3, #8]
 800cb6c:	031b      	lsls	r3, r3, #12
 800cb6e:	693a      	ldr	r2, [r7, #16]
 800cb70:	4313      	orrs	r3, r2
 800cb72:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	4a19      	ldr	r2, [pc, #100]	@ (800cbdc <TIM_OC4_SetConfig+0xc0>)
 800cb78:	4293      	cmp	r3, r2
 800cb7a:	d00f      	beq.n	800cb9c <TIM_OC4_SetConfig+0x80>
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	4a18      	ldr	r2, [pc, #96]	@ (800cbe0 <TIM_OC4_SetConfig+0xc4>)
 800cb80:	4293      	cmp	r3, r2
 800cb82:	d00b      	beq.n	800cb9c <TIM_OC4_SetConfig+0x80>
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	4a17      	ldr	r2, [pc, #92]	@ (800cbe4 <TIM_OC4_SetConfig+0xc8>)
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d007      	beq.n	800cb9c <TIM_OC4_SetConfig+0x80>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	4a16      	ldr	r2, [pc, #88]	@ (800cbe8 <TIM_OC4_SetConfig+0xcc>)
 800cb90:	4293      	cmp	r3, r2
 800cb92:	d003      	beq.n	800cb9c <TIM_OC4_SetConfig+0x80>
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	4a15      	ldr	r2, [pc, #84]	@ (800cbec <TIM_OC4_SetConfig+0xd0>)
 800cb98:	4293      	cmp	r3, r2
 800cb9a:	d109      	bne.n	800cbb0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800cb9c:	697b      	ldr	r3, [r7, #20]
 800cb9e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800cba2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	695b      	ldr	r3, [r3, #20]
 800cba8:	019b      	lsls	r3, r3, #6
 800cbaa:	697a      	ldr	r2, [r7, #20]
 800cbac:	4313      	orrs	r3, r2
 800cbae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	697a      	ldr	r2, [r7, #20]
 800cbb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	68fa      	ldr	r2, [r7, #12]
 800cbba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cbbc:	683b      	ldr	r3, [r7, #0]
 800cbbe:	685a      	ldr	r2, [r3, #4]
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	693a      	ldr	r2, [r7, #16]
 800cbc8:	621a      	str	r2, [r3, #32]
}
 800cbca:	bf00      	nop
 800cbcc:	371c      	adds	r7, #28
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr
 800cbd6:	bf00      	nop
 800cbd8:	feff8fff 	.word	0xfeff8fff
 800cbdc:	40010000 	.word	0x40010000
 800cbe0:	40010400 	.word	0x40010400
 800cbe4:	40014000 	.word	0x40014000
 800cbe8:	40014400 	.word	0x40014400
 800cbec:	40014800 	.word	0x40014800

0800cbf0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800cbf0:	b480      	push	{r7}
 800cbf2:	b087      	sub	sp, #28
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	6a1b      	ldr	r3, [r3, #32]
 800cbfe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	6a1b      	ldr	r3, [r3, #32]
 800cc04:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	685b      	ldr	r3, [r3, #4]
 800cc10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800cc16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800cc18:	68fa      	ldr	r2, [r7, #12]
 800cc1a:	4b21      	ldr	r3, [pc, #132]	@ (800cca0 <TIM_OC5_SetConfig+0xb0>)
 800cc1c:	4013      	ands	r3, r2
 800cc1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	681b      	ldr	r3, [r3, #0]
 800cc24:	68fa      	ldr	r2, [r7, #12]
 800cc26:	4313      	orrs	r3, r2
 800cc28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800cc30:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	689b      	ldr	r3, [r3, #8]
 800cc36:	041b      	lsls	r3, r3, #16
 800cc38:	693a      	ldr	r2, [r7, #16]
 800cc3a:	4313      	orrs	r3, r2
 800cc3c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	4a18      	ldr	r2, [pc, #96]	@ (800cca4 <TIM_OC5_SetConfig+0xb4>)
 800cc42:	4293      	cmp	r3, r2
 800cc44:	d00f      	beq.n	800cc66 <TIM_OC5_SetConfig+0x76>
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	4a17      	ldr	r2, [pc, #92]	@ (800cca8 <TIM_OC5_SetConfig+0xb8>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d00b      	beq.n	800cc66 <TIM_OC5_SetConfig+0x76>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	4a16      	ldr	r2, [pc, #88]	@ (800ccac <TIM_OC5_SetConfig+0xbc>)
 800cc52:	4293      	cmp	r3, r2
 800cc54:	d007      	beq.n	800cc66 <TIM_OC5_SetConfig+0x76>
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	4a15      	ldr	r2, [pc, #84]	@ (800ccb0 <TIM_OC5_SetConfig+0xc0>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d003      	beq.n	800cc66 <TIM_OC5_SetConfig+0x76>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	4a14      	ldr	r2, [pc, #80]	@ (800ccb4 <TIM_OC5_SetConfig+0xc4>)
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d109      	bne.n	800cc7a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800cc6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	695b      	ldr	r3, [r3, #20]
 800cc72:	021b      	lsls	r3, r3, #8
 800cc74:	697a      	ldr	r2, [r7, #20]
 800cc76:	4313      	orrs	r3, r2
 800cc78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	697a      	ldr	r2, [r7, #20]
 800cc7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	68fa      	ldr	r2, [r7, #12]
 800cc84:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	685a      	ldr	r2, [r3, #4]
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	693a      	ldr	r2, [r7, #16]
 800cc92:	621a      	str	r2, [r3, #32]
}
 800cc94:	bf00      	nop
 800cc96:	371c      	adds	r7, #28
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc9e:	4770      	bx	lr
 800cca0:	fffeff8f 	.word	0xfffeff8f
 800cca4:	40010000 	.word	0x40010000
 800cca8:	40010400 	.word	0x40010400
 800ccac:	40014000 	.word	0x40014000
 800ccb0:	40014400 	.word	0x40014400
 800ccb4:	40014800 	.word	0x40014800

0800ccb8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b087      	sub	sp, #28
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
 800ccc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	6a1b      	ldr	r3, [r3, #32]
 800ccc6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	6a1b      	ldr	r3, [r3, #32]
 800cccc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	685b      	ldr	r3, [r3, #4]
 800ccd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ccde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800cce0:	68fa      	ldr	r2, [r7, #12]
 800cce2:	4b22      	ldr	r3, [pc, #136]	@ (800cd6c <TIM_OC6_SetConfig+0xb4>)
 800cce4:	4013      	ands	r3, r2
 800cce6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	021b      	lsls	r3, r3, #8
 800ccee:	68fa      	ldr	r2, [r7, #12]
 800ccf0:	4313      	orrs	r3, r2
 800ccf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800ccf4:	693b      	ldr	r3, [r7, #16]
 800ccf6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800ccfa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ccfc:	683b      	ldr	r3, [r7, #0]
 800ccfe:	689b      	ldr	r3, [r3, #8]
 800cd00:	051b      	lsls	r3, r3, #20
 800cd02:	693a      	ldr	r2, [r7, #16]
 800cd04:	4313      	orrs	r3, r2
 800cd06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	4a19      	ldr	r2, [pc, #100]	@ (800cd70 <TIM_OC6_SetConfig+0xb8>)
 800cd0c:	4293      	cmp	r3, r2
 800cd0e:	d00f      	beq.n	800cd30 <TIM_OC6_SetConfig+0x78>
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	4a18      	ldr	r2, [pc, #96]	@ (800cd74 <TIM_OC6_SetConfig+0xbc>)
 800cd14:	4293      	cmp	r3, r2
 800cd16:	d00b      	beq.n	800cd30 <TIM_OC6_SetConfig+0x78>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	4a17      	ldr	r2, [pc, #92]	@ (800cd78 <TIM_OC6_SetConfig+0xc0>)
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	d007      	beq.n	800cd30 <TIM_OC6_SetConfig+0x78>
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	4a16      	ldr	r2, [pc, #88]	@ (800cd7c <TIM_OC6_SetConfig+0xc4>)
 800cd24:	4293      	cmp	r3, r2
 800cd26:	d003      	beq.n	800cd30 <TIM_OC6_SetConfig+0x78>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	4a15      	ldr	r2, [pc, #84]	@ (800cd80 <TIM_OC6_SetConfig+0xc8>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d109      	bne.n	800cd44 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800cd30:	697b      	ldr	r3, [r7, #20]
 800cd32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800cd36:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	695b      	ldr	r3, [r3, #20]
 800cd3c:	029b      	lsls	r3, r3, #10
 800cd3e:	697a      	ldr	r2, [r7, #20]
 800cd40:	4313      	orrs	r3, r2
 800cd42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	697a      	ldr	r2, [r7, #20]
 800cd48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	68fa      	ldr	r2, [r7, #12]
 800cd4e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800cd50:	683b      	ldr	r3, [r7, #0]
 800cd52:	685a      	ldr	r2, [r3, #4]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	693a      	ldr	r2, [r7, #16]
 800cd5c:	621a      	str	r2, [r3, #32]
}
 800cd5e:	bf00      	nop
 800cd60:	371c      	adds	r7, #28
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr
 800cd6a:	bf00      	nop
 800cd6c:	feff8fff 	.word	0xfeff8fff
 800cd70:	40010000 	.word	0x40010000
 800cd74:	40010400 	.word	0x40010400
 800cd78:	40014000 	.word	0x40014000
 800cd7c:	40014400 	.word	0x40014400
 800cd80:	40014800 	.word	0x40014800

0800cd84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cd84:	b480      	push	{r7}
 800cd86:	b087      	sub	sp, #28
 800cd88:	af00      	add	r7, sp, #0
 800cd8a:	60f8      	str	r0, [r7, #12]
 800cd8c:	60b9      	str	r1, [r7, #8]
 800cd8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	6a1b      	ldr	r3, [r3, #32]
 800cd94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	6a1b      	ldr	r3, [r3, #32]
 800cd9a:	f023 0201 	bic.w	r2, r3, #1
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	699b      	ldr	r3, [r3, #24]
 800cda6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800cda8:	693b      	ldr	r3, [r7, #16]
 800cdaa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800cdae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	011b      	lsls	r3, r3, #4
 800cdb4:	693a      	ldr	r2, [r7, #16]
 800cdb6:	4313      	orrs	r3, r2
 800cdb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800cdba:	697b      	ldr	r3, [r7, #20]
 800cdbc:	f023 030a 	bic.w	r3, r3, #10
 800cdc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800cdc2:	697a      	ldr	r2, [r7, #20]
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	4313      	orrs	r3, r2
 800cdc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	693a      	ldr	r2, [r7, #16]
 800cdce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	697a      	ldr	r2, [r7, #20]
 800cdd4:	621a      	str	r2, [r3, #32]
}
 800cdd6:	bf00      	nop
 800cdd8:	371c      	adds	r7, #28
 800cdda:	46bd      	mov	sp, r7
 800cddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde0:	4770      	bx	lr

0800cde2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800cde2:	b480      	push	{r7}
 800cde4:	b087      	sub	sp, #28
 800cde6:	af00      	add	r7, sp, #0
 800cde8:	60f8      	str	r0, [r7, #12]
 800cdea:	60b9      	str	r1, [r7, #8]
 800cdec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	6a1b      	ldr	r3, [r3, #32]
 800cdf2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	6a1b      	ldr	r3, [r3, #32]
 800cdf8:	f023 0210 	bic.w	r2, r3, #16
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	699b      	ldr	r3, [r3, #24]
 800ce04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ce06:	693b      	ldr	r3, [r7, #16]
 800ce08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800ce0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	031b      	lsls	r3, r3, #12
 800ce12:	693a      	ldr	r2, [r7, #16]
 800ce14:	4313      	orrs	r3, r2
 800ce16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800ce1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ce20:	68bb      	ldr	r3, [r7, #8]
 800ce22:	011b      	lsls	r3, r3, #4
 800ce24:	697a      	ldr	r2, [r7, #20]
 800ce26:	4313      	orrs	r3, r2
 800ce28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	693a      	ldr	r2, [r7, #16]
 800ce2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	697a      	ldr	r2, [r7, #20]
 800ce34:	621a      	str	r2, [r3, #32]
}
 800ce36:	bf00      	nop
 800ce38:	371c      	adds	r7, #28
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce40:	4770      	bx	lr
	...

0800ce44 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ce44:	b480      	push	{r7}
 800ce46:	b085      	sub	sp, #20
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
 800ce4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	689b      	ldr	r3, [r3, #8]
 800ce52:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ce54:	68fa      	ldr	r2, [r7, #12]
 800ce56:	4b09      	ldr	r3, [pc, #36]	@ (800ce7c <TIM_ITRx_SetConfig+0x38>)
 800ce58:	4013      	ands	r3, r2
 800ce5a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ce5c:	683a      	ldr	r2, [r7, #0]
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	4313      	orrs	r3, r2
 800ce62:	f043 0307 	orr.w	r3, r3, #7
 800ce66:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	68fa      	ldr	r2, [r7, #12]
 800ce6c:	609a      	str	r2, [r3, #8]
}
 800ce6e:	bf00      	nop
 800ce70:	3714      	adds	r7, #20
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr
 800ce7a:	bf00      	nop
 800ce7c:	ffcfff8f 	.word	0xffcfff8f

0800ce80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ce80:	b480      	push	{r7}
 800ce82:	b087      	sub	sp, #28
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	60f8      	str	r0, [r7, #12]
 800ce88:	60b9      	str	r1, [r7, #8]
 800ce8a:	607a      	str	r2, [r7, #4]
 800ce8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	689b      	ldr	r3, [r3, #8]
 800ce92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ce94:	697b      	ldr	r3, [r7, #20]
 800ce96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ce9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	021a      	lsls	r2, r3, #8
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	431a      	orrs	r2, r3
 800cea4:	68bb      	ldr	r3, [r7, #8]
 800cea6:	4313      	orrs	r3, r2
 800cea8:	697a      	ldr	r2, [r7, #20]
 800ceaa:	4313      	orrs	r3, r2
 800ceac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ceae:	68fb      	ldr	r3, [r7, #12]
 800ceb0:	697a      	ldr	r2, [r7, #20]
 800ceb2:	609a      	str	r2, [r3, #8]
}
 800ceb4:	bf00      	nop
 800ceb6:	371c      	adds	r7, #28
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebe:	4770      	bx	lr

0800cec0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b087      	sub	sp, #28
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	60f8      	str	r0, [r7, #12]
 800cec8:	60b9      	str	r1, [r7, #8]
 800ceca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cecc:	68bb      	ldr	r3, [r7, #8]
 800cece:	f003 031f 	and.w	r3, r3, #31
 800ced2:	2201      	movs	r2, #1
 800ced4:	fa02 f303 	lsl.w	r3, r2, r3
 800ced8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	6a1a      	ldr	r2, [r3, #32]
 800cede:	697b      	ldr	r3, [r7, #20]
 800cee0:	43db      	mvns	r3, r3
 800cee2:	401a      	ands	r2, r3
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	6a1a      	ldr	r2, [r3, #32]
 800ceec:	68bb      	ldr	r3, [r7, #8]
 800ceee:	f003 031f 	and.w	r3, r3, #31
 800cef2:	6879      	ldr	r1, [r7, #4]
 800cef4:	fa01 f303 	lsl.w	r3, r1, r3
 800cef8:	431a      	orrs	r2, r3
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	621a      	str	r2, [r3, #32]
}
 800cefe:	bf00      	nop
 800cf00:	371c      	adds	r7, #28
 800cf02:	46bd      	mov	sp, r7
 800cf04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf08:	4770      	bx	lr
	...

0800cf0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b085      	sub	sp, #20
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
 800cf14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	d101      	bne.n	800cf24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cf20:	2302      	movs	r3, #2
 800cf22:	e06d      	b.n	800d000 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2201      	movs	r2, #1
 800cf28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	2202      	movs	r2, #2
 800cf30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	685b      	ldr	r3, [r3, #4]
 800cf3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	689b      	ldr	r3, [r3, #8]
 800cf42:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	4a30      	ldr	r2, [pc, #192]	@ (800d00c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cf4a:	4293      	cmp	r3, r2
 800cf4c:	d004      	beq.n	800cf58 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	4a2f      	ldr	r2, [pc, #188]	@ (800d010 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cf54:	4293      	cmp	r3, r2
 800cf56:	d108      	bne.n	800cf6a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800cf5e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	68fa      	ldr	r2, [r7, #12]
 800cf66:	4313      	orrs	r3, r2
 800cf68:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800cf70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	681b      	ldr	r3, [r3, #0]
 800cf76:	68fa      	ldr	r2, [r7, #12]
 800cf78:	4313      	orrs	r3, r2
 800cf7a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	68fa      	ldr	r2, [r7, #12]
 800cf82:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	4a20      	ldr	r2, [pc, #128]	@ (800d00c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cf8a:	4293      	cmp	r3, r2
 800cf8c:	d022      	beq.n	800cfd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cf96:	d01d      	beq.n	800cfd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	4a1d      	ldr	r2, [pc, #116]	@ (800d014 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cf9e:	4293      	cmp	r3, r2
 800cfa0:	d018      	beq.n	800cfd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	4a1c      	ldr	r2, [pc, #112]	@ (800d018 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cfa8:	4293      	cmp	r3, r2
 800cfaa:	d013      	beq.n	800cfd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	4a1a      	ldr	r2, [pc, #104]	@ (800d01c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cfb2:	4293      	cmp	r3, r2
 800cfb4:	d00e      	beq.n	800cfd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	4a15      	ldr	r2, [pc, #84]	@ (800d010 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cfbc:	4293      	cmp	r3, r2
 800cfbe:	d009      	beq.n	800cfd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	4a16      	ldr	r2, [pc, #88]	@ (800d020 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cfc6:	4293      	cmp	r3, r2
 800cfc8:	d004      	beq.n	800cfd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	4a15      	ldr	r2, [pc, #84]	@ (800d024 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cfd0:	4293      	cmp	r3, r2
 800cfd2:	d10c      	bne.n	800cfee <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cfda:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cfdc:	683b      	ldr	r3, [r7, #0]
 800cfde:	689b      	ldr	r3, [r3, #8]
 800cfe0:	68ba      	ldr	r2, [r7, #8]
 800cfe2:	4313      	orrs	r3, r2
 800cfe4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	68ba      	ldr	r2, [r7, #8]
 800cfec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2201      	movs	r2, #1
 800cff2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	2200      	movs	r2, #0
 800cffa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800cffe:	2300      	movs	r3, #0
}
 800d000:	4618      	mov	r0, r3
 800d002:	3714      	adds	r7, #20
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr
 800d00c:	40010000 	.word	0x40010000
 800d010:	40010400 	.word	0x40010400
 800d014:	40000400 	.word	0x40000400
 800d018:	40000800 	.word	0x40000800
 800d01c:	40000c00 	.word	0x40000c00
 800d020:	40001800 	.word	0x40001800
 800d024:	40014000 	.word	0x40014000

0800d028 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800d028:	b480      	push	{r7}
 800d02a:	b083      	sub	sp, #12
 800d02c:	af00      	add	r7, sp, #0
 800d02e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800d030:	bf00      	nop
 800d032:	370c      	adds	r7, #12
 800d034:	46bd      	mov	sp, r7
 800d036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d03a:	4770      	bx	lr

0800d03c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800d03c:	b480      	push	{r7}
 800d03e:	b083      	sub	sp, #12
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800d044:	bf00      	nop
 800d046:	370c      	adds	r7, #12
 800d048:	46bd      	mov	sp, r7
 800d04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04e:	4770      	bx	lr

0800d050 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800d050:	b480      	push	{r7}
 800d052:	b083      	sub	sp, #12
 800d054:	af00      	add	r7, sp, #0
 800d056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800d058:	bf00      	nop
 800d05a:	370c      	adds	r7, #12
 800d05c:	46bd      	mov	sp, r7
 800d05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d062:	4770      	bx	lr

0800d064 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b082      	sub	sp, #8
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d101      	bne.n	800d076 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d072:	2301      	movs	r3, #1
 800d074:	e042      	b.n	800d0fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d106      	bne.n	800d08e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2200      	movs	r2, #0
 800d084:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f000 f83b 	bl	800d104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2224      	movs	r2, #36	@ 0x24
 800d092:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	681a      	ldr	r2, [r3, #0]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	f022 0201 	bic.w	r2, r2, #1
 800d0a4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d002      	beq.n	800d0b4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f000 fe28 	bl	800dd04 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f000 f8bd 	bl	800d234 <UART_SetConfig>
 800d0ba:	4603      	mov	r3, r0
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d101      	bne.n	800d0c4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800d0c0:	2301      	movs	r3, #1
 800d0c2:	e01b      	b.n	800d0fc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	685a      	ldr	r2, [r3, #4]
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	681b      	ldr	r3, [r3, #0]
 800d0ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d0d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	689a      	ldr	r2, [r3, #8]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d0e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	681a      	ldr	r2, [r3, #0]
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	f042 0201 	orr.w	r2, r2, #1
 800d0f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f000 fea7 	bl	800de48 <UART_CheckIdleState>
 800d0fa:	4603      	mov	r3, r0
}
 800d0fc:	4618      	mov	r0, r3
 800d0fe:	3708      	adds	r7, #8
 800d100:	46bd      	mov	sp, r7
 800d102:	bd80      	pop	{r7, pc}

0800d104 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800d104:	b480      	push	{r7}
 800d106:	b083      	sub	sp, #12
 800d108:	af00      	add	r7, sp, #0
 800d10a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800d10c:	bf00      	nop
 800d10e:	370c      	adds	r7, #12
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr

0800d118 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b08a      	sub	sp, #40	@ 0x28
 800d11c:	af02      	add	r7, sp, #8
 800d11e:	60f8      	str	r0, [r7, #12]
 800d120:	60b9      	str	r1, [r7, #8]
 800d122:	603b      	str	r3, [r7, #0]
 800d124:	4613      	mov	r3, r2
 800d126:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800d12e:	2b20      	cmp	r3, #32
 800d130:	d17b      	bne.n	800d22a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	2b00      	cmp	r3, #0
 800d136:	d002      	beq.n	800d13e <HAL_UART_Transmit+0x26>
 800d138:	88fb      	ldrh	r3, [r7, #6]
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d101      	bne.n	800d142 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800d13e:	2301      	movs	r3, #1
 800d140:	e074      	b.n	800d22c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2200      	movs	r2, #0
 800d146:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d14a:	68fb      	ldr	r3, [r7, #12]
 800d14c:	2221      	movs	r2, #33	@ 0x21
 800d14e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d152:	f7f5 fbe9 	bl	8002928 <HAL_GetTick>
 800d156:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	88fa      	ldrh	r2, [r7, #6]
 800d15c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	88fa      	ldrh	r2, [r7, #6]
 800d164:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d168:	68fb      	ldr	r3, [r7, #12]
 800d16a:	689b      	ldr	r3, [r3, #8]
 800d16c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d170:	d108      	bne.n	800d184 <HAL_UART_Transmit+0x6c>
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	691b      	ldr	r3, [r3, #16]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d104      	bne.n	800d184 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800d17a:	2300      	movs	r3, #0
 800d17c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d17e:	68bb      	ldr	r3, [r7, #8]
 800d180:	61bb      	str	r3, [r7, #24]
 800d182:	e003      	b.n	800d18c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800d188:	2300      	movs	r3, #0
 800d18a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800d18c:	e030      	b.n	800d1f0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	9300      	str	r3, [sp, #0]
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	2200      	movs	r2, #0
 800d196:	2180      	movs	r1, #128	@ 0x80
 800d198:	68f8      	ldr	r0, [r7, #12]
 800d19a:	f000 feff 	bl	800df9c <UART_WaitOnFlagUntilTimeout>
 800d19e:	4603      	mov	r3, r0
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d005      	beq.n	800d1b0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	2220      	movs	r2, #32
 800d1a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800d1ac:	2303      	movs	r3, #3
 800d1ae:	e03d      	b.n	800d22c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800d1b0:	69fb      	ldr	r3, [r7, #28]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d10b      	bne.n	800d1ce <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d1b6:	69bb      	ldr	r3, [r7, #24]
 800d1b8:	881b      	ldrh	r3, [r3, #0]
 800d1ba:	461a      	mov	r2, r3
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d1c4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d1c6:	69bb      	ldr	r3, [r7, #24]
 800d1c8:	3302      	adds	r3, #2
 800d1ca:	61bb      	str	r3, [r7, #24]
 800d1cc:	e007      	b.n	800d1de <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d1ce:	69fb      	ldr	r3, [r7, #28]
 800d1d0:	781a      	ldrb	r2, [r3, #0]
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	681b      	ldr	r3, [r3, #0]
 800d1d6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d1d8:	69fb      	ldr	r3, [r7, #28]
 800d1da:	3301      	adds	r3, #1
 800d1dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d1e4:	b29b      	uxth	r3, r3
 800d1e6:	3b01      	subs	r3, #1
 800d1e8:	b29a      	uxth	r2, r3
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800d1f6:	b29b      	uxth	r3, r3
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d1c8      	bne.n	800d18e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d1fc:	683b      	ldr	r3, [r7, #0]
 800d1fe:	9300      	str	r3, [sp, #0]
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	2200      	movs	r2, #0
 800d204:	2140      	movs	r1, #64	@ 0x40
 800d206:	68f8      	ldr	r0, [r7, #12]
 800d208:	f000 fec8 	bl	800df9c <UART_WaitOnFlagUntilTimeout>
 800d20c:	4603      	mov	r3, r0
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d005      	beq.n	800d21e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2220      	movs	r2, #32
 800d216:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800d21a:	2303      	movs	r3, #3
 800d21c:	e006      	b.n	800d22c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	2220      	movs	r2, #32
 800d222:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800d226:	2300      	movs	r3, #0
 800d228:	e000      	b.n	800d22c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800d22a:	2302      	movs	r3, #2
  }
}
 800d22c:	4618      	mov	r0, r3
 800d22e:	3720      	adds	r7, #32
 800d230:	46bd      	mov	sp, r7
 800d232:	bd80      	pop	{r7, pc}

0800d234 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d238:	b092      	sub	sp, #72	@ 0x48
 800d23a:	af00      	add	r7, sp, #0
 800d23c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d23e:	2300      	movs	r3, #0
 800d240:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	689a      	ldr	r2, [r3, #8]
 800d248:	697b      	ldr	r3, [r7, #20]
 800d24a:	691b      	ldr	r3, [r3, #16]
 800d24c:	431a      	orrs	r2, r3
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	695b      	ldr	r3, [r3, #20]
 800d252:	431a      	orrs	r2, r3
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	69db      	ldr	r3, [r3, #28]
 800d258:	4313      	orrs	r3, r2
 800d25a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d25c:	697b      	ldr	r3, [r7, #20]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	681a      	ldr	r2, [r3, #0]
 800d262:	4bbe      	ldr	r3, [pc, #760]	@ (800d55c <UART_SetConfig+0x328>)
 800d264:	4013      	ands	r3, r2
 800d266:	697a      	ldr	r2, [r7, #20]
 800d268:	6812      	ldr	r2, [r2, #0]
 800d26a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d26c:	430b      	orrs	r3, r1
 800d26e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d270:	697b      	ldr	r3, [r7, #20]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	685b      	ldr	r3, [r3, #4]
 800d276:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	68da      	ldr	r2, [r3, #12]
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	430a      	orrs	r2, r1
 800d284:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d286:	697b      	ldr	r3, [r7, #20]
 800d288:	699b      	ldr	r3, [r3, #24]
 800d28a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	4ab3      	ldr	r2, [pc, #716]	@ (800d560 <UART_SetConfig+0x32c>)
 800d292:	4293      	cmp	r3, r2
 800d294:	d004      	beq.n	800d2a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	6a1b      	ldr	r3, [r3, #32]
 800d29a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d29c:	4313      	orrs	r3, r2
 800d29e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d2a0:	697b      	ldr	r3, [r7, #20]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	689a      	ldr	r2, [r3, #8]
 800d2a6:	4baf      	ldr	r3, [pc, #700]	@ (800d564 <UART_SetConfig+0x330>)
 800d2a8:	4013      	ands	r3, r2
 800d2aa:	697a      	ldr	r2, [r7, #20]
 800d2ac:	6812      	ldr	r2, [r2, #0]
 800d2ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800d2b0:	430b      	orrs	r3, r1
 800d2b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d2b4:	697b      	ldr	r3, [r7, #20]
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2ba:	f023 010f 	bic.w	r1, r3, #15
 800d2be:	697b      	ldr	r3, [r7, #20]
 800d2c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	430a      	orrs	r2, r1
 800d2c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	4aa6      	ldr	r2, [pc, #664]	@ (800d568 <UART_SetConfig+0x334>)
 800d2d0:	4293      	cmp	r3, r2
 800d2d2:	d177      	bne.n	800d3c4 <UART_SetConfig+0x190>
 800d2d4:	4ba5      	ldr	r3, [pc, #660]	@ (800d56c <UART_SetConfig+0x338>)
 800d2d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d2d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d2dc:	2b28      	cmp	r3, #40	@ 0x28
 800d2de:	d86d      	bhi.n	800d3bc <UART_SetConfig+0x188>
 800d2e0:	a201      	add	r2, pc, #4	@ (adr r2, 800d2e8 <UART_SetConfig+0xb4>)
 800d2e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2e6:	bf00      	nop
 800d2e8:	0800d38d 	.word	0x0800d38d
 800d2ec:	0800d3bd 	.word	0x0800d3bd
 800d2f0:	0800d3bd 	.word	0x0800d3bd
 800d2f4:	0800d3bd 	.word	0x0800d3bd
 800d2f8:	0800d3bd 	.word	0x0800d3bd
 800d2fc:	0800d3bd 	.word	0x0800d3bd
 800d300:	0800d3bd 	.word	0x0800d3bd
 800d304:	0800d3bd 	.word	0x0800d3bd
 800d308:	0800d395 	.word	0x0800d395
 800d30c:	0800d3bd 	.word	0x0800d3bd
 800d310:	0800d3bd 	.word	0x0800d3bd
 800d314:	0800d3bd 	.word	0x0800d3bd
 800d318:	0800d3bd 	.word	0x0800d3bd
 800d31c:	0800d3bd 	.word	0x0800d3bd
 800d320:	0800d3bd 	.word	0x0800d3bd
 800d324:	0800d3bd 	.word	0x0800d3bd
 800d328:	0800d39d 	.word	0x0800d39d
 800d32c:	0800d3bd 	.word	0x0800d3bd
 800d330:	0800d3bd 	.word	0x0800d3bd
 800d334:	0800d3bd 	.word	0x0800d3bd
 800d338:	0800d3bd 	.word	0x0800d3bd
 800d33c:	0800d3bd 	.word	0x0800d3bd
 800d340:	0800d3bd 	.word	0x0800d3bd
 800d344:	0800d3bd 	.word	0x0800d3bd
 800d348:	0800d3a5 	.word	0x0800d3a5
 800d34c:	0800d3bd 	.word	0x0800d3bd
 800d350:	0800d3bd 	.word	0x0800d3bd
 800d354:	0800d3bd 	.word	0x0800d3bd
 800d358:	0800d3bd 	.word	0x0800d3bd
 800d35c:	0800d3bd 	.word	0x0800d3bd
 800d360:	0800d3bd 	.word	0x0800d3bd
 800d364:	0800d3bd 	.word	0x0800d3bd
 800d368:	0800d3ad 	.word	0x0800d3ad
 800d36c:	0800d3bd 	.word	0x0800d3bd
 800d370:	0800d3bd 	.word	0x0800d3bd
 800d374:	0800d3bd 	.word	0x0800d3bd
 800d378:	0800d3bd 	.word	0x0800d3bd
 800d37c:	0800d3bd 	.word	0x0800d3bd
 800d380:	0800d3bd 	.word	0x0800d3bd
 800d384:	0800d3bd 	.word	0x0800d3bd
 800d388:	0800d3b5 	.word	0x0800d3b5
 800d38c:	2301      	movs	r3, #1
 800d38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d392:	e222      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d394:	2304      	movs	r3, #4
 800d396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d39a:	e21e      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d39c:	2308      	movs	r3, #8
 800d39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3a2:	e21a      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d3a4:	2310      	movs	r3, #16
 800d3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3aa:	e216      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d3ac:	2320      	movs	r3, #32
 800d3ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3b2:	e212      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d3b4:	2340      	movs	r3, #64	@ 0x40
 800d3b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3ba:	e20e      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d3bc:	2380      	movs	r3, #128	@ 0x80
 800d3be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3c2:	e20a      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	4a69      	ldr	r2, [pc, #420]	@ (800d570 <UART_SetConfig+0x33c>)
 800d3ca:	4293      	cmp	r3, r2
 800d3cc:	d130      	bne.n	800d430 <UART_SetConfig+0x1fc>
 800d3ce:	4b67      	ldr	r3, [pc, #412]	@ (800d56c <UART_SetConfig+0x338>)
 800d3d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d3d2:	f003 0307 	and.w	r3, r3, #7
 800d3d6:	2b05      	cmp	r3, #5
 800d3d8:	d826      	bhi.n	800d428 <UART_SetConfig+0x1f4>
 800d3da:	a201      	add	r2, pc, #4	@ (adr r2, 800d3e0 <UART_SetConfig+0x1ac>)
 800d3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3e0:	0800d3f9 	.word	0x0800d3f9
 800d3e4:	0800d401 	.word	0x0800d401
 800d3e8:	0800d409 	.word	0x0800d409
 800d3ec:	0800d411 	.word	0x0800d411
 800d3f0:	0800d419 	.word	0x0800d419
 800d3f4:	0800d421 	.word	0x0800d421
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d3fe:	e1ec      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d400:	2304      	movs	r3, #4
 800d402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d406:	e1e8      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d408:	2308      	movs	r3, #8
 800d40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d40e:	e1e4      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d410:	2310      	movs	r3, #16
 800d412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d416:	e1e0      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d418:	2320      	movs	r3, #32
 800d41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d41e:	e1dc      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d420:	2340      	movs	r3, #64	@ 0x40
 800d422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d426:	e1d8      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d428:	2380      	movs	r3, #128	@ 0x80
 800d42a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d42e:	e1d4      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d430:	697b      	ldr	r3, [r7, #20]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	4a4f      	ldr	r2, [pc, #316]	@ (800d574 <UART_SetConfig+0x340>)
 800d436:	4293      	cmp	r3, r2
 800d438:	d130      	bne.n	800d49c <UART_SetConfig+0x268>
 800d43a:	4b4c      	ldr	r3, [pc, #304]	@ (800d56c <UART_SetConfig+0x338>)
 800d43c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d43e:	f003 0307 	and.w	r3, r3, #7
 800d442:	2b05      	cmp	r3, #5
 800d444:	d826      	bhi.n	800d494 <UART_SetConfig+0x260>
 800d446:	a201      	add	r2, pc, #4	@ (adr r2, 800d44c <UART_SetConfig+0x218>)
 800d448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d44c:	0800d465 	.word	0x0800d465
 800d450:	0800d46d 	.word	0x0800d46d
 800d454:	0800d475 	.word	0x0800d475
 800d458:	0800d47d 	.word	0x0800d47d
 800d45c:	0800d485 	.word	0x0800d485
 800d460:	0800d48d 	.word	0x0800d48d
 800d464:	2300      	movs	r3, #0
 800d466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d46a:	e1b6      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d46c:	2304      	movs	r3, #4
 800d46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d472:	e1b2      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d474:	2308      	movs	r3, #8
 800d476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d47a:	e1ae      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d47c:	2310      	movs	r3, #16
 800d47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d482:	e1aa      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d484:	2320      	movs	r3, #32
 800d486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d48a:	e1a6      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d48c:	2340      	movs	r3, #64	@ 0x40
 800d48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d492:	e1a2      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d494:	2380      	movs	r3, #128	@ 0x80
 800d496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d49a:	e19e      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	4a35      	ldr	r2, [pc, #212]	@ (800d578 <UART_SetConfig+0x344>)
 800d4a2:	4293      	cmp	r3, r2
 800d4a4:	d130      	bne.n	800d508 <UART_SetConfig+0x2d4>
 800d4a6:	4b31      	ldr	r3, [pc, #196]	@ (800d56c <UART_SetConfig+0x338>)
 800d4a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d4aa:	f003 0307 	and.w	r3, r3, #7
 800d4ae:	2b05      	cmp	r3, #5
 800d4b0:	d826      	bhi.n	800d500 <UART_SetConfig+0x2cc>
 800d4b2:	a201      	add	r2, pc, #4	@ (adr r2, 800d4b8 <UART_SetConfig+0x284>)
 800d4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4b8:	0800d4d1 	.word	0x0800d4d1
 800d4bc:	0800d4d9 	.word	0x0800d4d9
 800d4c0:	0800d4e1 	.word	0x0800d4e1
 800d4c4:	0800d4e9 	.word	0x0800d4e9
 800d4c8:	0800d4f1 	.word	0x0800d4f1
 800d4cc:	0800d4f9 	.word	0x0800d4f9
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4d6:	e180      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d4d8:	2304      	movs	r3, #4
 800d4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4de:	e17c      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d4e0:	2308      	movs	r3, #8
 800d4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4e6:	e178      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d4e8:	2310      	movs	r3, #16
 800d4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4ee:	e174      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d4f0:	2320      	movs	r3, #32
 800d4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4f6:	e170      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d4f8:	2340      	movs	r3, #64	@ 0x40
 800d4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d4fe:	e16c      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d500:	2380      	movs	r3, #128	@ 0x80
 800d502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d506:	e168      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d508:	697b      	ldr	r3, [r7, #20]
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	4a1b      	ldr	r2, [pc, #108]	@ (800d57c <UART_SetConfig+0x348>)
 800d50e:	4293      	cmp	r3, r2
 800d510:	d142      	bne.n	800d598 <UART_SetConfig+0x364>
 800d512:	4b16      	ldr	r3, [pc, #88]	@ (800d56c <UART_SetConfig+0x338>)
 800d514:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d516:	f003 0307 	and.w	r3, r3, #7
 800d51a:	2b05      	cmp	r3, #5
 800d51c:	d838      	bhi.n	800d590 <UART_SetConfig+0x35c>
 800d51e:	a201      	add	r2, pc, #4	@ (adr r2, 800d524 <UART_SetConfig+0x2f0>)
 800d520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d524:	0800d53d 	.word	0x0800d53d
 800d528:	0800d545 	.word	0x0800d545
 800d52c:	0800d54d 	.word	0x0800d54d
 800d530:	0800d555 	.word	0x0800d555
 800d534:	0800d581 	.word	0x0800d581
 800d538:	0800d589 	.word	0x0800d589
 800d53c:	2300      	movs	r3, #0
 800d53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d542:	e14a      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d544:	2304      	movs	r3, #4
 800d546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d54a:	e146      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d54c:	2308      	movs	r3, #8
 800d54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d552:	e142      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d554:	2310      	movs	r3, #16
 800d556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d55a:	e13e      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d55c:	cfff69f3 	.word	0xcfff69f3
 800d560:	58000c00 	.word	0x58000c00
 800d564:	11fff4ff 	.word	0x11fff4ff
 800d568:	40011000 	.word	0x40011000
 800d56c:	58024400 	.word	0x58024400
 800d570:	40004400 	.word	0x40004400
 800d574:	40004800 	.word	0x40004800
 800d578:	40004c00 	.word	0x40004c00
 800d57c:	40005000 	.word	0x40005000
 800d580:	2320      	movs	r3, #32
 800d582:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d586:	e128      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d588:	2340      	movs	r3, #64	@ 0x40
 800d58a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d58e:	e124      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d590:	2380      	movs	r3, #128	@ 0x80
 800d592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d596:	e120      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	4acb      	ldr	r2, [pc, #812]	@ (800d8cc <UART_SetConfig+0x698>)
 800d59e:	4293      	cmp	r3, r2
 800d5a0:	d176      	bne.n	800d690 <UART_SetConfig+0x45c>
 800d5a2:	4bcb      	ldr	r3, [pc, #812]	@ (800d8d0 <UART_SetConfig+0x69c>)
 800d5a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d5a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d5aa:	2b28      	cmp	r3, #40	@ 0x28
 800d5ac:	d86c      	bhi.n	800d688 <UART_SetConfig+0x454>
 800d5ae:	a201      	add	r2, pc, #4	@ (adr r2, 800d5b4 <UART_SetConfig+0x380>)
 800d5b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5b4:	0800d659 	.word	0x0800d659
 800d5b8:	0800d689 	.word	0x0800d689
 800d5bc:	0800d689 	.word	0x0800d689
 800d5c0:	0800d689 	.word	0x0800d689
 800d5c4:	0800d689 	.word	0x0800d689
 800d5c8:	0800d689 	.word	0x0800d689
 800d5cc:	0800d689 	.word	0x0800d689
 800d5d0:	0800d689 	.word	0x0800d689
 800d5d4:	0800d661 	.word	0x0800d661
 800d5d8:	0800d689 	.word	0x0800d689
 800d5dc:	0800d689 	.word	0x0800d689
 800d5e0:	0800d689 	.word	0x0800d689
 800d5e4:	0800d689 	.word	0x0800d689
 800d5e8:	0800d689 	.word	0x0800d689
 800d5ec:	0800d689 	.word	0x0800d689
 800d5f0:	0800d689 	.word	0x0800d689
 800d5f4:	0800d669 	.word	0x0800d669
 800d5f8:	0800d689 	.word	0x0800d689
 800d5fc:	0800d689 	.word	0x0800d689
 800d600:	0800d689 	.word	0x0800d689
 800d604:	0800d689 	.word	0x0800d689
 800d608:	0800d689 	.word	0x0800d689
 800d60c:	0800d689 	.word	0x0800d689
 800d610:	0800d689 	.word	0x0800d689
 800d614:	0800d671 	.word	0x0800d671
 800d618:	0800d689 	.word	0x0800d689
 800d61c:	0800d689 	.word	0x0800d689
 800d620:	0800d689 	.word	0x0800d689
 800d624:	0800d689 	.word	0x0800d689
 800d628:	0800d689 	.word	0x0800d689
 800d62c:	0800d689 	.word	0x0800d689
 800d630:	0800d689 	.word	0x0800d689
 800d634:	0800d679 	.word	0x0800d679
 800d638:	0800d689 	.word	0x0800d689
 800d63c:	0800d689 	.word	0x0800d689
 800d640:	0800d689 	.word	0x0800d689
 800d644:	0800d689 	.word	0x0800d689
 800d648:	0800d689 	.word	0x0800d689
 800d64c:	0800d689 	.word	0x0800d689
 800d650:	0800d689 	.word	0x0800d689
 800d654:	0800d681 	.word	0x0800d681
 800d658:	2301      	movs	r3, #1
 800d65a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d65e:	e0bc      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d660:	2304      	movs	r3, #4
 800d662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d666:	e0b8      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d668:	2308      	movs	r3, #8
 800d66a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d66e:	e0b4      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d670:	2310      	movs	r3, #16
 800d672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d676:	e0b0      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d678:	2320      	movs	r3, #32
 800d67a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d67e:	e0ac      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d680:	2340      	movs	r3, #64	@ 0x40
 800d682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d686:	e0a8      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d688:	2380      	movs	r3, #128	@ 0x80
 800d68a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d68e:	e0a4      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	4a8f      	ldr	r2, [pc, #572]	@ (800d8d4 <UART_SetConfig+0x6a0>)
 800d696:	4293      	cmp	r3, r2
 800d698:	d130      	bne.n	800d6fc <UART_SetConfig+0x4c8>
 800d69a:	4b8d      	ldr	r3, [pc, #564]	@ (800d8d0 <UART_SetConfig+0x69c>)
 800d69c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d69e:	f003 0307 	and.w	r3, r3, #7
 800d6a2:	2b05      	cmp	r3, #5
 800d6a4:	d826      	bhi.n	800d6f4 <UART_SetConfig+0x4c0>
 800d6a6:	a201      	add	r2, pc, #4	@ (adr r2, 800d6ac <UART_SetConfig+0x478>)
 800d6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6ac:	0800d6c5 	.word	0x0800d6c5
 800d6b0:	0800d6cd 	.word	0x0800d6cd
 800d6b4:	0800d6d5 	.word	0x0800d6d5
 800d6b8:	0800d6dd 	.word	0x0800d6dd
 800d6bc:	0800d6e5 	.word	0x0800d6e5
 800d6c0:	0800d6ed 	.word	0x0800d6ed
 800d6c4:	2300      	movs	r3, #0
 800d6c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6ca:	e086      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d6cc:	2304      	movs	r3, #4
 800d6ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6d2:	e082      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d6d4:	2308      	movs	r3, #8
 800d6d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6da:	e07e      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d6dc:	2310      	movs	r3, #16
 800d6de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6e2:	e07a      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d6e4:	2320      	movs	r3, #32
 800d6e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6ea:	e076      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d6ec:	2340      	movs	r3, #64	@ 0x40
 800d6ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6f2:	e072      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d6f4:	2380      	movs	r3, #128	@ 0x80
 800d6f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d6fa:	e06e      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d6fc:	697b      	ldr	r3, [r7, #20]
 800d6fe:	681b      	ldr	r3, [r3, #0]
 800d700:	4a75      	ldr	r2, [pc, #468]	@ (800d8d8 <UART_SetConfig+0x6a4>)
 800d702:	4293      	cmp	r3, r2
 800d704:	d130      	bne.n	800d768 <UART_SetConfig+0x534>
 800d706:	4b72      	ldr	r3, [pc, #456]	@ (800d8d0 <UART_SetConfig+0x69c>)
 800d708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d70a:	f003 0307 	and.w	r3, r3, #7
 800d70e:	2b05      	cmp	r3, #5
 800d710:	d826      	bhi.n	800d760 <UART_SetConfig+0x52c>
 800d712:	a201      	add	r2, pc, #4	@ (adr r2, 800d718 <UART_SetConfig+0x4e4>)
 800d714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d718:	0800d731 	.word	0x0800d731
 800d71c:	0800d739 	.word	0x0800d739
 800d720:	0800d741 	.word	0x0800d741
 800d724:	0800d749 	.word	0x0800d749
 800d728:	0800d751 	.word	0x0800d751
 800d72c:	0800d759 	.word	0x0800d759
 800d730:	2300      	movs	r3, #0
 800d732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d736:	e050      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d738:	2304      	movs	r3, #4
 800d73a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d73e:	e04c      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d740:	2308      	movs	r3, #8
 800d742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d746:	e048      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d748:	2310      	movs	r3, #16
 800d74a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d74e:	e044      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d750:	2320      	movs	r3, #32
 800d752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d756:	e040      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d758:	2340      	movs	r3, #64	@ 0x40
 800d75a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d75e:	e03c      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d760:	2380      	movs	r3, #128	@ 0x80
 800d762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d766:	e038      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d768:	697b      	ldr	r3, [r7, #20]
 800d76a:	681b      	ldr	r3, [r3, #0]
 800d76c:	4a5b      	ldr	r2, [pc, #364]	@ (800d8dc <UART_SetConfig+0x6a8>)
 800d76e:	4293      	cmp	r3, r2
 800d770:	d130      	bne.n	800d7d4 <UART_SetConfig+0x5a0>
 800d772:	4b57      	ldr	r3, [pc, #348]	@ (800d8d0 <UART_SetConfig+0x69c>)
 800d774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d776:	f003 0307 	and.w	r3, r3, #7
 800d77a:	2b05      	cmp	r3, #5
 800d77c:	d826      	bhi.n	800d7cc <UART_SetConfig+0x598>
 800d77e:	a201      	add	r2, pc, #4	@ (adr r2, 800d784 <UART_SetConfig+0x550>)
 800d780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d784:	0800d79d 	.word	0x0800d79d
 800d788:	0800d7a5 	.word	0x0800d7a5
 800d78c:	0800d7ad 	.word	0x0800d7ad
 800d790:	0800d7b5 	.word	0x0800d7b5
 800d794:	0800d7bd 	.word	0x0800d7bd
 800d798:	0800d7c5 	.word	0x0800d7c5
 800d79c:	2302      	movs	r3, #2
 800d79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7a2:	e01a      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d7a4:	2304      	movs	r3, #4
 800d7a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7aa:	e016      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d7ac:	2308      	movs	r3, #8
 800d7ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7b2:	e012      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d7b4:	2310      	movs	r3, #16
 800d7b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ba:	e00e      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d7bc:	2320      	movs	r3, #32
 800d7be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7c2:	e00a      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d7c4:	2340      	movs	r3, #64	@ 0x40
 800d7c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7ca:	e006      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d7cc:	2380      	movs	r3, #128	@ 0x80
 800d7ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800d7d2:	e002      	b.n	800d7da <UART_SetConfig+0x5a6>
 800d7d4:	2380      	movs	r3, #128	@ 0x80
 800d7d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d7da:	697b      	ldr	r3, [r7, #20]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	4a3f      	ldr	r2, [pc, #252]	@ (800d8dc <UART_SetConfig+0x6a8>)
 800d7e0:	4293      	cmp	r3, r2
 800d7e2:	f040 80f8 	bne.w	800d9d6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d7e6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d7ea:	2b20      	cmp	r3, #32
 800d7ec:	dc46      	bgt.n	800d87c <UART_SetConfig+0x648>
 800d7ee:	2b02      	cmp	r3, #2
 800d7f0:	f2c0 8082 	blt.w	800d8f8 <UART_SetConfig+0x6c4>
 800d7f4:	3b02      	subs	r3, #2
 800d7f6:	2b1e      	cmp	r3, #30
 800d7f8:	d87e      	bhi.n	800d8f8 <UART_SetConfig+0x6c4>
 800d7fa:	a201      	add	r2, pc, #4	@ (adr r2, 800d800 <UART_SetConfig+0x5cc>)
 800d7fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d800:	0800d883 	.word	0x0800d883
 800d804:	0800d8f9 	.word	0x0800d8f9
 800d808:	0800d88b 	.word	0x0800d88b
 800d80c:	0800d8f9 	.word	0x0800d8f9
 800d810:	0800d8f9 	.word	0x0800d8f9
 800d814:	0800d8f9 	.word	0x0800d8f9
 800d818:	0800d89b 	.word	0x0800d89b
 800d81c:	0800d8f9 	.word	0x0800d8f9
 800d820:	0800d8f9 	.word	0x0800d8f9
 800d824:	0800d8f9 	.word	0x0800d8f9
 800d828:	0800d8f9 	.word	0x0800d8f9
 800d82c:	0800d8f9 	.word	0x0800d8f9
 800d830:	0800d8f9 	.word	0x0800d8f9
 800d834:	0800d8f9 	.word	0x0800d8f9
 800d838:	0800d8ab 	.word	0x0800d8ab
 800d83c:	0800d8f9 	.word	0x0800d8f9
 800d840:	0800d8f9 	.word	0x0800d8f9
 800d844:	0800d8f9 	.word	0x0800d8f9
 800d848:	0800d8f9 	.word	0x0800d8f9
 800d84c:	0800d8f9 	.word	0x0800d8f9
 800d850:	0800d8f9 	.word	0x0800d8f9
 800d854:	0800d8f9 	.word	0x0800d8f9
 800d858:	0800d8f9 	.word	0x0800d8f9
 800d85c:	0800d8f9 	.word	0x0800d8f9
 800d860:	0800d8f9 	.word	0x0800d8f9
 800d864:	0800d8f9 	.word	0x0800d8f9
 800d868:	0800d8f9 	.word	0x0800d8f9
 800d86c:	0800d8f9 	.word	0x0800d8f9
 800d870:	0800d8f9 	.word	0x0800d8f9
 800d874:	0800d8f9 	.word	0x0800d8f9
 800d878:	0800d8eb 	.word	0x0800d8eb
 800d87c:	2b40      	cmp	r3, #64	@ 0x40
 800d87e:	d037      	beq.n	800d8f0 <UART_SetConfig+0x6bc>
 800d880:	e03a      	b.n	800d8f8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d882:	f7fd fac9 	bl	800ae18 <HAL_RCCEx_GetD3PCLK1Freq>
 800d886:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800d888:	e03c      	b.n	800d904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d88a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d88e:	4618      	mov	r0, r3
 800d890:	f7fd fad8 	bl	800ae44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d898:	e034      	b.n	800d904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d89a:	f107 0318 	add.w	r3, r7, #24
 800d89e:	4618      	mov	r0, r3
 800d8a0:	f7fd fc24 	bl	800b0ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d8a4:	69fb      	ldr	r3, [r7, #28]
 800d8a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d8a8:	e02c      	b.n	800d904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d8aa:	4b09      	ldr	r3, [pc, #36]	@ (800d8d0 <UART_SetConfig+0x69c>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	f003 0320 	and.w	r3, r3, #32
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d016      	beq.n	800d8e4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d8b6:	4b06      	ldr	r3, [pc, #24]	@ (800d8d0 <UART_SetConfig+0x69c>)
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	08db      	lsrs	r3, r3, #3
 800d8bc:	f003 0303 	and.w	r3, r3, #3
 800d8c0:	4a07      	ldr	r2, [pc, #28]	@ (800d8e0 <UART_SetConfig+0x6ac>)
 800d8c2:	fa22 f303 	lsr.w	r3, r2, r3
 800d8c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d8c8:	e01c      	b.n	800d904 <UART_SetConfig+0x6d0>
 800d8ca:	bf00      	nop
 800d8cc:	40011400 	.word	0x40011400
 800d8d0:	58024400 	.word	0x58024400
 800d8d4:	40007800 	.word	0x40007800
 800d8d8:	40007c00 	.word	0x40007c00
 800d8dc:	58000c00 	.word	0x58000c00
 800d8e0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d8e4:	4b9d      	ldr	r3, [pc, #628]	@ (800db5c <UART_SetConfig+0x928>)
 800d8e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d8e8:	e00c      	b.n	800d904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d8ea:	4b9d      	ldr	r3, [pc, #628]	@ (800db60 <UART_SetConfig+0x92c>)
 800d8ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d8ee:	e009      	b.n	800d904 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d8f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800d8f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800d8f6:	e005      	b.n	800d904 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800d8fc:	2301      	movs	r3, #1
 800d8fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800d902:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d906:	2b00      	cmp	r3, #0
 800d908:	f000 81de 	beq.w	800dcc8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d910:	4a94      	ldr	r2, [pc, #592]	@ (800db64 <UART_SetConfig+0x930>)
 800d912:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d916:	461a      	mov	r2, r3
 800d918:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d91a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d91e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	685a      	ldr	r2, [r3, #4]
 800d924:	4613      	mov	r3, r2
 800d926:	005b      	lsls	r3, r3, #1
 800d928:	4413      	add	r3, r2
 800d92a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d92c:	429a      	cmp	r2, r3
 800d92e:	d305      	bcc.n	800d93c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	685b      	ldr	r3, [r3, #4]
 800d934:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d936:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d938:	429a      	cmp	r2, r3
 800d93a:	d903      	bls.n	800d944 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d93c:	2301      	movs	r3, #1
 800d93e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d942:	e1c1      	b.n	800dcc8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d946:	2200      	movs	r2, #0
 800d948:	60bb      	str	r3, [r7, #8]
 800d94a:	60fa      	str	r2, [r7, #12]
 800d94c:	697b      	ldr	r3, [r7, #20]
 800d94e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d950:	4a84      	ldr	r2, [pc, #528]	@ (800db64 <UART_SetConfig+0x930>)
 800d952:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d956:	b29b      	uxth	r3, r3
 800d958:	2200      	movs	r2, #0
 800d95a:	603b      	str	r3, [r7, #0]
 800d95c:	607a      	str	r2, [r7, #4]
 800d95e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d962:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d966:	f7f2 fd13 	bl	8000390 <__aeabi_uldivmod>
 800d96a:	4602      	mov	r2, r0
 800d96c:	460b      	mov	r3, r1
 800d96e:	4610      	mov	r0, r2
 800d970:	4619      	mov	r1, r3
 800d972:	f04f 0200 	mov.w	r2, #0
 800d976:	f04f 0300 	mov.w	r3, #0
 800d97a:	020b      	lsls	r3, r1, #8
 800d97c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d980:	0202      	lsls	r2, r0, #8
 800d982:	6979      	ldr	r1, [r7, #20]
 800d984:	6849      	ldr	r1, [r1, #4]
 800d986:	0849      	lsrs	r1, r1, #1
 800d988:	2000      	movs	r0, #0
 800d98a:	460c      	mov	r4, r1
 800d98c:	4605      	mov	r5, r0
 800d98e:	eb12 0804 	adds.w	r8, r2, r4
 800d992:	eb43 0905 	adc.w	r9, r3, r5
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	685b      	ldr	r3, [r3, #4]
 800d99a:	2200      	movs	r2, #0
 800d99c:	469a      	mov	sl, r3
 800d99e:	4693      	mov	fp, r2
 800d9a0:	4652      	mov	r2, sl
 800d9a2:	465b      	mov	r3, fp
 800d9a4:	4640      	mov	r0, r8
 800d9a6:	4649      	mov	r1, r9
 800d9a8:	f7f2 fcf2 	bl	8000390 <__aeabi_uldivmod>
 800d9ac:	4602      	mov	r2, r0
 800d9ae:	460b      	mov	r3, r1
 800d9b0:	4613      	mov	r3, r2
 800d9b2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d9b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9b6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d9ba:	d308      	bcc.n	800d9ce <UART_SetConfig+0x79a>
 800d9bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d9be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800d9c2:	d204      	bcs.n	800d9ce <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d9ca:	60da      	str	r2, [r3, #12]
 800d9cc:	e17c      	b.n	800dcc8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d9ce:	2301      	movs	r3, #1
 800d9d0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800d9d4:	e178      	b.n	800dcc8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	69db      	ldr	r3, [r3, #28]
 800d9da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800d9de:	f040 80c5 	bne.w	800db6c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d9e2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800d9e6:	2b20      	cmp	r3, #32
 800d9e8:	dc48      	bgt.n	800da7c <UART_SetConfig+0x848>
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	db7b      	blt.n	800dae6 <UART_SetConfig+0x8b2>
 800d9ee:	2b20      	cmp	r3, #32
 800d9f0:	d879      	bhi.n	800dae6 <UART_SetConfig+0x8b2>
 800d9f2:	a201      	add	r2, pc, #4	@ (adr r2, 800d9f8 <UART_SetConfig+0x7c4>)
 800d9f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9f8:	0800da83 	.word	0x0800da83
 800d9fc:	0800da8b 	.word	0x0800da8b
 800da00:	0800dae7 	.word	0x0800dae7
 800da04:	0800dae7 	.word	0x0800dae7
 800da08:	0800da93 	.word	0x0800da93
 800da0c:	0800dae7 	.word	0x0800dae7
 800da10:	0800dae7 	.word	0x0800dae7
 800da14:	0800dae7 	.word	0x0800dae7
 800da18:	0800daa3 	.word	0x0800daa3
 800da1c:	0800dae7 	.word	0x0800dae7
 800da20:	0800dae7 	.word	0x0800dae7
 800da24:	0800dae7 	.word	0x0800dae7
 800da28:	0800dae7 	.word	0x0800dae7
 800da2c:	0800dae7 	.word	0x0800dae7
 800da30:	0800dae7 	.word	0x0800dae7
 800da34:	0800dae7 	.word	0x0800dae7
 800da38:	0800dab3 	.word	0x0800dab3
 800da3c:	0800dae7 	.word	0x0800dae7
 800da40:	0800dae7 	.word	0x0800dae7
 800da44:	0800dae7 	.word	0x0800dae7
 800da48:	0800dae7 	.word	0x0800dae7
 800da4c:	0800dae7 	.word	0x0800dae7
 800da50:	0800dae7 	.word	0x0800dae7
 800da54:	0800dae7 	.word	0x0800dae7
 800da58:	0800dae7 	.word	0x0800dae7
 800da5c:	0800dae7 	.word	0x0800dae7
 800da60:	0800dae7 	.word	0x0800dae7
 800da64:	0800dae7 	.word	0x0800dae7
 800da68:	0800dae7 	.word	0x0800dae7
 800da6c:	0800dae7 	.word	0x0800dae7
 800da70:	0800dae7 	.word	0x0800dae7
 800da74:	0800dae7 	.word	0x0800dae7
 800da78:	0800dad9 	.word	0x0800dad9
 800da7c:	2b40      	cmp	r3, #64	@ 0x40
 800da7e:	d02e      	beq.n	800dade <UART_SetConfig+0x8aa>
 800da80:	e031      	b.n	800dae6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800da82:	f7fb fa13 	bl	8008eac <HAL_RCC_GetPCLK1Freq>
 800da86:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800da88:	e033      	b.n	800daf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800da8a:	f7fb fa25 	bl	8008ed8 <HAL_RCC_GetPCLK2Freq>
 800da8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800da90:	e02f      	b.n	800daf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800da92:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800da96:	4618      	mov	r0, r3
 800da98:	f7fd f9d4 	bl	800ae44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800da9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800daa0:	e027      	b.n	800daf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800daa2:	f107 0318 	add.w	r3, r7, #24
 800daa6:	4618      	mov	r0, r3
 800daa8:	f7fd fb20 	bl	800b0ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800daac:	69fb      	ldr	r3, [r7, #28]
 800daae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dab0:	e01f      	b.n	800daf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dab2:	4b2d      	ldr	r3, [pc, #180]	@ (800db68 <UART_SetConfig+0x934>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	f003 0320 	and.w	r3, r3, #32
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d009      	beq.n	800dad2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dabe:	4b2a      	ldr	r3, [pc, #168]	@ (800db68 <UART_SetConfig+0x934>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	08db      	lsrs	r3, r3, #3
 800dac4:	f003 0303 	and.w	r3, r3, #3
 800dac8:	4a24      	ldr	r2, [pc, #144]	@ (800db5c <UART_SetConfig+0x928>)
 800daca:	fa22 f303 	lsr.w	r3, r2, r3
 800dace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dad0:	e00f      	b.n	800daf2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800dad2:	4b22      	ldr	r3, [pc, #136]	@ (800db5c <UART_SetConfig+0x928>)
 800dad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dad6:	e00c      	b.n	800daf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dad8:	4b21      	ldr	r3, [pc, #132]	@ (800db60 <UART_SetConfig+0x92c>)
 800dada:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dadc:	e009      	b.n	800daf2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dade:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dae4:	e005      	b.n	800daf2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800dae6:	2300      	movs	r3, #0
 800dae8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800daea:	2301      	movs	r3, #1
 800daec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800daf0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800daf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	f000 80e7 	beq.w	800dcc8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dafe:	4a19      	ldr	r2, [pc, #100]	@ (800db64 <UART_SetConfig+0x930>)
 800db00:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800db04:	461a      	mov	r2, r3
 800db06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db08:	fbb3 f3f2 	udiv	r3, r3, r2
 800db0c:	005a      	lsls	r2, r3, #1
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	685b      	ldr	r3, [r3, #4]
 800db12:	085b      	lsrs	r3, r3, #1
 800db14:	441a      	add	r2, r3
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	685b      	ldr	r3, [r3, #4]
 800db1a:	fbb2 f3f3 	udiv	r3, r2, r3
 800db1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800db20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db22:	2b0f      	cmp	r3, #15
 800db24:	d916      	bls.n	800db54 <UART_SetConfig+0x920>
 800db26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800db2c:	d212      	bcs.n	800db54 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800db2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db30:	b29b      	uxth	r3, r3
 800db32:	f023 030f 	bic.w	r3, r3, #15
 800db36:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800db38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db3a:	085b      	lsrs	r3, r3, #1
 800db3c:	b29b      	uxth	r3, r3
 800db3e:	f003 0307 	and.w	r3, r3, #7
 800db42:	b29a      	uxth	r2, r3
 800db44:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800db46:	4313      	orrs	r3, r2
 800db48:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800db50:	60da      	str	r2, [r3, #12]
 800db52:	e0b9      	b.n	800dcc8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800db54:	2301      	movs	r3, #1
 800db56:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800db5a:	e0b5      	b.n	800dcc8 <UART_SetConfig+0xa94>
 800db5c:	03d09000 	.word	0x03d09000
 800db60:	003d0900 	.word	0x003d0900
 800db64:	08014aa4 	.word	0x08014aa4
 800db68:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800db6c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800db70:	2b20      	cmp	r3, #32
 800db72:	dc49      	bgt.n	800dc08 <UART_SetConfig+0x9d4>
 800db74:	2b00      	cmp	r3, #0
 800db76:	db7c      	blt.n	800dc72 <UART_SetConfig+0xa3e>
 800db78:	2b20      	cmp	r3, #32
 800db7a:	d87a      	bhi.n	800dc72 <UART_SetConfig+0xa3e>
 800db7c:	a201      	add	r2, pc, #4	@ (adr r2, 800db84 <UART_SetConfig+0x950>)
 800db7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db82:	bf00      	nop
 800db84:	0800dc0f 	.word	0x0800dc0f
 800db88:	0800dc17 	.word	0x0800dc17
 800db8c:	0800dc73 	.word	0x0800dc73
 800db90:	0800dc73 	.word	0x0800dc73
 800db94:	0800dc1f 	.word	0x0800dc1f
 800db98:	0800dc73 	.word	0x0800dc73
 800db9c:	0800dc73 	.word	0x0800dc73
 800dba0:	0800dc73 	.word	0x0800dc73
 800dba4:	0800dc2f 	.word	0x0800dc2f
 800dba8:	0800dc73 	.word	0x0800dc73
 800dbac:	0800dc73 	.word	0x0800dc73
 800dbb0:	0800dc73 	.word	0x0800dc73
 800dbb4:	0800dc73 	.word	0x0800dc73
 800dbb8:	0800dc73 	.word	0x0800dc73
 800dbbc:	0800dc73 	.word	0x0800dc73
 800dbc0:	0800dc73 	.word	0x0800dc73
 800dbc4:	0800dc3f 	.word	0x0800dc3f
 800dbc8:	0800dc73 	.word	0x0800dc73
 800dbcc:	0800dc73 	.word	0x0800dc73
 800dbd0:	0800dc73 	.word	0x0800dc73
 800dbd4:	0800dc73 	.word	0x0800dc73
 800dbd8:	0800dc73 	.word	0x0800dc73
 800dbdc:	0800dc73 	.word	0x0800dc73
 800dbe0:	0800dc73 	.word	0x0800dc73
 800dbe4:	0800dc73 	.word	0x0800dc73
 800dbe8:	0800dc73 	.word	0x0800dc73
 800dbec:	0800dc73 	.word	0x0800dc73
 800dbf0:	0800dc73 	.word	0x0800dc73
 800dbf4:	0800dc73 	.word	0x0800dc73
 800dbf8:	0800dc73 	.word	0x0800dc73
 800dbfc:	0800dc73 	.word	0x0800dc73
 800dc00:	0800dc73 	.word	0x0800dc73
 800dc04:	0800dc65 	.word	0x0800dc65
 800dc08:	2b40      	cmp	r3, #64	@ 0x40
 800dc0a:	d02e      	beq.n	800dc6a <UART_SetConfig+0xa36>
 800dc0c:	e031      	b.n	800dc72 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dc0e:	f7fb f94d 	bl	8008eac <HAL_RCC_GetPCLK1Freq>
 800dc12:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dc14:	e033      	b.n	800dc7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dc16:	f7fb f95f 	bl	8008ed8 <HAL_RCC_GetPCLK2Freq>
 800dc1a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800dc1c:	e02f      	b.n	800dc7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dc1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7fd f90e 	bl	800ae44 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dc28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dc2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc2c:	e027      	b.n	800dc7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dc2e:	f107 0318 	add.w	r3, r7, #24
 800dc32:	4618      	mov	r0, r3
 800dc34:	f7fd fa5a 	bl	800b0ec <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dc38:	69fb      	ldr	r3, [r7, #28]
 800dc3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc3c:	e01f      	b.n	800dc7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc3e:	4b2d      	ldr	r3, [pc, #180]	@ (800dcf4 <UART_SetConfig+0xac0>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	f003 0320 	and.w	r3, r3, #32
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d009      	beq.n	800dc5e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dc4a:	4b2a      	ldr	r3, [pc, #168]	@ (800dcf4 <UART_SetConfig+0xac0>)
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	08db      	lsrs	r3, r3, #3
 800dc50:	f003 0303 	and.w	r3, r3, #3
 800dc54:	4a28      	ldr	r2, [pc, #160]	@ (800dcf8 <UART_SetConfig+0xac4>)
 800dc56:	fa22 f303 	lsr.w	r3, r2, r3
 800dc5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dc5c:	e00f      	b.n	800dc7e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800dc5e:	4b26      	ldr	r3, [pc, #152]	@ (800dcf8 <UART_SetConfig+0xac4>)
 800dc60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc62:	e00c      	b.n	800dc7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dc64:	4b25      	ldr	r3, [pc, #148]	@ (800dcfc <UART_SetConfig+0xac8>)
 800dc66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc68:	e009      	b.n	800dc7e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dc6a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dc6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800dc70:	e005      	b.n	800dc7e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800dc72:	2300      	movs	r3, #0
 800dc74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800dc76:	2301      	movs	r3, #1
 800dc78:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800dc7c:	bf00      	nop
    }

    if (pclk != 0U)
 800dc7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d021      	beq.n	800dcc8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dc84:	697b      	ldr	r3, [r7, #20]
 800dc86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc88:	4a1d      	ldr	r2, [pc, #116]	@ (800dd00 <UART_SetConfig+0xacc>)
 800dc8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc8e:	461a      	mov	r2, r3
 800dc90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc92:	fbb3 f2f2 	udiv	r2, r3, r2
 800dc96:	697b      	ldr	r3, [r7, #20]
 800dc98:	685b      	ldr	r3, [r3, #4]
 800dc9a:	085b      	lsrs	r3, r3, #1
 800dc9c:	441a      	add	r2, r3
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	fbb2 f3f3 	udiv	r3, r2, r3
 800dca6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcaa:	2b0f      	cmp	r3, #15
 800dcac:	d909      	bls.n	800dcc2 <UART_SetConfig+0xa8e>
 800dcae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcb0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dcb4:	d205      	bcs.n	800dcc2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800dcb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcb8:	b29a      	uxth	r2, r3
 800dcba:	697b      	ldr	r3, [r7, #20]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	60da      	str	r2, [r3, #12]
 800dcc0:	e002      	b.n	800dcc8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800dcc2:	2301      	movs	r3, #1
 800dcc4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800dcc8:	697b      	ldr	r3, [r7, #20]
 800dcca:	2201      	movs	r2, #1
 800dccc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800dcd0:	697b      	ldr	r3, [r7, #20]
 800dcd2:	2201      	movs	r2, #1
 800dcd4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800dcd8:	697b      	ldr	r3, [r7, #20]
 800dcda:	2200      	movs	r2, #0
 800dcdc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800dcde:	697b      	ldr	r3, [r7, #20]
 800dce0:	2200      	movs	r2, #0
 800dce2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800dce4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800dce8:	4618      	mov	r0, r3
 800dcea:	3748      	adds	r7, #72	@ 0x48
 800dcec:	46bd      	mov	sp, r7
 800dcee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dcf2:	bf00      	nop
 800dcf4:	58024400 	.word	0x58024400
 800dcf8:	03d09000 	.word	0x03d09000
 800dcfc:	003d0900 	.word	0x003d0900
 800dd00:	08014aa4 	.word	0x08014aa4

0800dd04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dd04:	b480      	push	{r7}
 800dd06:	b083      	sub	sp, #12
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd10:	f003 0308 	and.w	r3, r3, #8
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	d00a      	beq.n	800dd2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	685b      	ldr	r3, [r3, #4]
 800dd1e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	430a      	orrs	r2, r1
 800dd2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd32:	f003 0301 	and.w	r3, r3, #1
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d00a      	beq.n	800dd50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	685b      	ldr	r3, [r3, #4]
 800dd40:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	430a      	orrs	r2, r1
 800dd4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd54:	f003 0302 	and.w	r3, r3, #2
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d00a      	beq.n	800dd72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	681b      	ldr	r3, [r3, #0]
 800dd60:	685b      	ldr	r3, [r3, #4]
 800dd62:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	430a      	orrs	r2, r1
 800dd70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd76:	f003 0304 	and.w	r3, r3, #4
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d00a      	beq.n	800dd94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	685b      	ldr	r3, [r3, #4]
 800dd84:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	430a      	orrs	r2, r1
 800dd92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd98:	f003 0310 	and.w	r3, r3, #16
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d00a      	beq.n	800ddb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	689b      	ldr	r3, [r3, #8]
 800dda6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	681b      	ldr	r3, [r3, #0]
 800ddb2:	430a      	orrs	r2, r1
 800ddb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ddba:	f003 0320 	and.w	r3, r3, #32
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d00a      	beq.n	800ddd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	681b      	ldr	r3, [r3, #0]
 800ddc6:	689b      	ldr	r3, [r3, #8]
 800ddc8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	430a      	orrs	r2, r1
 800ddd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d01a      	beq.n	800de1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	685b      	ldr	r3, [r3, #4]
 800ddea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	430a      	orrs	r2, r1
 800ddf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ddfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800de02:	d10a      	bne.n	800de1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	685b      	ldr	r3, [r3, #4]
 800de0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	430a      	orrs	r2, r1
 800de18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800de1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de22:	2b00      	cmp	r3, #0
 800de24:	d00a      	beq.n	800de3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	681b      	ldr	r3, [r3, #0]
 800de2a:	685b      	ldr	r3, [r3, #4]
 800de2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	430a      	orrs	r2, r1
 800de3a:	605a      	str	r2, [r3, #4]
  }
}
 800de3c:	bf00      	nop
 800de3e:	370c      	adds	r7, #12
 800de40:	46bd      	mov	sp, r7
 800de42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de46:	4770      	bx	lr

0800de48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b098      	sub	sp, #96	@ 0x60
 800de4c:	af02      	add	r7, sp, #8
 800de4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	2200      	movs	r2, #0
 800de54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800de58:	f7f4 fd66 	bl	8002928 <HAL_GetTick>
 800de5c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	f003 0308 	and.w	r3, r3, #8
 800de68:	2b08      	cmp	r3, #8
 800de6a:	d12f      	bne.n	800decc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800de6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800de70:	9300      	str	r3, [sp, #0]
 800de72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800de74:	2200      	movs	r2, #0
 800de76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800de7a:	6878      	ldr	r0, [r7, #4]
 800de7c:	f000 f88e 	bl	800df9c <UART_WaitOnFlagUntilTimeout>
 800de80:	4603      	mov	r3, r0
 800de82:	2b00      	cmp	r3, #0
 800de84:	d022      	beq.n	800decc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800de8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de8e:	e853 3f00 	ldrex	r3, [r3]
 800de92:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800de94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800de96:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800de9a:	653b      	str	r3, [r7, #80]	@ 0x50
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	461a      	mov	r2, r3
 800dea2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dea4:	647b      	str	r3, [r7, #68]	@ 0x44
 800dea6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dea8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800deaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800deac:	e841 2300 	strex	r3, r2, [r1]
 800deb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800deb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d1e6      	bne.n	800de86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2220      	movs	r2, #32
 800debc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	2200      	movs	r2, #0
 800dec4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800dec8:	2303      	movs	r3, #3
 800deca:	e063      	b.n	800df94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	f003 0304 	and.w	r3, r3, #4
 800ded6:	2b04      	cmp	r3, #4
 800ded8:	d149      	bne.n	800df6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800deda:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800dede:	9300      	str	r3, [sp, #0]
 800dee0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dee2:	2200      	movs	r2, #0
 800dee4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800dee8:	6878      	ldr	r0, [r7, #4]
 800deea:	f000 f857 	bl	800df9c <UART_WaitOnFlagUntilTimeout>
 800deee:	4603      	mov	r3, r0
 800def0:	2b00      	cmp	r3, #0
 800def2:	d03c      	beq.n	800df6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800defa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800defc:	e853 3f00 	ldrex	r3, [r3]
 800df00:	623b      	str	r3, [r7, #32]
   return(result);
 800df02:	6a3b      	ldr	r3, [r7, #32]
 800df04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800df08:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	461a      	mov	r2, r3
 800df10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800df12:	633b      	str	r3, [r7, #48]	@ 0x30
 800df14:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df16:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800df18:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800df1a:	e841 2300 	strex	r3, r2, [r1]
 800df1e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800df20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df22:	2b00      	cmp	r3, #0
 800df24:	d1e6      	bne.n	800def4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	681b      	ldr	r3, [r3, #0]
 800df2a:	3308      	adds	r3, #8
 800df2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df2e:	693b      	ldr	r3, [r7, #16]
 800df30:	e853 3f00 	ldrex	r3, [r3]
 800df34:	60fb      	str	r3, [r7, #12]
   return(result);
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	f023 0301 	bic.w	r3, r3, #1
 800df3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	3308      	adds	r3, #8
 800df44:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800df46:	61fa      	str	r2, [r7, #28]
 800df48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df4a:	69b9      	ldr	r1, [r7, #24]
 800df4c:	69fa      	ldr	r2, [r7, #28]
 800df4e:	e841 2300 	strex	r3, r2, [r1]
 800df52:	617b      	str	r3, [r7, #20]
   return(result);
 800df54:	697b      	ldr	r3, [r7, #20]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d1e5      	bne.n	800df26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2220      	movs	r2, #32
 800df5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2200      	movs	r2, #0
 800df66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800df6a:	2303      	movs	r3, #3
 800df6c:	e012      	b.n	800df94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2220      	movs	r2, #32
 800df72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2220      	movs	r2, #32
 800df7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2200      	movs	r2, #0
 800df82:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2200      	movs	r2, #0
 800df88:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2200      	movs	r2, #0
 800df8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800df92:	2300      	movs	r3, #0
}
 800df94:	4618      	mov	r0, r3
 800df96:	3758      	adds	r7, #88	@ 0x58
 800df98:	46bd      	mov	sp, r7
 800df9a:	bd80      	pop	{r7, pc}

0800df9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800df9c:	b580      	push	{r7, lr}
 800df9e:	b084      	sub	sp, #16
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	60f8      	str	r0, [r7, #12]
 800dfa4:	60b9      	str	r1, [r7, #8]
 800dfa6:	603b      	str	r3, [r7, #0]
 800dfa8:	4613      	mov	r3, r2
 800dfaa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800dfac:	e04f      	b.n	800e04e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800dfae:	69bb      	ldr	r3, [r7, #24]
 800dfb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dfb4:	d04b      	beq.n	800e04e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800dfb6:	f7f4 fcb7 	bl	8002928 <HAL_GetTick>
 800dfba:	4602      	mov	r2, r0
 800dfbc:	683b      	ldr	r3, [r7, #0]
 800dfbe:	1ad3      	subs	r3, r2, r3
 800dfc0:	69ba      	ldr	r2, [r7, #24]
 800dfc2:	429a      	cmp	r2, r3
 800dfc4:	d302      	bcc.n	800dfcc <UART_WaitOnFlagUntilTimeout+0x30>
 800dfc6:	69bb      	ldr	r3, [r7, #24]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d101      	bne.n	800dfd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800dfcc:	2303      	movs	r3, #3
 800dfce:	e04e      	b.n	800e06e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800dfd0:	68fb      	ldr	r3, [r7, #12]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	681b      	ldr	r3, [r3, #0]
 800dfd6:	f003 0304 	and.w	r3, r3, #4
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d037      	beq.n	800e04e <UART_WaitOnFlagUntilTimeout+0xb2>
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	2b80      	cmp	r3, #128	@ 0x80
 800dfe2:	d034      	beq.n	800e04e <UART_WaitOnFlagUntilTimeout+0xb2>
 800dfe4:	68bb      	ldr	r3, [r7, #8]
 800dfe6:	2b40      	cmp	r3, #64	@ 0x40
 800dfe8:	d031      	beq.n	800e04e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	69db      	ldr	r3, [r3, #28]
 800dff0:	f003 0308 	and.w	r3, r3, #8
 800dff4:	2b08      	cmp	r3, #8
 800dff6:	d110      	bne.n	800e01a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800dff8:	68fb      	ldr	r3, [r7, #12]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	2208      	movs	r2, #8
 800dffe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e000:	68f8      	ldr	r0, [r7, #12]
 800e002:	f000 f839 	bl	800e078 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	2208      	movs	r2, #8
 800e00a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	2200      	movs	r2, #0
 800e012:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800e016:	2301      	movs	r3, #1
 800e018:	e029      	b.n	800e06e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	69db      	ldr	r3, [r3, #28]
 800e020:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800e024:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e028:	d111      	bne.n	800e04e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800e032:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e034:	68f8      	ldr	r0, [r7, #12]
 800e036:	f000 f81f 	bl	800e078 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	2220      	movs	r2, #32
 800e03e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	2200      	movs	r2, #0
 800e046:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800e04a:	2303      	movs	r3, #3
 800e04c:	e00f      	b.n	800e06e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	69da      	ldr	r2, [r3, #28]
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	4013      	ands	r3, r2
 800e058:	68ba      	ldr	r2, [r7, #8]
 800e05a:	429a      	cmp	r2, r3
 800e05c:	bf0c      	ite	eq
 800e05e:	2301      	moveq	r3, #1
 800e060:	2300      	movne	r3, #0
 800e062:	b2db      	uxtb	r3, r3
 800e064:	461a      	mov	r2, r3
 800e066:	79fb      	ldrb	r3, [r7, #7]
 800e068:	429a      	cmp	r2, r3
 800e06a:	d0a0      	beq.n	800dfae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e06c:	2300      	movs	r3, #0
}
 800e06e:	4618      	mov	r0, r3
 800e070:	3710      	adds	r7, #16
 800e072:	46bd      	mov	sp, r7
 800e074:	bd80      	pop	{r7, pc}
	...

0800e078 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e078:	b480      	push	{r7}
 800e07a:	b095      	sub	sp, #84	@ 0x54
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e086:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e088:	e853 3f00 	ldrex	r3, [r3]
 800e08c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800e08e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e090:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800e094:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	681b      	ldr	r3, [r3, #0]
 800e09a:	461a      	mov	r2, r3
 800e09c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e09e:	643b      	str	r3, [r7, #64]	@ 0x40
 800e0a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800e0a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800e0a6:	e841 2300 	strex	r3, r2, [r1]
 800e0aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800e0ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d1e6      	bne.n	800e080 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	3308      	adds	r3, #8
 800e0b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0ba:	6a3b      	ldr	r3, [r7, #32]
 800e0bc:	e853 3f00 	ldrex	r3, [r3]
 800e0c0:	61fb      	str	r3, [r7, #28]
   return(result);
 800e0c2:	69fa      	ldr	r2, [r7, #28]
 800e0c4:	4b1e      	ldr	r3, [pc, #120]	@ (800e140 <UART_EndRxTransfer+0xc8>)
 800e0c6:	4013      	ands	r3, r2
 800e0c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	3308      	adds	r3, #8
 800e0d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e0d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800e0d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e0d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e0d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e0da:	e841 2300 	strex	r3, r2, [r1]
 800e0de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800e0e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d1e5      	bne.n	800e0b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e0ea:	2b01      	cmp	r3, #1
 800e0ec:	d118      	bne.n	800e120 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	e853 3f00 	ldrex	r3, [r3]
 800e0fa:	60bb      	str	r3, [r7, #8]
   return(result);
 800e0fc:	68bb      	ldr	r3, [r7, #8]
 800e0fe:	f023 0310 	bic.w	r3, r3, #16
 800e102:	647b      	str	r3, [r7, #68]	@ 0x44
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	461a      	mov	r2, r3
 800e10a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e10c:	61bb      	str	r3, [r7, #24]
 800e10e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e110:	6979      	ldr	r1, [r7, #20]
 800e112:	69ba      	ldr	r2, [r7, #24]
 800e114:	e841 2300 	strex	r3, r2, [r1]
 800e118:	613b      	str	r3, [r7, #16]
   return(result);
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d1e6      	bne.n	800e0ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2220      	movs	r2, #32
 800e124:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	2200      	movs	r2, #0
 800e12c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2200      	movs	r2, #0
 800e132:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800e134:	bf00      	nop
 800e136:	3754      	adds	r7, #84	@ 0x54
 800e138:	46bd      	mov	sp, r7
 800e13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e13e:	4770      	bx	lr
 800e140:	effffffe 	.word	0xeffffffe

0800e144 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e144:	b084      	sub	sp, #16
 800e146:	b580      	push	{r7, lr}
 800e148:	b084      	sub	sp, #16
 800e14a:	af00      	add	r7, sp, #0
 800e14c:	6078      	str	r0, [r7, #4]
 800e14e:	f107 001c 	add.w	r0, r7, #28
 800e152:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e156:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800e15a:	2b01      	cmp	r3, #1
 800e15c:	d121      	bne.n	800e1a2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e162:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	68da      	ldr	r2, [r3, #12]
 800e16e:	4b2c      	ldr	r3, [pc, #176]	@ (800e220 <USB_CoreInit+0xdc>)
 800e170:	4013      	ands	r3, r2
 800e172:	687a      	ldr	r2, [r7, #4]
 800e174:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	68db      	ldr	r3, [r3, #12]
 800e17a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e182:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e186:	2b01      	cmp	r3, #1
 800e188:	d105      	bne.n	800e196 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	68db      	ldr	r3, [r3, #12]
 800e18e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f001 faf6 	bl	800f788 <USB_CoreReset>
 800e19c:	4603      	mov	r3, r0
 800e19e:	73fb      	strb	r3, [r7, #15]
 800e1a0:	e01b      	b.n	800e1da <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	68db      	ldr	r3, [r3, #12]
 800e1a6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e1ae:	6878      	ldr	r0, [r7, #4]
 800e1b0:	f001 faea 	bl	800f788 <USB_CoreReset>
 800e1b4:	4603      	mov	r3, r0
 800e1b6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e1b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d106      	bne.n	800e1ce <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1c4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	639a      	str	r2, [r3, #56]	@ 0x38
 800e1cc:	e005      	b.n	800e1da <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1d2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e1da:	7fbb      	ldrb	r3, [r7, #30]
 800e1dc:	2b01      	cmp	r3, #1
 800e1de:	d116      	bne.n	800e20e <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e1e4:	b29a      	uxth	r2, r3
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e1ee:	4b0d      	ldr	r3, [pc, #52]	@ (800e224 <USB_CoreInit+0xe0>)
 800e1f0:	4313      	orrs	r3, r2
 800e1f2:	687a      	ldr	r2, [r7, #4]
 800e1f4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	689b      	ldr	r3, [r3, #8]
 800e1fa:	f043 0206 	orr.w	r2, r3, #6
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	689b      	ldr	r3, [r3, #8]
 800e206:	f043 0220 	orr.w	r2, r3, #32
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e20e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e210:	4618      	mov	r0, r3
 800e212:	3710      	adds	r7, #16
 800e214:	46bd      	mov	sp, r7
 800e216:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e21a:	b004      	add	sp, #16
 800e21c:	4770      	bx	lr
 800e21e:	bf00      	nop
 800e220:	ffbdffbf 	.word	0xffbdffbf
 800e224:	03ee0000 	.word	0x03ee0000

0800e228 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800e228:	b480      	push	{r7}
 800e22a:	b087      	sub	sp, #28
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	60f8      	str	r0, [r7, #12]
 800e230:	60b9      	str	r1, [r7, #8]
 800e232:	4613      	mov	r3, r2
 800e234:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800e236:	79fb      	ldrb	r3, [r7, #7]
 800e238:	2b02      	cmp	r3, #2
 800e23a:	d165      	bne.n	800e308 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800e23c:	68bb      	ldr	r3, [r7, #8]
 800e23e:	4a41      	ldr	r2, [pc, #260]	@ (800e344 <USB_SetTurnaroundTime+0x11c>)
 800e240:	4293      	cmp	r3, r2
 800e242:	d906      	bls.n	800e252 <USB_SetTurnaroundTime+0x2a>
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	4a40      	ldr	r2, [pc, #256]	@ (800e348 <USB_SetTurnaroundTime+0x120>)
 800e248:	4293      	cmp	r3, r2
 800e24a:	d202      	bcs.n	800e252 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800e24c:	230f      	movs	r3, #15
 800e24e:	617b      	str	r3, [r7, #20]
 800e250:	e062      	b.n	800e318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800e252:	68bb      	ldr	r3, [r7, #8]
 800e254:	4a3c      	ldr	r2, [pc, #240]	@ (800e348 <USB_SetTurnaroundTime+0x120>)
 800e256:	4293      	cmp	r3, r2
 800e258:	d306      	bcc.n	800e268 <USB_SetTurnaroundTime+0x40>
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	4a3b      	ldr	r2, [pc, #236]	@ (800e34c <USB_SetTurnaroundTime+0x124>)
 800e25e:	4293      	cmp	r3, r2
 800e260:	d202      	bcs.n	800e268 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800e262:	230e      	movs	r3, #14
 800e264:	617b      	str	r3, [r7, #20]
 800e266:	e057      	b.n	800e318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800e268:	68bb      	ldr	r3, [r7, #8]
 800e26a:	4a38      	ldr	r2, [pc, #224]	@ (800e34c <USB_SetTurnaroundTime+0x124>)
 800e26c:	4293      	cmp	r3, r2
 800e26e:	d306      	bcc.n	800e27e <USB_SetTurnaroundTime+0x56>
 800e270:	68bb      	ldr	r3, [r7, #8]
 800e272:	4a37      	ldr	r2, [pc, #220]	@ (800e350 <USB_SetTurnaroundTime+0x128>)
 800e274:	4293      	cmp	r3, r2
 800e276:	d202      	bcs.n	800e27e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800e278:	230d      	movs	r3, #13
 800e27a:	617b      	str	r3, [r7, #20]
 800e27c:	e04c      	b.n	800e318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800e27e:	68bb      	ldr	r3, [r7, #8]
 800e280:	4a33      	ldr	r2, [pc, #204]	@ (800e350 <USB_SetTurnaroundTime+0x128>)
 800e282:	4293      	cmp	r3, r2
 800e284:	d306      	bcc.n	800e294 <USB_SetTurnaroundTime+0x6c>
 800e286:	68bb      	ldr	r3, [r7, #8]
 800e288:	4a32      	ldr	r2, [pc, #200]	@ (800e354 <USB_SetTurnaroundTime+0x12c>)
 800e28a:	4293      	cmp	r3, r2
 800e28c:	d802      	bhi.n	800e294 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800e28e:	230c      	movs	r3, #12
 800e290:	617b      	str	r3, [r7, #20]
 800e292:	e041      	b.n	800e318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	4a2f      	ldr	r2, [pc, #188]	@ (800e354 <USB_SetTurnaroundTime+0x12c>)
 800e298:	4293      	cmp	r3, r2
 800e29a:	d906      	bls.n	800e2aa <USB_SetTurnaroundTime+0x82>
 800e29c:	68bb      	ldr	r3, [r7, #8]
 800e29e:	4a2e      	ldr	r2, [pc, #184]	@ (800e358 <USB_SetTurnaroundTime+0x130>)
 800e2a0:	4293      	cmp	r3, r2
 800e2a2:	d802      	bhi.n	800e2aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800e2a4:	230b      	movs	r3, #11
 800e2a6:	617b      	str	r3, [r7, #20]
 800e2a8:	e036      	b.n	800e318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800e2aa:	68bb      	ldr	r3, [r7, #8]
 800e2ac:	4a2a      	ldr	r2, [pc, #168]	@ (800e358 <USB_SetTurnaroundTime+0x130>)
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	d906      	bls.n	800e2c0 <USB_SetTurnaroundTime+0x98>
 800e2b2:	68bb      	ldr	r3, [r7, #8]
 800e2b4:	4a29      	ldr	r2, [pc, #164]	@ (800e35c <USB_SetTurnaroundTime+0x134>)
 800e2b6:	4293      	cmp	r3, r2
 800e2b8:	d802      	bhi.n	800e2c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800e2ba:	230a      	movs	r3, #10
 800e2bc:	617b      	str	r3, [r7, #20]
 800e2be:	e02b      	b.n	800e318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	4a26      	ldr	r2, [pc, #152]	@ (800e35c <USB_SetTurnaroundTime+0x134>)
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	d906      	bls.n	800e2d6 <USB_SetTurnaroundTime+0xae>
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	4a25      	ldr	r2, [pc, #148]	@ (800e360 <USB_SetTurnaroundTime+0x138>)
 800e2cc:	4293      	cmp	r3, r2
 800e2ce:	d202      	bcs.n	800e2d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800e2d0:	2309      	movs	r3, #9
 800e2d2:	617b      	str	r3, [r7, #20]
 800e2d4:	e020      	b.n	800e318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	4a21      	ldr	r2, [pc, #132]	@ (800e360 <USB_SetTurnaroundTime+0x138>)
 800e2da:	4293      	cmp	r3, r2
 800e2dc:	d306      	bcc.n	800e2ec <USB_SetTurnaroundTime+0xc4>
 800e2de:	68bb      	ldr	r3, [r7, #8]
 800e2e0:	4a20      	ldr	r2, [pc, #128]	@ (800e364 <USB_SetTurnaroundTime+0x13c>)
 800e2e2:	4293      	cmp	r3, r2
 800e2e4:	d802      	bhi.n	800e2ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800e2e6:	2308      	movs	r3, #8
 800e2e8:	617b      	str	r3, [r7, #20]
 800e2ea:	e015      	b.n	800e318 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800e2ec:	68bb      	ldr	r3, [r7, #8]
 800e2ee:	4a1d      	ldr	r2, [pc, #116]	@ (800e364 <USB_SetTurnaroundTime+0x13c>)
 800e2f0:	4293      	cmp	r3, r2
 800e2f2:	d906      	bls.n	800e302 <USB_SetTurnaroundTime+0xda>
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	4a1c      	ldr	r2, [pc, #112]	@ (800e368 <USB_SetTurnaroundTime+0x140>)
 800e2f8:	4293      	cmp	r3, r2
 800e2fa:	d202      	bcs.n	800e302 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800e2fc:	2307      	movs	r3, #7
 800e2fe:	617b      	str	r3, [r7, #20]
 800e300:	e00a      	b.n	800e318 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800e302:	2306      	movs	r3, #6
 800e304:	617b      	str	r3, [r7, #20]
 800e306:	e007      	b.n	800e318 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800e308:	79fb      	ldrb	r3, [r7, #7]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d102      	bne.n	800e314 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800e30e:	2309      	movs	r3, #9
 800e310:	617b      	str	r3, [r7, #20]
 800e312:	e001      	b.n	800e318 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800e314:	2309      	movs	r3, #9
 800e316:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800e318:	68fb      	ldr	r3, [r7, #12]
 800e31a:	68db      	ldr	r3, [r3, #12]
 800e31c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	68da      	ldr	r2, [r3, #12]
 800e328:	697b      	ldr	r3, [r7, #20]
 800e32a:	029b      	lsls	r3, r3, #10
 800e32c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800e330:	431a      	orrs	r2, r3
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800e336:	2300      	movs	r3, #0
}
 800e338:	4618      	mov	r0, r3
 800e33a:	371c      	adds	r7, #28
 800e33c:	46bd      	mov	sp, r7
 800e33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e342:	4770      	bx	lr
 800e344:	00d8acbf 	.word	0x00d8acbf
 800e348:	00e4e1c0 	.word	0x00e4e1c0
 800e34c:	00f42400 	.word	0x00f42400
 800e350:	01067380 	.word	0x01067380
 800e354:	011a499f 	.word	0x011a499f
 800e358:	01312cff 	.word	0x01312cff
 800e35c:	014ca43f 	.word	0x014ca43f
 800e360:	016e3600 	.word	0x016e3600
 800e364:	01a6ab1f 	.word	0x01a6ab1f
 800e368:	01e84800 	.word	0x01e84800

0800e36c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e36c:	b480      	push	{r7}
 800e36e:	b083      	sub	sp, #12
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	689b      	ldr	r3, [r3, #8]
 800e378:	f043 0201 	orr.w	r2, r3, #1
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e380:	2300      	movs	r3, #0
}
 800e382:	4618      	mov	r0, r3
 800e384:	370c      	adds	r7, #12
 800e386:	46bd      	mov	sp, r7
 800e388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38c:	4770      	bx	lr

0800e38e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e38e:	b480      	push	{r7}
 800e390:	b083      	sub	sp, #12
 800e392:	af00      	add	r7, sp, #0
 800e394:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	689b      	ldr	r3, [r3, #8]
 800e39a:	f023 0201 	bic.w	r2, r3, #1
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e3a2:	2300      	movs	r3, #0
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	370c      	adds	r7, #12
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ae:	4770      	bx	lr

0800e3b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b084      	sub	sp, #16
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	460b      	mov	r3, r1
 800e3ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e3bc:	2300      	movs	r3, #0
 800e3be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	68db      	ldr	r3, [r3, #12]
 800e3c4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e3cc:	78fb      	ldrb	r3, [r7, #3]
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	d115      	bne.n	800e3fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	68db      	ldr	r3, [r3, #12]
 800e3d6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e3de:	200a      	movs	r0, #10
 800e3e0:	f7f4 faae 	bl	8002940 <HAL_Delay>
      ms += 10U;
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	330a      	adds	r3, #10
 800e3e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f001 f93b 	bl	800f666 <USB_GetMode>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	2b01      	cmp	r3, #1
 800e3f4:	d01e      	beq.n	800e434 <USB_SetCurrentMode+0x84>
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	2bc7      	cmp	r3, #199	@ 0xc7
 800e3fa:	d9f0      	bls.n	800e3de <USB_SetCurrentMode+0x2e>
 800e3fc:	e01a      	b.n	800e434 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e3fe:	78fb      	ldrb	r3, [r7, #3]
 800e400:	2b00      	cmp	r3, #0
 800e402:	d115      	bne.n	800e430 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	68db      	ldr	r3, [r3, #12]
 800e408:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e410:	200a      	movs	r0, #10
 800e412:	f7f4 fa95 	bl	8002940 <HAL_Delay>
      ms += 10U;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	330a      	adds	r3, #10
 800e41a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e41c:	6878      	ldr	r0, [r7, #4]
 800e41e:	f001 f922 	bl	800f666 <USB_GetMode>
 800e422:	4603      	mov	r3, r0
 800e424:	2b00      	cmp	r3, #0
 800e426:	d005      	beq.n	800e434 <USB_SetCurrentMode+0x84>
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	2bc7      	cmp	r3, #199	@ 0xc7
 800e42c:	d9f0      	bls.n	800e410 <USB_SetCurrentMode+0x60>
 800e42e:	e001      	b.n	800e434 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e430:	2301      	movs	r3, #1
 800e432:	e005      	b.n	800e440 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800e434:	68fb      	ldr	r3, [r7, #12]
 800e436:	2bc8      	cmp	r3, #200	@ 0xc8
 800e438:	d101      	bne.n	800e43e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e43a:	2301      	movs	r3, #1
 800e43c:	e000      	b.n	800e440 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e43e:	2300      	movs	r3, #0
}
 800e440:	4618      	mov	r0, r3
 800e442:	3710      	adds	r7, #16
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}

0800e448 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e448:	b084      	sub	sp, #16
 800e44a:	b580      	push	{r7, lr}
 800e44c:	b086      	sub	sp, #24
 800e44e:	af00      	add	r7, sp, #0
 800e450:	6078      	str	r0, [r7, #4]
 800e452:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800e456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e45a:	2300      	movs	r3, #0
 800e45c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e462:	2300      	movs	r3, #0
 800e464:	613b      	str	r3, [r7, #16]
 800e466:	e009      	b.n	800e47c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e468:	687a      	ldr	r2, [r7, #4]
 800e46a:	693b      	ldr	r3, [r7, #16]
 800e46c:	3340      	adds	r3, #64	@ 0x40
 800e46e:	009b      	lsls	r3, r3, #2
 800e470:	4413      	add	r3, r2
 800e472:	2200      	movs	r2, #0
 800e474:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e476:	693b      	ldr	r3, [r7, #16]
 800e478:	3301      	adds	r3, #1
 800e47a:	613b      	str	r3, [r7, #16]
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	2b0e      	cmp	r3, #14
 800e480:	d9f2      	bls.n	800e468 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e482:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e486:	2b00      	cmp	r3, #0
 800e488:	d11c      	bne.n	800e4c4 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e490:	685b      	ldr	r3, [r3, #4]
 800e492:	68fa      	ldr	r2, [r7, #12]
 800e494:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e498:	f043 0302 	orr.w	r3, r3, #2
 800e49c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4a2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	601a      	str	r2, [r3, #0]
 800e4c2:	e005      	b.n	800e4d0 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e4c8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e4d0:	68fb      	ldr	r3, [r7, #12]
 800e4d2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e4d6:	461a      	mov	r2, r3
 800e4d8:	2300      	movs	r3, #0
 800e4da:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e4dc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800e4e0:	2b01      	cmp	r3, #1
 800e4e2:	d10d      	bne.n	800e500 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e4e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d104      	bne.n	800e4f6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e4ec:	2100      	movs	r1, #0
 800e4ee:	6878      	ldr	r0, [r7, #4]
 800e4f0:	f000 f968 	bl	800e7c4 <USB_SetDevSpeed>
 800e4f4:	e008      	b.n	800e508 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e4f6:	2101      	movs	r1, #1
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f000 f963 	bl	800e7c4 <USB_SetDevSpeed>
 800e4fe:	e003      	b.n	800e508 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e500:	2103      	movs	r1, #3
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	f000 f95e 	bl	800e7c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e508:	2110      	movs	r1, #16
 800e50a:	6878      	ldr	r0, [r7, #4]
 800e50c:	f000 f8fa 	bl	800e704 <USB_FlushTxFifo>
 800e510:	4603      	mov	r3, r0
 800e512:	2b00      	cmp	r3, #0
 800e514:	d001      	beq.n	800e51a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800e516:	2301      	movs	r3, #1
 800e518:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f000 f924 	bl	800e768 <USB_FlushRxFifo>
 800e520:	4603      	mov	r3, r0
 800e522:	2b00      	cmp	r3, #0
 800e524:	d001      	beq.n	800e52a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800e526:	2301      	movs	r3, #1
 800e528:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e530:	461a      	mov	r2, r3
 800e532:	2300      	movs	r3, #0
 800e534:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e53c:	461a      	mov	r2, r3
 800e53e:	2300      	movs	r3, #0
 800e540:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e548:	461a      	mov	r2, r3
 800e54a:	2300      	movs	r3, #0
 800e54c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e54e:	2300      	movs	r3, #0
 800e550:	613b      	str	r3, [r7, #16]
 800e552:	e043      	b.n	800e5dc <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e554:	693b      	ldr	r3, [r7, #16]
 800e556:	015a      	lsls	r2, r3, #5
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	4413      	add	r3, r2
 800e55c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e566:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e56a:	d118      	bne.n	800e59e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d10a      	bne.n	800e588 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e572:	693b      	ldr	r3, [r7, #16]
 800e574:	015a      	lsls	r2, r3, #5
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	4413      	add	r3, r2
 800e57a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e57e:	461a      	mov	r2, r3
 800e580:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e584:	6013      	str	r3, [r2, #0]
 800e586:	e013      	b.n	800e5b0 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e588:	693b      	ldr	r3, [r7, #16]
 800e58a:	015a      	lsls	r2, r3, #5
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	4413      	add	r3, r2
 800e590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e594:	461a      	mov	r2, r3
 800e596:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e59a:	6013      	str	r3, [r2, #0]
 800e59c:	e008      	b.n	800e5b0 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e59e:	693b      	ldr	r3, [r7, #16]
 800e5a0:	015a      	lsls	r2, r3, #5
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	4413      	add	r3, r2
 800e5a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5aa:	461a      	mov	r2, r3
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e5b0:	693b      	ldr	r3, [r7, #16]
 800e5b2:	015a      	lsls	r2, r3, #5
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	4413      	add	r3, r2
 800e5b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5bc:	461a      	mov	r2, r3
 800e5be:	2300      	movs	r3, #0
 800e5c0:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e5c2:	693b      	ldr	r3, [r7, #16]
 800e5c4:	015a      	lsls	r2, r3, #5
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	4413      	add	r3, r2
 800e5ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e5ce:	461a      	mov	r2, r3
 800e5d0:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e5d4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e5d6:	693b      	ldr	r3, [r7, #16]
 800e5d8:	3301      	adds	r3, #1
 800e5da:	613b      	str	r3, [r7, #16]
 800e5dc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e5e0:	461a      	mov	r2, r3
 800e5e2:	693b      	ldr	r3, [r7, #16]
 800e5e4:	4293      	cmp	r3, r2
 800e5e6:	d3b5      	bcc.n	800e554 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	613b      	str	r3, [r7, #16]
 800e5ec:	e043      	b.n	800e676 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800e5ee:	693b      	ldr	r3, [r7, #16]
 800e5f0:	015a      	lsls	r2, r3, #5
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	4413      	add	r3, r2
 800e5f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e600:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e604:	d118      	bne.n	800e638 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d10a      	bne.n	800e622 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800e60c:	693b      	ldr	r3, [r7, #16]
 800e60e:	015a      	lsls	r2, r3, #5
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	4413      	add	r3, r2
 800e614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e618:	461a      	mov	r2, r3
 800e61a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800e61e:	6013      	str	r3, [r2, #0]
 800e620:	e013      	b.n	800e64a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800e622:	693b      	ldr	r3, [r7, #16]
 800e624:	015a      	lsls	r2, r3, #5
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	4413      	add	r3, r2
 800e62a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e62e:	461a      	mov	r2, r3
 800e630:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800e634:	6013      	str	r3, [r2, #0]
 800e636:	e008      	b.n	800e64a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800e638:	693b      	ldr	r3, [r7, #16]
 800e63a:	015a      	lsls	r2, r3, #5
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	4413      	add	r3, r2
 800e640:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e644:	461a      	mov	r2, r3
 800e646:	2300      	movs	r3, #0
 800e648:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800e64a:	693b      	ldr	r3, [r7, #16]
 800e64c:	015a      	lsls	r2, r3, #5
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	4413      	add	r3, r2
 800e652:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e656:	461a      	mov	r2, r3
 800e658:	2300      	movs	r3, #0
 800e65a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	015a      	lsls	r2, r3, #5
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	4413      	add	r3, r2
 800e664:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e668:	461a      	mov	r2, r3
 800e66a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800e66e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e670:	693b      	ldr	r3, [r7, #16]
 800e672:	3301      	adds	r3, #1
 800e674:	613b      	str	r3, [r7, #16]
 800e676:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800e67a:	461a      	mov	r2, r3
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	4293      	cmp	r3, r2
 800e680:	d3b5      	bcc.n	800e5ee <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e688:	691b      	ldr	r3, [r3, #16]
 800e68a:	68fa      	ldr	r2, [r7, #12]
 800e68c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800e690:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e694:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	2200      	movs	r2, #0
 800e69a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800e6a2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e6a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d105      	bne.n	800e6b8 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	699b      	ldr	r3, [r3, #24]
 800e6b0:	f043 0210 	orr.w	r2, r3, #16
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	699a      	ldr	r2, [r3, #24]
 800e6bc:	4b0f      	ldr	r3, [pc, #60]	@ (800e6fc <USB_DevInit+0x2b4>)
 800e6be:	4313      	orrs	r3, r2
 800e6c0:	687a      	ldr	r2, [r7, #4]
 800e6c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800e6c4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d005      	beq.n	800e6d8 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	699b      	ldr	r3, [r3, #24]
 800e6d0:	f043 0208 	orr.w	r2, r3, #8
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800e6d8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800e6dc:	2b01      	cmp	r3, #1
 800e6de:	d105      	bne.n	800e6ec <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	699a      	ldr	r2, [r3, #24]
 800e6e4:	4b06      	ldr	r3, [pc, #24]	@ (800e700 <USB_DevInit+0x2b8>)
 800e6e6:	4313      	orrs	r3, r2
 800e6e8:	687a      	ldr	r2, [r7, #4]
 800e6ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800e6ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	3718      	adds	r7, #24
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e6f8:	b004      	add	sp, #16
 800e6fa:	4770      	bx	lr
 800e6fc:	803c3800 	.word	0x803c3800
 800e700:	40000004 	.word	0x40000004

0800e704 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e704:	b480      	push	{r7}
 800e706:	b085      	sub	sp, #20
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
 800e70c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e70e:	2300      	movs	r3, #0
 800e710:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	3301      	adds	r3, #1
 800e716:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e718:	68fb      	ldr	r3, [r7, #12]
 800e71a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e71e:	d901      	bls.n	800e724 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e720:	2303      	movs	r3, #3
 800e722:	e01b      	b.n	800e75c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	691b      	ldr	r3, [r3, #16]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	daf2      	bge.n	800e712 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e72c:	2300      	movs	r3, #0
 800e72e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	019b      	lsls	r3, r3, #6
 800e734:	f043 0220 	orr.w	r2, r3, #32
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	3301      	adds	r3, #1
 800e740:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e748:	d901      	bls.n	800e74e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e74a:	2303      	movs	r3, #3
 800e74c:	e006      	b.n	800e75c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	691b      	ldr	r3, [r3, #16]
 800e752:	f003 0320 	and.w	r3, r3, #32
 800e756:	2b20      	cmp	r3, #32
 800e758:	d0f0      	beq.n	800e73c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e75a:	2300      	movs	r3, #0
}
 800e75c:	4618      	mov	r0, r3
 800e75e:	3714      	adds	r7, #20
 800e760:	46bd      	mov	sp, r7
 800e762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e766:	4770      	bx	lr

0800e768 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e768:	b480      	push	{r7}
 800e76a:	b085      	sub	sp, #20
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e770:	2300      	movs	r3, #0
 800e772:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	3301      	adds	r3, #1
 800e778:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e780:	d901      	bls.n	800e786 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e782:	2303      	movs	r3, #3
 800e784:	e018      	b.n	800e7b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	691b      	ldr	r3, [r3, #16]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	daf2      	bge.n	800e774 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e78e:	2300      	movs	r3, #0
 800e790:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	2210      	movs	r2, #16
 800e796:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e798:	68fb      	ldr	r3, [r7, #12]
 800e79a:	3301      	adds	r3, #1
 800e79c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800e7a4:	d901      	bls.n	800e7aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e7a6:	2303      	movs	r3, #3
 800e7a8:	e006      	b.n	800e7b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	691b      	ldr	r3, [r3, #16]
 800e7ae:	f003 0310 	and.w	r3, r3, #16
 800e7b2:	2b10      	cmp	r3, #16
 800e7b4:	d0f0      	beq.n	800e798 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e7b6:	2300      	movs	r3, #0
}
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	3714      	adds	r7, #20
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c2:	4770      	bx	lr

0800e7c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800e7c4:	b480      	push	{r7}
 800e7c6:	b085      	sub	sp, #20
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
 800e7cc:	460b      	mov	r3, r1
 800e7ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e7da:	681a      	ldr	r2, [r3, #0]
 800e7dc:	78fb      	ldrb	r3, [r7, #3]
 800e7de:	68f9      	ldr	r1, [r7, #12]
 800e7e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e7e4:	4313      	orrs	r3, r2
 800e7e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800e7e8:	2300      	movs	r3, #0
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3714      	adds	r7, #20
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f4:	4770      	bx	lr

0800e7f6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800e7f6:	b480      	push	{r7}
 800e7f8:	b087      	sub	sp, #28
 800e7fa:	af00      	add	r7, sp, #0
 800e7fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800e802:	693b      	ldr	r3, [r7, #16]
 800e804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e808:	689b      	ldr	r3, [r3, #8]
 800e80a:	f003 0306 	and.w	r3, r3, #6
 800e80e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d102      	bne.n	800e81c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800e816:	2300      	movs	r3, #0
 800e818:	75fb      	strb	r3, [r7, #23]
 800e81a:	e00a      	b.n	800e832 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	2b02      	cmp	r3, #2
 800e820:	d002      	beq.n	800e828 <USB_GetDevSpeed+0x32>
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	2b06      	cmp	r3, #6
 800e826:	d102      	bne.n	800e82e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800e828:	2302      	movs	r3, #2
 800e82a:	75fb      	strb	r3, [r7, #23]
 800e82c:	e001      	b.n	800e832 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800e82e:	230f      	movs	r3, #15
 800e830:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800e832:	7dfb      	ldrb	r3, [r7, #23]
}
 800e834:	4618      	mov	r0, r3
 800e836:	371c      	adds	r7, #28
 800e838:	46bd      	mov	sp, r7
 800e83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e83e:	4770      	bx	lr

0800e840 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e840:	b480      	push	{r7}
 800e842:	b085      	sub	sp, #20
 800e844:	af00      	add	r7, sp, #0
 800e846:	6078      	str	r0, [r7, #4]
 800e848:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	781b      	ldrb	r3, [r3, #0]
 800e852:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800e854:	683b      	ldr	r3, [r7, #0]
 800e856:	785b      	ldrb	r3, [r3, #1]
 800e858:	2b01      	cmp	r3, #1
 800e85a:	d139      	bne.n	800e8d0 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e862:	69da      	ldr	r2, [r3, #28]
 800e864:	683b      	ldr	r3, [r7, #0]
 800e866:	781b      	ldrb	r3, [r3, #0]
 800e868:	f003 030f 	and.w	r3, r3, #15
 800e86c:	2101      	movs	r1, #1
 800e86e:	fa01 f303 	lsl.w	r3, r1, r3
 800e872:	b29b      	uxth	r3, r3
 800e874:	68f9      	ldr	r1, [r7, #12]
 800e876:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e87a:	4313      	orrs	r3, r2
 800e87c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	015a      	lsls	r2, r3, #5
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	4413      	add	r3, r2
 800e886:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e890:	2b00      	cmp	r3, #0
 800e892:	d153      	bne.n	800e93c <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	015a      	lsls	r2, r3, #5
 800e898:	68fb      	ldr	r3, [r7, #12]
 800e89a:	4413      	add	r3, r2
 800e89c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8a0:	681a      	ldr	r2, [r3, #0]
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	689b      	ldr	r3, [r3, #8]
 800e8a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	791b      	ldrb	r3, [r3, #4]
 800e8ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e8b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	059b      	lsls	r3, r3, #22
 800e8b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800e8b8:	431a      	orrs	r2, r3
 800e8ba:	68bb      	ldr	r3, [r7, #8]
 800e8bc:	0159      	lsls	r1, r3, #5
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	440b      	add	r3, r1
 800e8c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e8c6:	4619      	mov	r1, r3
 800e8c8:	4b20      	ldr	r3, [pc, #128]	@ (800e94c <USB_ActivateEndpoint+0x10c>)
 800e8ca:	4313      	orrs	r3, r2
 800e8cc:	600b      	str	r3, [r1, #0]
 800e8ce:	e035      	b.n	800e93c <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e8d6:	69da      	ldr	r2, [r3, #28]
 800e8d8:	683b      	ldr	r3, [r7, #0]
 800e8da:	781b      	ldrb	r3, [r3, #0]
 800e8dc:	f003 030f 	and.w	r3, r3, #15
 800e8e0:	2101      	movs	r1, #1
 800e8e2:	fa01 f303 	lsl.w	r3, r1, r3
 800e8e6:	041b      	lsls	r3, r3, #16
 800e8e8:	68f9      	ldr	r1, [r7, #12]
 800e8ea:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e8ee:	4313      	orrs	r3, r2
 800e8f0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800e8f2:	68bb      	ldr	r3, [r7, #8]
 800e8f4:	015a      	lsls	r2, r3, #5
 800e8f6:	68fb      	ldr	r3, [r7, #12]
 800e8f8:	4413      	add	r3, r2
 800e8fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e904:	2b00      	cmp	r3, #0
 800e906:	d119      	bne.n	800e93c <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e908:	68bb      	ldr	r3, [r7, #8]
 800e90a:	015a      	lsls	r2, r3, #5
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	4413      	add	r3, r2
 800e910:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e914:	681a      	ldr	r2, [r3, #0]
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	689b      	ldr	r3, [r3, #8]
 800e91a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800e91e:	683b      	ldr	r3, [r7, #0]
 800e920:	791b      	ldrb	r3, [r3, #4]
 800e922:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800e924:	430b      	orrs	r3, r1
 800e926:	431a      	orrs	r2, r3
 800e928:	68bb      	ldr	r3, [r7, #8]
 800e92a:	0159      	lsls	r1, r3, #5
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	440b      	add	r3, r1
 800e930:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800e934:	4619      	mov	r1, r3
 800e936:	4b05      	ldr	r3, [pc, #20]	@ (800e94c <USB_ActivateEndpoint+0x10c>)
 800e938:	4313      	orrs	r3, r2
 800e93a:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800e93c:	2300      	movs	r3, #0
}
 800e93e:	4618      	mov	r0, r3
 800e940:	3714      	adds	r7, #20
 800e942:	46bd      	mov	sp, r7
 800e944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e948:	4770      	bx	lr
 800e94a:	bf00      	nop
 800e94c:	10008000 	.word	0x10008000

0800e950 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800e950:	b480      	push	{r7}
 800e952:	b085      	sub	sp, #20
 800e954:	af00      	add	r7, sp, #0
 800e956:	6078      	str	r0, [r7, #4]
 800e958:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800e95e:	683b      	ldr	r3, [r7, #0]
 800e960:	781b      	ldrb	r3, [r3, #0]
 800e962:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	785b      	ldrb	r3, [r3, #1]
 800e968:	2b01      	cmp	r3, #1
 800e96a:	d161      	bne.n	800ea30 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e96c:	68bb      	ldr	r3, [r7, #8]
 800e96e:	015a      	lsls	r2, r3, #5
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	4413      	add	r3, r2
 800e974:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e97e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e982:	d11f      	bne.n	800e9c4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800e984:	68bb      	ldr	r3, [r7, #8]
 800e986:	015a      	lsls	r2, r3, #5
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	4413      	add	r3, r2
 800e98c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	68ba      	ldr	r2, [r7, #8]
 800e994:	0151      	lsls	r1, r2, #5
 800e996:	68fa      	ldr	r2, [r7, #12]
 800e998:	440a      	add	r2, r1
 800e99a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e99e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800e9a2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800e9a4:	68bb      	ldr	r3, [r7, #8]
 800e9a6:	015a      	lsls	r2, r3, #5
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	4413      	add	r3, r2
 800e9ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	68ba      	ldr	r2, [r7, #8]
 800e9b4:	0151      	lsls	r1, r2, #5
 800e9b6:	68fa      	ldr	r2, [r7, #12]
 800e9b8:	440a      	add	r2, r1
 800e9ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800e9be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e9c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e9ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	781b      	ldrb	r3, [r3, #0]
 800e9d0:	f003 030f 	and.w	r3, r3, #15
 800e9d4:	2101      	movs	r1, #1
 800e9d6:	fa01 f303 	lsl.w	r3, r1, r3
 800e9da:	b29b      	uxth	r3, r3
 800e9dc:	43db      	mvns	r3, r3
 800e9de:	68f9      	ldr	r1, [r7, #12]
 800e9e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800e9e4:	4013      	ands	r3, r2
 800e9e6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800e9ee:	69da      	ldr	r2, [r3, #28]
 800e9f0:	683b      	ldr	r3, [r7, #0]
 800e9f2:	781b      	ldrb	r3, [r3, #0]
 800e9f4:	f003 030f 	and.w	r3, r3, #15
 800e9f8:	2101      	movs	r1, #1
 800e9fa:	fa01 f303 	lsl.w	r3, r1, r3
 800e9fe:	b29b      	uxth	r3, r3
 800ea00:	43db      	mvns	r3, r3
 800ea02:	68f9      	ldr	r1, [r7, #12]
 800ea04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ea08:	4013      	ands	r3, r2
 800ea0a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ea0c:	68bb      	ldr	r3, [r7, #8]
 800ea0e:	015a      	lsls	r2, r3, #5
 800ea10:	68fb      	ldr	r3, [r7, #12]
 800ea12:	4413      	add	r3, r2
 800ea14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea18:	681a      	ldr	r2, [r3, #0]
 800ea1a:	68bb      	ldr	r3, [r7, #8]
 800ea1c:	0159      	lsls	r1, r3, #5
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	440b      	add	r3, r1
 800ea22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ea26:	4619      	mov	r1, r3
 800ea28:	4b35      	ldr	r3, [pc, #212]	@ (800eb00 <USB_DeactivateEndpoint+0x1b0>)
 800ea2a:	4013      	ands	r3, r2
 800ea2c:	600b      	str	r3, [r1, #0]
 800ea2e:	e060      	b.n	800eaf2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	015a      	lsls	r2, r3, #5
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	4413      	add	r3, r2
 800ea38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ea42:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ea46:	d11f      	bne.n	800ea88 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ea48:	68bb      	ldr	r3, [r7, #8]
 800ea4a:	015a      	lsls	r2, r3, #5
 800ea4c:	68fb      	ldr	r3, [r7, #12]
 800ea4e:	4413      	add	r3, r2
 800ea50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	68ba      	ldr	r2, [r7, #8]
 800ea58:	0151      	lsls	r1, r2, #5
 800ea5a:	68fa      	ldr	r2, [r7, #12]
 800ea5c:	440a      	add	r2, r1
 800ea5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ea66:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ea68:	68bb      	ldr	r3, [r7, #8]
 800ea6a:	015a      	lsls	r2, r3, #5
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	4413      	add	r3, r2
 800ea70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	68ba      	ldr	r2, [r7, #8]
 800ea78:	0151      	lsls	r1, r2, #5
 800ea7a:	68fa      	ldr	r2, [r7, #12]
 800ea7c:	440a      	add	r2, r1
 800ea7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ea82:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ea86:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ea8e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	781b      	ldrb	r3, [r3, #0]
 800ea94:	f003 030f 	and.w	r3, r3, #15
 800ea98:	2101      	movs	r1, #1
 800ea9a:	fa01 f303 	lsl.w	r3, r1, r3
 800ea9e:	041b      	lsls	r3, r3, #16
 800eaa0:	43db      	mvns	r3, r3
 800eaa2:	68f9      	ldr	r1, [r7, #12]
 800eaa4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800eaa8:	4013      	ands	r3, r2
 800eaaa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800eab2:	69da      	ldr	r2, [r3, #28]
 800eab4:	683b      	ldr	r3, [r7, #0]
 800eab6:	781b      	ldrb	r3, [r3, #0]
 800eab8:	f003 030f 	and.w	r3, r3, #15
 800eabc:	2101      	movs	r1, #1
 800eabe:	fa01 f303 	lsl.w	r3, r1, r3
 800eac2:	041b      	lsls	r3, r3, #16
 800eac4:	43db      	mvns	r3, r3
 800eac6:	68f9      	ldr	r1, [r7, #12]
 800eac8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800eacc:	4013      	ands	r3, r2
 800eace:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ead0:	68bb      	ldr	r3, [r7, #8]
 800ead2:	015a      	lsls	r2, r3, #5
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	4413      	add	r3, r2
 800ead8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eadc:	681a      	ldr	r2, [r3, #0]
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	0159      	lsls	r1, r3, #5
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	440b      	add	r3, r1
 800eae6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eaea:	4619      	mov	r1, r3
 800eaec:	4b05      	ldr	r3, [pc, #20]	@ (800eb04 <USB_DeactivateEndpoint+0x1b4>)
 800eaee:	4013      	ands	r3, r2
 800eaf0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800eaf2:	2300      	movs	r3, #0
}
 800eaf4:	4618      	mov	r0, r3
 800eaf6:	3714      	adds	r7, #20
 800eaf8:	46bd      	mov	sp, r7
 800eafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafe:	4770      	bx	lr
 800eb00:	ec337800 	.word	0xec337800
 800eb04:	eff37800 	.word	0xeff37800

0800eb08 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b08a      	sub	sp, #40	@ 0x28
 800eb0c:	af02      	add	r7, sp, #8
 800eb0e:	60f8      	str	r0, [r7, #12]
 800eb10:	60b9      	str	r1, [r7, #8]
 800eb12:	4613      	mov	r3, r2
 800eb14:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800eb1a:	68bb      	ldr	r3, [r7, #8]
 800eb1c:	781b      	ldrb	r3, [r3, #0]
 800eb1e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	785b      	ldrb	r3, [r3, #1]
 800eb24:	2b01      	cmp	r3, #1
 800eb26:	f040 8181 	bne.w	800ee2c <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	691b      	ldr	r3, [r3, #16]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d132      	bne.n	800eb98 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800eb32:	69bb      	ldr	r3, [r7, #24]
 800eb34:	015a      	lsls	r2, r3, #5
 800eb36:	69fb      	ldr	r3, [r7, #28]
 800eb38:	4413      	add	r3, r2
 800eb3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb3e:	691a      	ldr	r2, [r3, #16]
 800eb40:	69bb      	ldr	r3, [r7, #24]
 800eb42:	0159      	lsls	r1, r3, #5
 800eb44:	69fb      	ldr	r3, [r7, #28]
 800eb46:	440b      	add	r3, r1
 800eb48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb4c:	4619      	mov	r1, r3
 800eb4e:	4ba5      	ldr	r3, [pc, #660]	@ (800ede4 <USB_EPStartXfer+0x2dc>)
 800eb50:	4013      	ands	r3, r2
 800eb52:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800eb54:	69bb      	ldr	r3, [r7, #24]
 800eb56:	015a      	lsls	r2, r3, #5
 800eb58:	69fb      	ldr	r3, [r7, #28]
 800eb5a:	4413      	add	r3, r2
 800eb5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb60:	691b      	ldr	r3, [r3, #16]
 800eb62:	69ba      	ldr	r2, [r7, #24]
 800eb64:	0151      	lsls	r1, r2, #5
 800eb66:	69fa      	ldr	r2, [r7, #28]
 800eb68:	440a      	add	r2, r1
 800eb6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800eb6e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800eb72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800eb74:	69bb      	ldr	r3, [r7, #24]
 800eb76:	015a      	lsls	r2, r3, #5
 800eb78:	69fb      	ldr	r3, [r7, #28]
 800eb7a:	4413      	add	r3, r2
 800eb7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb80:	691a      	ldr	r2, [r3, #16]
 800eb82:	69bb      	ldr	r3, [r7, #24]
 800eb84:	0159      	lsls	r1, r3, #5
 800eb86:	69fb      	ldr	r3, [r7, #28]
 800eb88:	440b      	add	r3, r1
 800eb8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eb8e:	4619      	mov	r1, r3
 800eb90:	4b95      	ldr	r3, [pc, #596]	@ (800ede8 <USB_EPStartXfer+0x2e0>)
 800eb92:	4013      	ands	r3, r2
 800eb94:	610b      	str	r3, [r1, #16]
 800eb96:	e092      	b.n	800ecbe <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800eb98:	69bb      	ldr	r3, [r7, #24]
 800eb9a:	015a      	lsls	r2, r3, #5
 800eb9c:	69fb      	ldr	r3, [r7, #28]
 800eb9e:	4413      	add	r3, r2
 800eba0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800eba4:	691a      	ldr	r2, [r3, #16]
 800eba6:	69bb      	ldr	r3, [r7, #24]
 800eba8:	0159      	lsls	r1, r3, #5
 800ebaa:	69fb      	ldr	r3, [r7, #28]
 800ebac:	440b      	add	r3, r1
 800ebae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ebb2:	4619      	mov	r1, r3
 800ebb4:	4b8c      	ldr	r3, [pc, #560]	@ (800ede8 <USB_EPStartXfer+0x2e0>)
 800ebb6:	4013      	ands	r3, r2
 800ebb8:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ebba:	69bb      	ldr	r3, [r7, #24]
 800ebbc:	015a      	lsls	r2, r3, #5
 800ebbe:	69fb      	ldr	r3, [r7, #28]
 800ebc0:	4413      	add	r3, r2
 800ebc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ebc6:	691a      	ldr	r2, [r3, #16]
 800ebc8:	69bb      	ldr	r3, [r7, #24]
 800ebca:	0159      	lsls	r1, r3, #5
 800ebcc:	69fb      	ldr	r3, [r7, #28]
 800ebce:	440b      	add	r3, r1
 800ebd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ebd4:	4619      	mov	r1, r3
 800ebd6:	4b83      	ldr	r3, [pc, #524]	@ (800ede4 <USB_EPStartXfer+0x2dc>)
 800ebd8:	4013      	ands	r3, r2
 800ebda:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800ebdc:	69bb      	ldr	r3, [r7, #24]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d11a      	bne.n	800ec18 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800ebe2:	68bb      	ldr	r3, [r7, #8]
 800ebe4:	691a      	ldr	r2, [r3, #16]
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	689b      	ldr	r3, [r3, #8]
 800ebea:	429a      	cmp	r2, r3
 800ebec:	d903      	bls.n	800ebf6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800ebee:	68bb      	ldr	r3, [r7, #8]
 800ebf0:	689a      	ldr	r2, [r3, #8]
 800ebf2:	68bb      	ldr	r3, [r7, #8]
 800ebf4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ebf6:	69bb      	ldr	r3, [r7, #24]
 800ebf8:	015a      	lsls	r2, r3, #5
 800ebfa:	69fb      	ldr	r3, [r7, #28]
 800ebfc:	4413      	add	r3, r2
 800ebfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec02:	691b      	ldr	r3, [r3, #16]
 800ec04:	69ba      	ldr	r2, [r7, #24]
 800ec06:	0151      	lsls	r1, r2, #5
 800ec08:	69fa      	ldr	r2, [r7, #28]
 800ec0a:	440a      	add	r2, r1
 800ec0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ec10:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ec14:	6113      	str	r3, [r2, #16]
 800ec16:	e01b      	b.n	800ec50 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ec18:	69bb      	ldr	r3, [r7, #24]
 800ec1a:	015a      	lsls	r2, r3, #5
 800ec1c:	69fb      	ldr	r3, [r7, #28]
 800ec1e:	4413      	add	r3, r2
 800ec20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec24:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ec26:	68bb      	ldr	r3, [r7, #8]
 800ec28:	6919      	ldr	r1, [r3, #16]
 800ec2a:	68bb      	ldr	r3, [r7, #8]
 800ec2c:	689b      	ldr	r3, [r3, #8]
 800ec2e:	440b      	add	r3, r1
 800ec30:	1e59      	subs	r1, r3, #1
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	689b      	ldr	r3, [r3, #8]
 800ec36:	fbb1 f3f3 	udiv	r3, r1, r3
 800ec3a:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ec3c:	4b6b      	ldr	r3, [pc, #428]	@ (800edec <USB_EPStartXfer+0x2e4>)
 800ec3e:	400b      	ands	r3, r1
 800ec40:	69b9      	ldr	r1, [r7, #24]
 800ec42:	0148      	lsls	r0, r1, #5
 800ec44:	69f9      	ldr	r1, [r7, #28]
 800ec46:	4401      	add	r1, r0
 800ec48:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ec4c:	4313      	orrs	r3, r2
 800ec4e:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ec50:	69bb      	ldr	r3, [r7, #24]
 800ec52:	015a      	lsls	r2, r3, #5
 800ec54:	69fb      	ldr	r3, [r7, #28]
 800ec56:	4413      	add	r3, r2
 800ec58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec5c:	691a      	ldr	r2, [r3, #16]
 800ec5e:	68bb      	ldr	r3, [r7, #8]
 800ec60:	691b      	ldr	r3, [r3, #16]
 800ec62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ec66:	69b9      	ldr	r1, [r7, #24]
 800ec68:	0148      	lsls	r0, r1, #5
 800ec6a:	69f9      	ldr	r1, [r7, #28]
 800ec6c:	4401      	add	r1, r0
 800ec6e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ec72:	4313      	orrs	r3, r2
 800ec74:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	791b      	ldrb	r3, [r3, #4]
 800ec7a:	2b01      	cmp	r3, #1
 800ec7c:	d11f      	bne.n	800ecbe <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ec7e:	69bb      	ldr	r3, [r7, #24]
 800ec80:	015a      	lsls	r2, r3, #5
 800ec82:	69fb      	ldr	r3, [r7, #28]
 800ec84:	4413      	add	r3, r2
 800ec86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ec8a:	691b      	ldr	r3, [r3, #16]
 800ec8c:	69ba      	ldr	r2, [r7, #24]
 800ec8e:	0151      	lsls	r1, r2, #5
 800ec90:	69fa      	ldr	r2, [r7, #28]
 800ec92:	440a      	add	r2, r1
 800ec94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ec98:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800ec9c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ec9e:	69bb      	ldr	r3, [r7, #24]
 800eca0:	015a      	lsls	r2, r3, #5
 800eca2:	69fb      	ldr	r3, [r7, #28]
 800eca4:	4413      	add	r3, r2
 800eca6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ecaa:	691b      	ldr	r3, [r3, #16]
 800ecac:	69ba      	ldr	r2, [r7, #24]
 800ecae:	0151      	lsls	r1, r2, #5
 800ecb0:	69fa      	ldr	r2, [r7, #28]
 800ecb2:	440a      	add	r2, r1
 800ecb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ecb8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ecbc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ecbe:	79fb      	ldrb	r3, [r7, #7]
 800ecc0:	2b01      	cmp	r3, #1
 800ecc2:	d14b      	bne.n	800ed5c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ecc4:	68bb      	ldr	r3, [r7, #8]
 800ecc6:	69db      	ldr	r3, [r3, #28]
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d009      	beq.n	800ece0 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800eccc:	69bb      	ldr	r3, [r7, #24]
 800ecce:	015a      	lsls	r2, r3, #5
 800ecd0:	69fb      	ldr	r3, [r7, #28]
 800ecd2:	4413      	add	r3, r2
 800ecd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ecd8:	461a      	mov	r2, r3
 800ecda:	68bb      	ldr	r3, [r7, #8]
 800ecdc:	69db      	ldr	r3, [r3, #28]
 800ecde:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	791b      	ldrb	r3, [r3, #4]
 800ece4:	2b01      	cmp	r3, #1
 800ece6:	d128      	bne.n	800ed3a <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ece8:	69fb      	ldr	r3, [r7, #28]
 800ecea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ecee:	689b      	ldr	r3, [r3, #8]
 800ecf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d110      	bne.n	800ed1a <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ecf8:	69bb      	ldr	r3, [r7, #24]
 800ecfa:	015a      	lsls	r2, r3, #5
 800ecfc:	69fb      	ldr	r3, [r7, #28]
 800ecfe:	4413      	add	r3, r2
 800ed00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	69ba      	ldr	r2, [r7, #24]
 800ed08:	0151      	lsls	r1, r2, #5
 800ed0a:	69fa      	ldr	r2, [r7, #28]
 800ed0c:	440a      	add	r2, r1
 800ed0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ed12:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ed16:	6013      	str	r3, [r2, #0]
 800ed18:	e00f      	b.n	800ed3a <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ed1a:	69bb      	ldr	r3, [r7, #24]
 800ed1c:	015a      	lsls	r2, r3, #5
 800ed1e:	69fb      	ldr	r3, [r7, #28]
 800ed20:	4413      	add	r3, r2
 800ed22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	69ba      	ldr	r2, [r7, #24]
 800ed2a:	0151      	lsls	r1, r2, #5
 800ed2c:	69fa      	ldr	r2, [r7, #28]
 800ed2e:	440a      	add	r2, r1
 800ed30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ed34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ed38:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ed3a:	69bb      	ldr	r3, [r7, #24]
 800ed3c:	015a      	lsls	r2, r3, #5
 800ed3e:	69fb      	ldr	r3, [r7, #28]
 800ed40:	4413      	add	r3, r2
 800ed42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed46:	681b      	ldr	r3, [r3, #0]
 800ed48:	69ba      	ldr	r2, [r7, #24]
 800ed4a:	0151      	lsls	r1, r2, #5
 800ed4c:	69fa      	ldr	r2, [r7, #28]
 800ed4e:	440a      	add	r2, r1
 800ed50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ed54:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ed58:	6013      	str	r3, [r2, #0]
 800ed5a:	e16a      	b.n	800f032 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ed5c:	69bb      	ldr	r3, [r7, #24]
 800ed5e:	015a      	lsls	r2, r3, #5
 800ed60:	69fb      	ldr	r3, [r7, #28]
 800ed62:	4413      	add	r3, r2
 800ed64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	69ba      	ldr	r2, [r7, #24]
 800ed6c:	0151      	lsls	r1, r2, #5
 800ed6e:	69fa      	ldr	r2, [r7, #28]
 800ed70:	440a      	add	r2, r1
 800ed72:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ed76:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800ed7a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800ed7c:	68bb      	ldr	r3, [r7, #8]
 800ed7e:	791b      	ldrb	r3, [r3, #4]
 800ed80:	2b01      	cmp	r3, #1
 800ed82:	d015      	beq.n	800edb0 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	691b      	ldr	r3, [r3, #16]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	f000 8152 	beq.w	800f032 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800ed8e:	69fb      	ldr	r3, [r7, #28]
 800ed90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ed94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ed96:	68bb      	ldr	r3, [r7, #8]
 800ed98:	781b      	ldrb	r3, [r3, #0]
 800ed9a:	f003 030f 	and.w	r3, r3, #15
 800ed9e:	2101      	movs	r1, #1
 800eda0:	fa01 f303 	lsl.w	r3, r1, r3
 800eda4:	69f9      	ldr	r1, [r7, #28]
 800eda6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800edaa:	4313      	orrs	r3, r2
 800edac:	634b      	str	r3, [r1, #52]	@ 0x34
 800edae:	e140      	b.n	800f032 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800edb0:	69fb      	ldr	r3, [r7, #28]
 800edb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800edb6:	689b      	ldr	r3, [r3, #8]
 800edb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d117      	bne.n	800edf0 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800edc0:	69bb      	ldr	r3, [r7, #24]
 800edc2:	015a      	lsls	r2, r3, #5
 800edc4:	69fb      	ldr	r3, [r7, #28]
 800edc6:	4413      	add	r3, r2
 800edc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	69ba      	ldr	r2, [r7, #24]
 800edd0:	0151      	lsls	r1, r2, #5
 800edd2:	69fa      	ldr	r2, [r7, #28]
 800edd4:	440a      	add	r2, r1
 800edd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800edda:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800edde:	6013      	str	r3, [r2, #0]
 800ede0:	e016      	b.n	800ee10 <USB_EPStartXfer+0x308>
 800ede2:	bf00      	nop
 800ede4:	e007ffff 	.word	0xe007ffff
 800ede8:	fff80000 	.word	0xfff80000
 800edec:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800edf0:	69bb      	ldr	r3, [r7, #24]
 800edf2:	015a      	lsls	r2, r3, #5
 800edf4:	69fb      	ldr	r3, [r7, #28]
 800edf6:	4413      	add	r3, r2
 800edf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	69ba      	ldr	r2, [r7, #24]
 800ee00:	0151      	lsls	r1, r2, #5
 800ee02:	69fa      	ldr	r2, [r7, #28]
 800ee04:	440a      	add	r2, r1
 800ee06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ee0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ee0e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	68d9      	ldr	r1, [r3, #12]
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	781a      	ldrb	r2, [r3, #0]
 800ee18:	68bb      	ldr	r3, [r7, #8]
 800ee1a:	691b      	ldr	r3, [r3, #16]
 800ee1c:	b298      	uxth	r0, r3
 800ee1e:	79fb      	ldrb	r3, [r7, #7]
 800ee20:	9300      	str	r3, [sp, #0]
 800ee22:	4603      	mov	r3, r0
 800ee24:	68f8      	ldr	r0, [r7, #12]
 800ee26:	f000 f9b9 	bl	800f19c <USB_WritePacket>
 800ee2a:	e102      	b.n	800f032 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ee2c:	69bb      	ldr	r3, [r7, #24]
 800ee2e:	015a      	lsls	r2, r3, #5
 800ee30:	69fb      	ldr	r3, [r7, #28]
 800ee32:	4413      	add	r3, r2
 800ee34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee38:	691a      	ldr	r2, [r3, #16]
 800ee3a:	69bb      	ldr	r3, [r7, #24]
 800ee3c:	0159      	lsls	r1, r3, #5
 800ee3e:	69fb      	ldr	r3, [r7, #28]
 800ee40:	440b      	add	r3, r1
 800ee42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee46:	4619      	mov	r1, r3
 800ee48:	4b7c      	ldr	r3, [pc, #496]	@ (800f03c <USB_EPStartXfer+0x534>)
 800ee4a:	4013      	ands	r3, r2
 800ee4c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ee4e:	69bb      	ldr	r3, [r7, #24]
 800ee50:	015a      	lsls	r2, r3, #5
 800ee52:	69fb      	ldr	r3, [r7, #28]
 800ee54:	4413      	add	r3, r2
 800ee56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee5a:	691a      	ldr	r2, [r3, #16]
 800ee5c:	69bb      	ldr	r3, [r7, #24]
 800ee5e:	0159      	lsls	r1, r3, #5
 800ee60:	69fb      	ldr	r3, [r7, #28]
 800ee62:	440b      	add	r3, r1
 800ee64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee68:	4619      	mov	r1, r3
 800ee6a:	4b75      	ldr	r3, [pc, #468]	@ (800f040 <USB_EPStartXfer+0x538>)
 800ee6c:	4013      	ands	r3, r2
 800ee6e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800ee70:	69bb      	ldr	r3, [r7, #24]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d12f      	bne.n	800eed6 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	691b      	ldr	r3, [r3, #16]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d003      	beq.n	800ee86 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800ee7e:	68bb      	ldr	r3, [r7, #8]
 800ee80:	689a      	ldr	r2, [r3, #8]
 800ee82:	68bb      	ldr	r3, [r7, #8]
 800ee84:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	689a      	ldr	r2, [r3, #8]
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ee8e:	69bb      	ldr	r3, [r7, #24]
 800ee90:	015a      	lsls	r2, r3, #5
 800ee92:	69fb      	ldr	r3, [r7, #28]
 800ee94:	4413      	add	r3, r2
 800ee96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ee9a:	691a      	ldr	r2, [r3, #16]
 800ee9c:	68bb      	ldr	r3, [r7, #8]
 800ee9e:	6a1b      	ldr	r3, [r3, #32]
 800eea0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eea4:	69b9      	ldr	r1, [r7, #24]
 800eea6:	0148      	lsls	r0, r1, #5
 800eea8:	69f9      	ldr	r1, [r7, #28]
 800eeaa:	4401      	add	r1, r0
 800eeac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800eeb0:	4313      	orrs	r3, r2
 800eeb2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800eeb4:	69bb      	ldr	r3, [r7, #24]
 800eeb6:	015a      	lsls	r2, r3, #5
 800eeb8:	69fb      	ldr	r3, [r7, #28]
 800eeba:	4413      	add	r3, r2
 800eebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eec0:	691b      	ldr	r3, [r3, #16]
 800eec2:	69ba      	ldr	r2, [r7, #24]
 800eec4:	0151      	lsls	r1, r2, #5
 800eec6:	69fa      	ldr	r2, [r7, #28]
 800eec8:	440a      	add	r2, r1
 800eeca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800eece:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800eed2:	6113      	str	r3, [r2, #16]
 800eed4:	e05f      	b.n	800ef96 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	691b      	ldr	r3, [r3, #16]
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d123      	bne.n	800ef26 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800eede:	69bb      	ldr	r3, [r7, #24]
 800eee0:	015a      	lsls	r2, r3, #5
 800eee2:	69fb      	ldr	r3, [r7, #28]
 800eee4:	4413      	add	r3, r2
 800eee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800eeea:	691a      	ldr	r2, [r3, #16]
 800eeec:	68bb      	ldr	r3, [r7, #8]
 800eeee:	689b      	ldr	r3, [r3, #8]
 800eef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800eef4:	69b9      	ldr	r1, [r7, #24]
 800eef6:	0148      	lsls	r0, r1, #5
 800eef8:	69f9      	ldr	r1, [r7, #28]
 800eefa:	4401      	add	r1, r0
 800eefc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ef00:	4313      	orrs	r3, r2
 800ef02:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ef04:	69bb      	ldr	r3, [r7, #24]
 800ef06:	015a      	lsls	r2, r3, #5
 800ef08:	69fb      	ldr	r3, [r7, #28]
 800ef0a:	4413      	add	r3, r2
 800ef0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef10:	691b      	ldr	r3, [r3, #16]
 800ef12:	69ba      	ldr	r2, [r7, #24]
 800ef14:	0151      	lsls	r1, r2, #5
 800ef16:	69fa      	ldr	r2, [r7, #28]
 800ef18:	440a      	add	r2, r1
 800ef1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ef1e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ef22:	6113      	str	r3, [r2, #16]
 800ef24:	e037      	b.n	800ef96 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ef26:	68bb      	ldr	r3, [r7, #8]
 800ef28:	691a      	ldr	r2, [r3, #16]
 800ef2a:	68bb      	ldr	r3, [r7, #8]
 800ef2c:	689b      	ldr	r3, [r3, #8]
 800ef2e:	4413      	add	r3, r2
 800ef30:	1e5a      	subs	r2, r3, #1
 800ef32:	68bb      	ldr	r3, [r7, #8]
 800ef34:	689b      	ldr	r3, [r3, #8]
 800ef36:	fbb2 f3f3 	udiv	r3, r2, r3
 800ef3a:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800ef3c:	68bb      	ldr	r3, [r7, #8]
 800ef3e:	689b      	ldr	r3, [r3, #8]
 800ef40:	8afa      	ldrh	r2, [r7, #22]
 800ef42:	fb03 f202 	mul.w	r2, r3, r2
 800ef46:	68bb      	ldr	r3, [r7, #8]
 800ef48:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ef4a:	69bb      	ldr	r3, [r7, #24]
 800ef4c:	015a      	lsls	r2, r3, #5
 800ef4e:	69fb      	ldr	r3, [r7, #28]
 800ef50:	4413      	add	r3, r2
 800ef52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef56:	691a      	ldr	r2, [r3, #16]
 800ef58:	8afb      	ldrh	r3, [r7, #22]
 800ef5a:	04d9      	lsls	r1, r3, #19
 800ef5c:	4b39      	ldr	r3, [pc, #228]	@ (800f044 <USB_EPStartXfer+0x53c>)
 800ef5e:	400b      	ands	r3, r1
 800ef60:	69b9      	ldr	r1, [r7, #24]
 800ef62:	0148      	lsls	r0, r1, #5
 800ef64:	69f9      	ldr	r1, [r7, #28]
 800ef66:	4401      	add	r1, r0
 800ef68:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ef6c:	4313      	orrs	r3, r2
 800ef6e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ef70:	69bb      	ldr	r3, [r7, #24]
 800ef72:	015a      	lsls	r2, r3, #5
 800ef74:	69fb      	ldr	r3, [r7, #28]
 800ef76:	4413      	add	r3, r2
 800ef78:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ef7c:	691a      	ldr	r2, [r3, #16]
 800ef7e:	68bb      	ldr	r3, [r7, #8]
 800ef80:	6a1b      	ldr	r3, [r3, #32]
 800ef82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ef86:	69b9      	ldr	r1, [r7, #24]
 800ef88:	0148      	lsls	r0, r1, #5
 800ef8a:	69f9      	ldr	r1, [r7, #28]
 800ef8c:	4401      	add	r1, r0
 800ef8e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800ef92:	4313      	orrs	r3, r2
 800ef94:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800ef96:	79fb      	ldrb	r3, [r7, #7]
 800ef98:	2b01      	cmp	r3, #1
 800ef9a:	d10d      	bne.n	800efb8 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	68db      	ldr	r3, [r3, #12]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d009      	beq.n	800efb8 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	68d9      	ldr	r1, [r3, #12]
 800efa8:	69bb      	ldr	r3, [r7, #24]
 800efaa:	015a      	lsls	r2, r3, #5
 800efac:	69fb      	ldr	r3, [r7, #28]
 800efae:	4413      	add	r3, r2
 800efb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efb4:	460a      	mov	r2, r1
 800efb6:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	791b      	ldrb	r3, [r3, #4]
 800efbc:	2b01      	cmp	r3, #1
 800efbe:	d128      	bne.n	800f012 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800efc0:	69fb      	ldr	r3, [r7, #28]
 800efc2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800efc6:	689b      	ldr	r3, [r3, #8]
 800efc8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800efcc:	2b00      	cmp	r3, #0
 800efce:	d110      	bne.n	800eff2 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800efd0:	69bb      	ldr	r3, [r7, #24]
 800efd2:	015a      	lsls	r2, r3, #5
 800efd4:	69fb      	ldr	r3, [r7, #28]
 800efd6:	4413      	add	r3, r2
 800efd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	69ba      	ldr	r2, [r7, #24]
 800efe0:	0151      	lsls	r1, r2, #5
 800efe2:	69fa      	ldr	r2, [r7, #28]
 800efe4:	440a      	add	r2, r1
 800efe6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800efea:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800efee:	6013      	str	r3, [r2, #0]
 800eff0:	e00f      	b.n	800f012 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800eff2:	69bb      	ldr	r3, [r7, #24]
 800eff4:	015a      	lsls	r2, r3, #5
 800eff6:	69fb      	ldr	r3, [r7, #28]
 800eff8:	4413      	add	r3, r2
 800effa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	69ba      	ldr	r2, [r7, #24]
 800f002:	0151      	lsls	r1, r2, #5
 800f004:	69fa      	ldr	r2, [r7, #28]
 800f006:	440a      	add	r2, r1
 800f008:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f00c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f010:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800f012:	69bb      	ldr	r3, [r7, #24]
 800f014:	015a      	lsls	r2, r3, #5
 800f016:	69fb      	ldr	r3, [r7, #28]
 800f018:	4413      	add	r3, r2
 800f01a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f01e:	681b      	ldr	r3, [r3, #0]
 800f020:	69ba      	ldr	r2, [r7, #24]
 800f022:	0151      	lsls	r1, r2, #5
 800f024:	69fa      	ldr	r2, [r7, #28]
 800f026:	440a      	add	r2, r1
 800f028:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f02c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800f030:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f032:	2300      	movs	r3, #0
}
 800f034:	4618      	mov	r0, r3
 800f036:	3720      	adds	r7, #32
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}
 800f03c:	fff80000 	.word	0xfff80000
 800f040:	e007ffff 	.word	0xe007ffff
 800f044:	1ff80000 	.word	0x1ff80000

0800f048 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f048:	b480      	push	{r7}
 800f04a:	b087      	sub	sp, #28
 800f04c:	af00      	add	r7, sp, #0
 800f04e:	6078      	str	r0, [r7, #4]
 800f050:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f052:	2300      	movs	r3, #0
 800f054:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800f056:	2300      	movs	r3, #0
 800f058:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	785b      	ldrb	r3, [r3, #1]
 800f062:	2b01      	cmp	r3, #1
 800f064:	d14a      	bne.n	800f0fc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	781b      	ldrb	r3, [r3, #0]
 800f06a:	015a      	lsls	r2, r3, #5
 800f06c:	693b      	ldr	r3, [r7, #16]
 800f06e:	4413      	add	r3, r2
 800f070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f07a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f07e:	f040 8086 	bne.w	800f18e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800f082:	683b      	ldr	r3, [r7, #0]
 800f084:	781b      	ldrb	r3, [r3, #0]
 800f086:	015a      	lsls	r2, r3, #5
 800f088:	693b      	ldr	r3, [r7, #16]
 800f08a:	4413      	add	r3, r2
 800f08c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f090:	681b      	ldr	r3, [r3, #0]
 800f092:	683a      	ldr	r2, [r7, #0]
 800f094:	7812      	ldrb	r2, [r2, #0]
 800f096:	0151      	lsls	r1, r2, #5
 800f098:	693a      	ldr	r2, [r7, #16]
 800f09a:	440a      	add	r2, r1
 800f09c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f0a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f0a4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	781b      	ldrb	r3, [r3, #0]
 800f0aa:	015a      	lsls	r2, r3, #5
 800f0ac:	693b      	ldr	r3, [r7, #16]
 800f0ae:	4413      	add	r3, r2
 800f0b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f0b4:	681b      	ldr	r3, [r3, #0]
 800f0b6:	683a      	ldr	r2, [r7, #0]
 800f0b8:	7812      	ldrb	r2, [r2, #0]
 800f0ba:	0151      	lsls	r1, r2, #5
 800f0bc:	693a      	ldr	r2, [r7, #16]
 800f0be:	440a      	add	r2, r1
 800f0c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f0c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f0c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	3301      	adds	r3, #1
 800f0ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800f0d6:	4293      	cmp	r3, r2
 800f0d8:	d902      	bls.n	800f0e0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800f0da:	2301      	movs	r3, #1
 800f0dc:	75fb      	strb	r3, [r7, #23]
          break;
 800f0de:	e056      	b.n	800f18e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	781b      	ldrb	r3, [r3, #0]
 800f0e4:	015a      	lsls	r2, r3, #5
 800f0e6:	693b      	ldr	r3, [r7, #16]
 800f0e8:	4413      	add	r3, r2
 800f0ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f0f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f0f8:	d0e7      	beq.n	800f0ca <USB_EPStopXfer+0x82>
 800f0fa:	e048      	b.n	800f18e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f0fc:	683b      	ldr	r3, [r7, #0]
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	015a      	lsls	r2, r3, #5
 800f102:	693b      	ldr	r3, [r7, #16]
 800f104:	4413      	add	r3, r2
 800f106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f110:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f114:	d13b      	bne.n	800f18e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800f116:	683b      	ldr	r3, [r7, #0]
 800f118:	781b      	ldrb	r3, [r3, #0]
 800f11a:	015a      	lsls	r2, r3, #5
 800f11c:	693b      	ldr	r3, [r7, #16]
 800f11e:	4413      	add	r3, r2
 800f120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f124:	681b      	ldr	r3, [r3, #0]
 800f126:	683a      	ldr	r2, [r7, #0]
 800f128:	7812      	ldrb	r2, [r2, #0]
 800f12a:	0151      	lsls	r1, r2, #5
 800f12c:	693a      	ldr	r2, [r7, #16]
 800f12e:	440a      	add	r2, r1
 800f130:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f134:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800f138:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800f13a:	683b      	ldr	r3, [r7, #0]
 800f13c:	781b      	ldrb	r3, [r3, #0]
 800f13e:	015a      	lsls	r2, r3, #5
 800f140:	693b      	ldr	r3, [r7, #16]
 800f142:	4413      	add	r3, r2
 800f144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	683a      	ldr	r2, [r7, #0]
 800f14c:	7812      	ldrb	r2, [r2, #0]
 800f14e:	0151      	lsls	r1, r2, #5
 800f150:	693a      	ldr	r2, [r7, #16]
 800f152:	440a      	add	r2, r1
 800f154:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f158:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f15c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	3301      	adds	r3, #1
 800f162:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800f164:	68fb      	ldr	r3, [r7, #12]
 800f166:	f242 7210 	movw	r2, #10000	@ 0x2710
 800f16a:	4293      	cmp	r3, r2
 800f16c:	d902      	bls.n	800f174 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800f16e:	2301      	movs	r3, #1
 800f170:	75fb      	strb	r3, [r7, #23]
          break;
 800f172:	e00c      	b.n	800f18e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800f174:	683b      	ldr	r3, [r7, #0]
 800f176:	781b      	ldrb	r3, [r3, #0]
 800f178:	015a      	lsls	r2, r3, #5
 800f17a:	693b      	ldr	r3, [r7, #16]
 800f17c:	4413      	add	r3, r2
 800f17e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f188:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f18c:	d0e7      	beq.n	800f15e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800f18e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f190:	4618      	mov	r0, r3
 800f192:	371c      	adds	r7, #28
 800f194:	46bd      	mov	sp, r7
 800f196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19a:	4770      	bx	lr

0800f19c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800f19c:	b480      	push	{r7}
 800f19e:	b089      	sub	sp, #36	@ 0x24
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	60f8      	str	r0, [r7, #12]
 800f1a4:	60b9      	str	r1, [r7, #8]
 800f1a6:	4611      	mov	r1, r2
 800f1a8:	461a      	mov	r2, r3
 800f1aa:	460b      	mov	r3, r1
 800f1ac:	71fb      	strb	r3, [r7, #7]
 800f1ae:	4613      	mov	r3, r2
 800f1b0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800f1ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d123      	bne.n	800f20a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800f1c2:	88bb      	ldrh	r3, [r7, #4]
 800f1c4:	3303      	adds	r3, #3
 800f1c6:	089b      	lsrs	r3, r3, #2
 800f1c8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	61bb      	str	r3, [r7, #24]
 800f1ce:	e018      	b.n	800f202 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800f1d0:	79fb      	ldrb	r3, [r7, #7]
 800f1d2:	031a      	lsls	r2, r3, #12
 800f1d4:	697b      	ldr	r3, [r7, #20]
 800f1d6:	4413      	add	r3, r2
 800f1d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f1dc:	461a      	mov	r2, r3
 800f1de:	69fb      	ldr	r3, [r7, #28]
 800f1e0:	681b      	ldr	r3, [r3, #0]
 800f1e2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800f1e4:	69fb      	ldr	r3, [r7, #28]
 800f1e6:	3301      	adds	r3, #1
 800f1e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f1ea:	69fb      	ldr	r3, [r7, #28]
 800f1ec:	3301      	adds	r3, #1
 800f1ee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f1f0:	69fb      	ldr	r3, [r7, #28]
 800f1f2:	3301      	adds	r3, #1
 800f1f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800f1f6:	69fb      	ldr	r3, [r7, #28]
 800f1f8:	3301      	adds	r3, #1
 800f1fa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800f1fc:	69bb      	ldr	r3, [r7, #24]
 800f1fe:	3301      	adds	r3, #1
 800f200:	61bb      	str	r3, [r7, #24]
 800f202:	69ba      	ldr	r2, [r7, #24]
 800f204:	693b      	ldr	r3, [r7, #16]
 800f206:	429a      	cmp	r2, r3
 800f208:	d3e2      	bcc.n	800f1d0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800f20a:	2300      	movs	r3, #0
}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3724      	adds	r7, #36	@ 0x24
 800f210:	46bd      	mov	sp, r7
 800f212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f216:	4770      	bx	lr

0800f218 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800f218:	b480      	push	{r7}
 800f21a:	b08b      	sub	sp, #44	@ 0x2c
 800f21c:	af00      	add	r7, sp, #0
 800f21e:	60f8      	str	r0, [r7, #12]
 800f220:	60b9      	str	r1, [r7, #8]
 800f222:	4613      	mov	r3, r2
 800f224:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800f22e:	88fb      	ldrh	r3, [r7, #6]
 800f230:	089b      	lsrs	r3, r3, #2
 800f232:	b29b      	uxth	r3, r3
 800f234:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800f236:	88fb      	ldrh	r3, [r7, #6]
 800f238:	f003 0303 	and.w	r3, r3, #3
 800f23c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800f23e:	2300      	movs	r3, #0
 800f240:	623b      	str	r3, [r7, #32]
 800f242:	e014      	b.n	800f26e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800f244:	69bb      	ldr	r3, [r7, #24]
 800f246:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f24a:	681a      	ldr	r2, [r3, #0]
 800f24c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f24e:	601a      	str	r2, [r3, #0]
    pDest++;
 800f250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f252:	3301      	adds	r3, #1
 800f254:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f258:	3301      	adds	r3, #1
 800f25a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f25e:	3301      	adds	r3, #1
 800f260:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800f262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f264:	3301      	adds	r3, #1
 800f266:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800f268:	6a3b      	ldr	r3, [r7, #32]
 800f26a:	3301      	adds	r3, #1
 800f26c:	623b      	str	r3, [r7, #32]
 800f26e:	6a3a      	ldr	r2, [r7, #32]
 800f270:	697b      	ldr	r3, [r7, #20]
 800f272:	429a      	cmp	r2, r3
 800f274:	d3e6      	bcc.n	800f244 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800f276:	8bfb      	ldrh	r3, [r7, #30]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d01e      	beq.n	800f2ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800f27c:	2300      	movs	r3, #0
 800f27e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800f280:	69bb      	ldr	r3, [r7, #24]
 800f282:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800f286:	461a      	mov	r2, r3
 800f288:	f107 0310 	add.w	r3, r7, #16
 800f28c:	6812      	ldr	r2, [r2, #0]
 800f28e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800f290:	693a      	ldr	r2, [r7, #16]
 800f292:	6a3b      	ldr	r3, [r7, #32]
 800f294:	b2db      	uxtb	r3, r3
 800f296:	00db      	lsls	r3, r3, #3
 800f298:	fa22 f303 	lsr.w	r3, r2, r3
 800f29c:	b2da      	uxtb	r2, r3
 800f29e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2a0:	701a      	strb	r2, [r3, #0]
      i++;
 800f2a2:	6a3b      	ldr	r3, [r7, #32]
 800f2a4:	3301      	adds	r3, #1
 800f2a6:	623b      	str	r3, [r7, #32]
      pDest++;
 800f2a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f2aa:	3301      	adds	r3, #1
 800f2ac:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800f2ae:	8bfb      	ldrh	r3, [r7, #30]
 800f2b0:	3b01      	subs	r3, #1
 800f2b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800f2b4:	8bfb      	ldrh	r3, [r7, #30]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d1ea      	bne.n	800f290 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800f2ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f2bc:	4618      	mov	r0, r3
 800f2be:	372c      	adds	r7, #44	@ 0x2c
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c6:	4770      	bx	lr

0800f2c8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b085      	sub	sp, #20
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f2d6:	683b      	ldr	r3, [r7, #0]
 800f2d8:	781b      	ldrb	r3, [r3, #0]
 800f2da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	785b      	ldrb	r3, [r3, #1]
 800f2e0:	2b01      	cmp	r3, #1
 800f2e2:	d12c      	bne.n	800f33e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f2e4:	68bb      	ldr	r3, [r7, #8]
 800f2e6:	015a      	lsls	r2, r3, #5
 800f2e8:	68fb      	ldr	r3, [r7, #12]
 800f2ea:	4413      	add	r3, r2
 800f2ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f2f0:	681b      	ldr	r3, [r3, #0]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	db12      	blt.n	800f31c <USB_EPSetStall+0x54>
 800f2f6:	68bb      	ldr	r3, [r7, #8]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d00f      	beq.n	800f31c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800f2fc:	68bb      	ldr	r3, [r7, #8]
 800f2fe:	015a      	lsls	r2, r3, #5
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	4413      	add	r3, r2
 800f304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	68ba      	ldr	r2, [r7, #8]
 800f30c:	0151      	lsls	r1, r2, #5
 800f30e:	68fa      	ldr	r2, [r7, #12]
 800f310:	440a      	add	r2, r1
 800f312:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f316:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f31a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	015a      	lsls	r2, r3, #5
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	4413      	add	r3, r2
 800f324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	68ba      	ldr	r2, [r7, #8]
 800f32c:	0151      	lsls	r1, r2, #5
 800f32e:	68fa      	ldr	r2, [r7, #12]
 800f330:	440a      	add	r2, r1
 800f332:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f336:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f33a:	6013      	str	r3, [r2, #0]
 800f33c:	e02b      	b.n	800f396 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	015a      	lsls	r2, r3, #5
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	4413      	add	r3, r2
 800f346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	db12      	blt.n	800f376 <USB_EPSetStall+0xae>
 800f350:	68bb      	ldr	r3, [r7, #8]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d00f      	beq.n	800f376 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	015a      	lsls	r2, r3, #5
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	4413      	add	r3, r2
 800f35e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	68ba      	ldr	r2, [r7, #8]
 800f366:	0151      	lsls	r1, r2, #5
 800f368:	68fa      	ldr	r2, [r7, #12]
 800f36a:	440a      	add	r2, r1
 800f36c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f370:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800f374:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800f376:	68bb      	ldr	r3, [r7, #8]
 800f378:	015a      	lsls	r2, r3, #5
 800f37a:	68fb      	ldr	r3, [r7, #12]
 800f37c:	4413      	add	r3, r2
 800f37e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	68ba      	ldr	r2, [r7, #8]
 800f386:	0151      	lsls	r1, r2, #5
 800f388:	68fa      	ldr	r2, [r7, #12]
 800f38a:	440a      	add	r2, r1
 800f38c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f390:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f394:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f396:	2300      	movs	r3, #0
}
 800f398:	4618      	mov	r0, r3
 800f39a:	3714      	adds	r7, #20
 800f39c:	46bd      	mov	sp, r7
 800f39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3a2:	4770      	bx	lr

0800f3a4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800f3a4:	b480      	push	{r7}
 800f3a6:	b085      	sub	sp, #20
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
 800f3ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	781b      	ldrb	r3, [r3, #0]
 800f3b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f3b8:	683b      	ldr	r3, [r7, #0]
 800f3ba:	785b      	ldrb	r3, [r3, #1]
 800f3bc:	2b01      	cmp	r3, #1
 800f3be:	d128      	bne.n	800f412 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f3c0:	68bb      	ldr	r3, [r7, #8]
 800f3c2:	015a      	lsls	r2, r3, #5
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	4413      	add	r3, r2
 800f3c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	68ba      	ldr	r2, [r7, #8]
 800f3d0:	0151      	lsls	r1, r2, #5
 800f3d2:	68fa      	ldr	r2, [r7, #12]
 800f3d4:	440a      	add	r2, r1
 800f3d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f3da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f3de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	791b      	ldrb	r3, [r3, #4]
 800f3e4:	2b03      	cmp	r3, #3
 800f3e6:	d003      	beq.n	800f3f0 <USB_EPClearStall+0x4c>
 800f3e8:	683b      	ldr	r3, [r7, #0]
 800f3ea:	791b      	ldrb	r3, [r3, #4]
 800f3ec:	2b02      	cmp	r3, #2
 800f3ee:	d138      	bne.n	800f462 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f3f0:	68bb      	ldr	r3, [r7, #8]
 800f3f2:	015a      	lsls	r2, r3, #5
 800f3f4:	68fb      	ldr	r3, [r7, #12]
 800f3f6:	4413      	add	r3, r2
 800f3f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f3fc:	681b      	ldr	r3, [r3, #0]
 800f3fe:	68ba      	ldr	r2, [r7, #8]
 800f400:	0151      	lsls	r1, r2, #5
 800f402:	68fa      	ldr	r2, [r7, #12]
 800f404:	440a      	add	r2, r1
 800f406:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800f40a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f40e:	6013      	str	r3, [r2, #0]
 800f410:	e027      	b.n	800f462 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f412:	68bb      	ldr	r3, [r7, #8]
 800f414:	015a      	lsls	r2, r3, #5
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	4413      	add	r3, r2
 800f41a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	68ba      	ldr	r2, [r7, #8]
 800f422:	0151      	lsls	r1, r2, #5
 800f424:	68fa      	ldr	r2, [r7, #12]
 800f426:	440a      	add	r2, r1
 800f428:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f42c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800f430:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	791b      	ldrb	r3, [r3, #4]
 800f436:	2b03      	cmp	r3, #3
 800f438:	d003      	beq.n	800f442 <USB_EPClearStall+0x9e>
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	791b      	ldrb	r3, [r3, #4]
 800f43e:	2b02      	cmp	r3, #2
 800f440:	d10f      	bne.n	800f462 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800f442:	68bb      	ldr	r3, [r7, #8]
 800f444:	015a      	lsls	r2, r3, #5
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	4413      	add	r3, r2
 800f44a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	68ba      	ldr	r2, [r7, #8]
 800f452:	0151      	lsls	r1, r2, #5
 800f454:	68fa      	ldr	r2, [r7, #12]
 800f456:	440a      	add	r2, r1
 800f458:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f45c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f460:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800f462:	2300      	movs	r3, #0
}
 800f464:	4618      	mov	r0, r3
 800f466:	3714      	adds	r7, #20
 800f468:	46bd      	mov	sp, r7
 800f46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46e:	4770      	bx	lr

0800f470 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800f470:	b480      	push	{r7}
 800f472:	b085      	sub	sp, #20
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
 800f478:	460b      	mov	r3, r1
 800f47a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	68fa      	ldr	r2, [r7, #12]
 800f48a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f48e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800f492:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800f494:	68fb      	ldr	r3, [r7, #12]
 800f496:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f49a:	681a      	ldr	r2, [r3, #0]
 800f49c:	78fb      	ldrb	r3, [r7, #3]
 800f49e:	011b      	lsls	r3, r3, #4
 800f4a0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800f4a4:	68f9      	ldr	r1, [r7, #12]
 800f4a6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800f4aa:	4313      	orrs	r3, r2
 800f4ac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800f4ae:	2300      	movs	r3, #0
}
 800f4b0:	4618      	mov	r0, r3
 800f4b2:	3714      	adds	r7, #20
 800f4b4:	46bd      	mov	sp, r7
 800f4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ba:	4770      	bx	lr

0800f4bc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f4bc:	b480      	push	{r7}
 800f4be:	b085      	sub	sp, #20
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f4c8:	68fb      	ldr	r3, [r7, #12]
 800f4ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	68fa      	ldr	r2, [r7, #12]
 800f4d2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f4d6:	f023 0303 	bic.w	r3, r3, #3
 800f4da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f4e2:	685b      	ldr	r3, [r3, #4]
 800f4e4:	68fa      	ldr	r2, [r7, #12]
 800f4e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f4ea:	f023 0302 	bic.w	r3, r3, #2
 800f4ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f4f0:	2300      	movs	r3, #0
}
 800f4f2:	4618      	mov	r0, r3
 800f4f4:	3714      	adds	r7, #20
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fc:	4770      	bx	lr

0800f4fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800f4fe:	b480      	push	{r7}
 800f500:	b085      	sub	sp, #20
 800f502:	af00      	add	r7, sp, #0
 800f504:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	68fa      	ldr	r2, [r7, #12]
 800f514:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f518:	f023 0303 	bic.w	r3, r3, #3
 800f51c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f524:	685b      	ldr	r3, [r3, #4]
 800f526:	68fa      	ldr	r2, [r7, #12]
 800f528:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f52c:	f043 0302 	orr.w	r3, r3, #2
 800f530:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f532:	2300      	movs	r3, #0
}
 800f534:	4618      	mov	r0, r3
 800f536:	3714      	adds	r7, #20
 800f538:	46bd      	mov	sp, r7
 800f53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f53e:	4770      	bx	lr

0800f540 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800f540:	b480      	push	{r7}
 800f542:	b085      	sub	sp, #20
 800f544:	af00      	add	r7, sp, #0
 800f546:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	695b      	ldr	r3, [r3, #20]
 800f54c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	699b      	ldr	r3, [r3, #24]
 800f552:	68fa      	ldr	r2, [r7, #12]
 800f554:	4013      	ands	r3, r2
 800f556:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800f558:	68fb      	ldr	r3, [r7, #12]
}
 800f55a:	4618      	mov	r0, r3
 800f55c:	3714      	adds	r7, #20
 800f55e:	46bd      	mov	sp, r7
 800f560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f564:	4770      	bx	lr

0800f566 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f566:	b480      	push	{r7}
 800f568:	b085      	sub	sp, #20
 800f56a:	af00      	add	r7, sp, #0
 800f56c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f572:	68fb      	ldr	r3, [r7, #12]
 800f574:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f578:	699b      	ldr	r3, [r3, #24]
 800f57a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f57c:	68fb      	ldr	r3, [r7, #12]
 800f57e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f582:	69db      	ldr	r3, [r3, #28]
 800f584:	68ba      	ldr	r2, [r7, #8]
 800f586:	4013      	ands	r3, r2
 800f588:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800f58a:	68bb      	ldr	r3, [r7, #8]
 800f58c:	0c1b      	lsrs	r3, r3, #16
}
 800f58e:	4618      	mov	r0, r3
 800f590:	3714      	adds	r7, #20
 800f592:	46bd      	mov	sp, r7
 800f594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f598:	4770      	bx	lr

0800f59a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800f59a:	b480      	push	{r7}
 800f59c:	b085      	sub	sp, #20
 800f59e:	af00      	add	r7, sp, #0
 800f5a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800f5a6:	68fb      	ldr	r3, [r7, #12]
 800f5a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f5ac:	699b      	ldr	r3, [r3, #24]
 800f5ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f5b6:	69db      	ldr	r3, [r3, #28]
 800f5b8:	68ba      	ldr	r2, [r7, #8]
 800f5ba:	4013      	ands	r3, r2
 800f5bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800f5be:	68bb      	ldr	r3, [r7, #8]
 800f5c0:	b29b      	uxth	r3, r3
}
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	3714      	adds	r7, #20
 800f5c6:	46bd      	mov	sp, r7
 800f5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5cc:	4770      	bx	lr

0800f5ce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f5ce:	b480      	push	{r7}
 800f5d0:	b085      	sub	sp, #20
 800f5d2:	af00      	add	r7, sp, #0
 800f5d4:	6078      	str	r0, [r7, #4]
 800f5d6:	460b      	mov	r3, r1
 800f5d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800f5de:	78fb      	ldrb	r3, [r7, #3]
 800f5e0:	015a      	lsls	r2, r3, #5
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	4413      	add	r3, r2
 800f5e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f5ea:	689b      	ldr	r3, [r3, #8]
 800f5ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f5f4:	695b      	ldr	r3, [r3, #20]
 800f5f6:	68ba      	ldr	r2, [r7, #8]
 800f5f8:	4013      	ands	r3, r2
 800f5fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f5fc:	68bb      	ldr	r3, [r7, #8]
}
 800f5fe:	4618      	mov	r0, r3
 800f600:	3714      	adds	r7, #20
 800f602:	46bd      	mov	sp, r7
 800f604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f608:	4770      	bx	lr

0800f60a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800f60a:	b480      	push	{r7}
 800f60c:	b087      	sub	sp, #28
 800f60e:	af00      	add	r7, sp, #0
 800f610:	6078      	str	r0, [r7, #4]
 800f612:	460b      	mov	r3, r1
 800f614:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f620:	691b      	ldr	r3, [r3, #16]
 800f622:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800f624:	697b      	ldr	r3, [r7, #20]
 800f626:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f62a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f62c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800f62e:	78fb      	ldrb	r3, [r7, #3]
 800f630:	f003 030f 	and.w	r3, r3, #15
 800f634:	68fa      	ldr	r2, [r7, #12]
 800f636:	fa22 f303 	lsr.w	r3, r2, r3
 800f63a:	01db      	lsls	r3, r3, #7
 800f63c:	b2db      	uxtb	r3, r3
 800f63e:	693a      	ldr	r2, [r7, #16]
 800f640:	4313      	orrs	r3, r2
 800f642:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800f644:	78fb      	ldrb	r3, [r7, #3]
 800f646:	015a      	lsls	r2, r3, #5
 800f648:	697b      	ldr	r3, [r7, #20]
 800f64a:	4413      	add	r3, r2
 800f64c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f650:	689b      	ldr	r3, [r3, #8]
 800f652:	693a      	ldr	r2, [r7, #16]
 800f654:	4013      	ands	r3, r2
 800f656:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800f658:	68bb      	ldr	r3, [r7, #8]
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	371c      	adds	r7, #28
 800f65e:	46bd      	mov	sp, r7
 800f660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f664:	4770      	bx	lr

0800f666 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800f666:	b480      	push	{r7}
 800f668:	b083      	sub	sp, #12
 800f66a:	af00      	add	r7, sp, #0
 800f66c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	695b      	ldr	r3, [r3, #20]
 800f672:	f003 0301 	and.w	r3, r3, #1
}
 800f676:	4618      	mov	r0, r3
 800f678:	370c      	adds	r7, #12
 800f67a:	46bd      	mov	sp, r7
 800f67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f680:	4770      	bx	lr
	...

0800f684 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800f684:	b480      	push	{r7}
 800f686:	b085      	sub	sp, #20
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800f690:	68fb      	ldr	r3, [r7, #12]
 800f692:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f696:	681a      	ldr	r2, [r3, #0]
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800f69e:	4619      	mov	r1, r3
 800f6a0:	4b09      	ldr	r3, [pc, #36]	@ (800f6c8 <USB_ActivateSetup+0x44>)
 800f6a2:	4013      	ands	r3, r2
 800f6a4:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800f6ac:	685b      	ldr	r3, [r3, #4]
 800f6ae:	68fa      	ldr	r2, [r7, #12]
 800f6b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800f6b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f6b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800f6ba:	2300      	movs	r3, #0
}
 800f6bc:	4618      	mov	r0, r3
 800f6be:	3714      	adds	r7, #20
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6c6:	4770      	bx	lr
 800f6c8:	fffff800 	.word	0xfffff800

0800f6cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800f6cc:	b480      	push	{r7}
 800f6ce:	b087      	sub	sp, #28
 800f6d0:	af00      	add	r7, sp, #0
 800f6d2:	60f8      	str	r0, [r7, #12]
 800f6d4:	460b      	mov	r3, r1
 800f6d6:	607a      	str	r2, [r7, #4]
 800f6d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f6da:	68fb      	ldr	r3, [r7, #12]
 800f6dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	333c      	adds	r3, #60	@ 0x3c
 800f6e2:	3304      	adds	r3, #4
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800f6e8:	693b      	ldr	r3, [r7, #16]
 800f6ea:	4a26      	ldr	r2, [pc, #152]	@ (800f784 <USB_EP0_OutStart+0xb8>)
 800f6ec:	4293      	cmp	r3, r2
 800f6ee:	d90a      	bls.n	800f706 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f6f0:	697b      	ldr	r3, [r7, #20]
 800f6f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f6f6:	681b      	ldr	r3, [r3, #0]
 800f6f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800f6fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800f700:	d101      	bne.n	800f706 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800f702:	2300      	movs	r3, #0
 800f704:	e037      	b.n	800f776 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f70c:	461a      	mov	r2, r3
 800f70e:	2300      	movs	r3, #0
 800f710:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800f712:	697b      	ldr	r3, [r7, #20]
 800f714:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f718:	691b      	ldr	r3, [r3, #16]
 800f71a:	697a      	ldr	r2, [r7, #20]
 800f71c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f720:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f724:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800f726:	697b      	ldr	r3, [r7, #20]
 800f728:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f72c:	691b      	ldr	r3, [r3, #16]
 800f72e:	697a      	ldr	r2, [r7, #20]
 800f730:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f734:	f043 0318 	orr.w	r3, r3, #24
 800f738:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f740:	691b      	ldr	r3, [r3, #16]
 800f742:	697a      	ldr	r2, [r7, #20]
 800f744:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f748:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800f74c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800f74e:	7afb      	ldrb	r3, [r7, #11]
 800f750:	2b01      	cmp	r3, #1
 800f752:	d10f      	bne.n	800f774 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f75a:	461a      	mov	r2, r3
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800f760:	697b      	ldr	r3, [r7, #20]
 800f762:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	697a      	ldr	r2, [r7, #20]
 800f76a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800f76e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800f772:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800f774:	2300      	movs	r3, #0
}
 800f776:	4618      	mov	r0, r3
 800f778:	371c      	adds	r7, #28
 800f77a:	46bd      	mov	sp, r7
 800f77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f780:	4770      	bx	lr
 800f782:	bf00      	nop
 800f784:	4f54300a 	.word	0x4f54300a

0800f788 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800f788:	b480      	push	{r7}
 800f78a:	b085      	sub	sp, #20
 800f78c:	af00      	add	r7, sp, #0
 800f78e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f790:	2300      	movs	r3, #0
 800f792:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f794:	68fb      	ldr	r3, [r7, #12]
 800f796:	3301      	adds	r3, #1
 800f798:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f7a0:	d901      	bls.n	800f7a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800f7a2:	2303      	movs	r3, #3
 800f7a4:	e01b      	b.n	800f7de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	691b      	ldr	r3, [r3, #16]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	daf2      	bge.n	800f794 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	691b      	ldr	r3, [r3, #16]
 800f7b6:	f043 0201 	orr.w	r2, r3, #1
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	3301      	adds	r3, #1
 800f7c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800f7ca:	d901      	bls.n	800f7d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800f7cc:	2303      	movs	r3, #3
 800f7ce:	e006      	b.n	800f7de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	691b      	ldr	r3, [r3, #16]
 800f7d4:	f003 0301 	and.w	r3, r3, #1
 800f7d8:	2b01      	cmp	r3, #1
 800f7da:	d0f0      	beq.n	800f7be <USB_CoreReset+0x36>

  return HAL_OK;
 800f7dc:	2300      	movs	r3, #0
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3714      	adds	r7, #20
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e8:	4770      	bx	lr
	...

0800f7ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b084      	sub	sp, #16
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
 800f7f4:	460b      	mov	r3, r1
 800f7f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800f7f8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800f7fc:	f002 fc98 	bl	8012130 <USBD_static_malloc>
 800f800:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	2b00      	cmp	r3, #0
 800f806:	d109      	bne.n	800f81c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	32b0      	adds	r2, #176	@ 0xb0
 800f812:	2100      	movs	r1, #0
 800f814:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800f818:	2302      	movs	r3, #2
 800f81a:	e0d4      	b.n	800f9c6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800f81c:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800f820:	2100      	movs	r1, #0
 800f822:	68f8      	ldr	r0, [r7, #12]
 800f824:	f003 fa05 	bl	8012c32 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	32b0      	adds	r2, #176	@ 0xb0
 800f832:	68f9      	ldr	r1, [r7, #12]
 800f834:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	32b0      	adds	r2, #176	@ 0xb0
 800f842:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	7c1b      	ldrb	r3, [r3, #16]
 800f850:	2b00      	cmp	r3, #0
 800f852:	d138      	bne.n	800f8c6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f854:	4b5e      	ldr	r3, [pc, #376]	@ (800f9d0 <USBD_CDC_Init+0x1e4>)
 800f856:	7819      	ldrb	r1, [r3, #0]
 800f858:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f85c:	2202      	movs	r2, #2
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f002 fb43 	bl	8011eea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f864:	4b5a      	ldr	r3, [pc, #360]	@ (800f9d0 <USBD_CDC_Init+0x1e4>)
 800f866:	781b      	ldrb	r3, [r3, #0]
 800f868:	f003 020f 	and.w	r2, r3, #15
 800f86c:	6879      	ldr	r1, [r7, #4]
 800f86e:	4613      	mov	r3, r2
 800f870:	009b      	lsls	r3, r3, #2
 800f872:	4413      	add	r3, r2
 800f874:	009b      	lsls	r3, r3, #2
 800f876:	440b      	add	r3, r1
 800f878:	3324      	adds	r3, #36	@ 0x24
 800f87a:	2201      	movs	r2, #1
 800f87c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f87e:	4b55      	ldr	r3, [pc, #340]	@ (800f9d4 <USBD_CDC_Init+0x1e8>)
 800f880:	7819      	ldrb	r1, [r3, #0]
 800f882:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f886:	2202      	movs	r2, #2
 800f888:	6878      	ldr	r0, [r7, #4]
 800f88a:	f002 fb2e 	bl	8011eea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f88e:	4b51      	ldr	r3, [pc, #324]	@ (800f9d4 <USBD_CDC_Init+0x1e8>)
 800f890:	781b      	ldrb	r3, [r3, #0]
 800f892:	f003 020f 	and.w	r2, r3, #15
 800f896:	6879      	ldr	r1, [r7, #4]
 800f898:	4613      	mov	r3, r2
 800f89a:	009b      	lsls	r3, r3, #2
 800f89c:	4413      	add	r3, r2
 800f89e:	009b      	lsls	r3, r3, #2
 800f8a0:	440b      	add	r3, r1
 800f8a2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f8a6:	2201      	movs	r2, #1
 800f8a8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800f8aa:	4b4b      	ldr	r3, [pc, #300]	@ (800f9d8 <USBD_CDC_Init+0x1ec>)
 800f8ac:	781b      	ldrb	r3, [r3, #0]
 800f8ae:	f003 020f 	and.w	r2, r3, #15
 800f8b2:	6879      	ldr	r1, [r7, #4]
 800f8b4:	4613      	mov	r3, r2
 800f8b6:	009b      	lsls	r3, r3, #2
 800f8b8:	4413      	add	r3, r2
 800f8ba:	009b      	lsls	r3, r3, #2
 800f8bc:	440b      	add	r3, r1
 800f8be:	3326      	adds	r3, #38	@ 0x26
 800f8c0:	2210      	movs	r2, #16
 800f8c2:	801a      	strh	r2, [r3, #0]
 800f8c4:	e035      	b.n	800f932 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800f8c6:	4b42      	ldr	r3, [pc, #264]	@ (800f9d0 <USBD_CDC_Init+0x1e4>)
 800f8c8:	7819      	ldrb	r1, [r3, #0]
 800f8ca:	2340      	movs	r3, #64	@ 0x40
 800f8cc:	2202      	movs	r2, #2
 800f8ce:	6878      	ldr	r0, [r7, #4]
 800f8d0:	f002 fb0b 	bl	8011eea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800f8d4:	4b3e      	ldr	r3, [pc, #248]	@ (800f9d0 <USBD_CDC_Init+0x1e4>)
 800f8d6:	781b      	ldrb	r3, [r3, #0]
 800f8d8:	f003 020f 	and.w	r2, r3, #15
 800f8dc:	6879      	ldr	r1, [r7, #4]
 800f8de:	4613      	mov	r3, r2
 800f8e0:	009b      	lsls	r3, r3, #2
 800f8e2:	4413      	add	r3, r2
 800f8e4:	009b      	lsls	r3, r3, #2
 800f8e6:	440b      	add	r3, r1
 800f8e8:	3324      	adds	r3, #36	@ 0x24
 800f8ea:	2201      	movs	r2, #1
 800f8ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800f8ee:	4b39      	ldr	r3, [pc, #228]	@ (800f9d4 <USBD_CDC_Init+0x1e8>)
 800f8f0:	7819      	ldrb	r1, [r3, #0]
 800f8f2:	2340      	movs	r3, #64	@ 0x40
 800f8f4:	2202      	movs	r2, #2
 800f8f6:	6878      	ldr	r0, [r7, #4]
 800f8f8:	f002 faf7 	bl	8011eea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800f8fc:	4b35      	ldr	r3, [pc, #212]	@ (800f9d4 <USBD_CDC_Init+0x1e8>)
 800f8fe:	781b      	ldrb	r3, [r3, #0]
 800f900:	f003 020f 	and.w	r2, r3, #15
 800f904:	6879      	ldr	r1, [r7, #4]
 800f906:	4613      	mov	r3, r2
 800f908:	009b      	lsls	r3, r3, #2
 800f90a:	4413      	add	r3, r2
 800f90c:	009b      	lsls	r3, r3, #2
 800f90e:	440b      	add	r3, r1
 800f910:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800f914:	2201      	movs	r2, #1
 800f916:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800f918:	4b2f      	ldr	r3, [pc, #188]	@ (800f9d8 <USBD_CDC_Init+0x1ec>)
 800f91a:	781b      	ldrb	r3, [r3, #0]
 800f91c:	f003 020f 	and.w	r2, r3, #15
 800f920:	6879      	ldr	r1, [r7, #4]
 800f922:	4613      	mov	r3, r2
 800f924:	009b      	lsls	r3, r3, #2
 800f926:	4413      	add	r3, r2
 800f928:	009b      	lsls	r3, r3, #2
 800f92a:	440b      	add	r3, r1
 800f92c:	3326      	adds	r3, #38	@ 0x26
 800f92e:	2210      	movs	r2, #16
 800f930:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800f932:	4b29      	ldr	r3, [pc, #164]	@ (800f9d8 <USBD_CDC_Init+0x1ec>)
 800f934:	7819      	ldrb	r1, [r3, #0]
 800f936:	2308      	movs	r3, #8
 800f938:	2203      	movs	r2, #3
 800f93a:	6878      	ldr	r0, [r7, #4]
 800f93c:	f002 fad5 	bl	8011eea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800f940:	4b25      	ldr	r3, [pc, #148]	@ (800f9d8 <USBD_CDC_Init+0x1ec>)
 800f942:	781b      	ldrb	r3, [r3, #0]
 800f944:	f003 020f 	and.w	r2, r3, #15
 800f948:	6879      	ldr	r1, [r7, #4]
 800f94a:	4613      	mov	r3, r2
 800f94c:	009b      	lsls	r3, r3, #2
 800f94e:	4413      	add	r3, r2
 800f950:	009b      	lsls	r3, r3, #2
 800f952:	440b      	add	r3, r1
 800f954:	3324      	adds	r3, #36	@ 0x24
 800f956:	2201      	movs	r2, #1
 800f958:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	2200      	movs	r2, #0
 800f95e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800f968:	687a      	ldr	r2, [r7, #4]
 800f96a:	33b0      	adds	r3, #176	@ 0xb0
 800f96c:	009b      	lsls	r3, r3, #2
 800f96e:	4413      	add	r3, r2
 800f970:	685b      	ldr	r3, [r3, #4]
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	2200      	movs	r2, #0
 800f97a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	2200      	movs	r2, #0
 800f982:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800f986:	68fb      	ldr	r3, [r7, #12]
 800f988:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d101      	bne.n	800f994 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800f990:	2302      	movs	r3, #2
 800f992:	e018      	b.n	800f9c6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	7c1b      	ldrb	r3, [r3, #16]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d10a      	bne.n	800f9b2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f99c:	4b0d      	ldr	r3, [pc, #52]	@ (800f9d4 <USBD_CDC_Init+0x1e8>)
 800f99e:	7819      	ldrb	r1, [r3, #0]
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f9a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f9aa:	6878      	ldr	r0, [r7, #4]
 800f9ac:	f002 fb8c 	bl	80120c8 <USBD_LL_PrepareReceive>
 800f9b0:	e008      	b.n	800f9c4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800f9b2:	4b08      	ldr	r3, [pc, #32]	@ (800f9d4 <USBD_CDC_Init+0x1e8>)
 800f9b4:	7819      	ldrb	r1, [r3, #0]
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800f9bc:	2340      	movs	r3, #64	@ 0x40
 800f9be:	6878      	ldr	r0, [r7, #4]
 800f9c0:	f002 fb82 	bl	80120c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800f9c4:	2300      	movs	r3, #0
}
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	3710      	adds	r7, #16
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	bd80      	pop	{r7, pc}
 800f9ce:	bf00      	nop
 800f9d0:	240000bf 	.word	0x240000bf
 800f9d4:	240000c0 	.word	0x240000c0
 800f9d8:	240000c1 	.word	0x240000c1

0800f9dc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f9dc:	b580      	push	{r7, lr}
 800f9de:	b082      	sub	sp, #8
 800f9e0:	af00      	add	r7, sp, #0
 800f9e2:	6078      	str	r0, [r7, #4]
 800f9e4:	460b      	mov	r3, r1
 800f9e6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800f9e8:	4b3a      	ldr	r3, [pc, #232]	@ (800fad4 <USBD_CDC_DeInit+0xf8>)
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	4619      	mov	r1, r3
 800f9ee:	6878      	ldr	r0, [r7, #4]
 800f9f0:	f002 faa1 	bl	8011f36 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800f9f4:	4b37      	ldr	r3, [pc, #220]	@ (800fad4 <USBD_CDC_DeInit+0xf8>)
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	f003 020f 	and.w	r2, r3, #15
 800f9fc:	6879      	ldr	r1, [r7, #4]
 800f9fe:	4613      	mov	r3, r2
 800fa00:	009b      	lsls	r3, r3, #2
 800fa02:	4413      	add	r3, r2
 800fa04:	009b      	lsls	r3, r3, #2
 800fa06:	440b      	add	r3, r1
 800fa08:	3324      	adds	r3, #36	@ 0x24
 800fa0a:	2200      	movs	r2, #0
 800fa0c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800fa0e:	4b32      	ldr	r3, [pc, #200]	@ (800fad8 <USBD_CDC_DeInit+0xfc>)
 800fa10:	781b      	ldrb	r3, [r3, #0]
 800fa12:	4619      	mov	r1, r3
 800fa14:	6878      	ldr	r0, [r7, #4]
 800fa16:	f002 fa8e 	bl	8011f36 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800fa1a:	4b2f      	ldr	r3, [pc, #188]	@ (800fad8 <USBD_CDC_DeInit+0xfc>)
 800fa1c:	781b      	ldrb	r3, [r3, #0]
 800fa1e:	f003 020f 	and.w	r2, r3, #15
 800fa22:	6879      	ldr	r1, [r7, #4]
 800fa24:	4613      	mov	r3, r2
 800fa26:	009b      	lsls	r3, r3, #2
 800fa28:	4413      	add	r3, r2
 800fa2a:	009b      	lsls	r3, r3, #2
 800fa2c:	440b      	add	r3, r1
 800fa2e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800fa32:	2200      	movs	r2, #0
 800fa34:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800fa36:	4b29      	ldr	r3, [pc, #164]	@ (800fadc <USBD_CDC_DeInit+0x100>)
 800fa38:	781b      	ldrb	r3, [r3, #0]
 800fa3a:	4619      	mov	r1, r3
 800fa3c:	6878      	ldr	r0, [r7, #4]
 800fa3e:	f002 fa7a 	bl	8011f36 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800fa42:	4b26      	ldr	r3, [pc, #152]	@ (800fadc <USBD_CDC_DeInit+0x100>)
 800fa44:	781b      	ldrb	r3, [r3, #0]
 800fa46:	f003 020f 	and.w	r2, r3, #15
 800fa4a:	6879      	ldr	r1, [r7, #4]
 800fa4c:	4613      	mov	r3, r2
 800fa4e:	009b      	lsls	r3, r3, #2
 800fa50:	4413      	add	r3, r2
 800fa52:	009b      	lsls	r3, r3, #2
 800fa54:	440b      	add	r3, r1
 800fa56:	3324      	adds	r3, #36	@ 0x24
 800fa58:	2200      	movs	r2, #0
 800fa5a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800fa5c:	4b1f      	ldr	r3, [pc, #124]	@ (800fadc <USBD_CDC_DeInit+0x100>)
 800fa5e:	781b      	ldrb	r3, [r3, #0]
 800fa60:	f003 020f 	and.w	r2, r3, #15
 800fa64:	6879      	ldr	r1, [r7, #4]
 800fa66:	4613      	mov	r3, r2
 800fa68:	009b      	lsls	r3, r3, #2
 800fa6a:	4413      	add	r3, r2
 800fa6c:	009b      	lsls	r3, r3, #2
 800fa6e:	440b      	add	r3, r1
 800fa70:	3326      	adds	r3, #38	@ 0x26
 800fa72:	2200      	movs	r2, #0
 800fa74:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	32b0      	adds	r2, #176	@ 0xb0
 800fa80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d01f      	beq.n	800fac8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fa8e:	687a      	ldr	r2, [r7, #4]
 800fa90:	33b0      	adds	r3, #176	@ 0xb0
 800fa92:	009b      	lsls	r3, r3, #2
 800fa94:	4413      	add	r3, r2
 800fa96:	685b      	ldr	r3, [r3, #4]
 800fa98:	685b      	ldr	r3, [r3, #4]
 800fa9a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	32b0      	adds	r2, #176	@ 0xb0
 800faa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800faaa:	4618      	mov	r0, r3
 800faac:	f002 fb4e 	bl	801214c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	32b0      	adds	r2, #176	@ 0xb0
 800faba:	2100      	movs	r1, #0
 800fabc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	2200      	movs	r2, #0
 800fac4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800fac8:	2300      	movs	r3, #0
}
 800faca:	4618      	mov	r0, r3
 800facc:	3708      	adds	r7, #8
 800face:	46bd      	mov	sp, r7
 800fad0:	bd80      	pop	{r7, pc}
 800fad2:	bf00      	nop
 800fad4:	240000bf 	.word	0x240000bf
 800fad8:	240000c0 	.word	0x240000c0
 800fadc:	240000c1 	.word	0x240000c1

0800fae0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b086      	sub	sp, #24
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	6078      	str	r0, [r7, #4]
 800fae8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	32b0      	adds	r2, #176	@ 0xb0
 800faf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800faf8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800fafa:	2300      	movs	r3, #0
 800fafc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800fafe:	2300      	movs	r3, #0
 800fb00:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800fb02:	2300      	movs	r3, #0
 800fb04:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800fb06:	693b      	ldr	r3, [r7, #16]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d101      	bne.n	800fb10 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800fb0c:	2303      	movs	r3, #3
 800fb0e:	e0bf      	b.n	800fc90 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	781b      	ldrb	r3, [r3, #0]
 800fb14:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d050      	beq.n	800fbbe <USBD_CDC_Setup+0xde>
 800fb1c:	2b20      	cmp	r3, #32
 800fb1e:	f040 80af 	bne.w	800fc80 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	88db      	ldrh	r3, [r3, #6]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d03a      	beq.n	800fba0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	781b      	ldrb	r3, [r3, #0]
 800fb2e:	b25b      	sxtb	r3, r3
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	da1b      	bge.n	800fb6c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fb3a:	687a      	ldr	r2, [r7, #4]
 800fb3c:	33b0      	adds	r3, #176	@ 0xb0
 800fb3e:	009b      	lsls	r3, r3, #2
 800fb40:	4413      	add	r3, r2
 800fb42:	685b      	ldr	r3, [r3, #4]
 800fb44:	689b      	ldr	r3, [r3, #8]
 800fb46:	683a      	ldr	r2, [r7, #0]
 800fb48:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800fb4a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fb4c:	683a      	ldr	r2, [r7, #0]
 800fb4e:	88d2      	ldrh	r2, [r2, #6]
 800fb50:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	88db      	ldrh	r3, [r3, #6]
 800fb56:	2b07      	cmp	r3, #7
 800fb58:	bf28      	it	cs
 800fb5a:	2307      	movcs	r3, #7
 800fb5c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800fb5e:	693b      	ldr	r3, [r7, #16]
 800fb60:	89fa      	ldrh	r2, [r7, #14]
 800fb62:	4619      	mov	r1, r3
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f001 fd7d 	bl	8011664 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800fb6a:	e090      	b.n	800fc8e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	785a      	ldrb	r2, [r3, #1]
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800fb76:	683b      	ldr	r3, [r7, #0]
 800fb78:	88db      	ldrh	r3, [r3, #6]
 800fb7a:	2b3f      	cmp	r3, #63	@ 0x3f
 800fb7c:	d803      	bhi.n	800fb86 <USBD_CDC_Setup+0xa6>
 800fb7e:	683b      	ldr	r3, [r7, #0]
 800fb80:	88db      	ldrh	r3, [r3, #6]
 800fb82:	b2da      	uxtb	r2, r3
 800fb84:	e000      	b.n	800fb88 <USBD_CDC_Setup+0xa8>
 800fb86:	2240      	movs	r2, #64	@ 0x40
 800fb88:	693b      	ldr	r3, [r7, #16]
 800fb8a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800fb8e:	6939      	ldr	r1, [r7, #16]
 800fb90:	693b      	ldr	r3, [r7, #16]
 800fb92:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800fb96:	461a      	mov	r2, r3
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f001 fd8f 	bl	80116bc <USBD_CtlPrepareRx>
      break;
 800fb9e:	e076      	b.n	800fc8e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fba6:	687a      	ldr	r2, [r7, #4]
 800fba8:	33b0      	adds	r3, #176	@ 0xb0
 800fbaa:	009b      	lsls	r3, r3, #2
 800fbac:	4413      	add	r3, r2
 800fbae:	685b      	ldr	r3, [r3, #4]
 800fbb0:	689b      	ldr	r3, [r3, #8]
 800fbb2:	683a      	ldr	r2, [r7, #0]
 800fbb4:	7850      	ldrb	r0, [r2, #1]
 800fbb6:	2200      	movs	r2, #0
 800fbb8:	6839      	ldr	r1, [r7, #0]
 800fbba:	4798      	blx	r3
      break;
 800fbbc:	e067      	b.n	800fc8e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800fbbe:	683b      	ldr	r3, [r7, #0]
 800fbc0:	785b      	ldrb	r3, [r3, #1]
 800fbc2:	2b0b      	cmp	r3, #11
 800fbc4:	d851      	bhi.n	800fc6a <USBD_CDC_Setup+0x18a>
 800fbc6:	a201      	add	r2, pc, #4	@ (adr r2, 800fbcc <USBD_CDC_Setup+0xec>)
 800fbc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbcc:	0800fbfd 	.word	0x0800fbfd
 800fbd0:	0800fc79 	.word	0x0800fc79
 800fbd4:	0800fc6b 	.word	0x0800fc6b
 800fbd8:	0800fc6b 	.word	0x0800fc6b
 800fbdc:	0800fc6b 	.word	0x0800fc6b
 800fbe0:	0800fc6b 	.word	0x0800fc6b
 800fbe4:	0800fc6b 	.word	0x0800fc6b
 800fbe8:	0800fc6b 	.word	0x0800fc6b
 800fbec:	0800fc6b 	.word	0x0800fc6b
 800fbf0:	0800fc6b 	.word	0x0800fc6b
 800fbf4:	0800fc27 	.word	0x0800fc27
 800fbf8:	0800fc51 	.word	0x0800fc51
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fc02:	b2db      	uxtb	r3, r3
 800fc04:	2b03      	cmp	r3, #3
 800fc06:	d107      	bne.n	800fc18 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800fc08:	f107 030a 	add.w	r3, r7, #10
 800fc0c:	2202      	movs	r2, #2
 800fc0e:	4619      	mov	r1, r3
 800fc10:	6878      	ldr	r0, [r7, #4]
 800fc12:	f001 fd27 	bl	8011664 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fc16:	e032      	b.n	800fc7e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800fc18:	6839      	ldr	r1, [r7, #0]
 800fc1a:	6878      	ldr	r0, [r7, #4]
 800fc1c:	f001 fca5 	bl	801156a <USBD_CtlError>
            ret = USBD_FAIL;
 800fc20:	2303      	movs	r3, #3
 800fc22:	75fb      	strb	r3, [r7, #23]
          break;
 800fc24:	e02b      	b.n	800fc7e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fc2c:	b2db      	uxtb	r3, r3
 800fc2e:	2b03      	cmp	r3, #3
 800fc30:	d107      	bne.n	800fc42 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800fc32:	f107 030d 	add.w	r3, r7, #13
 800fc36:	2201      	movs	r2, #1
 800fc38:	4619      	mov	r1, r3
 800fc3a:	6878      	ldr	r0, [r7, #4]
 800fc3c:	f001 fd12 	bl	8011664 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800fc40:	e01d      	b.n	800fc7e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800fc42:	6839      	ldr	r1, [r7, #0]
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	f001 fc90 	bl	801156a <USBD_CtlError>
            ret = USBD_FAIL;
 800fc4a:	2303      	movs	r3, #3
 800fc4c:	75fb      	strb	r3, [r7, #23]
          break;
 800fc4e:	e016      	b.n	800fc7e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800fc56:	b2db      	uxtb	r3, r3
 800fc58:	2b03      	cmp	r3, #3
 800fc5a:	d00f      	beq.n	800fc7c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800fc5c:	6839      	ldr	r1, [r7, #0]
 800fc5e:	6878      	ldr	r0, [r7, #4]
 800fc60:	f001 fc83 	bl	801156a <USBD_CtlError>
            ret = USBD_FAIL;
 800fc64:	2303      	movs	r3, #3
 800fc66:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800fc68:	e008      	b.n	800fc7c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800fc6a:	6839      	ldr	r1, [r7, #0]
 800fc6c:	6878      	ldr	r0, [r7, #4]
 800fc6e:	f001 fc7c 	bl	801156a <USBD_CtlError>
          ret = USBD_FAIL;
 800fc72:	2303      	movs	r3, #3
 800fc74:	75fb      	strb	r3, [r7, #23]
          break;
 800fc76:	e002      	b.n	800fc7e <USBD_CDC_Setup+0x19e>
          break;
 800fc78:	bf00      	nop
 800fc7a:	e008      	b.n	800fc8e <USBD_CDC_Setup+0x1ae>
          break;
 800fc7c:	bf00      	nop
      }
      break;
 800fc7e:	e006      	b.n	800fc8e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800fc80:	6839      	ldr	r1, [r7, #0]
 800fc82:	6878      	ldr	r0, [r7, #4]
 800fc84:	f001 fc71 	bl	801156a <USBD_CtlError>
      ret = USBD_FAIL;
 800fc88:	2303      	movs	r3, #3
 800fc8a:	75fb      	strb	r3, [r7, #23]
      break;
 800fc8c:	bf00      	nop
  }

  return (uint8_t)ret;
 800fc8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc90:	4618      	mov	r0, r3
 800fc92:	3718      	adds	r7, #24
 800fc94:	46bd      	mov	sp, r7
 800fc96:	bd80      	pop	{r7, pc}

0800fc98 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b084      	sub	sp, #16
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
 800fca0:	460b      	mov	r3, r1
 800fca2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800fcaa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	32b0      	adds	r2, #176	@ 0xb0
 800fcb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d101      	bne.n	800fcc2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800fcbe:	2303      	movs	r3, #3
 800fcc0:	e065      	b.n	800fd8e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	32b0      	adds	r2, #176	@ 0xb0
 800fccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fcd0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800fcd2:	78fb      	ldrb	r3, [r7, #3]
 800fcd4:	f003 020f 	and.w	r2, r3, #15
 800fcd8:	6879      	ldr	r1, [r7, #4]
 800fcda:	4613      	mov	r3, r2
 800fcdc:	009b      	lsls	r3, r3, #2
 800fcde:	4413      	add	r3, r2
 800fce0:	009b      	lsls	r3, r3, #2
 800fce2:	440b      	add	r3, r1
 800fce4:	3318      	adds	r3, #24
 800fce6:	681b      	ldr	r3, [r3, #0]
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d02f      	beq.n	800fd4c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800fcec:	78fb      	ldrb	r3, [r7, #3]
 800fcee:	f003 020f 	and.w	r2, r3, #15
 800fcf2:	6879      	ldr	r1, [r7, #4]
 800fcf4:	4613      	mov	r3, r2
 800fcf6:	009b      	lsls	r3, r3, #2
 800fcf8:	4413      	add	r3, r2
 800fcfa:	009b      	lsls	r3, r3, #2
 800fcfc:	440b      	add	r3, r1
 800fcfe:	3318      	adds	r3, #24
 800fd00:	681a      	ldr	r2, [r3, #0]
 800fd02:	78fb      	ldrb	r3, [r7, #3]
 800fd04:	f003 010f 	and.w	r1, r3, #15
 800fd08:	68f8      	ldr	r0, [r7, #12]
 800fd0a:	460b      	mov	r3, r1
 800fd0c:	00db      	lsls	r3, r3, #3
 800fd0e:	440b      	add	r3, r1
 800fd10:	009b      	lsls	r3, r3, #2
 800fd12:	4403      	add	r3, r0
 800fd14:	331c      	adds	r3, #28
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	fbb2 f1f3 	udiv	r1, r2, r3
 800fd1c:	fb01 f303 	mul.w	r3, r1, r3
 800fd20:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d112      	bne.n	800fd4c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800fd26:	78fb      	ldrb	r3, [r7, #3]
 800fd28:	f003 020f 	and.w	r2, r3, #15
 800fd2c:	6879      	ldr	r1, [r7, #4]
 800fd2e:	4613      	mov	r3, r2
 800fd30:	009b      	lsls	r3, r3, #2
 800fd32:	4413      	add	r3, r2
 800fd34:	009b      	lsls	r3, r3, #2
 800fd36:	440b      	add	r3, r1
 800fd38:	3318      	adds	r3, #24
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800fd3e:	78f9      	ldrb	r1, [r7, #3]
 800fd40:	2300      	movs	r3, #0
 800fd42:	2200      	movs	r2, #0
 800fd44:	6878      	ldr	r0, [r7, #4]
 800fd46:	f002 f99e 	bl	8012086 <USBD_LL_Transmit>
 800fd4a:	e01f      	b.n	800fd8c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800fd4c:	68bb      	ldr	r3, [r7, #8]
 800fd4e:	2200      	movs	r2, #0
 800fd50:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fd5a:	687a      	ldr	r2, [r7, #4]
 800fd5c:	33b0      	adds	r3, #176	@ 0xb0
 800fd5e:	009b      	lsls	r3, r3, #2
 800fd60:	4413      	add	r3, r2
 800fd62:	685b      	ldr	r3, [r3, #4]
 800fd64:	691b      	ldr	r3, [r3, #16]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d010      	beq.n	800fd8c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fd70:	687a      	ldr	r2, [r7, #4]
 800fd72:	33b0      	adds	r3, #176	@ 0xb0
 800fd74:	009b      	lsls	r3, r3, #2
 800fd76:	4413      	add	r3, r2
 800fd78:	685b      	ldr	r3, [r3, #4]
 800fd7a:	691b      	ldr	r3, [r3, #16]
 800fd7c:	68ba      	ldr	r2, [r7, #8]
 800fd7e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800fd82:	68ba      	ldr	r2, [r7, #8]
 800fd84:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800fd88:	78fa      	ldrb	r2, [r7, #3]
 800fd8a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800fd8c:	2300      	movs	r3, #0
}
 800fd8e:	4618      	mov	r0, r3
 800fd90:	3710      	adds	r7, #16
 800fd92:	46bd      	mov	sp, r7
 800fd94:	bd80      	pop	{r7, pc}

0800fd96 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800fd96:	b580      	push	{r7, lr}
 800fd98:	b084      	sub	sp, #16
 800fd9a:	af00      	add	r7, sp, #0
 800fd9c:	6078      	str	r0, [r7, #4]
 800fd9e:	460b      	mov	r3, r1
 800fda0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	32b0      	adds	r2, #176	@ 0xb0
 800fdac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdb0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	32b0      	adds	r2, #176	@ 0xb0
 800fdbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d101      	bne.n	800fdc8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800fdc4:	2303      	movs	r3, #3
 800fdc6:	e01a      	b.n	800fdfe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800fdc8:	78fb      	ldrb	r3, [r7, #3]
 800fdca:	4619      	mov	r1, r3
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f002 f99c 	bl	801210a <USBD_LL_GetRxDataSize>
 800fdd2:	4602      	mov	r2, r0
 800fdd4:	68fb      	ldr	r3, [r7, #12]
 800fdd6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fde0:	687a      	ldr	r2, [r7, #4]
 800fde2:	33b0      	adds	r3, #176	@ 0xb0
 800fde4:	009b      	lsls	r3, r3, #2
 800fde6:	4413      	add	r3, r2
 800fde8:	685b      	ldr	r3, [r3, #4]
 800fdea:	68db      	ldr	r3, [r3, #12]
 800fdec:	68fa      	ldr	r2, [r7, #12]
 800fdee:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800fdf2:	68fa      	ldr	r2, [r7, #12]
 800fdf4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800fdf8:	4611      	mov	r1, r2
 800fdfa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800fdfc:	2300      	movs	r3, #0
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3710      	adds	r7, #16
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}

0800fe06 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800fe06:	b580      	push	{r7, lr}
 800fe08:	b084      	sub	sp, #16
 800fe0a:	af00      	add	r7, sp, #0
 800fe0c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	32b0      	adds	r2, #176	@ 0xb0
 800fe18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe1c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	2b00      	cmp	r3, #0
 800fe22:	d101      	bne.n	800fe28 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800fe24:	2303      	movs	r3, #3
 800fe26:	e024      	b.n	800fe72 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fe2e:	687a      	ldr	r2, [r7, #4]
 800fe30:	33b0      	adds	r3, #176	@ 0xb0
 800fe32:	009b      	lsls	r3, r3, #2
 800fe34:	4413      	add	r3, r2
 800fe36:	685b      	ldr	r3, [r3, #4]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d019      	beq.n	800fe70 <USBD_CDC_EP0_RxReady+0x6a>
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800fe42:	2bff      	cmp	r3, #255	@ 0xff
 800fe44:	d014      	beq.n	800fe70 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800fe4c:	687a      	ldr	r2, [r7, #4]
 800fe4e:	33b0      	adds	r3, #176	@ 0xb0
 800fe50:	009b      	lsls	r3, r3, #2
 800fe52:	4413      	add	r3, r2
 800fe54:	685b      	ldr	r3, [r3, #4]
 800fe56:	689b      	ldr	r3, [r3, #8]
 800fe58:	68fa      	ldr	r2, [r7, #12]
 800fe5a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800fe5e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800fe60:	68fa      	ldr	r2, [r7, #12]
 800fe62:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800fe66:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	22ff      	movs	r2, #255	@ 0xff
 800fe6c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800fe70:	2300      	movs	r3, #0
}
 800fe72:	4618      	mov	r0, r3
 800fe74:	3710      	adds	r7, #16
 800fe76:	46bd      	mov	sp, r7
 800fe78:	bd80      	pop	{r7, pc}
	...

0800fe7c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b086      	sub	sp, #24
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fe84:	2182      	movs	r1, #130	@ 0x82
 800fe86:	4818      	ldr	r0, [pc, #96]	@ (800fee8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fe88:	f000 fd0f 	bl	80108aa <USBD_GetEpDesc>
 800fe8c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fe8e:	2101      	movs	r1, #1
 800fe90:	4815      	ldr	r0, [pc, #84]	@ (800fee8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fe92:	f000 fd0a 	bl	80108aa <USBD_GetEpDesc>
 800fe96:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800fe98:	2181      	movs	r1, #129	@ 0x81
 800fe9a:	4813      	ldr	r0, [pc, #76]	@ (800fee8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800fe9c:	f000 fd05 	bl	80108aa <USBD_GetEpDesc>
 800fea0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800fea2:	697b      	ldr	r3, [r7, #20]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	d002      	beq.n	800feae <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800fea8:	697b      	ldr	r3, [r7, #20]
 800feaa:	2210      	movs	r2, #16
 800feac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800feae:	693b      	ldr	r3, [r7, #16]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d006      	beq.n	800fec2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800feb4:	693b      	ldr	r3, [r7, #16]
 800feb6:	2200      	movs	r2, #0
 800feb8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800febc:	711a      	strb	r2, [r3, #4]
 800febe:	2200      	movs	r2, #0
 800fec0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d006      	beq.n	800fed6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	2200      	movs	r2, #0
 800fecc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800fed0:	711a      	strb	r2, [r3, #4]
 800fed2:	2200      	movs	r2, #0
 800fed4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	2243      	movs	r2, #67	@ 0x43
 800feda:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800fedc:	4b02      	ldr	r3, [pc, #8]	@ (800fee8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800fede:	4618      	mov	r0, r3
 800fee0:	3718      	adds	r7, #24
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bd80      	pop	{r7, pc}
 800fee6:	bf00      	nop
 800fee8:	2400007c 	.word	0x2400007c

0800feec <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b086      	sub	sp, #24
 800fef0:	af00      	add	r7, sp, #0
 800fef2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800fef4:	2182      	movs	r1, #130	@ 0x82
 800fef6:	4818      	ldr	r0, [pc, #96]	@ (800ff58 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800fef8:	f000 fcd7 	bl	80108aa <USBD_GetEpDesc>
 800fefc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800fefe:	2101      	movs	r1, #1
 800ff00:	4815      	ldr	r0, [pc, #84]	@ (800ff58 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ff02:	f000 fcd2 	bl	80108aa <USBD_GetEpDesc>
 800ff06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ff08:	2181      	movs	r1, #129	@ 0x81
 800ff0a:	4813      	ldr	r0, [pc, #76]	@ (800ff58 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ff0c:	f000 fccd 	bl	80108aa <USBD_GetEpDesc>
 800ff10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ff12:	697b      	ldr	r3, [r7, #20]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d002      	beq.n	800ff1e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	2210      	movs	r2, #16
 800ff1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ff1e:	693b      	ldr	r3, [r7, #16]
 800ff20:	2b00      	cmp	r3, #0
 800ff22:	d006      	beq.n	800ff32 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ff24:	693b      	ldr	r3, [r7, #16]
 800ff26:	2200      	movs	r2, #0
 800ff28:	711a      	strb	r2, [r3, #4]
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	f042 0202 	orr.w	r2, r2, #2
 800ff30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ff32:	68fb      	ldr	r3, [r7, #12]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d006      	beq.n	800ff46 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	711a      	strb	r2, [r3, #4]
 800ff3e:	2200      	movs	r2, #0
 800ff40:	f042 0202 	orr.w	r2, r2, #2
 800ff44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2243      	movs	r2, #67	@ 0x43
 800ff4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ff4c:	4b02      	ldr	r3, [pc, #8]	@ (800ff58 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ff4e:	4618      	mov	r0, r3
 800ff50:	3718      	adds	r7, #24
 800ff52:	46bd      	mov	sp, r7
 800ff54:	bd80      	pop	{r7, pc}
 800ff56:	bf00      	nop
 800ff58:	2400007c 	.word	0x2400007c

0800ff5c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ff5c:	b580      	push	{r7, lr}
 800ff5e:	b086      	sub	sp, #24
 800ff60:	af00      	add	r7, sp, #0
 800ff62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ff64:	2182      	movs	r1, #130	@ 0x82
 800ff66:	4818      	ldr	r0, [pc, #96]	@ (800ffc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ff68:	f000 fc9f 	bl	80108aa <USBD_GetEpDesc>
 800ff6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ff6e:	2101      	movs	r1, #1
 800ff70:	4815      	ldr	r0, [pc, #84]	@ (800ffc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ff72:	f000 fc9a 	bl	80108aa <USBD_GetEpDesc>
 800ff76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ff78:	2181      	movs	r1, #129	@ 0x81
 800ff7a:	4813      	ldr	r0, [pc, #76]	@ (800ffc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ff7c:	f000 fc95 	bl	80108aa <USBD_GetEpDesc>
 800ff80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d002      	beq.n	800ff8e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	2210      	movs	r2, #16
 800ff8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ff8e:	693b      	ldr	r3, [r7, #16]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d006      	beq.n	800ffa2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ff94:	693b      	ldr	r3, [r7, #16]
 800ff96:	2200      	movs	r2, #0
 800ff98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ff9c:	711a      	strb	r2, [r3, #4]
 800ff9e:	2200      	movs	r2, #0
 800ffa0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d006      	beq.n	800ffb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	2200      	movs	r2, #0
 800ffac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ffb0:	711a      	strb	r2, [r3, #4]
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	2243      	movs	r2, #67	@ 0x43
 800ffba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ffbc:	4b02      	ldr	r3, [pc, #8]	@ (800ffc8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ffbe:	4618      	mov	r0, r3
 800ffc0:	3718      	adds	r7, #24
 800ffc2:	46bd      	mov	sp, r7
 800ffc4:	bd80      	pop	{r7, pc}
 800ffc6:	bf00      	nop
 800ffc8:	2400007c 	.word	0x2400007c

0800ffcc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ffcc:	b480      	push	{r7}
 800ffce:	b083      	sub	sp, #12
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	220a      	movs	r2, #10
 800ffd8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ffda:	4b03      	ldr	r3, [pc, #12]	@ (800ffe8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ffdc:	4618      	mov	r0, r3
 800ffde:	370c      	adds	r7, #12
 800ffe0:	46bd      	mov	sp, r7
 800ffe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe6:	4770      	bx	lr
 800ffe8:	24000038 	.word	0x24000038

0800ffec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ffec:	b480      	push	{r7}
 800ffee:	b083      	sub	sp, #12
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
 800fff4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d101      	bne.n	8010000 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800fffc:	2303      	movs	r3, #3
 800fffe:	e009      	b.n	8010014 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8010006:	687a      	ldr	r2, [r7, #4]
 8010008:	33b0      	adds	r3, #176	@ 0xb0
 801000a:	009b      	lsls	r3, r3, #2
 801000c:	4413      	add	r3, r2
 801000e:	683a      	ldr	r2, [r7, #0]
 8010010:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8010012:	2300      	movs	r3, #0
}
 8010014:	4618      	mov	r0, r3
 8010016:	370c      	adds	r7, #12
 8010018:	46bd      	mov	sp, r7
 801001a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801001e:	4770      	bx	lr

08010020 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8010020:	b480      	push	{r7}
 8010022:	b087      	sub	sp, #28
 8010024:	af00      	add	r7, sp, #0
 8010026:	60f8      	str	r0, [r7, #12]
 8010028:	60b9      	str	r1, [r7, #8]
 801002a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	32b0      	adds	r2, #176	@ 0xb0
 8010036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801003a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 801003c:	697b      	ldr	r3, [r7, #20]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d101      	bne.n	8010046 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8010042:	2303      	movs	r3, #3
 8010044:	e008      	b.n	8010058 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8010046:	697b      	ldr	r3, [r7, #20]
 8010048:	68ba      	ldr	r2, [r7, #8]
 801004a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 801004e:	697b      	ldr	r3, [r7, #20]
 8010050:	687a      	ldr	r2, [r7, #4]
 8010052:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8010056:	2300      	movs	r3, #0
}
 8010058:	4618      	mov	r0, r3
 801005a:	371c      	adds	r7, #28
 801005c:	46bd      	mov	sp, r7
 801005e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010062:	4770      	bx	lr

08010064 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8010064:	b480      	push	{r7}
 8010066:	b085      	sub	sp, #20
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
 801006c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	32b0      	adds	r2, #176	@ 0xb0
 8010078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801007c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801007e:	68fb      	ldr	r3, [r7, #12]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d101      	bne.n	8010088 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8010084:	2303      	movs	r3, #3
 8010086:	e004      	b.n	8010092 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	683a      	ldr	r2, [r7, #0]
 801008c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8010090:	2300      	movs	r3, #0
}
 8010092:	4618      	mov	r0, r3
 8010094:	3714      	adds	r7, #20
 8010096:	46bd      	mov	sp, r7
 8010098:	f85d 7b04 	ldr.w	r7, [sp], #4
 801009c:	4770      	bx	lr
	...

080100a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b084      	sub	sp, #16
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	32b0      	adds	r2, #176	@ 0xb0
 80100b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100b6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80100be:	687b      	ldr	r3, [r7, #4]
 80100c0:	32b0      	adds	r2, #176	@ 0xb0
 80100c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d101      	bne.n	80100ce <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80100ca:	2303      	movs	r3, #3
 80100cc:	e018      	b.n	8010100 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	7c1b      	ldrb	r3, [r3, #16]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d10a      	bne.n	80100ec <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80100d6:	4b0c      	ldr	r3, [pc, #48]	@ (8010108 <USBD_CDC_ReceivePacket+0x68>)
 80100d8:	7819      	ldrb	r1, [r3, #0]
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80100e0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80100e4:	6878      	ldr	r0, [r7, #4]
 80100e6:	f001 ffef 	bl	80120c8 <USBD_LL_PrepareReceive>
 80100ea:	e008      	b.n	80100fe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80100ec:	4b06      	ldr	r3, [pc, #24]	@ (8010108 <USBD_CDC_ReceivePacket+0x68>)
 80100ee:	7819      	ldrb	r1, [r3, #0]
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80100f6:	2340      	movs	r3, #64	@ 0x40
 80100f8:	6878      	ldr	r0, [r7, #4]
 80100fa:	f001 ffe5 	bl	80120c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80100fe:	2300      	movs	r3, #0
}
 8010100:	4618      	mov	r0, r3
 8010102:	3710      	adds	r7, #16
 8010104:	46bd      	mov	sp, r7
 8010106:	bd80      	pop	{r7, pc}
 8010108:	240000c0 	.word	0x240000c0

0801010c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 801010c:	b580      	push	{r7, lr}
 801010e:	b086      	sub	sp, #24
 8010110:	af00      	add	r7, sp, #0
 8010112:	60f8      	str	r0, [r7, #12]
 8010114:	60b9      	str	r1, [r7, #8]
 8010116:	4613      	mov	r3, r2
 8010118:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	2b00      	cmp	r3, #0
 801011e:	d101      	bne.n	8010124 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010120:	2303      	movs	r3, #3
 8010122:	e01f      	b.n	8010164 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	2200      	movs	r2, #0
 8010128:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	2200      	movs	r2, #0
 8010130:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	2200      	movs	r2, #0
 8010138:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801013c:	68bb      	ldr	r3, [r7, #8]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d003      	beq.n	801014a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	68ba      	ldr	r2, [r7, #8]
 8010146:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	2201      	movs	r2, #1
 801014e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8010152:	68fb      	ldr	r3, [r7, #12]
 8010154:	79fa      	ldrb	r2, [r7, #7]
 8010156:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8010158:	68f8      	ldr	r0, [r7, #12]
 801015a:	f001 fe5b 	bl	8011e14 <USBD_LL_Init>
 801015e:	4603      	mov	r3, r0
 8010160:	75fb      	strb	r3, [r7, #23]

  return ret;
 8010162:	7dfb      	ldrb	r3, [r7, #23]
}
 8010164:	4618      	mov	r0, r3
 8010166:	3718      	adds	r7, #24
 8010168:	46bd      	mov	sp, r7
 801016a:	bd80      	pop	{r7, pc}

0801016c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801016c:	b580      	push	{r7, lr}
 801016e:	b084      	sub	sp, #16
 8010170:	af00      	add	r7, sp, #0
 8010172:	6078      	str	r0, [r7, #4]
 8010174:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010176:	2300      	movs	r3, #0
 8010178:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801017a:	683b      	ldr	r3, [r7, #0]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d101      	bne.n	8010184 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8010180:	2303      	movs	r3, #3
 8010182:	e025      	b.n	80101d0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	683a      	ldr	r2, [r7, #0]
 8010188:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 801018c:	687b      	ldr	r3, [r7, #4]
 801018e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	32ae      	adds	r2, #174	@ 0xae
 8010196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801019a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801019c:	2b00      	cmp	r3, #0
 801019e:	d00f      	beq.n	80101c0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	32ae      	adds	r2, #174	@ 0xae
 80101aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80101ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80101b0:	f107 020e 	add.w	r2, r7, #14
 80101b4:	4610      	mov	r0, r2
 80101b6:	4798      	blx	r3
 80101b8:	4602      	mov	r2, r0
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80101c6:	1c5a      	adds	r2, r3, #1
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80101ce:	2300      	movs	r3, #0
}
 80101d0:	4618      	mov	r0, r3
 80101d2:	3710      	adds	r7, #16
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bd80      	pop	{r7, pc}

080101d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80101d8:	b580      	push	{r7, lr}
 80101da:	b082      	sub	sp, #8
 80101dc:	af00      	add	r7, sp, #0
 80101de:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80101e0:	6878      	ldr	r0, [r7, #4]
 80101e2:	f001 fe67 	bl	8011eb4 <USBD_LL_Start>
 80101e6:	4603      	mov	r3, r0
}
 80101e8:	4618      	mov	r0, r3
 80101ea:	3708      	adds	r7, #8
 80101ec:	46bd      	mov	sp, r7
 80101ee:	bd80      	pop	{r7, pc}

080101f0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80101f0:	b480      	push	{r7}
 80101f2:	b083      	sub	sp, #12
 80101f4:	af00      	add	r7, sp, #0
 80101f6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80101f8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80101fa:	4618      	mov	r0, r3
 80101fc:	370c      	adds	r7, #12
 80101fe:	46bd      	mov	sp, r7
 8010200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010204:	4770      	bx	lr

08010206 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8010206:	b580      	push	{r7, lr}
 8010208:	b084      	sub	sp, #16
 801020a:	af00      	add	r7, sp, #0
 801020c:	6078      	str	r0, [r7, #4]
 801020e:	460b      	mov	r3, r1
 8010210:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8010212:	2300      	movs	r3, #0
 8010214:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801021c:	2b00      	cmp	r3, #0
 801021e:	d009      	beq.n	8010234 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	78fa      	ldrb	r2, [r7, #3]
 801022a:	4611      	mov	r1, r2
 801022c:	6878      	ldr	r0, [r7, #4]
 801022e:	4798      	blx	r3
 8010230:	4603      	mov	r3, r0
 8010232:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010234:	7bfb      	ldrb	r3, [r7, #15]
}
 8010236:	4618      	mov	r0, r3
 8010238:	3710      	adds	r7, #16
 801023a:	46bd      	mov	sp, r7
 801023c:	bd80      	pop	{r7, pc}

0801023e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801023e:	b580      	push	{r7, lr}
 8010240:	b084      	sub	sp, #16
 8010242:	af00      	add	r7, sp, #0
 8010244:	6078      	str	r0, [r7, #4]
 8010246:	460b      	mov	r3, r1
 8010248:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801024a:	2300      	movs	r3, #0
 801024c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010254:	685b      	ldr	r3, [r3, #4]
 8010256:	78fa      	ldrb	r2, [r7, #3]
 8010258:	4611      	mov	r1, r2
 801025a:	6878      	ldr	r0, [r7, #4]
 801025c:	4798      	blx	r3
 801025e:	4603      	mov	r3, r0
 8010260:	2b00      	cmp	r3, #0
 8010262:	d001      	beq.n	8010268 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8010264:	2303      	movs	r3, #3
 8010266:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8010268:	7bfb      	ldrb	r3, [r7, #15]
}
 801026a:	4618      	mov	r0, r3
 801026c:	3710      	adds	r7, #16
 801026e:	46bd      	mov	sp, r7
 8010270:	bd80      	pop	{r7, pc}

08010272 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8010272:	b580      	push	{r7, lr}
 8010274:	b084      	sub	sp, #16
 8010276:	af00      	add	r7, sp, #0
 8010278:	6078      	str	r0, [r7, #4]
 801027a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8010282:	6839      	ldr	r1, [r7, #0]
 8010284:	4618      	mov	r0, r3
 8010286:	f001 f936 	bl	80114f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	2201      	movs	r2, #1
 801028e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8010298:	461a      	mov	r2, r3
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80102a6:	f003 031f 	and.w	r3, r3, #31
 80102aa:	2b02      	cmp	r3, #2
 80102ac:	d01a      	beq.n	80102e4 <USBD_LL_SetupStage+0x72>
 80102ae:	2b02      	cmp	r3, #2
 80102b0:	d822      	bhi.n	80102f8 <USBD_LL_SetupStage+0x86>
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d002      	beq.n	80102bc <USBD_LL_SetupStage+0x4a>
 80102b6:	2b01      	cmp	r3, #1
 80102b8:	d00a      	beq.n	80102d0 <USBD_LL_SetupStage+0x5e>
 80102ba:	e01d      	b.n	80102f8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80102c2:	4619      	mov	r1, r3
 80102c4:	6878      	ldr	r0, [r7, #4]
 80102c6:	f000 fb63 	bl	8010990 <USBD_StdDevReq>
 80102ca:	4603      	mov	r3, r0
 80102cc:	73fb      	strb	r3, [r7, #15]
      break;
 80102ce:	e020      	b.n	8010312 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80102d6:	4619      	mov	r1, r3
 80102d8:	6878      	ldr	r0, [r7, #4]
 80102da:	f000 fbcb 	bl	8010a74 <USBD_StdItfReq>
 80102de:	4603      	mov	r3, r0
 80102e0:	73fb      	strb	r3, [r7, #15]
      break;
 80102e2:	e016      	b.n	8010312 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80102e4:	687b      	ldr	r3, [r7, #4]
 80102e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80102ea:	4619      	mov	r1, r3
 80102ec:	6878      	ldr	r0, [r7, #4]
 80102ee:	f000 fc2d 	bl	8010b4c <USBD_StdEPReq>
 80102f2:	4603      	mov	r3, r0
 80102f4:	73fb      	strb	r3, [r7, #15]
      break;
 80102f6:	e00c      	b.n	8010312 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80102fe:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8010302:	b2db      	uxtb	r3, r3
 8010304:	4619      	mov	r1, r3
 8010306:	6878      	ldr	r0, [r7, #4]
 8010308:	f001 fe34 	bl	8011f74 <USBD_LL_StallEP>
 801030c:	4603      	mov	r3, r0
 801030e:	73fb      	strb	r3, [r7, #15]
      break;
 8010310:	bf00      	nop
  }

  return ret;
 8010312:	7bfb      	ldrb	r3, [r7, #15]
}
 8010314:	4618      	mov	r0, r3
 8010316:	3710      	adds	r7, #16
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}

0801031c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b086      	sub	sp, #24
 8010320:	af00      	add	r7, sp, #0
 8010322:	60f8      	str	r0, [r7, #12]
 8010324:	460b      	mov	r3, r1
 8010326:	607a      	str	r2, [r7, #4]
 8010328:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801032a:	2300      	movs	r3, #0
 801032c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 801032e:	7afb      	ldrb	r3, [r7, #11]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d16e      	bne.n	8010412 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 801033a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8010342:	2b03      	cmp	r3, #3
 8010344:	f040 8098 	bne.w	8010478 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8010348:	693b      	ldr	r3, [r7, #16]
 801034a:	689a      	ldr	r2, [r3, #8]
 801034c:	693b      	ldr	r3, [r7, #16]
 801034e:	68db      	ldr	r3, [r3, #12]
 8010350:	429a      	cmp	r2, r3
 8010352:	d913      	bls.n	801037c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8010354:	693b      	ldr	r3, [r7, #16]
 8010356:	689a      	ldr	r2, [r3, #8]
 8010358:	693b      	ldr	r3, [r7, #16]
 801035a:	68db      	ldr	r3, [r3, #12]
 801035c:	1ad2      	subs	r2, r2, r3
 801035e:	693b      	ldr	r3, [r7, #16]
 8010360:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8010362:	693b      	ldr	r3, [r7, #16]
 8010364:	68da      	ldr	r2, [r3, #12]
 8010366:	693b      	ldr	r3, [r7, #16]
 8010368:	689b      	ldr	r3, [r3, #8]
 801036a:	4293      	cmp	r3, r2
 801036c:	bf28      	it	cs
 801036e:	4613      	movcs	r3, r2
 8010370:	461a      	mov	r2, r3
 8010372:	6879      	ldr	r1, [r7, #4]
 8010374:	68f8      	ldr	r0, [r7, #12]
 8010376:	f001 f9be 	bl	80116f6 <USBD_CtlContinueRx>
 801037a:	e07d      	b.n	8010478 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8010382:	f003 031f 	and.w	r3, r3, #31
 8010386:	2b02      	cmp	r3, #2
 8010388:	d014      	beq.n	80103b4 <USBD_LL_DataOutStage+0x98>
 801038a:	2b02      	cmp	r3, #2
 801038c:	d81d      	bhi.n	80103ca <USBD_LL_DataOutStage+0xae>
 801038e:	2b00      	cmp	r3, #0
 8010390:	d002      	beq.n	8010398 <USBD_LL_DataOutStage+0x7c>
 8010392:	2b01      	cmp	r3, #1
 8010394:	d003      	beq.n	801039e <USBD_LL_DataOutStage+0x82>
 8010396:	e018      	b.n	80103ca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8010398:	2300      	movs	r3, #0
 801039a:	75bb      	strb	r3, [r7, #22]
            break;
 801039c:	e018      	b.n	80103d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80103a4:	b2db      	uxtb	r3, r3
 80103a6:	4619      	mov	r1, r3
 80103a8:	68f8      	ldr	r0, [r7, #12]
 80103aa:	f000 fa64 	bl	8010876 <USBD_CoreFindIF>
 80103ae:	4603      	mov	r3, r0
 80103b0:	75bb      	strb	r3, [r7, #22]
            break;
 80103b2:	e00d      	b.n	80103d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80103ba:	b2db      	uxtb	r3, r3
 80103bc:	4619      	mov	r1, r3
 80103be:	68f8      	ldr	r0, [r7, #12]
 80103c0:	f000 fa66 	bl	8010890 <USBD_CoreFindEP>
 80103c4:	4603      	mov	r3, r0
 80103c6:	75bb      	strb	r3, [r7, #22]
            break;
 80103c8:	e002      	b.n	80103d0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80103ca:	2300      	movs	r3, #0
 80103cc:	75bb      	strb	r3, [r7, #22]
            break;
 80103ce:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80103d0:	7dbb      	ldrb	r3, [r7, #22]
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	d119      	bne.n	801040a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80103dc:	b2db      	uxtb	r3, r3
 80103de:	2b03      	cmp	r3, #3
 80103e0:	d113      	bne.n	801040a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80103e2:	7dba      	ldrb	r2, [r7, #22]
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	32ae      	adds	r2, #174	@ 0xae
 80103e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103ec:	691b      	ldr	r3, [r3, #16]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d00b      	beq.n	801040a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80103f2:	7dba      	ldrb	r2, [r7, #22]
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80103fa:	7dba      	ldrb	r2, [r7, #22]
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	32ae      	adds	r2, #174	@ 0xae
 8010400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010404:	691b      	ldr	r3, [r3, #16]
 8010406:	68f8      	ldr	r0, [r7, #12]
 8010408:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801040a:	68f8      	ldr	r0, [r7, #12]
 801040c:	f001 f984 	bl	8011718 <USBD_CtlSendStatus>
 8010410:	e032      	b.n	8010478 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8010412:	7afb      	ldrb	r3, [r7, #11]
 8010414:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010418:	b2db      	uxtb	r3, r3
 801041a:	4619      	mov	r1, r3
 801041c:	68f8      	ldr	r0, [r7, #12]
 801041e:	f000 fa37 	bl	8010890 <USBD_CoreFindEP>
 8010422:	4603      	mov	r3, r0
 8010424:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010426:	7dbb      	ldrb	r3, [r7, #22]
 8010428:	2bff      	cmp	r3, #255	@ 0xff
 801042a:	d025      	beq.n	8010478 <USBD_LL_DataOutStage+0x15c>
 801042c:	7dbb      	ldrb	r3, [r7, #22]
 801042e:	2b00      	cmp	r3, #0
 8010430:	d122      	bne.n	8010478 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010432:	68fb      	ldr	r3, [r7, #12]
 8010434:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010438:	b2db      	uxtb	r3, r3
 801043a:	2b03      	cmp	r3, #3
 801043c:	d117      	bne.n	801046e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 801043e:	7dba      	ldrb	r2, [r7, #22]
 8010440:	68fb      	ldr	r3, [r7, #12]
 8010442:	32ae      	adds	r2, #174	@ 0xae
 8010444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010448:	699b      	ldr	r3, [r3, #24]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d00f      	beq.n	801046e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 801044e:	7dba      	ldrb	r2, [r7, #22]
 8010450:	68fb      	ldr	r3, [r7, #12]
 8010452:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8010456:	7dba      	ldrb	r2, [r7, #22]
 8010458:	68fb      	ldr	r3, [r7, #12]
 801045a:	32ae      	adds	r2, #174	@ 0xae
 801045c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010460:	699b      	ldr	r3, [r3, #24]
 8010462:	7afa      	ldrb	r2, [r7, #11]
 8010464:	4611      	mov	r1, r2
 8010466:	68f8      	ldr	r0, [r7, #12]
 8010468:	4798      	blx	r3
 801046a:	4603      	mov	r3, r0
 801046c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 801046e:	7dfb      	ldrb	r3, [r7, #23]
 8010470:	2b00      	cmp	r3, #0
 8010472:	d001      	beq.n	8010478 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8010474:	7dfb      	ldrb	r3, [r7, #23]
 8010476:	e000      	b.n	801047a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8010478:	2300      	movs	r3, #0
}
 801047a:	4618      	mov	r0, r3
 801047c:	3718      	adds	r7, #24
 801047e:	46bd      	mov	sp, r7
 8010480:	bd80      	pop	{r7, pc}

08010482 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8010482:	b580      	push	{r7, lr}
 8010484:	b086      	sub	sp, #24
 8010486:	af00      	add	r7, sp, #0
 8010488:	60f8      	str	r0, [r7, #12]
 801048a:	460b      	mov	r3, r1
 801048c:	607a      	str	r2, [r7, #4]
 801048e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8010490:	7afb      	ldrb	r3, [r7, #11]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d16f      	bne.n	8010576 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	3314      	adds	r3, #20
 801049a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80104a2:	2b02      	cmp	r3, #2
 80104a4:	d15a      	bne.n	801055c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	689a      	ldr	r2, [r3, #8]
 80104aa:	693b      	ldr	r3, [r7, #16]
 80104ac:	68db      	ldr	r3, [r3, #12]
 80104ae:	429a      	cmp	r2, r3
 80104b0:	d914      	bls.n	80104dc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80104b2:	693b      	ldr	r3, [r7, #16]
 80104b4:	689a      	ldr	r2, [r3, #8]
 80104b6:	693b      	ldr	r3, [r7, #16]
 80104b8:	68db      	ldr	r3, [r3, #12]
 80104ba:	1ad2      	subs	r2, r2, r3
 80104bc:	693b      	ldr	r3, [r7, #16]
 80104be:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80104c0:	693b      	ldr	r3, [r7, #16]
 80104c2:	689b      	ldr	r3, [r3, #8]
 80104c4:	461a      	mov	r2, r3
 80104c6:	6879      	ldr	r1, [r7, #4]
 80104c8:	68f8      	ldr	r0, [r7, #12]
 80104ca:	f001 f8e6 	bl	801169a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80104ce:	2300      	movs	r3, #0
 80104d0:	2200      	movs	r2, #0
 80104d2:	2100      	movs	r1, #0
 80104d4:	68f8      	ldr	r0, [r7, #12]
 80104d6:	f001 fdf7 	bl	80120c8 <USBD_LL_PrepareReceive>
 80104da:	e03f      	b.n	801055c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80104dc:	693b      	ldr	r3, [r7, #16]
 80104de:	68da      	ldr	r2, [r3, #12]
 80104e0:	693b      	ldr	r3, [r7, #16]
 80104e2:	689b      	ldr	r3, [r3, #8]
 80104e4:	429a      	cmp	r2, r3
 80104e6:	d11c      	bne.n	8010522 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80104e8:	693b      	ldr	r3, [r7, #16]
 80104ea:	685a      	ldr	r2, [r3, #4]
 80104ec:	693b      	ldr	r3, [r7, #16]
 80104ee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80104f0:	429a      	cmp	r2, r3
 80104f2:	d316      	bcc.n	8010522 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80104f4:	693b      	ldr	r3, [r7, #16]
 80104f6:	685a      	ldr	r2, [r3, #4]
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80104fe:	429a      	cmp	r2, r3
 8010500:	d20f      	bcs.n	8010522 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8010502:	2200      	movs	r2, #0
 8010504:	2100      	movs	r1, #0
 8010506:	68f8      	ldr	r0, [r7, #12]
 8010508:	f001 f8c7 	bl	801169a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801050c:	68fb      	ldr	r3, [r7, #12]
 801050e:	2200      	movs	r2, #0
 8010510:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8010514:	2300      	movs	r3, #0
 8010516:	2200      	movs	r2, #0
 8010518:	2100      	movs	r1, #0
 801051a:	68f8      	ldr	r0, [r7, #12]
 801051c:	f001 fdd4 	bl	80120c8 <USBD_LL_PrepareReceive>
 8010520:	e01c      	b.n	801055c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010528:	b2db      	uxtb	r3, r3
 801052a:	2b03      	cmp	r3, #3
 801052c:	d10f      	bne.n	801054e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010534:	68db      	ldr	r3, [r3, #12]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d009      	beq.n	801054e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	2200      	movs	r2, #0
 801053e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010548:	68db      	ldr	r3, [r3, #12]
 801054a:	68f8      	ldr	r0, [r7, #12]
 801054c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 801054e:	2180      	movs	r1, #128	@ 0x80
 8010550:	68f8      	ldr	r0, [r7, #12]
 8010552:	f001 fd0f 	bl	8011f74 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8010556:	68f8      	ldr	r0, [r7, #12]
 8010558:	f001 f8f1 	bl	801173e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8010562:	2b00      	cmp	r3, #0
 8010564:	d03a      	beq.n	80105dc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8010566:	68f8      	ldr	r0, [r7, #12]
 8010568:	f7ff fe42 	bl	80101f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	2200      	movs	r2, #0
 8010570:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8010574:	e032      	b.n	80105dc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8010576:	7afb      	ldrb	r3, [r7, #11]
 8010578:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 801057c:	b2db      	uxtb	r3, r3
 801057e:	4619      	mov	r1, r3
 8010580:	68f8      	ldr	r0, [r7, #12]
 8010582:	f000 f985 	bl	8010890 <USBD_CoreFindEP>
 8010586:	4603      	mov	r3, r0
 8010588:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801058a:	7dfb      	ldrb	r3, [r7, #23]
 801058c:	2bff      	cmp	r3, #255	@ 0xff
 801058e:	d025      	beq.n	80105dc <USBD_LL_DataInStage+0x15a>
 8010590:	7dfb      	ldrb	r3, [r7, #23]
 8010592:	2b00      	cmp	r3, #0
 8010594:	d122      	bne.n	80105dc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801059c:	b2db      	uxtb	r3, r3
 801059e:	2b03      	cmp	r3, #3
 80105a0:	d11c      	bne.n	80105dc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80105a2:	7dfa      	ldrb	r2, [r7, #23]
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	32ae      	adds	r2, #174	@ 0xae
 80105a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105ac:	695b      	ldr	r3, [r3, #20]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d014      	beq.n	80105dc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80105b2:	7dfa      	ldrb	r2, [r7, #23]
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80105ba:	7dfa      	ldrb	r2, [r7, #23]
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	32ae      	adds	r2, #174	@ 0xae
 80105c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80105c4:	695b      	ldr	r3, [r3, #20]
 80105c6:	7afa      	ldrb	r2, [r7, #11]
 80105c8:	4611      	mov	r1, r2
 80105ca:	68f8      	ldr	r0, [r7, #12]
 80105cc:	4798      	blx	r3
 80105ce:	4603      	mov	r3, r0
 80105d0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80105d2:	7dbb      	ldrb	r3, [r7, #22]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d001      	beq.n	80105dc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80105d8:	7dbb      	ldrb	r3, [r7, #22]
 80105da:	e000      	b.n	80105de <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80105dc:	2300      	movs	r3, #0
}
 80105de:	4618      	mov	r0, r3
 80105e0:	3718      	adds	r7, #24
 80105e2:	46bd      	mov	sp, r7
 80105e4:	bd80      	pop	{r7, pc}

080105e6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80105e6:	b580      	push	{r7, lr}
 80105e8:	b084      	sub	sp, #16
 80105ea:	af00      	add	r7, sp, #0
 80105ec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80105ee:	2300      	movs	r3, #0
 80105f0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	2201      	movs	r2, #1
 80105f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	2200      	movs	r2, #0
 80105fe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	2200      	movs	r2, #0
 8010606:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	2200      	movs	r2, #0
 801060c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	2200      	movs	r2, #0
 8010614:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801061e:	2b00      	cmp	r3, #0
 8010620:	d014      	beq.n	801064c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010628:	685b      	ldr	r3, [r3, #4]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d00e      	beq.n	801064c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010634:	685b      	ldr	r3, [r3, #4]
 8010636:	687a      	ldr	r2, [r7, #4]
 8010638:	6852      	ldr	r2, [r2, #4]
 801063a:	b2d2      	uxtb	r2, r2
 801063c:	4611      	mov	r1, r2
 801063e:	6878      	ldr	r0, [r7, #4]
 8010640:	4798      	blx	r3
 8010642:	4603      	mov	r3, r0
 8010644:	2b00      	cmp	r3, #0
 8010646:	d001      	beq.n	801064c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8010648:	2303      	movs	r3, #3
 801064a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801064c:	2340      	movs	r3, #64	@ 0x40
 801064e:	2200      	movs	r2, #0
 8010650:	2100      	movs	r1, #0
 8010652:	6878      	ldr	r0, [r7, #4]
 8010654:	f001 fc49 	bl	8011eea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	2201      	movs	r2, #1
 801065c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2240      	movs	r2, #64	@ 0x40
 8010664:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8010668:	2340      	movs	r3, #64	@ 0x40
 801066a:	2200      	movs	r2, #0
 801066c:	2180      	movs	r1, #128	@ 0x80
 801066e:	6878      	ldr	r0, [r7, #4]
 8010670:	f001 fc3b 	bl	8011eea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	2201      	movs	r2, #1
 8010678:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	2240      	movs	r2, #64	@ 0x40
 801067e:	621a      	str	r2, [r3, #32]

  return ret;
 8010680:	7bfb      	ldrb	r3, [r7, #15]
}
 8010682:	4618      	mov	r0, r3
 8010684:	3710      	adds	r7, #16
 8010686:	46bd      	mov	sp, r7
 8010688:	bd80      	pop	{r7, pc}

0801068a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801068a:	b480      	push	{r7}
 801068c:	b083      	sub	sp, #12
 801068e:	af00      	add	r7, sp, #0
 8010690:	6078      	str	r0, [r7, #4]
 8010692:	460b      	mov	r3, r1
 8010694:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	78fa      	ldrb	r2, [r7, #3]
 801069a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801069c:	2300      	movs	r3, #0
}
 801069e:	4618      	mov	r0, r3
 80106a0:	370c      	adds	r7, #12
 80106a2:	46bd      	mov	sp, r7
 80106a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106a8:	4770      	bx	lr

080106aa <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80106aa:	b480      	push	{r7}
 80106ac:	b083      	sub	sp, #12
 80106ae:	af00      	add	r7, sp, #0
 80106b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 80106b2:	687b      	ldr	r3, [r7, #4]
 80106b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80106b8:	b2db      	uxtb	r3, r3
 80106ba:	2b04      	cmp	r3, #4
 80106bc:	d006      	beq.n	80106cc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80106c4:	b2da      	uxtb	r2, r3
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2204      	movs	r2, #4
 80106d0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 80106d4:	2300      	movs	r3, #0
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	370c      	adds	r7, #12
 80106da:	46bd      	mov	sp, r7
 80106dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e0:	4770      	bx	lr

080106e2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80106e2:	b480      	push	{r7}
 80106e4:	b083      	sub	sp, #12
 80106e6:	af00      	add	r7, sp, #0
 80106e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80106f0:	b2db      	uxtb	r3, r3
 80106f2:	2b04      	cmp	r3, #4
 80106f4:	d106      	bne.n	8010704 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80106fc:	b2da      	uxtb	r2, r3
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8010704:	2300      	movs	r3, #0
}
 8010706:	4618      	mov	r0, r3
 8010708:	370c      	adds	r7, #12
 801070a:	46bd      	mov	sp, r7
 801070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010710:	4770      	bx	lr

08010712 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8010712:	b580      	push	{r7, lr}
 8010714:	b082      	sub	sp, #8
 8010716:	af00      	add	r7, sp, #0
 8010718:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010720:	b2db      	uxtb	r3, r3
 8010722:	2b03      	cmp	r3, #3
 8010724:	d110      	bne.n	8010748 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801072c:	2b00      	cmp	r3, #0
 801072e:	d00b      	beq.n	8010748 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010736:	69db      	ldr	r3, [r3, #28]
 8010738:	2b00      	cmp	r3, #0
 801073a:	d005      	beq.n	8010748 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010742:	69db      	ldr	r3, [r3, #28]
 8010744:	6878      	ldr	r0, [r7, #4]
 8010746:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8010748:	2300      	movs	r3, #0
}
 801074a:	4618      	mov	r0, r3
 801074c:	3708      	adds	r7, #8
 801074e:	46bd      	mov	sp, r7
 8010750:	bd80      	pop	{r7, pc}

08010752 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8010752:	b580      	push	{r7, lr}
 8010754:	b082      	sub	sp, #8
 8010756:	af00      	add	r7, sp, #0
 8010758:	6078      	str	r0, [r7, #4]
 801075a:	460b      	mov	r3, r1
 801075c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	32ae      	adds	r2, #174	@ 0xae
 8010768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d101      	bne.n	8010774 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8010770:	2303      	movs	r3, #3
 8010772:	e01c      	b.n	80107ae <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801077a:	b2db      	uxtb	r3, r3
 801077c:	2b03      	cmp	r3, #3
 801077e:	d115      	bne.n	80107ac <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	32ae      	adds	r2, #174	@ 0xae
 801078a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801078e:	6a1b      	ldr	r3, [r3, #32]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d00b      	beq.n	80107ac <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 801079a:	687b      	ldr	r3, [r7, #4]
 801079c:	32ae      	adds	r2, #174	@ 0xae
 801079e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107a2:	6a1b      	ldr	r3, [r3, #32]
 80107a4:	78fa      	ldrb	r2, [r7, #3]
 80107a6:	4611      	mov	r1, r2
 80107a8:	6878      	ldr	r0, [r7, #4]
 80107aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80107ac:	2300      	movs	r3, #0
}
 80107ae:	4618      	mov	r0, r3
 80107b0:	3708      	adds	r7, #8
 80107b2:	46bd      	mov	sp, r7
 80107b4:	bd80      	pop	{r7, pc}

080107b6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80107b6:	b580      	push	{r7, lr}
 80107b8:	b082      	sub	sp, #8
 80107ba:	af00      	add	r7, sp, #0
 80107bc:	6078      	str	r0, [r7, #4]
 80107be:	460b      	mov	r3, r1
 80107c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	32ae      	adds	r2, #174	@ 0xae
 80107cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d101      	bne.n	80107d8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80107d4:	2303      	movs	r3, #3
 80107d6:	e01c      	b.n	8010812 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80107de:	b2db      	uxtb	r3, r3
 80107e0:	2b03      	cmp	r3, #3
 80107e2:	d115      	bne.n	8010810 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	32ae      	adds	r2, #174	@ 0xae
 80107ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80107f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d00b      	beq.n	8010810 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	32ae      	adds	r2, #174	@ 0xae
 8010802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010808:	78fa      	ldrb	r2, [r7, #3]
 801080a:	4611      	mov	r1, r2
 801080c:	6878      	ldr	r0, [r7, #4]
 801080e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8010810:	2300      	movs	r3, #0
}
 8010812:	4618      	mov	r0, r3
 8010814:	3708      	adds	r7, #8
 8010816:	46bd      	mov	sp, r7
 8010818:	bd80      	pop	{r7, pc}

0801081a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801081a:	b480      	push	{r7}
 801081c:	b083      	sub	sp, #12
 801081e:	af00      	add	r7, sp, #0
 8010820:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8010822:	2300      	movs	r3, #0
}
 8010824:	4618      	mov	r0, r3
 8010826:	370c      	adds	r7, #12
 8010828:	46bd      	mov	sp, r7
 801082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801082e:	4770      	bx	lr

08010830 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b084      	sub	sp, #16
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8010838:	2300      	movs	r3, #0
 801083a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	2201      	movs	r2, #1
 8010840:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801084a:	2b00      	cmp	r3, #0
 801084c:	d00e      	beq.n	801086c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010854:	685b      	ldr	r3, [r3, #4]
 8010856:	687a      	ldr	r2, [r7, #4]
 8010858:	6852      	ldr	r2, [r2, #4]
 801085a:	b2d2      	uxtb	r2, r2
 801085c:	4611      	mov	r1, r2
 801085e:	6878      	ldr	r0, [r7, #4]
 8010860:	4798      	blx	r3
 8010862:	4603      	mov	r3, r0
 8010864:	2b00      	cmp	r3, #0
 8010866:	d001      	beq.n	801086c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8010868:	2303      	movs	r3, #3
 801086a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801086c:	7bfb      	ldrb	r3, [r7, #15]
}
 801086e:	4618      	mov	r0, r3
 8010870:	3710      	adds	r7, #16
 8010872:	46bd      	mov	sp, r7
 8010874:	bd80      	pop	{r7, pc}

08010876 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010876:	b480      	push	{r7}
 8010878:	b083      	sub	sp, #12
 801087a:	af00      	add	r7, sp, #0
 801087c:	6078      	str	r0, [r7, #4]
 801087e:	460b      	mov	r3, r1
 8010880:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8010882:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8010884:	4618      	mov	r0, r3
 8010886:	370c      	adds	r7, #12
 8010888:	46bd      	mov	sp, r7
 801088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088e:	4770      	bx	lr

08010890 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8010890:	b480      	push	{r7}
 8010892:	b083      	sub	sp, #12
 8010894:	af00      	add	r7, sp, #0
 8010896:	6078      	str	r0, [r7, #4]
 8010898:	460b      	mov	r3, r1
 801089a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801089c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801089e:	4618      	mov	r0, r3
 80108a0:	370c      	adds	r7, #12
 80108a2:	46bd      	mov	sp, r7
 80108a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108a8:	4770      	bx	lr

080108aa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80108aa:	b580      	push	{r7, lr}
 80108ac:	b086      	sub	sp, #24
 80108ae:	af00      	add	r7, sp, #0
 80108b0:	6078      	str	r0, [r7, #4]
 80108b2:	460b      	mov	r3, r1
 80108b4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80108be:	2300      	movs	r3, #0
 80108c0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80108c2:	68fb      	ldr	r3, [r7, #12]
 80108c4:	885b      	ldrh	r3, [r3, #2]
 80108c6:	b29b      	uxth	r3, r3
 80108c8:	68fa      	ldr	r2, [r7, #12]
 80108ca:	7812      	ldrb	r2, [r2, #0]
 80108cc:	4293      	cmp	r3, r2
 80108ce:	d91f      	bls.n	8010910 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	781b      	ldrb	r3, [r3, #0]
 80108d4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80108d6:	e013      	b.n	8010900 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80108d8:	f107 030a 	add.w	r3, r7, #10
 80108dc:	4619      	mov	r1, r3
 80108de:	6978      	ldr	r0, [r7, #20]
 80108e0:	f000 f81b 	bl	801091a <USBD_GetNextDesc>
 80108e4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80108e6:	697b      	ldr	r3, [r7, #20]
 80108e8:	785b      	ldrb	r3, [r3, #1]
 80108ea:	2b05      	cmp	r3, #5
 80108ec:	d108      	bne.n	8010900 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80108ee:	697b      	ldr	r3, [r7, #20]
 80108f0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80108f2:	693b      	ldr	r3, [r7, #16]
 80108f4:	789b      	ldrb	r3, [r3, #2]
 80108f6:	78fa      	ldrb	r2, [r7, #3]
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d008      	beq.n	801090e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80108fc:	2300      	movs	r3, #0
 80108fe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8010900:	68fb      	ldr	r3, [r7, #12]
 8010902:	885b      	ldrh	r3, [r3, #2]
 8010904:	b29a      	uxth	r2, r3
 8010906:	897b      	ldrh	r3, [r7, #10]
 8010908:	429a      	cmp	r2, r3
 801090a:	d8e5      	bhi.n	80108d8 <USBD_GetEpDesc+0x2e>
 801090c:	e000      	b.n	8010910 <USBD_GetEpDesc+0x66>
          break;
 801090e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8010910:	693b      	ldr	r3, [r7, #16]
}
 8010912:	4618      	mov	r0, r3
 8010914:	3718      	adds	r7, #24
 8010916:	46bd      	mov	sp, r7
 8010918:	bd80      	pop	{r7, pc}

0801091a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801091a:	b480      	push	{r7}
 801091c:	b085      	sub	sp, #20
 801091e:	af00      	add	r7, sp, #0
 8010920:	6078      	str	r0, [r7, #4]
 8010922:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8010928:	683b      	ldr	r3, [r7, #0]
 801092a:	881b      	ldrh	r3, [r3, #0]
 801092c:	68fa      	ldr	r2, [r7, #12]
 801092e:	7812      	ldrb	r2, [r2, #0]
 8010930:	4413      	add	r3, r2
 8010932:	b29a      	uxth	r2, r3
 8010934:	683b      	ldr	r3, [r7, #0]
 8010936:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	781b      	ldrb	r3, [r3, #0]
 801093c:	461a      	mov	r2, r3
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	4413      	add	r3, r2
 8010942:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010944:	68fb      	ldr	r3, [r7, #12]
}
 8010946:	4618      	mov	r0, r3
 8010948:	3714      	adds	r7, #20
 801094a:	46bd      	mov	sp, r7
 801094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010950:	4770      	bx	lr

08010952 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8010952:	b480      	push	{r7}
 8010954:	b087      	sub	sp, #28
 8010956:	af00      	add	r7, sp, #0
 8010958:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 801095e:	697b      	ldr	r3, [r7, #20]
 8010960:	781b      	ldrb	r3, [r3, #0]
 8010962:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8010964:	697b      	ldr	r3, [r7, #20]
 8010966:	3301      	adds	r3, #1
 8010968:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 801096a:	697b      	ldr	r3, [r7, #20]
 801096c:	781b      	ldrb	r3, [r3, #0]
 801096e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8010970:	8a3b      	ldrh	r3, [r7, #16]
 8010972:	021b      	lsls	r3, r3, #8
 8010974:	b21a      	sxth	r2, r3
 8010976:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801097a:	4313      	orrs	r3, r2
 801097c:	b21b      	sxth	r3, r3
 801097e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8010980:	89fb      	ldrh	r3, [r7, #14]
}
 8010982:	4618      	mov	r0, r3
 8010984:	371c      	adds	r7, #28
 8010986:	46bd      	mov	sp, r7
 8010988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801098c:	4770      	bx	lr
	...

08010990 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010990:	b580      	push	{r7, lr}
 8010992:	b084      	sub	sp, #16
 8010994:	af00      	add	r7, sp, #0
 8010996:	6078      	str	r0, [r7, #4]
 8010998:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801099a:	2300      	movs	r3, #0
 801099c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801099e:	683b      	ldr	r3, [r7, #0]
 80109a0:	781b      	ldrb	r3, [r3, #0]
 80109a2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80109a6:	2b40      	cmp	r3, #64	@ 0x40
 80109a8:	d005      	beq.n	80109b6 <USBD_StdDevReq+0x26>
 80109aa:	2b40      	cmp	r3, #64	@ 0x40
 80109ac:	d857      	bhi.n	8010a5e <USBD_StdDevReq+0xce>
 80109ae:	2b00      	cmp	r3, #0
 80109b0:	d00f      	beq.n	80109d2 <USBD_StdDevReq+0x42>
 80109b2:	2b20      	cmp	r3, #32
 80109b4:	d153      	bne.n	8010a5e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	32ae      	adds	r2, #174	@ 0xae
 80109c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80109c4:	689b      	ldr	r3, [r3, #8]
 80109c6:	6839      	ldr	r1, [r7, #0]
 80109c8:	6878      	ldr	r0, [r7, #4]
 80109ca:	4798      	blx	r3
 80109cc:	4603      	mov	r3, r0
 80109ce:	73fb      	strb	r3, [r7, #15]
      break;
 80109d0:	e04a      	b.n	8010a68 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80109d2:	683b      	ldr	r3, [r7, #0]
 80109d4:	785b      	ldrb	r3, [r3, #1]
 80109d6:	2b09      	cmp	r3, #9
 80109d8:	d83b      	bhi.n	8010a52 <USBD_StdDevReq+0xc2>
 80109da:	a201      	add	r2, pc, #4	@ (adr r2, 80109e0 <USBD_StdDevReq+0x50>)
 80109dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109e0:	08010a35 	.word	0x08010a35
 80109e4:	08010a49 	.word	0x08010a49
 80109e8:	08010a53 	.word	0x08010a53
 80109ec:	08010a3f 	.word	0x08010a3f
 80109f0:	08010a53 	.word	0x08010a53
 80109f4:	08010a13 	.word	0x08010a13
 80109f8:	08010a09 	.word	0x08010a09
 80109fc:	08010a53 	.word	0x08010a53
 8010a00:	08010a2b 	.word	0x08010a2b
 8010a04:	08010a1d 	.word	0x08010a1d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8010a08:	6839      	ldr	r1, [r7, #0]
 8010a0a:	6878      	ldr	r0, [r7, #4]
 8010a0c:	f000 fa3c 	bl	8010e88 <USBD_GetDescriptor>
          break;
 8010a10:	e024      	b.n	8010a5c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8010a12:	6839      	ldr	r1, [r7, #0]
 8010a14:	6878      	ldr	r0, [r7, #4]
 8010a16:	f000 fbcb 	bl	80111b0 <USBD_SetAddress>
          break;
 8010a1a:	e01f      	b.n	8010a5c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8010a1c:	6839      	ldr	r1, [r7, #0]
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f000 fc0a 	bl	8011238 <USBD_SetConfig>
 8010a24:	4603      	mov	r3, r0
 8010a26:	73fb      	strb	r3, [r7, #15]
          break;
 8010a28:	e018      	b.n	8010a5c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8010a2a:	6839      	ldr	r1, [r7, #0]
 8010a2c:	6878      	ldr	r0, [r7, #4]
 8010a2e:	f000 fcad 	bl	801138c <USBD_GetConfig>
          break;
 8010a32:	e013      	b.n	8010a5c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8010a34:	6839      	ldr	r1, [r7, #0]
 8010a36:	6878      	ldr	r0, [r7, #4]
 8010a38:	f000 fcde 	bl	80113f8 <USBD_GetStatus>
          break;
 8010a3c:	e00e      	b.n	8010a5c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8010a3e:	6839      	ldr	r1, [r7, #0]
 8010a40:	6878      	ldr	r0, [r7, #4]
 8010a42:	f000 fd0d 	bl	8011460 <USBD_SetFeature>
          break;
 8010a46:	e009      	b.n	8010a5c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8010a48:	6839      	ldr	r1, [r7, #0]
 8010a4a:	6878      	ldr	r0, [r7, #4]
 8010a4c:	f000 fd31 	bl	80114b2 <USBD_ClrFeature>
          break;
 8010a50:	e004      	b.n	8010a5c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8010a52:	6839      	ldr	r1, [r7, #0]
 8010a54:	6878      	ldr	r0, [r7, #4]
 8010a56:	f000 fd88 	bl	801156a <USBD_CtlError>
          break;
 8010a5a:	bf00      	nop
      }
      break;
 8010a5c:	e004      	b.n	8010a68 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8010a5e:	6839      	ldr	r1, [r7, #0]
 8010a60:	6878      	ldr	r0, [r7, #4]
 8010a62:	f000 fd82 	bl	801156a <USBD_CtlError>
      break;
 8010a66:	bf00      	nop
  }

  return ret;
 8010a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a6a:	4618      	mov	r0, r3
 8010a6c:	3710      	adds	r7, #16
 8010a6e:	46bd      	mov	sp, r7
 8010a70:	bd80      	pop	{r7, pc}
 8010a72:	bf00      	nop

08010a74 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b084      	sub	sp, #16
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	6078      	str	r0, [r7, #4]
 8010a7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010a7e:	2300      	movs	r3, #0
 8010a80:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010a82:	683b      	ldr	r3, [r7, #0]
 8010a84:	781b      	ldrb	r3, [r3, #0]
 8010a86:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010a8a:	2b40      	cmp	r3, #64	@ 0x40
 8010a8c:	d005      	beq.n	8010a9a <USBD_StdItfReq+0x26>
 8010a8e:	2b40      	cmp	r3, #64	@ 0x40
 8010a90:	d852      	bhi.n	8010b38 <USBD_StdItfReq+0xc4>
 8010a92:	2b00      	cmp	r3, #0
 8010a94:	d001      	beq.n	8010a9a <USBD_StdItfReq+0x26>
 8010a96:	2b20      	cmp	r3, #32
 8010a98:	d14e      	bne.n	8010b38 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010aa0:	b2db      	uxtb	r3, r3
 8010aa2:	3b01      	subs	r3, #1
 8010aa4:	2b02      	cmp	r3, #2
 8010aa6:	d840      	bhi.n	8010b2a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8010aa8:	683b      	ldr	r3, [r7, #0]
 8010aaa:	889b      	ldrh	r3, [r3, #4]
 8010aac:	b2db      	uxtb	r3, r3
 8010aae:	2b01      	cmp	r3, #1
 8010ab0:	d836      	bhi.n	8010b20 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	889b      	ldrh	r3, [r3, #4]
 8010ab6:	b2db      	uxtb	r3, r3
 8010ab8:	4619      	mov	r1, r3
 8010aba:	6878      	ldr	r0, [r7, #4]
 8010abc:	f7ff fedb 	bl	8010876 <USBD_CoreFindIF>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010ac4:	7bbb      	ldrb	r3, [r7, #14]
 8010ac6:	2bff      	cmp	r3, #255	@ 0xff
 8010ac8:	d01d      	beq.n	8010b06 <USBD_StdItfReq+0x92>
 8010aca:	7bbb      	ldrb	r3, [r7, #14]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d11a      	bne.n	8010b06 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8010ad0:	7bba      	ldrb	r2, [r7, #14]
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	32ae      	adds	r2, #174	@ 0xae
 8010ad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010ada:	689b      	ldr	r3, [r3, #8]
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d00f      	beq.n	8010b00 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8010ae0:	7bba      	ldrb	r2, [r7, #14]
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010ae8:	7bba      	ldrb	r2, [r7, #14]
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	32ae      	adds	r2, #174	@ 0xae
 8010aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010af2:	689b      	ldr	r3, [r3, #8]
 8010af4:	6839      	ldr	r1, [r7, #0]
 8010af6:	6878      	ldr	r0, [r7, #4]
 8010af8:	4798      	blx	r3
 8010afa:	4603      	mov	r3, r0
 8010afc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010afe:	e004      	b.n	8010b0a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8010b00:	2303      	movs	r3, #3
 8010b02:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8010b04:	e001      	b.n	8010b0a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8010b06:	2303      	movs	r3, #3
 8010b08:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8010b0a:	683b      	ldr	r3, [r7, #0]
 8010b0c:	88db      	ldrh	r3, [r3, #6]
 8010b0e:	2b00      	cmp	r3, #0
 8010b10:	d110      	bne.n	8010b34 <USBD_StdItfReq+0xc0>
 8010b12:	7bfb      	ldrb	r3, [r7, #15]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d10d      	bne.n	8010b34 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8010b18:	6878      	ldr	r0, [r7, #4]
 8010b1a:	f000 fdfd 	bl	8011718 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8010b1e:	e009      	b.n	8010b34 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8010b20:	6839      	ldr	r1, [r7, #0]
 8010b22:	6878      	ldr	r0, [r7, #4]
 8010b24:	f000 fd21 	bl	801156a <USBD_CtlError>
          break;
 8010b28:	e004      	b.n	8010b34 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8010b2a:	6839      	ldr	r1, [r7, #0]
 8010b2c:	6878      	ldr	r0, [r7, #4]
 8010b2e:	f000 fd1c 	bl	801156a <USBD_CtlError>
          break;
 8010b32:	e000      	b.n	8010b36 <USBD_StdItfReq+0xc2>
          break;
 8010b34:	bf00      	nop
      }
      break;
 8010b36:	e004      	b.n	8010b42 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8010b38:	6839      	ldr	r1, [r7, #0]
 8010b3a:	6878      	ldr	r0, [r7, #4]
 8010b3c:	f000 fd15 	bl	801156a <USBD_CtlError>
      break;
 8010b40:	bf00      	nop
  }

  return ret;
 8010b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b44:	4618      	mov	r0, r3
 8010b46:	3710      	adds	r7, #16
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	bd80      	pop	{r7, pc}

08010b4c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010b4c:	b580      	push	{r7, lr}
 8010b4e:	b084      	sub	sp, #16
 8010b50:	af00      	add	r7, sp, #0
 8010b52:	6078      	str	r0, [r7, #4]
 8010b54:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8010b56:	2300      	movs	r3, #0
 8010b58:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8010b5a:	683b      	ldr	r3, [r7, #0]
 8010b5c:	889b      	ldrh	r3, [r3, #4]
 8010b5e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8010b60:	683b      	ldr	r3, [r7, #0]
 8010b62:	781b      	ldrb	r3, [r3, #0]
 8010b64:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8010b68:	2b40      	cmp	r3, #64	@ 0x40
 8010b6a:	d007      	beq.n	8010b7c <USBD_StdEPReq+0x30>
 8010b6c:	2b40      	cmp	r3, #64	@ 0x40
 8010b6e:	f200 817f 	bhi.w	8010e70 <USBD_StdEPReq+0x324>
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d02a      	beq.n	8010bcc <USBD_StdEPReq+0x80>
 8010b76:	2b20      	cmp	r3, #32
 8010b78:	f040 817a 	bne.w	8010e70 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8010b7c:	7bbb      	ldrb	r3, [r7, #14]
 8010b7e:	4619      	mov	r1, r3
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	f7ff fe85 	bl	8010890 <USBD_CoreFindEP>
 8010b86:	4603      	mov	r3, r0
 8010b88:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010b8a:	7b7b      	ldrb	r3, [r7, #13]
 8010b8c:	2bff      	cmp	r3, #255	@ 0xff
 8010b8e:	f000 8174 	beq.w	8010e7a <USBD_StdEPReq+0x32e>
 8010b92:	7b7b      	ldrb	r3, [r7, #13]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	f040 8170 	bne.w	8010e7a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8010b9a:	7b7a      	ldrb	r2, [r7, #13]
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8010ba2:	7b7a      	ldrb	r2, [r7, #13]
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	32ae      	adds	r2, #174	@ 0xae
 8010ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bac:	689b      	ldr	r3, [r3, #8]
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	f000 8163 	beq.w	8010e7a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8010bb4:	7b7a      	ldrb	r2, [r7, #13]
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	32ae      	adds	r2, #174	@ 0xae
 8010bba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010bbe:	689b      	ldr	r3, [r3, #8]
 8010bc0:	6839      	ldr	r1, [r7, #0]
 8010bc2:	6878      	ldr	r0, [r7, #4]
 8010bc4:	4798      	blx	r3
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8010bca:	e156      	b.n	8010e7a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8010bcc:	683b      	ldr	r3, [r7, #0]
 8010bce:	785b      	ldrb	r3, [r3, #1]
 8010bd0:	2b03      	cmp	r3, #3
 8010bd2:	d008      	beq.n	8010be6 <USBD_StdEPReq+0x9a>
 8010bd4:	2b03      	cmp	r3, #3
 8010bd6:	f300 8145 	bgt.w	8010e64 <USBD_StdEPReq+0x318>
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	f000 809b 	beq.w	8010d16 <USBD_StdEPReq+0x1ca>
 8010be0:	2b01      	cmp	r3, #1
 8010be2:	d03c      	beq.n	8010c5e <USBD_StdEPReq+0x112>
 8010be4:	e13e      	b.n	8010e64 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010bec:	b2db      	uxtb	r3, r3
 8010bee:	2b02      	cmp	r3, #2
 8010bf0:	d002      	beq.n	8010bf8 <USBD_StdEPReq+0xac>
 8010bf2:	2b03      	cmp	r3, #3
 8010bf4:	d016      	beq.n	8010c24 <USBD_StdEPReq+0xd8>
 8010bf6:	e02c      	b.n	8010c52 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010bf8:	7bbb      	ldrb	r3, [r7, #14]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d00d      	beq.n	8010c1a <USBD_StdEPReq+0xce>
 8010bfe:	7bbb      	ldrb	r3, [r7, #14]
 8010c00:	2b80      	cmp	r3, #128	@ 0x80
 8010c02:	d00a      	beq.n	8010c1a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010c04:	7bbb      	ldrb	r3, [r7, #14]
 8010c06:	4619      	mov	r1, r3
 8010c08:	6878      	ldr	r0, [r7, #4]
 8010c0a:	f001 f9b3 	bl	8011f74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010c0e:	2180      	movs	r1, #128	@ 0x80
 8010c10:	6878      	ldr	r0, [r7, #4]
 8010c12:	f001 f9af 	bl	8011f74 <USBD_LL_StallEP>
 8010c16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010c18:	e020      	b.n	8010c5c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8010c1a:	6839      	ldr	r1, [r7, #0]
 8010c1c:	6878      	ldr	r0, [r7, #4]
 8010c1e:	f000 fca4 	bl	801156a <USBD_CtlError>
              break;
 8010c22:	e01b      	b.n	8010c5c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010c24:	683b      	ldr	r3, [r7, #0]
 8010c26:	885b      	ldrh	r3, [r3, #2]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d10e      	bne.n	8010c4a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8010c2c:	7bbb      	ldrb	r3, [r7, #14]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d00b      	beq.n	8010c4a <USBD_StdEPReq+0xfe>
 8010c32:	7bbb      	ldrb	r3, [r7, #14]
 8010c34:	2b80      	cmp	r3, #128	@ 0x80
 8010c36:	d008      	beq.n	8010c4a <USBD_StdEPReq+0xfe>
 8010c38:	683b      	ldr	r3, [r7, #0]
 8010c3a:	88db      	ldrh	r3, [r3, #6]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d104      	bne.n	8010c4a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8010c40:	7bbb      	ldrb	r3, [r7, #14]
 8010c42:	4619      	mov	r1, r3
 8010c44:	6878      	ldr	r0, [r7, #4]
 8010c46:	f001 f995 	bl	8011f74 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8010c4a:	6878      	ldr	r0, [r7, #4]
 8010c4c:	f000 fd64 	bl	8011718 <USBD_CtlSendStatus>

              break;
 8010c50:	e004      	b.n	8010c5c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8010c52:	6839      	ldr	r1, [r7, #0]
 8010c54:	6878      	ldr	r0, [r7, #4]
 8010c56:	f000 fc88 	bl	801156a <USBD_CtlError>
              break;
 8010c5a:	bf00      	nop
          }
          break;
 8010c5c:	e107      	b.n	8010e6e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010c64:	b2db      	uxtb	r3, r3
 8010c66:	2b02      	cmp	r3, #2
 8010c68:	d002      	beq.n	8010c70 <USBD_StdEPReq+0x124>
 8010c6a:	2b03      	cmp	r3, #3
 8010c6c:	d016      	beq.n	8010c9c <USBD_StdEPReq+0x150>
 8010c6e:	e04b      	b.n	8010d08 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010c70:	7bbb      	ldrb	r3, [r7, #14]
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d00d      	beq.n	8010c92 <USBD_StdEPReq+0x146>
 8010c76:	7bbb      	ldrb	r3, [r7, #14]
 8010c78:	2b80      	cmp	r3, #128	@ 0x80
 8010c7a:	d00a      	beq.n	8010c92 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8010c7c:	7bbb      	ldrb	r3, [r7, #14]
 8010c7e:	4619      	mov	r1, r3
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f001 f977 	bl	8011f74 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8010c86:	2180      	movs	r1, #128	@ 0x80
 8010c88:	6878      	ldr	r0, [r7, #4]
 8010c8a:	f001 f973 	bl	8011f74 <USBD_LL_StallEP>
 8010c8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8010c90:	e040      	b.n	8010d14 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8010c92:	6839      	ldr	r1, [r7, #0]
 8010c94:	6878      	ldr	r0, [r7, #4]
 8010c96:	f000 fc68 	bl	801156a <USBD_CtlError>
              break;
 8010c9a:	e03b      	b.n	8010d14 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8010c9c:	683b      	ldr	r3, [r7, #0]
 8010c9e:	885b      	ldrh	r3, [r3, #2]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d136      	bne.n	8010d12 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8010ca4:	7bbb      	ldrb	r3, [r7, #14]
 8010ca6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d004      	beq.n	8010cb8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8010cae:	7bbb      	ldrb	r3, [r7, #14]
 8010cb0:	4619      	mov	r1, r3
 8010cb2:	6878      	ldr	r0, [r7, #4]
 8010cb4:	f001 f97d 	bl	8011fb2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8010cb8:	6878      	ldr	r0, [r7, #4]
 8010cba:	f000 fd2d 	bl	8011718 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8010cbe:	7bbb      	ldrb	r3, [r7, #14]
 8010cc0:	4619      	mov	r1, r3
 8010cc2:	6878      	ldr	r0, [r7, #4]
 8010cc4:	f7ff fde4 	bl	8010890 <USBD_CoreFindEP>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8010ccc:	7b7b      	ldrb	r3, [r7, #13]
 8010cce:	2bff      	cmp	r3, #255	@ 0xff
 8010cd0:	d01f      	beq.n	8010d12 <USBD_StdEPReq+0x1c6>
 8010cd2:	7b7b      	ldrb	r3, [r7, #13]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d11c      	bne.n	8010d12 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8010cd8:	7b7a      	ldrb	r2, [r7, #13]
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8010ce0:	7b7a      	ldrb	r2, [r7, #13]
 8010ce2:	687b      	ldr	r3, [r7, #4]
 8010ce4:	32ae      	adds	r2, #174	@ 0xae
 8010ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cea:	689b      	ldr	r3, [r3, #8]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d010      	beq.n	8010d12 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8010cf0:	7b7a      	ldrb	r2, [r7, #13]
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	32ae      	adds	r2, #174	@ 0xae
 8010cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010cfa:	689b      	ldr	r3, [r3, #8]
 8010cfc:	6839      	ldr	r1, [r7, #0]
 8010cfe:	6878      	ldr	r0, [r7, #4]
 8010d00:	4798      	blx	r3
 8010d02:	4603      	mov	r3, r0
 8010d04:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8010d06:	e004      	b.n	8010d12 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8010d08:	6839      	ldr	r1, [r7, #0]
 8010d0a:	6878      	ldr	r0, [r7, #4]
 8010d0c:	f000 fc2d 	bl	801156a <USBD_CtlError>
              break;
 8010d10:	e000      	b.n	8010d14 <USBD_StdEPReq+0x1c8>
              break;
 8010d12:	bf00      	nop
          }
          break;
 8010d14:	e0ab      	b.n	8010e6e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8010d1c:	b2db      	uxtb	r3, r3
 8010d1e:	2b02      	cmp	r3, #2
 8010d20:	d002      	beq.n	8010d28 <USBD_StdEPReq+0x1dc>
 8010d22:	2b03      	cmp	r3, #3
 8010d24:	d032      	beq.n	8010d8c <USBD_StdEPReq+0x240>
 8010d26:	e097      	b.n	8010e58 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8010d28:	7bbb      	ldrb	r3, [r7, #14]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d007      	beq.n	8010d3e <USBD_StdEPReq+0x1f2>
 8010d2e:	7bbb      	ldrb	r3, [r7, #14]
 8010d30:	2b80      	cmp	r3, #128	@ 0x80
 8010d32:	d004      	beq.n	8010d3e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8010d34:	6839      	ldr	r1, [r7, #0]
 8010d36:	6878      	ldr	r0, [r7, #4]
 8010d38:	f000 fc17 	bl	801156a <USBD_CtlError>
                break;
 8010d3c:	e091      	b.n	8010e62 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010d3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	da0b      	bge.n	8010d5e <USBD_StdEPReq+0x212>
 8010d46:	7bbb      	ldrb	r3, [r7, #14]
 8010d48:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010d4c:	4613      	mov	r3, r2
 8010d4e:	009b      	lsls	r3, r3, #2
 8010d50:	4413      	add	r3, r2
 8010d52:	009b      	lsls	r3, r3, #2
 8010d54:	3310      	adds	r3, #16
 8010d56:	687a      	ldr	r2, [r7, #4]
 8010d58:	4413      	add	r3, r2
 8010d5a:	3304      	adds	r3, #4
 8010d5c:	e00b      	b.n	8010d76 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010d5e:	7bbb      	ldrb	r3, [r7, #14]
 8010d60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010d64:	4613      	mov	r3, r2
 8010d66:	009b      	lsls	r3, r3, #2
 8010d68:	4413      	add	r3, r2
 8010d6a:	009b      	lsls	r3, r3, #2
 8010d6c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010d70:	687a      	ldr	r2, [r7, #4]
 8010d72:	4413      	add	r3, r2
 8010d74:	3304      	adds	r3, #4
 8010d76:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8010d78:	68bb      	ldr	r3, [r7, #8]
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010d7e:	68bb      	ldr	r3, [r7, #8]
 8010d80:	2202      	movs	r2, #2
 8010d82:	4619      	mov	r1, r3
 8010d84:	6878      	ldr	r0, [r7, #4]
 8010d86:	f000 fc6d 	bl	8011664 <USBD_CtlSendData>
              break;
 8010d8a:	e06a      	b.n	8010e62 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8010d8c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	da11      	bge.n	8010db8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8010d94:	7bbb      	ldrb	r3, [r7, #14]
 8010d96:	f003 020f 	and.w	r2, r3, #15
 8010d9a:	6879      	ldr	r1, [r7, #4]
 8010d9c:	4613      	mov	r3, r2
 8010d9e:	009b      	lsls	r3, r3, #2
 8010da0:	4413      	add	r3, r2
 8010da2:	009b      	lsls	r3, r3, #2
 8010da4:	440b      	add	r3, r1
 8010da6:	3324      	adds	r3, #36	@ 0x24
 8010da8:	881b      	ldrh	r3, [r3, #0]
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	d117      	bne.n	8010dde <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010dae:	6839      	ldr	r1, [r7, #0]
 8010db0:	6878      	ldr	r0, [r7, #4]
 8010db2:	f000 fbda 	bl	801156a <USBD_CtlError>
                  break;
 8010db6:	e054      	b.n	8010e62 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8010db8:	7bbb      	ldrb	r3, [r7, #14]
 8010dba:	f003 020f 	and.w	r2, r3, #15
 8010dbe:	6879      	ldr	r1, [r7, #4]
 8010dc0:	4613      	mov	r3, r2
 8010dc2:	009b      	lsls	r3, r3, #2
 8010dc4:	4413      	add	r3, r2
 8010dc6:	009b      	lsls	r3, r3, #2
 8010dc8:	440b      	add	r3, r1
 8010dca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8010dce:	881b      	ldrh	r3, [r3, #0]
 8010dd0:	2b00      	cmp	r3, #0
 8010dd2:	d104      	bne.n	8010dde <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8010dd4:	6839      	ldr	r1, [r7, #0]
 8010dd6:	6878      	ldr	r0, [r7, #4]
 8010dd8:	f000 fbc7 	bl	801156a <USBD_CtlError>
                  break;
 8010ddc:	e041      	b.n	8010e62 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010dde:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	da0b      	bge.n	8010dfe <USBD_StdEPReq+0x2b2>
 8010de6:	7bbb      	ldrb	r3, [r7, #14]
 8010de8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8010dec:	4613      	mov	r3, r2
 8010dee:	009b      	lsls	r3, r3, #2
 8010df0:	4413      	add	r3, r2
 8010df2:	009b      	lsls	r3, r3, #2
 8010df4:	3310      	adds	r3, #16
 8010df6:	687a      	ldr	r2, [r7, #4]
 8010df8:	4413      	add	r3, r2
 8010dfa:	3304      	adds	r3, #4
 8010dfc:	e00b      	b.n	8010e16 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8010dfe:	7bbb      	ldrb	r3, [r7, #14]
 8010e00:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8010e04:	4613      	mov	r3, r2
 8010e06:	009b      	lsls	r3, r3, #2
 8010e08:	4413      	add	r3, r2
 8010e0a:	009b      	lsls	r3, r3, #2
 8010e0c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8010e10:	687a      	ldr	r2, [r7, #4]
 8010e12:	4413      	add	r3, r2
 8010e14:	3304      	adds	r3, #4
 8010e16:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8010e18:	7bbb      	ldrb	r3, [r7, #14]
 8010e1a:	2b00      	cmp	r3, #0
 8010e1c:	d002      	beq.n	8010e24 <USBD_StdEPReq+0x2d8>
 8010e1e:	7bbb      	ldrb	r3, [r7, #14]
 8010e20:	2b80      	cmp	r3, #128	@ 0x80
 8010e22:	d103      	bne.n	8010e2c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8010e24:	68bb      	ldr	r3, [r7, #8]
 8010e26:	2200      	movs	r2, #0
 8010e28:	601a      	str	r2, [r3, #0]
 8010e2a:	e00e      	b.n	8010e4a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8010e2c:	7bbb      	ldrb	r3, [r7, #14]
 8010e2e:	4619      	mov	r1, r3
 8010e30:	6878      	ldr	r0, [r7, #4]
 8010e32:	f001 f8dd 	bl	8011ff0 <USBD_LL_IsStallEP>
 8010e36:	4603      	mov	r3, r0
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d003      	beq.n	8010e44 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8010e3c:	68bb      	ldr	r3, [r7, #8]
 8010e3e:	2201      	movs	r2, #1
 8010e40:	601a      	str	r2, [r3, #0]
 8010e42:	e002      	b.n	8010e4a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8010e44:	68bb      	ldr	r3, [r7, #8]
 8010e46:	2200      	movs	r2, #0
 8010e48:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8010e4a:	68bb      	ldr	r3, [r7, #8]
 8010e4c:	2202      	movs	r2, #2
 8010e4e:	4619      	mov	r1, r3
 8010e50:	6878      	ldr	r0, [r7, #4]
 8010e52:	f000 fc07 	bl	8011664 <USBD_CtlSendData>
              break;
 8010e56:	e004      	b.n	8010e62 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8010e58:	6839      	ldr	r1, [r7, #0]
 8010e5a:	6878      	ldr	r0, [r7, #4]
 8010e5c:	f000 fb85 	bl	801156a <USBD_CtlError>
              break;
 8010e60:	bf00      	nop
          }
          break;
 8010e62:	e004      	b.n	8010e6e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8010e64:	6839      	ldr	r1, [r7, #0]
 8010e66:	6878      	ldr	r0, [r7, #4]
 8010e68:	f000 fb7f 	bl	801156a <USBD_CtlError>
          break;
 8010e6c:	bf00      	nop
      }
      break;
 8010e6e:	e005      	b.n	8010e7c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8010e70:	6839      	ldr	r1, [r7, #0]
 8010e72:	6878      	ldr	r0, [r7, #4]
 8010e74:	f000 fb79 	bl	801156a <USBD_CtlError>
      break;
 8010e78:	e000      	b.n	8010e7c <USBD_StdEPReq+0x330>
      break;
 8010e7a:	bf00      	nop
  }

  return ret;
 8010e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e7e:	4618      	mov	r0, r3
 8010e80:	3710      	adds	r7, #16
 8010e82:	46bd      	mov	sp, r7
 8010e84:	bd80      	pop	{r7, pc}
	...

08010e88 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010e88:	b580      	push	{r7, lr}
 8010e8a:	b084      	sub	sp, #16
 8010e8c:	af00      	add	r7, sp, #0
 8010e8e:	6078      	str	r0, [r7, #4]
 8010e90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8010e92:	2300      	movs	r3, #0
 8010e94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8010e96:	2300      	movs	r3, #0
 8010e98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8010e9a:	2300      	movs	r3, #0
 8010e9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	885b      	ldrh	r3, [r3, #2]
 8010ea2:	0a1b      	lsrs	r3, r3, #8
 8010ea4:	b29b      	uxth	r3, r3
 8010ea6:	3b01      	subs	r3, #1
 8010ea8:	2b0e      	cmp	r3, #14
 8010eaa:	f200 8152 	bhi.w	8011152 <USBD_GetDescriptor+0x2ca>
 8010eae:	a201      	add	r2, pc, #4	@ (adr r2, 8010eb4 <USBD_GetDescriptor+0x2c>)
 8010eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010eb4:	08010f25 	.word	0x08010f25
 8010eb8:	08010f3d 	.word	0x08010f3d
 8010ebc:	08010f7d 	.word	0x08010f7d
 8010ec0:	08011153 	.word	0x08011153
 8010ec4:	08011153 	.word	0x08011153
 8010ec8:	080110f3 	.word	0x080110f3
 8010ecc:	0801111f 	.word	0x0801111f
 8010ed0:	08011153 	.word	0x08011153
 8010ed4:	08011153 	.word	0x08011153
 8010ed8:	08011153 	.word	0x08011153
 8010edc:	08011153 	.word	0x08011153
 8010ee0:	08011153 	.word	0x08011153
 8010ee4:	08011153 	.word	0x08011153
 8010ee8:	08011153 	.word	0x08011153
 8010eec:	08010ef1 	.word	0x08010ef1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010ef6:	69db      	ldr	r3, [r3, #28]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d00b      	beq.n	8010f14 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010f02:	69db      	ldr	r3, [r3, #28]
 8010f04:	687a      	ldr	r2, [r7, #4]
 8010f06:	7c12      	ldrb	r2, [r2, #16]
 8010f08:	f107 0108 	add.w	r1, r7, #8
 8010f0c:	4610      	mov	r0, r2
 8010f0e:	4798      	blx	r3
 8010f10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010f12:	e126      	b.n	8011162 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8010f14:	6839      	ldr	r1, [r7, #0]
 8010f16:	6878      	ldr	r0, [r7, #4]
 8010f18:	f000 fb27 	bl	801156a <USBD_CtlError>
        err++;
 8010f1c:	7afb      	ldrb	r3, [r7, #11]
 8010f1e:	3301      	adds	r3, #1
 8010f20:	72fb      	strb	r3, [r7, #11]
      break;
 8010f22:	e11e      	b.n	8011162 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	687a      	ldr	r2, [r7, #4]
 8010f2e:	7c12      	ldrb	r2, [r2, #16]
 8010f30:	f107 0108 	add.w	r1, r7, #8
 8010f34:	4610      	mov	r0, r2
 8010f36:	4798      	blx	r3
 8010f38:	60f8      	str	r0, [r7, #12]
      break;
 8010f3a:	e112      	b.n	8011162 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	7c1b      	ldrb	r3, [r3, #16]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d10d      	bne.n	8010f60 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010f4c:	f107 0208 	add.w	r2, r7, #8
 8010f50:	4610      	mov	r0, r2
 8010f52:	4798      	blx	r3
 8010f54:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	3301      	adds	r3, #1
 8010f5a:	2202      	movs	r2, #2
 8010f5c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8010f5e:	e100      	b.n	8011162 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8010f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010f68:	f107 0208 	add.w	r2, r7, #8
 8010f6c:	4610      	mov	r0, r2
 8010f6e:	4798      	blx	r3
 8010f70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	3301      	adds	r3, #1
 8010f76:	2202      	movs	r2, #2
 8010f78:	701a      	strb	r2, [r3, #0]
      break;
 8010f7a:	e0f2      	b.n	8011162 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8010f7c:	683b      	ldr	r3, [r7, #0]
 8010f7e:	885b      	ldrh	r3, [r3, #2]
 8010f80:	b2db      	uxtb	r3, r3
 8010f82:	2b05      	cmp	r3, #5
 8010f84:	f200 80ac 	bhi.w	80110e0 <USBD_GetDescriptor+0x258>
 8010f88:	a201      	add	r2, pc, #4	@ (adr r2, 8010f90 <USBD_GetDescriptor+0x108>)
 8010f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f8e:	bf00      	nop
 8010f90:	08010fa9 	.word	0x08010fa9
 8010f94:	08010fdd 	.word	0x08010fdd
 8010f98:	08011011 	.word	0x08011011
 8010f9c:	08011045 	.word	0x08011045
 8010fa0:	08011079 	.word	0x08011079
 8010fa4:	080110ad 	.word	0x080110ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010fae:	685b      	ldr	r3, [r3, #4]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d00b      	beq.n	8010fcc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010fba:	685b      	ldr	r3, [r3, #4]
 8010fbc:	687a      	ldr	r2, [r7, #4]
 8010fbe:	7c12      	ldrb	r2, [r2, #16]
 8010fc0:	f107 0108 	add.w	r1, r7, #8
 8010fc4:	4610      	mov	r0, r2
 8010fc6:	4798      	blx	r3
 8010fc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010fca:	e091      	b.n	80110f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8010fcc:	6839      	ldr	r1, [r7, #0]
 8010fce:	6878      	ldr	r0, [r7, #4]
 8010fd0:	f000 facb 	bl	801156a <USBD_CtlError>
            err++;
 8010fd4:	7afb      	ldrb	r3, [r7, #11]
 8010fd6:	3301      	adds	r3, #1
 8010fd8:	72fb      	strb	r3, [r7, #11]
          break;
 8010fda:	e089      	b.n	80110f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010fe2:	689b      	ldr	r3, [r3, #8]
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d00b      	beq.n	8011000 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8010fee:	689b      	ldr	r3, [r3, #8]
 8010ff0:	687a      	ldr	r2, [r7, #4]
 8010ff2:	7c12      	ldrb	r2, [r2, #16]
 8010ff4:	f107 0108 	add.w	r1, r7, #8
 8010ff8:	4610      	mov	r0, r2
 8010ffa:	4798      	blx	r3
 8010ffc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8010ffe:	e077      	b.n	80110f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011000:	6839      	ldr	r1, [r7, #0]
 8011002:	6878      	ldr	r0, [r7, #4]
 8011004:	f000 fab1 	bl	801156a <USBD_CtlError>
            err++;
 8011008:	7afb      	ldrb	r3, [r7, #11]
 801100a:	3301      	adds	r3, #1
 801100c:	72fb      	strb	r3, [r7, #11]
          break;
 801100e:	e06f      	b.n	80110f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011016:	68db      	ldr	r3, [r3, #12]
 8011018:	2b00      	cmp	r3, #0
 801101a:	d00b      	beq.n	8011034 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011022:	68db      	ldr	r3, [r3, #12]
 8011024:	687a      	ldr	r2, [r7, #4]
 8011026:	7c12      	ldrb	r2, [r2, #16]
 8011028:	f107 0108 	add.w	r1, r7, #8
 801102c:	4610      	mov	r0, r2
 801102e:	4798      	blx	r3
 8011030:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011032:	e05d      	b.n	80110f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011034:	6839      	ldr	r1, [r7, #0]
 8011036:	6878      	ldr	r0, [r7, #4]
 8011038:	f000 fa97 	bl	801156a <USBD_CtlError>
            err++;
 801103c:	7afb      	ldrb	r3, [r7, #11]
 801103e:	3301      	adds	r3, #1
 8011040:	72fb      	strb	r3, [r7, #11]
          break;
 8011042:	e055      	b.n	80110f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801104a:	691b      	ldr	r3, [r3, #16]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d00b      	beq.n	8011068 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8011056:	691b      	ldr	r3, [r3, #16]
 8011058:	687a      	ldr	r2, [r7, #4]
 801105a:	7c12      	ldrb	r2, [r2, #16]
 801105c:	f107 0108 	add.w	r1, r7, #8
 8011060:	4610      	mov	r0, r2
 8011062:	4798      	blx	r3
 8011064:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8011066:	e043      	b.n	80110f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8011068:	6839      	ldr	r1, [r7, #0]
 801106a:	6878      	ldr	r0, [r7, #4]
 801106c:	f000 fa7d 	bl	801156a <USBD_CtlError>
            err++;
 8011070:	7afb      	ldrb	r3, [r7, #11]
 8011072:	3301      	adds	r3, #1
 8011074:	72fb      	strb	r3, [r7, #11]
          break;
 8011076:	e03b      	b.n	80110f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801107e:	695b      	ldr	r3, [r3, #20]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d00b      	beq.n	801109c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8011084:	687b      	ldr	r3, [r7, #4]
 8011086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 801108a:	695b      	ldr	r3, [r3, #20]
 801108c:	687a      	ldr	r2, [r7, #4]
 801108e:	7c12      	ldrb	r2, [r2, #16]
 8011090:	f107 0108 	add.w	r1, r7, #8
 8011094:	4610      	mov	r0, r2
 8011096:	4798      	blx	r3
 8011098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801109a:	e029      	b.n	80110f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 801109c:	6839      	ldr	r1, [r7, #0]
 801109e:	6878      	ldr	r0, [r7, #4]
 80110a0:	f000 fa63 	bl	801156a <USBD_CtlError>
            err++;
 80110a4:	7afb      	ldrb	r3, [r7, #11]
 80110a6:	3301      	adds	r3, #1
 80110a8:	72fb      	strb	r3, [r7, #11]
          break;
 80110aa:	e021      	b.n	80110f0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80110b2:	699b      	ldr	r3, [r3, #24]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d00b      	beq.n	80110d0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80110be:	699b      	ldr	r3, [r3, #24]
 80110c0:	687a      	ldr	r2, [r7, #4]
 80110c2:	7c12      	ldrb	r2, [r2, #16]
 80110c4:	f107 0108 	add.w	r1, r7, #8
 80110c8:	4610      	mov	r0, r2
 80110ca:	4798      	blx	r3
 80110cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80110ce:	e00f      	b.n	80110f0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80110d0:	6839      	ldr	r1, [r7, #0]
 80110d2:	6878      	ldr	r0, [r7, #4]
 80110d4:	f000 fa49 	bl	801156a <USBD_CtlError>
            err++;
 80110d8:	7afb      	ldrb	r3, [r7, #11]
 80110da:	3301      	adds	r3, #1
 80110dc:	72fb      	strb	r3, [r7, #11]
          break;
 80110de:	e007      	b.n	80110f0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80110e0:	6839      	ldr	r1, [r7, #0]
 80110e2:	6878      	ldr	r0, [r7, #4]
 80110e4:	f000 fa41 	bl	801156a <USBD_CtlError>
          err++;
 80110e8:	7afb      	ldrb	r3, [r7, #11]
 80110ea:	3301      	adds	r3, #1
 80110ec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80110ee:	bf00      	nop
      }
      break;
 80110f0:	e037      	b.n	8011162 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80110f2:	687b      	ldr	r3, [r7, #4]
 80110f4:	7c1b      	ldrb	r3, [r3, #16]
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d109      	bne.n	801110e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8011100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011102:	f107 0208 	add.w	r2, r7, #8
 8011106:	4610      	mov	r0, r2
 8011108:	4798      	blx	r3
 801110a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801110c:	e029      	b.n	8011162 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 801110e:	6839      	ldr	r1, [r7, #0]
 8011110:	6878      	ldr	r0, [r7, #4]
 8011112:	f000 fa2a 	bl	801156a <USBD_CtlError>
        err++;
 8011116:	7afb      	ldrb	r3, [r7, #11]
 8011118:	3301      	adds	r3, #1
 801111a:	72fb      	strb	r3, [r7, #11]
      break;
 801111c:	e021      	b.n	8011162 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	7c1b      	ldrb	r3, [r3, #16]
 8011122:	2b00      	cmp	r3, #0
 8011124:	d10d      	bne.n	8011142 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 801112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801112e:	f107 0208 	add.w	r2, r7, #8
 8011132:	4610      	mov	r0, r2
 8011134:	4798      	blx	r3
 8011136:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8011138:	68fb      	ldr	r3, [r7, #12]
 801113a:	3301      	adds	r3, #1
 801113c:	2207      	movs	r2, #7
 801113e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8011140:	e00f      	b.n	8011162 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8011142:	6839      	ldr	r1, [r7, #0]
 8011144:	6878      	ldr	r0, [r7, #4]
 8011146:	f000 fa10 	bl	801156a <USBD_CtlError>
        err++;
 801114a:	7afb      	ldrb	r3, [r7, #11]
 801114c:	3301      	adds	r3, #1
 801114e:	72fb      	strb	r3, [r7, #11]
      break;
 8011150:	e007      	b.n	8011162 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8011152:	6839      	ldr	r1, [r7, #0]
 8011154:	6878      	ldr	r0, [r7, #4]
 8011156:	f000 fa08 	bl	801156a <USBD_CtlError>
      err++;
 801115a:	7afb      	ldrb	r3, [r7, #11]
 801115c:	3301      	adds	r3, #1
 801115e:	72fb      	strb	r3, [r7, #11]
      break;
 8011160:	bf00      	nop
  }

  if (err != 0U)
 8011162:	7afb      	ldrb	r3, [r7, #11]
 8011164:	2b00      	cmp	r3, #0
 8011166:	d11e      	bne.n	80111a6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8011168:	683b      	ldr	r3, [r7, #0]
 801116a:	88db      	ldrh	r3, [r3, #6]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d016      	beq.n	801119e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8011170:	893b      	ldrh	r3, [r7, #8]
 8011172:	2b00      	cmp	r3, #0
 8011174:	d00e      	beq.n	8011194 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8011176:	683b      	ldr	r3, [r7, #0]
 8011178:	88da      	ldrh	r2, [r3, #6]
 801117a:	893b      	ldrh	r3, [r7, #8]
 801117c:	4293      	cmp	r3, r2
 801117e:	bf28      	it	cs
 8011180:	4613      	movcs	r3, r2
 8011182:	b29b      	uxth	r3, r3
 8011184:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8011186:	893b      	ldrh	r3, [r7, #8]
 8011188:	461a      	mov	r2, r3
 801118a:	68f9      	ldr	r1, [r7, #12]
 801118c:	6878      	ldr	r0, [r7, #4]
 801118e:	f000 fa69 	bl	8011664 <USBD_CtlSendData>
 8011192:	e009      	b.n	80111a8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8011194:	6839      	ldr	r1, [r7, #0]
 8011196:	6878      	ldr	r0, [r7, #4]
 8011198:	f000 f9e7 	bl	801156a <USBD_CtlError>
 801119c:	e004      	b.n	80111a8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 801119e:	6878      	ldr	r0, [r7, #4]
 80111a0:	f000 faba 	bl	8011718 <USBD_CtlSendStatus>
 80111a4:	e000      	b.n	80111a8 <USBD_GetDescriptor+0x320>
    return;
 80111a6:	bf00      	nop
  }
}
 80111a8:	3710      	adds	r7, #16
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd80      	pop	{r7, pc}
 80111ae:	bf00      	nop

080111b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b084      	sub	sp, #16
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	6078      	str	r0, [r7, #4]
 80111b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80111ba:	683b      	ldr	r3, [r7, #0]
 80111bc:	889b      	ldrh	r3, [r3, #4]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d131      	bne.n	8011226 <USBD_SetAddress+0x76>
 80111c2:	683b      	ldr	r3, [r7, #0]
 80111c4:	88db      	ldrh	r3, [r3, #6]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d12d      	bne.n	8011226 <USBD_SetAddress+0x76>
 80111ca:	683b      	ldr	r3, [r7, #0]
 80111cc:	885b      	ldrh	r3, [r3, #2]
 80111ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80111d0:	d829      	bhi.n	8011226 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80111d2:	683b      	ldr	r3, [r7, #0]
 80111d4:	885b      	ldrh	r3, [r3, #2]
 80111d6:	b2db      	uxtb	r3, r3
 80111d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80111dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80111e4:	b2db      	uxtb	r3, r3
 80111e6:	2b03      	cmp	r3, #3
 80111e8:	d104      	bne.n	80111f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80111ea:	6839      	ldr	r1, [r7, #0]
 80111ec:	6878      	ldr	r0, [r7, #4]
 80111ee:	f000 f9bc 	bl	801156a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80111f2:	e01d      	b.n	8011230 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	7bfa      	ldrb	r2, [r7, #15]
 80111f8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80111fc:	7bfb      	ldrb	r3, [r7, #15]
 80111fe:	4619      	mov	r1, r3
 8011200:	6878      	ldr	r0, [r7, #4]
 8011202:	f000 ff21 	bl	8012048 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8011206:	6878      	ldr	r0, [r7, #4]
 8011208:	f000 fa86 	bl	8011718 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 801120c:	7bfb      	ldrb	r3, [r7, #15]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d004      	beq.n	801121c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	2202      	movs	r2, #2
 8011216:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801121a:	e009      	b.n	8011230 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	2201      	movs	r2, #1
 8011220:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011224:	e004      	b.n	8011230 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8011226:	6839      	ldr	r1, [r7, #0]
 8011228:	6878      	ldr	r0, [r7, #4]
 801122a:	f000 f99e 	bl	801156a <USBD_CtlError>
  }
}
 801122e:	bf00      	nop
 8011230:	bf00      	nop
 8011232:	3710      	adds	r7, #16
 8011234:	46bd      	mov	sp, r7
 8011236:	bd80      	pop	{r7, pc}

08011238 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011238:	b580      	push	{r7, lr}
 801123a:	b084      	sub	sp, #16
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
 8011240:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8011242:	2300      	movs	r3, #0
 8011244:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8011246:	683b      	ldr	r3, [r7, #0]
 8011248:	885b      	ldrh	r3, [r3, #2]
 801124a:	b2da      	uxtb	r2, r3
 801124c:	4b4e      	ldr	r3, [pc, #312]	@ (8011388 <USBD_SetConfig+0x150>)
 801124e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8011250:	4b4d      	ldr	r3, [pc, #308]	@ (8011388 <USBD_SetConfig+0x150>)
 8011252:	781b      	ldrb	r3, [r3, #0]
 8011254:	2b01      	cmp	r3, #1
 8011256:	d905      	bls.n	8011264 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8011258:	6839      	ldr	r1, [r7, #0]
 801125a:	6878      	ldr	r0, [r7, #4]
 801125c:	f000 f985 	bl	801156a <USBD_CtlError>
    return USBD_FAIL;
 8011260:	2303      	movs	r3, #3
 8011262:	e08c      	b.n	801137e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8011264:	687b      	ldr	r3, [r7, #4]
 8011266:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 801126a:	b2db      	uxtb	r3, r3
 801126c:	2b02      	cmp	r3, #2
 801126e:	d002      	beq.n	8011276 <USBD_SetConfig+0x3e>
 8011270:	2b03      	cmp	r3, #3
 8011272:	d029      	beq.n	80112c8 <USBD_SetConfig+0x90>
 8011274:	e075      	b.n	8011362 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8011276:	4b44      	ldr	r3, [pc, #272]	@ (8011388 <USBD_SetConfig+0x150>)
 8011278:	781b      	ldrb	r3, [r3, #0]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d020      	beq.n	80112c0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 801127e:	4b42      	ldr	r3, [pc, #264]	@ (8011388 <USBD_SetConfig+0x150>)
 8011280:	781b      	ldrb	r3, [r3, #0]
 8011282:	461a      	mov	r2, r3
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8011288:	4b3f      	ldr	r3, [pc, #252]	@ (8011388 <USBD_SetConfig+0x150>)
 801128a:	781b      	ldrb	r3, [r3, #0]
 801128c:	4619      	mov	r1, r3
 801128e:	6878      	ldr	r0, [r7, #4]
 8011290:	f7fe ffb9 	bl	8010206 <USBD_SetClassConfig>
 8011294:	4603      	mov	r3, r0
 8011296:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8011298:	7bfb      	ldrb	r3, [r7, #15]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d008      	beq.n	80112b0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 801129e:	6839      	ldr	r1, [r7, #0]
 80112a0:	6878      	ldr	r0, [r7, #4]
 80112a2:	f000 f962 	bl	801156a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	2202      	movs	r2, #2
 80112aa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80112ae:	e065      	b.n	801137c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80112b0:	6878      	ldr	r0, [r7, #4]
 80112b2:	f000 fa31 	bl	8011718 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	2203      	movs	r2, #3
 80112ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80112be:	e05d      	b.n	801137c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80112c0:	6878      	ldr	r0, [r7, #4]
 80112c2:	f000 fa29 	bl	8011718 <USBD_CtlSendStatus>
      break;
 80112c6:	e059      	b.n	801137c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80112c8:	4b2f      	ldr	r3, [pc, #188]	@ (8011388 <USBD_SetConfig+0x150>)
 80112ca:	781b      	ldrb	r3, [r3, #0]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d112      	bne.n	80112f6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2202      	movs	r2, #2
 80112d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80112d8:	4b2b      	ldr	r3, [pc, #172]	@ (8011388 <USBD_SetConfig+0x150>)
 80112da:	781b      	ldrb	r3, [r3, #0]
 80112dc:	461a      	mov	r2, r3
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80112e2:	4b29      	ldr	r3, [pc, #164]	@ (8011388 <USBD_SetConfig+0x150>)
 80112e4:	781b      	ldrb	r3, [r3, #0]
 80112e6:	4619      	mov	r1, r3
 80112e8:	6878      	ldr	r0, [r7, #4]
 80112ea:	f7fe ffa8 	bl	801023e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80112ee:	6878      	ldr	r0, [r7, #4]
 80112f0:	f000 fa12 	bl	8011718 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80112f4:	e042      	b.n	801137c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80112f6:	4b24      	ldr	r3, [pc, #144]	@ (8011388 <USBD_SetConfig+0x150>)
 80112f8:	781b      	ldrb	r3, [r3, #0]
 80112fa:	461a      	mov	r2, r3
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	685b      	ldr	r3, [r3, #4]
 8011300:	429a      	cmp	r2, r3
 8011302:	d02a      	beq.n	801135a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8011304:	687b      	ldr	r3, [r7, #4]
 8011306:	685b      	ldr	r3, [r3, #4]
 8011308:	b2db      	uxtb	r3, r3
 801130a:	4619      	mov	r1, r3
 801130c:	6878      	ldr	r0, [r7, #4]
 801130e:	f7fe ff96 	bl	801023e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8011312:	4b1d      	ldr	r3, [pc, #116]	@ (8011388 <USBD_SetConfig+0x150>)
 8011314:	781b      	ldrb	r3, [r3, #0]
 8011316:	461a      	mov	r2, r3
 8011318:	687b      	ldr	r3, [r7, #4]
 801131a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 801131c:	4b1a      	ldr	r3, [pc, #104]	@ (8011388 <USBD_SetConfig+0x150>)
 801131e:	781b      	ldrb	r3, [r3, #0]
 8011320:	4619      	mov	r1, r3
 8011322:	6878      	ldr	r0, [r7, #4]
 8011324:	f7fe ff6f 	bl	8010206 <USBD_SetClassConfig>
 8011328:	4603      	mov	r3, r0
 801132a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 801132c:	7bfb      	ldrb	r3, [r7, #15]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d00f      	beq.n	8011352 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8011332:	6839      	ldr	r1, [r7, #0]
 8011334:	6878      	ldr	r0, [r7, #4]
 8011336:	f000 f918 	bl	801156a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	685b      	ldr	r3, [r3, #4]
 801133e:	b2db      	uxtb	r3, r3
 8011340:	4619      	mov	r1, r3
 8011342:	6878      	ldr	r0, [r7, #4]
 8011344:	f7fe ff7b 	bl	801023e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	2202      	movs	r2, #2
 801134c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8011350:	e014      	b.n	801137c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8011352:	6878      	ldr	r0, [r7, #4]
 8011354:	f000 f9e0 	bl	8011718 <USBD_CtlSendStatus>
      break;
 8011358:	e010      	b.n	801137c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 801135a:	6878      	ldr	r0, [r7, #4]
 801135c:	f000 f9dc 	bl	8011718 <USBD_CtlSendStatus>
      break;
 8011360:	e00c      	b.n	801137c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8011362:	6839      	ldr	r1, [r7, #0]
 8011364:	6878      	ldr	r0, [r7, #4]
 8011366:	f000 f900 	bl	801156a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 801136a:	4b07      	ldr	r3, [pc, #28]	@ (8011388 <USBD_SetConfig+0x150>)
 801136c:	781b      	ldrb	r3, [r3, #0]
 801136e:	4619      	mov	r1, r3
 8011370:	6878      	ldr	r0, [r7, #4]
 8011372:	f7fe ff64 	bl	801023e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8011376:	2303      	movs	r3, #3
 8011378:	73fb      	strb	r3, [r7, #15]
      break;
 801137a:	bf00      	nop
  }

  return ret;
 801137c:	7bfb      	ldrb	r3, [r7, #15]
}
 801137e:	4618      	mov	r0, r3
 8011380:	3710      	adds	r7, #16
 8011382:	46bd      	mov	sp, r7
 8011384:	bd80      	pop	{r7, pc}
 8011386:	bf00      	nop
 8011388:	24000a00 	.word	0x24000a00

0801138c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b082      	sub	sp, #8
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
 8011394:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8011396:	683b      	ldr	r3, [r7, #0]
 8011398:	88db      	ldrh	r3, [r3, #6]
 801139a:	2b01      	cmp	r3, #1
 801139c:	d004      	beq.n	80113a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801139e:	6839      	ldr	r1, [r7, #0]
 80113a0:	6878      	ldr	r0, [r7, #4]
 80113a2:	f000 f8e2 	bl	801156a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80113a6:	e023      	b.n	80113f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80113ae:	b2db      	uxtb	r3, r3
 80113b0:	2b02      	cmp	r3, #2
 80113b2:	dc02      	bgt.n	80113ba <USBD_GetConfig+0x2e>
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	dc03      	bgt.n	80113c0 <USBD_GetConfig+0x34>
 80113b8:	e015      	b.n	80113e6 <USBD_GetConfig+0x5a>
 80113ba:	2b03      	cmp	r3, #3
 80113bc:	d00b      	beq.n	80113d6 <USBD_GetConfig+0x4a>
 80113be:	e012      	b.n	80113e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	2200      	movs	r2, #0
 80113c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80113c6:	687b      	ldr	r3, [r7, #4]
 80113c8:	3308      	adds	r3, #8
 80113ca:	2201      	movs	r2, #1
 80113cc:	4619      	mov	r1, r3
 80113ce:	6878      	ldr	r0, [r7, #4]
 80113d0:	f000 f948 	bl	8011664 <USBD_CtlSendData>
        break;
 80113d4:	e00c      	b.n	80113f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	3304      	adds	r3, #4
 80113da:	2201      	movs	r2, #1
 80113dc:	4619      	mov	r1, r3
 80113de:	6878      	ldr	r0, [r7, #4]
 80113e0:	f000 f940 	bl	8011664 <USBD_CtlSendData>
        break;
 80113e4:	e004      	b.n	80113f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80113e6:	6839      	ldr	r1, [r7, #0]
 80113e8:	6878      	ldr	r0, [r7, #4]
 80113ea:	f000 f8be 	bl	801156a <USBD_CtlError>
        break;
 80113ee:	bf00      	nop
}
 80113f0:	bf00      	nop
 80113f2:	3708      	adds	r7, #8
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd80      	pop	{r7, pc}

080113f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b082      	sub	sp, #8
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
 8011400:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8011408:	b2db      	uxtb	r3, r3
 801140a:	3b01      	subs	r3, #1
 801140c:	2b02      	cmp	r3, #2
 801140e:	d81e      	bhi.n	801144e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	88db      	ldrh	r3, [r3, #6]
 8011414:	2b02      	cmp	r3, #2
 8011416:	d004      	beq.n	8011422 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8011418:	6839      	ldr	r1, [r7, #0]
 801141a:	6878      	ldr	r0, [r7, #4]
 801141c:	f000 f8a5 	bl	801156a <USBD_CtlError>
        break;
 8011420:	e01a      	b.n	8011458 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	2201      	movs	r2, #1
 8011426:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 801142e:	2b00      	cmp	r3, #0
 8011430:	d005      	beq.n	801143e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	68db      	ldr	r3, [r3, #12]
 8011436:	f043 0202 	orr.w	r2, r3, #2
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	330c      	adds	r3, #12
 8011442:	2202      	movs	r2, #2
 8011444:	4619      	mov	r1, r3
 8011446:	6878      	ldr	r0, [r7, #4]
 8011448:	f000 f90c 	bl	8011664 <USBD_CtlSendData>
      break;
 801144c:	e004      	b.n	8011458 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 801144e:	6839      	ldr	r1, [r7, #0]
 8011450:	6878      	ldr	r0, [r7, #4]
 8011452:	f000 f88a 	bl	801156a <USBD_CtlError>
      break;
 8011456:	bf00      	nop
  }
}
 8011458:	bf00      	nop
 801145a:	3708      	adds	r7, #8
 801145c:	46bd      	mov	sp, r7
 801145e:	bd80      	pop	{r7, pc}

08011460 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8011460:	b580      	push	{r7, lr}
 8011462:	b082      	sub	sp, #8
 8011464:	af00      	add	r7, sp, #0
 8011466:	6078      	str	r0, [r7, #4]
 8011468:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801146a:	683b      	ldr	r3, [r7, #0]
 801146c:	885b      	ldrh	r3, [r3, #2]
 801146e:	2b01      	cmp	r3, #1
 8011470:	d107      	bne.n	8011482 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	2201      	movs	r2, #1
 8011476:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 801147a:	6878      	ldr	r0, [r7, #4]
 801147c:	f000 f94c 	bl	8011718 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8011480:	e013      	b.n	80114aa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8011482:	683b      	ldr	r3, [r7, #0]
 8011484:	885b      	ldrh	r3, [r3, #2]
 8011486:	2b02      	cmp	r3, #2
 8011488:	d10b      	bne.n	80114a2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 801148a:	683b      	ldr	r3, [r7, #0]
 801148c:	889b      	ldrh	r3, [r3, #4]
 801148e:	0a1b      	lsrs	r3, r3, #8
 8011490:	b29b      	uxth	r3, r3
 8011492:	b2da      	uxtb	r2, r3
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 801149a:	6878      	ldr	r0, [r7, #4]
 801149c:	f000 f93c 	bl	8011718 <USBD_CtlSendStatus>
}
 80114a0:	e003      	b.n	80114aa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80114a2:	6839      	ldr	r1, [r7, #0]
 80114a4:	6878      	ldr	r0, [r7, #4]
 80114a6:	f000 f860 	bl	801156a <USBD_CtlError>
}
 80114aa:	bf00      	nop
 80114ac:	3708      	adds	r7, #8
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bd80      	pop	{r7, pc}

080114b2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80114b2:	b580      	push	{r7, lr}
 80114b4:	b082      	sub	sp, #8
 80114b6:	af00      	add	r7, sp, #0
 80114b8:	6078      	str	r0, [r7, #4]
 80114ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80114c2:	b2db      	uxtb	r3, r3
 80114c4:	3b01      	subs	r3, #1
 80114c6:	2b02      	cmp	r3, #2
 80114c8:	d80b      	bhi.n	80114e2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80114ca:	683b      	ldr	r3, [r7, #0]
 80114cc:	885b      	ldrh	r3, [r3, #2]
 80114ce:	2b01      	cmp	r3, #1
 80114d0:	d10c      	bne.n	80114ec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	2200      	movs	r2, #0
 80114d6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80114da:	6878      	ldr	r0, [r7, #4]
 80114dc:	f000 f91c 	bl	8011718 <USBD_CtlSendStatus>
      }
      break;
 80114e0:	e004      	b.n	80114ec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80114e2:	6839      	ldr	r1, [r7, #0]
 80114e4:	6878      	ldr	r0, [r7, #4]
 80114e6:	f000 f840 	bl	801156a <USBD_CtlError>
      break;
 80114ea:	e000      	b.n	80114ee <USBD_ClrFeature+0x3c>
      break;
 80114ec:	bf00      	nop
  }
}
 80114ee:	bf00      	nop
 80114f0:	3708      	adds	r7, #8
 80114f2:	46bd      	mov	sp, r7
 80114f4:	bd80      	pop	{r7, pc}

080114f6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80114f6:	b580      	push	{r7, lr}
 80114f8:	b084      	sub	sp, #16
 80114fa:	af00      	add	r7, sp, #0
 80114fc:	6078      	str	r0, [r7, #4]
 80114fe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8011500:	683b      	ldr	r3, [r7, #0]
 8011502:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8011504:	68fb      	ldr	r3, [r7, #12]
 8011506:	781a      	ldrb	r2, [r3, #0]
 8011508:	687b      	ldr	r3, [r7, #4]
 801150a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	3301      	adds	r3, #1
 8011510:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	781a      	ldrb	r2, [r3, #0]
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	705a      	strb	r2, [r3, #1]

  pbuff++;
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	3301      	adds	r3, #1
 801151e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8011520:	68f8      	ldr	r0, [r7, #12]
 8011522:	f7ff fa16 	bl	8010952 <SWAPBYTE>
 8011526:	4603      	mov	r3, r0
 8011528:	461a      	mov	r2, r3
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	3301      	adds	r3, #1
 8011532:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	3301      	adds	r3, #1
 8011538:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 801153a:	68f8      	ldr	r0, [r7, #12]
 801153c:	f7ff fa09 	bl	8010952 <SWAPBYTE>
 8011540:	4603      	mov	r3, r0
 8011542:	461a      	mov	r2, r3
 8011544:	687b      	ldr	r3, [r7, #4]
 8011546:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8011548:	68fb      	ldr	r3, [r7, #12]
 801154a:	3301      	adds	r3, #1
 801154c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	3301      	adds	r3, #1
 8011552:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8011554:	68f8      	ldr	r0, [r7, #12]
 8011556:	f7ff f9fc 	bl	8010952 <SWAPBYTE>
 801155a:	4603      	mov	r3, r0
 801155c:	461a      	mov	r2, r3
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	80da      	strh	r2, [r3, #6]
}
 8011562:	bf00      	nop
 8011564:	3710      	adds	r7, #16
 8011566:	46bd      	mov	sp, r7
 8011568:	bd80      	pop	{r7, pc}

0801156a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801156a:	b580      	push	{r7, lr}
 801156c:	b082      	sub	sp, #8
 801156e:	af00      	add	r7, sp, #0
 8011570:	6078      	str	r0, [r7, #4]
 8011572:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8011574:	2180      	movs	r1, #128	@ 0x80
 8011576:	6878      	ldr	r0, [r7, #4]
 8011578:	f000 fcfc 	bl	8011f74 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801157c:	2100      	movs	r1, #0
 801157e:	6878      	ldr	r0, [r7, #4]
 8011580:	f000 fcf8 	bl	8011f74 <USBD_LL_StallEP>
}
 8011584:	bf00      	nop
 8011586:	3708      	adds	r7, #8
 8011588:	46bd      	mov	sp, r7
 801158a:	bd80      	pop	{r7, pc}

0801158c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801158c:	b580      	push	{r7, lr}
 801158e:	b086      	sub	sp, #24
 8011590:	af00      	add	r7, sp, #0
 8011592:	60f8      	str	r0, [r7, #12]
 8011594:	60b9      	str	r1, [r7, #8]
 8011596:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8011598:	2300      	movs	r3, #0
 801159a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d042      	beq.n	8011628 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 80115a2:	68fb      	ldr	r3, [r7, #12]
 80115a4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 80115a6:	6938      	ldr	r0, [r7, #16]
 80115a8:	f000 f842 	bl	8011630 <USBD_GetLen>
 80115ac:	4603      	mov	r3, r0
 80115ae:	3301      	adds	r3, #1
 80115b0:	005b      	lsls	r3, r3, #1
 80115b2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80115b6:	d808      	bhi.n	80115ca <USBD_GetString+0x3e>
 80115b8:	6938      	ldr	r0, [r7, #16]
 80115ba:	f000 f839 	bl	8011630 <USBD_GetLen>
 80115be:	4603      	mov	r3, r0
 80115c0:	3301      	adds	r3, #1
 80115c2:	b29b      	uxth	r3, r3
 80115c4:	005b      	lsls	r3, r3, #1
 80115c6:	b29a      	uxth	r2, r3
 80115c8:	e001      	b.n	80115ce <USBD_GetString+0x42>
 80115ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80115d2:	7dfb      	ldrb	r3, [r7, #23]
 80115d4:	68ba      	ldr	r2, [r7, #8]
 80115d6:	4413      	add	r3, r2
 80115d8:	687a      	ldr	r2, [r7, #4]
 80115da:	7812      	ldrb	r2, [r2, #0]
 80115dc:	701a      	strb	r2, [r3, #0]
  idx++;
 80115de:	7dfb      	ldrb	r3, [r7, #23]
 80115e0:	3301      	adds	r3, #1
 80115e2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80115e4:	7dfb      	ldrb	r3, [r7, #23]
 80115e6:	68ba      	ldr	r2, [r7, #8]
 80115e8:	4413      	add	r3, r2
 80115ea:	2203      	movs	r2, #3
 80115ec:	701a      	strb	r2, [r3, #0]
  idx++;
 80115ee:	7dfb      	ldrb	r3, [r7, #23]
 80115f0:	3301      	adds	r3, #1
 80115f2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80115f4:	e013      	b.n	801161e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 80115f6:	7dfb      	ldrb	r3, [r7, #23]
 80115f8:	68ba      	ldr	r2, [r7, #8]
 80115fa:	4413      	add	r3, r2
 80115fc:	693a      	ldr	r2, [r7, #16]
 80115fe:	7812      	ldrb	r2, [r2, #0]
 8011600:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8011602:	693b      	ldr	r3, [r7, #16]
 8011604:	3301      	adds	r3, #1
 8011606:	613b      	str	r3, [r7, #16]
    idx++;
 8011608:	7dfb      	ldrb	r3, [r7, #23]
 801160a:	3301      	adds	r3, #1
 801160c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 801160e:	7dfb      	ldrb	r3, [r7, #23]
 8011610:	68ba      	ldr	r2, [r7, #8]
 8011612:	4413      	add	r3, r2
 8011614:	2200      	movs	r2, #0
 8011616:	701a      	strb	r2, [r3, #0]
    idx++;
 8011618:	7dfb      	ldrb	r3, [r7, #23]
 801161a:	3301      	adds	r3, #1
 801161c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 801161e:	693b      	ldr	r3, [r7, #16]
 8011620:	781b      	ldrb	r3, [r3, #0]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d1e7      	bne.n	80115f6 <USBD_GetString+0x6a>
 8011626:	e000      	b.n	801162a <USBD_GetString+0x9e>
    return;
 8011628:	bf00      	nop
  }
}
 801162a:	3718      	adds	r7, #24
 801162c:	46bd      	mov	sp, r7
 801162e:	bd80      	pop	{r7, pc}

08011630 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8011630:	b480      	push	{r7}
 8011632:	b085      	sub	sp, #20
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8011638:	2300      	movs	r3, #0
 801163a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8011640:	e005      	b.n	801164e <USBD_GetLen+0x1e>
  {
    len++;
 8011642:	7bfb      	ldrb	r3, [r7, #15]
 8011644:	3301      	adds	r3, #1
 8011646:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8011648:	68bb      	ldr	r3, [r7, #8]
 801164a:	3301      	adds	r3, #1
 801164c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 801164e:	68bb      	ldr	r3, [r7, #8]
 8011650:	781b      	ldrb	r3, [r3, #0]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d1f5      	bne.n	8011642 <USBD_GetLen+0x12>
  }

  return len;
 8011656:	7bfb      	ldrb	r3, [r7, #15]
}
 8011658:	4618      	mov	r0, r3
 801165a:	3714      	adds	r7, #20
 801165c:	46bd      	mov	sp, r7
 801165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011662:	4770      	bx	lr

08011664 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8011664:	b580      	push	{r7, lr}
 8011666:	b084      	sub	sp, #16
 8011668:	af00      	add	r7, sp, #0
 801166a:	60f8      	str	r0, [r7, #12]
 801166c:	60b9      	str	r1, [r7, #8]
 801166e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	2202      	movs	r2, #2
 8011674:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	687a      	ldr	r2, [r7, #4]
 801167c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 801167e:	68fb      	ldr	r3, [r7, #12]
 8011680:	687a      	ldr	r2, [r7, #4]
 8011682:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	68ba      	ldr	r2, [r7, #8]
 8011688:	2100      	movs	r1, #0
 801168a:	68f8      	ldr	r0, [r7, #12]
 801168c:	f000 fcfb 	bl	8012086 <USBD_LL_Transmit>

  return USBD_OK;
 8011690:	2300      	movs	r3, #0
}
 8011692:	4618      	mov	r0, r3
 8011694:	3710      	adds	r7, #16
 8011696:	46bd      	mov	sp, r7
 8011698:	bd80      	pop	{r7, pc}

0801169a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801169a:	b580      	push	{r7, lr}
 801169c:	b084      	sub	sp, #16
 801169e:	af00      	add	r7, sp, #0
 80116a0:	60f8      	str	r0, [r7, #12]
 80116a2:	60b9      	str	r1, [r7, #8]
 80116a4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	68ba      	ldr	r2, [r7, #8]
 80116aa:	2100      	movs	r1, #0
 80116ac:	68f8      	ldr	r0, [r7, #12]
 80116ae:	f000 fcea 	bl	8012086 <USBD_LL_Transmit>

  return USBD_OK;
 80116b2:	2300      	movs	r3, #0
}
 80116b4:	4618      	mov	r0, r3
 80116b6:	3710      	adds	r7, #16
 80116b8:	46bd      	mov	sp, r7
 80116ba:	bd80      	pop	{r7, pc}

080116bc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80116bc:	b580      	push	{r7, lr}
 80116be:	b084      	sub	sp, #16
 80116c0:	af00      	add	r7, sp, #0
 80116c2:	60f8      	str	r0, [r7, #12]
 80116c4:	60b9      	str	r1, [r7, #8]
 80116c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	2203      	movs	r2, #3
 80116cc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	687a      	ldr	r2, [r7, #4]
 80116d4:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	687a      	ldr	r2, [r7, #4]
 80116dc:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	68ba      	ldr	r2, [r7, #8]
 80116e4:	2100      	movs	r1, #0
 80116e6:	68f8      	ldr	r0, [r7, #12]
 80116e8:	f000 fcee 	bl	80120c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80116ec:	2300      	movs	r3, #0
}
 80116ee:	4618      	mov	r0, r3
 80116f0:	3710      	adds	r7, #16
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bd80      	pop	{r7, pc}

080116f6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80116f6:	b580      	push	{r7, lr}
 80116f8:	b084      	sub	sp, #16
 80116fa:	af00      	add	r7, sp, #0
 80116fc:	60f8      	str	r0, [r7, #12]
 80116fe:	60b9      	str	r1, [r7, #8]
 8011700:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	68ba      	ldr	r2, [r7, #8]
 8011706:	2100      	movs	r1, #0
 8011708:	68f8      	ldr	r0, [r7, #12]
 801170a:	f000 fcdd 	bl	80120c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801170e:	2300      	movs	r3, #0
}
 8011710:	4618      	mov	r0, r3
 8011712:	3710      	adds	r7, #16
 8011714:	46bd      	mov	sp, r7
 8011716:	bd80      	pop	{r7, pc}

08011718 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8011718:	b580      	push	{r7, lr}
 801171a:	b082      	sub	sp, #8
 801171c:	af00      	add	r7, sp, #0
 801171e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	2204      	movs	r2, #4
 8011724:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8011728:	2300      	movs	r3, #0
 801172a:	2200      	movs	r2, #0
 801172c:	2100      	movs	r1, #0
 801172e:	6878      	ldr	r0, [r7, #4]
 8011730:	f000 fca9 	bl	8012086 <USBD_LL_Transmit>

  return USBD_OK;
 8011734:	2300      	movs	r3, #0
}
 8011736:	4618      	mov	r0, r3
 8011738:	3708      	adds	r7, #8
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}

0801173e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801173e:	b580      	push	{r7, lr}
 8011740:	b082      	sub	sp, #8
 8011742:	af00      	add	r7, sp, #0
 8011744:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8011746:	687b      	ldr	r3, [r7, #4]
 8011748:	2205      	movs	r2, #5
 801174a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801174e:	2300      	movs	r3, #0
 8011750:	2200      	movs	r2, #0
 8011752:	2100      	movs	r1, #0
 8011754:	6878      	ldr	r0, [r7, #4]
 8011756:	f000 fcb7 	bl	80120c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801175a:	2300      	movs	r3, #0
}
 801175c:	4618      	mov	r0, r3
 801175e:	3708      	adds	r7, #8
 8011760:	46bd      	mov	sp, r7
 8011762:	bd80      	pop	{r7, pc}

08011764 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011768:	2200      	movs	r2, #0
 801176a:	4913      	ldr	r1, [pc, #76]	@ (80117b8 <MX_USB_DEVICE_Init+0x54>)
 801176c:	4813      	ldr	r0, [pc, #76]	@ (80117bc <MX_USB_DEVICE_Init+0x58>)
 801176e:	f7fe fccd 	bl	801010c <USBD_Init>
 8011772:	4603      	mov	r3, r0
 8011774:	2b00      	cmp	r3, #0
 8011776:	d001      	beq.n	801177c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011778:	f7ef fd83 	bl	8001282 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801177c:	4910      	ldr	r1, [pc, #64]	@ (80117c0 <MX_USB_DEVICE_Init+0x5c>)
 801177e:	480f      	ldr	r0, [pc, #60]	@ (80117bc <MX_USB_DEVICE_Init+0x58>)
 8011780:	f7fe fcf4 	bl	801016c <USBD_RegisterClass>
 8011784:	4603      	mov	r3, r0
 8011786:	2b00      	cmp	r3, #0
 8011788:	d001      	beq.n	801178e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801178a:	f7ef fd7a 	bl	8001282 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801178e:	490d      	ldr	r1, [pc, #52]	@ (80117c4 <MX_USB_DEVICE_Init+0x60>)
 8011790:	480a      	ldr	r0, [pc, #40]	@ (80117bc <MX_USB_DEVICE_Init+0x58>)
 8011792:	f7fe fc2b 	bl	800ffec <USBD_CDC_RegisterInterface>
 8011796:	4603      	mov	r3, r0
 8011798:	2b00      	cmp	r3, #0
 801179a:	d001      	beq.n	80117a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801179c:	f7ef fd71 	bl	8001282 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80117a0:	4806      	ldr	r0, [pc, #24]	@ (80117bc <MX_USB_DEVICE_Init+0x58>)
 80117a2:	f7fe fd19 	bl	80101d8 <USBD_Start>
 80117a6:	4603      	mov	r3, r0
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d001      	beq.n	80117b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80117ac:	f7ef fd69 	bl	8001282 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80117b0:	f7f6 fbb2 	bl	8007f18 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80117b4:	bf00      	nop
 80117b6:	bd80      	pop	{r7, pc}
 80117b8:	240000d8 	.word	0x240000d8
 80117bc:	24000a04 	.word	0x24000a04
 80117c0:	24000044 	.word	0x24000044
 80117c4:	240000c4 	.word	0x240000c4

080117c8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80117c8:	b580      	push	{r7, lr}
 80117ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80117cc:	2200      	movs	r2, #0
 80117ce:	4905      	ldr	r1, [pc, #20]	@ (80117e4 <CDC_Init_FS+0x1c>)
 80117d0:	4805      	ldr	r0, [pc, #20]	@ (80117e8 <CDC_Init_FS+0x20>)
 80117d2:	f7fe fc25 	bl	8010020 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80117d6:	4905      	ldr	r1, [pc, #20]	@ (80117ec <CDC_Init_FS+0x24>)
 80117d8:	4803      	ldr	r0, [pc, #12]	@ (80117e8 <CDC_Init_FS+0x20>)
 80117da:	f7fe fc43 	bl	8010064 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80117de:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80117e0:	4618      	mov	r0, r3
 80117e2:	bd80      	pop	{r7, pc}
 80117e4:	240014e0 	.word	0x240014e0
 80117e8:	24000a04 	.word	0x24000a04
 80117ec:	24000ce0 	.word	0x24000ce0

080117f0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80117f0:	b480      	push	{r7}
 80117f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80117f4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80117f6:	4618      	mov	r0, r3
 80117f8:	46bd      	mov	sp, r7
 80117fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117fe:	4770      	bx	lr

08011800 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011800:	b480      	push	{r7}
 8011802:	b083      	sub	sp, #12
 8011804:	af00      	add	r7, sp, #0
 8011806:	4603      	mov	r3, r0
 8011808:	6039      	str	r1, [r7, #0]
 801180a:	71fb      	strb	r3, [r7, #7]
 801180c:	4613      	mov	r3, r2
 801180e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011810:	79fb      	ldrb	r3, [r7, #7]
 8011812:	2b23      	cmp	r3, #35	@ 0x23
 8011814:	d84a      	bhi.n	80118ac <CDC_Control_FS+0xac>
 8011816:	a201      	add	r2, pc, #4	@ (adr r2, 801181c <CDC_Control_FS+0x1c>)
 8011818:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801181c:	080118ad 	.word	0x080118ad
 8011820:	080118ad 	.word	0x080118ad
 8011824:	080118ad 	.word	0x080118ad
 8011828:	080118ad 	.word	0x080118ad
 801182c:	080118ad 	.word	0x080118ad
 8011830:	080118ad 	.word	0x080118ad
 8011834:	080118ad 	.word	0x080118ad
 8011838:	080118ad 	.word	0x080118ad
 801183c:	080118ad 	.word	0x080118ad
 8011840:	080118ad 	.word	0x080118ad
 8011844:	080118ad 	.word	0x080118ad
 8011848:	080118ad 	.word	0x080118ad
 801184c:	080118ad 	.word	0x080118ad
 8011850:	080118ad 	.word	0x080118ad
 8011854:	080118ad 	.word	0x080118ad
 8011858:	080118ad 	.word	0x080118ad
 801185c:	080118ad 	.word	0x080118ad
 8011860:	080118ad 	.word	0x080118ad
 8011864:	080118ad 	.word	0x080118ad
 8011868:	080118ad 	.word	0x080118ad
 801186c:	080118ad 	.word	0x080118ad
 8011870:	080118ad 	.word	0x080118ad
 8011874:	080118ad 	.word	0x080118ad
 8011878:	080118ad 	.word	0x080118ad
 801187c:	080118ad 	.word	0x080118ad
 8011880:	080118ad 	.word	0x080118ad
 8011884:	080118ad 	.word	0x080118ad
 8011888:	080118ad 	.word	0x080118ad
 801188c:	080118ad 	.word	0x080118ad
 8011890:	080118ad 	.word	0x080118ad
 8011894:	080118ad 	.word	0x080118ad
 8011898:	080118ad 	.word	0x080118ad
 801189c:	080118ad 	.word	0x080118ad
 80118a0:	080118ad 	.word	0x080118ad
 80118a4:	080118ad 	.word	0x080118ad
 80118a8:	080118ad 	.word	0x080118ad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80118ac:	bf00      	nop
  }

  return (USBD_OK);
 80118ae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80118b0:	4618      	mov	r0, r3
 80118b2:	370c      	adds	r7, #12
 80118b4:	46bd      	mov	sp, r7
 80118b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ba:	4770      	bx	lr

080118bc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b082      	sub	sp, #8
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
 80118c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80118c6:	6879      	ldr	r1, [r7, #4]
 80118c8:	4805      	ldr	r0, [pc, #20]	@ (80118e0 <CDC_Receive_FS+0x24>)
 80118ca:	f7fe fbcb 	bl	8010064 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80118ce:	4804      	ldr	r0, [pc, #16]	@ (80118e0 <CDC_Receive_FS+0x24>)
 80118d0:	f7fe fbe6 	bl	80100a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80118d4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80118d6:	4618      	mov	r0, r3
 80118d8:	3708      	adds	r7, #8
 80118da:	46bd      	mov	sp, r7
 80118dc:	bd80      	pop	{r7, pc}
 80118de:	bf00      	nop
 80118e0:	24000a04 	.word	0x24000a04

080118e4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80118e4:	b480      	push	{r7}
 80118e6:	b087      	sub	sp, #28
 80118e8:	af00      	add	r7, sp, #0
 80118ea:	60f8      	str	r0, [r7, #12]
 80118ec:	60b9      	str	r1, [r7, #8]
 80118ee:	4613      	mov	r3, r2
 80118f0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80118f2:	2300      	movs	r3, #0
 80118f4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80118f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80118fa:	4618      	mov	r0, r3
 80118fc:	371c      	adds	r7, #28
 80118fe:	46bd      	mov	sp, r7
 8011900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011904:	4770      	bx	lr
	...

08011908 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011908:	b480      	push	{r7}
 801190a:	b083      	sub	sp, #12
 801190c:	af00      	add	r7, sp, #0
 801190e:	4603      	mov	r3, r0
 8011910:	6039      	str	r1, [r7, #0]
 8011912:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011914:	683b      	ldr	r3, [r7, #0]
 8011916:	2212      	movs	r2, #18
 8011918:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801191a:	4b03      	ldr	r3, [pc, #12]	@ (8011928 <USBD_FS_DeviceDescriptor+0x20>)
}
 801191c:	4618      	mov	r0, r3
 801191e:	370c      	adds	r7, #12
 8011920:	46bd      	mov	sp, r7
 8011922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011926:	4770      	bx	lr
 8011928:	240000f8 	.word	0x240000f8

0801192c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801192c:	b480      	push	{r7}
 801192e:	b083      	sub	sp, #12
 8011930:	af00      	add	r7, sp, #0
 8011932:	4603      	mov	r3, r0
 8011934:	6039      	str	r1, [r7, #0]
 8011936:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011938:	683b      	ldr	r3, [r7, #0]
 801193a:	2204      	movs	r2, #4
 801193c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801193e:	4b03      	ldr	r3, [pc, #12]	@ (801194c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011940:	4618      	mov	r0, r3
 8011942:	370c      	adds	r7, #12
 8011944:	46bd      	mov	sp, r7
 8011946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194a:	4770      	bx	lr
 801194c:	2400010c 	.word	0x2400010c

08011950 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b082      	sub	sp, #8
 8011954:	af00      	add	r7, sp, #0
 8011956:	4603      	mov	r3, r0
 8011958:	6039      	str	r1, [r7, #0]
 801195a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801195c:	79fb      	ldrb	r3, [r7, #7]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d105      	bne.n	801196e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011962:	683a      	ldr	r2, [r7, #0]
 8011964:	4907      	ldr	r1, [pc, #28]	@ (8011984 <USBD_FS_ProductStrDescriptor+0x34>)
 8011966:	4808      	ldr	r0, [pc, #32]	@ (8011988 <USBD_FS_ProductStrDescriptor+0x38>)
 8011968:	f7ff fe10 	bl	801158c <USBD_GetString>
 801196c:	e004      	b.n	8011978 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801196e:	683a      	ldr	r2, [r7, #0]
 8011970:	4904      	ldr	r1, [pc, #16]	@ (8011984 <USBD_FS_ProductStrDescriptor+0x34>)
 8011972:	4805      	ldr	r0, [pc, #20]	@ (8011988 <USBD_FS_ProductStrDescriptor+0x38>)
 8011974:	f7ff fe0a 	bl	801158c <USBD_GetString>
  }
  return USBD_StrDesc;
 8011978:	4b02      	ldr	r3, [pc, #8]	@ (8011984 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801197a:	4618      	mov	r0, r3
 801197c:	3708      	adds	r7, #8
 801197e:	46bd      	mov	sp, r7
 8011980:	bd80      	pop	{r7, pc}
 8011982:	bf00      	nop
 8011984:	24001ce0 	.word	0x24001ce0
 8011988:	08014a38 	.word	0x08014a38

0801198c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801198c:	b580      	push	{r7, lr}
 801198e:	b082      	sub	sp, #8
 8011990:	af00      	add	r7, sp, #0
 8011992:	4603      	mov	r3, r0
 8011994:	6039      	str	r1, [r7, #0]
 8011996:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011998:	683a      	ldr	r2, [r7, #0]
 801199a:	4904      	ldr	r1, [pc, #16]	@ (80119ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801199c:	4804      	ldr	r0, [pc, #16]	@ (80119b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801199e:	f7ff fdf5 	bl	801158c <USBD_GetString>
  return USBD_StrDesc;
 80119a2:	4b02      	ldr	r3, [pc, #8]	@ (80119ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80119a4:	4618      	mov	r0, r3
 80119a6:	3708      	adds	r7, #8
 80119a8:	46bd      	mov	sp, r7
 80119aa:	bd80      	pop	{r7, pc}
 80119ac:	24001ce0 	.word	0x24001ce0
 80119b0:	08014a50 	.word	0x08014a50

080119b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b082      	sub	sp, #8
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	4603      	mov	r3, r0
 80119bc:	6039      	str	r1, [r7, #0]
 80119be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80119c0:	683b      	ldr	r3, [r7, #0]
 80119c2:	221a      	movs	r2, #26
 80119c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80119c6:	f000 f843 	bl	8011a50 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80119ca:	4b02      	ldr	r3, [pc, #8]	@ (80119d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80119cc:	4618      	mov	r0, r3
 80119ce:	3708      	adds	r7, #8
 80119d0:	46bd      	mov	sp, r7
 80119d2:	bd80      	pop	{r7, pc}
 80119d4:	24000110 	.word	0x24000110

080119d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b082      	sub	sp, #8
 80119dc:	af00      	add	r7, sp, #0
 80119de:	4603      	mov	r3, r0
 80119e0:	6039      	str	r1, [r7, #0]
 80119e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80119e4:	79fb      	ldrb	r3, [r7, #7]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d105      	bne.n	80119f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80119ea:	683a      	ldr	r2, [r7, #0]
 80119ec:	4907      	ldr	r1, [pc, #28]	@ (8011a0c <USBD_FS_ConfigStrDescriptor+0x34>)
 80119ee:	4808      	ldr	r0, [pc, #32]	@ (8011a10 <USBD_FS_ConfigStrDescriptor+0x38>)
 80119f0:	f7ff fdcc 	bl	801158c <USBD_GetString>
 80119f4:	e004      	b.n	8011a00 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80119f6:	683a      	ldr	r2, [r7, #0]
 80119f8:	4904      	ldr	r1, [pc, #16]	@ (8011a0c <USBD_FS_ConfigStrDescriptor+0x34>)
 80119fa:	4805      	ldr	r0, [pc, #20]	@ (8011a10 <USBD_FS_ConfigStrDescriptor+0x38>)
 80119fc:	f7ff fdc6 	bl	801158c <USBD_GetString>
  }
  return USBD_StrDesc;
 8011a00:	4b02      	ldr	r3, [pc, #8]	@ (8011a0c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8011a02:	4618      	mov	r0, r3
 8011a04:	3708      	adds	r7, #8
 8011a06:	46bd      	mov	sp, r7
 8011a08:	bd80      	pop	{r7, pc}
 8011a0a:	bf00      	nop
 8011a0c:	24001ce0 	.word	0x24001ce0
 8011a10:	08014a64 	.word	0x08014a64

08011a14 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a14:	b580      	push	{r7, lr}
 8011a16:	b082      	sub	sp, #8
 8011a18:	af00      	add	r7, sp, #0
 8011a1a:	4603      	mov	r3, r0
 8011a1c:	6039      	str	r1, [r7, #0]
 8011a1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011a20:	79fb      	ldrb	r3, [r7, #7]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d105      	bne.n	8011a32 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011a26:	683a      	ldr	r2, [r7, #0]
 8011a28:	4907      	ldr	r1, [pc, #28]	@ (8011a48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011a2a:	4808      	ldr	r0, [pc, #32]	@ (8011a4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011a2c:	f7ff fdae 	bl	801158c <USBD_GetString>
 8011a30:	e004      	b.n	8011a3c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011a32:	683a      	ldr	r2, [r7, #0]
 8011a34:	4904      	ldr	r1, [pc, #16]	@ (8011a48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011a36:	4805      	ldr	r0, [pc, #20]	@ (8011a4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011a38:	f7ff fda8 	bl	801158c <USBD_GetString>
  }
  return USBD_StrDesc;
 8011a3c:	4b02      	ldr	r3, [pc, #8]	@ (8011a48 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011a3e:	4618      	mov	r0, r3
 8011a40:	3708      	adds	r7, #8
 8011a42:	46bd      	mov	sp, r7
 8011a44:	bd80      	pop	{r7, pc}
 8011a46:	bf00      	nop
 8011a48:	24001ce0 	.word	0x24001ce0
 8011a4c:	08014a70 	.word	0x08014a70

08011a50 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011a50:	b580      	push	{r7, lr}
 8011a52:	b084      	sub	sp, #16
 8011a54:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011a56:	4b0f      	ldr	r3, [pc, #60]	@ (8011a94 <Get_SerialNum+0x44>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011a5c:	4b0e      	ldr	r3, [pc, #56]	@ (8011a98 <Get_SerialNum+0x48>)
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011a62:	4b0e      	ldr	r3, [pc, #56]	@ (8011a9c <Get_SerialNum+0x4c>)
 8011a64:	681b      	ldr	r3, [r3, #0]
 8011a66:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011a68:	68fa      	ldr	r2, [r7, #12]
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	4413      	add	r3, r2
 8011a6e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	2b00      	cmp	r3, #0
 8011a74:	d009      	beq.n	8011a8a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011a76:	2208      	movs	r2, #8
 8011a78:	4909      	ldr	r1, [pc, #36]	@ (8011aa0 <Get_SerialNum+0x50>)
 8011a7a:	68f8      	ldr	r0, [r7, #12]
 8011a7c:	f000 f814 	bl	8011aa8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011a80:	2204      	movs	r2, #4
 8011a82:	4908      	ldr	r1, [pc, #32]	@ (8011aa4 <Get_SerialNum+0x54>)
 8011a84:	68b8      	ldr	r0, [r7, #8]
 8011a86:	f000 f80f 	bl	8011aa8 <IntToUnicode>
  }
}
 8011a8a:	bf00      	nop
 8011a8c:	3710      	adds	r7, #16
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd80      	pop	{r7, pc}
 8011a92:	bf00      	nop
 8011a94:	1ff1e800 	.word	0x1ff1e800
 8011a98:	1ff1e804 	.word	0x1ff1e804
 8011a9c:	1ff1e808 	.word	0x1ff1e808
 8011aa0:	24000112 	.word	0x24000112
 8011aa4:	24000122 	.word	0x24000122

08011aa8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011aa8:	b480      	push	{r7}
 8011aaa:	b087      	sub	sp, #28
 8011aac:	af00      	add	r7, sp, #0
 8011aae:	60f8      	str	r0, [r7, #12]
 8011ab0:	60b9      	str	r1, [r7, #8]
 8011ab2:	4613      	mov	r3, r2
 8011ab4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011aba:	2300      	movs	r3, #0
 8011abc:	75fb      	strb	r3, [r7, #23]
 8011abe:	e027      	b.n	8011b10 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011ac0:	68fb      	ldr	r3, [r7, #12]
 8011ac2:	0f1b      	lsrs	r3, r3, #28
 8011ac4:	2b09      	cmp	r3, #9
 8011ac6:	d80b      	bhi.n	8011ae0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	0f1b      	lsrs	r3, r3, #28
 8011acc:	b2da      	uxtb	r2, r3
 8011ace:	7dfb      	ldrb	r3, [r7, #23]
 8011ad0:	005b      	lsls	r3, r3, #1
 8011ad2:	4619      	mov	r1, r3
 8011ad4:	68bb      	ldr	r3, [r7, #8]
 8011ad6:	440b      	add	r3, r1
 8011ad8:	3230      	adds	r2, #48	@ 0x30
 8011ada:	b2d2      	uxtb	r2, r2
 8011adc:	701a      	strb	r2, [r3, #0]
 8011ade:	e00a      	b.n	8011af6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011ae0:	68fb      	ldr	r3, [r7, #12]
 8011ae2:	0f1b      	lsrs	r3, r3, #28
 8011ae4:	b2da      	uxtb	r2, r3
 8011ae6:	7dfb      	ldrb	r3, [r7, #23]
 8011ae8:	005b      	lsls	r3, r3, #1
 8011aea:	4619      	mov	r1, r3
 8011aec:	68bb      	ldr	r3, [r7, #8]
 8011aee:	440b      	add	r3, r1
 8011af0:	3237      	adds	r2, #55	@ 0x37
 8011af2:	b2d2      	uxtb	r2, r2
 8011af4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011af6:	68fb      	ldr	r3, [r7, #12]
 8011af8:	011b      	lsls	r3, r3, #4
 8011afa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011afc:	7dfb      	ldrb	r3, [r7, #23]
 8011afe:	005b      	lsls	r3, r3, #1
 8011b00:	3301      	adds	r3, #1
 8011b02:	68ba      	ldr	r2, [r7, #8]
 8011b04:	4413      	add	r3, r2
 8011b06:	2200      	movs	r2, #0
 8011b08:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011b0a:	7dfb      	ldrb	r3, [r7, #23]
 8011b0c:	3301      	adds	r3, #1
 8011b0e:	75fb      	strb	r3, [r7, #23]
 8011b10:	7dfa      	ldrb	r2, [r7, #23]
 8011b12:	79fb      	ldrb	r3, [r7, #7]
 8011b14:	429a      	cmp	r2, r3
 8011b16:	d3d3      	bcc.n	8011ac0 <IntToUnicode+0x18>
  }
}
 8011b18:	bf00      	nop
 8011b1a:	bf00      	nop
 8011b1c:	371c      	adds	r7, #28
 8011b1e:	46bd      	mov	sp, r7
 8011b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b24:	4770      	bx	lr
	...

08011b28 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b0ba      	sub	sp, #232	@ 0xe8
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011b30:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011b34:	2200      	movs	r2, #0
 8011b36:	601a      	str	r2, [r3, #0]
 8011b38:	605a      	str	r2, [r3, #4]
 8011b3a:	609a      	str	r2, [r3, #8]
 8011b3c:	60da      	str	r2, [r3, #12]
 8011b3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011b40:	f107 0310 	add.w	r3, r7, #16
 8011b44:	22c0      	movs	r2, #192	@ 0xc0
 8011b46:	2100      	movs	r1, #0
 8011b48:	4618      	mov	r0, r3
 8011b4a:	f001 f872 	bl	8012c32 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	681b      	ldr	r3, [r3, #0]
 8011b52:	4a34      	ldr	r2, [pc, #208]	@ (8011c24 <HAL_PCD_MspInit+0xfc>)
 8011b54:	4293      	cmp	r3, r2
 8011b56:	d161      	bne.n	8011c1c <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8011b58:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8011b5c:	f04f 0300 	mov.w	r3, #0
 8011b60:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8011b64:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 8011b68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011b6c:	f107 0310 	add.w	r3, r7, #16
 8011b70:	4618      	mov	r0, r3
 8011b72:	f7f7 f9c7 	bl	8008f04 <HAL_RCCEx_PeriphCLKConfig>
 8011b76:	4603      	mov	r3, r0
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d001      	beq.n	8011b80 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8011b7c:	f7ef fb81 	bl	8001282 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8011b80:	f7f6 f9ca 	bl	8007f18 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011b84:	4b28      	ldr	r3, [pc, #160]	@ (8011c28 <HAL_PCD_MspInit+0x100>)
 8011b86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011b8a:	4a27      	ldr	r2, [pc, #156]	@ (8011c28 <HAL_PCD_MspInit+0x100>)
 8011b8c:	f043 0301 	orr.w	r3, r3, #1
 8011b90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011b94:	4b24      	ldr	r3, [pc, #144]	@ (8011c28 <HAL_PCD_MspInit+0x100>)
 8011b96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011b9a:	f003 0301 	and.w	r3, r3, #1
 8011b9e:	60fb      	str	r3, [r7, #12]
 8011ba0:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8011ba2:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8011ba6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011baa:	2302      	movs	r3, #2
 8011bac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011bb0:	2300      	movs	r3, #0
 8011bb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8011bbc:	230a      	movs	r3, #10
 8011bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011bc2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011bc6:	4619      	mov	r1, r3
 8011bc8:	4818      	ldr	r0, [pc, #96]	@ (8011c2c <HAL_PCD_MspInit+0x104>)
 8011bca:	f7f4 fc9b 	bl	8006504 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8011bce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8011bd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8011bd6:	2300      	movs	r3, #0
 8011bd8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011bdc:	2300      	movs	r3, #0
 8011bde:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011be2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8011be6:	4619      	mov	r1, r3
 8011be8:	4810      	ldr	r0, [pc, #64]	@ (8011c2c <HAL_PCD_MspInit+0x104>)
 8011bea:	f7f4 fc8b 	bl	8006504 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011bee:	4b0e      	ldr	r3, [pc, #56]	@ (8011c28 <HAL_PCD_MspInit+0x100>)
 8011bf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011bf4:	4a0c      	ldr	r2, [pc, #48]	@ (8011c28 <HAL_PCD_MspInit+0x100>)
 8011bf6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8011bfa:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8011bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8011c28 <HAL_PCD_MspInit+0x100>)
 8011c00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8011c04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011c08:	60bb      	str	r3, [r7, #8]
 8011c0a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011c0c:	2200      	movs	r2, #0
 8011c0e:	2100      	movs	r1, #0
 8011c10:	2065      	movs	r0, #101	@ 0x65
 8011c12:	f7f2 fae6 	bl	80041e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011c16:	2065      	movs	r0, #101	@ 0x65
 8011c18:	f7f2 fafd 	bl	8004216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011c1c:	bf00      	nop
 8011c1e:	37e8      	adds	r7, #232	@ 0xe8
 8011c20:	46bd      	mov	sp, r7
 8011c22:	bd80      	pop	{r7, pc}
 8011c24:	40080000 	.word	0x40080000
 8011c28:	58024400 	.word	0x58024400
 8011c2c:	58020000 	.word	0x58020000

08011c30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b082      	sub	sp, #8
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8011c3e:	687b      	ldr	r3, [r7, #4]
 8011c40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8011c44:	4619      	mov	r1, r3
 8011c46:	4610      	mov	r0, r2
 8011c48:	f7fe fb13 	bl	8010272 <USBD_LL_SetupStage>
}
 8011c4c:	bf00      	nop
 8011c4e:	3708      	adds	r7, #8
 8011c50:	46bd      	mov	sp, r7
 8011c52:	bd80      	pop	{r7, pc}

08011c54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c54:	b580      	push	{r7, lr}
 8011c56:	b082      	sub	sp, #8
 8011c58:	af00      	add	r7, sp, #0
 8011c5a:	6078      	str	r0, [r7, #4]
 8011c5c:	460b      	mov	r3, r1
 8011c5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011c66:	78fa      	ldrb	r2, [r7, #3]
 8011c68:	6879      	ldr	r1, [r7, #4]
 8011c6a:	4613      	mov	r3, r2
 8011c6c:	00db      	lsls	r3, r3, #3
 8011c6e:	4413      	add	r3, r2
 8011c70:	009b      	lsls	r3, r3, #2
 8011c72:	440b      	add	r3, r1
 8011c74:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8011c78:	681a      	ldr	r2, [r3, #0]
 8011c7a:	78fb      	ldrb	r3, [r7, #3]
 8011c7c:	4619      	mov	r1, r3
 8011c7e:	f7fe fb4d 	bl	801031c <USBD_LL_DataOutStage>
}
 8011c82:	bf00      	nop
 8011c84:	3708      	adds	r7, #8
 8011c86:	46bd      	mov	sp, r7
 8011c88:	bd80      	pop	{r7, pc}

08011c8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c8a:	b580      	push	{r7, lr}
 8011c8c:	b082      	sub	sp, #8
 8011c8e:	af00      	add	r7, sp, #0
 8011c90:	6078      	str	r0, [r7, #4]
 8011c92:	460b      	mov	r3, r1
 8011c94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8011c9c:	78fa      	ldrb	r2, [r7, #3]
 8011c9e:	6879      	ldr	r1, [r7, #4]
 8011ca0:	4613      	mov	r3, r2
 8011ca2:	00db      	lsls	r3, r3, #3
 8011ca4:	4413      	add	r3, r2
 8011ca6:	009b      	lsls	r3, r3, #2
 8011ca8:	440b      	add	r3, r1
 8011caa:	3320      	adds	r3, #32
 8011cac:	681a      	ldr	r2, [r3, #0]
 8011cae:	78fb      	ldrb	r3, [r7, #3]
 8011cb0:	4619      	mov	r1, r3
 8011cb2:	f7fe fbe6 	bl	8010482 <USBD_LL_DataInStage>
}
 8011cb6:	bf00      	nop
 8011cb8:	3708      	adds	r7, #8
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}

08011cbe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011cbe:	b580      	push	{r7, lr}
 8011cc0:	b082      	sub	sp, #8
 8011cc2:	af00      	add	r7, sp, #0
 8011cc4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011ccc:	4618      	mov	r0, r3
 8011cce:	f7fe fd20 	bl	8010712 <USBD_LL_SOF>
}
 8011cd2:	bf00      	nop
 8011cd4:	3708      	adds	r7, #8
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	bd80      	pop	{r7, pc}

08011cda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011cda:	b580      	push	{r7, lr}
 8011cdc:	b084      	sub	sp, #16
 8011cde:	af00      	add	r7, sp, #0
 8011ce0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011ce2:	2301      	movs	r3, #1
 8011ce4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	79db      	ldrb	r3, [r3, #7]
 8011cea:	2b00      	cmp	r3, #0
 8011cec:	d102      	bne.n	8011cf4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011cee:	2300      	movs	r3, #0
 8011cf0:	73fb      	strb	r3, [r7, #15]
 8011cf2:	e008      	b.n	8011d06 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	79db      	ldrb	r3, [r3, #7]
 8011cf8:	2b02      	cmp	r3, #2
 8011cfa:	d102      	bne.n	8011d02 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011cfc:	2301      	movs	r3, #1
 8011cfe:	73fb      	strb	r3, [r7, #15]
 8011d00:	e001      	b.n	8011d06 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011d02:	f7ef fabe 	bl	8001282 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011d0c:	7bfa      	ldrb	r2, [r7, #15]
 8011d0e:	4611      	mov	r1, r2
 8011d10:	4618      	mov	r0, r3
 8011d12:	f7fe fcba 	bl	801068a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011d1c:	4618      	mov	r0, r3
 8011d1e:	f7fe fc62 	bl	80105e6 <USBD_LL_Reset>
}
 8011d22:	bf00      	nop
 8011d24:	3710      	adds	r7, #16
 8011d26:	46bd      	mov	sp, r7
 8011d28:	bd80      	pop	{r7, pc}
	...

08011d2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b082      	sub	sp, #8
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011d3a:	4618      	mov	r0, r3
 8011d3c:	f7fe fcb5 	bl	80106aa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	687a      	ldr	r2, [r7, #4]
 8011d4c:	6812      	ldr	r2, [r2, #0]
 8011d4e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8011d52:	f043 0301 	orr.w	r3, r3, #1
 8011d56:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011d58:	687b      	ldr	r3, [r7, #4]
 8011d5a:	7adb      	ldrb	r3, [r3, #11]
 8011d5c:	2b00      	cmp	r3, #0
 8011d5e:	d005      	beq.n	8011d6c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011d60:	4b04      	ldr	r3, [pc, #16]	@ (8011d74 <HAL_PCD_SuspendCallback+0x48>)
 8011d62:	691b      	ldr	r3, [r3, #16]
 8011d64:	4a03      	ldr	r2, [pc, #12]	@ (8011d74 <HAL_PCD_SuspendCallback+0x48>)
 8011d66:	f043 0306 	orr.w	r3, r3, #6
 8011d6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011d6c:	bf00      	nop
 8011d6e:	3708      	adds	r7, #8
 8011d70:	46bd      	mov	sp, r7
 8011d72:	bd80      	pop	{r7, pc}
 8011d74:	e000ed00 	.word	0xe000ed00

08011d78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b082      	sub	sp, #8
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011d86:	4618      	mov	r0, r3
 8011d88:	f7fe fcab 	bl	80106e2 <USBD_LL_Resume>
}
 8011d8c:	bf00      	nop
 8011d8e:	3708      	adds	r7, #8
 8011d90:	46bd      	mov	sp, r7
 8011d92:	bd80      	pop	{r7, pc}

08011d94 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d94:	b580      	push	{r7, lr}
 8011d96:	b082      	sub	sp, #8
 8011d98:	af00      	add	r7, sp, #0
 8011d9a:	6078      	str	r0, [r7, #4]
 8011d9c:	460b      	mov	r3, r1
 8011d9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011da6:	78fa      	ldrb	r2, [r7, #3]
 8011da8:	4611      	mov	r1, r2
 8011daa:	4618      	mov	r0, r3
 8011dac:	f7fe fd03 	bl	80107b6 <USBD_LL_IsoOUTIncomplete>
}
 8011db0:	bf00      	nop
 8011db2:	3708      	adds	r7, #8
 8011db4:	46bd      	mov	sp, r7
 8011db6:	bd80      	pop	{r7, pc}

08011db8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011db8:	b580      	push	{r7, lr}
 8011dba:	b082      	sub	sp, #8
 8011dbc:	af00      	add	r7, sp, #0
 8011dbe:	6078      	str	r0, [r7, #4]
 8011dc0:	460b      	mov	r3, r1
 8011dc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011dca:	78fa      	ldrb	r2, [r7, #3]
 8011dcc:	4611      	mov	r1, r2
 8011dce:	4618      	mov	r0, r3
 8011dd0:	f7fe fcbf 	bl	8010752 <USBD_LL_IsoINIncomplete>
}
 8011dd4:	bf00      	nop
 8011dd6:	3708      	adds	r7, #8
 8011dd8:	46bd      	mov	sp, r7
 8011dda:	bd80      	pop	{r7, pc}

08011ddc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b082      	sub	sp, #8
 8011de0:	af00      	add	r7, sp, #0
 8011de2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011dea:	4618      	mov	r0, r3
 8011dec:	f7fe fd15 	bl	801081a <USBD_LL_DevConnected>
}
 8011df0:	bf00      	nop
 8011df2:	3708      	adds	r7, #8
 8011df4:	46bd      	mov	sp, r7
 8011df6:	bd80      	pop	{r7, pc}

08011df8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b082      	sub	sp, #8
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8011e06:	4618      	mov	r0, r3
 8011e08:	f7fe fd12 	bl	8010830 <USBD_LL_DevDisconnected>
}
 8011e0c:	bf00      	nop
 8011e0e:	3708      	adds	r7, #8
 8011e10:	46bd      	mov	sp, r7
 8011e12:	bd80      	pop	{r7, pc}

08011e14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	b082      	sub	sp, #8
 8011e18:	af00      	add	r7, sp, #0
 8011e1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	781b      	ldrb	r3, [r3, #0]
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d13e      	bne.n	8011ea2 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011e24:	4a21      	ldr	r2, [pc, #132]	@ (8011eac <USBD_LL_Init+0x98>)
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	4a1f      	ldr	r2, [pc, #124]	@ (8011eac <USBD_LL_Init+0x98>)
 8011e30:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011e34:	4b1d      	ldr	r3, [pc, #116]	@ (8011eac <USBD_LL_Init+0x98>)
 8011e36:	4a1e      	ldr	r2, [pc, #120]	@ (8011eb0 <USBD_LL_Init+0x9c>)
 8011e38:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8011e3a:	4b1c      	ldr	r3, [pc, #112]	@ (8011eac <USBD_LL_Init+0x98>)
 8011e3c:	2209      	movs	r2, #9
 8011e3e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011e40:	4b1a      	ldr	r3, [pc, #104]	@ (8011eac <USBD_LL_Init+0x98>)
 8011e42:	2202      	movs	r2, #2
 8011e44:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011e46:	4b19      	ldr	r3, [pc, #100]	@ (8011eac <USBD_LL_Init+0x98>)
 8011e48:	2200      	movs	r2, #0
 8011e4a:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011e4c:	4b17      	ldr	r3, [pc, #92]	@ (8011eac <USBD_LL_Init+0x98>)
 8011e4e:	2202      	movs	r2, #2
 8011e50:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8011e52:	4b16      	ldr	r3, [pc, #88]	@ (8011eac <USBD_LL_Init+0x98>)
 8011e54:	2201      	movs	r2, #1
 8011e56:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011e58:	4b14      	ldr	r3, [pc, #80]	@ (8011eac <USBD_LL_Init+0x98>)
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011e5e:	4b13      	ldr	r3, [pc, #76]	@ (8011eac <USBD_LL_Init+0x98>)
 8011e60:	2200      	movs	r2, #0
 8011e62:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8011e64:	4b11      	ldr	r3, [pc, #68]	@ (8011eac <USBD_LL_Init+0x98>)
 8011e66:	2201      	movs	r2, #1
 8011e68:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8011e6a:	4b10      	ldr	r3, [pc, #64]	@ (8011eac <USBD_LL_Init+0x98>)
 8011e6c:	2201      	movs	r2, #1
 8011e6e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011e70:	4b0e      	ldr	r3, [pc, #56]	@ (8011eac <USBD_LL_Init+0x98>)
 8011e72:	2200      	movs	r2, #0
 8011e74:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011e76:	480d      	ldr	r0, [pc, #52]	@ (8011eac <USBD_LL_Init+0x98>)
 8011e78:	f7f4 fd56 	bl	8006928 <HAL_PCD_Init>
 8011e7c:	4603      	mov	r3, r0
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d001      	beq.n	8011e86 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8011e82:	f7ef f9fe 	bl	8001282 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011e86:	2180      	movs	r1, #128	@ 0x80
 8011e88:	4808      	ldr	r0, [pc, #32]	@ (8011eac <USBD_LL_Init+0x98>)
 8011e8a:	f7f5 ffaa 	bl	8007de2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8011e8e:	2240      	movs	r2, #64	@ 0x40
 8011e90:	2100      	movs	r1, #0
 8011e92:	4806      	ldr	r0, [pc, #24]	@ (8011eac <USBD_LL_Init+0x98>)
 8011e94:	f7f5 ff5e 	bl	8007d54 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011e98:	2280      	movs	r2, #128	@ 0x80
 8011e9a:	2101      	movs	r1, #1
 8011e9c:	4803      	ldr	r0, [pc, #12]	@ (8011eac <USBD_LL_Init+0x98>)
 8011e9e:	f7f5 ff59 	bl	8007d54 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8011ea2:	2300      	movs	r3, #0
}
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	3708      	adds	r7, #8
 8011ea8:	46bd      	mov	sp, r7
 8011eaa:	bd80      	pop	{r7, pc}
 8011eac:	24001ee0 	.word	0x24001ee0
 8011eb0:	40080000 	.word	0x40080000

08011eb4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b084      	sub	sp, #16
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ec0:	2300      	movs	r3, #0
 8011ec2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011ec4:	687b      	ldr	r3, [r7, #4]
 8011ec6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011eca:	4618      	mov	r0, r3
 8011ecc:	f7f4 fe38 	bl	8006b40 <HAL_PCD_Start>
 8011ed0:	4603      	mov	r3, r0
 8011ed2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ed4:	7bfb      	ldrb	r3, [r7, #15]
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	f000 f942 	bl	8012160 <USBD_Get_USB_Status>
 8011edc:	4603      	mov	r3, r0
 8011ede:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ee0:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	3710      	adds	r7, #16
 8011ee6:	46bd      	mov	sp, r7
 8011ee8:	bd80      	pop	{r7, pc}

08011eea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011eea:	b580      	push	{r7, lr}
 8011eec:	b084      	sub	sp, #16
 8011eee:	af00      	add	r7, sp, #0
 8011ef0:	6078      	str	r0, [r7, #4]
 8011ef2:	4608      	mov	r0, r1
 8011ef4:	4611      	mov	r1, r2
 8011ef6:	461a      	mov	r2, r3
 8011ef8:	4603      	mov	r3, r0
 8011efa:	70fb      	strb	r3, [r7, #3]
 8011efc:	460b      	mov	r3, r1
 8011efe:	70bb      	strb	r3, [r7, #2]
 8011f00:	4613      	mov	r3, r2
 8011f02:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f04:	2300      	movs	r3, #0
 8011f06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f08:	2300      	movs	r3, #0
 8011f0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8011f12:	78bb      	ldrb	r3, [r7, #2]
 8011f14:	883a      	ldrh	r2, [r7, #0]
 8011f16:	78f9      	ldrb	r1, [r7, #3]
 8011f18:	f7f5 fb39 	bl	800758e <HAL_PCD_EP_Open>
 8011f1c:	4603      	mov	r3, r0
 8011f1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f20:	7bfb      	ldrb	r3, [r7, #15]
 8011f22:	4618      	mov	r0, r3
 8011f24:	f000 f91c 	bl	8012160 <USBD_Get_USB_Status>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011f2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8011f2e:	4618      	mov	r0, r3
 8011f30:	3710      	adds	r7, #16
 8011f32:	46bd      	mov	sp, r7
 8011f34:	bd80      	pop	{r7, pc}

08011f36 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011f36:	b580      	push	{r7, lr}
 8011f38:	b084      	sub	sp, #16
 8011f3a:	af00      	add	r7, sp, #0
 8011f3c:	6078      	str	r0, [r7, #4]
 8011f3e:	460b      	mov	r3, r1
 8011f40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f42:	2300      	movs	r3, #0
 8011f44:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f46:	2300      	movs	r3, #0
 8011f48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011f50:	78fa      	ldrb	r2, [r7, #3]
 8011f52:	4611      	mov	r1, r2
 8011f54:	4618      	mov	r0, r3
 8011f56:	f7f5 fb82 	bl	800765e <HAL_PCD_EP_Close>
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f5e:	7bfb      	ldrb	r3, [r7, #15]
 8011f60:	4618      	mov	r0, r3
 8011f62:	f000 f8fd 	bl	8012160 <USBD_Get_USB_Status>
 8011f66:	4603      	mov	r3, r0
 8011f68:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011f6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8011f6c:	4618      	mov	r0, r3
 8011f6e:	3710      	adds	r7, #16
 8011f70:	46bd      	mov	sp, r7
 8011f72:	bd80      	pop	{r7, pc}

08011f74 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b084      	sub	sp, #16
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
 8011f7c:	460b      	mov	r3, r1
 8011f7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f80:	2300      	movs	r3, #0
 8011f82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f84:	2300      	movs	r3, #0
 8011f86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011f8e:	78fa      	ldrb	r2, [r7, #3]
 8011f90:	4611      	mov	r1, r2
 8011f92:	4618      	mov	r0, r3
 8011f94:	f7f5 fc3a 	bl	800780c <HAL_PCD_EP_SetStall>
 8011f98:	4603      	mov	r3, r0
 8011f9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f9c:	7bfb      	ldrb	r3, [r7, #15]
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	f000 f8de 	bl	8012160 <USBD_Get_USB_Status>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011fa8:	7bbb      	ldrb	r3, [r7, #14]
}
 8011faa:	4618      	mov	r0, r3
 8011fac:	3710      	adds	r7, #16
 8011fae:	46bd      	mov	sp, r7
 8011fb0:	bd80      	pop	{r7, pc}

08011fb2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011fb2:	b580      	push	{r7, lr}
 8011fb4:	b084      	sub	sp, #16
 8011fb6:	af00      	add	r7, sp, #0
 8011fb8:	6078      	str	r0, [r7, #4]
 8011fba:	460b      	mov	r3, r1
 8011fbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011fc2:	2300      	movs	r3, #0
 8011fc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8011fcc:	78fa      	ldrb	r2, [r7, #3]
 8011fce:	4611      	mov	r1, r2
 8011fd0:	4618      	mov	r0, r3
 8011fd2:	f7f5 fc7e 	bl	80078d2 <HAL_PCD_EP_ClrStall>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011fda:	7bfb      	ldrb	r3, [r7, #15]
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f000 f8bf 	bl	8012160 <USBD_Get_USB_Status>
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011fe6:	7bbb      	ldrb	r3, [r7, #14]
}
 8011fe8:	4618      	mov	r0, r3
 8011fea:	3710      	adds	r7, #16
 8011fec:	46bd      	mov	sp, r7
 8011fee:	bd80      	pop	{r7, pc}

08011ff0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011ff0:	b480      	push	{r7}
 8011ff2:	b085      	sub	sp, #20
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
 8011ff8:	460b      	mov	r3, r1
 8011ffa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012002:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8012004:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012008:	2b00      	cmp	r3, #0
 801200a:	da0b      	bge.n	8012024 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801200c:	78fb      	ldrb	r3, [r7, #3]
 801200e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8012012:	68f9      	ldr	r1, [r7, #12]
 8012014:	4613      	mov	r3, r2
 8012016:	00db      	lsls	r3, r3, #3
 8012018:	4413      	add	r3, r2
 801201a:	009b      	lsls	r3, r3, #2
 801201c:	440b      	add	r3, r1
 801201e:	3316      	adds	r3, #22
 8012020:	781b      	ldrb	r3, [r3, #0]
 8012022:	e00b      	b.n	801203c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8012024:	78fb      	ldrb	r3, [r7, #3]
 8012026:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801202a:	68f9      	ldr	r1, [r7, #12]
 801202c:	4613      	mov	r3, r2
 801202e:	00db      	lsls	r3, r3, #3
 8012030:	4413      	add	r3, r2
 8012032:	009b      	lsls	r3, r3, #2
 8012034:	440b      	add	r3, r1
 8012036:	f203 2356 	addw	r3, r3, #598	@ 0x256
 801203a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801203c:	4618      	mov	r0, r3
 801203e:	3714      	adds	r7, #20
 8012040:	46bd      	mov	sp, r7
 8012042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012046:	4770      	bx	lr

08012048 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b084      	sub	sp, #16
 801204c:	af00      	add	r7, sp, #0
 801204e:	6078      	str	r0, [r7, #4]
 8012050:	460b      	mov	r3, r1
 8012052:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012054:	2300      	movs	r3, #0
 8012056:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012058:	2300      	movs	r3, #0
 801205a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801205c:	687b      	ldr	r3, [r7, #4]
 801205e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8012062:	78fa      	ldrb	r2, [r7, #3]
 8012064:	4611      	mov	r1, r2
 8012066:	4618      	mov	r0, r3
 8012068:	f7f5 fa6d 	bl	8007546 <HAL_PCD_SetAddress>
 801206c:	4603      	mov	r3, r0
 801206e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012070:	7bfb      	ldrb	r3, [r7, #15]
 8012072:	4618      	mov	r0, r3
 8012074:	f000 f874 	bl	8012160 <USBD_Get_USB_Status>
 8012078:	4603      	mov	r3, r0
 801207a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801207c:	7bbb      	ldrb	r3, [r7, #14]
}
 801207e:	4618      	mov	r0, r3
 8012080:	3710      	adds	r7, #16
 8012082:	46bd      	mov	sp, r7
 8012084:	bd80      	pop	{r7, pc}

08012086 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012086:	b580      	push	{r7, lr}
 8012088:	b086      	sub	sp, #24
 801208a:	af00      	add	r7, sp, #0
 801208c:	60f8      	str	r0, [r7, #12]
 801208e:	607a      	str	r2, [r7, #4]
 8012090:	603b      	str	r3, [r7, #0]
 8012092:	460b      	mov	r3, r1
 8012094:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012096:	2300      	movs	r3, #0
 8012098:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801209a:	2300      	movs	r3, #0
 801209c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80120a4:	7af9      	ldrb	r1, [r7, #11]
 80120a6:	683b      	ldr	r3, [r7, #0]
 80120a8:	687a      	ldr	r2, [r7, #4]
 80120aa:	f7f5 fb75 	bl	8007798 <HAL_PCD_EP_Transmit>
 80120ae:	4603      	mov	r3, r0
 80120b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80120b2:	7dfb      	ldrb	r3, [r7, #23]
 80120b4:	4618      	mov	r0, r3
 80120b6:	f000 f853 	bl	8012160 <USBD_Get_USB_Status>
 80120ba:	4603      	mov	r3, r0
 80120bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80120be:	7dbb      	ldrb	r3, [r7, #22]
}
 80120c0:	4618      	mov	r0, r3
 80120c2:	3718      	adds	r7, #24
 80120c4:	46bd      	mov	sp, r7
 80120c6:	bd80      	pop	{r7, pc}

080120c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b086      	sub	sp, #24
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	60f8      	str	r0, [r7, #12]
 80120d0:	607a      	str	r2, [r7, #4]
 80120d2:	603b      	str	r3, [r7, #0]
 80120d4:	460b      	mov	r3, r1
 80120d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120d8:	2300      	movs	r3, #0
 80120da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80120dc:	2300      	movs	r3, #0
 80120de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80120e6:	7af9      	ldrb	r1, [r7, #11]
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	687a      	ldr	r2, [r7, #4]
 80120ec:	f7f5 fb01 	bl	80076f2 <HAL_PCD_EP_Receive>
 80120f0:	4603      	mov	r3, r0
 80120f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80120f4:	7dfb      	ldrb	r3, [r7, #23]
 80120f6:	4618      	mov	r0, r3
 80120f8:	f000 f832 	bl	8012160 <USBD_Get_USB_Status>
 80120fc:	4603      	mov	r3, r0
 80120fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8012100:	7dbb      	ldrb	r3, [r7, #22]
}
 8012102:	4618      	mov	r0, r3
 8012104:	3718      	adds	r7, #24
 8012106:	46bd      	mov	sp, r7
 8012108:	bd80      	pop	{r7, pc}

0801210a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801210a:	b580      	push	{r7, lr}
 801210c:	b082      	sub	sp, #8
 801210e:	af00      	add	r7, sp, #0
 8012110:	6078      	str	r0, [r7, #4]
 8012112:	460b      	mov	r3, r1
 8012114:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 801211c:	78fa      	ldrb	r2, [r7, #3]
 801211e:	4611      	mov	r1, r2
 8012120:	4618      	mov	r0, r3
 8012122:	f7f5 fb21 	bl	8007768 <HAL_PCD_EP_GetRxCount>
 8012126:	4603      	mov	r3, r0
}
 8012128:	4618      	mov	r0, r3
 801212a:	3708      	adds	r7, #8
 801212c:	46bd      	mov	sp, r7
 801212e:	bd80      	pop	{r7, pc}

08012130 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8012130:	b480      	push	{r7}
 8012132:	b083      	sub	sp, #12
 8012134:	af00      	add	r7, sp, #0
 8012136:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8012138:	4b03      	ldr	r3, [pc, #12]	@ (8012148 <USBD_static_malloc+0x18>)
}
 801213a:	4618      	mov	r0, r3
 801213c:	370c      	adds	r7, #12
 801213e:	46bd      	mov	sp, r7
 8012140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012144:	4770      	bx	lr
 8012146:	bf00      	nop
 8012148:	240023c4 	.word	0x240023c4

0801214c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 801214c:	b480      	push	{r7}
 801214e:	b083      	sub	sp, #12
 8012150:	af00      	add	r7, sp, #0
 8012152:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8012154:	bf00      	nop
 8012156:	370c      	adds	r7, #12
 8012158:	46bd      	mov	sp, r7
 801215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801215e:	4770      	bx	lr

08012160 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012160:	b480      	push	{r7}
 8012162:	b085      	sub	sp, #20
 8012164:	af00      	add	r7, sp, #0
 8012166:	4603      	mov	r3, r0
 8012168:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801216a:	2300      	movs	r3, #0
 801216c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801216e:	79fb      	ldrb	r3, [r7, #7]
 8012170:	2b03      	cmp	r3, #3
 8012172:	d817      	bhi.n	80121a4 <USBD_Get_USB_Status+0x44>
 8012174:	a201      	add	r2, pc, #4	@ (adr r2, 801217c <USBD_Get_USB_Status+0x1c>)
 8012176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801217a:	bf00      	nop
 801217c:	0801218d 	.word	0x0801218d
 8012180:	08012193 	.word	0x08012193
 8012184:	08012199 	.word	0x08012199
 8012188:	0801219f 	.word	0x0801219f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801218c:	2300      	movs	r3, #0
 801218e:	73fb      	strb	r3, [r7, #15]
    break;
 8012190:	e00b      	b.n	80121aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8012192:	2303      	movs	r3, #3
 8012194:	73fb      	strb	r3, [r7, #15]
    break;
 8012196:	e008      	b.n	80121aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8012198:	2301      	movs	r3, #1
 801219a:	73fb      	strb	r3, [r7, #15]
    break;
 801219c:	e005      	b.n	80121aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801219e:	2303      	movs	r3, #3
 80121a0:	73fb      	strb	r3, [r7, #15]
    break;
 80121a2:	e002      	b.n	80121aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80121a4:	2303      	movs	r3, #3
 80121a6:	73fb      	strb	r3, [r7, #15]
    break;
 80121a8:	bf00      	nop
  }
  return usb_status;
 80121aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80121ac:	4618      	mov	r0, r3
 80121ae:	3714      	adds	r7, #20
 80121b0:	46bd      	mov	sp, r7
 80121b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121b6:	4770      	bx	lr

080121b8 <__cvt>:
 80121b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80121ba:	ed2d 8b02 	vpush	{d8}
 80121be:	eeb0 8b40 	vmov.f64	d8, d0
 80121c2:	b085      	sub	sp, #20
 80121c4:	4617      	mov	r7, r2
 80121c6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80121c8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80121ca:	ee18 2a90 	vmov	r2, s17
 80121ce:	f025 0520 	bic.w	r5, r5, #32
 80121d2:	2a00      	cmp	r2, #0
 80121d4:	bfb6      	itet	lt
 80121d6:	222d      	movlt	r2, #45	@ 0x2d
 80121d8:	2200      	movge	r2, #0
 80121da:	eeb1 8b40 	vneglt.f64	d8, d0
 80121de:	2d46      	cmp	r5, #70	@ 0x46
 80121e0:	460c      	mov	r4, r1
 80121e2:	701a      	strb	r2, [r3, #0]
 80121e4:	d004      	beq.n	80121f0 <__cvt+0x38>
 80121e6:	2d45      	cmp	r5, #69	@ 0x45
 80121e8:	d100      	bne.n	80121ec <__cvt+0x34>
 80121ea:	3401      	adds	r4, #1
 80121ec:	2102      	movs	r1, #2
 80121ee:	e000      	b.n	80121f2 <__cvt+0x3a>
 80121f0:	2103      	movs	r1, #3
 80121f2:	ab03      	add	r3, sp, #12
 80121f4:	9301      	str	r3, [sp, #4]
 80121f6:	ab02      	add	r3, sp, #8
 80121f8:	9300      	str	r3, [sp, #0]
 80121fa:	4622      	mov	r2, r4
 80121fc:	4633      	mov	r3, r6
 80121fe:	eeb0 0b48 	vmov.f64	d0, d8
 8012202:	f000 fe21 	bl	8012e48 <_dtoa_r>
 8012206:	2d47      	cmp	r5, #71	@ 0x47
 8012208:	d114      	bne.n	8012234 <__cvt+0x7c>
 801220a:	07fb      	lsls	r3, r7, #31
 801220c:	d50a      	bpl.n	8012224 <__cvt+0x6c>
 801220e:	1902      	adds	r2, r0, r4
 8012210:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012218:	bf08      	it	eq
 801221a:	9203      	streq	r2, [sp, #12]
 801221c:	2130      	movs	r1, #48	@ 0x30
 801221e:	9b03      	ldr	r3, [sp, #12]
 8012220:	4293      	cmp	r3, r2
 8012222:	d319      	bcc.n	8012258 <__cvt+0xa0>
 8012224:	9b03      	ldr	r3, [sp, #12]
 8012226:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012228:	1a1b      	subs	r3, r3, r0
 801222a:	6013      	str	r3, [r2, #0]
 801222c:	b005      	add	sp, #20
 801222e:	ecbd 8b02 	vpop	{d8}
 8012232:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012234:	2d46      	cmp	r5, #70	@ 0x46
 8012236:	eb00 0204 	add.w	r2, r0, r4
 801223a:	d1e9      	bne.n	8012210 <__cvt+0x58>
 801223c:	7803      	ldrb	r3, [r0, #0]
 801223e:	2b30      	cmp	r3, #48	@ 0x30
 8012240:	d107      	bne.n	8012252 <__cvt+0x9a>
 8012242:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801224a:	bf1c      	itt	ne
 801224c:	f1c4 0401 	rsbne	r4, r4, #1
 8012250:	6034      	strne	r4, [r6, #0]
 8012252:	6833      	ldr	r3, [r6, #0]
 8012254:	441a      	add	r2, r3
 8012256:	e7db      	b.n	8012210 <__cvt+0x58>
 8012258:	1c5c      	adds	r4, r3, #1
 801225a:	9403      	str	r4, [sp, #12]
 801225c:	7019      	strb	r1, [r3, #0]
 801225e:	e7de      	b.n	801221e <__cvt+0x66>

08012260 <__exponent>:
 8012260:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012262:	2900      	cmp	r1, #0
 8012264:	bfba      	itte	lt
 8012266:	4249      	neglt	r1, r1
 8012268:	232d      	movlt	r3, #45	@ 0x2d
 801226a:	232b      	movge	r3, #43	@ 0x2b
 801226c:	2909      	cmp	r1, #9
 801226e:	7002      	strb	r2, [r0, #0]
 8012270:	7043      	strb	r3, [r0, #1]
 8012272:	dd29      	ble.n	80122c8 <__exponent+0x68>
 8012274:	f10d 0307 	add.w	r3, sp, #7
 8012278:	461d      	mov	r5, r3
 801227a:	270a      	movs	r7, #10
 801227c:	461a      	mov	r2, r3
 801227e:	fbb1 f6f7 	udiv	r6, r1, r7
 8012282:	fb07 1416 	mls	r4, r7, r6, r1
 8012286:	3430      	adds	r4, #48	@ 0x30
 8012288:	f802 4c01 	strb.w	r4, [r2, #-1]
 801228c:	460c      	mov	r4, r1
 801228e:	2c63      	cmp	r4, #99	@ 0x63
 8012290:	f103 33ff 	add.w	r3, r3, #4294967295
 8012294:	4631      	mov	r1, r6
 8012296:	dcf1      	bgt.n	801227c <__exponent+0x1c>
 8012298:	3130      	adds	r1, #48	@ 0x30
 801229a:	1e94      	subs	r4, r2, #2
 801229c:	f803 1c01 	strb.w	r1, [r3, #-1]
 80122a0:	1c41      	adds	r1, r0, #1
 80122a2:	4623      	mov	r3, r4
 80122a4:	42ab      	cmp	r3, r5
 80122a6:	d30a      	bcc.n	80122be <__exponent+0x5e>
 80122a8:	f10d 0309 	add.w	r3, sp, #9
 80122ac:	1a9b      	subs	r3, r3, r2
 80122ae:	42ac      	cmp	r4, r5
 80122b0:	bf88      	it	hi
 80122b2:	2300      	movhi	r3, #0
 80122b4:	3302      	adds	r3, #2
 80122b6:	4403      	add	r3, r0
 80122b8:	1a18      	subs	r0, r3, r0
 80122ba:	b003      	add	sp, #12
 80122bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80122be:	f813 6b01 	ldrb.w	r6, [r3], #1
 80122c2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80122c6:	e7ed      	b.n	80122a4 <__exponent+0x44>
 80122c8:	2330      	movs	r3, #48	@ 0x30
 80122ca:	3130      	adds	r1, #48	@ 0x30
 80122cc:	7083      	strb	r3, [r0, #2]
 80122ce:	70c1      	strb	r1, [r0, #3]
 80122d0:	1d03      	adds	r3, r0, #4
 80122d2:	e7f1      	b.n	80122b8 <__exponent+0x58>
 80122d4:	0000      	movs	r0, r0
	...

080122d8 <_printf_float>:
 80122d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122dc:	b08d      	sub	sp, #52	@ 0x34
 80122de:	460c      	mov	r4, r1
 80122e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80122e4:	4616      	mov	r6, r2
 80122e6:	461f      	mov	r7, r3
 80122e8:	4605      	mov	r5, r0
 80122ea:	f000 fcab 	bl	8012c44 <_localeconv_r>
 80122ee:	f8d0 b000 	ldr.w	fp, [r0]
 80122f2:	4658      	mov	r0, fp
 80122f4:	f7ee f844 	bl	8000380 <strlen>
 80122f8:	2300      	movs	r3, #0
 80122fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80122fc:	f8d8 3000 	ldr.w	r3, [r8]
 8012300:	f894 9018 	ldrb.w	r9, [r4, #24]
 8012304:	6822      	ldr	r2, [r4, #0]
 8012306:	9005      	str	r0, [sp, #20]
 8012308:	3307      	adds	r3, #7
 801230a:	f023 0307 	bic.w	r3, r3, #7
 801230e:	f103 0108 	add.w	r1, r3, #8
 8012312:	f8c8 1000 	str.w	r1, [r8]
 8012316:	ed93 0b00 	vldr	d0, [r3]
 801231a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8012578 <_printf_float+0x2a0>
 801231e:	eeb0 7bc0 	vabs.f64	d7, d0
 8012322:	eeb4 7b46 	vcmp.f64	d7, d6
 8012326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801232a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 801232e:	dd24      	ble.n	801237a <_printf_float+0xa2>
 8012330:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8012334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012338:	d502      	bpl.n	8012340 <_printf_float+0x68>
 801233a:	232d      	movs	r3, #45	@ 0x2d
 801233c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012340:	498f      	ldr	r1, [pc, #572]	@ (8012580 <_printf_float+0x2a8>)
 8012342:	4b90      	ldr	r3, [pc, #576]	@ (8012584 <_printf_float+0x2ac>)
 8012344:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8012348:	bf94      	ite	ls
 801234a:	4688      	movls	r8, r1
 801234c:	4698      	movhi	r8, r3
 801234e:	f022 0204 	bic.w	r2, r2, #4
 8012352:	2303      	movs	r3, #3
 8012354:	6123      	str	r3, [r4, #16]
 8012356:	6022      	str	r2, [r4, #0]
 8012358:	f04f 0a00 	mov.w	sl, #0
 801235c:	9700      	str	r7, [sp, #0]
 801235e:	4633      	mov	r3, r6
 8012360:	aa0b      	add	r2, sp, #44	@ 0x2c
 8012362:	4621      	mov	r1, r4
 8012364:	4628      	mov	r0, r5
 8012366:	f000 f9d1 	bl	801270c <_printf_common>
 801236a:	3001      	adds	r0, #1
 801236c:	f040 8089 	bne.w	8012482 <_printf_float+0x1aa>
 8012370:	f04f 30ff 	mov.w	r0, #4294967295
 8012374:	b00d      	add	sp, #52	@ 0x34
 8012376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801237a:	eeb4 0b40 	vcmp.f64	d0, d0
 801237e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012382:	d709      	bvc.n	8012398 <_printf_float+0xc0>
 8012384:	ee10 3a90 	vmov	r3, s1
 8012388:	2b00      	cmp	r3, #0
 801238a:	bfbc      	itt	lt
 801238c:	232d      	movlt	r3, #45	@ 0x2d
 801238e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012392:	497d      	ldr	r1, [pc, #500]	@ (8012588 <_printf_float+0x2b0>)
 8012394:	4b7d      	ldr	r3, [pc, #500]	@ (801258c <_printf_float+0x2b4>)
 8012396:	e7d5      	b.n	8012344 <_printf_float+0x6c>
 8012398:	6863      	ldr	r3, [r4, #4]
 801239a:	1c59      	adds	r1, r3, #1
 801239c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 80123a0:	d139      	bne.n	8012416 <_printf_float+0x13e>
 80123a2:	2306      	movs	r3, #6
 80123a4:	6063      	str	r3, [r4, #4]
 80123a6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80123aa:	2300      	movs	r3, #0
 80123ac:	6022      	str	r2, [r4, #0]
 80123ae:	9303      	str	r3, [sp, #12]
 80123b0:	ab0a      	add	r3, sp, #40	@ 0x28
 80123b2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80123b6:	ab09      	add	r3, sp, #36	@ 0x24
 80123b8:	9300      	str	r3, [sp, #0]
 80123ba:	6861      	ldr	r1, [r4, #4]
 80123bc:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80123c0:	4628      	mov	r0, r5
 80123c2:	f7ff fef9 	bl	80121b8 <__cvt>
 80123c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80123ca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80123cc:	4680      	mov	r8, r0
 80123ce:	d129      	bne.n	8012424 <_printf_float+0x14c>
 80123d0:	1cc8      	adds	r0, r1, #3
 80123d2:	db02      	blt.n	80123da <_printf_float+0x102>
 80123d4:	6863      	ldr	r3, [r4, #4]
 80123d6:	4299      	cmp	r1, r3
 80123d8:	dd41      	ble.n	801245e <_printf_float+0x186>
 80123da:	f1a9 0902 	sub.w	r9, r9, #2
 80123de:	fa5f f989 	uxtb.w	r9, r9
 80123e2:	3901      	subs	r1, #1
 80123e4:	464a      	mov	r2, r9
 80123e6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80123ea:	9109      	str	r1, [sp, #36]	@ 0x24
 80123ec:	f7ff ff38 	bl	8012260 <__exponent>
 80123f0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80123f2:	1813      	adds	r3, r2, r0
 80123f4:	2a01      	cmp	r2, #1
 80123f6:	4682      	mov	sl, r0
 80123f8:	6123      	str	r3, [r4, #16]
 80123fa:	dc02      	bgt.n	8012402 <_printf_float+0x12a>
 80123fc:	6822      	ldr	r2, [r4, #0]
 80123fe:	07d2      	lsls	r2, r2, #31
 8012400:	d501      	bpl.n	8012406 <_printf_float+0x12e>
 8012402:	3301      	adds	r3, #1
 8012404:	6123      	str	r3, [r4, #16]
 8012406:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801240a:	2b00      	cmp	r3, #0
 801240c:	d0a6      	beq.n	801235c <_printf_float+0x84>
 801240e:	232d      	movs	r3, #45	@ 0x2d
 8012410:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012414:	e7a2      	b.n	801235c <_printf_float+0x84>
 8012416:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801241a:	d1c4      	bne.n	80123a6 <_printf_float+0xce>
 801241c:	2b00      	cmp	r3, #0
 801241e:	d1c2      	bne.n	80123a6 <_printf_float+0xce>
 8012420:	2301      	movs	r3, #1
 8012422:	e7bf      	b.n	80123a4 <_printf_float+0xcc>
 8012424:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012428:	d9db      	bls.n	80123e2 <_printf_float+0x10a>
 801242a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 801242e:	d118      	bne.n	8012462 <_printf_float+0x18a>
 8012430:	2900      	cmp	r1, #0
 8012432:	6863      	ldr	r3, [r4, #4]
 8012434:	dd0b      	ble.n	801244e <_printf_float+0x176>
 8012436:	6121      	str	r1, [r4, #16]
 8012438:	b913      	cbnz	r3, 8012440 <_printf_float+0x168>
 801243a:	6822      	ldr	r2, [r4, #0]
 801243c:	07d0      	lsls	r0, r2, #31
 801243e:	d502      	bpl.n	8012446 <_printf_float+0x16e>
 8012440:	3301      	adds	r3, #1
 8012442:	440b      	add	r3, r1
 8012444:	6123      	str	r3, [r4, #16]
 8012446:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012448:	f04f 0a00 	mov.w	sl, #0
 801244c:	e7db      	b.n	8012406 <_printf_float+0x12e>
 801244e:	b913      	cbnz	r3, 8012456 <_printf_float+0x17e>
 8012450:	6822      	ldr	r2, [r4, #0]
 8012452:	07d2      	lsls	r2, r2, #31
 8012454:	d501      	bpl.n	801245a <_printf_float+0x182>
 8012456:	3302      	adds	r3, #2
 8012458:	e7f4      	b.n	8012444 <_printf_float+0x16c>
 801245a:	2301      	movs	r3, #1
 801245c:	e7f2      	b.n	8012444 <_printf_float+0x16c>
 801245e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8012462:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012464:	4299      	cmp	r1, r3
 8012466:	db05      	blt.n	8012474 <_printf_float+0x19c>
 8012468:	6823      	ldr	r3, [r4, #0]
 801246a:	6121      	str	r1, [r4, #16]
 801246c:	07d8      	lsls	r0, r3, #31
 801246e:	d5ea      	bpl.n	8012446 <_printf_float+0x16e>
 8012470:	1c4b      	adds	r3, r1, #1
 8012472:	e7e7      	b.n	8012444 <_printf_float+0x16c>
 8012474:	2900      	cmp	r1, #0
 8012476:	bfd4      	ite	le
 8012478:	f1c1 0202 	rsble	r2, r1, #2
 801247c:	2201      	movgt	r2, #1
 801247e:	4413      	add	r3, r2
 8012480:	e7e0      	b.n	8012444 <_printf_float+0x16c>
 8012482:	6823      	ldr	r3, [r4, #0]
 8012484:	055a      	lsls	r2, r3, #21
 8012486:	d407      	bmi.n	8012498 <_printf_float+0x1c0>
 8012488:	6923      	ldr	r3, [r4, #16]
 801248a:	4642      	mov	r2, r8
 801248c:	4631      	mov	r1, r6
 801248e:	4628      	mov	r0, r5
 8012490:	47b8      	blx	r7
 8012492:	3001      	adds	r0, #1
 8012494:	d12a      	bne.n	80124ec <_printf_float+0x214>
 8012496:	e76b      	b.n	8012370 <_printf_float+0x98>
 8012498:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 801249c:	f240 80e0 	bls.w	8012660 <_printf_float+0x388>
 80124a0:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80124a4:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80124a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124ac:	d133      	bne.n	8012516 <_printf_float+0x23e>
 80124ae:	4a38      	ldr	r2, [pc, #224]	@ (8012590 <_printf_float+0x2b8>)
 80124b0:	2301      	movs	r3, #1
 80124b2:	4631      	mov	r1, r6
 80124b4:	4628      	mov	r0, r5
 80124b6:	47b8      	blx	r7
 80124b8:	3001      	adds	r0, #1
 80124ba:	f43f af59 	beq.w	8012370 <_printf_float+0x98>
 80124be:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80124c2:	4543      	cmp	r3, r8
 80124c4:	db02      	blt.n	80124cc <_printf_float+0x1f4>
 80124c6:	6823      	ldr	r3, [r4, #0]
 80124c8:	07d8      	lsls	r0, r3, #31
 80124ca:	d50f      	bpl.n	80124ec <_printf_float+0x214>
 80124cc:	9b05      	ldr	r3, [sp, #20]
 80124ce:	465a      	mov	r2, fp
 80124d0:	4631      	mov	r1, r6
 80124d2:	4628      	mov	r0, r5
 80124d4:	47b8      	blx	r7
 80124d6:	3001      	adds	r0, #1
 80124d8:	f43f af4a 	beq.w	8012370 <_printf_float+0x98>
 80124dc:	f04f 0900 	mov.w	r9, #0
 80124e0:	f108 38ff 	add.w	r8, r8, #4294967295
 80124e4:	f104 0a1a 	add.w	sl, r4, #26
 80124e8:	45c8      	cmp	r8, r9
 80124ea:	dc09      	bgt.n	8012500 <_printf_float+0x228>
 80124ec:	6823      	ldr	r3, [r4, #0]
 80124ee:	079b      	lsls	r3, r3, #30
 80124f0:	f100 8107 	bmi.w	8012702 <_printf_float+0x42a>
 80124f4:	68e0      	ldr	r0, [r4, #12]
 80124f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80124f8:	4298      	cmp	r0, r3
 80124fa:	bfb8      	it	lt
 80124fc:	4618      	movlt	r0, r3
 80124fe:	e739      	b.n	8012374 <_printf_float+0x9c>
 8012500:	2301      	movs	r3, #1
 8012502:	4652      	mov	r2, sl
 8012504:	4631      	mov	r1, r6
 8012506:	4628      	mov	r0, r5
 8012508:	47b8      	blx	r7
 801250a:	3001      	adds	r0, #1
 801250c:	f43f af30 	beq.w	8012370 <_printf_float+0x98>
 8012510:	f109 0901 	add.w	r9, r9, #1
 8012514:	e7e8      	b.n	80124e8 <_printf_float+0x210>
 8012516:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012518:	2b00      	cmp	r3, #0
 801251a:	dc3b      	bgt.n	8012594 <_printf_float+0x2bc>
 801251c:	4a1c      	ldr	r2, [pc, #112]	@ (8012590 <_printf_float+0x2b8>)
 801251e:	2301      	movs	r3, #1
 8012520:	4631      	mov	r1, r6
 8012522:	4628      	mov	r0, r5
 8012524:	47b8      	blx	r7
 8012526:	3001      	adds	r0, #1
 8012528:	f43f af22 	beq.w	8012370 <_printf_float+0x98>
 801252c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012530:	ea59 0303 	orrs.w	r3, r9, r3
 8012534:	d102      	bne.n	801253c <_printf_float+0x264>
 8012536:	6823      	ldr	r3, [r4, #0]
 8012538:	07d9      	lsls	r1, r3, #31
 801253a:	d5d7      	bpl.n	80124ec <_printf_float+0x214>
 801253c:	9b05      	ldr	r3, [sp, #20]
 801253e:	465a      	mov	r2, fp
 8012540:	4631      	mov	r1, r6
 8012542:	4628      	mov	r0, r5
 8012544:	47b8      	blx	r7
 8012546:	3001      	adds	r0, #1
 8012548:	f43f af12 	beq.w	8012370 <_printf_float+0x98>
 801254c:	f04f 0a00 	mov.w	sl, #0
 8012550:	f104 0b1a 	add.w	fp, r4, #26
 8012554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012556:	425b      	negs	r3, r3
 8012558:	4553      	cmp	r3, sl
 801255a:	dc01      	bgt.n	8012560 <_printf_float+0x288>
 801255c:	464b      	mov	r3, r9
 801255e:	e794      	b.n	801248a <_printf_float+0x1b2>
 8012560:	2301      	movs	r3, #1
 8012562:	465a      	mov	r2, fp
 8012564:	4631      	mov	r1, r6
 8012566:	4628      	mov	r0, r5
 8012568:	47b8      	blx	r7
 801256a:	3001      	adds	r0, #1
 801256c:	f43f af00 	beq.w	8012370 <_printf_float+0x98>
 8012570:	f10a 0a01 	add.w	sl, sl, #1
 8012574:	e7ee      	b.n	8012554 <_printf_float+0x27c>
 8012576:	bf00      	nop
 8012578:	ffffffff 	.word	0xffffffff
 801257c:	7fefffff 	.word	0x7fefffff
 8012580:	08014abc 	.word	0x08014abc
 8012584:	08014ac0 	.word	0x08014ac0
 8012588:	08014ac4 	.word	0x08014ac4
 801258c:	08014ac8 	.word	0x08014ac8
 8012590:	08014acc 	.word	0x08014acc
 8012594:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012596:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801259a:	4553      	cmp	r3, sl
 801259c:	bfa8      	it	ge
 801259e:	4653      	movge	r3, sl
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	4699      	mov	r9, r3
 80125a4:	dc37      	bgt.n	8012616 <_printf_float+0x33e>
 80125a6:	2300      	movs	r3, #0
 80125a8:	9307      	str	r3, [sp, #28]
 80125aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80125ae:	f104 021a 	add.w	r2, r4, #26
 80125b2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80125b4:	9907      	ldr	r1, [sp, #28]
 80125b6:	9306      	str	r3, [sp, #24]
 80125b8:	eba3 0309 	sub.w	r3, r3, r9
 80125bc:	428b      	cmp	r3, r1
 80125be:	dc31      	bgt.n	8012624 <_printf_float+0x34c>
 80125c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80125c2:	459a      	cmp	sl, r3
 80125c4:	dc3b      	bgt.n	801263e <_printf_float+0x366>
 80125c6:	6823      	ldr	r3, [r4, #0]
 80125c8:	07da      	lsls	r2, r3, #31
 80125ca:	d438      	bmi.n	801263e <_printf_float+0x366>
 80125cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80125ce:	ebaa 0903 	sub.w	r9, sl, r3
 80125d2:	9b06      	ldr	r3, [sp, #24]
 80125d4:	ebaa 0303 	sub.w	r3, sl, r3
 80125d8:	4599      	cmp	r9, r3
 80125da:	bfa8      	it	ge
 80125dc:	4699      	movge	r9, r3
 80125de:	f1b9 0f00 	cmp.w	r9, #0
 80125e2:	dc34      	bgt.n	801264e <_printf_float+0x376>
 80125e4:	f04f 0800 	mov.w	r8, #0
 80125e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80125ec:	f104 0b1a 	add.w	fp, r4, #26
 80125f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80125f2:	ebaa 0303 	sub.w	r3, sl, r3
 80125f6:	eba3 0309 	sub.w	r3, r3, r9
 80125fa:	4543      	cmp	r3, r8
 80125fc:	f77f af76 	ble.w	80124ec <_printf_float+0x214>
 8012600:	2301      	movs	r3, #1
 8012602:	465a      	mov	r2, fp
 8012604:	4631      	mov	r1, r6
 8012606:	4628      	mov	r0, r5
 8012608:	47b8      	blx	r7
 801260a:	3001      	adds	r0, #1
 801260c:	f43f aeb0 	beq.w	8012370 <_printf_float+0x98>
 8012610:	f108 0801 	add.w	r8, r8, #1
 8012614:	e7ec      	b.n	80125f0 <_printf_float+0x318>
 8012616:	4642      	mov	r2, r8
 8012618:	4631      	mov	r1, r6
 801261a:	4628      	mov	r0, r5
 801261c:	47b8      	blx	r7
 801261e:	3001      	adds	r0, #1
 8012620:	d1c1      	bne.n	80125a6 <_printf_float+0x2ce>
 8012622:	e6a5      	b.n	8012370 <_printf_float+0x98>
 8012624:	2301      	movs	r3, #1
 8012626:	4631      	mov	r1, r6
 8012628:	4628      	mov	r0, r5
 801262a:	9206      	str	r2, [sp, #24]
 801262c:	47b8      	blx	r7
 801262e:	3001      	adds	r0, #1
 8012630:	f43f ae9e 	beq.w	8012370 <_printf_float+0x98>
 8012634:	9b07      	ldr	r3, [sp, #28]
 8012636:	9a06      	ldr	r2, [sp, #24]
 8012638:	3301      	adds	r3, #1
 801263a:	9307      	str	r3, [sp, #28]
 801263c:	e7b9      	b.n	80125b2 <_printf_float+0x2da>
 801263e:	9b05      	ldr	r3, [sp, #20]
 8012640:	465a      	mov	r2, fp
 8012642:	4631      	mov	r1, r6
 8012644:	4628      	mov	r0, r5
 8012646:	47b8      	blx	r7
 8012648:	3001      	adds	r0, #1
 801264a:	d1bf      	bne.n	80125cc <_printf_float+0x2f4>
 801264c:	e690      	b.n	8012370 <_printf_float+0x98>
 801264e:	9a06      	ldr	r2, [sp, #24]
 8012650:	464b      	mov	r3, r9
 8012652:	4442      	add	r2, r8
 8012654:	4631      	mov	r1, r6
 8012656:	4628      	mov	r0, r5
 8012658:	47b8      	blx	r7
 801265a:	3001      	adds	r0, #1
 801265c:	d1c2      	bne.n	80125e4 <_printf_float+0x30c>
 801265e:	e687      	b.n	8012370 <_printf_float+0x98>
 8012660:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8012664:	f1b9 0f01 	cmp.w	r9, #1
 8012668:	dc01      	bgt.n	801266e <_printf_float+0x396>
 801266a:	07db      	lsls	r3, r3, #31
 801266c:	d536      	bpl.n	80126dc <_printf_float+0x404>
 801266e:	2301      	movs	r3, #1
 8012670:	4642      	mov	r2, r8
 8012672:	4631      	mov	r1, r6
 8012674:	4628      	mov	r0, r5
 8012676:	47b8      	blx	r7
 8012678:	3001      	adds	r0, #1
 801267a:	f43f ae79 	beq.w	8012370 <_printf_float+0x98>
 801267e:	9b05      	ldr	r3, [sp, #20]
 8012680:	465a      	mov	r2, fp
 8012682:	4631      	mov	r1, r6
 8012684:	4628      	mov	r0, r5
 8012686:	47b8      	blx	r7
 8012688:	3001      	adds	r0, #1
 801268a:	f43f ae71 	beq.w	8012370 <_printf_float+0x98>
 801268e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8012692:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012696:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801269a:	f109 39ff 	add.w	r9, r9, #4294967295
 801269e:	d018      	beq.n	80126d2 <_printf_float+0x3fa>
 80126a0:	464b      	mov	r3, r9
 80126a2:	f108 0201 	add.w	r2, r8, #1
 80126a6:	4631      	mov	r1, r6
 80126a8:	4628      	mov	r0, r5
 80126aa:	47b8      	blx	r7
 80126ac:	3001      	adds	r0, #1
 80126ae:	d10c      	bne.n	80126ca <_printf_float+0x3f2>
 80126b0:	e65e      	b.n	8012370 <_printf_float+0x98>
 80126b2:	2301      	movs	r3, #1
 80126b4:	465a      	mov	r2, fp
 80126b6:	4631      	mov	r1, r6
 80126b8:	4628      	mov	r0, r5
 80126ba:	47b8      	blx	r7
 80126bc:	3001      	adds	r0, #1
 80126be:	f43f ae57 	beq.w	8012370 <_printf_float+0x98>
 80126c2:	f108 0801 	add.w	r8, r8, #1
 80126c6:	45c8      	cmp	r8, r9
 80126c8:	dbf3      	blt.n	80126b2 <_printf_float+0x3da>
 80126ca:	4653      	mov	r3, sl
 80126cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80126d0:	e6dc      	b.n	801248c <_printf_float+0x1b4>
 80126d2:	f04f 0800 	mov.w	r8, #0
 80126d6:	f104 0b1a 	add.w	fp, r4, #26
 80126da:	e7f4      	b.n	80126c6 <_printf_float+0x3ee>
 80126dc:	2301      	movs	r3, #1
 80126de:	4642      	mov	r2, r8
 80126e0:	e7e1      	b.n	80126a6 <_printf_float+0x3ce>
 80126e2:	2301      	movs	r3, #1
 80126e4:	464a      	mov	r2, r9
 80126e6:	4631      	mov	r1, r6
 80126e8:	4628      	mov	r0, r5
 80126ea:	47b8      	blx	r7
 80126ec:	3001      	adds	r0, #1
 80126ee:	f43f ae3f 	beq.w	8012370 <_printf_float+0x98>
 80126f2:	f108 0801 	add.w	r8, r8, #1
 80126f6:	68e3      	ldr	r3, [r4, #12]
 80126f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80126fa:	1a5b      	subs	r3, r3, r1
 80126fc:	4543      	cmp	r3, r8
 80126fe:	dcf0      	bgt.n	80126e2 <_printf_float+0x40a>
 8012700:	e6f8      	b.n	80124f4 <_printf_float+0x21c>
 8012702:	f04f 0800 	mov.w	r8, #0
 8012706:	f104 0919 	add.w	r9, r4, #25
 801270a:	e7f4      	b.n	80126f6 <_printf_float+0x41e>

0801270c <_printf_common>:
 801270c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012710:	4616      	mov	r6, r2
 8012712:	4698      	mov	r8, r3
 8012714:	688a      	ldr	r2, [r1, #8]
 8012716:	690b      	ldr	r3, [r1, #16]
 8012718:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801271c:	4293      	cmp	r3, r2
 801271e:	bfb8      	it	lt
 8012720:	4613      	movlt	r3, r2
 8012722:	6033      	str	r3, [r6, #0]
 8012724:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012728:	4607      	mov	r7, r0
 801272a:	460c      	mov	r4, r1
 801272c:	b10a      	cbz	r2, 8012732 <_printf_common+0x26>
 801272e:	3301      	adds	r3, #1
 8012730:	6033      	str	r3, [r6, #0]
 8012732:	6823      	ldr	r3, [r4, #0]
 8012734:	0699      	lsls	r1, r3, #26
 8012736:	bf42      	ittt	mi
 8012738:	6833      	ldrmi	r3, [r6, #0]
 801273a:	3302      	addmi	r3, #2
 801273c:	6033      	strmi	r3, [r6, #0]
 801273e:	6825      	ldr	r5, [r4, #0]
 8012740:	f015 0506 	ands.w	r5, r5, #6
 8012744:	d106      	bne.n	8012754 <_printf_common+0x48>
 8012746:	f104 0a19 	add.w	sl, r4, #25
 801274a:	68e3      	ldr	r3, [r4, #12]
 801274c:	6832      	ldr	r2, [r6, #0]
 801274e:	1a9b      	subs	r3, r3, r2
 8012750:	42ab      	cmp	r3, r5
 8012752:	dc26      	bgt.n	80127a2 <_printf_common+0x96>
 8012754:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012758:	6822      	ldr	r2, [r4, #0]
 801275a:	3b00      	subs	r3, #0
 801275c:	bf18      	it	ne
 801275e:	2301      	movne	r3, #1
 8012760:	0692      	lsls	r2, r2, #26
 8012762:	d42b      	bmi.n	80127bc <_printf_common+0xb0>
 8012764:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012768:	4641      	mov	r1, r8
 801276a:	4638      	mov	r0, r7
 801276c:	47c8      	blx	r9
 801276e:	3001      	adds	r0, #1
 8012770:	d01e      	beq.n	80127b0 <_printf_common+0xa4>
 8012772:	6823      	ldr	r3, [r4, #0]
 8012774:	6922      	ldr	r2, [r4, #16]
 8012776:	f003 0306 	and.w	r3, r3, #6
 801277a:	2b04      	cmp	r3, #4
 801277c:	bf02      	ittt	eq
 801277e:	68e5      	ldreq	r5, [r4, #12]
 8012780:	6833      	ldreq	r3, [r6, #0]
 8012782:	1aed      	subeq	r5, r5, r3
 8012784:	68a3      	ldr	r3, [r4, #8]
 8012786:	bf0c      	ite	eq
 8012788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801278c:	2500      	movne	r5, #0
 801278e:	4293      	cmp	r3, r2
 8012790:	bfc4      	itt	gt
 8012792:	1a9b      	subgt	r3, r3, r2
 8012794:	18ed      	addgt	r5, r5, r3
 8012796:	2600      	movs	r6, #0
 8012798:	341a      	adds	r4, #26
 801279a:	42b5      	cmp	r5, r6
 801279c:	d11a      	bne.n	80127d4 <_printf_common+0xc8>
 801279e:	2000      	movs	r0, #0
 80127a0:	e008      	b.n	80127b4 <_printf_common+0xa8>
 80127a2:	2301      	movs	r3, #1
 80127a4:	4652      	mov	r2, sl
 80127a6:	4641      	mov	r1, r8
 80127a8:	4638      	mov	r0, r7
 80127aa:	47c8      	blx	r9
 80127ac:	3001      	adds	r0, #1
 80127ae:	d103      	bne.n	80127b8 <_printf_common+0xac>
 80127b0:	f04f 30ff 	mov.w	r0, #4294967295
 80127b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127b8:	3501      	adds	r5, #1
 80127ba:	e7c6      	b.n	801274a <_printf_common+0x3e>
 80127bc:	18e1      	adds	r1, r4, r3
 80127be:	1c5a      	adds	r2, r3, #1
 80127c0:	2030      	movs	r0, #48	@ 0x30
 80127c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80127c6:	4422      	add	r2, r4
 80127c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80127cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80127d0:	3302      	adds	r3, #2
 80127d2:	e7c7      	b.n	8012764 <_printf_common+0x58>
 80127d4:	2301      	movs	r3, #1
 80127d6:	4622      	mov	r2, r4
 80127d8:	4641      	mov	r1, r8
 80127da:	4638      	mov	r0, r7
 80127dc:	47c8      	blx	r9
 80127de:	3001      	adds	r0, #1
 80127e0:	d0e6      	beq.n	80127b0 <_printf_common+0xa4>
 80127e2:	3601      	adds	r6, #1
 80127e4:	e7d9      	b.n	801279a <_printf_common+0x8e>
	...

080127e8 <_printf_i>:
 80127e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80127ec:	7e0f      	ldrb	r7, [r1, #24]
 80127ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80127f0:	2f78      	cmp	r7, #120	@ 0x78
 80127f2:	4691      	mov	r9, r2
 80127f4:	4680      	mov	r8, r0
 80127f6:	460c      	mov	r4, r1
 80127f8:	469a      	mov	sl, r3
 80127fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80127fe:	d807      	bhi.n	8012810 <_printf_i+0x28>
 8012800:	2f62      	cmp	r7, #98	@ 0x62
 8012802:	d80a      	bhi.n	801281a <_printf_i+0x32>
 8012804:	2f00      	cmp	r7, #0
 8012806:	f000 80d2 	beq.w	80129ae <_printf_i+0x1c6>
 801280a:	2f58      	cmp	r7, #88	@ 0x58
 801280c:	f000 80b9 	beq.w	8012982 <_printf_i+0x19a>
 8012810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012814:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012818:	e03a      	b.n	8012890 <_printf_i+0xa8>
 801281a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801281e:	2b15      	cmp	r3, #21
 8012820:	d8f6      	bhi.n	8012810 <_printf_i+0x28>
 8012822:	a101      	add	r1, pc, #4	@ (adr r1, 8012828 <_printf_i+0x40>)
 8012824:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012828:	08012881 	.word	0x08012881
 801282c:	08012895 	.word	0x08012895
 8012830:	08012811 	.word	0x08012811
 8012834:	08012811 	.word	0x08012811
 8012838:	08012811 	.word	0x08012811
 801283c:	08012811 	.word	0x08012811
 8012840:	08012895 	.word	0x08012895
 8012844:	08012811 	.word	0x08012811
 8012848:	08012811 	.word	0x08012811
 801284c:	08012811 	.word	0x08012811
 8012850:	08012811 	.word	0x08012811
 8012854:	08012995 	.word	0x08012995
 8012858:	080128bf 	.word	0x080128bf
 801285c:	0801294f 	.word	0x0801294f
 8012860:	08012811 	.word	0x08012811
 8012864:	08012811 	.word	0x08012811
 8012868:	080129b7 	.word	0x080129b7
 801286c:	08012811 	.word	0x08012811
 8012870:	080128bf 	.word	0x080128bf
 8012874:	08012811 	.word	0x08012811
 8012878:	08012811 	.word	0x08012811
 801287c:	08012957 	.word	0x08012957
 8012880:	6833      	ldr	r3, [r6, #0]
 8012882:	1d1a      	adds	r2, r3, #4
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	6032      	str	r2, [r6, #0]
 8012888:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801288c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012890:	2301      	movs	r3, #1
 8012892:	e09d      	b.n	80129d0 <_printf_i+0x1e8>
 8012894:	6833      	ldr	r3, [r6, #0]
 8012896:	6820      	ldr	r0, [r4, #0]
 8012898:	1d19      	adds	r1, r3, #4
 801289a:	6031      	str	r1, [r6, #0]
 801289c:	0606      	lsls	r6, r0, #24
 801289e:	d501      	bpl.n	80128a4 <_printf_i+0xbc>
 80128a0:	681d      	ldr	r5, [r3, #0]
 80128a2:	e003      	b.n	80128ac <_printf_i+0xc4>
 80128a4:	0645      	lsls	r5, r0, #25
 80128a6:	d5fb      	bpl.n	80128a0 <_printf_i+0xb8>
 80128a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80128ac:	2d00      	cmp	r5, #0
 80128ae:	da03      	bge.n	80128b8 <_printf_i+0xd0>
 80128b0:	232d      	movs	r3, #45	@ 0x2d
 80128b2:	426d      	negs	r5, r5
 80128b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80128b8:	4859      	ldr	r0, [pc, #356]	@ (8012a20 <_printf_i+0x238>)
 80128ba:	230a      	movs	r3, #10
 80128bc:	e011      	b.n	80128e2 <_printf_i+0xfa>
 80128be:	6821      	ldr	r1, [r4, #0]
 80128c0:	6833      	ldr	r3, [r6, #0]
 80128c2:	0608      	lsls	r0, r1, #24
 80128c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80128c8:	d402      	bmi.n	80128d0 <_printf_i+0xe8>
 80128ca:	0649      	lsls	r1, r1, #25
 80128cc:	bf48      	it	mi
 80128ce:	b2ad      	uxthmi	r5, r5
 80128d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80128d2:	4853      	ldr	r0, [pc, #332]	@ (8012a20 <_printf_i+0x238>)
 80128d4:	6033      	str	r3, [r6, #0]
 80128d6:	bf14      	ite	ne
 80128d8:	230a      	movne	r3, #10
 80128da:	2308      	moveq	r3, #8
 80128dc:	2100      	movs	r1, #0
 80128de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80128e2:	6866      	ldr	r6, [r4, #4]
 80128e4:	60a6      	str	r6, [r4, #8]
 80128e6:	2e00      	cmp	r6, #0
 80128e8:	bfa2      	ittt	ge
 80128ea:	6821      	ldrge	r1, [r4, #0]
 80128ec:	f021 0104 	bicge.w	r1, r1, #4
 80128f0:	6021      	strge	r1, [r4, #0]
 80128f2:	b90d      	cbnz	r5, 80128f8 <_printf_i+0x110>
 80128f4:	2e00      	cmp	r6, #0
 80128f6:	d04b      	beq.n	8012990 <_printf_i+0x1a8>
 80128f8:	4616      	mov	r6, r2
 80128fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80128fe:	fb03 5711 	mls	r7, r3, r1, r5
 8012902:	5dc7      	ldrb	r7, [r0, r7]
 8012904:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012908:	462f      	mov	r7, r5
 801290a:	42bb      	cmp	r3, r7
 801290c:	460d      	mov	r5, r1
 801290e:	d9f4      	bls.n	80128fa <_printf_i+0x112>
 8012910:	2b08      	cmp	r3, #8
 8012912:	d10b      	bne.n	801292c <_printf_i+0x144>
 8012914:	6823      	ldr	r3, [r4, #0]
 8012916:	07df      	lsls	r7, r3, #31
 8012918:	d508      	bpl.n	801292c <_printf_i+0x144>
 801291a:	6923      	ldr	r3, [r4, #16]
 801291c:	6861      	ldr	r1, [r4, #4]
 801291e:	4299      	cmp	r1, r3
 8012920:	bfde      	ittt	le
 8012922:	2330      	movle	r3, #48	@ 0x30
 8012924:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012928:	f106 36ff 	addle.w	r6, r6, #4294967295
 801292c:	1b92      	subs	r2, r2, r6
 801292e:	6122      	str	r2, [r4, #16]
 8012930:	f8cd a000 	str.w	sl, [sp]
 8012934:	464b      	mov	r3, r9
 8012936:	aa03      	add	r2, sp, #12
 8012938:	4621      	mov	r1, r4
 801293a:	4640      	mov	r0, r8
 801293c:	f7ff fee6 	bl	801270c <_printf_common>
 8012940:	3001      	adds	r0, #1
 8012942:	d14a      	bne.n	80129da <_printf_i+0x1f2>
 8012944:	f04f 30ff 	mov.w	r0, #4294967295
 8012948:	b004      	add	sp, #16
 801294a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801294e:	6823      	ldr	r3, [r4, #0]
 8012950:	f043 0320 	orr.w	r3, r3, #32
 8012954:	6023      	str	r3, [r4, #0]
 8012956:	4833      	ldr	r0, [pc, #204]	@ (8012a24 <_printf_i+0x23c>)
 8012958:	2778      	movs	r7, #120	@ 0x78
 801295a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801295e:	6823      	ldr	r3, [r4, #0]
 8012960:	6831      	ldr	r1, [r6, #0]
 8012962:	061f      	lsls	r7, r3, #24
 8012964:	f851 5b04 	ldr.w	r5, [r1], #4
 8012968:	d402      	bmi.n	8012970 <_printf_i+0x188>
 801296a:	065f      	lsls	r7, r3, #25
 801296c:	bf48      	it	mi
 801296e:	b2ad      	uxthmi	r5, r5
 8012970:	6031      	str	r1, [r6, #0]
 8012972:	07d9      	lsls	r1, r3, #31
 8012974:	bf44      	itt	mi
 8012976:	f043 0320 	orrmi.w	r3, r3, #32
 801297a:	6023      	strmi	r3, [r4, #0]
 801297c:	b11d      	cbz	r5, 8012986 <_printf_i+0x19e>
 801297e:	2310      	movs	r3, #16
 8012980:	e7ac      	b.n	80128dc <_printf_i+0xf4>
 8012982:	4827      	ldr	r0, [pc, #156]	@ (8012a20 <_printf_i+0x238>)
 8012984:	e7e9      	b.n	801295a <_printf_i+0x172>
 8012986:	6823      	ldr	r3, [r4, #0]
 8012988:	f023 0320 	bic.w	r3, r3, #32
 801298c:	6023      	str	r3, [r4, #0]
 801298e:	e7f6      	b.n	801297e <_printf_i+0x196>
 8012990:	4616      	mov	r6, r2
 8012992:	e7bd      	b.n	8012910 <_printf_i+0x128>
 8012994:	6833      	ldr	r3, [r6, #0]
 8012996:	6825      	ldr	r5, [r4, #0]
 8012998:	6961      	ldr	r1, [r4, #20]
 801299a:	1d18      	adds	r0, r3, #4
 801299c:	6030      	str	r0, [r6, #0]
 801299e:	062e      	lsls	r6, r5, #24
 80129a0:	681b      	ldr	r3, [r3, #0]
 80129a2:	d501      	bpl.n	80129a8 <_printf_i+0x1c0>
 80129a4:	6019      	str	r1, [r3, #0]
 80129a6:	e002      	b.n	80129ae <_printf_i+0x1c6>
 80129a8:	0668      	lsls	r0, r5, #25
 80129aa:	d5fb      	bpl.n	80129a4 <_printf_i+0x1bc>
 80129ac:	8019      	strh	r1, [r3, #0]
 80129ae:	2300      	movs	r3, #0
 80129b0:	6123      	str	r3, [r4, #16]
 80129b2:	4616      	mov	r6, r2
 80129b4:	e7bc      	b.n	8012930 <_printf_i+0x148>
 80129b6:	6833      	ldr	r3, [r6, #0]
 80129b8:	1d1a      	adds	r2, r3, #4
 80129ba:	6032      	str	r2, [r6, #0]
 80129bc:	681e      	ldr	r6, [r3, #0]
 80129be:	6862      	ldr	r2, [r4, #4]
 80129c0:	2100      	movs	r1, #0
 80129c2:	4630      	mov	r0, r6
 80129c4:	f7ed fc8c 	bl	80002e0 <memchr>
 80129c8:	b108      	cbz	r0, 80129ce <_printf_i+0x1e6>
 80129ca:	1b80      	subs	r0, r0, r6
 80129cc:	6060      	str	r0, [r4, #4]
 80129ce:	6863      	ldr	r3, [r4, #4]
 80129d0:	6123      	str	r3, [r4, #16]
 80129d2:	2300      	movs	r3, #0
 80129d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80129d8:	e7aa      	b.n	8012930 <_printf_i+0x148>
 80129da:	6923      	ldr	r3, [r4, #16]
 80129dc:	4632      	mov	r2, r6
 80129de:	4649      	mov	r1, r9
 80129e0:	4640      	mov	r0, r8
 80129e2:	47d0      	blx	sl
 80129e4:	3001      	adds	r0, #1
 80129e6:	d0ad      	beq.n	8012944 <_printf_i+0x15c>
 80129e8:	6823      	ldr	r3, [r4, #0]
 80129ea:	079b      	lsls	r3, r3, #30
 80129ec:	d413      	bmi.n	8012a16 <_printf_i+0x22e>
 80129ee:	68e0      	ldr	r0, [r4, #12]
 80129f0:	9b03      	ldr	r3, [sp, #12]
 80129f2:	4298      	cmp	r0, r3
 80129f4:	bfb8      	it	lt
 80129f6:	4618      	movlt	r0, r3
 80129f8:	e7a6      	b.n	8012948 <_printf_i+0x160>
 80129fa:	2301      	movs	r3, #1
 80129fc:	4632      	mov	r2, r6
 80129fe:	4649      	mov	r1, r9
 8012a00:	4640      	mov	r0, r8
 8012a02:	47d0      	blx	sl
 8012a04:	3001      	adds	r0, #1
 8012a06:	d09d      	beq.n	8012944 <_printf_i+0x15c>
 8012a08:	3501      	adds	r5, #1
 8012a0a:	68e3      	ldr	r3, [r4, #12]
 8012a0c:	9903      	ldr	r1, [sp, #12]
 8012a0e:	1a5b      	subs	r3, r3, r1
 8012a10:	42ab      	cmp	r3, r5
 8012a12:	dcf2      	bgt.n	80129fa <_printf_i+0x212>
 8012a14:	e7eb      	b.n	80129ee <_printf_i+0x206>
 8012a16:	2500      	movs	r5, #0
 8012a18:	f104 0619 	add.w	r6, r4, #25
 8012a1c:	e7f5      	b.n	8012a0a <_printf_i+0x222>
 8012a1e:	bf00      	nop
 8012a20:	08014ace 	.word	0x08014ace
 8012a24:	08014adf 	.word	0x08014adf

08012a28 <std>:
 8012a28:	2300      	movs	r3, #0
 8012a2a:	b510      	push	{r4, lr}
 8012a2c:	4604      	mov	r4, r0
 8012a2e:	e9c0 3300 	strd	r3, r3, [r0]
 8012a32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012a36:	6083      	str	r3, [r0, #8]
 8012a38:	8181      	strh	r1, [r0, #12]
 8012a3a:	6643      	str	r3, [r0, #100]	@ 0x64
 8012a3c:	81c2      	strh	r2, [r0, #14]
 8012a3e:	6183      	str	r3, [r0, #24]
 8012a40:	4619      	mov	r1, r3
 8012a42:	2208      	movs	r2, #8
 8012a44:	305c      	adds	r0, #92	@ 0x5c
 8012a46:	f000 f8f4 	bl	8012c32 <memset>
 8012a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8012a80 <std+0x58>)
 8012a4c:	6263      	str	r3, [r4, #36]	@ 0x24
 8012a4e:	4b0d      	ldr	r3, [pc, #52]	@ (8012a84 <std+0x5c>)
 8012a50:	62a3      	str	r3, [r4, #40]	@ 0x28
 8012a52:	4b0d      	ldr	r3, [pc, #52]	@ (8012a88 <std+0x60>)
 8012a54:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8012a56:	4b0d      	ldr	r3, [pc, #52]	@ (8012a8c <std+0x64>)
 8012a58:	6323      	str	r3, [r4, #48]	@ 0x30
 8012a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8012a90 <std+0x68>)
 8012a5c:	6224      	str	r4, [r4, #32]
 8012a5e:	429c      	cmp	r4, r3
 8012a60:	d006      	beq.n	8012a70 <std+0x48>
 8012a62:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8012a66:	4294      	cmp	r4, r2
 8012a68:	d002      	beq.n	8012a70 <std+0x48>
 8012a6a:	33d0      	adds	r3, #208	@ 0xd0
 8012a6c:	429c      	cmp	r4, r3
 8012a6e:	d105      	bne.n	8012a7c <std+0x54>
 8012a70:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8012a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012a78:	f000 b958 	b.w	8012d2c <__retarget_lock_init_recursive>
 8012a7c:	bd10      	pop	{r4, pc}
 8012a7e:	bf00      	nop
 8012a80:	08012bad 	.word	0x08012bad
 8012a84:	08012bcf 	.word	0x08012bcf
 8012a88:	08012c07 	.word	0x08012c07
 8012a8c:	08012c2b 	.word	0x08012c2b
 8012a90:	240025e4 	.word	0x240025e4

08012a94 <stdio_exit_handler>:
 8012a94:	4a02      	ldr	r2, [pc, #8]	@ (8012aa0 <stdio_exit_handler+0xc>)
 8012a96:	4903      	ldr	r1, [pc, #12]	@ (8012aa4 <stdio_exit_handler+0x10>)
 8012a98:	4803      	ldr	r0, [pc, #12]	@ (8012aa8 <stdio_exit_handler+0x14>)
 8012a9a:	f000 b869 	b.w	8012b70 <_fwalk_sglue>
 8012a9e:	bf00      	nop
 8012aa0:	2400012c 	.word	0x2400012c
 8012aa4:	08014301 	.word	0x08014301
 8012aa8:	2400013c 	.word	0x2400013c

08012aac <cleanup_stdio>:
 8012aac:	6841      	ldr	r1, [r0, #4]
 8012aae:	4b0c      	ldr	r3, [pc, #48]	@ (8012ae0 <cleanup_stdio+0x34>)
 8012ab0:	4299      	cmp	r1, r3
 8012ab2:	b510      	push	{r4, lr}
 8012ab4:	4604      	mov	r4, r0
 8012ab6:	d001      	beq.n	8012abc <cleanup_stdio+0x10>
 8012ab8:	f001 fc22 	bl	8014300 <_fflush_r>
 8012abc:	68a1      	ldr	r1, [r4, #8]
 8012abe:	4b09      	ldr	r3, [pc, #36]	@ (8012ae4 <cleanup_stdio+0x38>)
 8012ac0:	4299      	cmp	r1, r3
 8012ac2:	d002      	beq.n	8012aca <cleanup_stdio+0x1e>
 8012ac4:	4620      	mov	r0, r4
 8012ac6:	f001 fc1b 	bl	8014300 <_fflush_r>
 8012aca:	68e1      	ldr	r1, [r4, #12]
 8012acc:	4b06      	ldr	r3, [pc, #24]	@ (8012ae8 <cleanup_stdio+0x3c>)
 8012ace:	4299      	cmp	r1, r3
 8012ad0:	d004      	beq.n	8012adc <cleanup_stdio+0x30>
 8012ad2:	4620      	mov	r0, r4
 8012ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012ad8:	f001 bc12 	b.w	8014300 <_fflush_r>
 8012adc:	bd10      	pop	{r4, pc}
 8012ade:	bf00      	nop
 8012ae0:	240025e4 	.word	0x240025e4
 8012ae4:	2400264c 	.word	0x2400264c
 8012ae8:	240026b4 	.word	0x240026b4

08012aec <global_stdio_init.part.0>:
 8012aec:	b510      	push	{r4, lr}
 8012aee:	4b0b      	ldr	r3, [pc, #44]	@ (8012b1c <global_stdio_init.part.0+0x30>)
 8012af0:	4c0b      	ldr	r4, [pc, #44]	@ (8012b20 <global_stdio_init.part.0+0x34>)
 8012af2:	4a0c      	ldr	r2, [pc, #48]	@ (8012b24 <global_stdio_init.part.0+0x38>)
 8012af4:	601a      	str	r2, [r3, #0]
 8012af6:	4620      	mov	r0, r4
 8012af8:	2200      	movs	r2, #0
 8012afa:	2104      	movs	r1, #4
 8012afc:	f7ff ff94 	bl	8012a28 <std>
 8012b00:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8012b04:	2201      	movs	r2, #1
 8012b06:	2109      	movs	r1, #9
 8012b08:	f7ff ff8e 	bl	8012a28 <std>
 8012b0c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8012b10:	2202      	movs	r2, #2
 8012b12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b16:	2112      	movs	r1, #18
 8012b18:	f7ff bf86 	b.w	8012a28 <std>
 8012b1c:	2400271c 	.word	0x2400271c
 8012b20:	240025e4 	.word	0x240025e4
 8012b24:	08012a95 	.word	0x08012a95

08012b28 <__sfp_lock_acquire>:
 8012b28:	4801      	ldr	r0, [pc, #4]	@ (8012b30 <__sfp_lock_acquire+0x8>)
 8012b2a:	f000 b900 	b.w	8012d2e <__retarget_lock_acquire_recursive>
 8012b2e:	bf00      	nop
 8012b30:	24002725 	.word	0x24002725

08012b34 <__sfp_lock_release>:
 8012b34:	4801      	ldr	r0, [pc, #4]	@ (8012b3c <__sfp_lock_release+0x8>)
 8012b36:	f000 b8fb 	b.w	8012d30 <__retarget_lock_release_recursive>
 8012b3a:	bf00      	nop
 8012b3c:	24002725 	.word	0x24002725

08012b40 <__sinit>:
 8012b40:	b510      	push	{r4, lr}
 8012b42:	4604      	mov	r4, r0
 8012b44:	f7ff fff0 	bl	8012b28 <__sfp_lock_acquire>
 8012b48:	6a23      	ldr	r3, [r4, #32]
 8012b4a:	b11b      	cbz	r3, 8012b54 <__sinit+0x14>
 8012b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b50:	f7ff bff0 	b.w	8012b34 <__sfp_lock_release>
 8012b54:	4b04      	ldr	r3, [pc, #16]	@ (8012b68 <__sinit+0x28>)
 8012b56:	6223      	str	r3, [r4, #32]
 8012b58:	4b04      	ldr	r3, [pc, #16]	@ (8012b6c <__sinit+0x2c>)
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	2b00      	cmp	r3, #0
 8012b5e:	d1f5      	bne.n	8012b4c <__sinit+0xc>
 8012b60:	f7ff ffc4 	bl	8012aec <global_stdio_init.part.0>
 8012b64:	e7f2      	b.n	8012b4c <__sinit+0xc>
 8012b66:	bf00      	nop
 8012b68:	08012aad 	.word	0x08012aad
 8012b6c:	2400271c 	.word	0x2400271c

08012b70 <_fwalk_sglue>:
 8012b70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012b74:	4607      	mov	r7, r0
 8012b76:	4688      	mov	r8, r1
 8012b78:	4614      	mov	r4, r2
 8012b7a:	2600      	movs	r6, #0
 8012b7c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012b80:	f1b9 0901 	subs.w	r9, r9, #1
 8012b84:	d505      	bpl.n	8012b92 <_fwalk_sglue+0x22>
 8012b86:	6824      	ldr	r4, [r4, #0]
 8012b88:	2c00      	cmp	r4, #0
 8012b8a:	d1f7      	bne.n	8012b7c <_fwalk_sglue+0xc>
 8012b8c:	4630      	mov	r0, r6
 8012b8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012b92:	89ab      	ldrh	r3, [r5, #12]
 8012b94:	2b01      	cmp	r3, #1
 8012b96:	d907      	bls.n	8012ba8 <_fwalk_sglue+0x38>
 8012b98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012b9c:	3301      	adds	r3, #1
 8012b9e:	d003      	beq.n	8012ba8 <_fwalk_sglue+0x38>
 8012ba0:	4629      	mov	r1, r5
 8012ba2:	4638      	mov	r0, r7
 8012ba4:	47c0      	blx	r8
 8012ba6:	4306      	orrs	r6, r0
 8012ba8:	3568      	adds	r5, #104	@ 0x68
 8012baa:	e7e9      	b.n	8012b80 <_fwalk_sglue+0x10>

08012bac <__sread>:
 8012bac:	b510      	push	{r4, lr}
 8012bae:	460c      	mov	r4, r1
 8012bb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012bb4:	f000 f86c 	bl	8012c90 <_read_r>
 8012bb8:	2800      	cmp	r0, #0
 8012bba:	bfab      	itete	ge
 8012bbc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8012bbe:	89a3      	ldrhlt	r3, [r4, #12]
 8012bc0:	181b      	addge	r3, r3, r0
 8012bc2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8012bc6:	bfac      	ite	ge
 8012bc8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8012bca:	81a3      	strhlt	r3, [r4, #12]
 8012bcc:	bd10      	pop	{r4, pc}

08012bce <__swrite>:
 8012bce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012bd2:	461f      	mov	r7, r3
 8012bd4:	898b      	ldrh	r3, [r1, #12]
 8012bd6:	05db      	lsls	r3, r3, #23
 8012bd8:	4605      	mov	r5, r0
 8012bda:	460c      	mov	r4, r1
 8012bdc:	4616      	mov	r6, r2
 8012bde:	d505      	bpl.n	8012bec <__swrite+0x1e>
 8012be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012be4:	2302      	movs	r3, #2
 8012be6:	2200      	movs	r2, #0
 8012be8:	f000 f840 	bl	8012c6c <_lseek_r>
 8012bec:	89a3      	ldrh	r3, [r4, #12]
 8012bee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012bf2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8012bf6:	81a3      	strh	r3, [r4, #12]
 8012bf8:	4632      	mov	r2, r6
 8012bfa:	463b      	mov	r3, r7
 8012bfc:	4628      	mov	r0, r5
 8012bfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c02:	f000 b857 	b.w	8012cb4 <_write_r>

08012c06 <__sseek>:
 8012c06:	b510      	push	{r4, lr}
 8012c08:	460c      	mov	r4, r1
 8012c0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c0e:	f000 f82d 	bl	8012c6c <_lseek_r>
 8012c12:	1c43      	adds	r3, r0, #1
 8012c14:	89a3      	ldrh	r3, [r4, #12]
 8012c16:	bf15      	itete	ne
 8012c18:	6560      	strne	r0, [r4, #84]	@ 0x54
 8012c1a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8012c1e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8012c22:	81a3      	strheq	r3, [r4, #12]
 8012c24:	bf18      	it	ne
 8012c26:	81a3      	strhne	r3, [r4, #12]
 8012c28:	bd10      	pop	{r4, pc}

08012c2a <__sclose>:
 8012c2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012c2e:	f000 b80d 	b.w	8012c4c <_close_r>

08012c32 <memset>:
 8012c32:	4402      	add	r2, r0
 8012c34:	4603      	mov	r3, r0
 8012c36:	4293      	cmp	r3, r2
 8012c38:	d100      	bne.n	8012c3c <memset+0xa>
 8012c3a:	4770      	bx	lr
 8012c3c:	f803 1b01 	strb.w	r1, [r3], #1
 8012c40:	e7f9      	b.n	8012c36 <memset+0x4>
	...

08012c44 <_localeconv_r>:
 8012c44:	4800      	ldr	r0, [pc, #0]	@ (8012c48 <_localeconv_r+0x4>)
 8012c46:	4770      	bx	lr
 8012c48:	24000278 	.word	0x24000278

08012c4c <_close_r>:
 8012c4c:	b538      	push	{r3, r4, r5, lr}
 8012c4e:	4d06      	ldr	r5, [pc, #24]	@ (8012c68 <_close_r+0x1c>)
 8012c50:	2300      	movs	r3, #0
 8012c52:	4604      	mov	r4, r0
 8012c54:	4608      	mov	r0, r1
 8012c56:	602b      	str	r3, [r5, #0]
 8012c58:	f7ee fe3e 	bl	80018d8 <_close>
 8012c5c:	1c43      	adds	r3, r0, #1
 8012c5e:	d102      	bne.n	8012c66 <_close_r+0x1a>
 8012c60:	682b      	ldr	r3, [r5, #0]
 8012c62:	b103      	cbz	r3, 8012c66 <_close_r+0x1a>
 8012c64:	6023      	str	r3, [r4, #0]
 8012c66:	bd38      	pop	{r3, r4, r5, pc}
 8012c68:	24002720 	.word	0x24002720

08012c6c <_lseek_r>:
 8012c6c:	b538      	push	{r3, r4, r5, lr}
 8012c6e:	4d07      	ldr	r5, [pc, #28]	@ (8012c8c <_lseek_r+0x20>)
 8012c70:	4604      	mov	r4, r0
 8012c72:	4608      	mov	r0, r1
 8012c74:	4611      	mov	r1, r2
 8012c76:	2200      	movs	r2, #0
 8012c78:	602a      	str	r2, [r5, #0]
 8012c7a:	461a      	mov	r2, r3
 8012c7c:	f7ee fe53 	bl	8001926 <_lseek>
 8012c80:	1c43      	adds	r3, r0, #1
 8012c82:	d102      	bne.n	8012c8a <_lseek_r+0x1e>
 8012c84:	682b      	ldr	r3, [r5, #0]
 8012c86:	b103      	cbz	r3, 8012c8a <_lseek_r+0x1e>
 8012c88:	6023      	str	r3, [r4, #0]
 8012c8a:	bd38      	pop	{r3, r4, r5, pc}
 8012c8c:	24002720 	.word	0x24002720

08012c90 <_read_r>:
 8012c90:	b538      	push	{r3, r4, r5, lr}
 8012c92:	4d07      	ldr	r5, [pc, #28]	@ (8012cb0 <_read_r+0x20>)
 8012c94:	4604      	mov	r4, r0
 8012c96:	4608      	mov	r0, r1
 8012c98:	4611      	mov	r1, r2
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	602a      	str	r2, [r5, #0]
 8012c9e:	461a      	mov	r2, r3
 8012ca0:	f7ee fde1 	bl	8001866 <_read>
 8012ca4:	1c43      	adds	r3, r0, #1
 8012ca6:	d102      	bne.n	8012cae <_read_r+0x1e>
 8012ca8:	682b      	ldr	r3, [r5, #0]
 8012caa:	b103      	cbz	r3, 8012cae <_read_r+0x1e>
 8012cac:	6023      	str	r3, [r4, #0]
 8012cae:	bd38      	pop	{r3, r4, r5, pc}
 8012cb0:	24002720 	.word	0x24002720

08012cb4 <_write_r>:
 8012cb4:	b538      	push	{r3, r4, r5, lr}
 8012cb6:	4d07      	ldr	r5, [pc, #28]	@ (8012cd4 <_write_r+0x20>)
 8012cb8:	4604      	mov	r4, r0
 8012cba:	4608      	mov	r0, r1
 8012cbc:	4611      	mov	r1, r2
 8012cbe:	2200      	movs	r2, #0
 8012cc0:	602a      	str	r2, [r5, #0]
 8012cc2:	461a      	mov	r2, r3
 8012cc4:	f7ee fdec 	bl	80018a0 <_write>
 8012cc8:	1c43      	adds	r3, r0, #1
 8012cca:	d102      	bne.n	8012cd2 <_write_r+0x1e>
 8012ccc:	682b      	ldr	r3, [r5, #0]
 8012cce:	b103      	cbz	r3, 8012cd2 <_write_r+0x1e>
 8012cd0:	6023      	str	r3, [r4, #0]
 8012cd2:	bd38      	pop	{r3, r4, r5, pc}
 8012cd4:	24002720 	.word	0x24002720

08012cd8 <__errno>:
 8012cd8:	4b01      	ldr	r3, [pc, #4]	@ (8012ce0 <__errno+0x8>)
 8012cda:	6818      	ldr	r0, [r3, #0]
 8012cdc:	4770      	bx	lr
 8012cde:	bf00      	nop
 8012ce0:	24000138 	.word	0x24000138

08012ce4 <__libc_init_array>:
 8012ce4:	b570      	push	{r4, r5, r6, lr}
 8012ce6:	4d0d      	ldr	r5, [pc, #52]	@ (8012d1c <__libc_init_array+0x38>)
 8012ce8:	4c0d      	ldr	r4, [pc, #52]	@ (8012d20 <__libc_init_array+0x3c>)
 8012cea:	1b64      	subs	r4, r4, r5
 8012cec:	10a4      	asrs	r4, r4, #2
 8012cee:	2600      	movs	r6, #0
 8012cf0:	42a6      	cmp	r6, r4
 8012cf2:	d109      	bne.n	8012d08 <__libc_init_array+0x24>
 8012cf4:	4d0b      	ldr	r5, [pc, #44]	@ (8012d24 <__libc_init_array+0x40>)
 8012cf6:	4c0c      	ldr	r4, [pc, #48]	@ (8012d28 <__libc_init_array+0x44>)
 8012cf8:	f001 fe90 	bl	8014a1c <_init>
 8012cfc:	1b64      	subs	r4, r4, r5
 8012cfe:	10a4      	asrs	r4, r4, #2
 8012d00:	2600      	movs	r6, #0
 8012d02:	42a6      	cmp	r6, r4
 8012d04:	d105      	bne.n	8012d12 <__libc_init_array+0x2e>
 8012d06:	bd70      	pop	{r4, r5, r6, pc}
 8012d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8012d0c:	4798      	blx	r3
 8012d0e:	3601      	adds	r6, #1
 8012d10:	e7ee      	b.n	8012cf0 <__libc_init_array+0xc>
 8012d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8012d16:	4798      	blx	r3
 8012d18:	3601      	adds	r6, #1
 8012d1a:	e7f2      	b.n	8012d02 <__libc_init_array+0x1e>
 8012d1c:	08014e40 	.word	0x08014e40
 8012d20:	08014e40 	.word	0x08014e40
 8012d24:	08014e40 	.word	0x08014e40
 8012d28:	08014e44 	.word	0x08014e44

08012d2c <__retarget_lock_init_recursive>:
 8012d2c:	4770      	bx	lr

08012d2e <__retarget_lock_acquire_recursive>:
 8012d2e:	4770      	bx	lr

08012d30 <__retarget_lock_release_recursive>:
 8012d30:	4770      	bx	lr

08012d32 <quorem>:
 8012d32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d36:	6903      	ldr	r3, [r0, #16]
 8012d38:	690c      	ldr	r4, [r1, #16]
 8012d3a:	42a3      	cmp	r3, r4
 8012d3c:	4607      	mov	r7, r0
 8012d3e:	db7e      	blt.n	8012e3e <quorem+0x10c>
 8012d40:	3c01      	subs	r4, #1
 8012d42:	f101 0814 	add.w	r8, r1, #20
 8012d46:	00a3      	lsls	r3, r4, #2
 8012d48:	f100 0514 	add.w	r5, r0, #20
 8012d4c:	9300      	str	r3, [sp, #0]
 8012d4e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012d52:	9301      	str	r3, [sp, #4]
 8012d54:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012d58:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012d5c:	3301      	adds	r3, #1
 8012d5e:	429a      	cmp	r2, r3
 8012d60:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012d64:	fbb2 f6f3 	udiv	r6, r2, r3
 8012d68:	d32e      	bcc.n	8012dc8 <quorem+0x96>
 8012d6a:	f04f 0a00 	mov.w	sl, #0
 8012d6e:	46c4      	mov	ip, r8
 8012d70:	46ae      	mov	lr, r5
 8012d72:	46d3      	mov	fp, sl
 8012d74:	f85c 3b04 	ldr.w	r3, [ip], #4
 8012d78:	b298      	uxth	r0, r3
 8012d7a:	fb06 a000 	mla	r0, r6, r0, sl
 8012d7e:	0c02      	lsrs	r2, r0, #16
 8012d80:	0c1b      	lsrs	r3, r3, #16
 8012d82:	fb06 2303 	mla	r3, r6, r3, r2
 8012d86:	f8de 2000 	ldr.w	r2, [lr]
 8012d8a:	b280      	uxth	r0, r0
 8012d8c:	b292      	uxth	r2, r2
 8012d8e:	1a12      	subs	r2, r2, r0
 8012d90:	445a      	add	r2, fp
 8012d92:	f8de 0000 	ldr.w	r0, [lr]
 8012d96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012d9a:	b29b      	uxth	r3, r3
 8012d9c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8012da0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8012da4:	b292      	uxth	r2, r2
 8012da6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8012daa:	45e1      	cmp	r9, ip
 8012dac:	f84e 2b04 	str.w	r2, [lr], #4
 8012db0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8012db4:	d2de      	bcs.n	8012d74 <quorem+0x42>
 8012db6:	9b00      	ldr	r3, [sp, #0]
 8012db8:	58eb      	ldr	r3, [r5, r3]
 8012dba:	b92b      	cbnz	r3, 8012dc8 <quorem+0x96>
 8012dbc:	9b01      	ldr	r3, [sp, #4]
 8012dbe:	3b04      	subs	r3, #4
 8012dc0:	429d      	cmp	r5, r3
 8012dc2:	461a      	mov	r2, r3
 8012dc4:	d32f      	bcc.n	8012e26 <quorem+0xf4>
 8012dc6:	613c      	str	r4, [r7, #16]
 8012dc8:	4638      	mov	r0, r7
 8012dca:	f001 f90d 	bl	8013fe8 <__mcmp>
 8012dce:	2800      	cmp	r0, #0
 8012dd0:	db25      	blt.n	8012e1e <quorem+0xec>
 8012dd2:	4629      	mov	r1, r5
 8012dd4:	2000      	movs	r0, #0
 8012dd6:	f858 2b04 	ldr.w	r2, [r8], #4
 8012dda:	f8d1 c000 	ldr.w	ip, [r1]
 8012dde:	fa1f fe82 	uxth.w	lr, r2
 8012de2:	fa1f f38c 	uxth.w	r3, ip
 8012de6:	eba3 030e 	sub.w	r3, r3, lr
 8012dea:	4403      	add	r3, r0
 8012dec:	0c12      	lsrs	r2, r2, #16
 8012dee:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8012df2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8012df6:	b29b      	uxth	r3, r3
 8012df8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012dfc:	45c1      	cmp	r9, r8
 8012dfe:	f841 3b04 	str.w	r3, [r1], #4
 8012e02:	ea4f 4022 	mov.w	r0, r2, asr #16
 8012e06:	d2e6      	bcs.n	8012dd6 <quorem+0xa4>
 8012e08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012e0c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012e10:	b922      	cbnz	r2, 8012e1c <quorem+0xea>
 8012e12:	3b04      	subs	r3, #4
 8012e14:	429d      	cmp	r5, r3
 8012e16:	461a      	mov	r2, r3
 8012e18:	d30b      	bcc.n	8012e32 <quorem+0x100>
 8012e1a:	613c      	str	r4, [r7, #16]
 8012e1c:	3601      	adds	r6, #1
 8012e1e:	4630      	mov	r0, r6
 8012e20:	b003      	add	sp, #12
 8012e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e26:	6812      	ldr	r2, [r2, #0]
 8012e28:	3b04      	subs	r3, #4
 8012e2a:	2a00      	cmp	r2, #0
 8012e2c:	d1cb      	bne.n	8012dc6 <quorem+0x94>
 8012e2e:	3c01      	subs	r4, #1
 8012e30:	e7c6      	b.n	8012dc0 <quorem+0x8e>
 8012e32:	6812      	ldr	r2, [r2, #0]
 8012e34:	3b04      	subs	r3, #4
 8012e36:	2a00      	cmp	r2, #0
 8012e38:	d1ef      	bne.n	8012e1a <quorem+0xe8>
 8012e3a:	3c01      	subs	r4, #1
 8012e3c:	e7ea      	b.n	8012e14 <quorem+0xe2>
 8012e3e:	2000      	movs	r0, #0
 8012e40:	e7ee      	b.n	8012e20 <quorem+0xee>
 8012e42:	0000      	movs	r0, r0
 8012e44:	0000      	movs	r0, r0
	...

08012e48 <_dtoa_r>:
 8012e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e4c:	ed2d 8b02 	vpush	{d8}
 8012e50:	69c7      	ldr	r7, [r0, #28]
 8012e52:	b091      	sub	sp, #68	@ 0x44
 8012e54:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012e58:	ec55 4b10 	vmov	r4, r5, d0
 8012e5c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8012e5e:	9107      	str	r1, [sp, #28]
 8012e60:	4681      	mov	r9, r0
 8012e62:	9209      	str	r2, [sp, #36]	@ 0x24
 8012e64:	930d      	str	r3, [sp, #52]	@ 0x34
 8012e66:	b97f      	cbnz	r7, 8012e88 <_dtoa_r+0x40>
 8012e68:	2010      	movs	r0, #16
 8012e6a:	f000 fd8d 	bl	8013988 <malloc>
 8012e6e:	4602      	mov	r2, r0
 8012e70:	f8c9 001c 	str.w	r0, [r9, #28]
 8012e74:	b920      	cbnz	r0, 8012e80 <_dtoa_r+0x38>
 8012e76:	4ba0      	ldr	r3, [pc, #640]	@ (80130f8 <_dtoa_r+0x2b0>)
 8012e78:	21ef      	movs	r1, #239	@ 0xef
 8012e7a:	48a0      	ldr	r0, [pc, #640]	@ (80130fc <_dtoa_r+0x2b4>)
 8012e7c:	f001 fa86 	bl	801438c <__assert_func>
 8012e80:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8012e84:	6007      	str	r7, [r0, #0]
 8012e86:	60c7      	str	r7, [r0, #12]
 8012e88:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012e8c:	6819      	ldr	r1, [r3, #0]
 8012e8e:	b159      	cbz	r1, 8012ea8 <_dtoa_r+0x60>
 8012e90:	685a      	ldr	r2, [r3, #4]
 8012e92:	604a      	str	r2, [r1, #4]
 8012e94:	2301      	movs	r3, #1
 8012e96:	4093      	lsls	r3, r2
 8012e98:	608b      	str	r3, [r1, #8]
 8012e9a:	4648      	mov	r0, r9
 8012e9c:	f000 fe6a 	bl	8013b74 <_Bfree>
 8012ea0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8012ea4:	2200      	movs	r2, #0
 8012ea6:	601a      	str	r2, [r3, #0]
 8012ea8:	1e2b      	subs	r3, r5, #0
 8012eaa:	bfbb      	ittet	lt
 8012eac:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8012eb0:	9303      	strlt	r3, [sp, #12]
 8012eb2:	2300      	movge	r3, #0
 8012eb4:	2201      	movlt	r2, #1
 8012eb6:	bfac      	ite	ge
 8012eb8:	6033      	strge	r3, [r6, #0]
 8012eba:	6032      	strlt	r2, [r6, #0]
 8012ebc:	4b90      	ldr	r3, [pc, #576]	@ (8013100 <_dtoa_r+0x2b8>)
 8012ebe:	9e03      	ldr	r6, [sp, #12]
 8012ec0:	43b3      	bics	r3, r6
 8012ec2:	d110      	bne.n	8012ee6 <_dtoa_r+0x9e>
 8012ec4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012ec6:	f242 730f 	movw	r3, #9999	@ 0x270f
 8012eca:	6013      	str	r3, [r2, #0]
 8012ecc:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8012ed0:	4323      	orrs	r3, r4
 8012ed2:	f000 84de 	beq.w	8013892 <_dtoa_r+0xa4a>
 8012ed6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012ed8:	4f8a      	ldr	r7, [pc, #552]	@ (8013104 <_dtoa_r+0x2bc>)
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	f000 84e0 	beq.w	80138a0 <_dtoa_r+0xa58>
 8012ee0:	1cfb      	adds	r3, r7, #3
 8012ee2:	f000 bcdb 	b.w	801389c <_dtoa_r+0xa54>
 8012ee6:	ed9d 8b02 	vldr	d8, [sp, #8]
 8012eea:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8012eee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012ef2:	d10a      	bne.n	8012f0a <_dtoa_r+0xc2>
 8012ef4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8012ef6:	2301      	movs	r3, #1
 8012ef8:	6013      	str	r3, [r2, #0]
 8012efa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8012efc:	b113      	cbz	r3, 8012f04 <_dtoa_r+0xbc>
 8012efe:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8012f00:	4b81      	ldr	r3, [pc, #516]	@ (8013108 <_dtoa_r+0x2c0>)
 8012f02:	6013      	str	r3, [r2, #0]
 8012f04:	4f81      	ldr	r7, [pc, #516]	@ (801310c <_dtoa_r+0x2c4>)
 8012f06:	f000 bccb 	b.w	80138a0 <_dtoa_r+0xa58>
 8012f0a:	aa0e      	add	r2, sp, #56	@ 0x38
 8012f0c:	a90f      	add	r1, sp, #60	@ 0x3c
 8012f0e:	4648      	mov	r0, r9
 8012f10:	eeb0 0b48 	vmov.f64	d0, d8
 8012f14:	f001 f918 	bl	8014148 <__d2b>
 8012f18:	f3c6 530a 	ubfx	r3, r6, #20, #11
 8012f1c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8012f1e:	9001      	str	r0, [sp, #4]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d045      	beq.n	8012fb0 <_dtoa_r+0x168>
 8012f24:	eeb0 7b48 	vmov.f64	d7, d8
 8012f28:	ee18 1a90 	vmov	r1, s17
 8012f2c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8012f30:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8012f34:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8012f38:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8012f3c:	2500      	movs	r5, #0
 8012f3e:	ee07 1a90 	vmov	s15, r1
 8012f42:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8012f46:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80130e0 <_dtoa_r+0x298>
 8012f4a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012f4e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80130e8 <_dtoa_r+0x2a0>
 8012f52:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012f56:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80130f0 <_dtoa_r+0x2a8>
 8012f5a:	ee07 3a90 	vmov	s15, r3
 8012f5e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8012f62:	eeb0 7b46 	vmov.f64	d7, d6
 8012f66:	eea4 7b05 	vfma.f64	d7, d4, d5
 8012f6a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8012f6e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8012f72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f76:	ee16 8a90 	vmov	r8, s13
 8012f7a:	d508      	bpl.n	8012f8e <_dtoa_r+0x146>
 8012f7c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8012f80:	eeb4 6b47 	vcmp.f64	d6, d7
 8012f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012f88:	bf18      	it	ne
 8012f8a:	f108 38ff 	addne.w	r8, r8, #4294967295
 8012f8e:	f1b8 0f16 	cmp.w	r8, #22
 8012f92:	d82b      	bhi.n	8012fec <_dtoa_r+0x1a4>
 8012f94:	495e      	ldr	r1, [pc, #376]	@ (8013110 <_dtoa_r+0x2c8>)
 8012f96:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8012f9a:	ed91 7b00 	vldr	d7, [r1]
 8012f9e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8012fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012fa6:	d501      	bpl.n	8012fac <_dtoa_r+0x164>
 8012fa8:	f108 38ff 	add.w	r8, r8, #4294967295
 8012fac:	2100      	movs	r1, #0
 8012fae:	e01e      	b.n	8012fee <_dtoa_r+0x1a6>
 8012fb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012fb2:	4413      	add	r3, r2
 8012fb4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8012fb8:	2920      	cmp	r1, #32
 8012fba:	bfc1      	itttt	gt
 8012fbc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8012fc0:	408e      	lslgt	r6, r1
 8012fc2:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8012fc6:	fa24 f101 	lsrgt.w	r1, r4, r1
 8012fca:	bfd6      	itet	le
 8012fcc:	f1c1 0120 	rsble	r1, r1, #32
 8012fd0:	4331      	orrgt	r1, r6
 8012fd2:	fa04 f101 	lslle.w	r1, r4, r1
 8012fd6:	ee07 1a90 	vmov	s15, r1
 8012fda:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8012fde:	3b01      	subs	r3, #1
 8012fe0:	ee17 1a90 	vmov	r1, s15
 8012fe4:	2501      	movs	r5, #1
 8012fe6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8012fea:	e7a8      	b.n	8012f3e <_dtoa_r+0xf6>
 8012fec:	2101      	movs	r1, #1
 8012fee:	1ad2      	subs	r2, r2, r3
 8012ff0:	1e53      	subs	r3, r2, #1
 8012ff2:	9306      	str	r3, [sp, #24]
 8012ff4:	bf45      	ittet	mi
 8012ff6:	f1c2 0301 	rsbmi	r3, r2, #1
 8012ffa:	9305      	strmi	r3, [sp, #20]
 8012ffc:	2300      	movpl	r3, #0
 8012ffe:	2300      	movmi	r3, #0
 8013000:	bf4c      	ite	mi
 8013002:	9306      	strmi	r3, [sp, #24]
 8013004:	9305      	strpl	r3, [sp, #20]
 8013006:	f1b8 0f00 	cmp.w	r8, #0
 801300a:	910c      	str	r1, [sp, #48]	@ 0x30
 801300c:	db18      	blt.n	8013040 <_dtoa_r+0x1f8>
 801300e:	9b06      	ldr	r3, [sp, #24]
 8013010:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8013014:	4443      	add	r3, r8
 8013016:	9306      	str	r3, [sp, #24]
 8013018:	2300      	movs	r3, #0
 801301a:	9a07      	ldr	r2, [sp, #28]
 801301c:	2a09      	cmp	r2, #9
 801301e:	d849      	bhi.n	80130b4 <_dtoa_r+0x26c>
 8013020:	2a05      	cmp	r2, #5
 8013022:	bfc4      	itt	gt
 8013024:	3a04      	subgt	r2, #4
 8013026:	9207      	strgt	r2, [sp, #28]
 8013028:	9a07      	ldr	r2, [sp, #28]
 801302a:	f1a2 0202 	sub.w	r2, r2, #2
 801302e:	bfcc      	ite	gt
 8013030:	2400      	movgt	r4, #0
 8013032:	2401      	movle	r4, #1
 8013034:	2a03      	cmp	r2, #3
 8013036:	d848      	bhi.n	80130ca <_dtoa_r+0x282>
 8013038:	e8df f002 	tbb	[pc, r2]
 801303c:	3a2c2e0b 	.word	0x3a2c2e0b
 8013040:	9b05      	ldr	r3, [sp, #20]
 8013042:	2200      	movs	r2, #0
 8013044:	eba3 0308 	sub.w	r3, r3, r8
 8013048:	9305      	str	r3, [sp, #20]
 801304a:	920a      	str	r2, [sp, #40]	@ 0x28
 801304c:	f1c8 0300 	rsb	r3, r8, #0
 8013050:	e7e3      	b.n	801301a <_dtoa_r+0x1d2>
 8013052:	2200      	movs	r2, #0
 8013054:	9208      	str	r2, [sp, #32]
 8013056:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013058:	2a00      	cmp	r2, #0
 801305a:	dc39      	bgt.n	80130d0 <_dtoa_r+0x288>
 801305c:	f04f 0b01 	mov.w	fp, #1
 8013060:	46da      	mov	sl, fp
 8013062:	465a      	mov	r2, fp
 8013064:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8013068:	f8d9 701c 	ldr.w	r7, [r9, #28]
 801306c:	2100      	movs	r1, #0
 801306e:	2004      	movs	r0, #4
 8013070:	f100 0614 	add.w	r6, r0, #20
 8013074:	4296      	cmp	r6, r2
 8013076:	d930      	bls.n	80130da <_dtoa_r+0x292>
 8013078:	6079      	str	r1, [r7, #4]
 801307a:	4648      	mov	r0, r9
 801307c:	9304      	str	r3, [sp, #16]
 801307e:	f000 fd39 	bl	8013af4 <_Balloc>
 8013082:	9b04      	ldr	r3, [sp, #16]
 8013084:	4607      	mov	r7, r0
 8013086:	2800      	cmp	r0, #0
 8013088:	d146      	bne.n	8013118 <_dtoa_r+0x2d0>
 801308a:	4b22      	ldr	r3, [pc, #136]	@ (8013114 <_dtoa_r+0x2cc>)
 801308c:	4602      	mov	r2, r0
 801308e:	f240 11af 	movw	r1, #431	@ 0x1af
 8013092:	e6f2      	b.n	8012e7a <_dtoa_r+0x32>
 8013094:	2201      	movs	r2, #1
 8013096:	e7dd      	b.n	8013054 <_dtoa_r+0x20c>
 8013098:	2200      	movs	r2, #0
 801309a:	9208      	str	r2, [sp, #32]
 801309c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801309e:	eb08 0b02 	add.w	fp, r8, r2
 80130a2:	f10b 0a01 	add.w	sl, fp, #1
 80130a6:	4652      	mov	r2, sl
 80130a8:	2a01      	cmp	r2, #1
 80130aa:	bfb8      	it	lt
 80130ac:	2201      	movlt	r2, #1
 80130ae:	e7db      	b.n	8013068 <_dtoa_r+0x220>
 80130b0:	2201      	movs	r2, #1
 80130b2:	e7f2      	b.n	801309a <_dtoa_r+0x252>
 80130b4:	2401      	movs	r4, #1
 80130b6:	2200      	movs	r2, #0
 80130b8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80130bc:	f04f 3bff 	mov.w	fp, #4294967295
 80130c0:	2100      	movs	r1, #0
 80130c2:	46da      	mov	sl, fp
 80130c4:	2212      	movs	r2, #18
 80130c6:	9109      	str	r1, [sp, #36]	@ 0x24
 80130c8:	e7ce      	b.n	8013068 <_dtoa_r+0x220>
 80130ca:	2201      	movs	r2, #1
 80130cc:	9208      	str	r2, [sp, #32]
 80130ce:	e7f5      	b.n	80130bc <_dtoa_r+0x274>
 80130d0:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80130d4:	46da      	mov	sl, fp
 80130d6:	465a      	mov	r2, fp
 80130d8:	e7c6      	b.n	8013068 <_dtoa_r+0x220>
 80130da:	3101      	adds	r1, #1
 80130dc:	0040      	lsls	r0, r0, #1
 80130de:	e7c7      	b.n	8013070 <_dtoa_r+0x228>
 80130e0:	636f4361 	.word	0x636f4361
 80130e4:	3fd287a7 	.word	0x3fd287a7
 80130e8:	8b60c8b3 	.word	0x8b60c8b3
 80130ec:	3fc68a28 	.word	0x3fc68a28
 80130f0:	509f79fb 	.word	0x509f79fb
 80130f4:	3fd34413 	.word	0x3fd34413
 80130f8:	08014afd 	.word	0x08014afd
 80130fc:	08014b14 	.word	0x08014b14
 8013100:	7ff00000 	.word	0x7ff00000
 8013104:	08014af9 	.word	0x08014af9
 8013108:	08014acd 	.word	0x08014acd
 801310c:	08014acc 	.word	0x08014acc
 8013110:	08014c10 	.word	0x08014c10
 8013114:	08014b6c 	.word	0x08014b6c
 8013118:	f8d9 201c 	ldr.w	r2, [r9, #28]
 801311c:	f1ba 0f0e 	cmp.w	sl, #14
 8013120:	6010      	str	r0, [r2, #0]
 8013122:	d86f      	bhi.n	8013204 <_dtoa_r+0x3bc>
 8013124:	2c00      	cmp	r4, #0
 8013126:	d06d      	beq.n	8013204 <_dtoa_r+0x3bc>
 8013128:	f1b8 0f00 	cmp.w	r8, #0
 801312c:	f340 80c2 	ble.w	80132b4 <_dtoa_r+0x46c>
 8013130:	4aca      	ldr	r2, [pc, #808]	@ (801345c <_dtoa_r+0x614>)
 8013132:	f008 010f 	and.w	r1, r8, #15
 8013136:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801313a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 801313e:	ed92 7b00 	vldr	d7, [r2]
 8013142:	ea4f 1128 	mov.w	r1, r8, asr #4
 8013146:	f000 80a9 	beq.w	801329c <_dtoa_r+0x454>
 801314a:	4ac5      	ldr	r2, [pc, #788]	@ (8013460 <_dtoa_r+0x618>)
 801314c:	ed92 6b08 	vldr	d6, [r2, #32]
 8013150:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8013154:	ed8d 6b02 	vstr	d6, [sp, #8]
 8013158:	f001 010f 	and.w	r1, r1, #15
 801315c:	2203      	movs	r2, #3
 801315e:	48c0      	ldr	r0, [pc, #768]	@ (8013460 <_dtoa_r+0x618>)
 8013160:	2900      	cmp	r1, #0
 8013162:	f040 809d 	bne.w	80132a0 <_dtoa_r+0x458>
 8013166:	ed9d 6b02 	vldr	d6, [sp, #8]
 801316a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801316e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013172:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8013174:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013178:	2900      	cmp	r1, #0
 801317a:	f000 80c1 	beq.w	8013300 <_dtoa_r+0x4b8>
 801317e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8013182:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801318a:	f140 80b9 	bpl.w	8013300 <_dtoa_r+0x4b8>
 801318e:	f1ba 0f00 	cmp.w	sl, #0
 8013192:	f000 80b5 	beq.w	8013300 <_dtoa_r+0x4b8>
 8013196:	f1bb 0f00 	cmp.w	fp, #0
 801319a:	dd31      	ble.n	8013200 <_dtoa_r+0x3b8>
 801319c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80131a0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80131a4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80131a8:	f108 31ff 	add.w	r1, r8, #4294967295
 80131ac:	9104      	str	r1, [sp, #16]
 80131ae:	3201      	adds	r2, #1
 80131b0:	465c      	mov	r4, fp
 80131b2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80131b6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80131ba:	ee07 2a90 	vmov	s15, r2
 80131be:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80131c2:	eea7 5b06 	vfma.f64	d5, d7, d6
 80131c6:	ee15 2a90 	vmov	r2, s11
 80131ca:	ec51 0b15 	vmov	r0, r1, d5
 80131ce:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80131d2:	2c00      	cmp	r4, #0
 80131d4:	f040 8098 	bne.w	8013308 <_dtoa_r+0x4c0>
 80131d8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80131dc:	ee36 6b47 	vsub.f64	d6, d6, d7
 80131e0:	ec41 0b17 	vmov	d7, r0, r1
 80131e4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80131e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131ec:	f300 8261 	bgt.w	80136b2 <_dtoa_r+0x86a>
 80131f0:	eeb1 7b47 	vneg.f64	d7, d7
 80131f4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80131f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80131fc:	f100 80f5 	bmi.w	80133ea <_dtoa_r+0x5a2>
 8013200:	ed8d 8b02 	vstr	d8, [sp, #8]
 8013204:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8013206:	2a00      	cmp	r2, #0
 8013208:	f2c0 812c 	blt.w	8013464 <_dtoa_r+0x61c>
 801320c:	f1b8 0f0e 	cmp.w	r8, #14
 8013210:	f300 8128 	bgt.w	8013464 <_dtoa_r+0x61c>
 8013214:	4b91      	ldr	r3, [pc, #580]	@ (801345c <_dtoa_r+0x614>)
 8013216:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801321a:	ed93 6b00 	vldr	d6, [r3]
 801321e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8013220:	2b00      	cmp	r3, #0
 8013222:	da03      	bge.n	801322c <_dtoa_r+0x3e4>
 8013224:	f1ba 0f00 	cmp.w	sl, #0
 8013228:	f340 80d2 	ble.w	80133d0 <_dtoa_r+0x588>
 801322c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8013230:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013234:	463e      	mov	r6, r7
 8013236:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801323a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801323e:	ee15 3a10 	vmov	r3, s10
 8013242:	3330      	adds	r3, #48	@ 0x30
 8013244:	f806 3b01 	strb.w	r3, [r6], #1
 8013248:	1bf3      	subs	r3, r6, r7
 801324a:	459a      	cmp	sl, r3
 801324c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013250:	eea3 7b46 	vfms.f64	d7, d3, d6
 8013254:	f040 80f8 	bne.w	8013448 <_dtoa_r+0x600>
 8013258:	ee37 7b07 	vadd.f64	d7, d7, d7
 801325c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8013260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013264:	f300 80dd 	bgt.w	8013422 <_dtoa_r+0x5da>
 8013268:	eeb4 7b46 	vcmp.f64	d7, d6
 801326c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013270:	d104      	bne.n	801327c <_dtoa_r+0x434>
 8013272:	ee15 3a10 	vmov	r3, s10
 8013276:	07db      	lsls	r3, r3, #31
 8013278:	f100 80d3 	bmi.w	8013422 <_dtoa_r+0x5da>
 801327c:	9901      	ldr	r1, [sp, #4]
 801327e:	4648      	mov	r0, r9
 8013280:	f000 fc78 	bl	8013b74 <_Bfree>
 8013284:	2300      	movs	r3, #0
 8013286:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8013288:	7033      	strb	r3, [r6, #0]
 801328a:	f108 0301 	add.w	r3, r8, #1
 801328e:	6013      	str	r3, [r2, #0]
 8013290:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013292:	2b00      	cmp	r3, #0
 8013294:	f000 8304 	beq.w	80138a0 <_dtoa_r+0xa58>
 8013298:	601e      	str	r6, [r3, #0]
 801329a:	e301      	b.n	80138a0 <_dtoa_r+0xa58>
 801329c:	2202      	movs	r2, #2
 801329e:	e75e      	b.n	801315e <_dtoa_r+0x316>
 80132a0:	07cc      	lsls	r4, r1, #31
 80132a2:	d504      	bpl.n	80132ae <_dtoa_r+0x466>
 80132a4:	ed90 6b00 	vldr	d6, [r0]
 80132a8:	3201      	adds	r2, #1
 80132aa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80132ae:	1049      	asrs	r1, r1, #1
 80132b0:	3008      	adds	r0, #8
 80132b2:	e755      	b.n	8013160 <_dtoa_r+0x318>
 80132b4:	d022      	beq.n	80132fc <_dtoa_r+0x4b4>
 80132b6:	f1c8 0100 	rsb	r1, r8, #0
 80132ba:	4a68      	ldr	r2, [pc, #416]	@ (801345c <_dtoa_r+0x614>)
 80132bc:	f001 000f 	and.w	r0, r1, #15
 80132c0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80132c4:	ed92 7b00 	vldr	d7, [r2]
 80132c8:	ee28 7b07 	vmul.f64	d7, d8, d7
 80132cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80132d0:	4863      	ldr	r0, [pc, #396]	@ (8013460 <_dtoa_r+0x618>)
 80132d2:	1109      	asrs	r1, r1, #4
 80132d4:	2400      	movs	r4, #0
 80132d6:	2202      	movs	r2, #2
 80132d8:	b929      	cbnz	r1, 80132e6 <_dtoa_r+0x49e>
 80132da:	2c00      	cmp	r4, #0
 80132dc:	f43f af49 	beq.w	8013172 <_dtoa_r+0x32a>
 80132e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80132e4:	e745      	b.n	8013172 <_dtoa_r+0x32a>
 80132e6:	07ce      	lsls	r6, r1, #31
 80132e8:	d505      	bpl.n	80132f6 <_dtoa_r+0x4ae>
 80132ea:	ed90 6b00 	vldr	d6, [r0]
 80132ee:	3201      	adds	r2, #1
 80132f0:	2401      	movs	r4, #1
 80132f2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80132f6:	1049      	asrs	r1, r1, #1
 80132f8:	3008      	adds	r0, #8
 80132fa:	e7ed      	b.n	80132d8 <_dtoa_r+0x490>
 80132fc:	2202      	movs	r2, #2
 80132fe:	e738      	b.n	8013172 <_dtoa_r+0x32a>
 8013300:	f8cd 8010 	str.w	r8, [sp, #16]
 8013304:	4654      	mov	r4, sl
 8013306:	e754      	b.n	80131b2 <_dtoa_r+0x36a>
 8013308:	4a54      	ldr	r2, [pc, #336]	@ (801345c <_dtoa_r+0x614>)
 801330a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801330e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8013312:	9a08      	ldr	r2, [sp, #32]
 8013314:	ec41 0b17 	vmov	d7, r0, r1
 8013318:	443c      	add	r4, r7
 801331a:	b34a      	cbz	r2, 8013370 <_dtoa_r+0x528>
 801331c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8013320:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8013324:	463e      	mov	r6, r7
 8013326:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801332a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801332e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8013332:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013336:	ee14 2a90 	vmov	r2, s9
 801333a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801333e:	3230      	adds	r2, #48	@ 0x30
 8013340:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013344:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801334c:	f806 2b01 	strb.w	r2, [r6], #1
 8013350:	d438      	bmi.n	80133c4 <_dtoa_r+0x57c>
 8013352:	ee32 5b46 	vsub.f64	d5, d2, d6
 8013356:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801335a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801335e:	d462      	bmi.n	8013426 <_dtoa_r+0x5de>
 8013360:	42a6      	cmp	r6, r4
 8013362:	f43f af4d 	beq.w	8013200 <_dtoa_r+0x3b8>
 8013366:	ee27 7b03 	vmul.f64	d7, d7, d3
 801336a:	ee26 6b03 	vmul.f64	d6, d6, d3
 801336e:	e7e0      	b.n	8013332 <_dtoa_r+0x4ea>
 8013370:	4621      	mov	r1, r4
 8013372:	463e      	mov	r6, r7
 8013374:	ee27 7b04 	vmul.f64	d7, d7, d4
 8013378:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 801337c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8013380:	ee14 2a90 	vmov	r2, s9
 8013384:	3230      	adds	r2, #48	@ 0x30
 8013386:	f806 2b01 	strb.w	r2, [r6], #1
 801338a:	42a6      	cmp	r6, r4
 801338c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8013390:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013394:	d119      	bne.n	80133ca <_dtoa_r+0x582>
 8013396:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801339a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801339e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80133a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133a6:	dc3e      	bgt.n	8013426 <_dtoa_r+0x5de>
 80133a8:	ee35 5b47 	vsub.f64	d5, d5, d7
 80133ac:	eeb4 6bc5 	vcmpe.f64	d6, d5
 80133b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133b4:	f57f af24 	bpl.w	8013200 <_dtoa_r+0x3b8>
 80133b8:	460e      	mov	r6, r1
 80133ba:	3901      	subs	r1, #1
 80133bc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80133c0:	2b30      	cmp	r3, #48	@ 0x30
 80133c2:	d0f9      	beq.n	80133b8 <_dtoa_r+0x570>
 80133c4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80133c8:	e758      	b.n	801327c <_dtoa_r+0x434>
 80133ca:	ee26 6b03 	vmul.f64	d6, d6, d3
 80133ce:	e7d5      	b.n	801337c <_dtoa_r+0x534>
 80133d0:	d10b      	bne.n	80133ea <_dtoa_r+0x5a2>
 80133d2:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80133d6:	ee26 6b07 	vmul.f64	d6, d6, d7
 80133da:	ed9d 7b02 	vldr	d7, [sp, #8]
 80133de:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80133e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80133e6:	f2c0 8161 	blt.w	80136ac <_dtoa_r+0x864>
 80133ea:	2400      	movs	r4, #0
 80133ec:	4625      	mov	r5, r4
 80133ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80133f0:	43db      	mvns	r3, r3
 80133f2:	9304      	str	r3, [sp, #16]
 80133f4:	463e      	mov	r6, r7
 80133f6:	f04f 0800 	mov.w	r8, #0
 80133fa:	4621      	mov	r1, r4
 80133fc:	4648      	mov	r0, r9
 80133fe:	f000 fbb9 	bl	8013b74 <_Bfree>
 8013402:	2d00      	cmp	r5, #0
 8013404:	d0de      	beq.n	80133c4 <_dtoa_r+0x57c>
 8013406:	f1b8 0f00 	cmp.w	r8, #0
 801340a:	d005      	beq.n	8013418 <_dtoa_r+0x5d0>
 801340c:	45a8      	cmp	r8, r5
 801340e:	d003      	beq.n	8013418 <_dtoa_r+0x5d0>
 8013410:	4641      	mov	r1, r8
 8013412:	4648      	mov	r0, r9
 8013414:	f000 fbae 	bl	8013b74 <_Bfree>
 8013418:	4629      	mov	r1, r5
 801341a:	4648      	mov	r0, r9
 801341c:	f000 fbaa 	bl	8013b74 <_Bfree>
 8013420:	e7d0      	b.n	80133c4 <_dtoa_r+0x57c>
 8013422:	f8cd 8010 	str.w	r8, [sp, #16]
 8013426:	4633      	mov	r3, r6
 8013428:	461e      	mov	r6, r3
 801342a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801342e:	2a39      	cmp	r2, #57	@ 0x39
 8013430:	d106      	bne.n	8013440 <_dtoa_r+0x5f8>
 8013432:	429f      	cmp	r7, r3
 8013434:	d1f8      	bne.n	8013428 <_dtoa_r+0x5e0>
 8013436:	9a04      	ldr	r2, [sp, #16]
 8013438:	3201      	adds	r2, #1
 801343a:	9204      	str	r2, [sp, #16]
 801343c:	2230      	movs	r2, #48	@ 0x30
 801343e:	703a      	strb	r2, [r7, #0]
 8013440:	781a      	ldrb	r2, [r3, #0]
 8013442:	3201      	adds	r2, #1
 8013444:	701a      	strb	r2, [r3, #0]
 8013446:	e7bd      	b.n	80133c4 <_dtoa_r+0x57c>
 8013448:	ee27 7b04 	vmul.f64	d7, d7, d4
 801344c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8013450:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013454:	f47f aeef 	bne.w	8013236 <_dtoa_r+0x3ee>
 8013458:	e710      	b.n	801327c <_dtoa_r+0x434>
 801345a:	bf00      	nop
 801345c:	08014c10 	.word	0x08014c10
 8013460:	08014be8 	.word	0x08014be8
 8013464:	9908      	ldr	r1, [sp, #32]
 8013466:	2900      	cmp	r1, #0
 8013468:	f000 80e3 	beq.w	8013632 <_dtoa_r+0x7ea>
 801346c:	9907      	ldr	r1, [sp, #28]
 801346e:	2901      	cmp	r1, #1
 8013470:	f300 80c8 	bgt.w	8013604 <_dtoa_r+0x7bc>
 8013474:	2d00      	cmp	r5, #0
 8013476:	f000 80c1 	beq.w	80135fc <_dtoa_r+0x7b4>
 801347a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801347e:	9e05      	ldr	r6, [sp, #20]
 8013480:	461c      	mov	r4, r3
 8013482:	9304      	str	r3, [sp, #16]
 8013484:	9b05      	ldr	r3, [sp, #20]
 8013486:	4413      	add	r3, r2
 8013488:	9305      	str	r3, [sp, #20]
 801348a:	9b06      	ldr	r3, [sp, #24]
 801348c:	2101      	movs	r1, #1
 801348e:	4413      	add	r3, r2
 8013490:	4648      	mov	r0, r9
 8013492:	9306      	str	r3, [sp, #24]
 8013494:	f000 fc22 	bl	8013cdc <__i2b>
 8013498:	9b04      	ldr	r3, [sp, #16]
 801349a:	4605      	mov	r5, r0
 801349c:	b166      	cbz	r6, 80134b8 <_dtoa_r+0x670>
 801349e:	9a06      	ldr	r2, [sp, #24]
 80134a0:	2a00      	cmp	r2, #0
 80134a2:	dd09      	ble.n	80134b8 <_dtoa_r+0x670>
 80134a4:	42b2      	cmp	r2, r6
 80134a6:	9905      	ldr	r1, [sp, #20]
 80134a8:	bfa8      	it	ge
 80134aa:	4632      	movge	r2, r6
 80134ac:	1a89      	subs	r1, r1, r2
 80134ae:	9105      	str	r1, [sp, #20]
 80134b0:	9906      	ldr	r1, [sp, #24]
 80134b2:	1ab6      	subs	r6, r6, r2
 80134b4:	1a8a      	subs	r2, r1, r2
 80134b6:	9206      	str	r2, [sp, #24]
 80134b8:	b1fb      	cbz	r3, 80134fa <_dtoa_r+0x6b2>
 80134ba:	9a08      	ldr	r2, [sp, #32]
 80134bc:	2a00      	cmp	r2, #0
 80134be:	f000 80bc 	beq.w	801363a <_dtoa_r+0x7f2>
 80134c2:	b19c      	cbz	r4, 80134ec <_dtoa_r+0x6a4>
 80134c4:	4629      	mov	r1, r5
 80134c6:	4622      	mov	r2, r4
 80134c8:	4648      	mov	r0, r9
 80134ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80134cc:	f000 fcc6 	bl	8013e5c <__pow5mult>
 80134d0:	9a01      	ldr	r2, [sp, #4]
 80134d2:	4601      	mov	r1, r0
 80134d4:	4605      	mov	r5, r0
 80134d6:	4648      	mov	r0, r9
 80134d8:	f000 fc16 	bl	8013d08 <__multiply>
 80134dc:	9901      	ldr	r1, [sp, #4]
 80134de:	9004      	str	r0, [sp, #16]
 80134e0:	4648      	mov	r0, r9
 80134e2:	f000 fb47 	bl	8013b74 <_Bfree>
 80134e6:	9a04      	ldr	r2, [sp, #16]
 80134e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80134ea:	9201      	str	r2, [sp, #4]
 80134ec:	1b1a      	subs	r2, r3, r4
 80134ee:	d004      	beq.n	80134fa <_dtoa_r+0x6b2>
 80134f0:	9901      	ldr	r1, [sp, #4]
 80134f2:	4648      	mov	r0, r9
 80134f4:	f000 fcb2 	bl	8013e5c <__pow5mult>
 80134f8:	9001      	str	r0, [sp, #4]
 80134fa:	2101      	movs	r1, #1
 80134fc:	4648      	mov	r0, r9
 80134fe:	f000 fbed 	bl	8013cdc <__i2b>
 8013502:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013504:	4604      	mov	r4, r0
 8013506:	2b00      	cmp	r3, #0
 8013508:	f000 81d0 	beq.w	80138ac <_dtoa_r+0xa64>
 801350c:	461a      	mov	r2, r3
 801350e:	4601      	mov	r1, r0
 8013510:	4648      	mov	r0, r9
 8013512:	f000 fca3 	bl	8013e5c <__pow5mult>
 8013516:	9b07      	ldr	r3, [sp, #28]
 8013518:	2b01      	cmp	r3, #1
 801351a:	4604      	mov	r4, r0
 801351c:	f300 8095 	bgt.w	801364a <_dtoa_r+0x802>
 8013520:	9b02      	ldr	r3, [sp, #8]
 8013522:	2b00      	cmp	r3, #0
 8013524:	f040 808b 	bne.w	801363e <_dtoa_r+0x7f6>
 8013528:	9b03      	ldr	r3, [sp, #12]
 801352a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801352e:	2a00      	cmp	r2, #0
 8013530:	f040 8087 	bne.w	8013642 <_dtoa_r+0x7fa>
 8013534:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8013538:	0d12      	lsrs	r2, r2, #20
 801353a:	0512      	lsls	r2, r2, #20
 801353c:	2a00      	cmp	r2, #0
 801353e:	f000 8082 	beq.w	8013646 <_dtoa_r+0x7fe>
 8013542:	9b05      	ldr	r3, [sp, #20]
 8013544:	3301      	adds	r3, #1
 8013546:	9305      	str	r3, [sp, #20]
 8013548:	9b06      	ldr	r3, [sp, #24]
 801354a:	3301      	adds	r3, #1
 801354c:	9306      	str	r3, [sp, #24]
 801354e:	2301      	movs	r3, #1
 8013550:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013552:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013554:	2b00      	cmp	r3, #0
 8013556:	f000 81af 	beq.w	80138b8 <_dtoa_r+0xa70>
 801355a:	6922      	ldr	r2, [r4, #16]
 801355c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013560:	6910      	ldr	r0, [r2, #16]
 8013562:	f000 fb6f 	bl	8013c44 <__hi0bits>
 8013566:	f1c0 0020 	rsb	r0, r0, #32
 801356a:	9b06      	ldr	r3, [sp, #24]
 801356c:	4418      	add	r0, r3
 801356e:	f010 001f 	ands.w	r0, r0, #31
 8013572:	d076      	beq.n	8013662 <_dtoa_r+0x81a>
 8013574:	f1c0 0220 	rsb	r2, r0, #32
 8013578:	2a04      	cmp	r2, #4
 801357a:	dd69      	ble.n	8013650 <_dtoa_r+0x808>
 801357c:	9b05      	ldr	r3, [sp, #20]
 801357e:	f1c0 001c 	rsb	r0, r0, #28
 8013582:	4403      	add	r3, r0
 8013584:	9305      	str	r3, [sp, #20]
 8013586:	9b06      	ldr	r3, [sp, #24]
 8013588:	4406      	add	r6, r0
 801358a:	4403      	add	r3, r0
 801358c:	9306      	str	r3, [sp, #24]
 801358e:	9b05      	ldr	r3, [sp, #20]
 8013590:	2b00      	cmp	r3, #0
 8013592:	dd05      	ble.n	80135a0 <_dtoa_r+0x758>
 8013594:	9901      	ldr	r1, [sp, #4]
 8013596:	461a      	mov	r2, r3
 8013598:	4648      	mov	r0, r9
 801359a:	f000 fcb9 	bl	8013f10 <__lshift>
 801359e:	9001      	str	r0, [sp, #4]
 80135a0:	9b06      	ldr	r3, [sp, #24]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	dd05      	ble.n	80135b2 <_dtoa_r+0x76a>
 80135a6:	4621      	mov	r1, r4
 80135a8:	461a      	mov	r2, r3
 80135aa:	4648      	mov	r0, r9
 80135ac:	f000 fcb0 	bl	8013f10 <__lshift>
 80135b0:	4604      	mov	r4, r0
 80135b2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d056      	beq.n	8013666 <_dtoa_r+0x81e>
 80135b8:	9801      	ldr	r0, [sp, #4]
 80135ba:	4621      	mov	r1, r4
 80135bc:	f000 fd14 	bl	8013fe8 <__mcmp>
 80135c0:	2800      	cmp	r0, #0
 80135c2:	da50      	bge.n	8013666 <_dtoa_r+0x81e>
 80135c4:	f108 33ff 	add.w	r3, r8, #4294967295
 80135c8:	9304      	str	r3, [sp, #16]
 80135ca:	9901      	ldr	r1, [sp, #4]
 80135cc:	2300      	movs	r3, #0
 80135ce:	220a      	movs	r2, #10
 80135d0:	4648      	mov	r0, r9
 80135d2:	f000 faf1 	bl	8013bb8 <__multadd>
 80135d6:	9b08      	ldr	r3, [sp, #32]
 80135d8:	9001      	str	r0, [sp, #4]
 80135da:	2b00      	cmp	r3, #0
 80135dc:	f000 816e 	beq.w	80138bc <_dtoa_r+0xa74>
 80135e0:	4629      	mov	r1, r5
 80135e2:	2300      	movs	r3, #0
 80135e4:	220a      	movs	r2, #10
 80135e6:	4648      	mov	r0, r9
 80135e8:	f000 fae6 	bl	8013bb8 <__multadd>
 80135ec:	f1bb 0f00 	cmp.w	fp, #0
 80135f0:	4605      	mov	r5, r0
 80135f2:	dc64      	bgt.n	80136be <_dtoa_r+0x876>
 80135f4:	9b07      	ldr	r3, [sp, #28]
 80135f6:	2b02      	cmp	r3, #2
 80135f8:	dc3e      	bgt.n	8013678 <_dtoa_r+0x830>
 80135fa:	e060      	b.n	80136be <_dtoa_r+0x876>
 80135fc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80135fe:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013602:	e73c      	b.n	801347e <_dtoa_r+0x636>
 8013604:	f10a 34ff 	add.w	r4, sl, #4294967295
 8013608:	42a3      	cmp	r3, r4
 801360a:	bfbf      	itttt	lt
 801360c:	1ae2      	sublt	r2, r4, r3
 801360e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8013610:	189b      	addlt	r3, r3, r2
 8013612:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8013614:	bfae      	itee	ge
 8013616:	1b1c      	subge	r4, r3, r4
 8013618:	4623      	movlt	r3, r4
 801361a:	2400      	movlt	r4, #0
 801361c:	f1ba 0f00 	cmp.w	sl, #0
 8013620:	bfb5      	itete	lt
 8013622:	9a05      	ldrlt	r2, [sp, #20]
 8013624:	9e05      	ldrge	r6, [sp, #20]
 8013626:	eba2 060a 	sublt.w	r6, r2, sl
 801362a:	4652      	movge	r2, sl
 801362c:	bfb8      	it	lt
 801362e:	2200      	movlt	r2, #0
 8013630:	e727      	b.n	8013482 <_dtoa_r+0x63a>
 8013632:	9e05      	ldr	r6, [sp, #20]
 8013634:	9d08      	ldr	r5, [sp, #32]
 8013636:	461c      	mov	r4, r3
 8013638:	e730      	b.n	801349c <_dtoa_r+0x654>
 801363a:	461a      	mov	r2, r3
 801363c:	e758      	b.n	80134f0 <_dtoa_r+0x6a8>
 801363e:	2300      	movs	r3, #0
 8013640:	e786      	b.n	8013550 <_dtoa_r+0x708>
 8013642:	9b02      	ldr	r3, [sp, #8]
 8013644:	e784      	b.n	8013550 <_dtoa_r+0x708>
 8013646:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013648:	e783      	b.n	8013552 <_dtoa_r+0x70a>
 801364a:	2300      	movs	r3, #0
 801364c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801364e:	e784      	b.n	801355a <_dtoa_r+0x712>
 8013650:	d09d      	beq.n	801358e <_dtoa_r+0x746>
 8013652:	9b05      	ldr	r3, [sp, #20]
 8013654:	321c      	adds	r2, #28
 8013656:	4413      	add	r3, r2
 8013658:	9305      	str	r3, [sp, #20]
 801365a:	9b06      	ldr	r3, [sp, #24]
 801365c:	4416      	add	r6, r2
 801365e:	4413      	add	r3, r2
 8013660:	e794      	b.n	801358c <_dtoa_r+0x744>
 8013662:	4602      	mov	r2, r0
 8013664:	e7f5      	b.n	8013652 <_dtoa_r+0x80a>
 8013666:	f1ba 0f00 	cmp.w	sl, #0
 801366a:	f8cd 8010 	str.w	r8, [sp, #16]
 801366e:	46d3      	mov	fp, sl
 8013670:	dc21      	bgt.n	80136b6 <_dtoa_r+0x86e>
 8013672:	9b07      	ldr	r3, [sp, #28]
 8013674:	2b02      	cmp	r3, #2
 8013676:	dd1e      	ble.n	80136b6 <_dtoa_r+0x86e>
 8013678:	f1bb 0f00 	cmp.w	fp, #0
 801367c:	f47f aeb7 	bne.w	80133ee <_dtoa_r+0x5a6>
 8013680:	4621      	mov	r1, r4
 8013682:	465b      	mov	r3, fp
 8013684:	2205      	movs	r2, #5
 8013686:	4648      	mov	r0, r9
 8013688:	f000 fa96 	bl	8013bb8 <__multadd>
 801368c:	4601      	mov	r1, r0
 801368e:	4604      	mov	r4, r0
 8013690:	9801      	ldr	r0, [sp, #4]
 8013692:	f000 fca9 	bl	8013fe8 <__mcmp>
 8013696:	2800      	cmp	r0, #0
 8013698:	f77f aea9 	ble.w	80133ee <_dtoa_r+0x5a6>
 801369c:	463e      	mov	r6, r7
 801369e:	2331      	movs	r3, #49	@ 0x31
 80136a0:	f806 3b01 	strb.w	r3, [r6], #1
 80136a4:	9b04      	ldr	r3, [sp, #16]
 80136a6:	3301      	adds	r3, #1
 80136a8:	9304      	str	r3, [sp, #16]
 80136aa:	e6a4      	b.n	80133f6 <_dtoa_r+0x5ae>
 80136ac:	f8cd 8010 	str.w	r8, [sp, #16]
 80136b0:	4654      	mov	r4, sl
 80136b2:	4625      	mov	r5, r4
 80136b4:	e7f2      	b.n	801369c <_dtoa_r+0x854>
 80136b6:	9b08      	ldr	r3, [sp, #32]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	f000 8103 	beq.w	80138c4 <_dtoa_r+0xa7c>
 80136be:	2e00      	cmp	r6, #0
 80136c0:	dd05      	ble.n	80136ce <_dtoa_r+0x886>
 80136c2:	4629      	mov	r1, r5
 80136c4:	4632      	mov	r2, r6
 80136c6:	4648      	mov	r0, r9
 80136c8:	f000 fc22 	bl	8013f10 <__lshift>
 80136cc:	4605      	mov	r5, r0
 80136ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d058      	beq.n	8013786 <_dtoa_r+0x93e>
 80136d4:	6869      	ldr	r1, [r5, #4]
 80136d6:	4648      	mov	r0, r9
 80136d8:	f000 fa0c 	bl	8013af4 <_Balloc>
 80136dc:	4606      	mov	r6, r0
 80136de:	b928      	cbnz	r0, 80136ec <_dtoa_r+0x8a4>
 80136e0:	4b82      	ldr	r3, [pc, #520]	@ (80138ec <_dtoa_r+0xaa4>)
 80136e2:	4602      	mov	r2, r0
 80136e4:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80136e8:	f7ff bbc7 	b.w	8012e7a <_dtoa_r+0x32>
 80136ec:	692a      	ldr	r2, [r5, #16]
 80136ee:	3202      	adds	r2, #2
 80136f0:	0092      	lsls	r2, r2, #2
 80136f2:	f105 010c 	add.w	r1, r5, #12
 80136f6:	300c      	adds	r0, #12
 80136f8:	f000 fe3a 	bl	8014370 <memcpy>
 80136fc:	2201      	movs	r2, #1
 80136fe:	4631      	mov	r1, r6
 8013700:	4648      	mov	r0, r9
 8013702:	f000 fc05 	bl	8013f10 <__lshift>
 8013706:	1c7b      	adds	r3, r7, #1
 8013708:	9305      	str	r3, [sp, #20]
 801370a:	eb07 030b 	add.w	r3, r7, fp
 801370e:	9309      	str	r3, [sp, #36]	@ 0x24
 8013710:	9b02      	ldr	r3, [sp, #8]
 8013712:	f003 0301 	and.w	r3, r3, #1
 8013716:	46a8      	mov	r8, r5
 8013718:	9308      	str	r3, [sp, #32]
 801371a:	4605      	mov	r5, r0
 801371c:	9b05      	ldr	r3, [sp, #20]
 801371e:	9801      	ldr	r0, [sp, #4]
 8013720:	4621      	mov	r1, r4
 8013722:	f103 3bff 	add.w	fp, r3, #4294967295
 8013726:	f7ff fb04 	bl	8012d32 <quorem>
 801372a:	4641      	mov	r1, r8
 801372c:	9002      	str	r0, [sp, #8]
 801372e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8013732:	9801      	ldr	r0, [sp, #4]
 8013734:	f000 fc58 	bl	8013fe8 <__mcmp>
 8013738:	462a      	mov	r2, r5
 801373a:	9006      	str	r0, [sp, #24]
 801373c:	4621      	mov	r1, r4
 801373e:	4648      	mov	r0, r9
 8013740:	f000 fc6e 	bl	8014020 <__mdiff>
 8013744:	68c2      	ldr	r2, [r0, #12]
 8013746:	4606      	mov	r6, r0
 8013748:	b9fa      	cbnz	r2, 801378a <_dtoa_r+0x942>
 801374a:	4601      	mov	r1, r0
 801374c:	9801      	ldr	r0, [sp, #4]
 801374e:	f000 fc4b 	bl	8013fe8 <__mcmp>
 8013752:	4602      	mov	r2, r0
 8013754:	4631      	mov	r1, r6
 8013756:	4648      	mov	r0, r9
 8013758:	920a      	str	r2, [sp, #40]	@ 0x28
 801375a:	f000 fa0b 	bl	8013b74 <_Bfree>
 801375e:	9b07      	ldr	r3, [sp, #28]
 8013760:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013762:	9e05      	ldr	r6, [sp, #20]
 8013764:	ea43 0102 	orr.w	r1, r3, r2
 8013768:	9b08      	ldr	r3, [sp, #32]
 801376a:	4319      	orrs	r1, r3
 801376c:	d10f      	bne.n	801378e <_dtoa_r+0x946>
 801376e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013772:	d028      	beq.n	80137c6 <_dtoa_r+0x97e>
 8013774:	9b06      	ldr	r3, [sp, #24]
 8013776:	2b00      	cmp	r3, #0
 8013778:	dd02      	ble.n	8013780 <_dtoa_r+0x938>
 801377a:	9b02      	ldr	r3, [sp, #8]
 801377c:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8013780:	f88b a000 	strb.w	sl, [fp]
 8013784:	e639      	b.n	80133fa <_dtoa_r+0x5b2>
 8013786:	4628      	mov	r0, r5
 8013788:	e7bd      	b.n	8013706 <_dtoa_r+0x8be>
 801378a:	2201      	movs	r2, #1
 801378c:	e7e2      	b.n	8013754 <_dtoa_r+0x90c>
 801378e:	9b06      	ldr	r3, [sp, #24]
 8013790:	2b00      	cmp	r3, #0
 8013792:	db04      	blt.n	801379e <_dtoa_r+0x956>
 8013794:	9907      	ldr	r1, [sp, #28]
 8013796:	430b      	orrs	r3, r1
 8013798:	9908      	ldr	r1, [sp, #32]
 801379a:	430b      	orrs	r3, r1
 801379c:	d120      	bne.n	80137e0 <_dtoa_r+0x998>
 801379e:	2a00      	cmp	r2, #0
 80137a0:	ddee      	ble.n	8013780 <_dtoa_r+0x938>
 80137a2:	9901      	ldr	r1, [sp, #4]
 80137a4:	2201      	movs	r2, #1
 80137a6:	4648      	mov	r0, r9
 80137a8:	f000 fbb2 	bl	8013f10 <__lshift>
 80137ac:	4621      	mov	r1, r4
 80137ae:	9001      	str	r0, [sp, #4]
 80137b0:	f000 fc1a 	bl	8013fe8 <__mcmp>
 80137b4:	2800      	cmp	r0, #0
 80137b6:	dc03      	bgt.n	80137c0 <_dtoa_r+0x978>
 80137b8:	d1e2      	bne.n	8013780 <_dtoa_r+0x938>
 80137ba:	f01a 0f01 	tst.w	sl, #1
 80137be:	d0df      	beq.n	8013780 <_dtoa_r+0x938>
 80137c0:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80137c4:	d1d9      	bne.n	801377a <_dtoa_r+0x932>
 80137c6:	2339      	movs	r3, #57	@ 0x39
 80137c8:	f88b 3000 	strb.w	r3, [fp]
 80137cc:	4633      	mov	r3, r6
 80137ce:	461e      	mov	r6, r3
 80137d0:	3b01      	subs	r3, #1
 80137d2:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80137d6:	2a39      	cmp	r2, #57	@ 0x39
 80137d8:	d053      	beq.n	8013882 <_dtoa_r+0xa3a>
 80137da:	3201      	adds	r2, #1
 80137dc:	701a      	strb	r2, [r3, #0]
 80137de:	e60c      	b.n	80133fa <_dtoa_r+0x5b2>
 80137e0:	2a00      	cmp	r2, #0
 80137e2:	dd07      	ble.n	80137f4 <_dtoa_r+0x9ac>
 80137e4:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80137e8:	d0ed      	beq.n	80137c6 <_dtoa_r+0x97e>
 80137ea:	f10a 0301 	add.w	r3, sl, #1
 80137ee:	f88b 3000 	strb.w	r3, [fp]
 80137f2:	e602      	b.n	80133fa <_dtoa_r+0x5b2>
 80137f4:	9b05      	ldr	r3, [sp, #20]
 80137f6:	9a05      	ldr	r2, [sp, #20]
 80137f8:	f803 ac01 	strb.w	sl, [r3, #-1]
 80137fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137fe:	4293      	cmp	r3, r2
 8013800:	d029      	beq.n	8013856 <_dtoa_r+0xa0e>
 8013802:	9901      	ldr	r1, [sp, #4]
 8013804:	2300      	movs	r3, #0
 8013806:	220a      	movs	r2, #10
 8013808:	4648      	mov	r0, r9
 801380a:	f000 f9d5 	bl	8013bb8 <__multadd>
 801380e:	45a8      	cmp	r8, r5
 8013810:	9001      	str	r0, [sp, #4]
 8013812:	f04f 0300 	mov.w	r3, #0
 8013816:	f04f 020a 	mov.w	r2, #10
 801381a:	4641      	mov	r1, r8
 801381c:	4648      	mov	r0, r9
 801381e:	d107      	bne.n	8013830 <_dtoa_r+0x9e8>
 8013820:	f000 f9ca 	bl	8013bb8 <__multadd>
 8013824:	4680      	mov	r8, r0
 8013826:	4605      	mov	r5, r0
 8013828:	9b05      	ldr	r3, [sp, #20]
 801382a:	3301      	adds	r3, #1
 801382c:	9305      	str	r3, [sp, #20]
 801382e:	e775      	b.n	801371c <_dtoa_r+0x8d4>
 8013830:	f000 f9c2 	bl	8013bb8 <__multadd>
 8013834:	4629      	mov	r1, r5
 8013836:	4680      	mov	r8, r0
 8013838:	2300      	movs	r3, #0
 801383a:	220a      	movs	r2, #10
 801383c:	4648      	mov	r0, r9
 801383e:	f000 f9bb 	bl	8013bb8 <__multadd>
 8013842:	4605      	mov	r5, r0
 8013844:	e7f0      	b.n	8013828 <_dtoa_r+0x9e0>
 8013846:	f1bb 0f00 	cmp.w	fp, #0
 801384a:	bfcc      	ite	gt
 801384c:	465e      	movgt	r6, fp
 801384e:	2601      	movle	r6, #1
 8013850:	443e      	add	r6, r7
 8013852:	f04f 0800 	mov.w	r8, #0
 8013856:	9901      	ldr	r1, [sp, #4]
 8013858:	2201      	movs	r2, #1
 801385a:	4648      	mov	r0, r9
 801385c:	f000 fb58 	bl	8013f10 <__lshift>
 8013860:	4621      	mov	r1, r4
 8013862:	9001      	str	r0, [sp, #4]
 8013864:	f000 fbc0 	bl	8013fe8 <__mcmp>
 8013868:	2800      	cmp	r0, #0
 801386a:	dcaf      	bgt.n	80137cc <_dtoa_r+0x984>
 801386c:	d102      	bne.n	8013874 <_dtoa_r+0xa2c>
 801386e:	f01a 0f01 	tst.w	sl, #1
 8013872:	d1ab      	bne.n	80137cc <_dtoa_r+0x984>
 8013874:	4633      	mov	r3, r6
 8013876:	461e      	mov	r6, r3
 8013878:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801387c:	2a30      	cmp	r2, #48	@ 0x30
 801387e:	d0fa      	beq.n	8013876 <_dtoa_r+0xa2e>
 8013880:	e5bb      	b.n	80133fa <_dtoa_r+0x5b2>
 8013882:	429f      	cmp	r7, r3
 8013884:	d1a3      	bne.n	80137ce <_dtoa_r+0x986>
 8013886:	9b04      	ldr	r3, [sp, #16]
 8013888:	3301      	adds	r3, #1
 801388a:	9304      	str	r3, [sp, #16]
 801388c:	2331      	movs	r3, #49	@ 0x31
 801388e:	703b      	strb	r3, [r7, #0]
 8013890:	e5b3      	b.n	80133fa <_dtoa_r+0x5b2>
 8013892:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013894:	4f16      	ldr	r7, [pc, #88]	@ (80138f0 <_dtoa_r+0xaa8>)
 8013896:	b11b      	cbz	r3, 80138a0 <_dtoa_r+0xa58>
 8013898:	f107 0308 	add.w	r3, r7, #8
 801389c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801389e:	6013      	str	r3, [r2, #0]
 80138a0:	4638      	mov	r0, r7
 80138a2:	b011      	add	sp, #68	@ 0x44
 80138a4:	ecbd 8b02 	vpop	{d8}
 80138a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138ac:	9b07      	ldr	r3, [sp, #28]
 80138ae:	2b01      	cmp	r3, #1
 80138b0:	f77f ae36 	ble.w	8013520 <_dtoa_r+0x6d8>
 80138b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80138b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80138b8:	2001      	movs	r0, #1
 80138ba:	e656      	b.n	801356a <_dtoa_r+0x722>
 80138bc:	f1bb 0f00 	cmp.w	fp, #0
 80138c0:	f77f aed7 	ble.w	8013672 <_dtoa_r+0x82a>
 80138c4:	463e      	mov	r6, r7
 80138c6:	9801      	ldr	r0, [sp, #4]
 80138c8:	4621      	mov	r1, r4
 80138ca:	f7ff fa32 	bl	8012d32 <quorem>
 80138ce:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80138d2:	f806 ab01 	strb.w	sl, [r6], #1
 80138d6:	1bf2      	subs	r2, r6, r7
 80138d8:	4593      	cmp	fp, r2
 80138da:	ddb4      	ble.n	8013846 <_dtoa_r+0x9fe>
 80138dc:	9901      	ldr	r1, [sp, #4]
 80138de:	2300      	movs	r3, #0
 80138e0:	220a      	movs	r2, #10
 80138e2:	4648      	mov	r0, r9
 80138e4:	f000 f968 	bl	8013bb8 <__multadd>
 80138e8:	9001      	str	r0, [sp, #4]
 80138ea:	e7ec      	b.n	80138c6 <_dtoa_r+0xa7e>
 80138ec:	08014b6c 	.word	0x08014b6c
 80138f0:	08014af0 	.word	0x08014af0

080138f4 <_free_r>:
 80138f4:	b538      	push	{r3, r4, r5, lr}
 80138f6:	4605      	mov	r5, r0
 80138f8:	2900      	cmp	r1, #0
 80138fa:	d041      	beq.n	8013980 <_free_r+0x8c>
 80138fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013900:	1f0c      	subs	r4, r1, #4
 8013902:	2b00      	cmp	r3, #0
 8013904:	bfb8      	it	lt
 8013906:	18e4      	addlt	r4, r4, r3
 8013908:	f000 f8e8 	bl	8013adc <__malloc_lock>
 801390c:	4a1d      	ldr	r2, [pc, #116]	@ (8013984 <_free_r+0x90>)
 801390e:	6813      	ldr	r3, [r2, #0]
 8013910:	b933      	cbnz	r3, 8013920 <_free_r+0x2c>
 8013912:	6063      	str	r3, [r4, #4]
 8013914:	6014      	str	r4, [r2, #0]
 8013916:	4628      	mov	r0, r5
 8013918:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801391c:	f000 b8e4 	b.w	8013ae8 <__malloc_unlock>
 8013920:	42a3      	cmp	r3, r4
 8013922:	d908      	bls.n	8013936 <_free_r+0x42>
 8013924:	6820      	ldr	r0, [r4, #0]
 8013926:	1821      	adds	r1, r4, r0
 8013928:	428b      	cmp	r3, r1
 801392a:	bf01      	itttt	eq
 801392c:	6819      	ldreq	r1, [r3, #0]
 801392e:	685b      	ldreq	r3, [r3, #4]
 8013930:	1809      	addeq	r1, r1, r0
 8013932:	6021      	streq	r1, [r4, #0]
 8013934:	e7ed      	b.n	8013912 <_free_r+0x1e>
 8013936:	461a      	mov	r2, r3
 8013938:	685b      	ldr	r3, [r3, #4]
 801393a:	b10b      	cbz	r3, 8013940 <_free_r+0x4c>
 801393c:	42a3      	cmp	r3, r4
 801393e:	d9fa      	bls.n	8013936 <_free_r+0x42>
 8013940:	6811      	ldr	r1, [r2, #0]
 8013942:	1850      	adds	r0, r2, r1
 8013944:	42a0      	cmp	r0, r4
 8013946:	d10b      	bne.n	8013960 <_free_r+0x6c>
 8013948:	6820      	ldr	r0, [r4, #0]
 801394a:	4401      	add	r1, r0
 801394c:	1850      	adds	r0, r2, r1
 801394e:	4283      	cmp	r3, r0
 8013950:	6011      	str	r1, [r2, #0]
 8013952:	d1e0      	bne.n	8013916 <_free_r+0x22>
 8013954:	6818      	ldr	r0, [r3, #0]
 8013956:	685b      	ldr	r3, [r3, #4]
 8013958:	6053      	str	r3, [r2, #4]
 801395a:	4408      	add	r0, r1
 801395c:	6010      	str	r0, [r2, #0]
 801395e:	e7da      	b.n	8013916 <_free_r+0x22>
 8013960:	d902      	bls.n	8013968 <_free_r+0x74>
 8013962:	230c      	movs	r3, #12
 8013964:	602b      	str	r3, [r5, #0]
 8013966:	e7d6      	b.n	8013916 <_free_r+0x22>
 8013968:	6820      	ldr	r0, [r4, #0]
 801396a:	1821      	adds	r1, r4, r0
 801396c:	428b      	cmp	r3, r1
 801396e:	bf04      	itt	eq
 8013970:	6819      	ldreq	r1, [r3, #0]
 8013972:	685b      	ldreq	r3, [r3, #4]
 8013974:	6063      	str	r3, [r4, #4]
 8013976:	bf04      	itt	eq
 8013978:	1809      	addeq	r1, r1, r0
 801397a:	6021      	streq	r1, [r4, #0]
 801397c:	6054      	str	r4, [r2, #4]
 801397e:	e7ca      	b.n	8013916 <_free_r+0x22>
 8013980:	bd38      	pop	{r3, r4, r5, pc}
 8013982:	bf00      	nop
 8013984:	2400272c 	.word	0x2400272c

08013988 <malloc>:
 8013988:	4b02      	ldr	r3, [pc, #8]	@ (8013994 <malloc+0xc>)
 801398a:	4601      	mov	r1, r0
 801398c:	6818      	ldr	r0, [r3, #0]
 801398e:	f000 b825 	b.w	80139dc <_malloc_r>
 8013992:	bf00      	nop
 8013994:	24000138 	.word	0x24000138

08013998 <sbrk_aligned>:
 8013998:	b570      	push	{r4, r5, r6, lr}
 801399a:	4e0f      	ldr	r6, [pc, #60]	@ (80139d8 <sbrk_aligned+0x40>)
 801399c:	460c      	mov	r4, r1
 801399e:	6831      	ldr	r1, [r6, #0]
 80139a0:	4605      	mov	r5, r0
 80139a2:	b911      	cbnz	r1, 80139aa <sbrk_aligned+0x12>
 80139a4:	f000 fcd4 	bl	8014350 <_sbrk_r>
 80139a8:	6030      	str	r0, [r6, #0]
 80139aa:	4621      	mov	r1, r4
 80139ac:	4628      	mov	r0, r5
 80139ae:	f000 fccf 	bl	8014350 <_sbrk_r>
 80139b2:	1c43      	adds	r3, r0, #1
 80139b4:	d103      	bne.n	80139be <sbrk_aligned+0x26>
 80139b6:	f04f 34ff 	mov.w	r4, #4294967295
 80139ba:	4620      	mov	r0, r4
 80139bc:	bd70      	pop	{r4, r5, r6, pc}
 80139be:	1cc4      	adds	r4, r0, #3
 80139c0:	f024 0403 	bic.w	r4, r4, #3
 80139c4:	42a0      	cmp	r0, r4
 80139c6:	d0f8      	beq.n	80139ba <sbrk_aligned+0x22>
 80139c8:	1a21      	subs	r1, r4, r0
 80139ca:	4628      	mov	r0, r5
 80139cc:	f000 fcc0 	bl	8014350 <_sbrk_r>
 80139d0:	3001      	adds	r0, #1
 80139d2:	d1f2      	bne.n	80139ba <sbrk_aligned+0x22>
 80139d4:	e7ef      	b.n	80139b6 <sbrk_aligned+0x1e>
 80139d6:	bf00      	nop
 80139d8:	24002728 	.word	0x24002728

080139dc <_malloc_r>:
 80139dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80139e0:	1ccd      	adds	r5, r1, #3
 80139e2:	f025 0503 	bic.w	r5, r5, #3
 80139e6:	3508      	adds	r5, #8
 80139e8:	2d0c      	cmp	r5, #12
 80139ea:	bf38      	it	cc
 80139ec:	250c      	movcc	r5, #12
 80139ee:	2d00      	cmp	r5, #0
 80139f0:	4606      	mov	r6, r0
 80139f2:	db01      	blt.n	80139f8 <_malloc_r+0x1c>
 80139f4:	42a9      	cmp	r1, r5
 80139f6:	d904      	bls.n	8013a02 <_malloc_r+0x26>
 80139f8:	230c      	movs	r3, #12
 80139fa:	6033      	str	r3, [r6, #0]
 80139fc:	2000      	movs	r0, #0
 80139fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013a02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013ad8 <_malloc_r+0xfc>
 8013a06:	f000 f869 	bl	8013adc <__malloc_lock>
 8013a0a:	f8d8 3000 	ldr.w	r3, [r8]
 8013a0e:	461c      	mov	r4, r3
 8013a10:	bb44      	cbnz	r4, 8013a64 <_malloc_r+0x88>
 8013a12:	4629      	mov	r1, r5
 8013a14:	4630      	mov	r0, r6
 8013a16:	f7ff ffbf 	bl	8013998 <sbrk_aligned>
 8013a1a:	1c43      	adds	r3, r0, #1
 8013a1c:	4604      	mov	r4, r0
 8013a1e:	d158      	bne.n	8013ad2 <_malloc_r+0xf6>
 8013a20:	f8d8 4000 	ldr.w	r4, [r8]
 8013a24:	4627      	mov	r7, r4
 8013a26:	2f00      	cmp	r7, #0
 8013a28:	d143      	bne.n	8013ab2 <_malloc_r+0xd6>
 8013a2a:	2c00      	cmp	r4, #0
 8013a2c:	d04b      	beq.n	8013ac6 <_malloc_r+0xea>
 8013a2e:	6823      	ldr	r3, [r4, #0]
 8013a30:	4639      	mov	r1, r7
 8013a32:	4630      	mov	r0, r6
 8013a34:	eb04 0903 	add.w	r9, r4, r3
 8013a38:	f000 fc8a 	bl	8014350 <_sbrk_r>
 8013a3c:	4581      	cmp	r9, r0
 8013a3e:	d142      	bne.n	8013ac6 <_malloc_r+0xea>
 8013a40:	6821      	ldr	r1, [r4, #0]
 8013a42:	1a6d      	subs	r5, r5, r1
 8013a44:	4629      	mov	r1, r5
 8013a46:	4630      	mov	r0, r6
 8013a48:	f7ff ffa6 	bl	8013998 <sbrk_aligned>
 8013a4c:	3001      	adds	r0, #1
 8013a4e:	d03a      	beq.n	8013ac6 <_malloc_r+0xea>
 8013a50:	6823      	ldr	r3, [r4, #0]
 8013a52:	442b      	add	r3, r5
 8013a54:	6023      	str	r3, [r4, #0]
 8013a56:	f8d8 3000 	ldr.w	r3, [r8]
 8013a5a:	685a      	ldr	r2, [r3, #4]
 8013a5c:	bb62      	cbnz	r2, 8013ab8 <_malloc_r+0xdc>
 8013a5e:	f8c8 7000 	str.w	r7, [r8]
 8013a62:	e00f      	b.n	8013a84 <_malloc_r+0xa8>
 8013a64:	6822      	ldr	r2, [r4, #0]
 8013a66:	1b52      	subs	r2, r2, r5
 8013a68:	d420      	bmi.n	8013aac <_malloc_r+0xd0>
 8013a6a:	2a0b      	cmp	r2, #11
 8013a6c:	d917      	bls.n	8013a9e <_malloc_r+0xc2>
 8013a6e:	1961      	adds	r1, r4, r5
 8013a70:	42a3      	cmp	r3, r4
 8013a72:	6025      	str	r5, [r4, #0]
 8013a74:	bf18      	it	ne
 8013a76:	6059      	strne	r1, [r3, #4]
 8013a78:	6863      	ldr	r3, [r4, #4]
 8013a7a:	bf08      	it	eq
 8013a7c:	f8c8 1000 	streq.w	r1, [r8]
 8013a80:	5162      	str	r2, [r4, r5]
 8013a82:	604b      	str	r3, [r1, #4]
 8013a84:	4630      	mov	r0, r6
 8013a86:	f000 f82f 	bl	8013ae8 <__malloc_unlock>
 8013a8a:	f104 000b 	add.w	r0, r4, #11
 8013a8e:	1d23      	adds	r3, r4, #4
 8013a90:	f020 0007 	bic.w	r0, r0, #7
 8013a94:	1ac2      	subs	r2, r0, r3
 8013a96:	bf1c      	itt	ne
 8013a98:	1a1b      	subne	r3, r3, r0
 8013a9a:	50a3      	strne	r3, [r4, r2]
 8013a9c:	e7af      	b.n	80139fe <_malloc_r+0x22>
 8013a9e:	6862      	ldr	r2, [r4, #4]
 8013aa0:	42a3      	cmp	r3, r4
 8013aa2:	bf0c      	ite	eq
 8013aa4:	f8c8 2000 	streq.w	r2, [r8]
 8013aa8:	605a      	strne	r2, [r3, #4]
 8013aaa:	e7eb      	b.n	8013a84 <_malloc_r+0xa8>
 8013aac:	4623      	mov	r3, r4
 8013aae:	6864      	ldr	r4, [r4, #4]
 8013ab0:	e7ae      	b.n	8013a10 <_malloc_r+0x34>
 8013ab2:	463c      	mov	r4, r7
 8013ab4:	687f      	ldr	r7, [r7, #4]
 8013ab6:	e7b6      	b.n	8013a26 <_malloc_r+0x4a>
 8013ab8:	461a      	mov	r2, r3
 8013aba:	685b      	ldr	r3, [r3, #4]
 8013abc:	42a3      	cmp	r3, r4
 8013abe:	d1fb      	bne.n	8013ab8 <_malloc_r+0xdc>
 8013ac0:	2300      	movs	r3, #0
 8013ac2:	6053      	str	r3, [r2, #4]
 8013ac4:	e7de      	b.n	8013a84 <_malloc_r+0xa8>
 8013ac6:	230c      	movs	r3, #12
 8013ac8:	6033      	str	r3, [r6, #0]
 8013aca:	4630      	mov	r0, r6
 8013acc:	f000 f80c 	bl	8013ae8 <__malloc_unlock>
 8013ad0:	e794      	b.n	80139fc <_malloc_r+0x20>
 8013ad2:	6005      	str	r5, [r0, #0]
 8013ad4:	e7d6      	b.n	8013a84 <_malloc_r+0xa8>
 8013ad6:	bf00      	nop
 8013ad8:	2400272c 	.word	0x2400272c

08013adc <__malloc_lock>:
 8013adc:	4801      	ldr	r0, [pc, #4]	@ (8013ae4 <__malloc_lock+0x8>)
 8013ade:	f7ff b926 	b.w	8012d2e <__retarget_lock_acquire_recursive>
 8013ae2:	bf00      	nop
 8013ae4:	24002724 	.word	0x24002724

08013ae8 <__malloc_unlock>:
 8013ae8:	4801      	ldr	r0, [pc, #4]	@ (8013af0 <__malloc_unlock+0x8>)
 8013aea:	f7ff b921 	b.w	8012d30 <__retarget_lock_release_recursive>
 8013aee:	bf00      	nop
 8013af0:	24002724 	.word	0x24002724

08013af4 <_Balloc>:
 8013af4:	b570      	push	{r4, r5, r6, lr}
 8013af6:	69c6      	ldr	r6, [r0, #28]
 8013af8:	4604      	mov	r4, r0
 8013afa:	460d      	mov	r5, r1
 8013afc:	b976      	cbnz	r6, 8013b1c <_Balloc+0x28>
 8013afe:	2010      	movs	r0, #16
 8013b00:	f7ff ff42 	bl	8013988 <malloc>
 8013b04:	4602      	mov	r2, r0
 8013b06:	61e0      	str	r0, [r4, #28]
 8013b08:	b920      	cbnz	r0, 8013b14 <_Balloc+0x20>
 8013b0a:	4b18      	ldr	r3, [pc, #96]	@ (8013b6c <_Balloc+0x78>)
 8013b0c:	4818      	ldr	r0, [pc, #96]	@ (8013b70 <_Balloc+0x7c>)
 8013b0e:	216b      	movs	r1, #107	@ 0x6b
 8013b10:	f000 fc3c 	bl	801438c <__assert_func>
 8013b14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013b18:	6006      	str	r6, [r0, #0]
 8013b1a:	60c6      	str	r6, [r0, #12]
 8013b1c:	69e6      	ldr	r6, [r4, #28]
 8013b1e:	68f3      	ldr	r3, [r6, #12]
 8013b20:	b183      	cbz	r3, 8013b44 <_Balloc+0x50>
 8013b22:	69e3      	ldr	r3, [r4, #28]
 8013b24:	68db      	ldr	r3, [r3, #12]
 8013b26:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013b2a:	b9b8      	cbnz	r0, 8013b5c <_Balloc+0x68>
 8013b2c:	2101      	movs	r1, #1
 8013b2e:	fa01 f605 	lsl.w	r6, r1, r5
 8013b32:	1d72      	adds	r2, r6, #5
 8013b34:	0092      	lsls	r2, r2, #2
 8013b36:	4620      	mov	r0, r4
 8013b38:	f000 fc46 	bl	80143c8 <_calloc_r>
 8013b3c:	b160      	cbz	r0, 8013b58 <_Balloc+0x64>
 8013b3e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013b42:	e00e      	b.n	8013b62 <_Balloc+0x6e>
 8013b44:	2221      	movs	r2, #33	@ 0x21
 8013b46:	2104      	movs	r1, #4
 8013b48:	4620      	mov	r0, r4
 8013b4a:	f000 fc3d 	bl	80143c8 <_calloc_r>
 8013b4e:	69e3      	ldr	r3, [r4, #28]
 8013b50:	60f0      	str	r0, [r6, #12]
 8013b52:	68db      	ldr	r3, [r3, #12]
 8013b54:	2b00      	cmp	r3, #0
 8013b56:	d1e4      	bne.n	8013b22 <_Balloc+0x2e>
 8013b58:	2000      	movs	r0, #0
 8013b5a:	bd70      	pop	{r4, r5, r6, pc}
 8013b5c:	6802      	ldr	r2, [r0, #0]
 8013b5e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013b62:	2300      	movs	r3, #0
 8013b64:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013b68:	e7f7      	b.n	8013b5a <_Balloc+0x66>
 8013b6a:	bf00      	nop
 8013b6c:	08014afd 	.word	0x08014afd
 8013b70:	08014b7d 	.word	0x08014b7d

08013b74 <_Bfree>:
 8013b74:	b570      	push	{r4, r5, r6, lr}
 8013b76:	69c6      	ldr	r6, [r0, #28]
 8013b78:	4605      	mov	r5, r0
 8013b7a:	460c      	mov	r4, r1
 8013b7c:	b976      	cbnz	r6, 8013b9c <_Bfree+0x28>
 8013b7e:	2010      	movs	r0, #16
 8013b80:	f7ff ff02 	bl	8013988 <malloc>
 8013b84:	4602      	mov	r2, r0
 8013b86:	61e8      	str	r0, [r5, #28]
 8013b88:	b920      	cbnz	r0, 8013b94 <_Bfree+0x20>
 8013b8a:	4b09      	ldr	r3, [pc, #36]	@ (8013bb0 <_Bfree+0x3c>)
 8013b8c:	4809      	ldr	r0, [pc, #36]	@ (8013bb4 <_Bfree+0x40>)
 8013b8e:	218f      	movs	r1, #143	@ 0x8f
 8013b90:	f000 fbfc 	bl	801438c <__assert_func>
 8013b94:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013b98:	6006      	str	r6, [r0, #0]
 8013b9a:	60c6      	str	r6, [r0, #12]
 8013b9c:	b13c      	cbz	r4, 8013bae <_Bfree+0x3a>
 8013b9e:	69eb      	ldr	r3, [r5, #28]
 8013ba0:	6862      	ldr	r2, [r4, #4]
 8013ba2:	68db      	ldr	r3, [r3, #12]
 8013ba4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013ba8:	6021      	str	r1, [r4, #0]
 8013baa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013bae:	bd70      	pop	{r4, r5, r6, pc}
 8013bb0:	08014afd 	.word	0x08014afd
 8013bb4:	08014b7d 	.word	0x08014b7d

08013bb8 <__multadd>:
 8013bb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bbc:	690d      	ldr	r5, [r1, #16]
 8013bbe:	4607      	mov	r7, r0
 8013bc0:	460c      	mov	r4, r1
 8013bc2:	461e      	mov	r6, r3
 8013bc4:	f101 0c14 	add.w	ip, r1, #20
 8013bc8:	2000      	movs	r0, #0
 8013bca:	f8dc 3000 	ldr.w	r3, [ip]
 8013bce:	b299      	uxth	r1, r3
 8013bd0:	fb02 6101 	mla	r1, r2, r1, r6
 8013bd4:	0c1e      	lsrs	r6, r3, #16
 8013bd6:	0c0b      	lsrs	r3, r1, #16
 8013bd8:	fb02 3306 	mla	r3, r2, r6, r3
 8013bdc:	b289      	uxth	r1, r1
 8013bde:	3001      	adds	r0, #1
 8013be0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013be4:	4285      	cmp	r5, r0
 8013be6:	f84c 1b04 	str.w	r1, [ip], #4
 8013bea:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013bee:	dcec      	bgt.n	8013bca <__multadd+0x12>
 8013bf0:	b30e      	cbz	r6, 8013c36 <__multadd+0x7e>
 8013bf2:	68a3      	ldr	r3, [r4, #8]
 8013bf4:	42ab      	cmp	r3, r5
 8013bf6:	dc19      	bgt.n	8013c2c <__multadd+0x74>
 8013bf8:	6861      	ldr	r1, [r4, #4]
 8013bfa:	4638      	mov	r0, r7
 8013bfc:	3101      	adds	r1, #1
 8013bfe:	f7ff ff79 	bl	8013af4 <_Balloc>
 8013c02:	4680      	mov	r8, r0
 8013c04:	b928      	cbnz	r0, 8013c12 <__multadd+0x5a>
 8013c06:	4602      	mov	r2, r0
 8013c08:	4b0c      	ldr	r3, [pc, #48]	@ (8013c3c <__multadd+0x84>)
 8013c0a:	480d      	ldr	r0, [pc, #52]	@ (8013c40 <__multadd+0x88>)
 8013c0c:	21ba      	movs	r1, #186	@ 0xba
 8013c0e:	f000 fbbd 	bl	801438c <__assert_func>
 8013c12:	6922      	ldr	r2, [r4, #16]
 8013c14:	3202      	adds	r2, #2
 8013c16:	f104 010c 	add.w	r1, r4, #12
 8013c1a:	0092      	lsls	r2, r2, #2
 8013c1c:	300c      	adds	r0, #12
 8013c1e:	f000 fba7 	bl	8014370 <memcpy>
 8013c22:	4621      	mov	r1, r4
 8013c24:	4638      	mov	r0, r7
 8013c26:	f7ff ffa5 	bl	8013b74 <_Bfree>
 8013c2a:	4644      	mov	r4, r8
 8013c2c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013c30:	3501      	adds	r5, #1
 8013c32:	615e      	str	r6, [r3, #20]
 8013c34:	6125      	str	r5, [r4, #16]
 8013c36:	4620      	mov	r0, r4
 8013c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c3c:	08014b6c 	.word	0x08014b6c
 8013c40:	08014b7d 	.word	0x08014b7d

08013c44 <__hi0bits>:
 8013c44:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8013c48:	4603      	mov	r3, r0
 8013c4a:	bf36      	itet	cc
 8013c4c:	0403      	lslcc	r3, r0, #16
 8013c4e:	2000      	movcs	r0, #0
 8013c50:	2010      	movcc	r0, #16
 8013c52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8013c56:	bf3c      	itt	cc
 8013c58:	021b      	lslcc	r3, r3, #8
 8013c5a:	3008      	addcc	r0, #8
 8013c5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8013c60:	bf3c      	itt	cc
 8013c62:	011b      	lslcc	r3, r3, #4
 8013c64:	3004      	addcc	r0, #4
 8013c66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8013c6a:	bf3c      	itt	cc
 8013c6c:	009b      	lslcc	r3, r3, #2
 8013c6e:	3002      	addcc	r0, #2
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	db05      	blt.n	8013c80 <__hi0bits+0x3c>
 8013c74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8013c78:	f100 0001 	add.w	r0, r0, #1
 8013c7c:	bf08      	it	eq
 8013c7e:	2020      	moveq	r0, #32
 8013c80:	4770      	bx	lr

08013c82 <__lo0bits>:
 8013c82:	6803      	ldr	r3, [r0, #0]
 8013c84:	4602      	mov	r2, r0
 8013c86:	f013 0007 	ands.w	r0, r3, #7
 8013c8a:	d00b      	beq.n	8013ca4 <__lo0bits+0x22>
 8013c8c:	07d9      	lsls	r1, r3, #31
 8013c8e:	d421      	bmi.n	8013cd4 <__lo0bits+0x52>
 8013c90:	0798      	lsls	r0, r3, #30
 8013c92:	bf49      	itett	mi
 8013c94:	085b      	lsrmi	r3, r3, #1
 8013c96:	089b      	lsrpl	r3, r3, #2
 8013c98:	2001      	movmi	r0, #1
 8013c9a:	6013      	strmi	r3, [r2, #0]
 8013c9c:	bf5c      	itt	pl
 8013c9e:	6013      	strpl	r3, [r2, #0]
 8013ca0:	2002      	movpl	r0, #2
 8013ca2:	4770      	bx	lr
 8013ca4:	b299      	uxth	r1, r3
 8013ca6:	b909      	cbnz	r1, 8013cac <__lo0bits+0x2a>
 8013ca8:	0c1b      	lsrs	r3, r3, #16
 8013caa:	2010      	movs	r0, #16
 8013cac:	b2d9      	uxtb	r1, r3
 8013cae:	b909      	cbnz	r1, 8013cb4 <__lo0bits+0x32>
 8013cb0:	3008      	adds	r0, #8
 8013cb2:	0a1b      	lsrs	r3, r3, #8
 8013cb4:	0719      	lsls	r1, r3, #28
 8013cb6:	bf04      	itt	eq
 8013cb8:	091b      	lsreq	r3, r3, #4
 8013cba:	3004      	addeq	r0, #4
 8013cbc:	0799      	lsls	r1, r3, #30
 8013cbe:	bf04      	itt	eq
 8013cc0:	089b      	lsreq	r3, r3, #2
 8013cc2:	3002      	addeq	r0, #2
 8013cc4:	07d9      	lsls	r1, r3, #31
 8013cc6:	d403      	bmi.n	8013cd0 <__lo0bits+0x4e>
 8013cc8:	085b      	lsrs	r3, r3, #1
 8013cca:	f100 0001 	add.w	r0, r0, #1
 8013cce:	d003      	beq.n	8013cd8 <__lo0bits+0x56>
 8013cd0:	6013      	str	r3, [r2, #0]
 8013cd2:	4770      	bx	lr
 8013cd4:	2000      	movs	r0, #0
 8013cd6:	4770      	bx	lr
 8013cd8:	2020      	movs	r0, #32
 8013cda:	4770      	bx	lr

08013cdc <__i2b>:
 8013cdc:	b510      	push	{r4, lr}
 8013cde:	460c      	mov	r4, r1
 8013ce0:	2101      	movs	r1, #1
 8013ce2:	f7ff ff07 	bl	8013af4 <_Balloc>
 8013ce6:	4602      	mov	r2, r0
 8013ce8:	b928      	cbnz	r0, 8013cf6 <__i2b+0x1a>
 8013cea:	4b05      	ldr	r3, [pc, #20]	@ (8013d00 <__i2b+0x24>)
 8013cec:	4805      	ldr	r0, [pc, #20]	@ (8013d04 <__i2b+0x28>)
 8013cee:	f240 1145 	movw	r1, #325	@ 0x145
 8013cf2:	f000 fb4b 	bl	801438c <__assert_func>
 8013cf6:	2301      	movs	r3, #1
 8013cf8:	6144      	str	r4, [r0, #20]
 8013cfa:	6103      	str	r3, [r0, #16]
 8013cfc:	bd10      	pop	{r4, pc}
 8013cfe:	bf00      	nop
 8013d00:	08014b6c 	.word	0x08014b6c
 8013d04:	08014b7d 	.word	0x08014b7d

08013d08 <__multiply>:
 8013d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d0c:	4614      	mov	r4, r2
 8013d0e:	690a      	ldr	r2, [r1, #16]
 8013d10:	6923      	ldr	r3, [r4, #16]
 8013d12:	429a      	cmp	r2, r3
 8013d14:	bfa8      	it	ge
 8013d16:	4623      	movge	r3, r4
 8013d18:	460f      	mov	r7, r1
 8013d1a:	bfa4      	itt	ge
 8013d1c:	460c      	movge	r4, r1
 8013d1e:	461f      	movge	r7, r3
 8013d20:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8013d24:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8013d28:	68a3      	ldr	r3, [r4, #8]
 8013d2a:	6861      	ldr	r1, [r4, #4]
 8013d2c:	eb0a 0609 	add.w	r6, sl, r9
 8013d30:	42b3      	cmp	r3, r6
 8013d32:	b085      	sub	sp, #20
 8013d34:	bfb8      	it	lt
 8013d36:	3101      	addlt	r1, #1
 8013d38:	f7ff fedc 	bl	8013af4 <_Balloc>
 8013d3c:	b930      	cbnz	r0, 8013d4c <__multiply+0x44>
 8013d3e:	4602      	mov	r2, r0
 8013d40:	4b44      	ldr	r3, [pc, #272]	@ (8013e54 <__multiply+0x14c>)
 8013d42:	4845      	ldr	r0, [pc, #276]	@ (8013e58 <__multiply+0x150>)
 8013d44:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8013d48:	f000 fb20 	bl	801438c <__assert_func>
 8013d4c:	f100 0514 	add.w	r5, r0, #20
 8013d50:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013d54:	462b      	mov	r3, r5
 8013d56:	2200      	movs	r2, #0
 8013d58:	4543      	cmp	r3, r8
 8013d5a:	d321      	bcc.n	8013da0 <__multiply+0x98>
 8013d5c:	f107 0114 	add.w	r1, r7, #20
 8013d60:	f104 0214 	add.w	r2, r4, #20
 8013d64:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8013d68:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8013d6c:	9302      	str	r3, [sp, #8]
 8013d6e:	1b13      	subs	r3, r2, r4
 8013d70:	3b15      	subs	r3, #21
 8013d72:	f023 0303 	bic.w	r3, r3, #3
 8013d76:	3304      	adds	r3, #4
 8013d78:	f104 0715 	add.w	r7, r4, #21
 8013d7c:	42ba      	cmp	r2, r7
 8013d7e:	bf38      	it	cc
 8013d80:	2304      	movcc	r3, #4
 8013d82:	9301      	str	r3, [sp, #4]
 8013d84:	9b02      	ldr	r3, [sp, #8]
 8013d86:	9103      	str	r1, [sp, #12]
 8013d88:	428b      	cmp	r3, r1
 8013d8a:	d80c      	bhi.n	8013da6 <__multiply+0x9e>
 8013d8c:	2e00      	cmp	r6, #0
 8013d8e:	dd03      	ble.n	8013d98 <__multiply+0x90>
 8013d90:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d05b      	beq.n	8013e50 <__multiply+0x148>
 8013d98:	6106      	str	r6, [r0, #16]
 8013d9a:	b005      	add	sp, #20
 8013d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013da0:	f843 2b04 	str.w	r2, [r3], #4
 8013da4:	e7d8      	b.n	8013d58 <__multiply+0x50>
 8013da6:	f8b1 a000 	ldrh.w	sl, [r1]
 8013daa:	f1ba 0f00 	cmp.w	sl, #0
 8013dae:	d024      	beq.n	8013dfa <__multiply+0xf2>
 8013db0:	f104 0e14 	add.w	lr, r4, #20
 8013db4:	46a9      	mov	r9, r5
 8013db6:	f04f 0c00 	mov.w	ip, #0
 8013dba:	f85e 7b04 	ldr.w	r7, [lr], #4
 8013dbe:	f8d9 3000 	ldr.w	r3, [r9]
 8013dc2:	fa1f fb87 	uxth.w	fp, r7
 8013dc6:	b29b      	uxth	r3, r3
 8013dc8:	fb0a 330b 	mla	r3, sl, fp, r3
 8013dcc:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8013dd0:	f8d9 7000 	ldr.w	r7, [r9]
 8013dd4:	4463      	add	r3, ip
 8013dd6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013dda:	fb0a c70b 	mla	r7, sl, fp, ip
 8013dde:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8013de2:	b29b      	uxth	r3, r3
 8013de4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013de8:	4572      	cmp	r2, lr
 8013dea:	f849 3b04 	str.w	r3, [r9], #4
 8013dee:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8013df2:	d8e2      	bhi.n	8013dba <__multiply+0xb2>
 8013df4:	9b01      	ldr	r3, [sp, #4]
 8013df6:	f845 c003 	str.w	ip, [r5, r3]
 8013dfa:	9b03      	ldr	r3, [sp, #12]
 8013dfc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8013e00:	3104      	adds	r1, #4
 8013e02:	f1b9 0f00 	cmp.w	r9, #0
 8013e06:	d021      	beq.n	8013e4c <__multiply+0x144>
 8013e08:	682b      	ldr	r3, [r5, #0]
 8013e0a:	f104 0c14 	add.w	ip, r4, #20
 8013e0e:	46ae      	mov	lr, r5
 8013e10:	f04f 0a00 	mov.w	sl, #0
 8013e14:	f8bc b000 	ldrh.w	fp, [ip]
 8013e18:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8013e1c:	fb09 770b 	mla	r7, r9, fp, r7
 8013e20:	4457      	add	r7, sl
 8013e22:	b29b      	uxth	r3, r3
 8013e24:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8013e28:	f84e 3b04 	str.w	r3, [lr], #4
 8013e2c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013e30:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013e34:	f8be 3000 	ldrh.w	r3, [lr]
 8013e38:	fb09 330a 	mla	r3, r9, sl, r3
 8013e3c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8013e40:	4562      	cmp	r2, ip
 8013e42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013e46:	d8e5      	bhi.n	8013e14 <__multiply+0x10c>
 8013e48:	9f01      	ldr	r7, [sp, #4]
 8013e4a:	51eb      	str	r3, [r5, r7]
 8013e4c:	3504      	adds	r5, #4
 8013e4e:	e799      	b.n	8013d84 <__multiply+0x7c>
 8013e50:	3e01      	subs	r6, #1
 8013e52:	e79b      	b.n	8013d8c <__multiply+0x84>
 8013e54:	08014b6c 	.word	0x08014b6c
 8013e58:	08014b7d 	.word	0x08014b7d

08013e5c <__pow5mult>:
 8013e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e60:	4615      	mov	r5, r2
 8013e62:	f012 0203 	ands.w	r2, r2, #3
 8013e66:	4607      	mov	r7, r0
 8013e68:	460e      	mov	r6, r1
 8013e6a:	d007      	beq.n	8013e7c <__pow5mult+0x20>
 8013e6c:	4c25      	ldr	r4, [pc, #148]	@ (8013f04 <__pow5mult+0xa8>)
 8013e6e:	3a01      	subs	r2, #1
 8013e70:	2300      	movs	r3, #0
 8013e72:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013e76:	f7ff fe9f 	bl	8013bb8 <__multadd>
 8013e7a:	4606      	mov	r6, r0
 8013e7c:	10ad      	asrs	r5, r5, #2
 8013e7e:	d03d      	beq.n	8013efc <__pow5mult+0xa0>
 8013e80:	69fc      	ldr	r4, [r7, #28]
 8013e82:	b97c      	cbnz	r4, 8013ea4 <__pow5mult+0x48>
 8013e84:	2010      	movs	r0, #16
 8013e86:	f7ff fd7f 	bl	8013988 <malloc>
 8013e8a:	4602      	mov	r2, r0
 8013e8c:	61f8      	str	r0, [r7, #28]
 8013e8e:	b928      	cbnz	r0, 8013e9c <__pow5mult+0x40>
 8013e90:	4b1d      	ldr	r3, [pc, #116]	@ (8013f08 <__pow5mult+0xac>)
 8013e92:	481e      	ldr	r0, [pc, #120]	@ (8013f0c <__pow5mult+0xb0>)
 8013e94:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8013e98:	f000 fa78 	bl	801438c <__assert_func>
 8013e9c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013ea0:	6004      	str	r4, [r0, #0]
 8013ea2:	60c4      	str	r4, [r0, #12]
 8013ea4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8013ea8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013eac:	b94c      	cbnz	r4, 8013ec2 <__pow5mult+0x66>
 8013eae:	f240 2171 	movw	r1, #625	@ 0x271
 8013eb2:	4638      	mov	r0, r7
 8013eb4:	f7ff ff12 	bl	8013cdc <__i2b>
 8013eb8:	2300      	movs	r3, #0
 8013eba:	f8c8 0008 	str.w	r0, [r8, #8]
 8013ebe:	4604      	mov	r4, r0
 8013ec0:	6003      	str	r3, [r0, #0]
 8013ec2:	f04f 0900 	mov.w	r9, #0
 8013ec6:	07eb      	lsls	r3, r5, #31
 8013ec8:	d50a      	bpl.n	8013ee0 <__pow5mult+0x84>
 8013eca:	4631      	mov	r1, r6
 8013ecc:	4622      	mov	r2, r4
 8013ece:	4638      	mov	r0, r7
 8013ed0:	f7ff ff1a 	bl	8013d08 <__multiply>
 8013ed4:	4631      	mov	r1, r6
 8013ed6:	4680      	mov	r8, r0
 8013ed8:	4638      	mov	r0, r7
 8013eda:	f7ff fe4b 	bl	8013b74 <_Bfree>
 8013ede:	4646      	mov	r6, r8
 8013ee0:	106d      	asrs	r5, r5, #1
 8013ee2:	d00b      	beq.n	8013efc <__pow5mult+0xa0>
 8013ee4:	6820      	ldr	r0, [r4, #0]
 8013ee6:	b938      	cbnz	r0, 8013ef8 <__pow5mult+0x9c>
 8013ee8:	4622      	mov	r2, r4
 8013eea:	4621      	mov	r1, r4
 8013eec:	4638      	mov	r0, r7
 8013eee:	f7ff ff0b 	bl	8013d08 <__multiply>
 8013ef2:	6020      	str	r0, [r4, #0]
 8013ef4:	f8c0 9000 	str.w	r9, [r0]
 8013ef8:	4604      	mov	r4, r0
 8013efa:	e7e4      	b.n	8013ec6 <__pow5mult+0x6a>
 8013efc:	4630      	mov	r0, r6
 8013efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f02:	bf00      	nop
 8013f04:	08014bd8 	.word	0x08014bd8
 8013f08:	08014afd 	.word	0x08014afd
 8013f0c:	08014b7d 	.word	0x08014b7d

08013f10 <__lshift>:
 8013f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f14:	460c      	mov	r4, r1
 8013f16:	6849      	ldr	r1, [r1, #4]
 8013f18:	6923      	ldr	r3, [r4, #16]
 8013f1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013f1e:	68a3      	ldr	r3, [r4, #8]
 8013f20:	4607      	mov	r7, r0
 8013f22:	4691      	mov	r9, r2
 8013f24:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013f28:	f108 0601 	add.w	r6, r8, #1
 8013f2c:	42b3      	cmp	r3, r6
 8013f2e:	db0b      	blt.n	8013f48 <__lshift+0x38>
 8013f30:	4638      	mov	r0, r7
 8013f32:	f7ff fddf 	bl	8013af4 <_Balloc>
 8013f36:	4605      	mov	r5, r0
 8013f38:	b948      	cbnz	r0, 8013f4e <__lshift+0x3e>
 8013f3a:	4602      	mov	r2, r0
 8013f3c:	4b28      	ldr	r3, [pc, #160]	@ (8013fe0 <__lshift+0xd0>)
 8013f3e:	4829      	ldr	r0, [pc, #164]	@ (8013fe4 <__lshift+0xd4>)
 8013f40:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8013f44:	f000 fa22 	bl	801438c <__assert_func>
 8013f48:	3101      	adds	r1, #1
 8013f4a:	005b      	lsls	r3, r3, #1
 8013f4c:	e7ee      	b.n	8013f2c <__lshift+0x1c>
 8013f4e:	2300      	movs	r3, #0
 8013f50:	f100 0114 	add.w	r1, r0, #20
 8013f54:	f100 0210 	add.w	r2, r0, #16
 8013f58:	4618      	mov	r0, r3
 8013f5a:	4553      	cmp	r3, sl
 8013f5c:	db33      	blt.n	8013fc6 <__lshift+0xb6>
 8013f5e:	6920      	ldr	r0, [r4, #16]
 8013f60:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013f64:	f104 0314 	add.w	r3, r4, #20
 8013f68:	f019 091f 	ands.w	r9, r9, #31
 8013f6c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013f70:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013f74:	d02b      	beq.n	8013fce <__lshift+0xbe>
 8013f76:	f1c9 0e20 	rsb	lr, r9, #32
 8013f7a:	468a      	mov	sl, r1
 8013f7c:	2200      	movs	r2, #0
 8013f7e:	6818      	ldr	r0, [r3, #0]
 8013f80:	fa00 f009 	lsl.w	r0, r0, r9
 8013f84:	4310      	orrs	r0, r2
 8013f86:	f84a 0b04 	str.w	r0, [sl], #4
 8013f8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013f8e:	459c      	cmp	ip, r3
 8013f90:	fa22 f20e 	lsr.w	r2, r2, lr
 8013f94:	d8f3      	bhi.n	8013f7e <__lshift+0x6e>
 8013f96:	ebac 0304 	sub.w	r3, ip, r4
 8013f9a:	3b15      	subs	r3, #21
 8013f9c:	f023 0303 	bic.w	r3, r3, #3
 8013fa0:	3304      	adds	r3, #4
 8013fa2:	f104 0015 	add.w	r0, r4, #21
 8013fa6:	4584      	cmp	ip, r0
 8013fa8:	bf38      	it	cc
 8013faa:	2304      	movcc	r3, #4
 8013fac:	50ca      	str	r2, [r1, r3]
 8013fae:	b10a      	cbz	r2, 8013fb4 <__lshift+0xa4>
 8013fb0:	f108 0602 	add.w	r6, r8, #2
 8013fb4:	3e01      	subs	r6, #1
 8013fb6:	4638      	mov	r0, r7
 8013fb8:	612e      	str	r6, [r5, #16]
 8013fba:	4621      	mov	r1, r4
 8013fbc:	f7ff fdda 	bl	8013b74 <_Bfree>
 8013fc0:	4628      	mov	r0, r5
 8013fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013fc6:	f842 0f04 	str.w	r0, [r2, #4]!
 8013fca:	3301      	adds	r3, #1
 8013fcc:	e7c5      	b.n	8013f5a <__lshift+0x4a>
 8013fce:	3904      	subs	r1, #4
 8013fd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8013fd4:	f841 2f04 	str.w	r2, [r1, #4]!
 8013fd8:	459c      	cmp	ip, r3
 8013fda:	d8f9      	bhi.n	8013fd0 <__lshift+0xc0>
 8013fdc:	e7ea      	b.n	8013fb4 <__lshift+0xa4>
 8013fde:	bf00      	nop
 8013fe0:	08014b6c 	.word	0x08014b6c
 8013fe4:	08014b7d 	.word	0x08014b7d

08013fe8 <__mcmp>:
 8013fe8:	690a      	ldr	r2, [r1, #16]
 8013fea:	4603      	mov	r3, r0
 8013fec:	6900      	ldr	r0, [r0, #16]
 8013fee:	1a80      	subs	r0, r0, r2
 8013ff0:	b530      	push	{r4, r5, lr}
 8013ff2:	d10e      	bne.n	8014012 <__mcmp+0x2a>
 8013ff4:	3314      	adds	r3, #20
 8013ff6:	3114      	adds	r1, #20
 8013ff8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8013ffc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8014000:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014004:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014008:	4295      	cmp	r5, r2
 801400a:	d003      	beq.n	8014014 <__mcmp+0x2c>
 801400c:	d205      	bcs.n	801401a <__mcmp+0x32>
 801400e:	f04f 30ff 	mov.w	r0, #4294967295
 8014012:	bd30      	pop	{r4, r5, pc}
 8014014:	42a3      	cmp	r3, r4
 8014016:	d3f3      	bcc.n	8014000 <__mcmp+0x18>
 8014018:	e7fb      	b.n	8014012 <__mcmp+0x2a>
 801401a:	2001      	movs	r0, #1
 801401c:	e7f9      	b.n	8014012 <__mcmp+0x2a>
	...

08014020 <__mdiff>:
 8014020:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014024:	4689      	mov	r9, r1
 8014026:	4606      	mov	r6, r0
 8014028:	4611      	mov	r1, r2
 801402a:	4648      	mov	r0, r9
 801402c:	4614      	mov	r4, r2
 801402e:	f7ff ffdb 	bl	8013fe8 <__mcmp>
 8014032:	1e05      	subs	r5, r0, #0
 8014034:	d112      	bne.n	801405c <__mdiff+0x3c>
 8014036:	4629      	mov	r1, r5
 8014038:	4630      	mov	r0, r6
 801403a:	f7ff fd5b 	bl	8013af4 <_Balloc>
 801403e:	4602      	mov	r2, r0
 8014040:	b928      	cbnz	r0, 801404e <__mdiff+0x2e>
 8014042:	4b3f      	ldr	r3, [pc, #252]	@ (8014140 <__mdiff+0x120>)
 8014044:	f240 2137 	movw	r1, #567	@ 0x237
 8014048:	483e      	ldr	r0, [pc, #248]	@ (8014144 <__mdiff+0x124>)
 801404a:	f000 f99f 	bl	801438c <__assert_func>
 801404e:	2301      	movs	r3, #1
 8014050:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8014054:	4610      	mov	r0, r2
 8014056:	b003      	add	sp, #12
 8014058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801405c:	bfbc      	itt	lt
 801405e:	464b      	movlt	r3, r9
 8014060:	46a1      	movlt	r9, r4
 8014062:	4630      	mov	r0, r6
 8014064:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8014068:	bfba      	itte	lt
 801406a:	461c      	movlt	r4, r3
 801406c:	2501      	movlt	r5, #1
 801406e:	2500      	movge	r5, #0
 8014070:	f7ff fd40 	bl	8013af4 <_Balloc>
 8014074:	4602      	mov	r2, r0
 8014076:	b918      	cbnz	r0, 8014080 <__mdiff+0x60>
 8014078:	4b31      	ldr	r3, [pc, #196]	@ (8014140 <__mdiff+0x120>)
 801407a:	f240 2145 	movw	r1, #581	@ 0x245
 801407e:	e7e3      	b.n	8014048 <__mdiff+0x28>
 8014080:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8014084:	6926      	ldr	r6, [r4, #16]
 8014086:	60c5      	str	r5, [r0, #12]
 8014088:	f109 0310 	add.w	r3, r9, #16
 801408c:	f109 0514 	add.w	r5, r9, #20
 8014090:	f104 0e14 	add.w	lr, r4, #20
 8014094:	f100 0b14 	add.w	fp, r0, #20
 8014098:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801409c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80140a0:	9301      	str	r3, [sp, #4]
 80140a2:	46d9      	mov	r9, fp
 80140a4:	f04f 0c00 	mov.w	ip, #0
 80140a8:	9b01      	ldr	r3, [sp, #4]
 80140aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80140ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 80140b2:	9301      	str	r3, [sp, #4]
 80140b4:	fa1f f38a 	uxth.w	r3, sl
 80140b8:	4619      	mov	r1, r3
 80140ba:	b283      	uxth	r3, r0
 80140bc:	1acb      	subs	r3, r1, r3
 80140be:	0c00      	lsrs	r0, r0, #16
 80140c0:	4463      	add	r3, ip
 80140c2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80140c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80140ca:	b29b      	uxth	r3, r3
 80140cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80140d0:	4576      	cmp	r6, lr
 80140d2:	f849 3b04 	str.w	r3, [r9], #4
 80140d6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80140da:	d8e5      	bhi.n	80140a8 <__mdiff+0x88>
 80140dc:	1b33      	subs	r3, r6, r4
 80140de:	3b15      	subs	r3, #21
 80140e0:	f023 0303 	bic.w	r3, r3, #3
 80140e4:	3415      	adds	r4, #21
 80140e6:	3304      	adds	r3, #4
 80140e8:	42a6      	cmp	r6, r4
 80140ea:	bf38      	it	cc
 80140ec:	2304      	movcc	r3, #4
 80140ee:	441d      	add	r5, r3
 80140f0:	445b      	add	r3, fp
 80140f2:	461e      	mov	r6, r3
 80140f4:	462c      	mov	r4, r5
 80140f6:	4544      	cmp	r4, r8
 80140f8:	d30e      	bcc.n	8014118 <__mdiff+0xf8>
 80140fa:	f108 0103 	add.w	r1, r8, #3
 80140fe:	1b49      	subs	r1, r1, r5
 8014100:	f021 0103 	bic.w	r1, r1, #3
 8014104:	3d03      	subs	r5, #3
 8014106:	45a8      	cmp	r8, r5
 8014108:	bf38      	it	cc
 801410a:	2100      	movcc	r1, #0
 801410c:	440b      	add	r3, r1
 801410e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8014112:	b191      	cbz	r1, 801413a <__mdiff+0x11a>
 8014114:	6117      	str	r7, [r2, #16]
 8014116:	e79d      	b.n	8014054 <__mdiff+0x34>
 8014118:	f854 1b04 	ldr.w	r1, [r4], #4
 801411c:	46e6      	mov	lr, ip
 801411e:	0c08      	lsrs	r0, r1, #16
 8014120:	fa1c fc81 	uxtah	ip, ip, r1
 8014124:	4471      	add	r1, lr
 8014126:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801412a:	b289      	uxth	r1, r1
 801412c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8014130:	f846 1b04 	str.w	r1, [r6], #4
 8014134:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014138:	e7dd      	b.n	80140f6 <__mdiff+0xd6>
 801413a:	3f01      	subs	r7, #1
 801413c:	e7e7      	b.n	801410e <__mdiff+0xee>
 801413e:	bf00      	nop
 8014140:	08014b6c 	.word	0x08014b6c
 8014144:	08014b7d 	.word	0x08014b7d

08014148 <__d2b>:
 8014148:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801414c:	460f      	mov	r7, r1
 801414e:	2101      	movs	r1, #1
 8014150:	ec59 8b10 	vmov	r8, r9, d0
 8014154:	4616      	mov	r6, r2
 8014156:	f7ff fccd 	bl	8013af4 <_Balloc>
 801415a:	4604      	mov	r4, r0
 801415c:	b930      	cbnz	r0, 801416c <__d2b+0x24>
 801415e:	4602      	mov	r2, r0
 8014160:	4b23      	ldr	r3, [pc, #140]	@ (80141f0 <__d2b+0xa8>)
 8014162:	4824      	ldr	r0, [pc, #144]	@ (80141f4 <__d2b+0xac>)
 8014164:	f240 310f 	movw	r1, #783	@ 0x30f
 8014168:	f000 f910 	bl	801438c <__assert_func>
 801416c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8014170:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8014174:	b10d      	cbz	r5, 801417a <__d2b+0x32>
 8014176:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801417a:	9301      	str	r3, [sp, #4]
 801417c:	f1b8 0300 	subs.w	r3, r8, #0
 8014180:	d023      	beq.n	80141ca <__d2b+0x82>
 8014182:	4668      	mov	r0, sp
 8014184:	9300      	str	r3, [sp, #0]
 8014186:	f7ff fd7c 	bl	8013c82 <__lo0bits>
 801418a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801418e:	b1d0      	cbz	r0, 80141c6 <__d2b+0x7e>
 8014190:	f1c0 0320 	rsb	r3, r0, #32
 8014194:	fa02 f303 	lsl.w	r3, r2, r3
 8014198:	430b      	orrs	r3, r1
 801419a:	40c2      	lsrs	r2, r0
 801419c:	6163      	str	r3, [r4, #20]
 801419e:	9201      	str	r2, [sp, #4]
 80141a0:	9b01      	ldr	r3, [sp, #4]
 80141a2:	61a3      	str	r3, [r4, #24]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	bf0c      	ite	eq
 80141a8:	2201      	moveq	r2, #1
 80141aa:	2202      	movne	r2, #2
 80141ac:	6122      	str	r2, [r4, #16]
 80141ae:	b1a5      	cbz	r5, 80141da <__d2b+0x92>
 80141b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80141b4:	4405      	add	r5, r0
 80141b6:	603d      	str	r5, [r7, #0]
 80141b8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80141bc:	6030      	str	r0, [r6, #0]
 80141be:	4620      	mov	r0, r4
 80141c0:	b003      	add	sp, #12
 80141c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141c6:	6161      	str	r1, [r4, #20]
 80141c8:	e7ea      	b.n	80141a0 <__d2b+0x58>
 80141ca:	a801      	add	r0, sp, #4
 80141cc:	f7ff fd59 	bl	8013c82 <__lo0bits>
 80141d0:	9b01      	ldr	r3, [sp, #4]
 80141d2:	6163      	str	r3, [r4, #20]
 80141d4:	3020      	adds	r0, #32
 80141d6:	2201      	movs	r2, #1
 80141d8:	e7e8      	b.n	80141ac <__d2b+0x64>
 80141da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80141de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80141e2:	6038      	str	r0, [r7, #0]
 80141e4:	6918      	ldr	r0, [r3, #16]
 80141e6:	f7ff fd2d 	bl	8013c44 <__hi0bits>
 80141ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80141ee:	e7e5      	b.n	80141bc <__d2b+0x74>
 80141f0:	08014b6c 	.word	0x08014b6c
 80141f4:	08014b7d 	.word	0x08014b7d

080141f8 <__sflush_r>:
 80141f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80141fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014200:	0716      	lsls	r6, r2, #28
 8014202:	4605      	mov	r5, r0
 8014204:	460c      	mov	r4, r1
 8014206:	d454      	bmi.n	80142b2 <__sflush_r+0xba>
 8014208:	684b      	ldr	r3, [r1, #4]
 801420a:	2b00      	cmp	r3, #0
 801420c:	dc02      	bgt.n	8014214 <__sflush_r+0x1c>
 801420e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014210:	2b00      	cmp	r3, #0
 8014212:	dd48      	ble.n	80142a6 <__sflush_r+0xae>
 8014214:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014216:	2e00      	cmp	r6, #0
 8014218:	d045      	beq.n	80142a6 <__sflush_r+0xae>
 801421a:	2300      	movs	r3, #0
 801421c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014220:	682f      	ldr	r7, [r5, #0]
 8014222:	6a21      	ldr	r1, [r4, #32]
 8014224:	602b      	str	r3, [r5, #0]
 8014226:	d030      	beq.n	801428a <__sflush_r+0x92>
 8014228:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801422a:	89a3      	ldrh	r3, [r4, #12]
 801422c:	0759      	lsls	r1, r3, #29
 801422e:	d505      	bpl.n	801423c <__sflush_r+0x44>
 8014230:	6863      	ldr	r3, [r4, #4]
 8014232:	1ad2      	subs	r2, r2, r3
 8014234:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8014236:	b10b      	cbz	r3, 801423c <__sflush_r+0x44>
 8014238:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801423a:	1ad2      	subs	r2, r2, r3
 801423c:	2300      	movs	r3, #0
 801423e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014240:	6a21      	ldr	r1, [r4, #32]
 8014242:	4628      	mov	r0, r5
 8014244:	47b0      	blx	r6
 8014246:	1c43      	adds	r3, r0, #1
 8014248:	89a3      	ldrh	r3, [r4, #12]
 801424a:	d106      	bne.n	801425a <__sflush_r+0x62>
 801424c:	6829      	ldr	r1, [r5, #0]
 801424e:	291d      	cmp	r1, #29
 8014250:	d82b      	bhi.n	80142aa <__sflush_r+0xb2>
 8014252:	4a2a      	ldr	r2, [pc, #168]	@ (80142fc <__sflush_r+0x104>)
 8014254:	410a      	asrs	r2, r1
 8014256:	07d6      	lsls	r6, r2, #31
 8014258:	d427      	bmi.n	80142aa <__sflush_r+0xb2>
 801425a:	2200      	movs	r2, #0
 801425c:	6062      	str	r2, [r4, #4]
 801425e:	04d9      	lsls	r1, r3, #19
 8014260:	6922      	ldr	r2, [r4, #16]
 8014262:	6022      	str	r2, [r4, #0]
 8014264:	d504      	bpl.n	8014270 <__sflush_r+0x78>
 8014266:	1c42      	adds	r2, r0, #1
 8014268:	d101      	bne.n	801426e <__sflush_r+0x76>
 801426a:	682b      	ldr	r3, [r5, #0]
 801426c:	b903      	cbnz	r3, 8014270 <__sflush_r+0x78>
 801426e:	6560      	str	r0, [r4, #84]	@ 0x54
 8014270:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014272:	602f      	str	r7, [r5, #0]
 8014274:	b1b9      	cbz	r1, 80142a6 <__sflush_r+0xae>
 8014276:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801427a:	4299      	cmp	r1, r3
 801427c:	d002      	beq.n	8014284 <__sflush_r+0x8c>
 801427e:	4628      	mov	r0, r5
 8014280:	f7ff fb38 	bl	80138f4 <_free_r>
 8014284:	2300      	movs	r3, #0
 8014286:	6363      	str	r3, [r4, #52]	@ 0x34
 8014288:	e00d      	b.n	80142a6 <__sflush_r+0xae>
 801428a:	2301      	movs	r3, #1
 801428c:	4628      	mov	r0, r5
 801428e:	47b0      	blx	r6
 8014290:	4602      	mov	r2, r0
 8014292:	1c50      	adds	r0, r2, #1
 8014294:	d1c9      	bne.n	801422a <__sflush_r+0x32>
 8014296:	682b      	ldr	r3, [r5, #0]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d0c6      	beq.n	801422a <__sflush_r+0x32>
 801429c:	2b1d      	cmp	r3, #29
 801429e:	d001      	beq.n	80142a4 <__sflush_r+0xac>
 80142a0:	2b16      	cmp	r3, #22
 80142a2:	d11e      	bne.n	80142e2 <__sflush_r+0xea>
 80142a4:	602f      	str	r7, [r5, #0]
 80142a6:	2000      	movs	r0, #0
 80142a8:	e022      	b.n	80142f0 <__sflush_r+0xf8>
 80142aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80142ae:	b21b      	sxth	r3, r3
 80142b0:	e01b      	b.n	80142ea <__sflush_r+0xf2>
 80142b2:	690f      	ldr	r7, [r1, #16]
 80142b4:	2f00      	cmp	r7, #0
 80142b6:	d0f6      	beq.n	80142a6 <__sflush_r+0xae>
 80142b8:	0793      	lsls	r3, r2, #30
 80142ba:	680e      	ldr	r6, [r1, #0]
 80142bc:	bf08      	it	eq
 80142be:	694b      	ldreq	r3, [r1, #20]
 80142c0:	600f      	str	r7, [r1, #0]
 80142c2:	bf18      	it	ne
 80142c4:	2300      	movne	r3, #0
 80142c6:	eba6 0807 	sub.w	r8, r6, r7
 80142ca:	608b      	str	r3, [r1, #8]
 80142cc:	f1b8 0f00 	cmp.w	r8, #0
 80142d0:	dde9      	ble.n	80142a6 <__sflush_r+0xae>
 80142d2:	6a21      	ldr	r1, [r4, #32]
 80142d4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80142d6:	4643      	mov	r3, r8
 80142d8:	463a      	mov	r2, r7
 80142da:	4628      	mov	r0, r5
 80142dc:	47b0      	blx	r6
 80142de:	2800      	cmp	r0, #0
 80142e0:	dc08      	bgt.n	80142f4 <__sflush_r+0xfc>
 80142e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80142e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80142ea:	81a3      	strh	r3, [r4, #12]
 80142ec:	f04f 30ff 	mov.w	r0, #4294967295
 80142f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142f4:	4407      	add	r7, r0
 80142f6:	eba8 0800 	sub.w	r8, r8, r0
 80142fa:	e7e7      	b.n	80142cc <__sflush_r+0xd4>
 80142fc:	dfbffffe 	.word	0xdfbffffe

08014300 <_fflush_r>:
 8014300:	b538      	push	{r3, r4, r5, lr}
 8014302:	690b      	ldr	r3, [r1, #16]
 8014304:	4605      	mov	r5, r0
 8014306:	460c      	mov	r4, r1
 8014308:	b913      	cbnz	r3, 8014310 <_fflush_r+0x10>
 801430a:	2500      	movs	r5, #0
 801430c:	4628      	mov	r0, r5
 801430e:	bd38      	pop	{r3, r4, r5, pc}
 8014310:	b118      	cbz	r0, 801431a <_fflush_r+0x1a>
 8014312:	6a03      	ldr	r3, [r0, #32]
 8014314:	b90b      	cbnz	r3, 801431a <_fflush_r+0x1a>
 8014316:	f7fe fc13 	bl	8012b40 <__sinit>
 801431a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d0f3      	beq.n	801430a <_fflush_r+0xa>
 8014322:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8014324:	07d0      	lsls	r0, r2, #31
 8014326:	d404      	bmi.n	8014332 <_fflush_r+0x32>
 8014328:	0599      	lsls	r1, r3, #22
 801432a:	d402      	bmi.n	8014332 <_fflush_r+0x32>
 801432c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801432e:	f7fe fcfe 	bl	8012d2e <__retarget_lock_acquire_recursive>
 8014332:	4628      	mov	r0, r5
 8014334:	4621      	mov	r1, r4
 8014336:	f7ff ff5f 	bl	80141f8 <__sflush_r>
 801433a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801433c:	07da      	lsls	r2, r3, #31
 801433e:	4605      	mov	r5, r0
 8014340:	d4e4      	bmi.n	801430c <_fflush_r+0xc>
 8014342:	89a3      	ldrh	r3, [r4, #12]
 8014344:	059b      	lsls	r3, r3, #22
 8014346:	d4e1      	bmi.n	801430c <_fflush_r+0xc>
 8014348:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801434a:	f7fe fcf1 	bl	8012d30 <__retarget_lock_release_recursive>
 801434e:	e7dd      	b.n	801430c <_fflush_r+0xc>

08014350 <_sbrk_r>:
 8014350:	b538      	push	{r3, r4, r5, lr}
 8014352:	4d06      	ldr	r5, [pc, #24]	@ (801436c <_sbrk_r+0x1c>)
 8014354:	2300      	movs	r3, #0
 8014356:	4604      	mov	r4, r0
 8014358:	4608      	mov	r0, r1
 801435a:	602b      	str	r3, [r5, #0]
 801435c:	f7ed faf0 	bl	8001940 <_sbrk>
 8014360:	1c43      	adds	r3, r0, #1
 8014362:	d102      	bne.n	801436a <_sbrk_r+0x1a>
 8014364:	682b      	ldr	r3, [r5, #0]
 8014366:	b103      	cbz	r3, 801436a <_sbrk_r+0x1a>
 8014368:	6023      	str	r3, [r4, #0]
 801436a:	bd38      	pop	{r3, r4, r5, pc}
 801436c:	24002720 	.word	0x24002720

08014370 <memcpy>:
 8014370:	440a      	add	r2, r1
 8014372:	4291      	cmp	r1, r2
 8014374:	f100 33ff 	add.w	r3, r0, #4294967295
 8014378:	d100      	bne.n	801437c <memcpy+0xc>
 801437a:	4770      	bx	lr
 801437c:	b510      	push	{r4, lr}
 801437e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014382:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014386:	4291      	cmp	r1, r2
 8014388:	d1f9      	bne.n	801437e <memcpy+0xe>
 801438a:	bd10      	pop	{r4, pc}

0801438c <__assert_func>:
 801438c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801438e:	4614      	mov	r4, r2
 8014390:	461a      	mov	r2, r3
 8014392:	4b09      	ldr	r3, [pc, #36]	@ (80143b8 <__assert_func+0x2c>)
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	4605      	mov	r5, r0
 8014398:	68d8      	ldr	r0, [r3, #12]
 801439a:	b954      	cbnz	r4, 80143b2 <__assert_func+0x26>
 801439c:	4b07      	ldr	r3, [pc, #28]	@ (80143bc <__assert_func+0x30>)
 801439e:	461c      	mov	r4, r3
 80143a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80143a4:	9100      	str	r1, [sp, #0]
 80143a6:	462b      	mov	r3, r5
 80143a8:	4905      	ldr	r1, [pc, #20]	@ (80143c0 <__assert_func+0x34>)
 80143aa:	f000 f841 	bl	8014430 <fiprintf>
 80143ae:	f000 f851 	bl	8014454 <abort>
 80143b2:	4b04      	ldr	r3, [pc, #16]	@ (80143c4 <__assert_func+0x38>)
 80143b4:	e7f4      	b.n	80143a0 <__assert_func+0x14>
 80143b6:	bf00      	nop
 80143b8:	24000138 	.word	0x24000138
 80143bc:	08014d1d 	.word	0x08014d1d
 80143c0:	08014cef 	.word	0x08014cef
 80143c4:	08014ce2 	.word	0x08014ce2

080143c8 <_calloc_r>:
 80143c8:	b570      	push	{r4, r5, r6, lr}
 80143ca:	fba1 5402 	umull	r5, r4, r1, r2
 80143ce:	b93c      	cbnz	r4, 80143e0 <_calloc_r+0x18>
 80143d0:	4629      	mov	r1, r5
 80143d2:	f7ff fb03 	bl	80139dc <_malloc_r>
 80143d6:	4606      	mov	r6, r0
 80143d8:	b928      	cbnz	r0, 80143e6 <_calloc_r+0x1e>
 80143da:	2600      	movs	r6, #0
 80143dc:	4630      	mov	r0, r6
 80143de:	bd70      	pop	{r4, r5, r6, pc}
 80143e0:	220c      	movs	r2, #12
 80143e2:	6002      	str	r2, [r0, #0]
 80143e4:	e7f9      	b.n	80143da <_calloc_r+0x12>
 80143e6:	462a      	mov	r2, r5
 80143e8:	4621      	mov	r1, r4
 80143ea:	f7fe fc22 	bl	8012c32 <memset>
 80143ee:	e7f5      	b.n	80143dc <_calloc_r+0x14>

080143f0 <__ascii_mbtowc>:
 80143f0:	b082      	sub	sp, #8
 80143f2:	b901      	cbnz	r1, 80143f6 <__ascii_mbtowc+0x6>
 80143f4:	a901      	add	r1, sp, #4
 80143f6:	b142      	cbz	r2, 801440a <__ascii_mbtowc+0x1a>
 80143f8:	b14b      	cbz	r3, 801440e <__ascii_mbtowc+0x1e>
 80143fa:	7813      	ldrb	r3, [r2, #0]
 80143fc:	600b      	str	r3, [r1, #0]
 80143fe:	7812      	ldrb	r2, [r2, #0]
 8014400:	1e10      	subs	r0, r2, #0
 8014402:	bf18      	it	ne
 8014404:	2001      	movne	r0, #1
 8014406:	b002      	add	sp, #8
 8014408:	4770      	bx	lr
 801440a:	4610      	mov	r0, r2
 801440c:	e7fb      	b.n	8014406 <__ascii_mbtowc+0x16>
 801440e:	f06f 0001 	mvn.w	r0, #1
 8014412:	e7f8      	b.n	8014406 <__ascii_mbtowc+0x16>

08014414 <__ascii_wctomb>:
 8014414:	4603      	mov	r3, r0
 8014416:	4608      	mov	r0, r1
 8014418:	b141      	cbz	r1, 801442c <__ascii_wctomb+0x18>
 801441a:	2aff      	cmp	r2, #255	@ 0xff
 801441c:	d904      	bls.n	8014428 <__ascii_wctomb+0x14>
 801441e:	228a      	movs	r2, #138	@ 0x8a
 8014420:	601a      	str	r2, [r3, #0]
 8014422:	f04f 30ff 	mov.w	r0, #4294967295
 8014426:	4770      	bx	lr
 8014428:	700a      	strb	r2, [r1, #0]
 801442a:	2001      	movs	r0, #1
 801442c:	4770      	bx	lr
	...

08014430 <fiprintf>:
 8014430:	b40e      	push	{r1, r2, r3}
 8014432:	b503      	push	{r0, r1, lr}
 8014434:	4601      	mov	r1, r0
 8014436:	ab03      	add	r3, sp, #12
 8014438:	4805      	ldr	r0, [pc, #20]	@ (8014450 <fiprintf+0x20>)
 801443a:	f853 2b04 	ldr.w	r2, [r3], #4
 801443e:	6800      	ldr	r0, [r0, #0]
 8014440:	9301      	str	r3, [sp, #4]
 8014442:	f000 f837 	bl	80144b4 <_vfiprintf_r>
 8014446:	b002      	add	sp, #8
 8014448:	f85d eb04 	ldr.w	lr, [sp], #4
 801444c:	b003      	add	sp, #12
 801444e:	4770      	bx	lr
 8014450:	24000138 	.word	0x24000138

08014454 <abort>:
 8014454:	b508      	push	{r3, lr}
 8014456:	2006      	movs	r0, #6
 8014458:	f000 fa00 	bl	801485c <raise>
 801445c:	2001      	movs	r0, #1
 801445e:	f7ed f9f7 	bl	8001850 <_exit>

08014462 <__sfputc_r>:
 8014462:	6893      	ldr	r3, [r2, #8]
 8014464:	3b01      	subs	r3, #1
 8014466:	2b00      	cmp	r3, #0
 8014468:	b410      	push	{r4}
 801446a:	6093      	str	r3, [r2, #8]
 801446c:	da08      	bge.n	8014480 <__sfputc_r+0x1e>
 801446e:	6994      	ldr	r4, [r2, #24]
 8014470:	42a3      	cmp	r3, r4
 8014472:	db01      	blt.n	8014478 <__sfputc_r+0x16>
 8014474:	290a      	cmp	r1, #10
 8014476:	d103      	bne.n	8014480 <__sfputc_r+0x1e>
 8014478:	f85d 4b04 	ldr.w	r4, [sp], #4
 801447c:	f000 b932 	b.w	80146e4 <__swbuf_r>
 8014480:	6813      	ldr	r3, [r2, #0]
 8014482:	1c58      	adds	r0, r3, #1
 8014484:	6010      	str	r0, [r2, #0]
 8014486:	7019      	strb	r1, [r3, #0]
 8014488:	4608      	mov	r0, r1
 801448a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801448e:	4770      	bx	lr

08014490 <__sfputs_r>:
 8014490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014492:	4606      	mov	r6, r0
 8014494:	460f      	mov	r7, r1
 8014496:	4614      	mov	r4, r2
 8014498:	18d5      	adds	r5, r2, r3
 801449a:	42ac      	cmp	r4, r5
 801449c:	d101      	bne.n	80144a2 <__sfputs_r+0x12>
 801449e:	2000      	movs	r0, #0
 80144a0:	e007      	b.n	80144b2 <__sfputs_r+0x22>
 80144a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144a6:	463a      	mov	r2, r7
 80144a8:	4630      	mov	r0, r6
 80144aa:	f7ff ffda 	bl	8014462 <__sfputc_r>
 80144ae:	1c43      	adds	r3, r0, #1
 80144b0:	d1f3      	bne.n	801449a <__sfputs_r+0xa>
 80144b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080144b4 <_vfiprintf_r>:
 80144b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80144b8:	460d      	mov	r5, r1
 80144ba:	b09d      	sub	sp, #116	@ 0x74
 80144bc:	4614      	mov	r4, r2
 80144be:	4698      	mov	r8, r3
 80144c0:	4606      	mov	r6, r0
 80144c2:	b118      	cbz	r0, 80144cc <_vfiprintf_r+0x18>
 80144c4:	6a03      	ldr	r3, [r0, #32]
 80144c6:	b90b      	cbnz	r3, 80144cc <_vfiprintf_r+0x18>
 80144c8:	f7fe fb3a 	bl	8012b40 <__sinit>
 80144cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80144ce:	07d9      	lsls	r1, r3, #31
 80144d0:	d405      	bmi.n	80144de <_vfiprintf_r+0x2a>
 80144d2:	89ab      	ldrh	r3, [r5, #12]
 80144d4:	059a      	lsls	r2, r3, #22
 80144d6:	d402      	bmi.n	80144de <_vfiprintf_r+0x2a>
 80144d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80144da:	f7fe fc28 	bl	8012d2e <__retarget_lock_acquire_recursive>
 80144de:	89ab      	ldrh	r3, [r5, #12]
 80144e0:	071b      	lsls	r3, r3, #28
 80144e2:	d501      	bpl.n	80144e8 <_vfiprintf_r+0x34>
 80144e4:	692b      	ldr	r3, [r5, #16]
 80144e6:	b99b      	cbnz	r3, 8014510 <_vfiprintf_r+0x5c>
 80144e8:	4629      	mov	r1, r5
 80144ea:	4630      	mov	r0, r6
 80144ec:	f000 f938 	bl	8014760 <__swsetup_r>
 80144f0:	b170      	cbz	r0, 8014510 <_vfiprintf_r+0x5c>
 80144f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80144f4:	07dc      	lsls	r4, r3, #31
 80144f6:	d504      	bpl.n	8014502 <_vfiprintf_r+0x4e>
 80144f8:	f04f 30ff 	mov.w	r0, #4294967295
 80144fc:	b01d      	add	sp, #116	@ 0x74
 80144fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014502:	89ab      	ldrh	r3, [r5, #12]
 8014504:	0598      	lsls	r0, r3, #22
 8014506:	d4f7      	bmi.n	80144f8 <_vfiprintf_r+0x44>
 8014508:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801450a:	f7fe fc11 	bl	8012d30 <__retarget_lock_release_recursive>
 801450e:	e7f3      	b.n	80144f8 <_vfiprintf_r+0x44>
 8014510:	2300      	movs	r3, #0
 8014512:	9309      	str	r3, [sp, #36]	@ 0x24
 8014514:	2320      	movs	r3, #32
 8014516:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801451a:	f8cd 800c 	str.w	r8, [sp, #12]
 801451e:	2330      	movs	r3, #48	@ 0x30
 8014520:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80146d0 <_vfiprintf_r+0x21c>
 8014524:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014528:	f04f 0901 	mov.w	r9, #1
 801452c:	4623      	mov	r3, r4
 801452e:	469a      	mov	sl, r3
 8014530:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014534:	b10a      	cbz	r2, 801453a <_vfiprintf_r+0x86>
 8014536:	2a25      	cmp	r2, #37	@ 0x25
 8014538:	d1f9      	bne.n	801452e <_vfiprintf_r+0x7a>
 801453a:	ebba 0b04 	subs.w	fp, sl, r4
 801453e:	d00b      	beq.n	8014558 <_vfiprintf_r+0xa4>
 8014540:	465b      	mov	r3, fp
 8014542:	4622      	mov	r2, r4
 8014544:	4629      	mov	r1, r5
 8014546:	4630      	mov	r0, r6
 8014548:	f7ff ffa2 	bl	8014490 <__sfputs_r>
 801454c:	3001      	adds	r0, #1
 801454e:	f000 80a7 	beq.w	80146a0 <_vfiprintf_r+0x1ec>
 8014552:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014554:	445a      	add	r2, fp
 8014556:	9209      	str	r2, [sp, #36]	@ 0x24
 8014558:	f89a 3000 	ldrb.w	r3, [sl]
 801455c:	2b00      	cmp	r3, #0
 801455e:	f000 809f 	beq.w	80146a0 <_vfiprintf_r+0x1ec>
 8014562:	2300      	movs	r3, #0
 8014564:	f04f 32ff 	mov.w	r2, #4294967295
 8014568:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801456c:	f10a 0a01 	add.w	sl, sl, #1
 8014570:	9304      	str	r3, [sp, #16]
 8014572:	9307      	str	r3, [sp, #28]
 8014574:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014578:	931a      	str	r3, [sp, #104]	@ 0x68
 801457a:	4654      	mov	r4, sl
 801457c:	2205      	movs	r2, #5
 801457e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014582:	4853      	ldr	r0, [pc, #332]	@ (80146d0 <_vfiprintf_r+0x21c>)
 8014584:	f7eb feac 	bl	80002e0 <memchr>
 8014588:	9a04      	ldr	r2, [sp, #16]
 801458a:	b9d8      	cbnz	r0, 80145c4 <_vfiprintf_r+0x110>
 801458c:	06d1      	lsls	r1, r2, #27
 801458e:	bf44      	itt	mi
 8014590:	2320      	movmi	r3, #32
 8014592:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014596:	0713      	lsls	r3, r2, #28
 8014598:	bf44      	itt	mi
 801459a:	232b      	movmi	r3, #43	@ 0x2b
 801459c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80145a0:	f89a 3000 	ldrb.w	r3, [sl]
 80145a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80145a6:	d015      	beq.n	80145d4 <_vfiprintf_r+0x120>
 80145a8:	9a07      	ldr	r2, [sp, #28]
 80145aa:	4654      	mov	r4, sl
 80145ac:	2000      	movs	r0, #0
 80145ae:	f04f 0c0a 	mov.w	ip, #10
 80145b2:	4621      	mov	r1, r4
 80145b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80145b8:	3b30      	subs	r3, #48	@ 0x30
 80145ba:	2b09      	cmp	r3, #9
 80145bc:	d94b      	bls.n	8014656 <_vfiprintf_r+0x1a2>
 80145be:	b1b0      	cbz	r0, 80145ee <_vfiprintf_r+0x13a>
 80145c0:	9207      	str	r2, [sp, #28]
 80145c2:	e014      	b.n	80145ee <_vfiprintf_r+0x13a>
 80145c4:	eba0 0308 	sub.w	r3, r0, r8
 80145c8:	fa09 f303 	lsl.w	r3, r9, r3
 80145cc:	4313      	orrs	r3, r2
 80145ce:	9304      	str	r3, [sp, #16]
 80145d0:	46a2      	mov	sl, r4
 80145d2:	e7d2      	b.n	801457a <_vfiprintf_r+0xc6>
 80145d4:	9b03      	ldr	r3, [sp, #12]
 80145d6:	1d19      	adds	r1, r3, #4
 80145d8:	681b      	ldr	r3, [r3, #0]
 80145da:	9103      	str	r1, [sp, #12]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	bfbb      	ittet	lt
 80145e0:	425b      	neglt	r3, r3
 80145e2:	f042 0202 	orrlt.w	r2, r2, #2
 80145e6:	9307      	strge	r3, [sp, #28]
 80145e8:	9307      	strlt	r3, [sp, #28]
 80145ea:	bfb8      	it	lt
 80145ec:	9204      	strlt	r2, [sp, #16]
 80145ee:	7823      	ldrb	r3, [r4, #0]
 80145f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80145f2:	d10a      	bne.n	801460a <_vfiprintf_r+0x156>
 80145f4:	7863      	ldrb	r3, [r4, #1]
 80145f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80145f8:	d132      	bne.n	8014660 <_vfiprintf_r+0x1ac>
 80145fa:	9b03      	ldr	r3, [sp, #12]
 80145fc:	1d1a      	adds	r2, r3, #4
 80145fe:	681b      	ldr	r3, [r3, #0]
 8014600:	9203      	str	r2, [sp, #12]
 8014602:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014606:	3402      	adds	r4, #2
 8014608:	9305      	str	r3, [sp, #20]
 801460a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80146e0 <_vfiprintf_r+0x22c>
 801460e:	7821      	ldrb	r1, [r4, #0]
 8014610:	2203      	movs	r2, #3
 8014612:	4650      	mov	r0, sl
 8014614:	f7eb fe64 	bl	80002e0 <memchr>
 8014618:	b138      	cbz	r0, 801462a <_vfiprintf_r+0x176>
 801461a:	9b04      	ldr	r3, [sp, #16]
 801461c:	eba0 000a 	sub.w	r0, r0, sl
 8014620:	2240      	movs	r2, #64	@ 0x40
 8014622:	4082      	lsls	r2, r0
 8014624:	4313      	orrs	r3, r2
 8014626:	3401      	adds	r4, #1
 8014628:	9304      	str	r3, [sp, #16]
 801462a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801462e:	4829      	ldr	r0, [pc, #164]	@ (80146d4 <_vfiprintf_r+0x220>)
 8014630:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014634:	2206      	movs	r2, #6
 8014636:	f7eb fe53 	bl	80002e0 <memchr>
 801463a:	2800      	cmp	r0, #0
 801463c:	d03f      	beq.n	80146be <_vfiprintf_r+0x20a>
 801463e:	4b26      	ldr	r3, [pc, #152]	@ (80146d8 <_vfiprintf_r+0x224>)
 8014640:	bb1b      	cbnz	r3, 801468a <_vfiprintf_r+0x1d6>
 8014642:	9b03      	ldr	r3, [sp, #12]
 8014644:	3307      	adds	r3, #7
 8014646:	f023 0307 	bic.w	r3, r3, #7
 801464a:	3308      	adds	r3, #8
 801464c:	9303      	str	r3, [sp, #12]
 801464e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014650:	443b      	add	r3, r7
 8014652:	9309      	str	r3, [sp, #36]	@ 0x24
 8014654:	e76a      	b.n	801452c <_vfiprintf_r+0x78>
 8014656:	fb0c 3202 	mla	r2, ip, r2, r3
 801465a:	460c      	mov	r4, r1
 801465c:	2001      	movs	r0, #1
 801465e:	e7a8      	b.n	80145b2 <_vfiprintf_r+0xfe>
 8014660:	2300      	movs	r3, #0
 8014662:	3401      	adds	r4, #1
 8014664:	9305      	str	r3, [sp, #20]
 8014666:	4619      	mov	r1, r3
 8014668:	f04f 0c0a 	mov.w	ip, #10
 801466c:	4620      	mov	r0, r4
 801466e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014672:	3a30      	subs	r2, #48	@ 0x30
 8014674:	2a09      	cmp	r2, #9
 8014676:	d903      	bls.n	8014680 <_vfiprintf_r+0x1cc>
 8014678:	2b00      	cmp	r3, #0
 801467a:	d0c6      	beq.n	801460a <_vfiprintf_r+0x156>
 801467c:	9105      	str	r1, [sp, #20]
 801467e:	e7c4      	b.n	801460a <_vfiprintf_r+0x156>
 8014680:	fb0c 2101 	mla	r1, ip, r1, r2
 8014684:	4604      	mov	r4, r0
 8014686:	2301      	movs	r3, #1
 8014688:	e7f0      	b.n	801466c <_vfiprintf_r+0x1b8>
 801468a:	ab03      	add	r3, sp, #12
 801468c:	9300      	str	r3, [sp, #0]
 801468e:	462a      	mov	r2, r5
 8014690:	4b12      	ldr	r3, [pc, #72]	@ (80146dc <_vfiprintf_r+0x228>)
 8014692:	a904      	add	r1, sp, #16
 8014694:	4630      	mov	r0, r6
 8014696:	f7fd fe1f 	bl	80122d8 <_printf_float>
 801469a:	4607      	mov	r7, r0
 801469c:	1c78      	adds	r0, r7, #1
 801469e:	d1d6      	bne.n	801464e <_vfiprintf_r+0x19a>
 80146a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80146a2:	07d9      	lsls	r1, r3, #31
 80146a4:	d405      	bmi.n	80146b2 <_vfiprintf_r+0x1fe>
 80146a6:	89ab      	ldrh	r3, [r5, #12]
 80146a8:	059a      	lsls	r2, r3, #22
 80146aa:	d402      	bmi.n	80146b2 <_vfiprintf_r+0x1fe>
 80146ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80146ae:	f7fe fb3f 	bl	8012d30 <__retarget_lock_release_recursive>
 80146b2:	89ab      	ldrh	r3, [r5, #12]
 80146b4:	065b      	lsls	r3, r3, #25
 80146b6:	f53f af1f 	bmi.w	80144f8 <_vfiprintf_r+0x44>
 80146ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80146bc:	e71e      	b.n	80144fc <_vfiprintf_r+0x48>
 80146be:	ab03      	add	r3, sp, #12
 80146c0:	9300      	str	r3, [sp, #0]
 80146c2:	462a      	mov	r2, r5
 80146c4:	4b05      	ldr	r3, [pc, #20]	@ (80146dc <_vfiprintf_r+0x228>)
 80146c6:	a904      	add	r1, sp, #16
 80146c8:	4630      	mov	r0, r6
 80146ca:	f7fe f88d 	bl	80127e8 <_printf_i>
 80146ce:	e7e4      	b.n	801469a <_vfiprintf_r+0x1e6>
 80146d0:	08014e1f 	.word	0x08014e1f
 80146d4:	08014e29 	.word	0x08014e29
 80146d8:	080122d9 	.word	0x080122d9
 80146dc:	08014491 	.word	0x08014491
 80146e0:	08014e25 	.word	0x08014e25

080146e4 <__swbuf_r>:
 80146e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146e6:	460e      	mov	r6, r1
 80146e8:	4614      	mov	r4, r2
 80146ea:	4605      	mov	r5, r0
 80146ec:	b118      	cbz	r0, 80146f6 <__swbuf_r+0x12>
 80146ee:	6a03      	ldr	r3, [r0, #32]
 80146f0:	b90b      	cbnz	r3, 80146f6 <__swbuf_r+0x12>
 80146f2:	f7fe fa25 	bl	8012b40 <__sinit>
 80146f6:	69a3      	ldr	r3, [r4, #24]
 80146f8:	60a3      	str	r3, [r4, #8]
 80146fa:	89a3      	ldrh	r3, [r4, #12]
 80146fc:	071a      	lsls	r2, r3, #28
 80146fe:	d501      	bpl.n	8014704 <__swbuf_r+0x20>
 8014700:	6923      	ldr	r3, [r4, #16]
 8014702:	b943      	cbnz	r3, 8014716 <__swbuf_r+0x32>
 8014704:	4621      	mov	r1, r4
 8014706:	4628      	mov	r0, r5
 8014708:	f000 f82a 	bl	8014760 <__swsetup_r>
 801470c:	b118      	cbz	r0, 8014716 <__swbuf_r+0x32>
 801470e:	f04f 37ff 	mov.w	r7, #4294967295
 8014712:	4638      	mov	r0, r7
 8014714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014716:	6823      	ldr	r3, [r4, #0]
 8014718:	6922      	ldr	r2, [r4, #16]
 801471a:	1a98      	subs	r0, r3, r2
 801471c:	6963      	ldr	r3, [r4, #20]
 801471e:	b2f6      	uxtb	r6, r6
 8014720:	4283      	cmp	r3, r0
 8014722:	4637      	mov	r7, r6
 8014724:	dc05      	bgt.n	8014732 <__swbuf_r+0x4e>
 8014726:	4621      	mov	r1, r4
 8014728:	4628      	mov	r0, r5
 801472a:	f7ff fde9 	bl	8014300 <_fflush_r>
 801472e:	2800      	cmp	r0, #0
 8014730:	d1ed      	bne.n	801470e <__swbuf_r+0x2a>
 8014732:	68a3      	ldr	r3, [r4, #8]
 8014734:	3b01      	subs	r3, #1
 8014736:	60a3      	str	r3, [r4, #8]
 8014738:	6823      	ldr	r3, [r4, #0]
 801473a:	1c5a      	adds	r2, r3, #1
 801473c:	6022      	str	r2, [r4, #0]
 801473e:	701e      	strb	r6, [r3, #0]
 8014740:	6962      	ldr	r2, [r4, #20]
 8014742:	1c43      	adds	r3, r0, #1
 8014744:	429a      	cmp	r2, r3
 8014746:	d004      	beq.n	8014752 <__swbuf_r+0x6e>
 8014748:	89a3      	ldrh	r3, [r4, #12]
 801474a:	07db      	lsls	r3, r3, #31
 801474c:	d5e1      	bpl.n	8014712 <__swbuf_r+0x2e>
 801474e:	2e0a      	cmp	r6, #10
 8014750:	d1df      	bne.n	8014712 <__swbuf_r+0x2e>
 8014752:	4621      	mov	r1, r4
 8014754:	4628      	mov	r0, r5
 8014756:	f7ff fdd3 	bl	8014300 <_fflush_r>
 801475a:	2800      	cmp	r0, #0
 801475c:	d0d9      	beq.n	8014712 <__swbuf_r+0x2e>
 801475e:	e7d6      	b.n	801470e <__swbuf_r+0x2a>

08014760 <__swsetup_r>:
 8014760:	b538      	push	{r3, r4, r5, lr}
 8014762:	4b29      	ldr	r3, [pc, #164]	@ (8014808 <__swsetup_r+0xa8>)
 8014764:	4605      	mov	r5, r0
 8014766:	6818      	ldr	r0, [r3, #0]
 8014768:	460c      	mov	r4, r1
 801476a:	b118      	cbz	r0, 8014774 <__swsetup_r+0x14>
 801476c:	6a03      	ldr	r3, [r0, #32]
 801476e:	b90b      	cbnz	r3, 8014774 <__swsetup_r+0x14>
 8014770:	f7fe f9e6 	bl	8012b40 <__sinit>
 8014774:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014778:	0719      	lsls	r1, r3, #28
 801477a:	d422      	bmi.n	80147c2 <__swsetup_r+0x62>
 801477c:	06da      	lsls	r2, r3, #27
 801477e:	d407      	bmi.n	8014790 <__swsetup_r+0x30>
 8014780:	2209      	movs	r2, #9
 8014782:	602a      	str	r2, [r5, #0]
 8014784:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014788:	81a3      	strh	r3, [r4, #12]
 801478a:	f04f 30ff 	mov.w	r0, #4294967295
 801478e:	e033      	b.n	80147f8 <__swsetup_r+0x98>
 8014790:	0758      	lsls	r0, r3, #29
 8014792:	d512      	bpl.n	80147ba <__swsetup_r+0x5a>
 8014794:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014796:	b141      	cbz	r1, 80147aa <__swsetup_r+0x4a>
 8014798:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801479c:	4299      	cmp	r1, r3
 801479e:	d002      	beq.n	80147a6 <__swsetup_r+0x46>
 80147a0:	4628      	mov	r0, r5
 80147a2:	f7ff f8a7 	bl	80138f4 <_free_r>
 80147a6:	2300      	movs	r3, #0
 80147a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80147aa:	89a3      	ldrh	r3, [r4, #12]
 80147ac:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80147b0:	81a3      	strh	r3, [r4, #12]
 80147b2:	2300      	movs	r3, #0
 80147b4:	6063      	str	r3, [r4, #4]
 80147b6:	6923      	ldr	r3, [r4, #16]
 80147b8:	6023      	str	r3, [r4, #0]
 80147ba:	89a3      	ldrh	r3, [r4, #12]
 80147bc:	f043 0308 	orr.w	r3, r3, #8
 80147c0:	81a3      	strh	r3, [r4, #12]
 80147c2:	6923      	ldr	r3, [r4, #16]
 80147c4:	b94b      	cbnz	r3, 80147da <__swsetup_r+0x7a>
 80147c6:	89a3      	ldrh	r3, [r4, #12]
 80147c8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80147cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80147d0:	d003      	beq.n	80147da <__swsetup_r+0x7a>
 80147d2:	4621      	mov	r1, r4
 80147d4:	4628      	mov	r0, r5
 80147d6:	f000 f883 	bl	80148e0 <__smakebuf_r>
 80147da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80147de:	f013 0201 	ands.w	r2, r3, #1
 80147e2:	d00a      	beq.n	80147fa <__swsetup_r+0x9a>
 80147e4:	2200      	movs	r2, #0
 80147e6:	60a2      	str	r2, [r4, #8]
 80147e8:	6962      	ldr	r2, [r4, #20]
 80147ea:	4252      	negs	r2, r2
 80147ec:	61a2      	str	r2, [r4, #24]
 80147ee:	6922      	ldr	r2, [r4, #16]
 80147f0:	b942      	cbnz	r2, 8014804 <__swsetup_r+0xa4>
 80147f2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80147f6:	d1c5      	bne.n	8014784 <__swsetup_r+0x24>
 80147f8:	bd38      	pop	{r3, r4, r5, pc}
 80147fa:	0799      	lsls	r1, r3, #30
 80147fc:	bf58      	it	pl
 80147fe:	6962      	ldrpl	r2, [r4, #20]
 8014800:	60a2      	str	r2, [r4, #8]
 8014802:	e7f4      	b.n	80147ee <__swsetup_r+0x8e>
 8014804:	2000      	movs	r0, #0
 8014806:	e7f7      	b.n	80147f8 <__swsetup_r+0x98>
 8014808:	24000138 	.word	0x24000138

0801480c <_raise_r>:
 801480c:	291f      	cmp	r1, #31
 801480e:	b538      	push	{r3, r4, r5, lr}
 8014810:	4605      	mov	r5, r0
 8014812:	460c      	mov	r4, r1
 8014814:	d904      	bls.n	8014820 <_raise_r+0x14>
 8014816:	2316      	movs	r3, #22
 8014818:	6003      	str	r3, [r0, #0]
 801481a:	f04f 30ff 	mov.w	r0, #4294967295
 801481e:	bd38      	pop	{r3, r4, r5, pc}
 8014820:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014822:	b112      	cbz	r2, 801482a <_raise_r+0x1e>
 8014824:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014828:	b94b      	cbnz	r3, 801483e <_raise_r+0x32>
 801482a:	4628      	mov	r0, r5
 801482c:	f000 f830 	bl	8014890 <_getpid_r>
 8014830:	4622      	mov	r2, r4
 8014832:	4601      	mov	r1, r0
 8014834:	4628      	mov	r0, r5
 8014836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801483a:	f000 b817 	b.w	801486c <_kill_r>
 801483e:	2b01      	cmp	r3, #1
 8014840:	d00a      	beq.n	8014858 <_raise_r+0x4c>
 8014842:	1c59      	adds	r1, r3, #1
 8014844:	d103      	bne.n	801484e <_raise_r+0x42>
 8014846:	2316      	movs	r3, #22
 8014848:	6003      	str	r3, [r0, #0]
 801484a:	2001      	movs	r0, #1
 801484c:	e7e7      	b.n	801481e <_raise_r+0x12>
 801484e:	2100      	movs	r1, #0
 8014850:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014854:	4620      	mov	r0, r4
 8014856:	4798      	blx	r3
 8014858:	2000      	movs	r0, #0
 801485a:	e7e0      	b.n	801481e <_raise_r+0x12>

0801485c <raise>:
 801485c:	4b02      	ldr	r3, [pc, #8]	@ (8014868 <raise+0xc>)
 801485e:	4601      	mov	r1, r0
 8014860:	6818      	ldr	r0, [r3, #0]
 8014862:	f7ff bfd3 	b.w	801480c <_raise_r>
 8014866:	bf00      	nop
 8014868:	24000138 	.word	0x24000138

0801486c <_kill_r>:
 801486c:	b538      	push	{r3, r4, r5, lr}
 801486e:	4d07      	ldr	r5, [pc, #28]	@ (801488c <_kill_r+0x20>)
 8014870:	2300      	movs	r3, #0
 8014872:	4604      	mov	r4, r0
 8014874:	4608      	mov	r0, r1
 8014876:	4611      	mov	r1, r2
 8014878:	602b      	str	r3, [r5, #0]
 801487a:	f7ec ffd9 	bl	8001830 <_kill>
 801487e:	1c43      	adds	r3, r0, #1
 8014880:	d102      	bne.n	8014888 <_kill_r+0x1c>
 8014882:	682b      	ldr	r3, [r5, #0]
 8014884:	b103      	cbz	r3, 8014888 <_kill_r+0x1c>
 8014886:	6023      	str	r3, [r4, #0]
 8014888:	bd38      	pop	{r3, r4, r5, pc}
 801488a:	bf00      	nop
 801488c:	24002720 	.word	0x24002720

08014890 <_getpid_r>:
 8014890:	f7ec bfc6 	b.w	8001820 <_getpid>

08014894 <__swhatbuf_r>:
 8014894:	b570      	push	{r4, r5, r6, lr}
 8014896:	460c      	mov	r4, r1
 8014898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801489c:	2900      	cmp	r1, #0
 801489e:	b096      	sub	sp, #88	@ 0x58
 80148a0:	4615      	mov	r5, r2
 80148a2:	461e      	mov	r6, r3
 80148a4:	da0d      	bge.n	80148c2 <__swhatbuf_r+0x2e>
 80148a6:	89a3      	ldrh	r3, [r4, #12]
 80148a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80148ac:	f04f 0100 	mov.w	r1, #0
 80148b0:	bf14      	ite	ne
 80148b2:	2340      	movne	r3, #64	@ 0x40
 80148b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80148b8:	2000      	movs	r0, #0
 80148ba:	6031      	str	r1, [r6, #0]
 80148bc:	602b      	str	r3, [r5, #0]
 80148be:	b016      	add	sp, #88	@ 0x58
 80148c0:	bd70      	pop	{r4, r5, r6, pc}
 80148c2:	466a      	mov	r2, sp
 80148c4:	f000 f848 	bl	8014958 <_fstat_r>
 80148c8:	2800      	cmp	r0, #0
 80148ca:	dbec      	blt.n	80148a6 <__swhatbuf_r+0x12>
 80148cc:	9901      	ldr	r1, [sp, #4]
 80148ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80148d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80148d6:	4259      	negs	r1, r3
 80148d8:	4159      	adcs	r1, r3
 80148da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80148de:	e7eb      	b.n	80148b8 <__swhatbuf_r+0x24>

080148e0 <__smakebuf_r>:
 80148e0:	898b      	ldrh	r3, [r1, #12]
 80148e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80148e4:	079d      	lsls	r5, r3, #30
 80148e6:	4606      	mov	r6, r0
 80148e8:	460c      	mov	r4, r1
 80148ea:	d507      	bpl.n	80148fc <__smakebuf_r+0x1c>
 80148ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80148f0:	6023      	str	r3, [r4, #0]
 80148f2:	6123      	str	r3, [r4, #16]
 80148f4:	2301      	movs	r3, #1
 80148f6:	6163      	str	r3, [r4, #20]
 80148f8:	b003      	add	sp, #12
 80148fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80148fc:	ab01      	add	r3, sp, #4
 80148fe:	466a      	mov	r2, sp
 8014900:	f7ff ffc8 	bl	8014894 <__swhatbuf_r>
 8014904:	9f00      	ldr	r7, [sp, #0]
 8014906:	4605      	mov	r5, r0
 8014908:	4639      	mov	r1, r7
 801490a:	4630      	mov	r0, r6
 801490c:	f7ff f866 	bl	80139dc <_malloc_r>
 8014910:	b948      	cbnz	r0, 8014926 <__smakebuf_r+0x46>
 8014912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014916:	059a      	lsls	r2, r3, #22
 8014918:	d4ee      	bmi.n	80148f8 <__smakebuf_r+0x18>
 801491a:	f023 0303 	bic.w	r3, r3, #3
 801491e:	f043 0302 	orr.w	r3, r3, #2
 8014922:	81a3      	strh	r3, [r4, #12]
 8014924:	e7e2      	b.n	80148ec <__smakebuf_r+0xc>
 8014926:	89a3      	ldrh	r3, [r4, #12]
 8014928:	6020      	str	r0, [r4, #0]
 801492a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801492e:	81a3      	strh	r3, [r4, #12]
 8014930:	9b01      	ldr	r3, [sp, #4]
 8014932:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014936:	b15b      	cbz	r3, 8014950 <__smakebuf_r+0x70>
 8014938:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801493c:	4630      	mov	r0, r6
 801493e:	f000 f81d 	bl	801497c <_isatty_r>
 8014942:	b128      	cbz	r0, 8014950 <__smakebuf_r+0x70>
 8014944:	89a3      	ldrh	r3, [r4, #12]
 8014946:	f023 0303 	bic.w	r3, r3, #3
 801494a:	f043 0301 	orr.w	r3, r3, #1
 801494e:	81a3      	strh	r3, [r4, #12]
 8014950:	89a3      	ldrh	r3, [r4, #12]
 8014952:	431d      	orrs	r5, r3
 8014954:	81a5      	strh	r5, [r4, #12]
 8014956:	e7cf      	b.n	80148f8 <__smakebuf_r+0x18>

08014958 <_fstat_r>:
 8014958:	b538      	push	{r3, r4, r5, lr}
 801495a:	4d07      	ldr	r5, [pc, #28]	@ (8014978 <_fstat_r+0x20>)
 801495c:	2300      	movs	r3, #0
 801495e:	4604      	mov	r4, r0
 8014960:	4608      	mov	r0, r1
 8014962:	4611      	mov	r1, r2
 8014964:	602b      	str	r3, [r5, #0]
 8014966:	f7ec ffc3 	bl	80018f0 <_fstat>
 801496a:	1c43      	adds	r3, r0, #1
 801496c:	d102      	bne.n	8014974 <_fstat_r+0x1c>
 801496e:	682b      	ldr	r3, [r5, #0]
 8014970:	b103      	cbz	r3, 8014974 <_fstat_r+0x1c>
 8014972:	6023      	str	r3, [r4, #0]
 8014974:	bd38      	pop	{r3, r4, r5, pc}
 8014976:	bf00      	nop
 8014978:	24002720 	.word	0x24002720

0801497c <_isatty_r>:
 801497c:	b538      	push	{r3, r4, r5, lr}
 801497e:	4d06      	ldr	r5, [pc, #24]	@ (8014998 <_isatty_r+0x1c>)
 8014980:	2300      	movs	r3, #0
 8014982:	4604      	mov	r4, r0
 8014984:	4608      	mov	r0, r1
 8014986:	602b      	str	r3, [r5, #0]
 8014988:	f7ec ffc2 	bl	8001910 <_isatty>
 801498c:	1c43      	adds	r3, r0, #1
 801498e:	d102      	bne.n	8014996 <_isatty_r+0x1a>
 8014990:	682b      	ldr	r3, [r5, #0]
 8014992:	b103      	cbz	r3, 8014996 <_isatty_r+0x1a>
 8014994:	6023      	str	r3, [r4, #0]
 8014996:	bd38      	pop	{r3, r4, r5, pc}
 8014998:	24002720 	.word	0x24002720

0801499c <lrintf>:
 801499c:	ee10 3a10 	vmov	r3, s0
 80149a0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80149a4:	f1a2 007f 	sub.w	r0, r2, #127	@ 0x7f
 80149a8:	281e      	cmp	r0, #30
 80149aa:	b082      	sub	sp, #8
 80149ac:	dc2f      	bgt.n	8014a0e <lrintf+0x72>
 80149ae:	1c41      	adds	r1, r0, #1
 80149b0:	da02      	bge.n	80149b8 <lrintf+0x1c>
 80149b2:	2000      	movs	r0, #0
 80149b4:	b002      	add	sp, #8
 80149b6:	4770      	bx	lr
 80149b8:	2816      	cmp	r0, #22
 80149ba:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 80149be:	dd0a      	ble.n	80149d6 <lrintf+0x3a>
 80149c0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80149c4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80149c8:	3a96      	subs	r2, #150	@ 0x96
 80149ca:	fa03 f002 	lsl.w	r0, r3, r2
 80149ce:	2900      	cmp	r1, #0
 80149d0:	d0f0      	beq.n	80149b4 <lrintf+0x18>
 80149d2:	4240      	negs	r0, r0
 80149d4:	e7ee      	b.n	80149b4 <lrintf+0x18>
 80149d6:	4b10      	ldr	r3, [pc, #64]	@ (8014a18 <lrintf+0x7c>)
 80149d8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80149dc:	ed93 7a00 	vldr	s14, [r3]
 80149e0:	ee37 0a00 	vadd.f32	s0, s14, s0
 80149e4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80149e8:	eddd 7a01 	vldr	s15, [sp, #4]
 80149ec:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80149f0:	ee17 3a90 	vmov	r3, s15
 80149f4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80149f8:	d0db      	beq.n	80149b2 <lrintf+0x16>
 80149fa:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80149fe:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 8014a02:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8014a06:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8014a0a:	40d8      	lsrs	r0, r3
 8014a0c:	e7df      	b.n	80149ce <lrintf+0x32>
 8014a0e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8014a12:	ee17 0a90 	vmov	r0, s15
 8014a16:	e7cd      	b.n	80149b4 <lrintf+0x18>
 8014a18:	08014e30 	.word	0x08014e30

08014a1c <_init>:
 8014a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a1e:	bf00      	nop
 8014a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a22:	bc08      	pop	{r3}
 8014a24:	469e      	mov	lr, r3
 8014a26:	4770      	bx	lr

08014a28 <_fini>:
 8014a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014a2a:	bf00      	nop
 8014a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014a2e:	bc08      	pop	{r3}
 8014a30:	469e      	mov	lr, r3
 8014a32:	4770      	bx	lr
