
Rx_M4_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ee8c  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  0800f124  0800f124  00010124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f1b0  0800f1b0  00011120  2**0
                  CONTENTS
  4 .ARM          00000008  0800f1b0  0800f1b0  000101b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f1b8  0800f1b8  00011120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f1b8  0800f1b8  000101b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f1bc  0800f1bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000120  24000000  0800f1c0  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020ec  24000120  0800f2e0  00011120  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400220c  0800f2e0  0001120c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00011120  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023a8b  00000000  00000000  0001114e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004be2  00000000  00000000  00034bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a30  00000000  00000000  000397c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001423  00000000  00000000  0003b1f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003f05b  00000000  00000000  0003c613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026ff4  00000000  00000000  0007b66e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018c24b  00000000  00000000  000a2662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0022e8ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006da0  00000000  00000000  0022e8f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  00235690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000120 	.word	0x24000120
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800f10c 	.word	0x0800f10c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000124 	.word	0x24000124
 80002d4:	0800f10c 	.word	0x0800f10c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006fa:	4b19      	ldr	r3, [pc, #100]	@ (8000760 <MX_DMA_Init+0x6c>)
 80006fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000700:	4a17      	ldr	r2, [pc, #92]	@ (8000760 <MX_DMA_Init+0x6c>)
 8000702:	f043 0301 	orr.w	r3, r3, #1
 8000706:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800070a:	4b15      	ldr	r3, [pc, #84]	@ (8000760 <MX_DMA_Init+0x6c>)
 800070c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000710:	f003 0301 	and.w	r3, r3, #1
 8000714:	607b      	str	r3, [r7, #4]
 8000716:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000718:	2200      	movs	r2, #0
 800071a:	2100      	movs	r1, #0
 800071c:	200c      	movs	r0, #12
 800071e:	f001 fb98 	bl	8001e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000722:	200c      	movs	r0, #12
 8000724:	f001 fbaf 	bl	8001e86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000728:	2200      	movs	r2, #0
 800072a:	2100      	movs	r1, #0
 800072c:	200e      	movs	r0, #14
 800072e:	f001 fb90 	bl	8001e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000732:	200e      	movs	r0, #14
 8000734:	f001 fba7 	bl	8001e86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	2100      	movs	r1, #0
 800073c:	200f      	movs	r0, #15
 800073e:	f001 fb88 	bl	8001e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000742:	200f      	movs	r0, #15
 8000744:	f001 fb9f 	bl	8001e86 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000748:	2200      	movs	r2, #0
 800074a:	2100      	movs	r1, #0
 800074c:	2010      	movs	r0, #16
 800074e:	f001 fb80 	bl	8001e52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000752:	2010      	movs	r0, #16
 8000754:	f001 fb97 	bl	8001e86 <HAL_NVIC_EnableIRQ>

}
 8000758:	bf00      	nop
 800075a:	3708      	adds	r7, #8
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	58024400 	.word	0x58024400

08000764 <dshot_init>:
static void dshot_enable_dma_request();


/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	4603      	mov	r3, r0
 800076c:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 800076e:	79fb      	ldrb	r3, [r7, #7]
 8000770:	4618      	mov	r0, r3
 8000772:	f000 f833 	bl	80007dc <dshot_set_timer>
	dshot_put_tc_callback_function();
 8000776:	f000 f8d3 	bl	8000920 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 800077a:	f000 f8ef 	bl	800095c <dshot_start_pwm>
}
 800077e:	bf00      	nop
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}

08000786 <dshot_write>:

void dshot_write(uint16_t* motor_value)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer_all(motor_value);
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f000 f962 	bl	8000a58 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 8000794:	f000 f98c 	bl	8000ab0 <dshot_dma_start>
	dshot_enable_dma_request();
 8000798:	f000 f9c2 	bl	8000b20 <dshot_enable_dma_request>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <dshot_choose_type>:


/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d003      	beq.n	80007bc <dshot_choose_type+0x18>
 80007b4:	2b02      	cmp	r3, #2
 80007b6:	d103      	bne.n	80007c0 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return DSHOT600_HZ;
 80007b8:	4b05      	ldr	r3, [pc, #20]	@ (80007d0 <dshot_choose_type+0x2c>)
 80007ba:	e002      	b.n	80007c2 <dshot_choose_type+0x1e>

		case(DSHOT300):
				return DSHOT300_HZ;
 80007bc:	4b05      	ldr	r3, [pc, #20]	@ (80007d4 <dshot_choose_type+0x30>)
 80007be:	e000      	b.n	80007c2 <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return DSHOT150_HZ;
 80007c0:	4b05      	ldr	r3, [pc, #20]	@ (80007d8 <dshot_choose_type+0x34>)
	}
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	00b71b00 	.word	0x00b71b00
 80007d4:	005b8d80 	.word	0x005b8d80
 80007d8:	002dc6c0 	.word	0x002dc6c0

080007dc <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	ed2d 8b02 	vpush	{d8}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 80007ea:	4b27      	ldr	r3, [pc, #156]	@ (8000888 <dshot_set_timer+0xac>)
 80007ec:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 80007ee:	68fb      	ldr	r3, [r7, #12]
 80007f0:	ee07 3a90 	vmov	s15, r3
 80007f4:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80007f8:	79fb      	ldrb	r3, [r7, #7]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ffd2 	bl	80007a4 <dshot_choose_type>
 8000800:	ee07 0a90 	vmov	s15, r0
 8000804:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000808:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800080c:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 800088c <dshot_set_timer+0xb0>
 8000810:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000814:	eeb0 0a67 	vmov.f32	s0, s15
 8000818:	f00e fc38 	bl	800f08c <lrintf>
 800081c:	4603      	mov	r3, r0
 800081e:	b29b      	uxth	r3, r3
 8000820:	3b01      	subs	r3, #1
 8000822:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 8000824:	4b1a      	ldr	r3, [pc, #104]	@ (8000890 <dshot_set_timer+0xb4>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	897a      	ldrh	r2, [r7, #10]
 800082a:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 800082c:	4b18      	ldr	r3, [pc, #96]	@ (8000890 <dshot_set_timer+0xb4>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	2214      	movs	r2, #20
 8000832:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000834:	4b16      	ldr	r3, [pc, #88]	@ (8000890 <dshot_set_timer+0xb4>)
 8000836:	2214      	movs	r2, #20
 8000838:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 800083a:	4b16      	ldr	r3, [pc, #88]	@ (8000894 <dshot_set_timer+0xb8>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	897a      	ldrh	r2, [r7, #10]
 8000840:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 8000842:	4b14      	ldr	r3, [pc, #80]	@ (8000894 <dshot_set_timer+0xb8>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	2214      	movs	r2, #20
 8000848:	62da      	str	r2, [r3, #44]	@ 0x2c
 800084a:	4b12      	ldr	r3, [pc, #72]	@ (8000894 <dshot_set_timer+0xb8>)
 800084c:	2214      	movs	r2, #20
 800084e:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8000850:	4b10      	ldr	r3, [pc, #64]	@ (8000894 <dshot_set_timer+0xb8>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	897a      	ldrh	r2, [r7, #10]
 8000856:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 8000858:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <dshot_set_timer+0xb8>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	2214      	movs	r2, #20
 800085e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000860:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <dshot_set_timer+0xb8>)
 8000862:	2214      	movs	r2, #20
 8000864:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 8000866:	4b0a      	ldr	r3, [pc, #40]	@ (8000890 <dshot_set_timer+0xb4>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	897a      	ldrh	r2, [r7, #10]
 800086c:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 800086e:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <dshot_set_timer+0xb4>)
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	2214      	movs	r2, #20
 8000874:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000876:	4b06      	ldr	r3, [pc, #24]	@ (8000890 <dshot_set_timer+0xb4>)
 8000878:	2214      	movs	r2, #20
 800087a:	60da      	str	r2, [r3, #12]
}
 800087c:	bf00      	nop
 800087e:	3710      	adds	r7, #16
 8000880:	46bd      	mov	sp, r7
 8000882:	ecbd 8b02 	vpop	{d8}
 8000886:	bd80      	pop	{r7, pc}
 8000888:	05f5e100 	.word	0x05f5e100
 800088c:	3c23d70a 	.word	0x3c23d70a
 8000890:	2400035c 	.word	0x2400035c
 8000894:	24000278 	.word	0x24000278

08000898 <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80008a4:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008aa:	687a      	ldr	r2, [r7, #4]
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d108      	bne.n	80008c2 <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	68da      	ldr	r2, [r3, #12]
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80008be:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 80008c0:	e028      	b.n	8000914 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d108      	bne.n	80008de <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	68da      	ldr	r2, [r3, #12]
 80008d2:	68fb      	ldr	r3, [r7, #12]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80008da:	60da      	str	r2, [r3, #12]
}
 80008dc:	e01a      	b.n	8000914 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008e2:	687a      	ldr	r2, [r7, #4]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d108      	bne.n	80008fa <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	68da      	ldr	r2, [r3, #12]
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80008f6:	60da      	str	r2, [r3, #12]
}
 80008f8:	e00c      	b.n	8000914 <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	687a      	ldr	r2, [r7, #4]
 8000900:	429a      	cmp	r2, r3
 8000902:	d107      	bne.n	8000914 <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	68da      	ldr	r2, [r3, #12]
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000912:	60da      	str	r2, [r3, #12]
}
 8000914:	bf00      	nop
 8000916:	3714      	adds	r7, #20
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr

08000920 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 8000924:	4b0a      	ldr	r3, [pc, #40]	@ (8000950 <dshot_put_tc_callback_function+0x30>)
 8000926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000928:	4a0a      	ldr	r2, [pc, #40]	@ (8000954 <dshot_put_tc_callback_function+0x34>)
 800092a:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 800092c:	4b0a      	ldr	r3, [pc, #40]	@ (8000958 <dshot_put_tc_callback_function+0x38>)
 800092e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000930:	4a08      	ldr	r2, [pc, #32]	@ (8000954 <dshot_put_tc_callback_function+0x34>)
 8000932:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 8000934:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <dshot_put_tc_callback_function+0x38>)
 8000936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000938:	4a06      	ldr	r2, [pc, #24]	@ (8000954 <dshot_put_tc_callback_function+0x34>)
 800093a:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 800093c:	4b04      	ldr	r3, [pc, #16]	@ (8000950 <dshot_put_tc_callback_function+0x30>)
 800093e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000940:	4a04      	ldr	r2, [pc, #16]	@ (8000954 <dshot_put_tc_callback_function+0x34>)
 8000942:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	2400035c 	.word	0x2400035c
 8000954:	08000899 	.word	0x08000899
 8000958:	24000278 	.word	0x24000278

0800095c <dshot_start_pwm>:

static void dshot_start_pwm()
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 8000960:	210c      	movs	r1, #12
 8000962:	4808      	ldr	r0, [pc, #32]	@ (8000984 <dshot_start_pwm+0x28>)
 8000964:	f008 f85a 	bl	8008a1c <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 8000968:	2108      	movs	r1, #8
 800096a:	4807      	ldr	r0, [pc, #28]	@ (8000988 <dshot_start_pwm+0x2c>)
 800096c:	f008 f856 	bl	8008a1c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8000970:	2100      	movs	r1, #0
 8000972:	4805      	ldr	r0, [pc, #20]	@ (8000988 <dshot_start_pwm+0x2c>)
 8000974:	f008 f852 	bl	8008a1c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 8000978:	2104      	movs	r1, #4
 800097a:	4802      	ldr	r0, [pc, #8]	@ (8000984 <dshot_start_pwm+0x28>)
 800097c:	f008 f84e 	bl	8008a1c <HAL_TIM_PWM_Start>
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}
 8000984:	2400035c 	.word	0x2400035c
 8000988:	24000278 	.word	0x24000278

0800098c <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 800098c:	b480      	push	{r7}
 800098e:	b087      	sub	sp, #28
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 8000996:	2300      	movs	r3, #0
 8000998:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 800099a:	88fb      	ldrh	r3, [r7, #6]
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	b21a      	sxth	r2, r3
 80009a0:	7afb      	ldrb	r3, [r7, #11]
 80009a2:	b21b      	sxth	r3, r3
 80009a4:	4313      	orrs	r3, r2
 80009a6:	b21b      	sxth	r3, r3
 80009a8:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 80009ae:	893b      	ldrh	r3, [r7, #8]
 80009b0:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 80009b2:	2300      	movs	r3, #0
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	e009      	b.n	80009cc <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 80009b8:	697a      	ldr	r2, [r7, #20]
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	4053      	eors	r3, r2
 80009be:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	091b      	lsrs	r3, r3, #4
 80009c4:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	3301      	adds	r3, #1
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2b02      	cmp	r3, #2
 80009d0:	ddf2      	ble.n	80009b8 <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	f003 030f 	and.w	r3, r3, #15
 80009d8:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 80009da:	893b      	ldrh	r3, [r7, #8]
 80009dc:	011b      	lsls	r3, r3, #4
 80009de:	b29a      	uxth	r2, r3
 80009e0:	697b      	ldr	r3, [r7, #20]
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	4313      	orrs	r3, r2
 80009e6:	813b      	strh	r3, [r7, #8]

	return packet;
 80009e8:	893b      	ldrh	r3, [r7, #8]
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	371c      	adds	r7, #28
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr

080009f6 <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 80009f6:	b580      	push	{r7, lr}
 80009f8:	b084      	sub	sp, #16
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	6078      	str	r0, [r7, #4]
 80009fe:	460b      	mov	r3, r1
 8000a00:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 8000a02:	887b      	ldrh	r3, [r7, #2]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ffc1 	bl	800098c <dshot_prepare_packet>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60bb      	str	r3, [r7, #8]
 8000a12:	e011      	b.n	8000a38 <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 8000a14:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	da01      	bge.n	8000a20 <dshot_prepare_dmabuffer+0x2a>
 8000a1c:	220e      	movs	r2, #14
 8000a1e:	e000      	b.n	8000a22 <dshot_prepare_dmabuffer+0x2c>
 8000a20:	2207      	movs	r2, #7
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	6879      	ldr	r1, [r7, #4]
 8000a28:	440b      	add	r3, r1
 8000a2a:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8000a2c:	89fb      	ldrh	r3, [r7, #14]
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	3301      	adds	r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	2b0f      	cmp	r3, #15
 8000a3c:	ddea      	ble.n	8000a14 <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	3340      	adds	r3, #64	@ 0x40
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	3344      	adds	r3, #68	@ 0x44
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
}
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
	...

08000a58 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	881b      	ldrh	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	480e      	ldr	r0, [pc, #56]	@ (8000aa0 <dshot_prepare_dmabuffer_all+0x48>)
 8000a68:	f7ff ffc5 	bl	80009f6 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3302      	adds	r3, #2
 8000a70:	881b      	ldrh	r3, [r3, #0]
 8000a72:	4619      	mov	r1, r3
 8000a74:	480b      	ldr	r0, [pc, #44]	@ (8000aa4 <dshot_prepare_dmabuffer_all+0x4c>)
 8000a76:	f7ff ffbe 	bl	80009f6 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	3304      	adds	r3, #4
 8000a7e:	881b      	ldrh	r3, [r3, #0]
 8000a80:	4619      	mov	r1, r3
 8000a82:	4809      	ldr	r0, [pc, #36]	@ (8000aa8 <dshot_prepare_dmabuffer_all+0x50>)
 8000a84:	f7ff ffb7 	bl	80009f6 <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	3306      	adds	r3, #6
 8000a8c:	881b      	ldrh	r3, [r3, #0]
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4806      	ldr	r0, [pc, #24]	@ (8000aac <dshot_prepare_dmabuffer_all+0x54>)
 8000a92:	f7ff ffb0 	bl	80009f6 <dshot_prepare_dmabuffer>
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	2400013c 	.word	0x2400013c
 8000aa4:	24000184 	.word	0x24000184
 8000aa8:	240001cc 	.word	0x240001cc
 8000aac:	24000214 	.word	0x24000214

08000ab0 <dshot_dma_start>:

static void dshot_dma_start()
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 8000ab4:	4b14      	ldr	r3, [pc, #80]	@ (8000b08 <dshot_dma_start+0x58>)
 8000ab6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000ab8:	4914      	ldr	r1, [pc, #80]	@ (8000b0c <dshot_dma_start+0x5c>)
 8000aba:	4b13      	ldr	r3, [pc, #76]	@ (8000b08 <dshot_dma_start+0x58>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	3340      	adds	r3, #64	@ 0x40
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	2312      	movs	r3, #18
 8000ac4:	f001 fd6a 	bl	800259c <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
 8000ac8:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <dshot_dma_start+0x60>)
 8000aca:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8000acc:	4911      	ldr	r1, [pc, #68]	@ (8000b14 <dshot_dma_start+0x64>)
 8000ace:	4b10      	ldr	r3, [pc, #64]	@ (8000b10 <dshot_dma_start+0x60>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	333c      	adds	r3, #60	@ 0x3c
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	2312      	movs	r3, #18
 8000ad8:	f001 fd60 	bl	800259c <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR1, DSHOT_DMA_BUFFER_SIZE);
 8000adc:	4b0c      	ldr	r3, [pc, #48]	@ (8000b10 <dshot_dma_start+0x60>)
 8000ade:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000ae0:	490d      	ldr	r1, [pc, #52]	@ (8000b18 <dshot_dma_start+0x68>)
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <dshot_dma_start+0x60>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	3334      	adds	r3, #52	@ 0x34
 8000ae8:	461a      	mov	r2, r3
 8000aea:	2312      	movs	r3, #18
 8000aec:	f001 fd56 	bl	800259c <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
 8000af0:	4b05      	ldr	r3, [pc, #20]	@ (8000b08 <dshot_dma_start+0x58>)
 8000af2:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000af4:	4909      	ldr	r1, [pc, #36]	@ (8000b1c <dshot_dma_start+0x6c>)
 8000af6:	4b04      	ldr	r3, [pc, #16]	@ (8000b08 <dshot_dma_start+0x58>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	3338      	adds	r3, #56	@ 0x38
 8000afc:	461a      	mov	r2, r3
 8000afe:	2312      	movs	r3, #18
 8000b00:	f001 fd4c 	bl	800259c <HAL_DMA_Start_IT>
}
 8000b04:	bf00      	nop
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	2400035c 	.word	0x2400035c
 8000b0c:	2400013c 	.word	0x2400013c
 8000b10:	24000278 	.word	0x24000278
 8000b14:	24000184 	.word	0x24000184
 8000b18:	240001cc 	.word	0x240001cc
 8000b1c:	24000214 	.word	0x24000214

08000b20 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC4);
 8000b24:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <dshot_enable_dma_request+0x50>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	68da      	ldr	r2, [r3, #12]
 8000b2a:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <dshot_enable_dma_request+0x50>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000b32:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
 8000b34:	4b0f      	ldr	r3, [pc, #60]	@ (8000b74 <dshot_enable_dma_request+0x54>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	68da      	ldr	r2, [r3, #12]
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b74 <dshot_enable_dma_request+0x54>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000b42:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC1);
 8000b44:	4b0b      	ldr	r3, [pc, #44]	@ (8000b74 <dshot_enable_dma_request+0x54>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	68da      	ldr	r2, [r3, #12]
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <dshot_enable_dma_request+0x54>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000b52:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC2);
 8000b54:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <dshot_enable_dma_request+0x50>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	68da      	ldr	r2, [r3, #12]
 8000b5a:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <dshot_enable_dma_request+0x50>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000b62:	60da      	str	r2, [r3, #12]
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop
 8000b70:	2400035c 	.word	0x2400035c
 8000b74:	24000278 	.word	0x24000278

08000b78 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	@ 0x28
 8000b7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	f107 0314 	add.w	r3, r7, #20
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8e:	4b48      	ldr	r3, [pc, #288]	@ (8000cb0 <MX_GPIO_Init+0x138>)
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b94:	4a46      	ldr	r2, [pc, #280]	@ (8000cb0 <MX_GPIO_Init+0x138>)
 8000b96:	f043 0304 	orr.w	r3, r3, #4
 8000b9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b9e:	4b44      	ldr	r3, [pc, #272]	@ (8000cb0 <MX_GPIO_Init+0x138>)
 8000ba0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba4:	f003 0304 	and.w	r3, r3, #4
 8000ba8:	613b      	str	r3, [r7, #16]
 8000baa:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bac:	4b40      	ldr	r3, [pc, #256]	@ (8000cb0 <MX_GPIO_Init+0x138>)
 8000bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb2:	4a3f      	ldr	r2, [pc, #252]	@ (8000cb0 <MX_GPIO_Init+0x138>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bbc:	4b3c      	ldr	r3, [pc, #240]	@ (8000cb0 <MX_GPIO_Init+0x138>)
 8000bbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bca:	4b39      	ldr	r3, [pc, #228]	@ (8000cb0 <MX_GPIO_Init+0x138>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd0:	4a37      	ldr	r2, [pc, #220]	@ (8000cb0 <MX_GPIO_Init+0x138>)
 8000bd2:	f043 0302 	orr.w	r3, r3, #2
 8000bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bda:	4b35      	ldr	r3, [pc, #212]	@ (8000cb0 <MX_GPIO_Init+0x138>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be0:	f003 0302 	and.w	r3, r3, #2
 8000be4:	60bb      	str	r3, [r7, #8]
 8000be6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000be8:	4b31      	ldr	r3, [pc, #196]	@ (8000cb0 <MX_GPIO_Init+0x138>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bee:	4a30      	ldr	r2, [pc, #192]	@ (8000cb0 <MX_GPIO_Init+0x138>)
 8000bf0:	f043 0308 	orr.w	r3, r3, #8
 8000bf4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb0 <MX_GPIO_Init+0x138>)
 8000bfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bfe:	f003 0308 	and.w	r3, r3, #8
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c06:	4b2a      	ldr	r3, [pc, #168]	@ (8000cb0 <MX_GPIO_Init+0x138>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c0c:	4a28      	ldr	r2, [pc, #160]	@ (8000cb0 <MX_GPIO_Init+0x138>)
 8000c0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c16:	4b26      	ldr	r3, [pc, #152]	@ (8000cb0 <MX_GPIO_Init+0x138>)
 8000c18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c20:	603b      	str	r3, [r7, #0]
 8000c22:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c24:	2332      	movs	r3, #50	@ 0x32
 8000c26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c30:	2300      	movs	r3, #0
 8000c32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c34:	230b      	movs	r3, #11
 8000c36:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	481d      	ldr	r0, [pc, #116]	@ (8000cb4 <MX_GPIO_Init+0x13c>)
 8000c40:	f003 fa98 	bl	8004174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c44:	2380      	movs	r3, #128	@ 0x80
 8000c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c50:	2300      	movs	r3, #0
 8000c52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c54:	230b      	movs	r3, #11
 8000c56:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4816      	ldr	r0, [pc, #88]	@ (8000cb8 <MX_GPIO_Init+0x140>)
 8000c60:	f003 fa88 	bl	8004174 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c64:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c76:	230b      	movs	r3, #11
 8000c78:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7a:	f107 0314 	add.w	r3, r7, #20
 8000c7e:	4619      	mov	r1, r3
 8000c80:	480e      	ldr	r0, [pc, #56]	@ (8000cbc <MX_GPIO_Init+0x144>)
 8000c82:	f003 fa77 	bl	8004174 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c86:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8c:	2302      	movs	r3, #2
 8000c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c94:	2300      	movs	r3, #0
 8000c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c98:	230b      	movs	r3, #11
 8000c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c9c:	f107 0314 	add.w	r3, r7, #20
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	4807      	ldr	r0, [pc, #28]	@ (8000cc0 <MX_GPIO_Init+0x148>)
 8000ca4:	f003 fa66 	bl	8004174 <HAL_GPIO_Init>

}
 8000ca8:	bf00      	nop
 8000caa:	3728      	adds	r7, #40	@ 0x28
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	58024400 	.word	0x58024400
 8000cb4:	58020800 	.word	0x58020800
 8000cb8:	58020000 	.word	0x58020000
 8000cbc:	58020400 	.word	0x58020400
 8000cc0:	58021800 	.word	0x58021800

08000cc4 <HAL_TIM_IC_CaptureCallback>:
		}
		xfr_ptr->sts_4to7 = 0; // M4 to M7 buffer is empty
	}
	return buffer; // return the buffer (pointer)
}
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	contador = __HAL_TIM_GET_COUNTER(&htim4);
 8000ccc:	4b05      	ldr	r3, [pc, #20]	@ (8000ce4 <HAL_TIM_IC_CaptureCallback+0x20>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cd2:	4a05      	ldr	r2, [pc, #20]	@ (8000ce8 <HAL_TIM_IC_CaptureCallback+0x24>)
 8000cd4:	6013      	str	r3, [r2, #0]
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	24000310 	.word	0x24000310
 8000ce8:	2400026c 	.word	0x2400026c

08000cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000cf2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cf6:	60fb      	str	r3, [r7, #12]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000cf8:	bf00      	nop
 8000cfa:	4b58      	ldr	r3, [pc, #352]	@ (8000e5c <main+0x170>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d004      	beq.n	8000d10 <main+0x24>
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	1e5a      	subs	r2, r3, #1
 8000d0a:	60fa      	str	r2, [r7, #12]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	dcf4      	bgt.n	8000cfa <main+0xe>
  if ( timeout < 0 )
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	da01      	bge.n	8000d1a <main+0x2e>
  {
  Error_Handler();
 8000d16:	f000 f92f 	bl	8000f78 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d1a:	f000 fefd 	bl	8001b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d1e:	f000 f8ab 	bl	8000e78 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000d22:	4b4e      	ldr	r3, [pc, #312]	@ (8000e5c <main+0x170>)
 8000d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d28:	4a4c      	ldr	r2, [pc, #304]	@ (8000e5c <main+0x170>)
 8000d2a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d32:	4b4a      	ldr	r3, [pc, #296]	@ (8000e5c <main+0x170>)
 8000d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000d3c:	603b      	str	r3, [r7, #0]
 8000d3e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000d40:	2000      	movs	r0, #0
 8000d42:	f003 fbfb 	bl	800453c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000d46:	2100      	movs	r1, #0
 8000d48:	2000      	movs	r0, #0
 8000d4a:	f003 fc11 	bl	8004570 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000d4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d52:	60fb      	str	r3, [r7, #12]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000d54:	bf00      	nop
 8000d56:	4b41      	ldr	r3, [pc, #260]	@ (8000e5c <main+0x170>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d104      	bne.n	8000d6c <main+0x80>
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	1e5a      	subs	r2, r3, #1
 8000d66:	60fa      	str	r2, [r7, #12]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	dcf4      	bgt.n	8000d56 <main+0x6a>
if ( timeout < 0 )
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	da01      	bge.n	8000d76 <main+0x8a>
{
Error_Handler();
 8000d72:	f000 f901 	bl	8000f78 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d76:	f7ff feff 	bl	8000b78 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d7a:	f7ff fcbb 	bl	80006f4 <MX_DMA_Init>
  MX_TIM2_Init();
 8000d7e:	f000 f995 	bl	80010ac <MX_TIM2_Init>
  MX_TIM5_Init();
 8000d82:	f000 fa9b 	bl	80012bc <MX_TIM5_Init>
  MX_TIM3_Init();
 8000d86:	f000 f9f5 	bl	8001174 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000d8a:	f000 fa41 	bl	8001210 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000d8e:	f00d fc01 	bl	800e594 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  int count = 0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	60bb      	str	r3, [r7, #8]
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000d96:	213c      	movs	r1, #60	@ 0x3c
 8000d98:	4831      	ldr	r0, [pc, #196]	@ (8000e60 <main+0x174>)
 8000d9a:	f007 fff3 	bl	8008d84 <HAL_TIM_Encoder_Start_IT>
	uint8_t * xfr_data; // pointer to transfer data


	//initialize inter-core status pointers
	xfr_ptr->sts_4to7 = 0;
 8000d9e:	4b31      	ldr	r3, [pc, #196]	@ (8000e64 <main+0x178>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	701a      	strb	r2, [r3, #0]
	xfr_ptr->sts_7to4 = 0;
 8000da4:	4b2f      	ldr	r3, [pc, #188]	@ (8000e64 <main+0x178>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	705a      	strb	r2, [r3, #1]

	dshot_init(DSHOT150);
 8000daa:	2000      	movs	r0, #0
 8000dac:	f7ff fcda 	bl	8000764 <dshot_init>
	  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8000db0:	482d      	ldr	r0, [pc, #180]	@ (8000e68 <main+0x17c>)
 8000db2:	f007 fd63 	bl	800887c <HAL_TIM_Base_Start_IT>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <main+0xd4>
	    {
	      /* Starting Error */
	      Error_Handler();
 8000dbc:	f000 f8dc 	bl	8000f78 <Error_Handler>
	    }
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	f000 fce1 	bl	8001788 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	f000 fcde 	bl	8001788 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000dcc:	2002      	movs	r0, #2
 8000dce:	f000 fcdb 	bl	8001788 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	2000      	movs	r0, #0
 8000dd6:	f000 fd4d 	bl	8001874 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000dda:	4b24      	ldr	r3, [pc, #144]	@ (8000e6c <main+0x180>)
 8000ddc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000de0:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000de2:	4b22      	ldr	r3, [pc, #136]	@ (8000e6c <main+0x180>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000de8:	4b20      	ldr	r3, [pc, #128]	@ (8000e6c <main+0x180>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000dee:	4b1f      	ldr	r3, [pc, #124]	@ (8000e6c <main+0x180>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000df4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e6c <main+0x180>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000dfa:	491c      	ldr	r1, [pc, #112]	@ (8000e6c <main+0x180>)
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f000 fdc9 	bl	8001994 <BSP_COM_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <main+0x120>
  {
    Error_Handler();
 8000e08:	f000 f8b6 	bl	8000f78 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t velocidade=28;
 8000e0c:	231c      	movs	r3, #28
 8000e0e:	71fb      	strb	r3, [r7, #7]
	  	  for(int n=0;n<4;n++){
	  		  motores[n] = (Mensagem[n]*2048)/255;

	  	  }
	  	  */
	  	  contador = __HAL_TIM_GET_COUNTER(&htim4);
 8000e10:	4b13      	ldr	r3, [pc, #76]	@ (8000e60 <main+0x174>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e16:	4a16      	ldr	r2, [pc, #88]	@ (8000e70 <main+0x184>)
 8000e18:	6013      	str	r3, [r2, #0]
	  	  if(count<2000){
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e20:	da03      	bge.n	8000e2a <main+0x13e>
	  		  motores[0]=0;
 8000e22:	4b14      	ldr	r3, [pc, #80]	@ (8000e74 <main+0x188>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	801a      	strh	r2, [r3, #0]
 8000e28:	e007      	b.n	8000e3a <main+0x14e>
	  	  }  else if(count>=2000){
 8000e2a:	68bb      	ldr	r3, [r7, #8]
 8000e2c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000e30:	db03      	blt.n	8000e3a <main+0x14e>
	  		motores[0]=1000;
 8000e32:	4b10      	ldr	r3, [pc, #64]	@ (8000e74 <main+0x188>)
 8000e34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e38:	801a      	strh	r2, [r3, #0]
	  	  }
	  	  count++;
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	3301      	adds	r3, #1
 8000e3e:	60bb      	str	r3, [r7, #8]
	  	  dshot_write(motores);
 8000e40:	480c      	ldr	r0, [pc, #48]	@ (8000e74 <main+0x188>)
 8000e42:	f7ff fca0 	bl	8000786 <dshot_write>
	  	  CDC_Transmit_FS(velocidade,sizeof(velocidade));
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	2101      	movs	r1, #1
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f00d fc62 	bl	800e714 <CDC_Transmit_FS>
	  	  HAL_Delay(1000);
 8000e50:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000e54:	f000 fef2 	bl	8001c3c <HAL_Delay>
  {
 8000e58:	e7da      	b.n	8000e10 <main+0x124>
 8000e5a:	bf00      	nop
 8000e5c:	58024400 	.word	0x58024400
 8000e60:	24000310 	.word	0x24000310
 8000e64:	38001000 	.word	0x38001000
 8000e68:	240002c4 	.word	0x240002c4
 8000e6c:	2400025c 	.word	0x2400025c
 8000e70:	2400026c 	.word	0x2400026c
 8000e74:	24000270 	.word	0x24000270

08000e78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b09c      	sub	sp, #112	@ 0x70
 8000e7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e82:	224c      	movs	r2, #76	@ 0x4c
 8000e84:	2100      	movs	r1, #0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f00e f8d4 	bl	800f034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e8c:	1d3b      	adds	r3, r7, #4
 8000e8e:	2220      	movs	r2, #32
 8000e90:	2100      	movs	r1, #0
 8000e92:	4618      	mov	r0, r3
 8000e94:	f00e f8ce 	bl	800f034 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e98:	2004      	movs	r0, #4
 8000e9a:	f004 fe1b 	bl	8005ad4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	603b      	str	r3, [r7, #0]
 8000ea2:	4b33      	ldr	r3, [pc, #204]	@ (8000f70 <SystemClock_Config+0xf8>)
 8000ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ea6:	4a32      	ldr	r2, [pc, #200]	@ (8000f70 <SystemClock_Config+0xf8>)
 8000ea8:	f023 0301 	bic.w	r3, r3, #1
 8000eac:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000eae:	4b30      	ldr	r3, [pc, #192]	@ (8000f70 <SystemClock_Config+0xf8>)
 8000eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	4b2e      	ldr	r3, [pc, #184]	@ (8000f74 <SystemClock_Config+0xfc>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ec0:	4a2c      	ldr	r2, [pc, #176]	@ (8000f74 <SystemClock_Config+0xfc>)
 8000ec2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b2a      	ldr	r3, [pc, #168]	@ (8000f74 <SystemClock_Config+0xfc>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ed0:	603b      	str	r3, [r7, #0]
 8000ed2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ed4:	bf00      	nop
 8000ed6:	4b27      	ldr	r3, [pc, #156]	@ (8000f74 <SystemClock_Config+0xfc>)
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ede:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ee2:	d1f8      	bne.n	8000ed6 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000ee4:	2322      	movs	r3, #34	@ 0x22
 8000ee6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eec:	2340      	movs	r3, #64	@ 0x40
 8000eee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000ef0:	2301      	movs	r3, #1
 8000ef2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000efc:	2304      	movs	r3, #4
 8000efe:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000f00:	2319      	movs	r3, #25
 8000f02:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000f04:	2302      	movs	r3, #2
 8000f06:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000f08:	2305      	movs	r3, #5
 8000f0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000f10:	230c      	movs	r3, #12
 8000f12:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f20:	4618      	mov	r0, r3
 8000f22:	f004 fe41 	bl	8005ba8 <HAL_RCC_OscConfig>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000f2c:	f000 f824 	bl	8000f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f30:	233f      	movs	r3, #63	@ 0x3f
 8000f32:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f34:	2303      	movs	r3, #3
 8000f36:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f40:	2340      	movs	r3, #64	@ 0x40
 8000f42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f44:	2340      	movs	r3, #64	@ 0x40
 8000f46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f48:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f4c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f4e:	2340      	movs	r3, #64	@ 0x40
 8000f50:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f52:	1d3b      	adds	r3, r7, #4
 8000f54:	2104      	movs	r1, #4
 8000f56:	4618      	mov	r0, r3
 8000f58:	f005 fa80 	bl	800645c <HAL_RCC_ClockConfig>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000f62:	f000 f809 	bl	8000f78 <Error_Handler>
  }
}
 8000f66:	bf00      	nop
 8000f68:	3770      	adds	r7, #112	@ 0x70
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	58000400 	.word	0x58000400
 8000f74:	58024800 	.word	0x58024800

08000f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f7c:	b672      	cpsid	i
}
 8000f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <Error_Handler+0x8>

08000f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb4 <HAL_MspInit+0x30>)
 8000f8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f90:	4a08      	ldr	r2, [pc, #32]	@ (8000fb4 <HAL_MspInit+0x30>)
 8000f92:	f043 0302 	orr.w	r3, r3, #2
 8000f96:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f9a:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <HAL_MspInit+0x30>)
 8000f9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	58024400 	.word	0x58024400

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <NMI_Handler+0x4>

08000fc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <HardFault_Handler+0x4>

08000fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <MemManage_Handler+0x4>

08000fd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fe0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800100e:	f000 fdf5 	bl	8001bfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 800101c:	4802      	ldr	r0, [pc, #8]	@ (8001028 <DMA1_Stream1_IRQHandler+0x10>)
 800101e:	f001 fd27 	bl	8002a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	24000420 	.word	0x24000420

0800102c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8001030:	4802      	ldr	r0, [pc, #8]	@ (800103c <DMA1_Stream3_IRQHandler+0x10>)
 8001032:	f001 fd1d 	bl	8002a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	24000510 	.word	0x24000510

08001040 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 8001044:	4802      	ldr	r0, [pc, #8]	@ (8001050 <DMA1_Stream4_IRQHandler+0x10>)
 8001046:	f001 fd13 	bl	8002a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	24000498 	.word	0x24000498

08001054 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001058:	4802      	ldr	r0, [pc, #8]	@ (8001064 <DMA1_Stream5_IRQHandler+0x10>)
 800105a:	f001 fd09 	bl	8002a70 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	240003a8 	.word	0x240003a8

08001068 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800106c:	4804      	ldr	r0, [pc, #16]	@ (8001080 <TIM3_IRQHandler+0x18>)
 800106e:	f007 ff37 	bl	8008ee0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 8001072:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001076:	4803      	ldr	r0, [pc, #12]	@ (8001084 <TIM3_IRQHandler+0x1c>)
 8001078:	f003 fa45 	bl	8004506 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 1 */
}
 800107c:	bf00      	nop
 800107e:	bd80      	pop	{r7, pc}
 8001080:	240002c4 	.word	0x240002c4
 8001084:	58020400 	.word	0x58020400

08001088 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800108c:	2000      	movs	r0, #0
 800108e:	f000 fc63 	bl	8001958 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
	...

08001098 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800109c:	4802      	ldr	r0, [pc, #8]	@ (80010a8 <OTG_FS_IRQHandler+0x10>)
 800109e:	f003 fbbc 	bl	800481a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	24001b08 	.word	0x24001b08

080010ac <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim5_ch2;
DMA_HandleTypeDef hdma_tim5_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	@ 0x28
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b2:	f107 031c 	add.w	r3, r7, #28
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010be:	463b      	mov	r3, r7
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
 80010cc:	615a      	str	r2, [r3, #20]
 80010ce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010d0:	4b27      	ldr	r3, [pc, #156]	@ (8001170 <MX_TIM2_Init+0xc4>)
 80010d2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010d6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80010d8:	4b25      	ldr	r3, [pc, #148]	@ (8001170 <MX_TIM2_Init+0xc4>)
 80010da:	2200      	movs	r2, #0
 80010dc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010de:	4b24      	ldr	r3, [pc, #144]	@ (8001170 <MX_TIM2_Init+0xc4>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80010e4:	4b22      	ldr	r3, [pc, #136]	@ (8001170 <MX_TIM2_Init+0xc4>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010ea:	4b21      	ldr	r3, [pc, #132]	@ (8001170 <MX_TIM2_Init+0xc4>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001170 <MX_TIM2_Init+0xc4>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80010f6:	481e      	ldr	r0, [pc, #120]	@ (8001170 <MX_TIM2_Init+0xc4>)
 80010f8:	f007 fc38 	bl	800896c <HAL_TIM_PWM_Init>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001102:	f7ff ff39 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001106:	2300      	movs	r3, #0
 8001108:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800110a:	2300      	movs	r3, #0
 800110c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800110e:	f107 031c 	add.w	r3, r7, #28
 8001112:	4619      	mov	r1, r3
 8001114:	4816      	ldr	r0, [pc, #88]	@ (8001170 <MX_TIM2_Init+0xc4>)
 8001116:	f008 fe5f 	bl	8009dd8 <HAL_TIMEx_MasterConfigSynchronization>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001120:	f7ff ff2a 	bl	8000f78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001124:	2360      	movs	r3, #96	@ 0x60
 8001126:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800112c:	2300      	movs	r3, #0
 800112e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001134:	463b      	mov	r3, r7
 8001136:	2200      	movs	r2, #0
 8001138:	4619      	mov	r1, r3
 800113a:	480d      	ldr	r0, [pc, #52]	@ (8001170 <MX_TIM2_Init+0xc4>)
 800113c:	f007 ffd8 	bl	80090f0 <HAL_TIM_PWM_ConfigChannel>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001146:	f7ff ff17 	bl	8000f78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800114a:	463b      	mov	r3, r7
 800114c:	2208      	movs	r2, #8
 800114e:	4619      	mov	r1, r3
 8001150:	4807      	ldr	r0, [pc, #28]	@ (8001170 <MX_TIM2_Init+0xc4>)
 8001152:	f007 ffcd 	bl	80090f0 <HAL_TIM_PWM_ConfigChannel>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800115c:	f7ff ff0c 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001160:	4803      	ldr	r0, [pc, #12]	@ (8001170 <MX_TIM2_Init+0xc4>)
 8001162:	f000 fa87 	bl	8001674 <HAL_TIM_MspPostInit>

}
 8001166:	bf00      	nop
 8001168:	3728      	adds	r7, #40	@ 0x28
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	24000278 	.word	0x24000278

08001174 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b088      	sub	sp, #32
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800117a:	f107 0310 	add.w	r3, r7, #16
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001192:	4b1d      	ldr	r3, [pc, #116]	@ (8001208 <MX_TIM3_Init+0x94>)
 8001194:	4a1d      	ldr	r2, [pc, #116]	@ (800120c <MX_TIM3_Init+0x98>)
 8001196:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 8001198:	4b1b      	ldr	r3, [pc, #108]	@ (8001208 <MX_TIM3_Init+0x94>)
 800119a:	f242 720f 	movw	r2, #9999	@ 0x270f
 800119e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a0:	4b19      	ldr	r3, [pc, #100]	@ (8001208 <MX_TIM3_Init+0x94>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80011a6:	4b18      	ldr	r3, [pc, #96]	@ (8001208 <MX_TIM3_Init+0x94>)
 80011a8:	2263      	movs	r2, #99	@ 0x63
 80011aa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ac:	4b16      	ldr	r3, [pc, #88]	@ (8001208 <MX_TIM3_Init+0x94>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b2:	4b15      	ldr	r3, [pc, #84]	@ (8001208 <MX_TIM3_Init+0x94>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011b8:	4813      	ldr	r0, [pc, #76]	@ (8001208 <MX_TIM3_Init+0x94>)
 80011ba:	f007 fb07 	bl	80087cc <HAL_TIM_Base_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80011c4:	f7ff fed8 	bl	8000f78 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011ce:	f107 0310 	add.w	r3, r7, #16
 80011d2:	4619      	mov	r1, r3
 80011d4:	480c      	ldr	r0, [pc, #48]	@ (8001208 <MX_TIM3_Init+0x94>)
 80011d6:	f008 f89f 	bl	8009318 <HAL_TIM_ConfigClockSource>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80011e0:	f7ff feca 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e4:	2300      	movs	r3, #0
 80011e6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	4619      	mov	r1, r3
 80011f0:	4805      	ldr	r0, [pc, #20]	@ (8001208 <MX_TIM3_Init+0x94>)
 80011f2:	f008 fdf1 	bl	8009dd8 <HAL_TIMEx_MasterConfigSynchronization>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80011fc:	f7ff febc 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001200:	bf00      	nop
 8001202:	3720      	adds	r7, #32
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	240002c4 	.word	0x240002c4
 800120c:	40000400 	.word	0x40000400

08001210 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08c      	sub	sp, #48	@ 0x30
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001216:	f107 030c 	add.w	r3, r7, #12
 800121a:	2224      	movs	r2, #36	@ 0x24
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f00d ff08 	bl	800f034 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001224:	463b      	mov	r3, r7
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800122e:	4b21      	ldr	r3, [pc, #132]	@ (80012b4 <MX_TIM4_Init+0xa4>)
 8001230:	4a21      	ldr	r2, [pc, #132]	@ (80012b8 <MX_TIM4_Init+0xa8>)
 8001232:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001234:	4b1f      	ldr	r3, [pc, #124]	@ (80012b4 <MX_TIM4_Init+0xa4>)
 8001236:	2200      	movs	r2, #0
 8001238:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123a:	4b1e      	ldr	r3, [pc, #120]	@ (80012b4 <MX_TIM4_Init+0xa4>)
 800123c:	2200      	movs	r2, #0
 800123e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001240:	4b1c      	ldr	r3, [pc, #112]	@ (80012b4 <MX_TIM4_Init+0xa4>)
 8001242:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001246:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001248:	4b1a      	ldr	r3, [pc, #104]	@ (80012b4 <MX_TIM4_Init+0xa4>)
 800124a:	2200      	movs	r2, #0
 800124c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800124e:	4b19      	ldr	r3, [pc, #100]	@ (80012b4 <MX_TIM4_Init+0xa4>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001254:	2303      	movs	r3, #3
 8001256:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001258:	2302      	movs	r3, #2
 800125a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800125c:	2301      	movs	r3, #1
 800125e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001260:	2300      	movs	r3, #0
 8001262:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001268:	2302      	movs	r3, #2
 800126a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800126c:	2301      	movs	r3, #1
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001270:	2300      	movs	r3, #0
 8001272:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	4619      	mov	r1, r3
 800127e:	480d      	ldr	r0, [pc, #52]	@ (80012b4 <MX_TIM4_Init+0xa4>)
 8001280:	f007 fcda 	bl	8008c38 <HAL_TIM_Encoder_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 800128a:	f7ff fe75 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128e:	2300      	movs	r3, #0
 8001290:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001296:	463b      	mov	r3, r7
 8001298:	4619      	mov	r1, r3
 800129a:	4806      	ldr	r0, [pc, #24]	@ (80012b4 <MX_TIM4_Init+0xa4>)
 800129c:	f008 fd9c 	bl	8009dd8 <HAL_TIMEx_MasterConfigSynchronization>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80012a6:	f7ff fe67 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	3730      	adds	r7, #48	@ 0x30
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	24000310 	.word	0x24000310
 80012b8:	40000800 	.word	0x40000800

080012bc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	@ 0x28
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c2:	f107 031c 	add.w	r3, r7, #28
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ce:	463b      	mov	r3, r7
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
 80012dc:	615a      	str	r2, [r3, #20]
 80012de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012e0:	4b26      	ldr	r3, [pc, #152]	@ (800137c <MX_TIM5_Init+0xc0>)
 80012e2:	4a27      	ldr	r2, [pc, #156]	@ (8001380 <MX_TIM5_Init+0xc4>)
 80012e4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80012e6:	4b25      	ldr	r3, [pc, #148]	@ (800137c <MX_TIM5_Init+0xc0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012ec:	4b23      	ldr	r3, [pc, #140]	@ (800137c <MX_TIM5_Init+0xc0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 80012f2:	4b22      	ldr	r3, [pc, #136]	@ (800137c <MX_TIM5_Init+0xc0>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f8:	4b20      	ldr	r3, [pc, #128]	@ (800137c <MX_TIM5_Init+0xc0>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012fe:	4b1f      	ldr	r3, [pc, #124]	@ (800137c <MX_TIM5_Init+0xc0>)
 8001300:	2200      	movs	r2, #0
 8001302:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001304:	481d      	ldr	r0, [pc, #116]	@ (800137c <MX_TIM5_Init+0xc0>)
 8001306:	f007 fb31 	bl	800896c <HAL_TIM_PWM_Init>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001310:	f7ff fe32 	bl	8000f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001318:	2300      	movs	r3, #0
 800131a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800131c:	f107 031c 	add.w	r3, r7, #28
 8001320:	4619      	mov	r1, r3
 8001322:	4816      	ldr	r0, [pc, #88]	@ (800137c <MX_TIM5_Init+0xc0>)
 8001324:	f008 fd58 	bl	8009dd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800132e:	f7ff fe23 	bl	8000f78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001332:	2360      	movs	r3, #96	@ 0x60
 8001334:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800133e:	2300      	movs	r3, #0
 8001340:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001342:	463b      	mov	r3, r7
 8001344:	2204      	movs	r2, #4
 8001346:	4619      	mov	r1, r3
 8001348:	480c      	ldr	r0, [pc, #48]	@ (800137c <MX_TIM5_Init+0xc0>)
 800134a:	f007 fed1 	bl	80090f0 <HAL_TIM_PWM_ConfigChannel>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001354:	f7ff fe10 	bl	8000f78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001358:	463b      	mov	r3, r7
 800135a:	220c      	movs	r2, #12
 800135c:	4619      	mov	r1, r3
 800135e:	4807      	ldr	r0, [pc, #28]	@ (800137c <MX_TIM5_Init+0xc0>)
 8001360:	f007 fec6 	bl	80090f0 <HAL_TIM_PWM_ConfigChannel>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800136a:	f7ff fe05 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800136e:	4803      	ldr	r0, [pc, #12]	@ (800137c <MX_TIM5_Init+0xc0>)
 8001370:	f000 f980 	bl	8001674 <HAL_TIM_MspPostInit>

}
 8001374:	bf00      	nop
 8001376:	3728      	adds	r7, #40	@ 0x28
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}
 800137c:	2400035c 	.word	0x2400035c
 8001380:	40000c00 	.word	0x40000c00

08001384 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001394:	d16f      	bne.n	8001476 <HAL_TIM_PWM_MspInit+0xf2>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001396:	4b74      	ldr	r3, [pc, #464]	@ (8001568 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001398:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800139c:	4a72      	ldr	r2, [pc, #456]	@ (8001568 <HAL_TIM_PWM_MspInit+0x1e4>)
 800139e:	f043 0301 	orr.w	r3, r3, #1
 80013a2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013a6:	4b70      	ldr	r3, [pc, #448]	@ (8001568 <HAL_TIM_PWM_MspInit+0x1e4>)
 80013a8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 80013b4:	4b6d      	ldr	r3, [pc, #436]	@ (800156c <HAL_TIM_PWM_MspInit+0x1e8>)
 80013b6:	4a6e      	ldr	r2, [pc, #440]	@ (8001570 <HAL_TIM_PWM_MspInit+0x1ec>)
 80013b8:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 80013ba:	4b6c      	ldr	r3, [pc, #432]	@ (800156c <HAL_TIM_PWM_MspInit+0x1e8>)
 80013bc:	2212      	movs	r2, #18
 80013be:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013c0:	4b6a      	ldr	r3, [pc, #424]	@ (800156c <HAL_TIM_PWM_MspInit+0x1e8>)
 80013c2:	2240      	movs	r2, #64	@ 0x40
 80013c4:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013c6:	4b69      	ldr	r3, [pc, #420]	@ (800156c <HAL_TIM_PWM_MspInit+0x1e8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80013cc:	4b67      	ldr	r3, [pc, #412]	@ (800156c <HAL_TIM_PWM_MspInit+0x1e8>)
 80013ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80013d2:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013d4:	4b65      	ldr	r3, [pc, #404]	@ (800156c <HAL_TIM_PWM_MspInit+0x1e8>)
 80013d6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013da:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013dc:	4b63      	ldr	r3, [pc, #396]	@ (800156c <HAL_TIM_PWM_MspInit+0x1e8>)
 80013de:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80013e2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80013e4:	4b61      	ldr	r3, [pc, #388]	@ (800156c <HAL_TIM_PWM_MspInit+0x1e8>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80013ea:	4b60      	ldr	r3, [pc, #384]	@ (800156c <HAL_TIM_PWM_MspInit+0x1e8>)
 80013ec:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80013f0:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013f2:	4b5e      	ldr	r3, [pc, #376]	@ (800156c <HAL_TIM_PWM_MspInit+0x1e8>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80013f8:	485c      	ldr	r0, [pc, #368]	@ (800156c <HAL_TIM_PWM_MspInit+0x1e8>)
 80013fa:	f000 fd73 	bl	8001ee4 <HAL_DMA_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 8001404:	f7ff fdb8 	bl	8000f78 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a58      	ldr	r2, [pc, #352]	@ (800156c <HAL_TIM_PWM_MspInit+0x1e8>)
 800140c:	625a      	str	r2, [r3, #36]	@ 0x24
 800140e:	4a57      	ldr	r2, [pc, #348]	@ (800156c <HAL_TIM_PWM_MspInit+0x1e8>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 8001414:	4b57      	ldr	r3, [pc, #348]	@ (8001574 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001416:	4a58      	ldr	r2, [pc, #352]	@ (8001578 <HAL_TIM_PWM_MspInit+0x1f4>)
 8001418:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 800141a:	4b56      	ldr	r3, [pc, #344]	@ (8001574 <HAL_TIM_PWM_MspInit+0x1f0>)
 800141c:	2214      	movs	r2, #20
 800141e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001420:	4b54      	ldr	r3, [pc, #336]	@ (8001574 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001422:	2240      	movs	r2, #64	@ 0x40
 8001424:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001426:	4b53      	ldr	r3, [pc, #332]	@ (8001574 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001428:	2200      	movs	r2, #0
 800142a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800142c:	4b51      	ldr	r3, [pc, #324]	@ (8001574 <HAL_TIM_PWM_MspInit+0x1f0>)
 800142e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001432:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001434:	4b4f      	ldr	r3, [pc, #316]	@ (8001574 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001436:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800143a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800143c:	4b4d      	ldr	r3, [pc, #308]	@ (8001574 <HAL_TIM_PWM_MspInit+0x1f0>)
 800143e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001442:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 8001444:	4b4b      	ldr	r3, [pc, #300]	@ (8001574 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001446:	2200      	movs	r2, #0
 8001448:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 800144a:	4b4a      	ldr	r3, [pc, #296]	@ (8001574 <HAL_TIM_PWM_MspInit+0x1f0>)
 800144c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001450:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001452:	4b48      	ldr	r3, [pc, #288]	@ (8001574 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001454:	2200      	movs	r2, #0
 8001456:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8001458:	4846      	ldr	r0, [pc, #280]	@ (8001574 <HAL_TIM_PWM_MspInit+0x1f0>)
 800145a:	f000 fd43 	bl	8001ee4 <HAL_DMA_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <HAL_TIM_PWM_MspInit+0xe4>
    {
      Error_Handler();
 8001464:	f7ff fd88 	bl	8000f78 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a42      	ldr	r2, [pc, #264]	@ (8001574 <HAL_TIM_PWM_MspInit+0x1f0>)
 800146c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800146e:	4a41      	ldr	r2, [pc, #260]	@ (8001574 <HAL_TIM_PWM_MspInit+0x1f0>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001474:	e073      	b.n	800155e <HAL_TIM_PWM_MspInit+0x1da>
  else if(tim_pwmHandle->Instance==TIM5)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a40      	ldr	r2, [pc, #256]	@ (800157c <HAL_TIM_PWM_MspInit+0x1f8>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d16e      	bne.n	800155e <HAL_TIM_PWM_MspInit+0x1da>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001480:	4b39      	ldr	r3, [pc, #228]	@ (8001568 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001482:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001486:	4a38      	ldr	r2, [pc, #224]	@ (8001568 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001488:	f043 0308 	orr.w	r3, r3, #8
 800148c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001490:	4b35      	ldr	r3, [pc, #212]	@ (8001568 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001492:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001496:	f003 0308 	and.w	r3, r3, #8
 800149a:	60bb      	str	r3, [r7, #8]
 800149c:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 800149e:	4b38      	ldr	r3, [pc, #224]	@ (8001580 <HAL_TIM_PWM_MspInit+0x1fc>)
 80014a0:	4a38      	ldr	r2, [pc, #224]	@ (8001584 <HAL_TIM_PWM_MspInit+0x200>)
 80014a2:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Request = DMA_REQUEST_TIM5_CH2;
 80014a4:	4b36      	ldr	r3, [pc, #216]	@ (8001580 <HAL_TIM_PWM_MspInit+0x1fc>)
 80014a6:	2238      	movs	r2, #56	@ 0x38
 80014a8:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014aa:	4b35      	ldr	r3, [pc, #212]	@ (8001580 <HAL_TIM_PWM_MspInit+0x1fc>)
 80014ac:	2240      	movs	r2, #64	@ 0x40
 80014ae:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b0:	4b33      	ldr	r3, [pc, #204]	@ (8001580 <HAL_TIM_PWM_MspInit+0x1fc>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 80014b6:	4b32      	ldr	r3, [pc, #200]	@ (8001580 <HAL_TIM_PWM_MspInit+0x1fc>)
 80014b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80014bc:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014be:	4b30      	ldr	r3, [pc, #192]	@ (8001580 <HAL_TIM_PWM_MspInit+0x1fc>)
 80014c0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80014c4:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80014c6:	4b2e      	ldr	r3, [pc, #184]	@ (8001580 <HAL_TIM_PWM_MspInit+0x1fc>)
 80014c8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80014cc:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 80014ce:	4b2c      	ldr	r3, [pc, #176]	@ (8001580 <HAL_TIM_PWM_MspInit+0x1fc>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 80014d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001580 <HAL_TIM_PWM_MspInit+0x1fc>)
 80014d6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80014da:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80014dc:	4b28      	ldr	r3, [pc, #160]	@ (8001580 <HAL_TIM_PWM_MspInit+0x1fc>)
 80014de:	2200      	movs	r2, #0
 80014e0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 80014e2:	4827      	ldr	r0, [pc, #156]	@ (8001580 <HAL_TIM_PWM_MspInit+0x1fc>)
 80014e4:	f000 fcfe 	bl	8001ee4 <HAL_DMA_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_TIM_PWM_MspInit+0x16e>
      Error_Handler();
 80014ee:	f7ff fd43 	bl	8000f78 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a22      	ldr	r2, [pc, #136]	@ (8001580 <HAL_TIM_PWM_MspInit+0x1fc>)
 80014f6:	629a      	str	r2, [r3, #40]	@ 0x28
 80014f8:	4a21      	ldr	r2, [pc, #132]	@ (8001580 <HAL_TIM_PWM_MspInit+0x1fc>)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch4.Instance = DMA1_Stream3;
 80014fe:	4b22      	ldr	r3, [pc, #136]	@ (8001588 <HAL_TIM_PWM_MspInit+0x204>)
 8001500:	4a22      	ldr	r2, [pc, #136]	@ (800158c <HAL_TIM_PWM_MspInit+0x208>)
 8001502:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 8001504:	4b20      	ldr	r3, [pc, #128]	@ (8001588 <HAL_TIM_PWM_MspInit+0x204>)
 8001506:	223a      	movs	r2, #58	@ 0x3a
 8001508:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800150a:	4b1f      	ldr	r3, [pc, #124]	@ (8001588 <HAL_TIM_PWM_MspInit+0x204>)
 800150c:	2240      	movs	r2, #64	@ 0x40
 800150e:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 8001510:	4b1d      	ldr	r3, [pc, #116]	@ (8001588 <HAL_TIM_PWM_MspInit+0x204>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 8001516:	4b1c      	ldr	r3, [pc, #112]	@ (8001588 <HAL_TIM_PWM_MspInit+0x204>)
 8001518:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800151c:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800151e:	4b1a      	ldr	r3, [pc, #104]	@ (8001588 <HAL_TIM_PWM_MspInit+0x204>)
 8001520:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001524:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001526:	4b18      	ldr	r3, [pc, #96]	@ (8001588 <HAL_TIM_PWM_MspInit+0x204>)
 8001528:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800152c:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 800152e:	4b16      	ldr	r3, [pc, #88]	@ (8001588 <HAL_TIM_PWM_MspInit+0x204>)
 8001530:	2200      	movs	r2, #0
 8001532:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 8001534:	4b14      	ldr	r3, [pc, #80]	@ (8001588 <HAL_TIM_PWM_MspInit+0x204>)
 8001536:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800153a:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800153c:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <HAL_TIM_PWM_MspInit+0x204>)
 800153e:	2200      	movs	r2, #0
 8001540:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 8001542:	4811      	ldr	r0, [pc, #68]	@ (8001588 <HAL_TIM_PWM_MspInit+0x204>)
 8001544:	f000 fcce 	bl	8001ee4 <HAL_DMA_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <HAL_TIM_PWM_MspInit+0x1ce>
      Error_Handler();
 800154e:	f7ff fd13 	bl	8000f78 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a0c      	ldr	r2, [pc, #48]	@ (8001588 <HAL_TIM_PWM_MspInit+0x204>)
 8001556:	631a      	str	r2, [r3, #48]	@ 0x30
 8001558:	4a0b      	ldr	r2, [pc, #44]	@ (8001588 <HAL_TIM_PWM_MspInit+0x204>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	58024400 	.word	0x58024400
 800156c:	240003a8 	.word	0x240003a8
 8001570:	40020088 	.word	0x40020088
 8001574:	24000420 	.word	0x24000420
 8001578:	40020028 	.word	0x40020028
 800157c:	40000c00 	.word	0x40000c00
 8001580:	24000498 	.word	0x24000498
 8001584:	40020070 	.word	0x40020070
 8001588:	24000510 	.word	0x24000510
 800158c:	40020058 	.word	0x40020058

08001590 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0e      	ldr	r2, [pc, #56]	@ (80015d8 <HAL_TIM_Base_MspInit+0x48>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d116      	bne.n	80015d0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015a2:	4b0e      	ldr	r3, [pc, #56]	@ (80015dc <HAL_TIM_Base_MspInit+0x4c>)
 80015a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015a8:	4a0c      	ldr	r2, [pc, #48]	@ (80015dc <HAL_TIM_Base_MspInit+0x4c>)
 80015aa:	f043 0302 	orr.w	r3, r3, #2
 80015ae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80015b2:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <HAL_TIM_Base_MspInit+0x4c>)
 80015b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	60fb      	str	r3, [r7, #12]
 80015be:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2100      	movs	r1, #0
 80015c4:	201d      	movs	r0, #29
 80015c6:	f000 fc44 	bl	8001e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015ca:	201d      	movs	r0, #29
 80015cc:	f000 fc5b 	bl	8001e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80015d0:	bf00      	nop
 80015d2:	3710      	adds	r7, #16
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40000400 	.word	0x40000400
 80015dc:	58024400 	.word	0x58024400

080015e0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	@ 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a1a      	ldr	r2, [pc, #104]	@ (8001668 <HAL_TIM_Encoder_MspInit+0x88>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d12e      	bne.n	8001660 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001602:	4b1a      	ldr	r3, [pc, #104]	@ (800166c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001604:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001608:	4a18      	ldr	r2, [pc, #96]	@ (800166c <HAL_TIM_Encoder_MspInit+0x8c>)
 800160a:	f043 0304 	orr.w	r3, r3, #4
 800160e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001612:	4b16      	ldr	r3, [pc, #88]	@ (800166c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001614:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001620:	4b12      	ldr	r3, [pc, #72]	@ (800166c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001622:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001626:	4a11      	ldr	r2, [pc, #68]	@ (800166c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001628:	f043 0308 	orr.w	r3, r3, #8
 800162c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001630:	4b0e      	ldr	r3, [pc, #56]	@ (800166c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001636:	f003 0308 	and.w	r3, r3, #8
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800163e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001642:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001650:	2302      	movs	r3, #2
 8001652:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001654:	f107 0314 	add.w	r3, r7, #20
 8001658:	4619      	mov	r1, r3
 800165a:	4805      	ldr	r0, [pc, #20]	@ (8001670 <HAL_TIM_Encoder_MspInit+0x90>)
 800165c:	f002 fd8a 	bl	8004174 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001660:	bf00      	nop
 8001662:	3728      	adds	r7, #40	@ 0x28
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40000800 	.word	0x40000800
 800166c:	58024400 	.word	0x58024400
 8001670:	58020c00 	.word	0x58020c00

08001674 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08a      	sub	sp, #40	@ 0x28
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
 800168a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001694:	d11f      	bne.n	80016d6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	4b24      	ldr	r3, [pc, #144]	@ (8001728 <HAL_TIM_MspPostInit+0xb4>)
 8001698:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800169c:	4a22      	ldr	r2, [pc, #136]	@ (8001728 <HAL_TIM_MspPostInit+0xb4>)
 800169e:	f043 0301 	orr.w	r3, r3, #1
 80016a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016a6:	4b20      	ldr	r3, [pc, #128]	@ (8001728 <HAL_TIM_MspPostInit+0xb4>)
 80016a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	613b      	str	r3, [r7, #16]
 80016b2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80016b4:	2305      	movs	r3, #5
 80016b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2300      	movs	r3, #0
 80016c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016c4:	2301      	movs	r3, #1
 80016c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	4817      	ldr	r0, [pc, #92]	@ (800172c <HAL_TIM_MspPostInit+0xb8>)
 80016d0:	f002 fd50 	bl	8004174 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 80016d4:	e023      	b.n	800171e <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM5)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a15      	ldr	r2, [pc, #84]	@ (8001730 <HAL_TIM_MspPostInit+0xbc>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d11e      	bne.n	800171e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e0:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <HAL_TIM_MspPostInit+0xb4>)
 80016e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e6:	4a10      	ldr	r2, [pc, #64]	@ (8001728 <HAL_TIM_MspPostInit+0xb4>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016f0:	4b0d      	ldr	r3, [pc, #52]	@ (8001728 <HAL_TIM_MspPostInit+0xb4>)
 80016f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	60fb      	str	r3, [r7, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80016fe:	230a      	movs	r3, #10
 8001700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	2302      	movs	r3, #2
 8001704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170a:	2300      	movs	r3, #0
 800170c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800170e:	2302      	movs	r3, #2
 8001710:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	4619      	mov	r1, r3
 8001718:	4804      	ldr	r0, [pc, #16]	@ (800172c <HAL_TIM_MspPostInit+0xb8>)
 800171a:	f002 fd2b 	bl	8004174 <HAL_GPIO_Init>
}
 800171e:	bf00      	nop
 8001720:	3728      	adds	r7, #40	@ 0x28
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	58024400 	.word	0x58024400
 800172c:	58020000 	.word	0x58020000
 8001730:	40000c00 	.word	0x40000c00

08001734 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001734:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800176c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001738:	f7fe ff46 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800173c:	480c      	ldr	r0, [pc, #48]	@ (8001770 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800173e:	490d      	ldr	r1, [pc, #52]	@ (8001774 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001740:	4a0d      	ldr	r2, [pc, #52]	@ (8001778 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001742:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001744:	e002      	b.n	800174c <LoopCopyDataInit>

08001746 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001746:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001748:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800174a:	3304      	adds	r3, #4

0800174c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800174c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800174e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001750:	d3f9      	bcc.n	8001746 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001752:	4a0a      	ldr	r2, [pc, #40]	@ (800177c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001754:	4c0a      	ldr	r4, [pc, #40]	@ (8001780 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001756:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001758:	e001      	b.n	800175e <LoopFillZerobss>

0800175a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800175a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800175c:	3204      	adds	r2, #4

0800175e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800175e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001760:	d3fb      	bcc.n	800175a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001762:	f00d fc6f 	bl	800f044 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001766:	f7ff fac1 	bl	8000cec <main>
  bx  lr
 800176a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800176c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001770:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001774:	24000120 	.word	0x24000120
  ldr r2, =_sidata
 8001778:	0800f1c0 	.word	0x0800f1c0
  ldr r2, =_sbss
 800177c:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8001780:	2400220c 	.word	0x2400220c

08001784 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001784:	e7fe      	b.n	8001784 <ADC3_IRQHandler>
	...

08001788 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08c      	sub	sp, #48	@ 0x30
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001792:	2300      	movs	r3, #0
 8001794:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001796:	79fb      	ldrb	r3, [r7, #7]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d009      	beq.n	80017b0 <BSP_LED_Init+0x28>
 800179c:	79fb      	ldrb	r3, [r7, #7]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d006      	beq.n	80017b0 <BSP_LED_Init+0x28>
 80017a2:	79fb      	ldrb	r3, [r7, #7]
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d003      	beq.n	80017b0 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80017a8:	f06f 0301 	mvn.w	r3, #1
 80017ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80017ae:	e055      	b.n	800185c <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d10f      	bne.n	80017d6 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80017b6:	4b2c      	ldr	r3, [pc, #176]	@ (8001868 <BSP_LED_Init+0xe0>)
 80017b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017bc:	4a2a      	ldr	r2, [pc, #168]	@ (8001868 <BSP_LED_Init+0xe0>)
 80017be:	f043 0302 	orr.w	r3, r3, #2
 80017c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017c6:	4b28      	ldr	r3, [pc, #160]	@ (8001868 <BSP_LED_Init+0xe0>)
 80017c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	e021      	b.n	800181a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d10f      	bne.n	80017fc <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80017dc:	4b22      	ldr	r3, [pc, #136]	@ (8001868 <BSP_LED_Init+0xe0>)
 80017de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017e2:	4a21      	ldr	r2, [pc, #132]	@ (8001868 <BSP_LED_Init+0xe0>)
 80017e4:	f043 0310 	orr.w	r3, r3, #16
 80017e8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001868 <BSP_LED_Init+0xe0>)
 80017ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017f2:	f003 0310 	and.w	r3, r3, #16
 80017f6:	613b      	str	r3, [r7, #16]
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	e00e      	b.n	800181a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80017fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001868 <BSP_LED_Init+0xe0>)
 80017fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001802:	4a19      	ldr	r2, [pc, #100]	@ (8001868 <BSP_LED_Init+0xe0>)
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800180c:	4b16      	ldr	r3, [pc, #88]	@ (8001868 <BSP_LED_Init+0xe0>)
 800180e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	4a13      	ldr	r2, [pc, #76]	@ (800186c <BSP_LED_Init+0xe4>)
 800181e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001822:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001824:	2301      	movs	r3, #1
 8001826:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182c:	2303      	movs	r3, #3
 800182e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	4a0f      	ldr	r2, [pc, #60]	@ (8001870 <BSP_LED_Init+0xe8>)
 8001834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001838:	f107 0218 	add.w	r2, r7, #24
 800183c:	4611      	mov	r1, r2
 800183e:	4618      	mov	r0, r3
 8001840:	f002 fc98 	bl	8004174 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001844:	79fb      	ldrb	r3, [r7, #7]
 8001846:	4a0a      	ldr	r2, [pc, #40]	@ (8001870 <BSP_LED_Init+0xe8>)
 8001848:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	4a07      	ldr	r2, [pc, #28]	@ (800186c <BSP_LED_Init+0xe4>)
 8001850:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001854:	2200      	movs	r2, #0
 8001856:	4619      	mov	r1, r3
 8001858:	f002 fe3c 	bl	80044d4 <HAL_GPIO_WritePin>
  }

  return ret;
 800185c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800185e:	4618      	mov	r0, r3
 8001860:	3730      	adds	r7, #48	@ 0x30
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	58024400 	.word	0x58024400
 800186c:	0800f17c 	.word	0x0800f17c
 8001870:	2400000c 	.word	0x2400000c

08001874 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0
 800187a:	4603      	mov	r3, r0
 800187c:	460a      	mov	r2, r1
 800187e:	71fb      	strb	r3, [r7, #7]
 8001880:	4613      	mov	r3, r2
 8001882:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001884:	4b2e      	ldr	r3, [pc, #184]	@ (8001940 <BSP_PB_Init+0xcc>)
 8001886:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800188a:	4a2d      	ldr	r2, [pc, #180]	@ (8001940 <BSP_PB_Init+0xcc>)
 800188c:	f043 0304 	orr.w	r3, r3, #4
 8001890:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001894:	4b2a      	ldr	r3, [pc, #168]	@ (8001940 <BSP_PB_Init+0xcc>)
 8001896:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800189a:	f003 0304 	and.w	r3, r3, #4
 800189e:	60bb      	str	r3, [r7, #8]
 80018a0:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 80018a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018a6:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 80018a8:	2302      	movs	r3, #2
 80018aa:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80018ac:	2302      	movs	r3, #2
 80018ae:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 80018b0:	79bb      	ldrb	r3, [r7, #6]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d10c      	bne.n	80018d0 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	4a21      	ldr	r2, [pc, #132]	@ (8001944 <BSP_PB_Init+0xd0>)
 80018be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018c2:	f107 020c 	add.w	r2, r7, #12
 80018c6:	4611      	mov	r1, r2
 80018c8:	4618      	mov	r0, r3
 80018ca:	f002 fc53 	bl	8004174 <HAL_GPIO_Init>
 80018ce:	e031      	b.n	8001934 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80018d0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80018d4:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	4a1a      	ldr	r2, [pc, #104]	@ (8001944 <BSP_PB_Init+0xd0>)
 80018da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018de:	f107 020c 	add.w	r2, r7, #12
 80018e2:	4611      	mov	r1, r2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f002 fc45 	bl	8004174 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	4a16      	ldr	r2, [pc, #88]	@ (8001948 <BSP_PB_Init+0xd4>)
 80018f0:	441a      	add	r2, r3
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	4915      	ldr	r1, [pc, #84]	@ (800194c <BSP_PB_Init+0xd8>)
 80018f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80018fa:	4619      	mov	r1, r3
 80018fc:	4610      	mov	r0, r2
 80018fe:	f002 fbe8 	bl	80040d2 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	00db      	lsls	r3, r3, #3
 8001906:	4a10      	ldr	r2, [pc, #64]	@ (8001948 <BSP_PB_Init+0xd4>)
 8001908:	1898      	adds	r0, r3, r2
 800190a:	79fb      	ldrb	r3, [r7, #7]
 800190c:	4a10      	ldr	r2, [pc, #64]	@ (8001950 <BSP_PB_Init+0xdc>)
 800190e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001912:	461a      	mov	r2, r3
 8001914:	2100      	movs	r1, #0
 8001916:	f002 fbbd 	bl	8004094 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800191a:	2028      	movs	r0, #40	@ 0x28
 800191c:	79fb      	ldrb	r3, [r7, #7]
 800191e:	4a0d      	ldr	r2, [pc, #52]	@ (8001954 <BSP_PB_Init+0xe0>)
 8001920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001924:	2200      	movs	r2, #0
 8001926:	4619      	mov	r1, r3
 8001928:	f000 fa93 	bl	8001e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800192c:	2328      	movs	r3, #40	@ 0x28
 800192e:	4618      	mov	r0, r3
 8001930:	f000 faa9 	bl	8001e86 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001934:	2300      	movs	r3, #0
}
 8001936:	4618      	mov	r0, r3
 8001938:	3720      	adds	r7, #32
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	58024400 	.word	0x58024400
 8001944:	24000018 	.word	0x24000018
 8001948:	24000588 	.word	0x24000588
 800194c:	0800f184 	.word	0x0800f184
 8001950:	2400001c 	.word	0x2400001c
 8001954:	24000020 	.word	0x24000020

08001958 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	4a04      	ldr	r2, [pc, #16]	@ (8001978 <BSP_PB_IRQHandler+0x20>)
 8001968:	4413      	add	r3, r2
 800196a:	4618      	mov	r0, r3
 800196c:	f002 fbc6 	bl	80040fc <HAL_EXTI_IRQHandler>
}
 8001970:	bf00      	nop
 8001972:	3708      	adds	r7, #8
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	24000588 	.word	0x24000588

0800197c <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	4603      	mov	r3, r0
 8001984:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001986:	bf00      	nop
 8001988:	370c      	adds	r7, #12
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
	...

08001994 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	6039      	str	r1, [r7, #0]
 800199e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80019aa:	f06f 0301 	mvn.w	r3, #1
 80019ae:	60fb      	str	r3, [r7, #12]
 80019b0:	e018      	b.n	80019e4 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	2294      	movs	r2, #148	@ 0x94
 80019b6:	fb02 f303 	mul.w	r3, r2, r3
 80019ba:	4a0d      	ldr	r2, [pc, #52]	@ (80019f0 <BSP_COM_Init+0x5c>)
 80019bc:	4413      	add	r3, r2
 80019be:	4618      	mov	r0, r3
 80019c0:	f000 f852 	bl	8001a68 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80019c4:	79fb      	ldrb	r3, [r7, #7]
 80019c6:	2294      	movs	r2, #148	@ 0x94
 80019c8:	fb02 f303 	mul.w	r3, r2, r3
 80019cc:	4a08      	ldr	r2, [pc, #32]	@ (80019f0 <BSP_COM_Init+0x5c>)
 80019ce:	4413      	add	r3, r2
 80019d0:	6839      	ldr	r1, [r7, #0]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f000 f80e 	bl	80019f4 <MX_USART3_Init>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d002      	beq.n	80019e4 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80019de:	f06f 0303 	mvn.w	r3, #3
 80019e2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80019e4:	68fb      	ldr	r3, [r7, #12]
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	24000590 	.word	0x24000590

080019f4 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
 80019fc:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80019fe:	4b15      	ldr	r3, [pc, #84]	@ (8001a54 <MX_USART3_Init+0x60>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	220c      	movs	r2, #12
 8001a12:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	895b      	ldrh	r3, [r3, #10]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	891b      	ldrh	r3, [r3, #8]
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	899b      	ldrh	r3, [r3, #12]
 8001a34:	461a      	mov	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a40:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f008 fa74 	bl	8009f30 <HAL_UART_Init>
 8001a48:	4603      	mov	r3, r0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	24000008 	.word	0x24000008

08001a58 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f7ff ff8d 	bl	800197c <BSP_PB_Callback>
}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
	...

08001a68 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	@ 0x28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001a70:	4b27      	ldr	r3, [pc, #156]	@ (8001b10 <COM1_MspInit+0xa8>)
 8001a72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a76:	4a26      	ldr	r2, [pc, #152]	@ (8001b10 <COM1_MspInit+0xa8>)
 8001a78:	f043 0308 	orr.w	r3, r3, #8
 8001a7c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a80:	4b23      	ldr	r3, [pc, #140]	@ (8001b10 <COM1_MspInit+0xa8>)
 8001a82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001a8e:	4b20      	ldr	r3, [pc, #128]	@ (8001b10 <COM1_MspInit+0xa8>)
 8001a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a94:	4a1e      	ldr	r2, [pc, #120]	@ (8001b10 <COM1_MspInit+0xa8>)
 8001a96:	f043 0308 	orr.w	r3, r3, #8
 8001a9a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a9e:	4b1c      	ldr	r3, [pc, #112]	@ (8001b10 <COM1_MspInit+0xa8>)
 8001aa0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001aac:	4b18      	ldr	r3, [pc, #96]	@ (8001b10 <COM1_MspInit+0xa8>)
 8001aae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ab2:	4a17      	ldr	r2, [pc, #92]	@ (8001b10 <COM1_MspInit+0xa8>)
 8001ab4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ab8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001abc:	4b14      	ldr	r3, [pc, #80]	@ (8001b10 <COM1_MspInit+0xa8>)
 8001abe:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ac2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001aca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ace:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001adc:	2307      	movs	r3, #7
 8001ade:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001ae0:	f107 0314 	add.w	r3, r7, #20
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	480b      	ldr	r0, [pc, #44]	@ (8001b14 <COM1_MspInit+0xac>)
 8001ae8:	f002 fb44 	bl	8004174 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001aec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001af0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001af2:	2302      	movs	r3, #2
 8001af4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001af6:	2307      	movs	r3, #7
 8001af8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001afa:	f107 0314 	add.w	r3, r7, #20
 8001afe:	4619      	mov	r1, r3
 8001b00:	4804      	ldr	r0, [pc, #16]	@ (8001b14 <COM1_MspInit+0xac>)
 8001b02:	f002 fb37 	bl	8004174 <HAL_GPIO_Init>
}
 8001b06:	bf00      	nop
 8001b08:	3728      	adds	r7, #40	@ 0x28
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}
 8001b0e:	bf00      	nop
 8001b10:	58024400 	.word	0x58024400
 8001b14:	58020c00 	.word	0x58020c00

08001b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b1e:	2003      	movs	r0, #3
 8001b20:	f000 f98c 	bl	8001e3c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b24:	f004 fe50 	bl	80067c8 <HAL_RCC_GetSysClockFreq>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	4b15      	ldr	r3, [pc, #84]	@ (8001b80 <HAL_Init+0x68>)
 8001b2c:	699b      	ldr	r3, [r3, #24]
 8001b2e:	0a1b      	lsrs	r3, r3, #8
 8001b30:	f003 030f 	and.w	r3, r3, #15
 8001b34:	4913      	ldr	r1, [pc, #76]	@ (8001b84 <HAL_Init+0x6c>)
 8001b36:	5ccb      	ldrb	r3, [r1, r3]
 8001b38:	f003 031f 	and.w	r3, r3, #31
 8001b3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b40:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b42:	4b0f      	ldr	r3, [pc, #60]	@ (8001b80 <HAL_Init+0x68>)
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	4a0e      	ldr	r2, [pc, #56]	@ (8001b84 <HAL_Init+0x6c>)
 8001b4c:	5cd3      	ldrb	r3, [r2, r3]
 8001b4e:	f003 031f 	and.w	r3, r3, #31
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	fa22 f303 	lsr.w	r3, r2, r3
 8001b58:	4a0b      	ldr	r2, [pc, #44]	@ (8001b88 <HAL_Init+0x70>)
 8001b5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b5c:	4a0b      	ldr	r2, [pc, #44]	@ (8001b8c <HAL_Init+0x74>)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b62:	2000      	movs	r0, #0
 8001b64:	f000 f814 	bl	8001b90 <HAL_InitTick>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e002      	b.n	8001b78 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b72:	f7ff fa07 	bl	8000f84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	58024400 	.word	0x58024400
 8001b84:	0800f16c 	.word	0x0800f16c
 8001b88:	24000004 	.word	0x24000004
 8001b8c:	24000000 	.word	0x24000000

08001b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b98:	4b15      	ldr	r3, [pc, #84]	@ (8001bf0 <HAL_InitTick+0x60>)
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e021      	b.n	8001be8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001ba4:	4b13      	ldr	r3, [pc, #76]	@ (8001bf4 <HAL_InitTick+0x64>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b11      	ldr	r3, [pc, #68]	@ (8001bf0 <HAL_InitTick+0x60>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4619      	mov	r1, r3
 8001bae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f000 f971 	bl	8001ea2 <HAL_SYSTICK_Config>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e00e      	b.n	8001be8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b0f      	cmp	r3, #15
 8001bce:	d80a      	bhi.n	8001be6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	6879      	ldr	r1, [r7, #4]
 8001bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd8:	f000 f93b 	bl	8001e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bdc:	4a06      	ldr	r2, [pc, #24]	@ (8001bf8 <HAL_InitTick+0x68>)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
 8001be4:	e000      	b.n	8001be8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	24000028 	.word	0x24000028
 8001bf4:	24000000 	.word	0x24000000
 8001bf8:	24000024 	.word	0x24000024

08001bfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c00:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <HAL_IncTick+0x20>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	461a      	mov	r2, r3
 8001c06:	4b06      	ldr	r3, [pc, #24]	@ (8001c20 <HAL_IncTick+0x24>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4413      	add	r3, r2
 8001c0c:	4a04      	ldr	r2, [pc, #16]	@ (8001c20 <HAL_IncTick+0x24>)
 8001c0e:	6013      	str	r3, [r2, #0]
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	24000028 	.word	0x24000028
 8001c20:	24000624 	.word	0x24000624

08001c24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  return uwTick;
 8001c28:	4b03      	ldr	r3, [pc, #12]	@ (8001c38 <HAL_GetTick+0x14>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr
 8001c36:	bf00      	nop
 8001c38:	24000624 	.word	0x24000624

08001c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c44:	f7ff ffee 	bl	8001c24 <HAL_GetTick>
 8001c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c54:	d005      	beq.n	8001c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c56:	4b0a      	ldr	r3, [pc, #40]	@ (8001c80 <HAL_Delay+0x44>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	4413      	add	r3, r2
 8001c60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c62:	bf00      	nop
 8001c64:	f7ff ffde 	bl	8001c24 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	68bb      	ldr	r3, [r7, #8]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	68fa      	ldr	r2, [r7, #12]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d8f7      	bhi.n	8001c64 <HAL_Delay+0x28>
  {
  }
}
 8001c74:	bf00      	nop
 8001c76:	bf00      	nop
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	24000028 	.word	0x24000028

08001c84 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c88:	4b03      	ldr	r3, [pc, #12]	@ (8001c98 <HAL_GetREVID+0x14>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	0c1b      	lsrs	r3, r3, #16
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	5c001000 	.word	0x5c001000

08001c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b085      	sub	sp, #20
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f003 0307 	and.w	r3, r3, #7
 8001caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cac:	4b0b      	ldr	r3, [pc, #44]	@ (8001cdc <__NVIC_SetPriorityGrouping+0x40>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cb2:	68ba      	ldr	r2, [r7, #8]
 8001cb4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cb8:	4013      	ands	r3, r2
 8001cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001cc4:	4b06      	ldr	r3, [pc, #24]	@ (8001ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cca:	4a04      	ldr	r2, [pc, #16]	@ (8001cdc <__NVIC_SetPriorityGrouping+0x40>)
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	60d3      	str	r3, [r2, #12]
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	e000ed00 	.word	0xe000ed00
 8001ce0:	05fa0000 	.word	0x05fa0000

08001ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ce8:	4b04      	ldr	r3, [pc, #16]	@ (8001cfc <__NVIC_GetPriorityGrouping+0x18>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	0a1b      	lsrs	r3, r3, #8
 8001cee:	f003 0307 	and.w	r3, r3, #7
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	e000ed00 	.word	0xe000ed00

08001d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	4603      	mov	r3, r0
 8001d08:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	db0b      	blt.n	8001d2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d12:	88fb      	ldrh	r3, [r7, #6]
 8001d14:	f003 021f 	and.w	r2, r3, #31
 8001d18:	4907      	ldr	r1, [pc, #28]	@ (8001d38 <__NVIC_EnableIRQ+0x38>)
 8001d1a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d1e:	095b      	lsrs	r3, r3, #5
 8001d20:	2001      	movs	r0, #1
 8001d22:	fa00 f202 	lsl.w	r2, r0, r2
 8001d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	e000e100 	.word	0xe000e100

08001d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b083      	sub	sp, #12
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	4603      	mov	r3, r0
 8001d44:	6039      	str	r1, [r7, #0]
 8001d46:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d48:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	db0a      	blt.n	8001d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	490c      	ldr	r1, [pc, #48]	@ (8001d88 <__NVIC_SetPriority+0x4c>)
 8001d56:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d5a:	0112      	lsls	r2, r2, #4
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	440b      	add	r3, r1
 8001d60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d64:	e00a      	b.n	8001d7c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4908      	ldr	r1, [pc, #32]	@ (8001d8c <__NVIC_SetPriority+0x50>)
 8001d6c:	88fb      	ldrh	r3, [r7, #6]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	3b04      	subs	r3, #4
 8001d74:	0112      	lsls	r2, r2, #4
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	440b      	add	r3, r1
 8001d7a:	761a      	strb	r2, [r3, #24]
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000e100 	.word	0xe000e100
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b089      	sub	sp, #36	@ 0x24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	60f8      	str	r0, [r7, #12]
 8001d98:	60b9      	str	r1, [r7, #8]
 8001d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	f1c3 0307 	rsb	r3, r3, #7
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	bf28      	it	cs
 8001dae:	2304      	movcs	r3, #4
 8001db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	3304      	adds	r3, #4
 8001db6:	2b06      	cmp	r3, #6
 8001db8:	d902      	bls.n	8001dc0 <NVIC_EncodePriority+0x30>
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	3b03      	subs	r3, #3
 8001dbe:	e000      	b.n	8001dc2 <NVIC_EncodePriority+0x32>
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	fa02 f303 	lsl.w	r3, r2, r3
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	fa01 f303 	lsl.w	r3, r1, r3
 8001de2:	43d9      	mvns	r1, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001de8:	4313      	orrs	r3, r2
         );
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3724      	adds	r7, #36	@ 0x24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df4:	4770      	bx	lr
	...

08001df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3b01      	subs	r3, #1
 8001e04:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e08:	d301      	bcc.n	8001e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e00f      	b.n	8001e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e0e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e38 <SysTick_Config+0x40>)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e16:	210f      	movs	r1, #15
 8001e18:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1c:	f7ff ff8e 	bl	8001d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e20:	4b05      	ldr	r3, [pc, #20]	@ (8001e38 <SysTick_Config+0x40>)
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e26:	4b04      	ldr	r3, [pc, #16]	@ (8001e38 <SysTick_Config+0x40>)
 8001e28:	2207      	movs	r2, #7
 8001e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	e000e010 	.word	0xe000e010

08001e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f7ff ff29 	bl	8001c9c <__NVIC_SetPriorityGrouping>
}
 8001e4a:	bf00      	nop
 8001e4c:	3708      	adds	r7, #8
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b086      	sub	sp, #24
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	4603      	mov	r3, r0
 8001e5a:	60b9      	str	r1, [r7, #8]
 8001e5c:	607a      	str	r2, [r7, #4]
 8001e5e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e60:	f7ff ff40 	bl	8001ce4 <__NVIC_GetPriorityGrouping>
 8001e64:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	68b9      	ldr	r1, [r7, #8]
 8001e6a:	6978      	ldr	r0, [r7, #20]
 8001e6c:	f7ff ff90 	bl	8001d90 <NVIC_EncodePriority>
 8001e70:	4602      	mov	r2, r0
 8001e72:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e76:	4611      	mov	r1, r2
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff ff5f 	bl	8001d3c <__NVIC_SetPriority>
}
 8001e7e:	bf00      	nop
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}

08001e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b082      	sub	sp, #8
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e90:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ff33 	bl	8001d00 <__NVIC_EnableIRQ>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b082      	sub	sp, #8
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f7ff ffa4 	bl	8001df8 <SysTick_Config>
 8001eb0:	4603      	mov	r3, r0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
	...

08001ebc <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001ec0:	4b07      	ldr	r3, [pc, #28]	@ (8001ee0 <HAL_GetCurrentCPUID+0x24>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	091b      	lsrs	r3, r3, #4
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	2b07      	cmp	r3, #7
 8001ecc:	d101      	bne.n	8001ed2 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e000      	b.n	8001ed4 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001ed2:	2301      	movs	r3, #1
  }
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	e000ed00 	.word	0xe000ed00

08001ee4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001eec:	f7ff fe9a 	bl	8001c24 <HAL_GetTick>
 8001ef0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e316      	b.n	800252a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a66      	ldr	r2, [pc, #408]	@ (800209c <HAL_DMA_Init+0x1b8>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d04a      	beq.n	8001f9c <HAL_DMA_Init+0xb8>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a65      	ldr	r2, [pc, #404]	@ (80020a0 <HAL_DMA_Init+0x1bc>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d045      	beq.n	8001f9c <HAL_DMA_Init+0xb8>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a63      	ldr	r2, [pc, #396]	@ (80020a4 <HAL_DMA_Init+0x1c0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d040      	beq.n	8001f9c <HAL_DMA_Init+0xb8>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a62      	ldr	r2, [pc, #392]	@ (80020a8 <HAL_DMA_Init+0x1c4>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d03b      	beq.n	8001f9c <HAL_DMA_Init+0xb8>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a60      	ldr	r2, [pc, #384]	@ (80020ac <HAL_DMA_Init+0x1c8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d036      	beq.n	8001f9c <HAL_DMA_Init+0xb8>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a5f      	ldr	r2, [pc, #380]	@ (80020b0 <HAL_DMA_Init+0x1cc>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d031      	beq.n	8001f9c <HAL_DMA_Init+0xb8>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a5d      	ldr	r2, [pc, #372]	@ (80020b4 <HAL_DMA_Init+0x1d0>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d02c      	beq.n	8001f9c <HAL_DMA_Init+0xb8>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a5c      	ldr	r2, [pc, #368]	@ (80020b8 <HAL_DMA_Init+0x1d4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d027      	beq.n	8001f9c <HAL_DMA_Init+0xb8>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a5a      	ldr	r2, [pc, #360]	@ (80020bc <HAL_DMA_Init+0x1d8>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d022      	beq.n	8001f9c <HAL_DMA_Init+0xb8>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a59      	ldr	r2, [pc, #356]	@ (80020c0 <HAL_DMA_Init+0x1dc>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d01d      	beq.n	8001f9c <HAL_DMA_Init+0xb8>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a57      	ldr	r2, [pc, #348]	@ (80020c4 <HAL_DMA_Init+0x1e0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d018      	beq.n	8001f9c <HAL_DMA_Init+0xb8>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a56      	ldr	r2, [pc, #344]	@ (80020c8 <HAL_DMA_Init+0x1e4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d013      	beq.n	8001f9c <HAL_DMA_Init+0xb8>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a54      	ldr	r2, [pc, #336]	@ (80020cc <HAL_DMA_Init+0x1e8>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d00e      	beq.n	8001f9c <HAL_DMA_Init+0xb8>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a53      	ldr	r2, [pc, #332]	@ (80020d0 <HAL_DMA_Init+0x1ec>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d009      	beq.n	8001f9c <HAL_DMA_Init+0xb8>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a51      	ldr	r2, [pc, #324]	@ (80020d4 <HAL_DMA_Init+0x1f0>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d004      	beq.n	8001f9c <HAL_DMA_Init+0xb8>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a50      	ldr	r2, [pc, #320]	@ (80020d8 <HAL_DMA_Init+0x1f4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d101      	bne.n	8001fa0 <HAL_DMA_Init+0xbc>
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e000      	b.n	8001fa2 <HAL_DMA_Init+0xbe>
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	f000 813b 	beq.w	800221e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2202      	movs	r2, #2
 8001fac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a37      	ldr	r2, [pc, #220]	@ (800209c <HAL_DMA_Init+0x1b8>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d04a      	beq.n	8002058 <HAL_DMA_Init+0x174>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a36      	ldr	r2, [pc, #216]	@ (80020a0 <HAL_DMA_Init+0x1bc>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d045      	beq.n	8002058 <HAL_DMA_Init+0x174>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a34      	ldr	r2, [pc, #208]	@ (80020a4 <HAL_DMA_Init+0x1c0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d040      	beq.n	8002058 <HAL_DMA_Init+0x174>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4a33      	ldr	r2, [pc, #204]	@ (80020a8 <HAL_DMA_Init+0x1c4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d03b      	beq.n	8002058 <HAL_DMA_Init+0x174>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a31      	ldr	r2, [pc, #196]	@ (80020ac <HAL_DMA_Init+0x1c8>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d036      	beq.n	8002058 <HAL_DMA_Init+0x174>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a30      	ldr	r2, [pc, #192]	@ (80020b0 <HAL_DMA_Init+0x1cc>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d031      	beq.n	8002058 <HAL_DMA_Init+0x174>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a2e      	ldr	r2, [pc, #184]	@ (80020b4 <HAL_DMA_Init+0x1d0>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d02c      	beq.n	8002058 <HAL_DMA_Init+0x174>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a2d      	ldr	r2, [pc, #180]	@ (80020b8 <HAL_DMA_Init+0x1d4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d027      	beq.n	8002058 <HAL_DMA_Init+0x174>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a2b      	ldr	r2, [pc, #172]	@ (80020bc <HAL_DMA_Init+0x1d8>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d022      	beq.n	8002058 <HAL_DMA_Init+0x174>
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a2a      	ldr	r2, [pc, #168]	@ (80020c0 <HAL_DMA_Init+0x1dc>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d01d      	beq.n	8002058 <HAL_DMA_Init+0x174>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a28      	ldr	r2, [pc, #160]	@ (80020c4 <HAL_DMA_Init+0x1e0>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d018      	beq.n	8002058 <HAL_DMA_Init+0x174>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a27      	ldr	r2, [pc, #156]	@ (80020c8 <HAL_DMA_Init+0x1e4>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d013      	beq.n	8002058 <HAL_DMA_Init+0x174>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a25      	ldr	r2, [pc, #148]	@ (80020cc <HAL_DMA_Init+0x1e8>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d00e      	beq.n	8002058 <HAL_DMA_Init+0x174>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a24      	ldr	r2, [pc, #144]	@ (80020d0 <HAL_DMA_Init+0x1ec>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d009      	beq.n	8002058 <HAL_DMA_Init+0x174>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a22      	ldr	r2, [pc, #136]	@ (80020d4 <HAL_DMA_Init+0x1f0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d004      	beq.n	8002058 <HAL_DMA_Init+0x174>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4a21      	ldr	r2, [pc, #132]	@ (80020d8 <HAL_DMA_Init+0x1f4>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d108      	bne.n	800206a <HAL_DMA_Init+0x186>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681a      	ldr	r2, [r3, #0]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f022 0201 	bic.w	r2, r2, #1
 8002066:	601a      	str	r2, [r3, #0]
 8002068:	e007      	b.n	800207a <HAL_DMA_Init+0x196>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 0201 	bic.w	r2, r2, #1
 8002078:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800207a:	e02f      	b.n	80020dc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800207c:	f7ff fdd2 	bl	8001c24 <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	2b05      	cmp	r3, #5
 8002088:	d928      	bls.n	80020dc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	2220      	movs	r2, #32
 800208e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2203      	movs	r2, #3
 8002094:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e246      	b.n	800252a <HAL_DMA_Init+0x646>
 800209c:	40020010 	.word	0x40020010
 80020a0:	40020028 	.word	0x40020028
 80020a4:	40020040 	.word	0x40020040
 80020a8:	40020058 	.word	0x40020058
 80020ac:	40020070 	.word	0x40020070
 80020b0:	40020088 	.word	0x40020088
 80020b4:	400200a0 	.word	0x400200a0
 80020b8:	400200b8 	.word	0x400200b8
 80020bc:	40020410 	.word	0x40020410
 80020c0:	40020428 	.word	0x40020428
 80020c4:	40020440 	.word	0x40020440
 80020c8:	40020458 	.word	0x40020458
 80020cc:	40020470 	.word	0x40020470
 80020d0:	40020488 	.word	0x40020488
 80020d4:	400204a0 	.word	0x400204a0
 80020d8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d1c8      	bne.n	800207c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	4b83      	ldr	r3, [pc, #524]	@ (8002304 <HAL_DMA_Init+0x420>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8002102:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	691b      	ldr	r3, [r3, #16]
 8002108:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800210e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800211a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a1b      	ldr	r3, [r3, #32]
 8002120:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002122:	697a      	ldr	r2, [r7, #20]
 8002124:	4313      	orrs	r3, r2
 8002126:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212c:	2b04      	cmp	r3, #4
 800212e:	d107      	bne.n	8002140 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002138:	4313      	orrs	r3, r2
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	4313      	orrs	r3, r2
 800213e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002140:	4b71      	ldr	r3, [pc, #452]	@ (8002308 <HAL_DMA_Init+0x424>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b71      	ldr	r3, [pc, #452]	@ (800230c <HAL_DMA_Init+0x428>)
 8002146:	4013      	ands	r3, r2
 8002148:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800214c:	d328      	bcc.n	80021a0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	2b28      	cmp	r3, #40	@ 0x28
 8002154:	d903      	bls.n	800215e <HAL_DMA_Init+0x27a>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b2e      	cmp	r3, #46	@ 0x2e
 800215c:	d917      	bls.n	800218e <HAL_DMA_Init+0x2aa>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	2b3e      	cmp	r3, #62	@ 0x3e
 8002164:	d903      	bls.n	800216e <HAL_DMA_Init+0x28a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b42      	cmp	r3, #66	@ 0x42
 800216c:	d90f      	bls.n	800218e <HAL_DMA_Init+0x2aa>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b46      	cmp	r3, #70	@ 0x46
 8002174:	d903      	bls.n	800217e <HAL_DMA_Init+0x29a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b48      	cmp	r3, #72	@ 0x48
 800217c:	d907      	bls.n	800218e <HAL_DMA_Init+0x2aa>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b4e      	cmp	r3, #78	@ 0x4e
 8002184:	d905      	bls.n	8002192 <HAL_DMA_Init+0x2ae>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b52      	cmp	r3, #82	@ 0x52
 800218c:	d801      	bhi.n	8002192 <HAL_DMA_Init+0x2ae>
 800218e:	2301      	movs	r3, #1
 8002190:	e000      	b.n	8002194 <HAL_DMA_Init+0x2b0>
 8002192:	2300      	movs	r3, #0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800219e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	697a      	ldr	r2, [r7, #20]
 80021a6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	695b      	ldr	r3, [r3, #20]
 80021ae:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f023 0307 	bic.w	r3, r3, #7
 80021b6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	4313      	orrs	r3, r2
 80021c0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c6:	2b04      	cmp	r3, #4
 80021c8:	d117      	bne.n	80021fa <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d00e      	beq.n	80021fa <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f001 fdcf 	bl	8003d80 <DMA_CheckFifoParam>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d008      	beq.n	80021fa <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2240      	movs	r2, #64	@ 0x40
 80021ec:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	e197      	b.n	800252a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f001 fd0a 	bl	8003c1c <DMA_CalcBaseAndBitshift>
 8002208:	4603      	mov	r3, r0
 800220a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002210:	f003 031f 	and.w	r3, r3, #31
 8002214:	223f      	movs	r2, #63	@ 0x3f
 8002216:	409a      	lsls	r2, r3
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	e0cd      	b.n	80023ba <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a3b      	ldr	r2, [pc, #236]	@ (8002310 <HAL_DMA_Init+0x42c>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d022      	beq.n	800226e <HAL_DMA_Init+0x38a>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a39      	ldr	r2, [pc, #228]	@ (8002314 <HAL_DMA_Init+0x430>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d01d      	beq.n	800226e <HAL_DMA_Init+0x38a>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a38      	ldr	r2, [pc, #224]	@ (8002318 <HAL_DMA_Init+0x434>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d018      	beq.n	800226e <HAL_DMA_Init+0x38a>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a36      	ldr	r2, [pc, #216]	@ (800231c <HAL_DMA_Init+0x438>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d013      	beq.n	800226e <HAL_DMA_Init+0x38a>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a35      	ldr	r2, [pc, #212]	@ (8002320 <HAL_DMA_Init+0x43c>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d00e      	beq.n	800226e <HAL_DMA_Init+0x38a>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a33      	ldr	r2, [pc, #204]	@ (8002324 <HAL_DMA_Init+0x440>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d009      	beq.n	800226e <HAL_DMA_Init+0x38a>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a32      	ldr	r2, [pc, #200]	@ (8002328 <HAL_DMA_Init+0x444>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d004      	beq.n	800226e <HAL_DMA_Init+0x38a>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a30      	ldr	r2, [pc, #192]	@ (800232c <HAL_DMA_Init+0x448>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d101      	bne.n	8002272 <HAL_DMA_Init+0x38e>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <HAL_DMA_Init+0x390>
 8002272:	2300      	movs	r3, #0
 8002274:	2b00      	cmp	r3, #0
 8002276:	f000 8097 	beq.w	80023a8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a24      	ldr	r2, [pc, #144]	@ (8002310 <HAL_DMA_Init+0x42c>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d021      	beq.n	80022c8 <HAL_DMA_Init+0x3e4>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a22      	ldr	r2, [pc, #136]	@ (8002314 <HAL_DMA_Init+0x430>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d01c      	beq.n	80022c8 <HAL_DMA_Init+0x3e4>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a21      	ldr	r2, [pc, #132]	@ (8002318 <HAL_DMA_Init+0x434>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d017      	beq.n	80022c8 <HAL_DMA_Init+0x3e4>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a1f      	ldr	r2, [pc, #124]	@ (800231c <HAL_DMA_Init+0x438>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d012      	beq.n	80022c8 <HAL_DMA_Init+0x3e4>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002320 <HAL_DMA_Init+0x43c>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d00d      	beq.n	80022c8 <HAL_DMA_Init+0x3e4>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a1c      	ldr	r2, [pc, #112]	@ (8002324 <HAL_DMA_Init+0x440>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d008      	beq.n	80022c8 <HAL_DMA_Init+0x3e4>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002328 <HAL_DMA_Init+0x444>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d003      	beq.n	80022c8 <HAL_DMA_Init+0x3e4>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a19      	ldr	r2, [pc, #100]	@ (800232c <HAL_DMA_Init+0x448>)
 80022c6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2202      	movs	r2, #2
 80022cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	4b13      	ldr	r3, [pc, #76]	@ (8002330 <HAL_DMA_Init+0x44c>)
 80022e4:	4013      	ands	r3, r2
 80022e6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2b40      	cmp	r3, #64	@ 0x40
 80022ee:	d021      	beq.n	8002334 <HAL_DMA_Init+0x450>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	2b80      	cmp	r3, #128	@ 0x80
 80022f6:	d102      	bne.n	80022fe <HAL_DMA_Init+0x41a>
 80022f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80022fc:	e01b      	b.n	8002336 <HAL_DMA_Init+0x452>
 80022fe:	2300      	movs	r3, #0
 8002300:	e019      	b.n	8002336 <HAL_DMA_Init+0x452>
 8002302:	bf00      	nop
 8002304:	fe10803f 	.word	0xfe10803f
 8002308:	5c001000 	.word	0x5c001000
 800230c:	ffff0000 	.word	0xffff0000
 8002310:	58025408 	.word	0x58025408
 8002314:	5802541c 	.word	0x5802541c
 8002318:	58025430 	.word	0x58025430
 800231c:	58025444 	.word	0x58025444
 8002320:	58025458 	.word	0x58025458
 8002324:	5802546c 	.word	0x5802546c
 8002328:	58025480 	.word	0x58025480
 800232c:	58025494 	.word	0x58025494
 8002330:	fffe000f 	.word	0xfffe000f
 8002334:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68d2      	ldr	r2, [r2, #12]
 800233a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800233c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002344:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800234c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002354:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800235c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6a1b      	ldr	r3, [r3, #32]
 8002362:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002364:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002366:	697a      	ldr	r2, [r7, #20]
 8002368:	4313      	orrs	r3, r2
 800236a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	697a      	ldr	r2, [r7, #20]
 8002372:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	4b6e      	ldr	r3, [pc, #440]	@ (8002534 <HAL_DMA_Init+0x650>)
 800237c:	4413      	add	r3, r2
 800237e:	4a6e      	ldr	r2, [pc, #440]	@ (8002538 <HAL_DMA_Init+0x654>)
 8002380:	fba2 2303 	umull	r2, r3, r2, r3
 8002384:	091b      	lsrs	r3, r3, #4
 8002386:	009a      	lsls	r2, r3, #2
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f001 fc45 	bl	8003c1c <DMA_CalcBaseAndBitshift>
 8002392:	4603      	mov	r3, r0
 8002394:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800239a:	f003 031f 	and.w	r3, r3, #31
 800239e:	2201      	movs	r2, #1
 80023a0:	409a      	lsls	r2, r3
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	e008      	b.n	80023ba <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2240      	movs	r2, #64	@ 0x40
 80023ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2203      	movs	r2, #3
 80023b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e0b7      	b.n	800252a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a5f      	ldr	r2, [pc, #380]	@ (800253c <HAL_DMA_Init+0x658>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d072      	beq.n	80024aa <HAL_DMA_Init+0x5c6>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a5d      	ldr	r2, [pc, #372]	@ (8002540 <HAL_DMA_Init+0x65c>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d06d      	beq.n	80024aa <HAL_DMA_Init+0x5c6>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a5c      	ldr	r2, [pc, #368]	@ (8002544 <HAL_DMA_Init+0x660>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d068      	beq.n	80024aa <HAL_DMA_Init+0x5c6>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a5a      	ldr	r2, [pc, #360]	@ (8002548 <HAL_DMA_Init+0x664>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d063      	beq.n	80024aa <HAL_DMA_Init+0x5c6>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a59      	ldr	r2, [pc, #356]	@ (800254c <HAL_DMA_Init+0x668>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d05e      	beq.n	80024aa <HAL_DMA_Init+0x5c6>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a57      	ldr	r2, [pc, #348]	@ (8002550 <HAL_DMA_Init+0x66c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d059      	beq.n	80024aa <HAL_DMA_Init+0x5c6>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a56      	ldr	r2, [pc, #344]	@ (8002554 <HAL_DMA_Init+0x670>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d054      	beq.n	80024aa <HAL_DMA_Init+0x5c6>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a54      	ldr	r2, [pc, #336]	@ (8002558 <HAL_DMA_Init+0x674>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d04f      	beq.n	80024aa <HAL_DMA_Init+0x5c6>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a53      	ldr	r2, [pc, #332]	@ (800255c <HAL_DMA_Init+0x678>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d04a      	beq.n	80024aa <HAL_DMA_Init+0x5c6>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a51      	ldr	r2, [pc, #324]	@ (8002560 <HAL_DMA_Init+0x67c>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d045      	beq.n	80024aa <HAL_DMA_Init+0x5c6>
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a50      	ldr	r2, [pc, #320]	@ (8002564 <HAL_DMA_Init+0x680>)
 8002424:	4293      	cmp	r3, r2
 8002426:	d040      	beq.n	80024aa <HAL_DMA_Init+0x5c6>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a4e      	ldr	r2, [pc, #312]	@ (8002568 <HAL_DMA_Init+0x684>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d03b      	beq.n	80024aa <HAL_DMA_Init+0x5c6>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a4d      	ldr	r2, [pc, #308]	@ (800256c <HAL_DMA_Init+0x688>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d036      	beq.n	80024aa <HAL_DMA_Init+0x5c6>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a4b      	ldr	r2, [pc, #300]	@ (8002570 <HAL_DMA_Init+0x68c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d031      	beq.n	80024aa <HAL_DMA_Init+0x5c6>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a4a      	ldr	r2, [pc, #296]	@ (8002574 <HAL_DMA_Init+0x690>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d02c      	beq.n	80024aa <HAL_DMA_Init+0x5c6>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a48      	ldr	r2, [pc, #288]	@ (8002578 <HAL_DMA_Init+0x694>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d027      	beq.n	80024aa <HAL_DMA_Init+0x5c6>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a47      	ldr	r2, [pc, #284]	@ (800257c <HAL_DMA_Init+0x698>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d022      	beq.n	80024aa <HAL_DMA_Init+0x5c6>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a45      	ldr	r2, [pc, #276]	@ (8002580 <HAL_DMA_Init+0x69c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d01d      	beq.n	80024aa <HAL_DMA_Init+0x5c6>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a44      	ldr	r2, [pc, #272]	@ (8002584 <HAL_DMA_Init+0x6a0>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d018      	beq.n	80024aa <HAL_DMA_Init+0x5c6>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a42      	ldr	r2, [pc, #264]	@ (8002588 <HAL_DMA_Init+0x6a4>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d013      	beq.n	80024aa <HAL_DMA_Init+0x5c6>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a41      	ldr	r2, [pc, #260]	@ (800258c <HAL_DMA_Init+0x6a8>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d00e      	beq.n	80024aa <HAL_DMA_Init+0x5c6>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a3f      	ldr	r2, [pc, #252]	@ (8002590 <HAL_DMA_Init+0x6ac>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d009      	beq.n	80024aa <HAL_DMA_Init+0x5c6>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a3e      	ldr	r2, [pc, #248]	@ (8002594 <HAL_DMA_Init+0x6b0>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d004      	beq.n	80024aa <HAL_DMA_Init+0x5c6>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a3c      	ldr	r2, [pc, #240]	@ (8002598 <HAL_DMA_Init+0x6b4>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d101      	bne.n	80024ae <HAL_DMA_Init+0x5ca>
 80024aa:	2301      	movs	r3, #1
 80024ac:	e000      	b.n	80024b0 <HAL_DMA_Init+0x5cc>
 80024ae:	2300      	movs	r3, #0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d032      	beq.n	800251a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f001 fcdf 	bl	8003e78 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b80      	cmp	r3, #128	@ 0x80
 80024c0:	d102      	bne.n	80024c8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685a      	ldr	r2, [r3, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80024d0:	b2d2      	uxtb	r2, r2
 80024d2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80024dc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d010      	beq.n	8002508 <HAL_DMA_Init+0x624>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	2b08      	cmp	r3, #8
 80024ec:	d80c      	bhi.n	8002508 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f001 fd5c 	bl	8003fac <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024f8:	2200      	movs	r2, #0
 80024fa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	e008      	b.n	800251a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2200      	movs	r2, #0
 800250c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2200      	movs	r2, #0
 8002518:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3718      	adds	r7, #24
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	a7fdabf8 	.word	0xa7fdabf8
 8002538:	cccccccd 	.word	0xcccccccd
 800253c:	40020010 	.word	0x40020010
 8002540:	40020028 	.word	0x40020028
 8002544:	40020040 	.word	0x40020040
 8002548:	40020058 	.word	0x40020058
 800254c:	40020070 	.word	0x40020070
 8002550:	40020088 	.word	0x40020088
 8002554:	400200a0 	.word	0x400200a0
 8002558:	400200b8 	.word	0x400200b8
 800255c:	40020410 	.word	0x40020410
 8002560:	40020428 	.word	0x40020428
 8002564:	40020440 	.word	0x40020440
 8002568:	40020458 	.word	0x40020458
 800256c:	40020470 	.word	0x40020470
 8002570:	40020488 	.word	0x40020488
 8002574:	400204a0 	.word	0x400204a0
 8002578:	400204b8 	.word	0x400204b8
 800257c:	58025408 	.word	0x58025408
 8002580:	5802541c 	.word	0x5802541c
 8002584:	58025430 	.word	0x58025430
 8002588:	58025444 	.word	0x58025444
 800258c:	58025458 	.word	0x58025458
 8002590:	5802546c 	.word	0x5802546c
 8002594:	58025480 	.word	0x58025480
 8002598:	58025494 	.word	0x58025494

0800259c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	60f8      	str	r0, [r7, #12]
 80025a4:	60b9      	str	r1, [r7, #8]
 80025a6:	607a      	str	r2, [r7, #4]
 80025a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025aa:	2300      	movs	r3, #0
 80025ac:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e226      	b.n	8002a06 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d101      	bne.n	80025c6 <HAL_DMA_Start_IT+0x2a>
 80025c2:	2302      	movs	r3, #2
 80025c4:	e21f      	b.n	8002a06 <HAL_DMA_Start_IT+0x46a>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	f040 820a 	bne.w	80029f0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2202      	movs	r2, #2
 80025e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	2200      	movs	r2, #0
 80025e8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a68      	ldr	r2, [pc, #416]	@ (8002790 <HAL_DMA_Start_IT+0x1f4>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d04a      	beq.n	800268a <HAL_DMA_Start_IT+0xee>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a66      	ldr	r2, [pc, #408]	@ (8002794 <HAL_DMA_Start_IT+0x1f8>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d045      	beq.n	800268a <HAL_DMA_Start_IT+0xee>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a65      	ldr	r2, [pc, #404]	@ (8002798 <HAL_DMA_Start_IT+0x1fc>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d040      	beq.n	800268a <HAL_DMA_Start_IT+0xee>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a63      	ldr	r2, [pc, #396]	@ (800279c <HAL_DMA_Start_IT+0x200>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d03b      	beq.n	800268a <HAL_DMA_Start_IT+0xee>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a62      	ldr	r2, [pc, #392]	@ (80027a0 <HAL_DMA_Start_IT+0x204>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d036      	beq.n	800268a <HAL_DMA_Start_IT+0xee>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a60      	ldr	r2, [pc, #384]	@ (80027a4 <HAL_DMA_Start_IT+0x208>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d031      	beq.n	800268a <HAL_DMA_Start_IT+0xee>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a5f      	ldr	r2, [pc, #380]	@ (80027a8 <HAL_DMA_Start_IT+0x20c>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d02c      	beq.n	800268a <HAL_DMA_Start_IT+0xee>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a5d      	ldr	r2, [pc, #372]	@ (80027ac <HAL_DMA_Start_IT+0x210>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d027      	beq.n	800268a <HAL_DMA_Start_IT+0xee>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a5c      	ldr	r2, [pc, #368]	@ (80027b0 <HAL_DMA_Start_IT+0x214>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d022      	beq.n	800268a <HAL_DMA_Start_IT+0xee>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a5a      	ldr	r2, [pc, #360]	@ (80027b4 <HAL_DMA_Start_IT+0x218>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d01d      	beq.n	800268a <HAL_DMA_Start_IT+0xee>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a59      	ldr	r2, [pc, #356]	@ (80027b8 <HAL_DMA_Start_IT+0x21c>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d018      	beq.n	800268a <HAL_DMA_Start_IT+0xee>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a57      	ldr	r2, [pc, #348]	@ (80027bc <HAL_DMA_Start_IT+0x220>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d013      	beq.n	800268a <HAL_DMA_Start_IT+0xee>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a56      	ldr	r2, [pc, #344]	@ (80027c0 <HAL_DMA_Start_IT+0x224>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d00e      	beq.n	800268a <HAL_DMA_Start_IT+0xee>
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a54      	ldr	r2, [pc, #336]	@ (80027c4 <HAL_DMA_Start_IT+0x228>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d009      	beq.n	800268a <HAL_DMA_Start_IT+0xee>
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a53      	ldr	r2, [pc, #332]	@ (80027c8 <HAL_DMA_Start_IT+0x22c>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d004      	beq.n	800268a <HAL_DMA_Start_IT+0xee>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a51      	ldr	r2, [pc, #324]	@ (80027cc <HAL_DMA_Start_IT+0x230>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d108      	bne.n	800269c <HAL_DMA_Start_IT+0x100>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0201 	bic.w	r2, r2, #1
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	e007      	b.n	80026ac <HAL_DMA_Start_IT+0x110>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 0201 	bic.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	68b9      	ldr	r1, [r7, #8]
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f001 f906 	bl	80038c4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a34      	ldr	r2, [pc, #208]	@ (8002790 <HAL_DMA_Start_IT+0x1f4>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d04a      	beq.n	8002758 <HAL_DMA_Start_IT+0x1bc>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a33      	ldr	r2, [pc, #204]	@ (8002794 <HAL_DMA_Start_IT+0x1f8>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d045      	beq.n	8002758 <HAL_DMA_Start_IT+0x1bc>
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a31      	ldr	r2, [pc, #196]	@ (8002798 <HAL_DMA_Start_IT+0x1fc>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d040      	beq.n	8002758 <HAL_DMA_Start_IT+0x1bc>
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a30      	ldr	r2, [pc, #192]	@ (800279c <HAL_DMA_Start_IT+0x200>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d03b      	beq.n	8002758 <HAL_DMA_Start_IT+0x1bc>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a2e      	ldr	r2, [pc, #184]	@ (80027a0 <HAL_DMA_Start_IT+0x204>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d036      	beq.n	8002758 <HAL_DMA_Start_IT+0x1bc>
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a2d      	ldr	r2, [pc, #180]	@ (80027a4 <HAL_DMA_Start_IT+0x208>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d031      	beq.n	8002758 <HAL_DMA_Start_IT+0x1bc>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a2b      	ldr	r2, [pc, #172]	@ (80027a8 <HAL_DMA_Start_IT+0x20c>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d02c      	beq.n	8002758 <HAL_DMA_Start_IT+0x1bc>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a2a      	ldr	r2, [pc, #168]	@ (80027ac <HAL_DMA_Start_IT+0x210>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d027      	beq.n	8002758 <HAL_DMA_Start_IT+0x1bc>
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a28      	ldr	r2, [pc, #160]	@ (80027b0 <HAL_DMA_Start_IT+0x214>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d022      	beq.n	8002758 <HAL_DMA_Start_IT+0x1bc>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a27      	ldr	r2, [pc, #156]	@ (80027b4 <HAL_DMA_Start_IT+0x218>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d01d      	beq.n	8002758 <HAL_DMA_Start_IT+0x1bc>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a25      	ldr	r2, [pc, #148]	@ (80027b8 <HAL_DMA_Start_IT+0x21c>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d018      	beq.n	8002758 <HAL_DMA_Start_IT+0x1bc>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a24      	ldr	r2, [pc, #144]	@ (80027bc <HAL_DMA_Start_IT+0x220>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d013      	beq.n	8002758 <HAL_DMA_Start_IT+0x1bc>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a22      	ldr	r2, [pc, #136]	@ (80027c0 <HAL_DMA_Start_IT+0x224>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d00e      	beq.n	8002758 <HAL_DMA_Start_IT+0x1bc>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a21      	ldr	r2, [pc, #132]	@ (80027c4 <HAL_DMA_Start_IT+0x228>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d009      	beq.n	8002758 <HAL_DMA_Start_IT+0x1bc>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a1f      	ldr	r2, [pc, #124]	@ (80027c8 <HAL_DMA_Start_IT+0x22c>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d004      	beq.n	8002758 <HAL_DMA_Start_IT+0x1bc>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a1e      	ldr	r2, [pc, #120]	@ (80027cc <HAL_DMA_Start_IT+0x230>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d101      	bne.n	800275c <HAL_DMA_Start_IT+0x1c0>
 8002758:	2301      	movs	r3, #1
 800275a:	e000      	b.n	800275e <HAL_DMA_Start_IT+0x1c2>
 800275c:	2300      	movs	r3, #0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d036      	beq.n	80027d0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f023 021e 	bic.w	r2, r3, #30
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f042 0216 	orr.w	r2, r2, #22
 8002774:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	2b00      	cmp	r3, #0
 800277c:	d03e      	beq.n	80027fc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 0208 	orr.w	r2, r2, #8
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	e035      	b.n	80027fc <HAL_DMA_Start_IT+0x260>
 8002790:	40020010 	.word	0x40020010
 8002794:	40020028 	.word	0x40020028
 8002798:	40020040 	.word	0x40020040
 800279c:	40020058 	.word	0x40020058
 80027a0:	40020070 	.word	0x40020070
 80027a4:	40020088 	.word	0x40020088
 80027a8:	400200a0 	.word	0x400200a0
 80027ac:	400200b8 	.word	0x400200b8
 80027b0:	40020410 	.word	0x40020410
 80027b4:	40020428 	.word	0x40020428
 80027b8:	40020440 	.word	0x40020440
 80027bc:	40020458 	.word	0x40020458
 80027c0:	40020470 	.word	0x40020470
 80027c4:	40020488 	.word	0x40020488
 80027c8:	400204a0 	.word	0x400204a0
 80027cc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 020e 	bic.w	r2, r3, #14
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f042 020a 	orr.w	r2, r2, #10
 80027e2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d007      	beq.n	80027fc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f042 0204 	orr.w	r2, r2, #4
 80027fa:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a83      	ldr	r2, [pc, #524]	@ (8002a10 <HAL_DMA_Start_IT+0x474>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d072      	beq.n	80028ec <HAL_DMA_Start_IT+0x350>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a82      	ldr	r2, [pc, #520]	@ (8002a14 <HAL_DMA_Start_IT+0x478>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d06d      	beq.n	80028ec <HAL_DMA_Start_IT+0x350>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a80      	ldr	r2, [pc, #512]	@ (8002a18 <HAL_DMA_Start_IT+0x47c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d068      	beq.n	80028ec <HAL_DMA_Start_IT+0x350>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a7f      	ldr	r2, [pc, #508]	@ (8002a1c <HAL_DMA_Start_IT+0x480>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d063      	beq.n	80028ec <HAL_DMA_Start_IT+0x350>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a7d      	ldr	r2, [pc, #500]	@ (8002a20 <HAL_DMA_Start_IT+0x484>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d05e      	beq.n	80028ec <HAL_DMA_Start_IT+0x350>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4a7c      	ldr	r2, [pc, #496]	@ (8002a24 <HAL_DMA_Start_IT+0x488>)
 8002834:	4293      	cmp	r3, r2
 8002836:	d059      	beq.n	80028ec <HAL_DMA_Start_IT+0x350>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a7a      	ldr	r2, [pc, #488]	@ (8002a28 <HAL_DMA_Start_IT+0x48c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d054      	beq.n	80028ec <HAL_DMA_Start_IT+0x350>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a79      	ldr	r2, [pc, #484]	@ (8002a2c <HAL_DMA_Start_IT+0x490>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d04f      	beq.n	80028ec <HAL_DMA_Start_IT+0x350>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a77      	ldr	r2, [pc, #476]	@ (8002a30 <HAL_DMA_Start_IT+0x494>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d04a      	beq.n	80028ec <HAL_DMA_Start_IT+0x350>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a76      	ldr	r2, [pc, #472]	@ (8002a34 <HAL_DMA_Start_IT+0x498>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d045      	beq.n	80028ec <HAL_DMA_Start_IT+0x350>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a74      	ldr	r2, [pc, #464]	@ (8002a38 <HAL_DMA_Start_IT+0x49c>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d040      	beq.n	80028ec <HAL_DMA_Start_IT+0x350>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a73      	ldr	r2, [pc, #460]	@ (8002a3c <HAL_DMA_Start_IT+0x4a0>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d03b      	beq.n	80028ec <HAL_DMA_Start_IT+0x350>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a71      	ldr	r2, [pc, #452]	@ (8002a40 <HAL_DMA_Start_IT+0x4a4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d036      	beq.n	80028ec <HAL_DMA_Start_IT+0x350>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a70      	ldr	r2, [pc, #448]	@ (8002a44 <HAL_DMA_Start_IT+0x4a8>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d031      	beq.n	80028ec <HAL_DMA_Start_IT+0x350>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a6e      	ldr	r2, [pc, #440]	@ (8002a48 <HAL_DMA_Start_IT+0x4ac>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d02c      	beq.n	80028ec <HAL_DMA_Start_IT+0x350>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a6d      	ldr	r2, [pc, #436]	@ (8002a4c <HAL_DMA_Start_IT+0x4b0>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d027      	beq.n	80028ec <HAL_DMA_Start_IT+0x350>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a6b      	ldr	r2, [pc, #428]	@ (8002a50 <HAL_DMA_Start_IT+0x4b4>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d022      	beq.n	80028ec <HAL_DMA_Start_IT+0x350>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a6a      	ldr	r2, [pc, #424]	@ (8002a54 <HAL_DMA_Start_IT+0x4b8>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d01d      	beq.n	80028ec <HAL_DMA_Start_IT+0x350>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a68      	ldr	r2, [pc, #416]	@ (8002a58 <HAL_DMA_Start_IT+0x4bc>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d018      	beq.n	80028ec <HAL_DMA_Start_IT+0x350>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a67      	ldr	r2, [pc, #412]	@ (8002a5c <HAL_DMA_Start_IT+0x4c0>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d013      	beq.n	80028ec <HAL_DMA_Start_IT+0x350>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a65      	ldr	r2, [pc, #404]	@ (8002a60 <HAL_DMA_Start_IT+0x4c4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d00e      	beq.n	80028ec <HAL_DMA_Start_IT+0x350>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a64      	ldr	r2, [pc, #400]	@ (8002a64 <HAL_DMA_Start_IT+0x4c8>)
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d009      	beq.n	80028ec <HAL_DMA_Start_IT+0x350>
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a62      	ldr	r2, [pc, #392]	@ (8002a68 <HAL_DMA_Start_IT+0x4cc>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d004      	beq.n	80028ec <HAL_DMA_Start_IT+0x350>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a61      	ldr	r2, [pc, #388]	@ (8002a6c <HAL_DMA_Start_IT+0x4d0>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d101      	bne.n	80028f0 <HAL_DMA_Start_IT+0x354>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <HAL_DMA_Start_IT+0x356>
 80028f0:	2300      	movs	r3, #0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d01a      	beq.n	800292c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d007      	beq.n	8002914 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800290e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002912:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002918:	2b00      	cmp	r3, #0
 800291a:	d007      	beq.n	800292c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002926:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800292a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a37      	ldr	r2, [pc, #220]	@ (8002a10 <HAL_DMA_Start_IT+0x474>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d04a      	beq.n	80029cc <HAL_DMA_Start_IT+0x430>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a36      	ldr	r2, [pc, #216]	@ (8002a14 <HAL_DMA_Start_IT+0x478>)
 800293c:	4293      	cmp	r3, r2
 800293e:	d045      	beq.n	80029cc <HAL_DMA_Start_IT+0x430>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a34      	ldr	r2, [pc, #208]	@ (8002a18 <HAL_DMA_Start_IT+0x47c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d040      	beq.n	80029cc <HAL_DMA_Start_IT+0x430>
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a33      	ldr	r2, [pc, #204]	@ (8002a1c <HAL_DMA_Start_IT+0x480>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d03b      	beq.n	80029cc <HAL_DMA_Start_IT+0x430>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a31      	ldr	r2, [pc, #196]	@ (8002a20 <HAL_DMA_Start_IT+0x484>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d036      	beq.n	80029cc <HAL_DMA_Start_IT+0x430>
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a30      	ldr	r2, [pc, #192]	@ (8002a24 <HAL_DMA_Start_IT+0x488>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d031      	beq.n	80029cc <HAL_DMA_Start_IT+0x430>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a2e      	ldr	r2, [pc, #184]	@ (8002a28 <HAL_DMA_Start_IT+0x48c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d02c      	beq.n	80029cc <HAL_DMA_Start_IT+0x430>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a2d      	ldr	r2, [pc, #180]	@ (8002a2c <HAL_DMA_Start_IT+0x490>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d027      	beq.n	80029cc <HAL_DMA_Start_IT+0x430>
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a2b      	ldr	r2, [pc, #172]	@ (8002a30 <HAL_DMA_Start_IT+0x494>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d022      	beq.n	80029cc <HAL_DMA_Start_IT+0x430>
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a2a      	ldr	r2, [pc, #168]	@ (8002a34 <HAL_DMA_Start_IT+0x498>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d01d      	beq.n	80029cc <HAL_DMA_Start_IT+0x430>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a28      	ldr	r2, [pc, #160]	@ (8002a38 <HAL_DMA_Start_IT+0x49c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d018      	beq.n	80029cc <HAL_DMA_Start_IT+0x430>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4a27      	ldr	r2, [pc, #156]	@ (8002a3c <HAL_DMA_Start_IT+0x4a0>)
 80029a0:	4293      	cmp	r3, r2
 80029a2:	d013      	beq.n	80029cc <HAL_DMA_Start_IT+0x430>
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a25      	ldr	r2, [pc, #148]	@ (8002a40 <HAL_DMA_Start_IT+0x4a4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d00e      	beq.n	80029cc <HAL_DMA_Start_IT+0x430>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a24      	ldr	r2, [pc, #144]	@ (8002a44 <HAL_DMA_Start_IT+0x4a8>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d009      	beq.n	80029cc <HAL_DMA_Start_IT+0x430>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a22      	ldr	r2, [pc, #136]	@ (8002a48 <HAL_DMA_Start_IT+0x4ac>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d004      	beq.n	80029cc <HAL_DMA_Start_IT+0x430>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a21      	ldr	r2, [pc, #132]	@ (8002a4c <HAL_DMA_Start_IT+0x4b0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d108      	bne.n	80029de <HAL_DMA_Start_IT+0x442>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0201 	orr.w	r2, r2, #1
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	e012      	b.n	8002a04 <HAL_DMA_Start_IT+0x468>
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f042 0201 	orr.w	r2, r2, #1
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	e009      	b.n	8002a04 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80029f6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40020010 	.word	0x40020010
 8002a14:	40020028 	.word	0x40020028
 8002a18:	40020040 	.word	0x40020040
 8002a1c:	40020058 	.word	0x40020058
 8002a20:	40020070 	.word	0x40020070
 8002a24:	40020088 	.word	0x40020088
 8002a28:	400200a0 	.word	0x400200a0
 8002a2c:	400200b8 	.word	0x400200b8
 8002a30:	40020410 	.word	0x40020410
 8002a34:	40020428 	.word	0x40020428
 8002a38:	40020440 	.word	0x40020440
 8002a3c:	40020458 	.word	0x40020458
 8002a40:	40020470 	.word	0x40020470
 8002a44:	40020488 	.word	0x40020488
 8002a48:	400204a0 	.word	0x400204a0
 8002a4c:	400204b8 	.word	0x400204b8
 8002a50:	58025408 	.word	0x58025408
 8002a54:	5802541c 	.word	0x5802541c
 8002a58:	58025430 	.word	0x58025430
 8002a5c:	58025444 	.word	0x58025444
 8002a60:	58025458 	.word	0x58025458
 8002a64:	5802546c 	.word	0x5802546c
 8002a68:	58025480 	.word	0x58025480
 8002a6c:	58025494 	.word	0x58025494

08002a70 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08a      	sub	sp, #40	@ 0x28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a7c:	4b67      	ldr	r3, [pc, #412]	@ (8002c1c <HAL_DMA_IRQHandler+0x1ac>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4a67      	ldr	r2, [pc, #412]	@ (8002c20 <HAL_DMA_IRQHandler+0x1b0>)
 8002a82:	fba2 2303 	umull	r2, r3, r2, r3
 8002a86:	0a9b      	lsrs	r3, r3, #10
 8002a88:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a94:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a5f      	ldr	r2, [pc, #380]	@ (8002c24 <HAL_DMA_IRQHandler+0x1b4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d04a      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a5d      	ldr	r2, [pc, #372]	@ (8002c28 <HAL_DMA_IRQHandler+0x1b8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d045      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a5c      	ldr	r2, [pc, #368]	@ (8002c2c <HAL_DMA_IRQHandler+0x1bc>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d040      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a5a      	ldr	r2, [pc, #360]	@ (8002c30 <HAL_DMA_IRQHandler+0x1c0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d03b      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a59      	ldr	r2, [pc, #356]	@ (8002c34 <HAL_DMA_IRQHandler+0x1c4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d036      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a57      	ldr	r2, [pc, #348]	@ (8002c38 <HAL_DMA_IRQHandler+0x1c8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d031      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a56      	ldr	r2, [pc, #344]	@ (8002c3c <HAL_DMA_IRQHandler+0x1cc>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d02c      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a54      	ldr	r2, [pc, #336]	@ (8002c40 <HAL_DMA_IRQHandler+0x1d0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d027      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a53      	ldr	r2, [pc, #332]	@ (8002c44 <HAL_DMA_IRQHandler+0x1d4>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d022      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a51      	ldr	r2, [pc, #324]	@ (8002c48 <HAL_DMA_IRQHandler+0x1d8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d01d      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a50      	ldr	r2, [pc, #320]	@ (8002c4c <HAL_DMA_IRQHandler+0x1dc>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d018      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a4e      	ldr	r2, [pc, #312]	@ (8002c50 <HAL_DMA_IRQHandler+0x1e0>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d013      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a4d      	ldr	r2, [pc, #308]	@ (8002c54 <HAL_DMA_IRQHandler+0x1e4>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d00e      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a4b      	ldr	r2, [pc, #300]	@ (8002c58 <HAL_DMA_IRQHandler+0x1e8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d009      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a4a      	ldr	r2, [pc, #296]	@ (8002c5c <HAL_DMA_IRQHandler+0x1ec>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d004      	beq.n	8002b42 <HAL_DMA_IRQHandler+0xd2>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a48      	ldr	r2, [pc, #288]	@ (8002c60 <HAL_DMA_IRQHandler+0x1f0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d101      	bne.n	8002b46 <HAL_DMA_IRQHandler+0xd6>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <HAL_DMA_IRQHandler+0xd8>
 8002b46:	2300      	movs	r3, #0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 842b 	beq.w	80033a4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b52:	f003 031f 	and.w	r3, r3, #31
 8002b56:	2208      	movs	r2, #8
 8002b58:	409a      	lsls	r2, r3
 8002b5a:	69bb      	ldr	r3, [r7, #24]
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	f000 80a2 	beq.w	8002ca8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a2e      	ldr	r2, [pc, #184]	@ (8002c24 <HAL_DMA_IRQHandler+0x1b4>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d04a      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a2d      	ldr	r2, [pc, #180]	@ (8002c28 <HAL_DMA_IRQHandler+0x1b8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d045      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a2b      	ldr	r2, [pc, #172]	@ (8002c2c <HAL_DMA_IRQHandler+0x1bc>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d040      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a2a      	ldr	r2, [pc, #168]	@ (8002c30 <HAL_DMA_IRQHandler+0x1c0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d03b      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a28      	ldr	r2, [pc, #160]	@ (8002c34 <HAL_DMA_IRQHandler+0x1c4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d036      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a27      	ldr	r2, [pc, #156]	@ (8002c38 <HAL_DMA_IRQHandler+0x1c8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d031      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a25      	ldr	r2, [pc, #148]	@ (8002c3c <HAL_DMA_IRQHandler+0x1cc>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d02c      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a24      	ldr	r2, [pc, #144]	@ (8002c40 <HAL_DMA_IRQHandler+0x1d0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d027      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a22      	ldr	r2, [pc, #136]	@ (8002c44 <HAL_DMA_IRQHandler+0x1d4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d022      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a21      	ldr	r2, [pc, #132]	@ (8002c48 <HAL_DMA_IRQHandler+0x1d8>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d01d      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1f      	ldr	r2, [pc, #124]	@ (8002c4c <HAL_DMA_IRQHandler+0x1dc>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d018      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a1e      	ldr	r2, [pc, #120]	@ (8002c50 <HAL_DMA_IRQHandler+0x1e0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d013      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a1c      	ldr	r2, [pc, #112]	@ (8002c54 <HAL_DMA_IRQHandler+0x1e4>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d00e      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a1b      	ldr	r2, [pc, #108]	@ (8002c58 <HAL_DMA_IRQHandler+0x1e8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d009      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a19      	ldr	r2, [pc, #100]	@ (8002c5c <HAL_DMA_IRQHandler+0x1ec>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d004      	beq.n	8002c04 <HAL_DMA_IRQHandler+0x194>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a18      	ldr	r2, [pc, #96]	@ (8002c60 <HAL_DMA_IRQHandler+0x1f0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d12f      	bne.n	8002c64 <HAL_DMA_IRQHandler+0x1f4>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0304 	and.w	r3, r3, #4
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	bf14      	ite	ne
 8002c12:	2301      	movne	r3, #1
 8002c14:	2300      	moveq	r3, #0
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	e02e      	b.n	8002c78 <HAL_DMA_IRQHandler+0x208>
 8002c1a:	bf00      	nop
 8002c1c:	24000000 	.word	0x24000000
 8002c20:	1b4e81b5 	.word	0x1b4e81b5
 8002c24:	40020010 	.word	0x40020010
 8002c28:	40020028 	.word	0x40020028
 8002c2c:	40020040 	.word	0x40020040
 8002c30:	40020058 	.word	0x40020058
 8002c34:	40020070 	.word	0x40020070
 8002c38:	40020088 	.word	0x40020088
 8002c3c:	400200a0 	.word	0x400200a0
 8002c40:	400200b8 	.word	0x400200b8
 8002c44:	40020410 	.word	0x40020410
 8002c48:	40020428 	.word	0x40020428
 8002c4c:	40020440 	.word	0x40020440
 8002c50:	40020458 	.word	0x40020458
 8002c54:	40020470 	.word	0x40020470
 8002c58:	40020488 	.word	0x40020488
 8002c5c:	400204a0 	.word	0x400204a0
 8002c60:	400204b8 	.word	0x400204b8
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0308 	and.w	r3, r3, #8
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	bf14      	ite	ne
 8002c72:	2301      	movne	r3, #1
 8002c74:	2300      	moveq	r3, #0
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d015      	beq.n	8002ca8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 0204 	bic.w	r2, r2, #4
 8002c8a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c90:	f003 031f 	and.w	r3, r3, #31
 8002c94:	2208      	movs	r2, #8
 8002c96:	409a      	lsls	r2, r3
 8002c98:	6a3b      	ldr	r3, [r7, #32]
 8002c9a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ca0:	f043 0201 	orr.w	r2, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cac:	f003 031f 	and.w	r3, r3, #31
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d06e      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a69      	ldr	r2, [pc, #420]	@ (8002e68 <HAL_DMA_IRQHandler+0x3f8>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d04a      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a67      	ldr	r2, [pc, #412]	@ (8002e6c <HAL_DMA_IRQHandler+0x3fc>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d045      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a66      	ldr	r2, [pc, #408]	@ (8002e70 <HAL_DMA_IRQHandler+0x400>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d040      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a64      	ldr	r2, [pc, #400]	@ (8002e74 <HAL_DMA_IRQHandler+0x404>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d03b      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a63      	ldr	r2, [pc, #396]	@ (8002e78 <HAL_DMA_IRQHandler+0x408>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d036      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a61      	ldr	r2, [pc, #388]	@ (8002e7c <HAL_DMA_IRQHandler+0x40c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d031      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a60      	ldr	r2, [pc, #384]	@ (8002e80 <HAL_DMA_IRQHandler+0x410>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d02c      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a5e      	ldr	r2, [pc, #376]	@ (8002e84 <HAL_DMA_IRQHandler+0x414>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d027      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a5d      	ldr	r2, [pc, #372]	@ (8002e88 <HAL_DMA_IRQHandler+0x418>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d022      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a5b      	ldr	r2, [pc, #364]	@ (8002e8c <HAL_DMA_IRQHandler+0x41c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d01d      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a5a      	ldr	r2, [pc, #360]	@ (8002e90 <HAL_DMA_IRQHandler+0x420>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d018      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a58      	ldr	r2, [pc, #352]	@ (8002e94 <HAL_DMA_IRQHandler+0x424>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d013      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a57      	ldr	r2, [pc, #348]	@ (8002e98 <HAL_DMA_IRQHandler+0x428>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d00e      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a55      	ldr	r2, [pc, #340]	@ (8002e9c <HAL_DMA_IRQHandler+0x42c>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d009      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a54      	ldr	r2, [pc, #336]	@ (8002ea0 <HAL_DMA_IRQHandler+0x430>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d004      	beq.n	8002d5e <HAL_DMA_IRQHandler+0x2ee>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a52      	ldr	r2, [pc, #328]	@ (8002ea4 <HAL_DMA_IRQHandler+0x434>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d10a      	bne.n	8002d74 <HAL_DMA_IRQHandler+0x304>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	695b      	ldr	r3, [r3, #20]
 8002d64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bf14      	ite	ne
 8002d6c:	2301      	movne	r3, #1
 8002d6e:	2300      	moveq	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	e003      	b.n	8002d7c <HAL_DMA_IRQHandler+0x30c>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00d      	beq.n	8002d9c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d84:	f003 031f 	and.w	r3, r3, #31
 8002d88:	2201      	movs	r2, #1
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d94:	f043 0202 	orr.w	r2, r3, #2
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	2204      	movs	r2, #4
 8002da6:	409a      	lsls	r2, r3
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	4013      	ands	r3, r2
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	f000 808f 	beq.w	8002ed0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a2c      	ldr	r2, [pc, #176]	@ (8002e68 <HAL_DMA_IRQHandler+0x3f8>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d04a      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a2a      	ldr	r2, [pc, #168]	@ (8002e6c <HAL_DMA_IRQHandler+0x3fc>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d045      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a29      	ldr	r2, [pc, #164]	@ (8002e70 <HAL_DMA_IRQHandler+0x400>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d040      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a27      	ldr	r2, [pc, #156]	@ (8002e74 <HAL_DMA_IRQHandler+0x404>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d03b      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a26      	ldr	r2, [pc, #152]	@ (8002e78 <HAL_DMA_IRQHandler+0x408>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d036      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a24      	ldr	r2, [pc, #144]	@ (8002e7c <HAL_DMA_IRQHandler+0x40c>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d031      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a23      	ldr	r2, [pc, #140]	@ (8002e80 <HAL_DMA_IRQHandler+0x410>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d02c      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a21      	ldr	r2, [pc, #132]	@ (8002e84 <HAL_DMA_IRQHandler+0x414>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d027      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a20      	ldr	r2, [pc, #128]	@ (8002e88 <HAL_DMA_IRQHandler+0x418>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d022      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a1e      	ldr	r2, [pc, #120]	@ (8002e8c <HAL_DMA_IRQHandler+0x41c>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d01d      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a1d      	ldr	r2, [pc, #116]	@ (8002e90 <HAL_DMA_IRQHandler+0x420>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d018      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a1b      	ldr	r2, [pc, #108]	@ (8002e94 <HAL_DMA_IRQHandler+0x424>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d013      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a1a      	ldr	r2, [pc, #104]	@ (8002e98 <HAL_DMA_IRQHandler+0x428>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00e      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4a18      	ldr	r2, [pc, #96]	@ (8002e9c <HAL_DMA_IRQHandler+0x42c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d009      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a17      	ldr	r2, [pc, #92]	@ (8002ea0 <HAL_DMA_IRQHandler+0x430>)
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d004      	beq.n	8002e52 <HAL_DMA_IRQHandler+0x3e2>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a15      	ldr	r2, [pc, #84]	@ (8002ea4 <HAL_DMA_IRQHandler+0x434>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d12a      	bne.n	8002ea8 <HAL_DMA_IRQHandler+0x438>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	bf14      	ite	ne
 8002e60:	2301      	movne	r3, #1
 8002e62:	2300      	moveq	r3, #0
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	e023      	b.n	8002eb0 <HAL_DMA_IRQHandler+0x440>
 8002e68:	40020010 	.word	0x40020010
 8002e6c:	40020028 	.word	0x40020028
 8002e70:	40020040 	.word	0x40020040
 8002e74:	40020058 	.word	0x40020058
 8002e78:	40020070 	.word	0x40020070
 8002e7c:	40020088 	.word	0x40020088
 8002e80:	400200a0 	.word	0x400200a0
 8002e84:	400200b8 	.word	0x400200b8
 8002e88:	40020410 	.word	0x40020410
 8002e8c:	40020428 	.word	0x40020428
 8002e90:	40020440 	.word	0x40020440
 8002e94:	40020458 	.word	0x40020458
 8002e98:	40020470 	.word	0x40020470
 8002e9c:	40020488 	.word	0x40020488
 8002ea0:	400204a0 	.word	0x400204a0
 8002ea4:	400204b8 	.word	0x400204b8
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2300      	movs	r3, #0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00d      	beq.n	8002ed0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb8:	f003 031f 	and.w	r3, r3, #31
 8002ebc:	2204      	movs	r2, #4
 8002ebe:	409a      	lsls	r2, r3
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec8:	f043 0204 	orr.w	r2, r3, #4
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed4:	f003 031f 	and.w	r3, r3, #31
 8002ed8:	2210      	movs	r2, #16
 8002eda:	409a      	lsls	r2, r3
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	4013      	ands	r3, r2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 80a6 	beq.w	8003032 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a85      	ldr	r2, [pc, #532]	@ (8003100 <HAL_DMA_IRQHandler+0x690>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d04a      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a83      	ldr	r2, [pc, #524]	@ (8003104 <HAL_DMA_IRQHandler+0x694>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d045      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a82      	ldr	r2, [pc, #520]	@ (8003108 <HAL_DMA_IRQHandler+0x698>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d040      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a80      	ldr	r2, [pc, #512]	@ (800310c <HAL_DMA_IRQHandler+0x69c>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d03b      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a7f      	ldr	r2, [pc, #508]	@ (8003110 <HAL_DMA_IRQHandler+0x6a0>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d036      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a7d      	ldr	r2, [pc, #500]	@ (8003114 <HAL_DMA_IRQHandler+0x6a4>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d031      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a7c      	ldr	r2, [pc, #496]	@ (8003118 <HAL_DMA_IRQHandler+0x6a8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d02c      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a7a      	ldr	r2, [pc, #488]	@ (800311c <HAL_DMA_IRQHandler+0x6ac>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d027      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a79      	ldr	r2, [pc, #484]	@ (8003120 <HAL_DMA_IRQHandler+0x6b0>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d022      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a77      	ldr	r2, [pc, #476]	@ (8003124 <HAL_DMA_IRQHandler+0x6b4>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d01d      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a76      	ldr	r2, [pc, #472]	@ (8003128 <HAL_DMA_IRQHandler+0x6b8>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d018      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a74      	ldr	r2, [pc, #464]	@ (800312c <HAL_DMA_IRQHandler+0x6bc>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d013      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a73      	ldr	r2, [pc, #460]	@ (8003130 <HAL_DMA_IRQHandler+0x6c0>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d00e      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a71      	ldr	r2, [pc, #452]	@ (8003134 <HAL_DMA_IRQHandler+0x6c4>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d009      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a70      	ldr	r2, [pc, #448]	@ (8003138 <HAL_DMA_IRQHandler+0x6c8>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d004      	beq.n	8002f86 <HAL_DMA_IRQHandler+0x516>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a6e      	ldr	r2, [pc, #440]	@ (800313c <HAL_DMA_IRQHandler+0x6cc>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d10a      	bne.n	8002f9c <HAL_DMA_IRQHandler+0x52c>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0308 	and.w	r3, r3, #8
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	bf14      	ite	ne
 8002f94:	2301      	movne	r3, #1
 8002f96:	2300      	moveq	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	e009      	b.n	8002fb0 <HAL_DMA_IRQHandler+0x540>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	bf14      	ite	ne
 8002faa:	2301      	movne	r3, #1
 8002fac:	2300      	moveq	r3, #0
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d03e      	beq.n	8003032 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb8:	f003 031f 	and.w	r3, r3, #31
 8002fbc:	2210      	movs	r2, #16
 8002fbe:	409a      	lsls	r2, r3
 8002fc0:	6a3b      	ldr	r3, [r7, #32]
 8002fc2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d018      	beq.n	8003004 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d108      	bne.n	8002ff2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d024      	beq.n	8003032 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	4798      	blx	r3
 8002ff0:	e01f      	b.n	8003032 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d01b      	beq.n	8003032 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	4798      	blx	r3
 8003002:	e016      	b.n	8003032 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800300e:	2b00      	cmp	r3, #0
 8003010:	d107      	bne.n	8003022 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0208 	bic.w	r2, r2, #8
 8003020:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003036:	f003 031f 	and.w	r3, r3, #31
 800303a:	2220      	movs	r2, #32
 800303c:	409a      	lsls	r2, r3
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	2b00      	cmp	r3, #0
 8003044:	f000 8110 	beq.w	8003268 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4a2c      	ldr	r2, [pc, #176]	@ (8003100 <HAL_DMA_IRQHandler+0x690>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d04a      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a2b      	ldr	r2, [pc, #172]	@ (8003104 <HAL_DMA_IRQHandler+0x694>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d045      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a29      	ldr	r2, [pc, #164]	@ (8003108 <HAL_DMA_IRQHandler+0x698>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d040      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a28      	ldr	r2, [pc, #160]	@ (800310c <HAL_DMA_IRQHandler+0x69c>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d03b      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a26      	ldr	r2, [pc, #152]	@ (8003110 <HAL_DMA_IRQHandler+0x6a0>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d036      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a25      	ldr	r2, [pc, #148]	@ (8003114 <HAL_DMA_IRQHandler+0x6a4>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d031      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a23      	ldr	r2, [pc, #140]	@ (8003118 <HAL_DMA_IRQHandler+0x6a8>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d02c      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a22      	ldr	r2, [pc, #136]	@ (800311c <HAL_DMA_IRQHandler+0x6ac>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d027      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a20      	ldr	r2, [pc, #128]	@ (8003120 <HAL_DMA_IRQHandler+0x6b0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d022      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a1f      	ldr	r2, [pc, #124]	@ (8003124 <HAL_DMA_IRQHandler+0x6b4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d01d      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003128 <HAL_DMA_IRQHandler+0x6b8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d018      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a1c      	ldr	r2, [pc, #112]	@ (800312c <HAL_DMA_IRQHandler+0x6bc>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d013      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a1a      	ldr	r2, [pc, #104]	@ (8003130 <HAL_DMA_IRQHandler+0x6c0>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00e      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a19      	ldr	r2, [pc, #100]	@ (8003134 <HAL_DMA_IRQHandler+0x6c4>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d009      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a17      	ldr	r2, [pc, #92]	@ (8003138 <HAL_DMA_IRQHandler+0x6c8>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d004      	beq.n	80030e8 <HAL_DMA_IRQHandler+0x678>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a16      	ldr	r2, [pc, #88]	@ (800313c <HAL_DMA_IRQHandler+0x6cc>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d12b      	bne.n	8003140 <HAL_DMA_IRQHandler+0x6d0>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0310 	and.w	r3, r3, #16
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	bf14      	ite	ne
 80030f6:	2301      	movne	r3, #1
 80030f8:	2300      	moveq	r3, #0
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	e02a      	b.n	8003154 <HAL_DMA_IRQHandler+0x6e4>
 80030fe:	bf00      	nop
 8003100:	40020010 	.word	0x40020010
 8003104:	40020028 	.word	0x40020028
 8003108:	40020040 	.word	0x40020040
 800310c:	40020058 	.word	0x40020058
 8003110:	40020070 	.word	0x40020070
 8003114:	40020088 	.word	0x40020088
 8003118:	400200a0 	.word	0x400200a0
 800311c:	400200b8 	.word	0x400200b8
 8003120:	40020410 	.word	0x40020410
 8003124:	40020428 	.word	0x40020428
 8003128:	40020440 	.word	0x40020440
 800312c:	40020458 	.word	0x40020458
 8003130:	40020470 	.word	0x40020470
 8003134:	40020488 	.word	0x40020488
 8003138:	400204a0 	.word	0x400204a0
 800313c:	400204b8 	.word	0x400204b8
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	bf14      	ite	ne
 800314e:	2301      	movne	r3, #1
 8003150:	2300      	moveq	r3, #0
 8003152:	b2db      	uxtb	r3, r3
 8003154:	2b00      	cmp	r3, #0
 8003156:	f000 8087 	beq.w	8003268 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800315e:	f003 031f 	and.w	r3, r3, #31
 8003162:	2220      	movs	r2, #32
 8003164:	409a      	lsls	r2, r3
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b04      	cmp	r3, #4
 8003174:	d139      	bne.n	80031ea <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0216 	bic.w	r2, r2, #22
 8003184:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	695a      	ldr	r2, [r3, #20]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003194:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319a:	2b00      	cmp	r3, #0
 800319c:	d103      	bne.n	80031a6 <HAL_DMA_IRQHandler+0x736>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d007      	beq.n	80031b6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f022 0208 	bic.w	r2, r2, #8
 80031b4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031ba:	f003 031f 	and.w	r3, r3, #31
 80031be:	223f      	movs	r2, #63	@ 0x3f
 80031c0:	409a      	lsls	r2, r3
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2201      	movs	r2, #1
 80031ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031da:	2b00      	cmp	r3, #0
 80031dc:	f000 834a 	beq.w	8003874 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	4798      	blx	r3
          }
          return;
 80031e8:	e344      	b.n	8003874 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d018      	beq.n	800322a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d108      	bne.n	8003218 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800320a:	2b00      	cmp	r3, #0
 800320c:	d02c      	beq.n	8003268 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	4798      	blx	r3
 8003216:	e027      	b.n	8003268 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800321c:	2b00      	cmp	r3, #0
 800321e:	d023      	beq.n	8003268 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	4798      	blx	r3
 8003228:	e01e      	b.n	8003268 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003234:	2b00      	cmp	r3, #0
 8003236:	d10f      	bne.n	8003258 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 0210 	bic.w	r2, r2, #16
 8003246:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800325c:	2b00      	cmp	r3, #0
 800325e:	d003      	beq.n	8003268 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 8306 	beq.w	800387e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 8088 	beq.w	8003390 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2204      	movs	r2, #4
 8003284:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a7a      	ldr	r2, [pc, #488]	@ (8003478 <HAL_DMA_IRQHandler+0xa08>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d04a      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a79      	ldr	r2, [pc, #484]	@ (800347c <HAL_DMA_IRQHandler+0xa0c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d045      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a77      	ldr	r2, [pc, #476]	@ (8003480 <HAL_DMA_IRQHandler+0xa10>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d040      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a76      	ldr	r2, [pc, #472]	@ (8003484 <HAL_DMA_IRQHandler+0xa14>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d03b      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a74      	ldr	r2, [pc, #464]	@ (8003488 <HAL_DMA_IRQHandler+0xa18>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d036      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a73      	ldr	r2, [pc, #460]	@ (800348c <HAL_DMA_IRQHandler+0xa1c>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d031      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a71      	ldr	r2, [pc, #452]	@ (8003490 <HAL_DMA_IRQHandler+0xa20>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d02c      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a70      	ldr	r2, [pc, #448]	@ (8003494 <HAL_DMA_IRQHandler+0xa24>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d027      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a6e      	ldr	r2, [pc, #440]	@ (8003498 <HAL_DMA_IRQHandler+0xa28>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d022      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a6d      	ldr	r2, [pc, #436]	@ (800349c <HAL_DMA_IRQHandler+0xa2c>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d01d      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a6b      	ldr	r2, [pc, #428]	@ (80034a0 <HAL_DMA_IRQHandler+0xa30>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d018      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a6a      	ldr	r2, [pc, #424]	@ (80034a4 <HAL_DMA_IRQHandler+0xa34>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d013      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a68      	ldr	r2, [pc, #416]	@ (80034a8 <HAL_DMA_IRQHandler+0xa38>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d00e      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a67      	ldr	r2, [pc, #412]	@ (80034ac <HAL_DMA_IRQHandler+0xa3c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d009      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a65      	ldr	r2, [pc, #404]	@ (80034b0 <HAL_DMA_IRQHandler+0xa40>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d004      	beq.n	8003328 <HAL_DMA_IRQHandler+0x8b8>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a64      	ldr	r2, [pc, #400]	@ (80034b4 <HAL_DMA_IRQHandler+0xa44>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d108      	bne.n	800333a <HAL_DMA_IRQHandler+0x8ca>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681a      	ldr	r2, [r3, #0]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f022 0201 	bic.w	r2, r2, #1
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	e007      	b.n	800334a <HAL_DMA_IRQHandler+0x8da>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f022 0201 	bic.w	r2, r2, #1
 8003348:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	3301      	adds	r3, #1
 800334e:	60fb      	str	r3, [r7, #12]
 8003350:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003352:	429a      	cmp	r2, r3
 8003354:	d307      	bcc.n	8003366 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1f2      	bne.n	800334a <HAL_DMA_IRQHandler+0x8da>
 8003364:	e000      	b.n	8003368 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003366:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	2b00      	cmp	r3, #0
 8003374:	d004      	beq.n	8003380 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2203      	movs	r2, #3
 800337a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800337e:	e003      	b.n	8003388 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 8272 	beq.w	800387e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	4798      	blx	r3
 80033a2:	e26c      	b.n	800387e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a43      	ldr	r2, [pc, #268]	@ (80034b8 <HAL_DMA_IRQHandler+0xa48>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d022      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x984>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a42      	ldr	r2, [pc, #264]	@ (80034bc <HAL_DMA_IRQHandler+0xa4c>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d01d      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x984>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a40      	ldr	r2, [pc, #256]	@ (80034c0 <HAL_DMA_IRQHandler+0xa50>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d018      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x984>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a3f      	ldr	r2, [pc, #252]	@ (80034c4 <HAL_DMA_IRQHandler+0xa54>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d013      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x984>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a3d      	ldr	r2, [pc, #244]	@ (80034c8 <HAL_DMA_IRQHandler+0xa58>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d00e      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x984>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a3c      	ldr	r2, [pc, #240]	@ (80034cc <HAL_DMA_IRQHandler+0xa5c>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d009      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x984>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a3a      	ldr	r2, [pc, #232]	@ (80034d0 <HAL_DMA_IRQHandler+0xa60>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d004      	beq.n	80033f4 <HAL_DMA_IRQHandler+0x984>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a39      	ldr	r2, [pc, #228]	@ (80034d4 <HAL_DMA_IRQHandler+0xa64>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d101      	bne.n	80033f8 <HAL_DMA_IRQHandler+0x988>
 80033f4:	2301      	movs	r3, #1
 80033f6:	e000      	b.n	80033fa <HAL_DMA_IRQHandler+0x98a>
 80033f8:	2300      	movs	r3, #0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 823f 	beq.w	800387e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800340c:	f003 031f 	and.w	r3, r3, #31
 8003410:	2204      	movs	r2, #4
 8003412:	409a      	lsls	r2, r3
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	4013      	ands	r3, r2
 8003418:	2b00      	cmp	r3, #0
 800341a:	f000 80cd 	beq.w	80035b8 <HAL_DMA_IRQHandler+0xb48>
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 80c7 	beq.w	80035b8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800342e:	f003 031f 	and.w	r3, r3, #31
 8003432:	2204      	movs	r2, #4
 8003434:	409a      	lsls	r2, r3
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d049      	beq.n	80034d8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d109      	bne.n	8003462 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003452:	2b00      	cmp	r3, #0
 8003454:	f000 8210 	beq.w	8003878 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800345c:	6878      	ldr	r0, [r7, #4]
 800345e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003460:	e20a      	b.n	8003878 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 8206 	beq.w	8003878 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003470:	6878      	ldr	r0, [r7, #4]
 8003472:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003474:	e200      	b.n	8003878 <HAL_DMA_IRQHandler+0xe08>
 8003476:	bf00      	nop
 8003478:	40020010 	.word	0x40020010
 800347c:	40020028 	.word	0x40020028
 8003480:	40020040 	.word	0x40020040
 8003484:	40020058 	.word	0x40020058
 8003488:	40020070 	.word	0x40020070
 800348c:	40020088 	.word	0x40020088
 8003490:	400200a0 	.word	0x400200a0
 8003494:	400200b8 	.word	0x400200b8
 8003498:	40020410 	.word	0x40020410
 800349c:	40020428 	.word	0x40020428
 80034a0:	40020440 	.word	0x40020440
 80034a4:	40020458 	.word	0x40020458
 80034a8:	40020470 	.word	0x40020470
 80034ac:	40020488 	.word	0x40020488
 80034b0:	400204a0 	.word	0x400204a0
 80034b4:	400204b8 	.word	0x400204b8
 80034b8:	58025408 	.word	0x58025408
 80034bc:	5802541c 	.word	0x5802541c
 80034c0:	58025430 	.word	0x58025430
 80034c4:	58025444 	.word	0x58025444
 80034c8:	58025458 	.word	0x58025458
 80034cc:	5802546c 	.word	0x5802546c
 80034d0:	58025480 	.word	0x58025480
 80034d4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d160      	bne.n	80035a4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a7f      	ldr	r2, [pc, #508]	@ (80036e4 <HAL_DMA_IRQHandler+0xc74>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d04a      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a7d      	ldr	r2, [pc, #500]	@ (80036e8 <HAL_DMA_IRQHandler+0xc78>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d045      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a7c      	ldr	r2, [pc, #496]	@ (80036ec <HAL_DMA_IRQHandler+0xc7c>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d040      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a7a      	ldr	r2, [pc, #488]	@ (80036f0 <HAL_DMA_IRQHandler+0xc80>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d03b      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a79      	ldr	r2, [pc, #484]	@ (80036f4 <HAL_DMA_IRQHandler+0xc84>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d036      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a77      	ldr	r2, [pc, #476]	@ (80036f8 <HAL_DMA_IRQHandler+0xc88>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d031      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a76      	ldr	r2, [pc, #472]	@ (80036fc <HAL_DMA_IRQHandler+0xc8c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d02c      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a74      	ldr	r2, [pc, #464]	@ (8003700 <HAL_DMA_IRQHandler+0xc90>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d027      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a73      	ldr	r2, [pc, #460]	@ (8003704 <HAL_DMA_IRQHandler+0xc94>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d022      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a71      	ldr	r2, [pc, #452]	@ (8003708 <HAL_DMA_IRQHandler+0xc98>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d01d      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a70      	ldr	r2, [pc, #448]	@ (800370c <HAL_DMA_IRQHandler+0xc9c>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d018      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a6e      	ldr	r2, [pc, #440]	@ (8003710 <HAL_DMA_IRQHandler+0xca0>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d013      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a6d      	ldr	r2, [pc, #436]	@ (8003714 <HAL_DMA_IRQHandler+0xca4>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d00e      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a6b      	ldr	r2, [pc, #428]	@ (8003718 <HAL_DMA_IRQHandler+0xca8>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d009      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a6a      	ldr	r2, [pc, #424]	@ (800371c <HAL_DMA_IRQHandler+0xcac>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d004      	beq.n	8003582 <HAL_DMA_IRQHandler+0xb12>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a68      	ldr	r2, [pc, #416]	@ (8003720 <HAL_DMA_IRQHandler+0xcb0>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d108      	bne.n	8003594 <HAL_DMA_IRQHandler+0xb24>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 0208 	bic.w	r2, r2, #8
 8003590:	601a      	str	r2, [r3, #0]
 8003592:	e007      	b.n	80035a4 <HAL_DMA_IRQHandler+0xb34>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f022 0204 	bic.w	r2, r2, #4
 80035a2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 8165 	beq.w	8003878 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035b6:	e15f      	b.n	8003878 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035bc:	f003 031f 	and.w	r3, r3, #31
 80035c0:	2202      	movs	r2, #2
 80035c2:	409a      	lsls	r2, r3
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	4013      	ands	r3, r2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	f000 80c5 	beq.w	8003758 <HAL_DMA_IRQHandler+0xce8>
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 80bf 	beq.w	8003758 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035de:	f003 031f 	and.w	r3, r3, #31
 80035e2:	2202      	movs	r2, #2
 80035e4:	409a      	lsls	r2, r3
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d018      	beq.n	8003626 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d109      	bne.n	8003612 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003602:	2b00      	cmp	r3, #0
 8003604:	f000 813a 	beq.w	800387c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003610:	e134      	b.n	800387c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003616:	2b00      	cmp	r3, #0
 8003618:	f000 8130 	beq.w	800387c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003624:	e12a      	b.n	800387c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b00      	cmp	r3, #0
 800362e:	f040 8089 	bne.w	8003744 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a2b      	ldr	r2, [pc, #172]	@ (80036e4 <HAL_DMA_IRQHandler+0xc74>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d04a      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a29      	ldr	r2, [pc, #164]	@ (80036e8 <HAL_DMA_IRQHandler+0xc78>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d045      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a28      	ldr	r2, [pc, #160]	@ (80036ec <HAL_DMA_IRQHandler+0xc7c>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d040      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a26      	ldr	r2, [pc, #152]	@ (80036f0 <HAL_DMA_IRQHandler+0xc80>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d03b      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a25      	ldr	r2, [pc, #148]	@ (80036f4 <HAL_DMA_IRQHandler+0xc84>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d036      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a23      	ldr	r2, [pc, #140]	@ (80036f8 <HAL_DMA_IRQHandler+0xc88>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d031      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a22      	ldr	r2, [pc, #136]	@ (80036fc <HAL_DMA_IRQHandler+0xc8c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d02c      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a20      	ldr	r2, [pc, #128]	@ (8003700 <HAL_DMA_IRQHandler+0xc90>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d027      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a1f      	ldr	r2, [pc, #124]	@ (8003704 <HAL_DMA_IRQHandler+0xc94>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d022      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a1d      	ldr	r2, [pc, #116]	@ (8003708 <HAL_DMA_IRQHandler+0xc98>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d01d      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a1c      	ldr	r2, [pc, #112]	@ (800370c <HAL_DMA_IRQHandler+0xc9c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d018      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a1a      	ldr	r2, [pc, #104]	@ (8003710 <HAL_DMA_IRQHandler+0xca0>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d013      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a19      	ldr	r2, [pc, #100]	@ (8003714 <HAL_DMA_IRQHandler+0xca4>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d00e      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a17      	ldr	r2, [pc, #92]	@ (8003718 <HAL_DMA_IRQHandler+0xca8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d009      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a16      	ldr	r2, [pc, #88]	@ (800371c <HAL_DMA_IRQHandler+0xcac>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d004      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xc62>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a14      	ldr	r2, [pc, #80]	@ (8003720 <HAL_DMA_IRQHandler+0xcb0>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d128      	bne.n	8003724 <HAL_DMA_IRQHandler+0xcb4>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0214 	bic.w	r2, r2, #20
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	e027      	b.n	8003734 <HAL_DMA_IRQHandler+0xcc4>
 80036e4:	40020010 	.word	0x40020010
 80036e8:	40020028 	.word	0x40020028
 80036ec:	40020040 	.word	0x40020040
 80036f0:	40020058 	.word	0x40020058
 80036f4:	40020070 	.word	0x40020070
 80036f8:	40020088 	.word	0x40020088
 80036fc:	400200a0 	.word	0x400200a0
 8003700:	400200b8 	.word	0x400200b8
 8003704:	40020410 	.word	0x40020410
 8003708:	40020428 	.word	0x40020428
 800370c:	40020440 	.word	0x40020440
 8003710:	40020458 	.word	0x40020458
 8003714:	40020470 	.word	0x40020470
 8003718:	40020488 	.word	0x40020488
 800371c:	400204a0 	.word	0x400204a0
 8003720:	400204b8 	.word	0x400204b8
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 020a 	bic.w	r2, r2, #10
 8003732:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 8097 	beq.w	800387c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003756:	e091      	b.n	800387c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800375c:	f003 031f 	and.w	r3, r3, #31
 8003760:	2208      	movs	r2, #8
 8003762:	409a      	lsls	r2, r3
 8003764:	697b      	ldr	r3, [r7, #20]
 8003766:	4013      	ands	r3, r2
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 8088 	beq.w	800387e <HAL_DMA_IRQHandler+0xe0e>
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f003 0308 	and.w	r3, r3, #8
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 8082 	beq.w	800387e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a41      	ldr	r2, [pc, #260]	@ (8003884 <HAL_DMA_IRQHandler+0xe14>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d04a      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a3f      	ldr	r2, [pc, #252]	@ (8003888 <HAL_DMA_IRQHandler+0xe18>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d045      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a3e      	ldr	r2, [pc, #248]	@ (800388c <HAL_DMA_IRQHandler+0xe1c>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d040      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a3c      	ldr	r2, [pc, #240]	@ (8003890 <HAL_DMA_IRQHandler+0xe20>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d03b      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a3b      	ldr	r2, [pc, #236]	@ (8003894 <HAL_DMA_IRQHandler+0xe24>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d036      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a39      	ldr	r2, [pc, #228]	@ (8003898 <HAL_DMA_IRQHandler+0xe28>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d031      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a38      	ldr	r2, [pc, #224]	@ (800389c <HAL_DMA_IRQHandler+0xe2c>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d02c      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a36      	ldr	r2, [pc, #216]	@ (80038a0 <HAL_DMA_IRQHandler+0xe30>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d027      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a35      	ldr	r2, [pc, #212]	@ (80038a4 <HAL_DMA_IRQHandler+0xe34>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d022      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a33      	ldr	r2, [pc, #204]	@ (80038a8 <HAL_DMA_IRQHandler+0xe38>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d01d      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a32      	ldr	r2, [pc, #200]	@ (80038ac <HAL_DMA_IRQHandler+0xe3c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d018      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a30      	ldr	r2, [pc, #192]	@ (80038b0 <HAL_DMA_IRQHandler+0xe40>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d013      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a2f      	ldr	r2, [pc, #188]	@ (80038b4 <HAL_DMA_IRQHandler+0xe44>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d00e      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a2d      	ldr	r2, [pc, #180]	@ (80038b8 <HAL_DMA_IRQHandler+0xe48>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d009      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a2c      	ldr	r2, [pc, #176]	@ (80038bc <HAL_DMA_IRQHandler+0xe4c>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d004      	beq.n	800381a <HAL_DMA_IRQHandler+0xdaa>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a2a      	ldr	r2, [pc, #168]	@ (80038c0 <HAL_DMA_IRQHandler+0xe50>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d108      	bne.n	800382c <HAL_DMA_IRQHandler+0xdbc>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 021c 	bic.w	r2, r2, #28
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	e007      	b.n	800383c <HAL_DMA_IRQHandler+0xdcc>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 020e 	bic.w	r2, r2, #14
 800383a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003840:	f003 031f 	and.w	r3, r3, #31
 8003844:	2201      	movs	r2, #1
 8003846:	409a      	lsls	r2, r3
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003866:	2b00      	cmp	r3, #0
 8003868:	d009      	beq.n	800387e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	4798      	blx	r3
 8003872:	e004      	b.n	800387e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003874:	bf00      	nop
 8003876:	e002      	b.n	800387e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003878:	bf00      	nop
 800387a:	e000      	b.n	800387e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800387c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800387e:	3728      	adds	r7, #40	@ 0x28
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40020010 	.word	0x40020010
 8003888:	40020028 	.word	0x40020028
 800388c:	40020040 	.word	0x40020040
 8003890:	40020058 	.word	0x40020058
 8003894:	40020070 	.word	0x40020070
 8003898:	40020088 	.word	0x40020088
 800389c:	400200a0 	.word	0x400200a0
 80038a0:	400200b8 	.word	0x400200b8
 80038a4:	40020410 	.word	0x40020410
 80038a8:	40020428 	.word	0x40020428
 80038ac:	40020440 	.word	0x40020440
 80038b0:	40020458 	.word	0x40020458
 80038b4:	40020470 	.word	0x40020470
 80038b8:	40020488 	.word	0x40020488
 80038bc:	400204a0 	.word	0x400204a0
 80038c0:	400204b8 	.word	0x400204b8

080038c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
 80038d0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038d6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038dc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a7f      	ldr	r2, [pc, #508]	@ (8003ae0 <DMA_SetConfig+0x21c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d072      	beq.n	80039ce <DMA_SetConfig+0x10a>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a7d      	ldr	r2, [pc, #500]	@ (8003ae4 <DMA_SetConfig+0x220>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d06d      	beq.n	80039ce <DMA_SetConfig+0x10a>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a7c      	ldr	r2, [pc, #496]	@ (8003ae8 <DMA_SetConfig+0x224>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d068      	beq.n	80039ce <DMA_SetConfig+0x10a>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a7a      	ldr	r2, [pc, #488]	@ (8003aec <DMA_SetConfig+0x228>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d063      	beq.n	80039ce <DMA_SetConfig+0x10a>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a79      	ldr	r2, [pc, #484]	@ (8003af0 <DMA_SetConfig+0x22c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d05e      	beq.n	80039ce <DMA_SetConfig+0x10a>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a77      	ldr	r2, [pc, #476]	@ (8003af4 <DMA_SetConfig+0x230>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d059      	beq.n	80039ce <DMA_SetConfig+0x10a>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a76      	ldr	r2, [pc, #472]	@ (8003af8 <DMA_SetConfig+0x234>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d054      	beq.n	80039ce <DMA_SetConfig+0x10a>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a74      	ldr	r2, [pc, #464]	@ (8003afc <DMA_SetConfig+0x238>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d04f      	beq.n	80039ce <DMA_SetConfig+0x10a>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a73      	ldr	r2, [pc, #460]	@ (8003b00 <DMA_SetConfig+0x23c>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d04a      	beq.n	80039ce <DMA_SetConfig+0x10a>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a71      	ldr	r2, [pc, #452]	@ (8003b04 <DMA_SetConfig+0x240>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d045      	beq.n	80039ce <DMA_SetConfig+0x10a>
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a70      	ldr	r2, [pc, #448]	@ (8003b08 <DMA_SetConfig+0x244>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d040      	beq.n	80039ce <DMA_SetConfig+0x10a>
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a6e      	ldr	r2, [pc, #440]	@ (8003b0c <DMA_SetConfig+0x248>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d03b      	beq.n	80039ce <DMA_SetConfig+0x10a>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a6d      	ldr	r2, [pc, #436]	@ (8003b10 <DMA_SetConfig+0x24c>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d036      	beq.n	80039ce <DMA_SetConfig+0x10a>
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a6b      	ldr	r2, [pc, #428]	@ (8003b14 <DMA_SetConfig+0x250>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d031      	beq.n	80039ce <DMA_SetConfig+0x10a>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a6a      	ldr	r2, [pc, #424]	@ (8003b18 <DMA_SetConfig+0x254>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d02c      	beq.n	80039ce <DMA_SetConfig+0x10a>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a68      	ldr	r2, [pc, #416]	@ (8003b1c <DMA_SetConfig+0x258>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d027      	beq.n	80039ce <DMA_SetConfig+0x10a>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a67      	ldr	r2, [pc, #412]	@ (8003b20 <DMA_SetConfig+0x25c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d022      	beq.n	80039ce <DMA_SetConfig+0x10a>
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a65      	ldr	r2, [pc, #404]	@ (8003b24 <DMA_SetConfig+0x260>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d01d      	beq.n	80039ce <DMA_SetConfig+0x10a>
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a64      	ldr	r2, [pc, #400]	@ (8003b28 <DMA_SetConfig+0x264>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d018      	beq.n	80039ce <DMA_SetConfig+0x10a>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a62      	ldr	r2, [pc, #392]	@ (8003b2c <DMA_SetConfig+0x268>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d013      	beq.n	80039ce <DMA_SetConfig+0x10a>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a61      	ldr	r2, [pc, #388]	@ (8003b30 <DMA_SetConfig+0x26c>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d00e      	beq.n	80039ce <DMA_SetConfig+0x10a>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a5f      	ldr	r2, [pc, #380]	@ (8003b34 <DMA_SetConfig+0x270>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d009      	beq.n	80039ce <DMA_SetConfig+0x10a>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a5e      	ldr	r2, [pc, #376]	@ (8003b38 <DMA_SetConfig+0x274>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d004      	beq.n	80039ce <DMA_SetConfig+0x10a>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a5c      	ldr	r2, [pc, #368]	@ (8003b3c <DMA_SetConfig+0x278>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d101      	bne.n	80039d2 <DMA_SetConfig+0x10e>
 80039ce:	2301      	movs	r3, #1
 80039d0:	e000      	b.n	80039d4 <DMA_SetConfig+0x110>
 80039d2:	2300      	movs	r3, #0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00d      	beq.n	80039f4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80039e0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d004      	beq.n	80039f4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80039f2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a39      	ldr	r2, [pc, #228]	@ (8003ae0 <DMA_SetConfig+0x21c>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d04a      	beq.n	8003a94 <DMA_SetConfig+0x1d0>
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a38      	ldr	r2, [pc, #224]	@ (8003ae4 <DMA_SetConfig+0x220>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d045      	beq.n	8003a94 <DMA_SetConfig+0x1d0>
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a36      	ldr	r2, [pc, #216]	@ (8003ae8 <DMA_SetConfig+0x224>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d040      	beq.n	8003a94 <DMA_SetConfig+0x1d0>
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a35      	ldr	r2, [pc, #212]	@ (8003aec <DMA_SetConfig+0x228>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d03b      	beq.n	8003a94 <DMA_SetConfig+0x1d0>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a33      	ldr	r2, [pc, #204]	@ (8003af0 <DMA_SetConfig+0x22c>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d036      	beq.n	8003a94 <DMA_SetConfig+0x1d0>
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a32      	ldr	r2, [pc, #200]	@ (8003af4 <DMA_SetConfig+0x230>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d031      	beq.n	8003a94 <DMA_SetConfig+0x1d0>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a30      	ldr	r2, [pc, #192]	@ (8003af8 <DMA_SetConfig+0x234>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d02c      	beq.n	8003a94 <DMA_SetConfig+0x1d0>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a2f      	ldr	r2, [pc, #188]	@ (8003afc <DMA_SetConfig+0x238>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d027      	beq.n	8003a94 <DMA_SetConfig+0x1d0>
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a2d      	ldr	r2, [pc, #180]	@ (8003b00 <DMA_SetConfig+0x23c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d022      	beq.n	8003a94 <DMA_SetConfig+0x1d0>
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	4a2c      	ldr	r2, [pc, #176]	@ (8003b04 <DMA_SetConfig+0x240>)
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d01d      	beq.n	8003a94 <DMA_SetConfig+0x1d0>
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a2a      	ldr	r2, [pc, #168]	@ (8003b08 <DMA_SetConfig+0x244>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d018      	beq.n	8003a94 <DMA_SetConfig+0x1d0>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a29      	ldr	r2, [pc, #164]	@ (8003b0c <DMA_SetConfig+0x248>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d013      	beq.n	8003a94 <DMA_SetConfig+0x1d0>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a27      	ldr	r2, [pc, #156]	@ (8003b10 <DMA_SetConfig+0x24c>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00e      	beq.n	8003a94 <DMA_SetConfig+0x1d0>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a26      	ldr	r2, [pc, #152]	@ (8003b14 <DMA_SetConfig+0x250>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d009      	beq.n	8003a94 <DMA_SetConfig+0x1d0>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a24      	ldr	r2, [pc, #144]	@ (8003b18 <DMA_SetConfig+0x254>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d004      	beq.n	8003a94 <DMA_SetConfig+0x1d0>
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a23      	ldr	r2, [pc, #140]	@ (8003b1c <DMA_SetConfig+0x258>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d101      	bne.n	8003a98 <DMA_SetConfig+0x1d4>
 8003a94:	2301      	movs	r3, #1
 8003a96:	e000      	b.n	8003a9a <DMA_SetConfig+0x1d6>
 8003a98:	2300      	movs	r3, #0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d059      	beq.n	8003b52 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa2:	f003 031f 	and.w	r3, r3, #31
 8003aa6:	223f      	movs	r2, #63	@ 0x3f
 8003aa8:	409a      	lsls	r2, r3
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003abc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	2b40      	cmp	r3, #64	@ 0x40
 8003acc:	d138      	bne.n	8003b40 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003ade:	e086      	b.n	8003bee <DMA_SetConfig+0x32a>
 8003ae0:	40020010 	.word	0x40020010
 8003ae4:	40020028 	.word	0x40020028
 8003ae8:	40020040 	.word	0x40020040
 8003aec:	40020058 	.word	0x40020058
 8003af0:	40020070 	.word	0x40020070
 8003af4:	40020088 	.word	0x40020088
 8003af8:	400200a0 	.word	0x400200a0
 8003afc:	400200b8 	.word	0x400200b8
 8003b00:	40020410 	.word	0x40020410
 8003b04:	40020428 	.word	0x40020428
 8003b08:	40020440 	.word	0x40020440
 8003b0c:	40020458 	.word	0x40020458
 8003b10:	40020470 	.word	0x40020470
 8003b14:	40020488 	.word	0x40020488
 8003b18:	400204a0 	.word	0x400204a0
 8003b1c:	400204b8 	.word	0x400204b8
 8003b20:	58025408 	.word	0x58025408
 8003b24:	5802541c 	.word	0x5802541c
 8003b28:	58025430 	.word	0x58025430
 8003b2c:	58025444 	.word	0x58025444
 8003b30:	58025458 	.word	0x58025458
 8003b34:	5802546c 	.word	0x5802546c
 8003b38:	58025480 	.word	0x58025480
 8003b3c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	60da      	str	r2, [r3, #12]
}
 8003b50:	e04d      	b.n	8003bee <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a29      	ldr	r2, [pc, #164]	@ (8003bfc <DMA_SetConfig+0x338>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d022      	beq.n	8003ba2 <DMA_SetConfig+0x2de>
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a27      	ldr	r2, [pc, #156]	@ (8003c00 <DMA_SetConfig+0x33c>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d01d      	beq.n	8003ba2 <DMA_SetConfig+0x2de>
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a26      	ldr	r2, [pc, #152]	@ (8003c04 <DMA_SetConfig+0x340>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d018      	beq.n	8003ba2 <DMA_SetConfig+0x2de>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a24      	ldr	r2, [pc, #144]	@ (8003c08 <DMA_SetConfig+0x344>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d013      	beq.n	8003ba2 <DMA_SetConfig+0x2de>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a23      	ldr	r2, [pc, #140]	@ (8003c0c <DMA_SetConfig+0x348>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d00e      	beq.n	8003ba2 <DMA_SetConfig+0x2de>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a21      	ldr	r2, [pc, #132]	@ (8003c10 <DMA_SetConfig+0x34c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d009      	beq.n	8003ba2 <DMA_SetConfig+0x2de>
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a20      	ldr	r2, [pc, #128]	@ (8003c14 <DMA_SetConfig+0x350>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d004      	beq.n	8003ba2 <DMA_SetConfig+0x2de>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a1e      	ldr	r2, [pc, #120]	@ (8003c18 <DMA_SetConfig+0x354>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d101      	bne.n	8003ba6 <DMA_SetConfig+0x2e2>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <DMA_SetConfig+0x2e4>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d020      	beq.n	8003bee <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bb0:	f003 031f 	and.w	r3, r3, #31
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	409a      	lsls	r2, r3
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	2b40      	cmp	r3, #64	@ 0x40
 8003bca:	d108      	bne.n	8003bde <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68ba      	ldr	r2, [r7, #8]
 8003bda:	60da      	str	r2, [r3, #12]
}
 8003bdc:	e007      	b.n	8003bee <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	60da      	str	r2, [r3, #12]
}
 8003bee:	bf00      	nop
 8003bf0:	371c      	adds	r7, #28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	58025408 	.word	0x58025408
 8003c00:	5802541c 	.word	0x5802541c
 8003c04:	58025430 	.word	0x58025430
 8003c08:	58025444 	.word	0x58025444
 8003c0c:	58025458 	.word	0x58025458
 8003c10:	5802546c 	.word	0x5802546c
 8003c14:	58025480 	.word	0x58025480
 8003c18:	58025494 	.word	0x58025494

08003c1c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b085      	sub	sp, #20
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a42      	ldr	r2, [pc, #264]	@ (8003d34 <DMA_CalcBaseAndBitshift+0x118>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d04a      	beq.n	8003cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a41      	ldr	r2, [pc, #260]	@ (8003d38 <DMA_CalcBaseAndBitshift+0x11c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d045      	beq.n	8003cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a3f      	ldr	r2, [pc, #252]	@ (8003d3c <DMA_CalcBaseAndBitshift+0x120>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d040      	beq.n	8003cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a3e      	ldr	r2, [pc, #248]	@ (8003d40 <DMA_CalcBaseAndBitshift+0x124>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d03b      	beq.n	8003cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a3c      	ldr	r2, [pc, #240]	@ (8003d44 <DMA_CalcBaseAndBitshift+0x128>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d036      	beq.n	8003cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a3b      	ldr	r2, [pc, #236]	@ (8003d48 <DMA_CalcBaseAndBitshift+0x12c>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d031      	beq.n	8003cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a39      	ldr	r2, [pc, #228]	@ (8003d4c <DMA_CalcBaseAndBitshift+0x130>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d02c      	beq.n	8003cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a38      	ldr	r2, [pc, #224]	@ (8003d50 <DMA_CalcBaseAndBitshift+0x134>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d027      	beq.n	8003cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a36      	ldr	r2, [pc, #216]	@ (8003d54 <DMA_CalcBaseAndBitshift+0x138>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d022      	beq.n	8003cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a35      	ldr	r2, [pc, #212]	@ (8003d58 <DMA_CalcBaseAndBitshift+0x13c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d01d      	beq.n	8003cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a33      	ldr	r2, [pc, #204]	@ (8003d5c <DMA_CalcBaseAndBitshift+0x140>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d018      	beq.n	8003cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a32      	ldr	r2, [pc, #200]	@ (8003d60 <DMA_CalcBaseAndBitshift+0x144>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d013      	beq.n	8003cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a30      	ldr	r2, [pc, #192]	@ (8003d64 <DMA_CalcBaseAndBitshift+0x148>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d00e      	beq.n	8003cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a2f      	ldr	r2, [pc, #188]	@ (8003d68 <DMA_CalcBaseAndBitshift+0x14c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d009      	beq.n	8003cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a2d      	ldr	r2, [pc, #180]	@ (8003d6c <DMA_CalcBaseAndBitshift+0x150>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d004      	beq.n	8003cc4 <DMA_CalcBaseAndBitshift+0xa8>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a2c      	ldr	r2, [pc, #176]	@ (8003d70 <DMA_CalcBaseAndBitshift+0x154>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d101      	bne.n	8003cc8 <DMA_CalcBaseAndBitshift+0xac>
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e000      	b.n	8003cca <DMA_CalcBaseAndBitshift+0xae>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d024      	beq.n	8003d18 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	3b10      	subs	r3, #16
 8003cd6:	4a27      	ldr	r2, [pc, #156]	@ (8003d74 <DMA_CalcBaseAndBitshift+0x158>)
 8003cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cdc:	091b      	lsrs	r3, r3, #4
 8003cde:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	4a24      	ldr	r2, [pc, #144]	@ (8003d78 <DMA_CalcBaseAndBitshift+0x15c>)
 8003ce8:	5cd3      	ldrb	r3, [r2, r3]
 8003cea:	461a      	mov	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2b03      	cmp	r3, #3
 8003cf4:	d908      	bls.n	8003d08 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8003d7c <DMA_CalcBaseAndBitshift+0x160>)
 8003cfe:	4013      	ands	r3, r2
 8003d00:	1d1a      	adds	r2, r3, #4
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d06:	e00d      	b.n	8003d24 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8003d7c <DMA_CalcBaseAndBitshift+0x160>)
 8003d10:	4013      	ands	r3, r2
 8003d12:	687a      	ldr	r2, [r7, #4]
 8003d14:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d16:	e005      	b.n	8003d24 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	40020010 	.word	0x40020010
 8003d38:	40020028 	.word	0x40020028
 8003d3c:	40020040 	.word	0x40020040
 8003d40:	40020058 	.word	0x40020058
 8003d44:	40020070 	.word	0x40020070
 8003d48:	40020088 	.word	0x40020088
 8003d4c:	400200a0 	.word	0x400200a0
 8003d50:	400200b8 	.word	0x400200b8
 8003d54:	40020410 	.word	0x40020410
 8003d58:	40020428 	.word	0x40020428
 8003d5c:	40020440 	.word	0x40020440
 8003d60:	40020458 	.word	0x40020458
 8003d64:	40020470 	.word	0x40020470
 8003d68:	40020488 	.word	0x40020488
 8003d6c:	400204a0 	.word	0x400204a0
 8003d70:	400204b8 	.word	0x400204b8
 8003d74:	aaaaaaab 	.word	0xaaaaaaab
 8003d78:	0800f188 	.word	0x0800f188
 8003d7c:	fffffc00 	.word	0xfffffc00

08003d80 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d120      	bne.n	8003dd6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d98:	2b03      	cmp	r3, #3
 8003d9a:	d858      	bhi.n	8003e4e <DMA_CheckFifoParam+0xce>
 8003d9c:	a201      	add	r2, pc, #4	@ (adr r2, 8003da4 <DMA_CheckFifoParam+0x24>)
 8003d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da2:	bf00      	nop
 8003da4:	08003db5 	.word	0x08003db5
 8003da8:	08003dc7 	.word	0x08003dc7
 8003dac:	08003db5 	.word	0x08003db5
 8003db0:	08003e4f 	.word	0x08003e4f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d048      	beq.n	8003e52 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003dc4:	e045      	b.n	8003e52 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dca:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003dce:	d142      	bne.n	8003e56 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003dd4:	e03f      	b.n	8003e56 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dde:	d123      	bne.n	8003e28 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003de4:	2b03      	cmp	r3, #3
 8003de6:	d838      	bhi.n	8003e5a <DMA_CheckFifoParam+0xda>
 8003de8:	a201      	add	r2, pc, #4	@ (adr r2, 8003df0 <DMA_CheckFifoParam+0x70>)
 8003dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dee:	bf00      	nop
 8003df0:	08003e01 	.word	0x08003e01
 8003df4:	08003e07 	.word	0x08003e07
 8003df8:	08003e01 	.word	0x08003e01
 8003dfc:	08003e19 	.word	0x08003e19
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	73fb      	strb	r3, [r7, #15]
        break;
 8003e04:	e030      	b.n	8003e68 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d025      	beq.n	8003e5e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e16:	e022      	b.n	8003e5e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e1c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e20:	d11f      	bne.n	8003e62 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003e26:	e01c      	b.n	8003e62 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d902      	bls.n	8003e36 <DMA_CheckFifoParam+0xb6>
 8003e30:	2b03      	cmp	r3, #3
 8003e32:	d003      	beq.n	8003e3c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003e34:	e018      	b.n	8003e68 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	73fb      	strb	r3, [r7, #15]
        break;
 8003e3a:	e015      	b.n	8003e68 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00e      	beq.n	8003e66 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	73fb      	strb	r3, [r7, #15]
    break;
 8003e4c:	e00b      	b.n	8003e66 <DMA_CheckFifoParam+0xe6>
        break;
 8003e4e:	bf00      	nop
 8003e50:	e00a      	b.n	8003e68 <DMA_CheckFifoParam+0xe8>
        break;
 8003e52:	bf00      	nop
 8003e54:	e008      	b.n	8003e68 <DMA_CheckFifoParam+0xe8>
        break;
 8003e56:	bf00      	nop
 8003e58:	e006      	b.n	8003e68 <DMA_CheckFifoParam+0xe8>
        break;
 8003e5a:	bf00      	nop
 8003e5c:	e004      	b.n	8003e68 <DMA_CheckFifoParam+0xe8>
        break;
 8003e5e:	bf00      	nop
 8003e60:	e002      	b.n	8003e68 <DMA_CheckFifoParam+0xe8>
        break;
 8003e62:	bf00      	nop
 8003e64:	e000      	b.n	8003e68 <DMA_CheckFifoParam+0xe8>
    break;
 8003e66:	bf00      	nop
    }
  }

  return status;
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3714      	adds	r7, #20
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop

08003e78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a38      	ldr	r2, [pc, #224]	@ (8003f6c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d022      	beq.n	8003ed6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a36      	ldr	r2, [pc, #216]	@ (8003f70 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d01d      	beq.n	8003ed6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a35      	ldr	r2, [pc, #212]	@ (8003f74 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d018      	beq.n	8003ed6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a33      	ldr	r2, [pc, #204]	@ (8003f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d013      	beq.n	8003ed6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a32      	ldr	r2, [pc, #200]	@ (8003f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d00e      	beq.n	8003ed6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a30      	ldr	r2, [pc, #192]	@ (8003f80 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d009      	beq.n	8003ed6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a2f      	ldr	r2, [pc, #188]	@ (8003f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d004      	beq.n	8003ed6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a2d      	ldr	r2, [pc, #180]	@ (8003f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d101      	bne.n	8003eda <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8003eda:	2300      	movs	r3, #0
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d01a      	beq.n	8003f16 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	3b08      	subs	r3, #8
 8003ee8:	4a28      	ldr	r2, [pc, #160]	@ (8003f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003eea:	fba2 2303 	umull	r2, r3, r2, r3
 8003eee:	091b      	lsrs	r3, r3, #4
 8003ef0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003ef2:	68fa      	ldr	r2, [r7, #12]
 8003ef4:	4b26      	ldr	r3, [pc, #152]	@ (8003f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003ef6:	4413      	add	r3, r2
 8003ef8:	009b      	lsls	r3, r3, #2
 8003efa:	461a      	mov	r2, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a24      	ldr	r2, [pc, #144]	@ (8003f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003f04:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f003 031f 	and.w	r3, r3, #31
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	409a      	lsls	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003f14:	e024      	b.n	8003f60 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	3b10      	subs	r3, #16
 8003f1e:	4a1e      	ldr	r2, [pc, #120]	@ (8003f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003f20:	fba2 2303 	umull	r2, r3, r2, r3
 8003f24:	091b      	lsrs	r3, r3, #4
 8003f26:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	4a1c      	ldr	r2, [pc, #112]	@ (8003f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d806      	bhi.n	8003f3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	4a1b      	ldr	r2, [pc, #108]	@ (8003fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d902      	bls.n	8003f3e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	3308      	adds	r3, #8
 8003f3c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4b18      	ldr	r3, [pc, #96]	@ (8003fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003f42:	4413      	add	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	461a      	mov	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	4a16      	ldr	r2, [pc, #88]	@ (8003fa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003f50:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	f003 031f 	and.w	r3, r3, #31
 8003f58:	2201      	movs	r2, #1
 8003f5a:	409a      	lsls	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003f60:	bf00      	nop
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	58025408 	.word	0x58025408
 8003f70:	5802541c 	.word	0x5802541c
 8003f74:	58025430 	.word	0x58025430
 8003f78:	58025444 	.word	0x58025444
 8003f7c:	58025458 	.word	0x58025458
 8003f80:	5802546c 	.word	0x5802546c
 8003f84:	58025480 	.word	0x58025480
 8003f88:	58025494 	.word	0x58025494
 8003f8c:	cccccccd 	.word	0xcccccccd
 8003f90:	16009600 	.word	0x16009600
 8003f94:	58025880 	.word	0x58025880
 8003f98:	aaaaaaab 	.word	0xaaaaaaab
 8003f9c:	400204b8 	.word	0x400204b8
 8003fa0:	4002040f 	.word	0x4002040f
 8003fa4:	10008200 	.word	0x10008200
 8003fa8:	40020880 	.word	0x40020880

08003fac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b085      	sub	sp, #20
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d04a      	beq.n	8004058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2b08      	cmp	r3, #8
 8003fc6:	d847      	bhi.n	8004058 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a25      	ldr	r2, [pc, #148]	@ (8004064 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d022      	beq.n	8004018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a24      	ldr	r2, [pc, #144]	@ (8004068 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d01d      	beq.n	8004018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a22      	ldr	r2, [pc, #136]	@ (800406c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d018      	beq.n	8004018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a21      	ldr	r2, [pc, #132]	@ (8004070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d013      	beq.n	8004018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a1f      	ldr	r2, [pc, #124]	@ (8004074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d00e      	beq.n	8004018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a1e      	ldr	r2, [pc, #120]	@ (8004078 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d009      	beq.n	8004018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a1c      	ldr	r2, [pc, #112]	@ (800407c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d004      	beq.n	8004018 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a1b      	ldr	r2, [pc, #108]	@ (8004080 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d101      	bne.n	800401c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004018:	2301      	movs	r3, #1
 800401a:	e000      	b.n	800401e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800401c:	2300      	movs	r3, #0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00a      	beq.n	8004038 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	4b17      	ldr	r3, [pc, #92]	@ (8004084 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	461a      	mov	r2, r3
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a15      	ldr	r2, [pc, #84]	@ (8004088 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004034:	671a      	str	r2, [r3, #112]	@ 0x70
 8004036:	e009      	b.n	800404c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	4b14      	ldr	r3, [pc, #80]	@ (800408c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800403c:	4413      	add	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	461a      	mov	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a11      	ldr	r2, [pc, #68]	@ (8004090 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800404a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	3b01      	subs	r3, #1
 8004050:	2201      	movs	r2, #1
 8004052:	409a      	lsls	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004058:	bf00      	nop
 800405a:	3714      	adds	r7, #20
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	58025408 	.word	0x58025408
 8004068:	5802541c 	.word	0x5802541c
 800406c:	58025430 	.word	0x58025430
 8004070:	58025444 	.word	0x58025444
 8004074:	58025458 	.word	0x58025458
 8004078:	5802546c 	.word	0x5802546c
 800407c:	58025480 	.word	0x58025480
 8004080:	58025494 	.word	0x58025494
 8004084:	1600963f 	.word	0x1600963f
 8004088:	58025940 	.word	0x58025940
 800408c:	1000823f 	.word	0x1000823f
 8004090:	40020940 	.word	0x40020940

08004094 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	460b      	mov	r3, r1
 800409e:	607a      	str	r2, [r7, #4]
 80040a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80040a2:	2300      	movs	r3, #0
 80040a4:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d101      	bne.n	80040b0 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e00a      	b.n	80040c6 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80040b0:	7afb      	ldrb	r3, [r7, #11]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d103      	bne.n	80040be <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	605a      	str	r2, [r3, #4]
      break;
 80040bc:	e002      	b.n	80040c4 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	75fb      	strb	r3, [r7, #23]
      break;
 80040c2:	bf00      	nop
  }

  return status;
 80040c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr

080040d2 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b083      	sub	sp, #12
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
 80040da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e003      	b.n	80040ee <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80040ec:	2300      	movs	r3, #0
  }
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	370c      	adds	r7, #12
 80040f2:	46bd      	mov	sp, r7
 80040f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f8:	4770      	bx	lr
	...

080040fc <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	0c1b      	lsrs	r3, r3, #16
 800410a:	f003 0303 	and.w	r3, r3, #3
 800410e:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 031f 	and.w	r3, r3, #31
 8004118:	2201      	movs	r2, #1
 800411a:	fa02 f303 	lsl.w	r3, r2, r3
 800411e:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8004120:	f7fd fecc 	bl	8001ebc <HAL_GetCurrentCPUID>
 8004124:	4603      	mov	r3, r0
 8004126:	2b03      	cmp	r3, #3
 8004128:	d105      	bne.n	8004136 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	011a      	lsls	r2, r3, #4
 800412e:	4b0f      	ldr	r3, [pc, #60]	@ (800416c <HAL_EXTI_IRQHandler+0x70>)
 8004130:	4413      	add	r3, r2
 8004132:	617b      	str	r3, [r7, #20]
 8004134:	e004      	b.n	8004140 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	011a      	lsls	r2, r3, #4
 800413a:	4b0d      	ldr	r3, [pc, #52]	@ (8004170 <HAL_EXTI_IRQHandler+0x74>)
 800413c:	4413      	add	r3, r2
 800413e:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4013      	ands	r3, r2
 8004148:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d009      	beq.n	8004164 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	4798      	blx	r3
    }
  }
}
 8004164:	bf00      	nop
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	58000088 	.word	0x58000088
 8004170:	580000c8 	.word	0x580000c8

08004174 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004174:	b480      	push	{r7}
 8004176:	b089      	sub	sp, #36	@ 0x24
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800417e:	2300      	movs	r3, #0
 8004180:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004182:	4b89      	ldr	r3, [pc, #548]	@ (80043a8 <HAL_GPIO_Init+0x234>)
 8004184:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004186:	e194      	b.n	80044b2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	2101      	movs	r1, #1
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	fa01 f303 	lsl.w	r3, r1, r3
 8004194:	4013      	ands	r3, r2
 8004196:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	2b00      	cmp	r3, #0
 800419c:	f000 8186 	beq.w	80044ac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f003 0303 	and.w	r3, r3, #3
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d005      	beq.n	80041b8 <HAL_GPIO_Init+0x44>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f003 0303 	and.w	r3, r3, #3
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d130      	bne.n	800421a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80041be:	69fb      	ldr	r3, [r7, #28]
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	2203      	movs	r2, #3
 80041c4:	fa02 f303 	lsl.w	r3, r2, r3
 80041c8:	43db      	mvns	r3, r3
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	4013      	ands	r3, r2
 80041ce:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	fa02 f303 	lsl.w	r3, r2, r3
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	4313      	orrs	r3, r2
 80041e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	69ba      	ldr	r2, [r7, #24]
 80041e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80041ee:	2201      	movs	r2, #1
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	fa02 f303 	lsl.w	r3, r2, r3
 80041f6:	43db      	mvns	r3, r3
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	4013      	ands	r3, r2
 80041fc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	091b      	lsrs	r3, r3, #4
 8004204:	f003 0201 	and.w	r2, r3, #1
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	fa02 f303 	lsl.w	r3, r2, r3
 800420e:	69ba      	ldr	r2, [r7, #24]
 8004210:	4313      	orrs	r3, r2
 8004212:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	f003 0303 	and.w	r3, r3, #3
 8004222:	2b03      	cmp	r3, #3
 8004224:	d017      	beq.n	8004256 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	005b      	lsls	r3, r3, #1
 8004230:	2203      	movs	r2, #3
 8004232:	fa02 f303 	lsl.w	r3, r2, r3
 8004236:	43db      	mvns	r3, r3
 8004238:	69ba      	ldr	r2, [r7, #24]
 800423a:	4013      	ands	r3, r2
 800423c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	005b      	lsls	r3, r3, #1
 8004246:	fa02 f303 	lsl.w	r3, r2, r3
 800424a:	69ba      	ldr	r2, [r7, #24]
 800424c:	4313      	orrs	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	2b02      	cmp	r3, #2
 8004260:	d123      	bne.n	80042aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	08da      	lsrs	r2, r3, #3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	3208      	adds	r2, #8
 800426a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800426e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004270:	69fb      	ldr	r3, [r7, #28]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	220f      	movs	r2, #15
 800427a:	fa02 f303 	lsl.w	r3, r2, r3
 800427e:	43db      	mvns	r3, r3
 8004280:	69ba      	ldr	r2, [r7, #24]
 8004282:	4013      	ands	r3, r2
 8004284:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	691a      	ldr	r2, [r3, #16]
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	4313      	orrs	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	08da      	lsrs	r2, r3, #3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3208      	adds	r2, #8
 80042a4:	69b9      	ldr	r1, [r7, #24]
 80042a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	005b      	lsls	r3, r3, #1
 80042b4:	2203      	movs	r2, #3
 80042b6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ba:	43db      	mvns	r3, r3
 80042bc:	69ba      	ldr	r2, [r7, #24]
 80042be:	4013      	ands	r3, r2
 80042c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f003 0203 	and.w	r2, r3, #3
 80042ca:	69fb      	ldr	r3, [r7, #28]
 80042cc:	005b      	lsls	r3, r3, #1
 80042ce:	fa02 f303 	lsl.w	r3, r2, r3
 80042d2:	69ba      	ldr	r2, [r7, #24]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	f000 80e0 	beq.w	80044ac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80042ec:	4b2f      	ldr	r3, [pc, #188]	@ (80043ac <HAL_GPIO_Init+0x238>)
 80042ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80042f2:	4a2e      	ldr	r2, [pc, #184]	@ (80043ac <HAL_GPIO_Init+0x238>)
 80042f4:	f043 0302 	orr.w	r3, r3, #2
 80042f8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80042fc:	4b2b      	ldr	r3, [pc, #172]	@ (80043ac <HAL_GPIO_Init+0x238>)
 80042fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004302:	f003 0302 	and.w	r3, r3, #2
 8004306:	60fb      	str	r3, [r7, #12]
 8004308:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800430a:	4a29      	ldr	r2, [pc, #164]	@ (80043b0 <HAL_GPIO_Init+0x23c>)
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	089b      	lsrs	r3, r3, #2
 8004310:	3302      	adds	r3, #2
 8004312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004316:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	f003 0303 	and.w	r3, r3, #3
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	220f      	movs	r2, #15
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	43db      	mvns	r3, r3
 8004328:	69ba      	ldr	r2, [r7, #24]
 800432a:	4013      	ands	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	4a20      	ldr	r2, [pc, #128]	@ (80043b4 <HAL_GPIO_Init+0x240>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d052      	beq.n	80043dc <HAL_GPIO_Init+0x268>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a1f      	ldr	r2, [pc, #124]	@ (80043b8 <HAL_GPIO_Init+0x244>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d031      	beq.n	80043a2 <HAL_GPIO_Init+0x22e>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a1e      	ldr	r2, [pc, #120]	@ (80043bc <HAL_GPIO_Init+0x248>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d02b      	beq.n	800439e <HAL_GPIO_Init+0x22a>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a1d      	ldr	r2, [pc, #116]	@ (80043c0 <HAL_GPIO_Init+0x24c>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d025      	beq.n	800439a <HAL_GPIO_Init+0x226>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a1c      	ldr	r2, [pc, #112]	@ (80043c4 <HAL_GPIO_Init+0x250>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d01f      	beq.n	8004396 <HAL_GPIO_Init+0x222>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a1b      	ldr	r2, [pc, #108]	@ (80043c8 <HAL_GPIO_Init+0x254>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d019      	beq.n	8004392 <HAL_GPIO_Init+0x21e>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a1a      	ldr	r2, [pc, #104]	@ (80043cc <HAL_GPIO_Init+0x258>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d013      	beq.n	800438e <HAL_GPIO_Init+0x21a>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a19      	ldr	r2, [pc, #100]	@ (80043d0 <HAL_GPIO_Init+0x25c>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d00d      	beq.n	800438a <HAL_GPIO_Init+0x216>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a18      	ldr	r2, [pc, #96]	@ (80043d4 <HAL_GPIO_Init+0x260>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d007      	beq.n	8004386 <HAL_GPIO_Init+0x212>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a17      	ldr	r2, [pc, #92]	@ (80043d8 <HAL_GPIO_Init+0x264>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d101      	bne.n	8004382 <HAL_GPIO_Init+0x20e>
 800437e:	2309      	movs	r3, #9
 8004380:	e02d      	b.n	80043de <HAL_GPIO_Init+0x26a>
 8004382:	230a      	movs	r3, #10
 8004384:	e02b      	b.n	80043de <HAL_GPIO_Init+0x26a>
 8004386:	2308      	movs	r3, #8
 8004388:	e029      	b.n	80043de <HAL_GPIO_Init+0x26a>
 800438a:	2307      	movs	r3, #7
 800438c:	e027      	b.n	80043de <HAL_GPIO_Init+0x26a>
 800438e:	2306      	movs	r3, #6
 8004390:	e025      	b.n	80043de <HAL_GPIO_Init+0x26a>
 8004392:	2305      	movs	r3, #5
 8004394:	e023      	b.n	80043de <HAL_GPIO_Init+0x26a>
 8004396:	2304      	movs	r3, #4
 8004398:	e021      	b.n	80043de <HAL_GPIO_Init+0x26a>
 800439a:	2303      	movs	r3, #3
 800439c:	e01f      	b.n	80043de <HAL_GPIO_Init+0x26a>
 800439e:	2302      	movs	r3, #2
 80043a0:	e01d      	b.n	80043de <HAL_GPIO_Init+0x26a>
 80043a2:	2301      	movs	r3, #1
 80043a4:	e01b      	b.n	80043de <HAL_GPIO_Init+0x26a>
 80043a6:	bf00      	nop
 80043a8:	58000080 	.word	0x58000080
 80043ac:	58024400 	.word	0x58024400
 80043b0:	58000400 	.word	0x58000400
 80043b4:	58020000 	.word	0x58020000
 80043b8:	58020400 	.word	0x58020400
 80043bc:	58020800 	.word	0x58020800
 80043c0:	58020c00 	.word	0x58020c00
 80043c4:	58021000 	.word	0x58021000
 80043c8:	58021400 	.word	0x58021400
 80043cc:	58021800 	.word	0x58021800
 80043d0:	58021c00 	.word	0x58021c00
 80043d4:	58022000 	.word	0x58022000
 80043d8:	58022400 	.word	0x58022400
 80043dc:	2300      	movs	r3, #0
 80043de:	69fa      	ldr	r2, [r7, #28]
 80043e0:	f002 0203 	and.w	r2, r2, #3
 80043e4:	0092      	lsls	r2, r2, #2
 80043e6:	4093      	lsls	r3, r2
 80043e8:	69ba      	ldr	r2, [r7, #24]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043ee:	4938      	ldr	r1, [pc, #224]	@ (80044d0 <HAL_GPIO_Init+0x35c>)
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	089b      	lsrs	r3, r3, #2
 80043f4:	3302      	adds	r3, #2
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80043fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	43db      	mvns	r3, r3
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	4013      	ands	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800441a:	69ba      	ldr	r2, [r7, #24]
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	4313      	orrs	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004422:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800442a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	43db      	mvns	r3, r3
 8004436:	69ba      	ldr	r2, [r7, #24]
 8004438:	4013      	ands	r3, r2
 800443a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d003      	beq.n	8004450 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	4313      	orrs	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004450:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	43db      	mvns	r3, r3
 8004462:	69ba      	ldr	r2, [r7, #24]
 8004464:	4013      	ands	r3, r2
 8004466:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d003      	beq.n	800447c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	4313      	orrs	r3, r2
 800447a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	43db      	mvns	r3, r3
 800448c:	69ba      	ldr	r2, [r7, #24]
 800448e:	4013      	ands	r3, r2
 8004490:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800449e:	69ba      	ldr	r2, [r7, #24]
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	3301      	adds	r3, #1
 80044b0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	fa22 f303 	lsr.w	r3, r2, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	f47f ae63 	bne.w	8004188 <HAL_GPIO_Init+0x14>
  }
}
 80044c2:	bf00      	nop
 80044c4:	bf00      	nop
 80044c6:	3724      	adds	r7, #36	@ 0x24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	58000400 	.word	0x58000400

080044d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b083      	sub	sp, #12
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
 80044dc:	460b      	mov	r3, r1
 80044de:	807b      	strh	r3, [r7, #2]
 80044e0:	4613      	mov	r3, r2
 80044e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044e4:	787b      	ldrb	r3, [r7, #1]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d003      	beq.n	80044f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044ea:	887a      	ldrh	r2, [r7, #2]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80044f0:	e003      	b.n	80044fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80044f2:	887b      	ldrh	r3, [r7, #2]
 80044f4:	041a      	lsls	r2, r3, #16
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	619a      	str	r2, [r3, #24]
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004506:	b480      	push	{r7}
 8004508:	b085      	sub	sp, #20
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
 800450e:	460b      	mov	r3, r1
 8004510:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004518:	887a      	ldrh	r2, [r7, #2]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	4013      	ands	r3, r2
 800451e:	041a      	lsls	r2, r3, #16
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	43d9      	mvns	r1, r3
 8004524:	887b      	ldrh	r3, [r7, #2]
 8004526:	400b      	ands	r3, r1
 8004528:	431a      	orrs	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	619a      	str	r2, [r3, #24]
}
 800452e:	bf00      	nop
 8004530:	3714      	adds	r7, #20
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr
	...

0800453c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800453c:	b480      	push	{r7}
 800453e:	b083      	sub	sp, #12
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004544:	4a08      	ldr	r2, [pc, #32]	@ (8004568 <HAL_HSEM_FastTake+0x2c>)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	3320      	adds	r3, #32
 800454a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800454e:	4a07      	ldr	r2, [pc, #28]	@ (800456c <HAL_HSEM_FastTake+0x30>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d101      	bne.n	8004558 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004554:	2300      	movs	r3, #0
 8004556:	e000      	b.n	800455a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
}
 800455a:	4618      	mov	r0, r3
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	58026400 	.word	0x58026400
 800456c:	80000300 	.word	0x80000300

08004570 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800457a:	4906      	ldr	r1, [pc, #24]	@ (8004594 <HAL_HSEM_Release+0x24>)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	58026400 	.word	0x58026400

08004598 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af02      	add	r7, sp, #8
 800459e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d101      	bne.n	80045aa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e0fe      	b.n	80047a8 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d106      	bne.n	80045c4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f00a f9f0 	bl	800e9a4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2203      	movs	r2, #3
 80045c8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f006 fdb4 	bl	800b13e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6818      	ldr	r0, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	7c1a      	ldrb	r2, [r3, #16]
 80045de:	f88d 2000 	strb.w	r2, [sp]
 80045e2:	3304      	adds	r3, #4
 80045e4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045e6:	f006 fc85 	bl	800aef4 <USB_CoreInit>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d005      	beq.n	80045fc <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e0d5      	b.n	80047a8 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2100      	movs	r1, #0
 8004602:	4618      	mov	r0, r3
 8004604:	f006 fdac 	bl	800b160 <USB_SetCurrentMode>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d005      	beq.n	800461a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2202      	movs	r2, #2
 8004612:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e0c6      	b.n	80047a8 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800461a:	2300      	movs	r3, #0
 800461c:	73fb      	strb	r3, [r7, #15]
 800461e:	e04a      	b.n	80046b6 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004620:	7bfa      	ldrb	r2, [r7, #15]
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	4613      	mov	r3, r2
 8004626:	00db      	lsls	r3, r3, #3
 8004628:	4413      	add	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	3315      	adds	r3, #21
 8004630:	2201      	movs	r2, #1
 8004632:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004634:	7bfa      	ldrb	r2, [r7, #15]
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	4613      	mov	r3, r2
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	4413      	add	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	3314      	adds	r3, #20
 8004644:	7bfa      	ldrb	r2, [r7, #15]
 8004646:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004648:	7bfa      	ldrb	r2, [r7, #15]
 800464a:	7bfb      	ldrb	r3, [r7, #15]
 800464c:	b298      	uxth	r0, r3
 800464e:	6879      	ldr	r1, [r7, #4]
 8004650:	4613      	mov	r3, r2
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	4413      	add	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	440b      	add	r3, r1
 800465a:	332e      	adds	r3, #46	@ 0x2e
 800465c:	4602      	mov	r2, r0
 800465e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004660:	7bfa      	ldrb	r2, [r7, #15]
 8004662:	6879      	ldr	r1, [r7, #4]
 8004664:	4613      	mov	r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	3318      	adds	r3, #24
 8004670:	2200      	movs	r2, #0
 8004672:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004674:	7bfa      	ldrb	r2, [r7, #15]
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	4613      	mov	r3, r2
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	331c      	adds	r3, #28
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004688:	7bfa      	ldrb	r2, [r7, #15]
 800468a:	6879      	ldr	r1, [r7, #4]
 800468c:	4613      	mov	r3, r2
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	4413      	add	r3, r2
 8004692:	009b      	lsls	r3, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	3320      	adds	r3, #32
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800469c:	7bfa      	ldrb	r2, [r7, #15]
 800469e:	6879      	ldr	r1, [r7, #4]
 80046a0:	4613      	mov	r3, r2
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	4413      	add	r3, r2
 80046a6:	009b      	lsls	r3, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	3324      	adds	r3, #36	@ 0x24
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
 80046b2:	3301      	adds	r3, #1
 80046b4:	73fb      	strb	r3, [r7, #15]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	791b      	ldrb	r3, [r3, #4]
 80046ba:	7bfa      	ldrb	r2, [r7, #15]
 80046bc:	429a      	cmp	r2, r3
 80046be:	d3af      	bcc.n	8004620 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046c0:	2300      	movs	r3, #0
 80046c2:	73fb      	strb	r3, [r7, #15]
 80046c4:	e044      	b.n	8004750 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80046c6:	7bfa      	ldrb	r2, [r7, #15]
 80046c8:	6879      	ldr	r1, [r7, #4]
 80046ca:	4613      	mov	r3, r2
 80046cc:	00db      	lsls	r3, r3, #3
 80046ce:	4413      	add	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80046d8:	2200      	movs	r2, #0
 80046da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80046dc:	7bfa      	ldrb	r2, [r7, #15]
 80046de:	6879      	ldr	r1, [r7, #4]
 80046e0:	4613      	mov	r3, r2
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	4413      	add	r3, r2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80046ee:	7bfa      	ldrb	r2, [r7, #15]
 80046f0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046f2:	7bfa      	ldrb	r2, [r7, #15]
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	4613      	mov	r3, r2
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	4413      	add	r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	440b      	add	r3, r1
 8004700:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004704:	2200      	movs	r2, #0
 8004706:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004708:	7bfa      	ldrb	r2, [r7, #15]
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	4613      	mov	r3, r2
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	4413      	add	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800471a:	2200      	movs	r2, #0
 800471c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800471e:	7bfa      	ldrb	r2, [r7, #15]
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	4613      	mov	r3, r2
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	4413      	add	r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	440b      	add	r3, r1
 800472c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004730:	2200      	movs	r2, #0
 8004732:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004734:	7bfa      	ldrb	r2, [r7, #15]
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004746:	2200      	movs	r2, #0
 8004748:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800474a:	7bfb      	ldrb	r3, [r7, #15]
 800474c:	3301      	adds	r3, #1
 800474e:	73fb      	strb	r3, [r7, #15]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	791b      	ldrb	r3, [r3, #4]
 8004754:	7bfa      	ldrb	r2, [r7, #15]
 8004756:	429a      	cmp	r2, r3
 8004758:	d3b5      	bcc.n	80046c6 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6818      	ldr	r0, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	7c1a      	ldrb	r2, [r3, #16]
 8004762:	f88d 2000 	strb.w	r2, [sp]
 8004766:	3304      	adds	r3, #4
 8004768:	cb0e      	ldmia	r3, {r1, r2, r3}
 800476a:	f006 fd45 	bl	800b1f8 <USB_DevInit>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e013      	b.n	80047a8 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2200      	movs	r2, #0
 8004784:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	7b1b      	ldrb	r3, [r3, #12]
 8004792:	2b01      	cmp	r3, #1
 8004794:	d102      	bne.n	800479c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f001 f96c 	bl	8005a74 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4618      	mov	r0, r3
 80047a2:	f007 fd84 	bl	800c2ae <USB_DevDisconnect>

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3710      	adds	r7, #16
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d101      	bne.n	80047cc <HAL_PCD_Start+0x1c>
 80047c8:	2302      	movs	r3, #2
 80047ca:	e022      	b.n	8004812 <HAL_PCD_Start+0x62>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	68db      	ldr	r3, [r3, #12]
 80047d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d009      	beq.n	80047f4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d105      	bne.n	80047f4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ec:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4618      	mov	r0, r3
 80047fa:	f006 fc8f 	bl	800b11c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f007 fd32 	bl	800c26c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2200      	movs	r2, #0
 800480c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800481a:	b590      	push	{r4, r7, lr}
 800481c:	b08d      	sub	sp, #52	@ 0x34
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4618      	mov	r0, r3
 8004832:	f007 fdf0 	bl	800c416 <USB_GetMode>
 8004836:	4603      	mov	r3, r0
 8004838:	2b00      	cmp	r3, #0
 800483a:	f040 84b9 	bne.w	80051b0 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4618      	mov	r0, r3
 8004844:	f007 fd54 	bl	800c2f0 <USB_ReadInterrupts>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	f000 84af 	beq.w	80051ae <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004850:	69fb      	ldr	r3, [r7, #28]
 8004852:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	0a1b      	lsrs	r3, r3, #8
 800485a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4618      	mov	r0, r3
 800486a:	f007 fd41 	bl	800c2f0 <USB_ReadInterrupts>
 800486e:	4603      	mov	r3, r0
 8004870:	f003 0302 	and.w	r3, r3, #2
 8004874:	2b02      	cmp	r3, #2
 8004876:	d107      	bne.n	8004888 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	695a      	ldr	r2, [r3, #20]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f002 0202 	and.w	r2, r2, #2
 8004886:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4618      	mov	r0, r3
 800488e:	f007 fd2f 	bl	800c2f0 <USB_ReadInterrupts>
 8004892:	4603      	mov	r3, r0
 8004894:	f003 0310 	and.w	r3, r3, #16
 8004898:	2b10      	cmp	r3, #16
 800489a:	d161      	bne.n	8004960 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699a      	ldr	r2, [r3, #24]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0210 	bic.w	r2, r2, #16
 80048aa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	6a1b      	ldr	r3, [r3, #32]
 80048b0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	f003 020f 	and.w	r2, r3, #15
 80048b8:	4613      	mov	r3, r2
 80048ba:	00db      	lsls	r3, r3, #3
 80048bc:	4413      	add	r3, r2
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	4413      	add	r3, r2
 80048c8:	3304      	adds	r3, #4
 80048ca:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	0c5b      	lsrs	r3, r3, #17
 80048d0:	f003 030f 	and.w	r3, r3, #15
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d124      	bne.n	8004922 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80048de:	4013      	ands	r3, r2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d035      	beq.n	8004950 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	091b      	lsrs	r3, r3, #4
 80048ec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80048ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048f2:	b29b      	uxth	r3, r3
 80048f4:	461a      	mov	r2, r3
 80048f6:	6a38      	ldr	r0, [r7, #32]
 80048f8:	f007 fb66 	bl	800bfc8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	091b      	lsrs	r3, r3, #4
 8004904:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004908:	441a      	add	r2, r3
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	695a      	ldr	r2, [r3, #20]
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	091b      	lsrs	r3, r3, #4
 8004916:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800491a:	441a      	add	r2, r3
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	615a      	str	r2, [r3, #20]
 8004920:	e016      	b.n	8004950 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004922:	69bb      	ldr	r3, [r7, #24]
 8004924:	0c5b      	lsrs	r3, r3, #17
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	2b06      	cmp	r3, #6
 800492c:	d110      	bne.n	8004950 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004934:	2208      	movs	r2, #8
 8004936:	4619      	mov	r1, r3
 8004938:	6a38      	ldr	r0, [r7, #32]
 800493a:	f007 fb45 	bl	800bfc8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	695a      	ldr	r2, [r3, #20]
 8004942:	69bb      	ldr	r3, [r7, #24]
 8004944:	091b      	lsrs	r3, r3, #4
 8004946:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800494a:	441a      	add	r2, r3
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699a      	ldr	r2, [r3, #24]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0210 	orr.w	r2, r2, #16
 800495e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4618      	mov	r0, r3
 8004966:	f007 fcc3 	bl	800c2f0 <USB_ReadInterrupts>
 800496a:	4603      	mov	r3, r0
 800496c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004970:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004974:	f040 80a7 	bne.w	8004ac6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4618      	mov	r0, r3
 8004982:	f007 fcc8 	bl	800c316 <USB_ReadDevAllOutEpInterrupt>
 8004986:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004988:	e099      	b.n	8004abe <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800498a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 808e 	beq.w	8004ab2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800499c:	b2d2      	uxtb	r2, r2
 800499e:	4611      	mov	r1, r2
 80049a0:	4618      	mov	r0, r3
 80049a2:	f007 fcec 	bl	800c37e <USB_ReadDevOutEPInterrupt>
 80049a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	f003 0301 	and.w	r3, r3, #1
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00c      	beq.n	80049cc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80049b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049be:	461a      	mov	r2, r3
 80049c0:	2301      	movs	r3, #1
 80049c2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80049c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 fece 	bl	8005768 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00c      	beq.n	80049f0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80049d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d8:	015a      	lsls	r2, r3, #5
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	4413      	add	r3, r2
 80049de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049e2:	461a      	mov	r2, r3
 80049e4:	2308      	movs	r3, #8
 80049e6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80049e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 ffa4 	bl	8005938 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f003 0310 	and.w	r3, r3, #16
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d008      	beq.n	8004a0c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80049fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a06:	461a      	mov	r2, r3
 8004a08:	2310      	movs	r3, #16
 8004a0a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d030      	beq.n	8004a78 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a1e:	2b80      	cmp	r3, #128	@ 0x80
 8004a20:	d109      	bne.n	8004a36 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a28:	685b      	ldr	r3, [r3, #4]
 8004a2a:	69fa      	ldr	r2, [r7, #28]
 8004a2c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a30:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004a34:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a38:	4613      	mov	r3, r2
 8004a3a:	00db      	lsls	r3, r3, #3
 8004a3c:	4413      	add	r3, r2
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	4413      	add	r3, r2
 8004a48:	3304      	adds	r3, #4
 8004a4a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	78db      	ldrb	r3, [r3, #3]
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d108      	bne.n	8004a66 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	2200      	movs	r2, #0
 8004a58:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5c:	b2db      	uxtb	r3, r3
 8004a5e:	4619      	mov	r1, r3
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f00a f8d5 	bl	800ec10 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a72:	461a      	mov	r2, r3
 8004a74:	2302      	movs	r3, #2
 8004a76:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f003 0320 	and.w	r3, r3, #32
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d008      	beq.n	8004a94 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a8e:	461a      	mov	r2, r3
 8004a90:	2320      	movs	r3, #32
 8004a92:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d009      	beq.n	8004ab2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa0:	015a      	lsls	r2, r3, #5
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aaa:	461a      	mov	r2, r3
 8004aac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004ab0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004ab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aba:	085b      	lsrs	r3, r3, #1
 8004abc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f47f af62 	bne.w	800498a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4618      	mov	r0, r3
 8004acc:	f007 fc10 	bl	800c2f0 <USB_ReadInterrupts>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ad6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004ada:	f040 80db 	bne.w	8004c94 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f007 fc31 	bl	800c34a <USB_ReadDevAllInEpInterrupt>
 8004ae8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004aee:	e0cd      	b.n	8004c8c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	f000 80c2 	beq.w	8004c80 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b02:	b2d2      	uxtb	r2, r2
 8004b04:	4611      	mov	r1, r2
 8004b06:	4618      	mov	r0, r3
 8004b08:	f007 fc57 	bl	800c3ba <USB_ReadDevInEPInterrupt>
 8004b0c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d057      	beq.n	8004bc8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	2201      	movs	r2, #1
 8004b20:	fa02 f303 	lsl.w	r3, r2, r3
 8004b24:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	43db      	mvns	r3, r3
 8004b32:	69f9      	ldr	r1, [r7, #28]
 8004b34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b38:	4013      	ands	r3, r2
 8004b3a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b48:	461a      	mov	r2, r3
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	799b      	ldrb	r3, [r3, #6]
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d132      	bne.n	8004bbc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004b56:	6879      	ldr	r1, [r7, #4]
 8004b58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	00db      	lsls	r3, r3, #3
 8004b5e:	4413      	add	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	440b      	add	r3, r1
 8004b64:	3320      	adds	r3, #32
 8004b66:	6819      	ldr	r1, [r3, #0]
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	4413      	add	r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	4403      	add	r3, r0
 8004b76:	331c      	adds	r3, #28
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4419      	add	r1, r3
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b80:	4613      	mov	r3, r2
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	4413      	add	r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4403      	add	r3, r0
 8004b8a:	3320      	adds	r3, #32
 8004b8c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d113      	bne.n	8004bbc <HAL_PCD_IRQHandler+0x3a2>
 8004b94:	6879      	ldr	r1, [r7, #4]
 8004b96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b98:	4613      	mov	r3, r2
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	4413      	add	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	440b      	add	r3, r1
 8004ba2:	3324      	adds	r3, #36	@ 0x24
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d108      	bne.n	8004bbc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6818      	ldr	r0, [r3, #0]
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	2101      	movs	r1, #1
 8004bb8:	f007 fc60 	bl	800c47c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f009 ff9f 	bl	800eb06 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d008      	beq.n	8004be4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd4:	015a      	lsls	r2, r3, #5
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bde:	461a      	mov	r2, r3
 8004be0:	2308      	movs	r3, #8
 8004be2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	f003 0310 	and.w	r3, r3, #16
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d008      	beq.n	8004c00 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bf0:	015a      	lsls	r2, r3, #5
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	2310      	movs	r3, #16
 8004bfe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d008      	beq.n	8004c1c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c16:	461a      	mov	r2, r3
 8004c18:	2340      	movs	r3, #64	@ 0x40
 8004c1a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	f003 0302 	and.w	r3, r3, #2
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d023      	beq.n	8004c6e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004c26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c28:	6a38      	ldr	r0, [r7, #32]
 8004c2a:	f006 fc43 	bl	800b4b4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c30:	4613      	mov	r3, r2
 8004c32:	00db      	lsls	r3, r3, #3
 8004c34:	4413      	add	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	3310      	adds	r3, #16
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	3304      	adds	r3, #4
 8004c40:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	78db      	ldrb	r3, [r3, #3]
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d108      	bne.n	8004c5c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	4619      	mov	r1, r3
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f009 ffec 	bl	800ec34 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	69fb      	ldr	r3, [r7, #28]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c68:	461a      	mov	r2, r3
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004c78:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 fce8 	bl	8005650 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c82:	3301      	adds	r3, #1
 8004c84:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004c86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c88:	085b      	lsrs	r3, r3, #1
 8004c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f47f af2e 	bne.w	8004af0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f007 fb29 	bl	800c2f0 <USB_ReadInterrupts>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ca4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ca8:	d122      	bne.n	8004cf0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	69fa      	ldr	r2, [r7, #28]
 8004cb4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004cb8:	f023 0301 	bic.w	r3, r3, #1
 8004cbc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d108      	bne.n	8004cda <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004cd0:	2100      	movs	r1, #0
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fef2 	bl	8005abc <HAL_PCDEx_LPM_Callback>
 8004cd8:	e002      	b.n	8004ce0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f009 ff8a 	bl	800ebf4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	695a      	ldr	r2, [r3, #20]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004cee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f007 fafb 	bl	800c2f0 <USB_ReadInterrupts>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004d00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004d04:	d112      	bne.n	8004d2c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d102      	bne.n	8004d1c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f009 ff46 	bl	800eba8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	695a      	ldr	r2, [r3, #20]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8004d2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f007 fadd 	bl	800c2f0 <USB_ReadInterrupts>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d40:	d121      	bne.n	8004d86 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	695a      	ldr	r2, [r3, #20]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8004d50:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d111      	bne.n	8004d80 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d6a:	089b      	lsrs	r3, r3, #2
 8004d6c:	f003 020f 	and.w	r2, r3, #15
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004d76:	2101      	movs	r1, #1
 8004d78:	6878      	ldr	r0, [r7, #4]
 8004d7a:	f000 fe9f 	bl	8005abc <HAL_PCDEx_LPM_Callback>
 8004d7e:	e002      	b.n	8004d86 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f009 ff11 	bl	800eba8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	f007 fab0 	bl	800c2f0 <USB_ReadInterrupts>
 8004d90:	4603      	mov	r3, r0
 8004d92:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d9a:	f040 80b7 	bne.w	8004f0c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	69fa      	ldr	r2, [r7, #28]
 8004da8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004dac:	f023 0301 	bic.w	r3, r3, #1
 8004db0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	2110      	movs	r1, #16
 8004db8:	4618      	mov	r0, r3
 8004dba:	f006 fb7b 	bl	800b4b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dc2:	e046      	b.n	8004e52 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004dd6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004de8:	0151      	lsls	r1, r2, #5
 8004dea:	69fa      	ldr	r2, [r7, #28]
 8004dec:	440a      	add	r2, r1
 8004dee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004df2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004df6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dfa:	015a      	lsls	r2, r3, #5
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	4413      	add	r3, r2
 8004e00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e04:	461a      	mov	r2, r3
 8004e06:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004e0a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e0e:	015a      	lsls	r2, r3, #5
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	4413      	add	r3, r2
 8004e14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e1c:	0151      	lsls	r1, r2, #5
 8004e1e:	69fa      	ldr	r2, [r7, #28]
 8004e20:	440a      	add	r2, r1
 8004e22:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e26:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004e2a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e3c:	0151      	lsls	r1, r2, #5
 8004e3e:	69fa      	ldr	r2, [r7, #28]
 8004e40:	440a      	add	r2, r1
 8004e42:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e46:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004e4a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e4e:	3301      	adds	r3, #1
 8004e50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	791b      	ldrb	r3, [r3, #4]
 8004e56:	461a      	mov	r2, r3
 8004e58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d3b2      	bcc.n	8004dc4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	69fa      	ldr	r2, [r7, #28]
 8004e68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e6c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8004e70:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	7bdb      	ldrb	r3, [r3, #15]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d016      	beq.n	8004ea8 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004e84:	69fa      	ldr	r2, [r7, #28]
 8004e86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e8a:	f043 030b 	orr.w	r3, r3, #11
 8004e8e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9a:	69fa      	ldr	r2, [r7, #28]
 8004e9c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ea0:	f043 030b 	orr.w	r3, r3, #11
 8004ea4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ea6:	e015      	b.n	8004ed4 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eae:	695a      	ldr	r2, [r3, #20]
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	f242 032b 	movw	r3, #8235	@ 0x202b
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	69fa      	ldr	r2, [r7, #28]
 8004eca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ece:	f043 030b 	orr.w	r3, r3, #11
 8004ed2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	69fa      	ldr	r2, [r7, #28]
 8004ede:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004ee2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004ee6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6818      	ldr	r0, [r3, #0]
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f007 fac0 	bl	800c47c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	695a      	ldr	r2, [r3, #20]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8004f0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f007 f9ed 	bl	800c2f0 <USB_ReadInterrupts>
 8004f16:	4603      	mov	r3, r0
 8004f18:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f1c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f20:	d123      	bne.n	8004f6a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f007 fa84 	bl	800c434 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4618      	mov	r0, r3
 8004f32:	f006 fb38 	bl	800b5a6 <USB_GetDevSpeed>
 8004f36:	4603      	mov	r3, r0
 8004f38:	461a      	mov	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681c      	ldr	r4, [r3, #0]
 8004f42:	f001 fdbb 	bl	8006abc <HAL_RCC_GetHCLKFreq>
 8004f46:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004f4c:	461a      	mov	r2, r3
 8004f4e:	4620      	mov	r0, r4
 8004f50:	f006 f842 	bl	800afd8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f009 fdfe 	bl	800eb56 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	695a      	ldr	r2, [r3, #20]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8004f68:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f007 f9be 	bl	800c2f0 <USB_ReadInterrupts>
 8004f74:	4603      	mov	r3, r0
 8004f76:	f003 0308 	and.w	r3, r3, #8
 8004f7a:	2b08      	cmp	r3, #8
 8004f7c:	d10a      	bne.n	8004f94 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f009 fddb 	bl	800eb3a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	695a      	ldr	r2, [r3, #20]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f002 0208 	and.w	r2, r2, #8
 8004f92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f007 f9a9 	bl	800c2f0 <USB_ReadInterrupts>
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fa4:	2b80      	cmp	r3, #128	@ 0x80
 8004fa6:	d123      	bne.n	8004ff0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004fa8:	6a3b      	ldr	r3, [r7, #32]
 8004faa:	699b      	ldr	r3, [r3, #24]
 8004fac:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fb0:	6a3b      	ldr	r3, [r7, #32]
 8004fb2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fb8:	e014      	b.n	8004fe4 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004fba:	6879      	ldr	r1, [r7, #4]
 8004fbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	00db      	lsls	r3, r3, #3
 8004fc2:	4413      	add	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	440b      	add	r3, r1
 8004fc8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d105      	bne.n	8004fde <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	4619      	mov	r1, r3
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 fb08 	bl	80055ee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	791b      	ldrb	r3, [r3, #4]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d3e4      	bcc.n	8004fba <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f007 f97b 	bl	800c2f0 <USB_ReadInterrupts>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005000:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005004:	d13c      	bne.n	8005080 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005006:	2301      	movs	r3, #1
 8005008:	627b      	str	r3, [r7, #36]	@ 0x24
 800500a:	e02b      	b.n	8005064 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800500c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	69fb      	ldr	r3, [r7, #28]
 8005012:	4413      	add	r3, r2
 8005014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005020:	4613      	mov	r3, r2
 8005022:	00db      	lsls	r3, r3, #3
 8005024:	4413      	add	r3, r2
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	440b      	add	r3, r1
 800502a:	3318      	adds	r3, #24
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	2b01      	cmp	r3, #1
 8005030:	d115      	bne.n	800505e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005032:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005034:	2b00      	cmp	r3, #0
 8005036:	da12      	bge.n	800505e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005038:	6879      	ldr	r1, [r7, #4]
 800503a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800503c:	4613      	mov	r3, r2
 800503e:	00db      	lsls	r3, r3, #3
 8005040:	4413      	add	r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	3317      	adds	r3, #23
 8005048:	2201      	movs	r2, #1
 800504a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800504c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800504e:	b2db      	uxtb	r3, r3
 8005050:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005054:	b2db      	uxtb	r3, r3
 8005056:	4619      	mov	r1, r3
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 fac8 	bl	80055ee <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800505e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005060:	3301      	adds	r3, #1
 8005062:	627b      	str	r3, [r7, #36]	@ 0x24
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	791b      	ldrb	r3, [r3, #4]
 8005068:	461a      	mov	r2, r3
 800506a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800506c:	4293      	cmp	r3, r2
 800506e:	d3cd      	bcc.n	800500c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	695a      	ldr	r2, [r3, #20]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800507e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4618      	mov	r0, r3
 8005086:	f007 f933 	bl	800c2f0 <USB_ReadInterrupts>
 800508a:	4603      	mov	r3, r0
 800508c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005090:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005094:	d156      	bne.n	8005144 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005096:	2301      	movs	r3, #1
 8005098:	627b      	str	r3, [r7, #36]	@ 0x24
 800509a:	e045      	b.n	8005128 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800509c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050b0:	4613      	mov	r3, r2
 80050b2:	00db      	lsls	r3, r3, #3
 80050b4:	4413      	add	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	440b      	add	r3, r1
 80050ba:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d12e      	bne.n	8005122 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80050c4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	da2b      	bge.n	8005122 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80050ca:	69bb      	ldr	r3, [r7, #24]
 80050cc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80050d6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80050da:	429a      	cmp	r2, r3
 80050dc:	d121      	bne.n	8005122 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80050de:	6879      	ldr	r1, [r7, #4]
 80050e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050e2:	4613      	mov	r3, r2
 80050e4:	00db      	lsls	r3, r3, #3
 80050e6:	4413      	add	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	440b      	add	r3, r1
 80050ec:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80050f0:	2201      	movs	r2, #1
 80050f2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	699b      	ldr	r3, [r3, #24]
 80050f8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005100:	6a3b      	ldr	r3, [r7, #32]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10a      	bne.n	8005122 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	69fa      	ldr	r2, [r7, #28]
 8005116:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800511a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800511e:	6053      	str	r3, [r2, #4]
            break;
 8005120:	e008      	b.n	8005134 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005124:	3301      	adds	r3, #1
 8005126:	627b      	str	r3, [r7, #36]	@ 0x24
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	791b      	ldrb	r3, [r3, #4]
 800512c:	461a      	mov	r2, r3
 800512e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005130:	4293      	cmp	r3, r2
 8005132:	d3b3      	bcc.n	800509c <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	695a      	ldr	r2, [r3, #20]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005142:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4618      	mov	r0, r3
 800514a:	f007 f8d1 	bl	800c2f0 <USB_ReadInterrupts>
 800514e:	4603      	mov	r3, r0
 8005150:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005154:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005158:	d10a      	bne.n	8005170 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f009 fd7c 	bl	800ec58 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	695a      	ldr	r2, [r3, #20]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800516e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4618      	mov	r0, r3
 8005176:	f007 f8bb 	bl	800c2f0 <USB_ReadInterrupts>
 800517a:	4603      	mov	r3, r0
 800517c:	f003 0304 	and.w	r3, r3, #4
 8005180:	2b04      	cmp	r3, #4
 8005182:	d115      	bne.n	80051b0 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	f003 0304 	and.w	r3, r3, #4
 8005192:	2b00      	cmp	r3, #0
 8005194:	d002      	beq.n	800519c <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f009 fd6c 	bl	800ec74 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	6859      	ldr	r1, [r3, #4]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	69ba      	ldr	r2, [r7, #24]
 80051a8:	430a      	orrs	r2, r1
 80051aa:	605a      	str	r2, [r3, #4]
 80051ac:	e000      	b.n	80051b0 <HAL_PCD_IRQHandler+0x996>
      return;
 80051ae:	bf00      	nop
    }
  }
}
 80051b0:	3734      	adds	r7, #52	@ 0x34
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd90      	pop	{r4, r7, pc}

080051b6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b082      	sub	sp, #8
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
 80051be:	460b      	mov	r3, r1
 80051c0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d101      	bne.n	80051d0 <HAL_PCD_SetAddress+0x1a>
 80051cc:	2302      	movs	r3, #2
 80051ce:	e012      	b.n	80051f6 <HAL_PCD_SetAddress+0x40>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	78fa      	ldrb	r2, [r7, #3]
 80051dc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	78fa      	ldrb	r2, [r7, #3]
 80051e4:	4611      	mov	r1, r2
 80051e6:	4618      	mov	r0, r3
 80051e8:	f007 f81a 	bl	800c220 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}

080051fe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80051fe:	b580      	push	{r7, lr}
 8005200:	b084      	sub	sp, #16
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	4608      	mov	r0, r1
 8005208:	4611      	mov	r1, r2
 800520a:	461a      	mov	r2, r3
 800520c:	4603      	mov	r3, r0
 800520e:	70fb      	strb	r3, [r7, #3]
 8005210:	460b      	mov	r3, r1
 8005212:	803b      	strh	r3, [r7, #0]
 8005214:	4613      	mov	r3, r2
 8005216:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005218:	2300      	movs	r3, #0
 800521a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800521c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005220:	2b00      	cmp	r3, #0
 8005222:	da0f      	bge.n	8005244 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005224:	78fb      	ldrb	r3, [r7, #3]
 8005226:	f003 020f 	and.w	r2, r3, #15
 800522a:	4613      	mov	r3, r2
 800522c:	00db      	lsls	r3, r3, #3
 800522e:	4413      	add	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	3310      	adds	r3, #16
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	4413      	add	r3, r2
 8005238:	3304      	adds	r3, #4
 800523a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2201      	movs	r2, #1
 8005240:	705a      	strb	r2, [r3, #1]
 8005242:	e00f      	b.n	8005264 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005244:	78fb      	ldrb	r3, [r7, #3]
 8005246:	f003 020f 	and.w	r2, r3, #15
 800524a:	4613      	mov	r3, r2
 800524c:	00db      	lsls	r3, r3, #3
 800524e:	4413      	add	r3, r2
 8005250:	009b      	lsls	r3, r3, #2
 8005252:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	4413      	add	r3, r2
 800525a:	3304      	adds	r3, #4
 800525c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2200      	movs	r2, #0
 8005262:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005264:	78fb      	ldrb	r3, [r7, #3]
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	b2da      	uxtb	r2, r3
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005270:	883a      	ldrh	r2, [r7, #0]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	78ba      	ldrb	r2, [r7, #2]
 800527a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	785b      	ldrb	r3, [r3, #1]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d004      	beq.n	800528e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	461a      	mov	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800528e:	78bb      	ldrb	r3, [r7, #2]
 8005290:	2b02      	cmp	r3, #2
 8005292:	d102      	bne.n	800529a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d101      	bne.n	80052a8 <HAL_PCD_EP_Open+0xaa>
 80052a4:	2302      	movs	r3, #2
 80052a6:	e00e      	b.n	80052c6 <HAL_PCD_EP_Open+0xc8>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68f9      	ldr	r1, [r7, #12]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f006 f99a 	bl	800b5f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80052c4:	7afb      	ldrb	r3, [r7, #11]
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b084      	sub	sp, #16
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	460b      	mov	r3, r1
 80052d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80052da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	da0f      	bge.n	8005302 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80052e2:	78fb      	ldrb	r3, [r7, #3]
 80052e4:	f003 020f 	and.w	r2, r3, #15
 80052e8:	4613      	mov	r3, r2
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	4413      	add	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	3310      	adds	r3, #16
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	4413      	add	r3, r2
 80052f6:	3304      	adds	r3, #4
 80052f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2201      	movs	r2, #1
 80052fe:	705a      	strb	r2, [r3, #1]
 8005300:	e00f      	b.n	8005322 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005302:	78fb      	ldrb	r3, [r7, #3]
 8005304:	f003 020f 	and.w	r2, r3, #15
 8005308:	4613      	mov	r3, r2
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	4413      	add	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	4413      	add	r3, r2
 8005318:	3304      	adds	r3, #4
 800531a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005322:	78fb      	ldrb	r3, [r7, #3]
 8005324:	f003 030f 	and.w	r3, r3, #15
 8005328:	b2da      	uxtb	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005334:	2b01      	cmp	r3, #1
 8005336:	d101      	bne.n	800533c <HAL_PCD_EP_Close+0x6e>
 8005338:	2302      	movs	r3, #2
 800533a:	e00e      	b.n	800535a <HAL_PCD_EP_Close+0x8c>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68f9      	ldr	r1, [r7, #12]
 800534a:	4618      	mov	r0, r3
 800534c:	f006 f9d8 	bl	800b700 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3710      	adds	r7, #16
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}

08005362 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b086      	sub	sp, #24
 8005366:	af00      	add	r7, sp, #0
 8005368:	60f8      	str	r0, [r7, #12]
 800536a:	607a      	str	r2, [r7, #4]
 800536c:	603b      	str	r3, [r7, #0]
 800536e:	460b      	mov	r3, r1
 8005370:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005372:	7afb      	ldrb	r3, [r7, #11]
 8005374:	f003 020f 	and.w	r2, r3, #15
 8005378:	4613      	mov	r3, r2
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	4413      	add	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	4413      	add	r3, r2
 8005388:	3304      	adds	r3, #4
 800538a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	683a      	ldr	r2, [r7, #0]
 8005396:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	2200      	movs	r2, #0
 800539c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	2200      	movs	r2, #0
 80053a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80053a4:	7afb      	ldrb	r3, [r7, #11]
 80053a6:	f003 030f 	and.w	r3, r3, #15
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	799b      	ldrb	r3, [r3, #6]
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d102      	bne.n	80053be <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6818      	ldr	r0, [r3, #0]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	799b      	ldrb	r3, [r3, #6]
 80053c6:	461a      	mov	r2, r3
 80053c8:	6979      	ldr	r1, [r7, #20]
 80053ca:	f006 fa75 	bl	800b8b8 <USB_EPStartXfer>

  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3718      	adds	r7, #24
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}

080053d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	460b      	mov	r3, r1
 80053e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80053e4:	78fb      	ldrb	r3, [r7, #3]
 80053e6:	f003 020f 	and.w	r2, r3, #15
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	4613      	mov	r3, r2
 80053ee:	00db      	lsls	r3, r3, #3
 80053f0:	4413      	add	r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	440b      	add	r3, r1
 80053f6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80053fa:	681b      	ldr	r3, [r3, #0]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	370c      	adds	r7, #12
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr

08005408 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	607a      	str	r2, [r7, #4]
 8005412:	603b      	str	r3, [r7, #0]
 8005414:	460b      	mov	r3, r1
 8005416:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005418:	7afb      	ldrb	r3, [r7, #11]
 800541a:	f003 020f 	and.w	r2, r3, #15
 800541e:	4613      	mov	r3, r2
 8005420:	00db      	lsls	r3, r3, #3
 8005422:	4413      	add	r3, r2
 8005424:	009b      	lsls	r3, r3, #2
 8005426:	3310      	adds	r3, #16
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	4413      	add	r3, r2
 800542c:	3304      	adds	r3, #4
 800542e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	683a      	ldr	r2, [r7, #0]
 800543a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	2200      	movs	r2, #0
 8005440:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005442:	697b      	ldr	r3, [r7, #20]
 8005444:	2201      	movs	r2, #1
 8005446:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005448:	7afb      	ldrb	r3, [r7, #11]
 800544a:	f003 030f 	and.w	r3, r3, #15
 800544e:	b2da      	uxtb	r2, r3
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	799b      	ldrb	r3, [r3, #6]
 8005458:	2b01      	cmp	r3, #1
 800545a:	d102      	bne.n	8005462 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800545c:	687a      	ldr	r2, [r7, #4]
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6818      	ldr	r0, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	799b      	ldrb	r3, [r3, #6]
 800546a:	461a      	mov	r2, r3
 800546c:	6979      	ldr	r1, [r7, #20]
 800546e:	f006 fa23 	bl	800b8b8 <USB_EPStartXfer>

  return HAL_OK;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	460b      	mov	r3, r1
 8005486:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005488:	78fb      	ldrb	r3, [r7, #3]
 800548a:	f003 030f 	and.w	r3, r3, #15
 800548e:	687a      	ldr	r2, [r7, #4]
 8005490:	7912      	ldrb	r2, [r2, #4]
 8005492:	4293      	cmp	r3, r2
 8005494:	d901      	bls.n	800549a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005496:	2301      	movs	r3, #1
 8005498:	e04f      	b.n	800553a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800549a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	da0f      	bge.n	80054c2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054a2:	78fb      	ldrb	r3, [r7, #3]
 80054a4:	f003 020f 	and.w	r2, r3, #15
 80054a8:	4613      	mov	r3, r2
 80054aa:	00db      	lsls	r3, r3, #3
 80054ac:	4413      	add	r3, r2
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	3310      	adds	r3, #16
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	4413      	add	r3, r2
 80054b6:	3304      	adds	r3, #4
 80054b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	2201      	movs	r2, #1
 80054be:	705a      	strb	r2, [r3, #1]
 80054c0:	e00d      	b.n	80054de <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80054c2:	78fa      	ldrb	r2, [r7, #3]
 80054c4:	4613      	mov	r3, r2
 80054c6:	00db      	lsls	r3, r3, #3
 80054c8:	4413      	add	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	4413      	add	r3, r2
 80054d4:	3304      	adds	r3, #4
 80054d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	2201      	movs	r2, #1
 80054e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80054e4:	78fb      	ldrb	r3, [r7, #3]
 80054e6:	f003 030f 	and.w	r3, r3, #15
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d101      	bne.n	80054fe <HAL_PCD_EP_SetStall+0x82>
 80054fa:	2302      	movs	r3, #2
 80054fc:	e01d      	b.n	800553a <HAL_PCD_EP_SetStall+0xbe>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2201      	movs	r2, #1
 8005502:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68f9      	ldr	r1, [r7, #12]
 800550c:	4618      	mov	r0, r3
 800550e:	f006 fdb3 	bl	800c078 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005512:	78fb      	ldrb	r3, [r7, #3]
 8005514:	f003 030f 	and.w	r3, r3, #15
 8005518:	2b00      	cmp	r3, #0
 800551a:	d109      	bne.n	8005530 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6818      	ldr	r0, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	7999      	ldrb	r1, [r3, #6]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800552a:	461a      	mov	r2, r3
 800552c:	f006 ffa6 	bl	800c47c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b084      	sub	sp, #16
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	460b      	mov	r3, r1
 800554c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800554e:	78fb      	ldrb	r3, [r7, #3]
 8005550:	f003 030f 	and.w	r3, r3, #15
 8005554:	687a      	ldr	r2, [r7, #4]
 8005556:	7912      	ldrb	r2, [r2, #4]
 8005558:	4293      	cmp	r3, r2
 800555a:	d901      	bls.n	8005560 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e042      	b.n	80055e6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005560:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005564:	2b00      	cmp	r3, #0
 8005566:	da0f      	bge.n	8005588 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005568:	78fb      	ldrb	r3, [r7, #3]
 800556a:	f003 020f 	and.w	r2, r3, #15
 800556e:	4613      	mov	r3, r2
 8005570:	00db      	lsls	r3, r3, #3
 8005572:	4413      	add	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	3310      	adds	r3, #16
 8005578:	687a      	ldr	r2, [r7, #4]
 800557a:	4413      	add	r3, r2
 800557c:	3304      	adds	r3, #4
 800557e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	2201      	movs	r2, #1
 8005584:	705a      	strb	r2, [r3, #1]
 8005586:	e00f      	b.n	80055a8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005588:	78fb      	ldrb	r3, [r7, #3]
 800558a:	f003 020f 	and.w	r2, r3, #15
 800558e:	4613      	mov	r3, r2
 8005590:	00db      	lsls	r3, r3, #3
 8005592:	4413      	add	r3, r2
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	4413      	add	r3, r2
 800559e:	3304      	adds	r3, #4
 80055a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80055ae:	78fb      	ldrb	r3, [r7, #3]
 80055b0:	f003 030f 	and.w	r3, r3, #15
 80055b4:	b2da      	uxtb	r2, r3
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80055c0:	2b01      	cmp	r3, #1
 80055c2:	d101      	bne.n	80055c8 <HAL_PCD_EP_ClrStall+0x86>
 80055c4:	2302      	movs	r3, #2
 80055c6:	e00e      	b.n	80055e6 <HAL_PCD_EP_ClrStall+0xa4>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68f9      	ldr	r1, [r7, #12]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f006 fdbc 	bl	800c154 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b084      	sub	sp, #16
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	6078      	str	r0, [r7, #4]
 80055f6:	460b      	mov	r3, r1
 80055f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80055fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	da0c      	bge.n	800561c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005602:	78fb      	ldrb	r3, [r7, #3]
 8005604:	f003 020f 	and.w	r2, r3, #15
 8005608:	4613      	mov	r3, r2
 800560a:	00db      	lsls	r3, r3, #3
 800560c:	4413      	add	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	3310      	adds	r3, #16
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	4413      	add	r3, r2
 8005616:	3304      	adds	r3, #4
 8005618:	60fb      	str	r3, [r7, #12]
 800561a:	e00c      	b.n	8005636 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800561c:	78fb      	ldrb	r3, [r7, #3]
 800561e:	f003 020f 	and.w	r2, r3, #15
 8005622:	4613      	mov	r3, r2
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	4413      	add	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800562e:	687a      	ldr	r2, [r7, #4]
 8005630:	4413      	add	r3, r2
 8005632:	3304      	adds	r3, #4
 8005634:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68f9      	ldr	r1, [r7, #12]
 800563c:	4618      	mov	r0, r3
 800563e:	f006 fbdb 	bl	800bdf8 <USB_EPStopXfer>
 8005642:	4603      	mov	r3, r0
 8005644:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005646:	7afb      	ldrb	r3, [r7, #11]
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b08a      	sub	sp, #40	@ 0x28
 8005654:	af02      	add	r7, sp, #8
 8005656:	6078      	str	r0, [r7, #4]
 8005658:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005664:	683a      	ldr	r2, [r7, #0]
 8005666:	4613      	mov	r3, r2
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	4413      	add	r3, r2
 800566c:	009b      	lsls	r3, r3, #2
 800566e:	3310      	adds	r3, #16
 8005670:	687a      	ldr	r2, [r7, #4]
 8005672:	4413      	add	r3, r2
 8005674:	3304      	adds	r3, #4
 8005676:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	695a      	ldr	r2, [r3, #20]
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	429a      	cmp	r2, r3
 8005682:	d901      	bls.n	8005688 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e06b      	b.n	8005760 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	691a      	ldr	r2, [r3, #16]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	695b      	ldr	r3, [r3, #20]
 8005690:	1ad3      	subs	r3, r2, r3
 8005692:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	69fa      	ldr	r2, [r7, #28]
 800569a:	429a      	cmp	r2, r3
 800569c:	d902      	bls.n	80056a4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	3303      	adds	r3, #3
 80056a8:	089b      	lsrs	r3, r3, #2
 80056aa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80056ac:	e02a      	b.n	8005704 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	691a      	ldr	r2, [r3, #16]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	1ad3      	subs	r3, r2, r3
 80056b8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	69fa      	ldr	r2, [r7, #28]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d902      	bls.n	80056ca <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	3303      	adds	r3, #3
 80056ce:	089b      	lsrs	r3, r3, #2
 80056d0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	68d9      	ldr	r1, [r3, #12]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	b2da      	uxtb	r2, r3
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	4603      	mov	r3, r0
 80056e6:	6978      	ldr	r0, [r7, #20]
 80056e8:	f006 fc30 	bl	800bf4c <USB_WritePacket>

    ep->xfer_buff  += len;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	68da      	ldr	r2, [r3, #12]
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	441a      	add	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	695a      	ldr	r2, [r3, #20]
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	441a      	add	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	015a      	lsls	r2, r3, #5
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	4413      	add	r3, r2
 800570c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005714:	69ba      	ldr	r2, [r7, #24]
 8005716:	429a      	cmp	r2, r3
 8005718:	d809      	bhi.n	800572e <PCD_WriteEmptyTxFifo+0xde>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	695a      	ldr	r2, [r3, #20]
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005722:	429a      	cmp	r2, r3
 8005724:	d203      	bcs.n	800572e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d1bf      	bne.n	80056ae <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	691a      	ldr	r2, [r3, #16]
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	695b      	ldr	r3, [r3, #20]
 8005736:	429a      	cmp	r2, r3
 8005738:	d811      	bhi.n	800575e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	f003 030f 	and.w	r3, r3, #15
 8005740:	2201      	movs	r2, #1
 8005742:	fa02 f303 	lsl.w	r3, r2, r3
 8005746:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800574e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	43db      	mvns	r3, r3
 8005754:	6939      	ldr	r1, [r7, #16]
 8005756:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800575a:	4013      	ands	r3, r2
 800575c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800575e:	2300      	movs	r3, #0
}
 8005760:	4618      	mov	r0, r3
 8005762:	3720      	adds	r7, #32
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}

08005768 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b088      	sub	sp, #32
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	333c      	adds	r3, #60	@ 0x3c
 8005780:	3304      	adds	r3, #4
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	015a      	lsls	r2, r3, #5
 800578a:	69bb      	ldr	r3, [r7, #24]
 800578c:	4413      	add	r3, r2
 800578e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	799b      	ldrb	r3, [r3, #6]
 800579a:	2b01      	cmp	r3, #1
 800579c:	d17b      	bne.n	8005896 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	f003 0308 	and.w	r3, r3, #8
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d015      	beq.n	80057d4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	4a61      	ldr	r2, [pc, #388]	@ (8005930 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	f240 80b9 	bls.w	8005924 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	f000 80b3 	beq.w	8005924 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	015a      	lsls	r2, r3, #5
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	4413      	add	r3, r2
 80057c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ca:	461a      	mov	r2, r3
 80057cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80057d0:	6093      	str	r3, [r2, #8]
 80057d2:	e0a7      	b.n	8005924 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	f003 0320 	and.w	r3, r3, #32
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d009      	beq.n	80057f2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	015a      	lsls	r2, r3, #5
 80057e2:	69bb      	ldr	r3, [r7, #24]
 80057e4:	4413      	add	r3, r2
 80057e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ea:	461a      	mov	r2, r3
 80057ec:	2320      	movs	r3, #32
 80057ee:	6093      	str	r3, [r2, #8]
 80057f0:	e098      	b.n	8005924 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	f040 8093 	bne.w	8005924 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	4a4b      	ldr	r2, [pc, #300]	@ (8005930 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d90f      	bls.n	8005826 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800580c:	2b00      	cmp	r3, #0
 800580e:	d00a      	beq.n	8005826 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	015a      	lsls	r2, r3, #5
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	4413      	add	r3, r2
 8005818:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800581c:	461a      	mov	r2, r3
 800581e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005822:	6093      	str	r3, [r2, #8]
 8005824:	e07e      	b.n	8005924 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	4613      	mov	r3, r2
 800582a:	00db      	lsls	r3, r3, #3
 800582c:	4413      	add	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	4413      	add	r3, r2
 8005838:	3304      	adds	r3, #4
 800583a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	6a1a      	ldr	r2, [r3, #32]
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	0159      	lsls	r1, r3, #5
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	440b      	add	r3, r1
 8005848:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005852:	1ad2      	subs	r2, r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d114      	bne.n	8005888 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	691b      	ldr	r3, [r3, #16]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d109      	bne.n	800587a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6818      	ldr	r0, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005870:	461a      	mov	r2, r3
 8005872:	2101      	movs	r1, #1
 8005874:	f006 fe02 	bl	800c47c <USB_EP0_OutStart>
 8005878:	e006      	b.n	8005888 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	68da      	ldr	r2, [r3, #12]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	441a      	add	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	b2db      	uxtb	r3, r3
 800588c:	4619      	mov	r1, r3
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f009 f91e 	bl	800ead0 <HAL_PCD_DataOutStageCallback>
 8005894:	e046      	b.n	8005924 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	4a26      	ldr	r2, [pc, #152]	@ (8005934 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d124      	bne.n	80058e8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00a      	beq.n	80058be <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	015a      	lsls	r2, r3, #5
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	4413      	add	r3, r2
 80058b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058b4:	461a      	mov	r2, r3
 80058b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80058ba:	6093      	str	r3, [r2, #8]
 80058bc:	e032      	b.n	8005924 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f003 0320 	and.w	r3, r3, #32
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d008      	beq.n	80058da <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	015a      	lsls	r2, r3, #5
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	4413      	add	r3, r2
 80058d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058d4:	461a      	mov	r2, r3
 80058d6:	2320      	movs	r3, #32
 80058d8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	4619      	mov	r1, r3
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f009 f8f5 	bl	800ead0 <HAL_PCD_DataOutStageCallback>
 80058e6:	e01d      	b.n	8005924 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d114      	bne.n	8005918 <PCD_EP_OutXfrComplete_int+0x1b0>
 80058ee:	6879      	ldr	r1, [r7, #4]
 80058f0:	683a      	ldr	r2, [r7, #0]
 80058f2:	4613      	mov	r3, r2
 80058f4:	00db      	lsls	r3, r3, #3
 80058f6:	4413      	add	r3, r2
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	440b      	add	r3, r1
 80058fc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d108      	bne.n	8005918 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6818      	ldr	r0, [r3, #0]
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005910:	461a      	mov	r2, r3
 8005912:	2100      	movs	r1, #0
 8005914:	f006 fdb2 	bl	800c47c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	b2db      	uxtb	r3, r3
 800591c:	4619      	mov	r1, r3
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f009 f8d6 	bl	800ead0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3720      	adds	r7, #32
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	4f54300a 	.word	0x4f54300a
 8005934:	4f54310a 	.word	0x4f54310a

08005938 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b086      	sub	sp, #24
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	333c      	adds	r3, #60	@ 0x3c
 8005950:	3304      	adds	r3, #4
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4a15      	ldr	r2, [pc, #84]	@ (80059c0 <PCD_EP_OutSetupPacket_int+0x88>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d90e      	bls.n	800598c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005974:	2b00      	cmp	r3, #0
 8005976:	d009      	beq.n	800598c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	4413      	add	r3, r2
 8005980:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005984:	461a      	mov	r2, r3
 8005986:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800598a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f009 f88d 	bl	800eaac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	4a0a      	ldr	r2, [pc, #40]	@ (80059c0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d90c      	bls.n	80059b4 <PCD_EP_OutSetupPacket_int+0x7c>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	799b      	ldrb	r3, [r3, #6]
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d108      	bne.n	80059b4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6818      	ldr	r0, [r3, #0]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80059ac:	461a      	mov	r2, r3
 80059ae:	2101      	movs	r1, #1
 80059b0:	f006 fd64 	bl	800c47c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	4f54300a 	.word	0x4f54300a

080059c4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b085      	sub	sp, #20
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	460b      	mov	r3, r1
 80059ce:	70fb      	strb	r3, [r7, #3]
 80059d0:	4613      	mov	r3, r2
 80059d2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059da:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80059dc:	78fb      	ldrb	r3, [r7, #3]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d107      	bne.n	80059f2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80059e2:	883b      	ldrh	r3, [r7, #0]
 80059e4:	0419      	lsls	r1, r3, #16
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68ba      	ldr	r2, [r7, #8]
 80059ec:	430a      	orrs	r2, r1
 80059ee:	629a      	str	r2, [r3, #40]	@ 0x28
 80059f0:	e028      	b.n	8005a44 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f8:	0c1b      	lsrs	r3, r3, #16
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	4413      	add	r3, r2
 80059fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005a00:	2300      	movs	r3, #0
 8005a02:	73fb      	strb	r3, [r7, #15]
 8005a04:	e00d      	b.n	8005a22 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681a      	ldr	r2, [r3, #0]
 8005a0a:	7bfb      	ldrb	r3, [r7, #15]
 8005a0c:	3340      	adds	r3, #64	@ 0x40
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	0c1b      	lsrs	r3, r3, #16
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	4413      	add	r3, r2
 8005a1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005a1c:	7bfb      	ldrb	r3, [r7, #15]
 8005a1e:	3301      	adds	r3, #1
 8005a20:	73fb      	strb	r3, [r7, #15]
 8005a22:	7bfa      	ldrb	r2, [r7, #15]
 8005a24:	78fb      	ldrb	r3, [r7, #3]
 8005a26:	3b01      	subs	r3, #1
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d3ec      	bcc.n	8005a06 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005a2c:	883b      	ldrh	r3, [r7, #0]
 8005a2e:	0418      	lsls	r0, r3, #16
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6819      	ldr	r1, [r3, #0]
 8005a34:	78fb      	ldrb	r3, [r7, #3]
 8005a36:	3b01      	subs	r3, #1
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	4302      	orrs	r2, r0
 8005a3c:	3340      	adds	r3, #64	@ 0x40
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	440b      	add	r3, r1
 8005a42:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3714      	adds	r7, #20
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a50:	4770      	bx	lr

08005a52 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005a52:	b480      	push	{r7}
 8005a54:	b083      	sub	sp, #12
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	6078      	str	r0, [r7, #4]
 8005a5a:	460b      	mov	r3, r1
 8005a5c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	887a      	ldrh	r2, [r7, #2]
 8005a64:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr

08005a74 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	699b      	ldr	r3, [r3, #24]
 8005a96:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005aa2:	4b05      	ldr	r3, [pc, #20]	@ (8005ab8 <HAL_PCDEx_ActivateLPM+0x44>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3714      	adds	r7, #20
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab6:	4770      	bx	lr
 8005ab8:	10000003 	.word	0x10000003

08005abc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005adc:	4b29      	ldr	r3, [pc, #164]	@ (8005b84 <HAL_PWREx_ConfigSupply+0xb0>)
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f003 0307 	and.w	r3, r3, #7
 8005ae4:	2b06      	cmp	r3, #6
 8005ae6:	d00a      	beq.n	8005afe <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005ae8:	4b26      	ldr	r3, [pc, #152]	@ (8005b84 <HAL_PWREx_ConfigSupply+0xb0>)
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d001      	beq.n	8005afa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e040      	b.n	8005b7c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005afa:	2300      	movs	r3, #0
 8005afc:	e03e      	b.n	8005b7c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005afe:	4b21      	ldr	r3, [pc, #132]	@ (8005b84 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8005b06:	491f      	ldr	r1, [pc, #124]	@ (8005b84 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005b0e:	f7fc f889 	bl	8001c24 <HAL_GetTick>
 8005b12:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b14:	e009      	b.n	8005b2a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005b16:	f7fc f885 	bl	8001c24 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b24:	d901      	bls.n	8005b2a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e028      	b.n	8005b7c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005b2a:	4b16      	ldr	r3, [pc, #88]	@ (8005b84 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b2c:	685b      	ldr	r3, [r3, #4]
 8005b2e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b36:	d1ee      	bne.n	8005b16 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2b1e      	cmp	r3, #30
 8005b3c:	d008      	beq.n	8005b50 <HAL_PWREx_ConfigSupply+0x7c>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2b2e      	cmp	r3, #46	@ 0x2e
 8005b42:	d005      	beq.n	8005b50 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2b1d      	cmp	r3, #29
 8005b48:	d002      	beq.n	8005b50 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2b2d      	cmp	r3, #45	@ 0x2d
 8005b4e:	d114      	bne.n	8005b7a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005b50:	f7fc f868 	bl	8001c24 <HAL_GetTick>
 8005b54:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005b56:	e009      	b.n	8005b6c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005b58:	f7fc f864 	bl	8001c24 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b66:	d901      	bls.n	8005b6c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e007      	b.n	8005b7c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005b6c:	4b05      	ldr	r3, [pc, #20]	@ (8005b84 <HAL_PWREx_ConfigSupply+0xb0>)
 8005b6e:	68db      	ldr	r3, [r3, #12]
 8005b70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b78:	d1ee      	bne.n	8005b58 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3710      	adds	r7, #16
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	58024800 	.word	0x58024800

08005b88 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005b8c:	4b05      	ldr	r3, [pc, #20]	@ (8005ba4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	4a04      	ldr	r2, [pc, #16]	@ (8005ba4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005b92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005b96:	60d3      	str	r3, [r2, #12]
}
 8005b98:	bf00      	nop
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	58024800 	.word	0x58024800

08005ba8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b08c      	sub	sp, #48	@ 0x30
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d102      	bne.n	8005bbc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	f000 bc48 	b.w	800644c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 0301 	and.w	r3, r3, #1
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 8088 	beq.w	8005cda <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bca:	4b99      	ldr	r3, [pc, #612]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005bcc:	691b      	ldr	r3, [r3, #16]
 8005bce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005bd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005bd4:	4b96      	ldr	r3, [pc, #600]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bdc:	2b10      	cmp	r3, #16
 8005bde:	d007      	beq.n	8005bf0 <HAL_RCC_OscConfig+0x48>
 8005be0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005be2:	2b18      	cmp	r3, #24
 8005be4:	d111      	bne.n	8005c0a <HAL_RCC_OscConfig+0x62>
 8005be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005be8:	f003 0303 	and.w	r3, r3, #3
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d10c      	bne.n	8005c0a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bf0:	4b8f      	ldr	r3, [pc, #572]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d06d      	beq.n	8005cd8 <HAL_RCC_OscConfig+0x130>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d169      	bne.n	8005cd8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	f000 bc21 	b.w	800644c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005c12:	d106      	bne.n	8005c22 <HAL_RCC_OscConfig+0x7a>
 8005c14:	4b86      	ldr	r3, [pc, #536]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a85      	ldr	r2, [pc, #532]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005c1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c1e:	6013      	str	r3, [r2, #0]
 8005c20:	e02e      	b.n	8005c80 <HAL_RCC_OscConfig+0xd8>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10c      	bne.n	8005c44 <HAL_RCC_OscConfig+0x9c>
 8005c2a:	4b81      	ldr	r3, [pc, #516]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	4a80      	ldr	r2, [pc, #512]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005c30:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c34:	6013      	str	r3, [r2, #0]
 8005c36:	4b7e      	ldr	r3, [pc, #504]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a7d      	ldr	r2, [pc, #500]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005c3c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c40:	6013      	str	r3, [r2, #0]
 8005c42:	e01d      	b.n	8005c80 <HAL_RCC_OscConfig+0xd8>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	685b      	ldr	r3, [r3, #4]
 8005c48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005c4c:	d10c      	bne.n	8005c68 <HAL_RCC_OscConfig+0xc0>
 8005c4e:	4b78      	ldr	r3, [pc, #480]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a77      	ldr	r2, [pc, #476]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005c54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005c58:	6013      	str	r3, [r2, #0]
 8005c5a:	4b75      	ldr	r3, [pc, #468]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a74      	ldr	r2, [pc, #464]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005c64:	6013      	str	r3, [r2, #0]
 8005c66:	e00b      	b.n	8005c80 <HAL_RCC_OscConfig+0xd8>
 8005c68:	4b71      	ldr	r3, [pc, #452]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a70      	ldr	r2, [pc, #448]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005c6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	4b6e      	ldr	r3, [pc, #440]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a6d      	ldr	r2, [pc, #436]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005c7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d013      	beq.n	8005cb0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c88:	f7fb ffcc 	bl	8001c24 <HAL_GetTick>
 8005c8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005c8e:	e008      	b.n	8005ca2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c90:	f7fb ffc8 	bl	8001c24 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	2b64      	cmp	r3, #100	@ 0x64
 8005c9c:	d901      	bls.n	8005ca2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e3d4      	b.n	800644c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005ca2:	4b63      	ldr	r3, [pc, #396]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d0f0      	beq.n	8005c90 <HAL_RCC_OscConfig+0xe8>
 8005cae:	e014      	b.n	8005cda <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cb0:	f7fb ffb8 	bl	8001c24 <HAL_GetTick>
 8005cb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005cb6:	e008      	b.n	8005cca <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005cb8:	f7fb ffb4 	bl	8001c24 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	2b64      	cmp	r3, #100	@ 0x64
 8005cc4:	d901      	bls.n	8005cca <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e3c0      	b.n	800644c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005cca:	4b59      	ldr	r3, [pc, #356]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d1f0      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x110>
 8005cd6:	e000      	b.n	8005cda <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0302 	and.w	r3, r3, #2
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 80ca 	beq.w	8005e7c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ce8:	4b51      	ldr	r3, [pc, #324]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005cea:	691b      	ldr	r3, [r3, #16]
 8005cec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cf0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005cf2:	4b4f      	ldr	r3, [pc, #316]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d007      	beq.n	8005d0e <HAL_RCC_OscConfig+0x166>
 8005cfe:	6a3b      	ldr	r3, [r7, #32]
 8005d00:	2b18      	cmp	r3, #24
 8005d02:	d156      	bne.n	8005db2 <HAL_RCC_OscConfig+0x20a>
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	f003 0303 	and.w	r3, r3, #3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d151      	bne.n	8005db2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d0e:	4b48      	ldr	r3, [pc, #288]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0304 	and.w	r3, r3, #4
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d005      	beq.n	8005d26 <HAL_RCC_OscConfig+0x17e>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005d22:	2301      	movs	r3, #1
 8005d24:	e392      	b.n	800644c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005d26:	4b42      	ldr	r3, [pc, #264]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f023 0219 	bic.w	r2, r3, #25
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	493f      	ldr	r1, [pc, #252]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d38:	f7fb ff74 	bl	8001c24 <HAL_GetTick>
 8005d3c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d3e:	e008      	b.n	8005d52 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d40:	f7fb ff70 	bl	8001c24 <HAL_GetTick>
 8005d44:	4602      	mov	r2, r0
 8005d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d48:	1ad3      	subs	r3, r2, r3
 8005d4a:	2b02      	cmp	r3, #2
 8005d4c:	d901      	bls.n	8005d52 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005d4e:	2303      	movs	r3, #3
 8005d50:	e37c      	b.n	800644c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d52:	4b37      	ldr	r3, [pc, #220]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0304 	and.w	r3, r3, #4
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d0f0      	beq.n	8005d40 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d5e:	f7fb ff91 	bl	8001c84 <HAL_GetREVID>
 8005d62:	4603      	mov	r3, r0
 8005d64:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d817      	bhi.n	8005d9c <HAL_RCC_OscConfig+0x1f4>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	2b40      	cmp	r3, #64	@ 0x40
 8005d72:	d108      	bne.n	8005d86 <HAL_RCC_OscConfig+0x1de>
 8005d74:	4b2e      	ldr	r3, [pc, #184]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005d7c:	4a2c      	ldr	r2, [pc, #176]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005d7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d82:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d84:	e07a      	b.n	8005e7c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d86:	4b2a      	ldr	r3, [pc, #168]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005d88:	685b      	ldr	r3, [r3, #4]
 8005d8a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	031b      	lsls	r3, r3, #12
 8005d94:	4926      	ldr	r1, [pc, #152]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005d96:	4313      	orrs	r3, r2
 8005d98:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005d9a:	e06f      	b.n	8005e7c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d9c:	4b24      	ldr	r3, [pc, #144]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	061b      	lsls	r3, r3, #24
 8005daa:	4921      	ldr	r1, [pc, #132]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005dac:	4313      	orrs	r3, r2
 8005dae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005db0:	e064      	b.n	8005e7c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d047      	beq.n	8005e4a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005dba:	4b1d      	ldr	r3, [pc, #116]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f023 0219 	bic.w	r2, r3, #25
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	491a      	ldr	r1, [pc, #104]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dcc:	f7fb ff2a 	bl	8001c24 <HAL_GetTick>
 8005dd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005dd2:	e008      	b.n	8005de6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005dd4:	f7fb ff26 	bl	8001c24 <HAL_GetTick>
 8005dd8:	4602      	mov	r2, r0
 8005dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ddc:	1ad3      	subs	r3, r2, r3
 8005dde:	2b02      	cmp	r3, #2
 8005de0:	d901      	bls.n	8005de6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e332      	b.n	800644c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005de6:	4b12      	ldr	r3, [pc, #72]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0304 	and.w	r3, r3, #4
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d0f0      	beq.n	8005dd4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005df2:	f7fb ff47 	bl	8001c84 <HAL_GetREVID>
 8005df6:	4603      	mov	r3, r0
 8005df8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d819      	bhi.n	8005e34 <HAL_RCC_OscConfig+0x28c>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	2b40      	cmp	r3, #64	@ 0x40
 8005e06:	d108      	bne.n	8005e1a <HAL_RCC_OscConfig+0x272>
 8005e08:	4b09      	ldr	r3, [pc, #36]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8005e10:	4a07      	ldr	r2, [pc, #28]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005e12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005e16:	6053      	str	r3, [r2, #4]
 8005e18:	e030      	b.n	8005e7c <HAL_RCC_OscConfig+0x2d4>
 8005e1a:	4b05      	ldr	r3, [pc, #20]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	031b      	lsls	r3, r3, #12
 8005e28:	4901      	ldr	r1, [pc, #4]	@ (8005e30 <HAL_RCC_OscConfig+0x288>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	604b      	str	r3, [r1, #4]
 8005e2e:	e025      	b.n	8005e7c <HAL_RCC_OscConfig+0x2d4>
 8005e30:	58024400 	.word	0x58024400
 8005e34:	4b9a      	ldr	r3, [pc, #616]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	061b      	lsls	r3, r3, #24
 8005e42:	4997      	ldr	r1, [pc, #604]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	604b      	str	r3, [r1, #4]
 8005e48:	e018      	b.n	8005e7c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e4a:	4b95      	ldr	r3, [pc, #596]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a94      	ldr	r2, [pc, #592]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8005e50:	f023 0301 	bic.w	r3, r3, #1
 8005e54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e56:	f7fb fee5 	bl	8001c24 <HAL_GetTick>
 8005e5a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e5c:	e008      	b.n	8005e70 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e5e:	f7fb fee1 	bl	8001c24 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d901      	bls.n	8005e70 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e2ed      	b.n	800644c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005e70:	4b8b      	ldr	r3, [pc, #556]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d1f0      	bne.n	8005e5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f003 0310 	and.w	r3, r3, #16
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 80a9 	beq.w	8005fdc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005e8a:	4b85      	ldr	r3, [pc, #532]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8005e8c:	691b      	ldr	r3, [r3, #16]
 8005e8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e92:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005e94:	4b82      	ldr	r3, [pc, #520]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8005e96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e98:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	2b08      	cmp	r3, #8
 8005e9e:	d007      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x308>
 8005ea0:	69bb      	ldr	r3, [r7, #24]
 8005ea2:	2b18      	cmp	r3, #24
 8005ea4:	d13a      	bne.n	8005f1c <HAL_RCC_OscConfig+0x374>
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	f003 0303 	and.w	r3, r3, #3
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d135      	bne.n	8005f1c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005eb0:	4b7b      	ldr	r3, [pc, #492]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d005      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x320>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	69db      	ldr	r3, [r3, #28]
 8005ec0:	2b80      	cmp	r3, #128	@ 0x80
 8005ec2:	d001      	beq.n	8005ec8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e2c1      	b.n	800644c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ec8:	f7fb fedc 	bl	8001c84 <HAL_GetREVID>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d817      	bhi.n	8005f06 <HAL_RCC_OscConfig+0x35e>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	2b20      	cmp	r3, #32
 8005edc:	d108      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x348>
 8005ede:	4b70      	ldr	r3, [pc, #448]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8005ee0:	685b      	ldr	r3, [r3, #4]
 8005ee2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005ee6:	4a6e      	ldr	r2, [pc, #440]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8005ee8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005eec:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005eee:	e075      	b.n	8005fdc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005ef0:	4b6b      	ldr	r3, [pc, #428]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	069b      	lsls	r3, r3, #26
 8005efe:	4968      	ldr	r1, [pc, #416]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8005f00:	4313      	orrs	r3, r2
 8005f02:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f04:	e06a      	b.n	8005fdc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f06:	4b66      	ldr	r3, [pc, #408]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8005f08:	68db      	ldr	r3, [r3, #12]
 8005f0a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	061b      	lsls	r3, r3, #24
 8005f14:	4962      	ldr	r1, [pc, #392]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8005f16:	4313      	orrs	r3, r2
 8005f18:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005f1a:	e05f      	b.n	8005fdc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	69db      	ldr	r3, [r3, #28]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d042      	beq.n	8005faa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005f24:	4b5e      	ldr	r3, [pc, #376]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a5d      	ldr	r2, [pc, #372]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8005f2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005f2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f30:	f7fb fe78 	bl	8001c24 <HAL_GetTick>
 8005f34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f36:	e008      	b.n	8005f4a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005f38:	f7fb fe74 	bl	8001c24 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d901      	bls.n	8005f4a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005f46:	2303      	movs	r3, #3
 8005f48:	e280      	b.n	800644c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f4a:	4b55      	ldr	r3, [pc, #340]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d0f0      	beq.n	8005f38 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005f56:	f7fb fe95 	bl	8001c84 <HAL_GetREVID>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d817      	bhi.n	8005f94 <HAL_RCC_OscConfig+0x3ec>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a1b      	ldr	r3, [r3, #32]
 8005f68:	2b20      	cmp	r3, #32
 8005f6a:	d108      	bne.n	8005f7e <HAL_RCC_OscConfig+0x3d6>
 8005f6c:	4b4c      	ldr	r3, [pc, #304]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8005f74:	4a4a      	ldr	r2, [pc, #296]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8005f76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f7a:	6053      	str	r3, [r2, #4]
 8005f7c:	e02e      	b.n	8005fdc <HAL_RCC_OscConfig+0x434>
 8005f7e:	4b48      	ldr	r3, [pc, #288]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6a1b      	ldr	r3, [r3, #32]
 8005f8a:	069b      	lsls	r3, r3, #26
 8005f8c:	4944      	ldr	r1, [pc, #272]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	604b      	str	r3, [r1, #4]
 8005f92:	e023      	b.n	8005fdc <HAL_RCC_OscConfig+0x434>
 8005f94:	4b42      	ldr	r3, [pc, #264]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	061b      	lsls	r3, r3, #24
 8005fa2:	493f      	ldr	r1, [pc, #252]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	60cb      	str	r3, [r1, #12]
 8005fa8:	e018      	b.n	8005fdc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005faa:	4b3d      	ldr	r3, [pc, #244]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a3c      	ldr	r2, [pc, #240]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8005fb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005fb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fb6:	f7fb fe35 	bl	8001c24 <HAL_GetTick>
 8005fba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005fbc:	e008      	b.n	8005fd0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8005fbe:	f7fb fe31 	bl	8001c24 <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	2b02      	cmp	r3, #2
 8005fca:	d901      	bls.n	8005fd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	e23d      	b.n	800644c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005fd0:	4b33      	ldr	r3, [pc, #204]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1f0      	bne.n	8005fbe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f003 0308 	and.w	r3, r3, #8
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d036      	beq.n	8006056 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	695b      	ldr	r3, [r3, #20]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d019      	beq.n	8006024 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ff0:	4b2b      	ldr	r3, [pc, #172]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8005ff2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005ff4:	4a2a      	ldr	r2, [pc, #168]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8005ff6:	f043 0301 	orr.w	r3, r3, #1
 8005ffa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ffc:	f7fb fe12 	bl	8001c24 <HAL_GetTick>
 8006000:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006002:	e008      	b.n	8006016 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006004:	f7fb fe0e 	bl	8001c24 <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b02      	cmp	r3, #2
 8006010:	d901      	bls.n	8006016 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e21a      	b.n	800644c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006016:	4b22      	ldr	r3, [pc, #136]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8006018:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0f0      	beq.n	8006004 <HAL_RCC_OscConfig+0x45c>
 8006022:	e018      	b.n	8006056 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006024:	4b1e      	ldr	r3, [pc, #120]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8006026:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006028:	4a1d      	ldr	r2, [pc, #116]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 800602a:	f023 0301 	bic.w	r3, r3, #1
 800602e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006030:	f7fb fdf8 	bl	8001c24 <HAL_GetTick>
 8006034:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006036:	e008      	b.n	800604a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006038:	f7fb fdf4 	bl	8001c24 <HAL_GetTick>
 800603c:	4602      	mov	r2, r0
 800603e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	2b02      	cmp	r3, #2
 8006044:	d901      	bls.n	800604a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006046:	2303      	movs	r3, #3
 8006048:	e200      	b.n	800644c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800604a:	4b15      	ldr	r3, [pc, #84]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 800604c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800604e:	f003 0302 	and.w	r3, r3, #2
 8006052:	2b00      	cmp	r3, #0
 8006054:	d1f0      	bne.n	8006038 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0320 	and.w	r3, r3, #32
 800605e:	2b00      	cmp	r3, #0
 8006060:	d039      	beq.n	80060d6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d01c      	beq.n	80060a4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800606a:	4b0d      	ldr	r3, [pc, #52]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a0c      	ldr	r2, [pc, #48]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8006070:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006074:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006076:	f7fb fdd5 	bl	8001c24 <HAL_GetTick>
 800607a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800607c:	e008      	b.n	8006090 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800607e:	f7fb fdd1 	bl	8001c24 <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	2b02      	cmp	r3, #2
 800608a:	d901      	bls.n	8006090 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e1dd      	b.n	800644c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006090:	4b03      	ldr	r3, [pc, #12]	@ (80060a0 <HAL_RCC_OscConfig+0x4f8>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d0f0      	beq.n	800607e <HAL_RCC_OscConfig+0x4d6>
 800609c:	e01b      	b.n	80060d6 <HAL_RCC_OscConfig+0x52e>
 800609e:	bf00      	nop
 80060a0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80060a4:	4b9b      	ldr	r3, [pc, #620]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a9a      	ldr	r2, [pc, #616]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 80060aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80060ae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80060b0:	f7fb fdb8 	bl	8001c24 <HAL_GetTick>
 80060b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80060b6:	e008      	b.n	80060ca <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80060b8:	f7fb fdb4 	bl	8001c24 <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d901      	bls.n	80060ca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e1c0      	b.n	800644c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80060ca:	4b92      	ldr	r3, [pc, #584]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d1f0      	bne.n	80060b8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0304 	and.w	r3, r3, #4
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f000 8081 	beq.w	80061e6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80060e4:	4b8c      	ldr	r3, [pc, #560]	@ (8006318 <HAL_RCC_OscConfig+0x770>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a8b      	ldr	r2, [pc, #556]	@ (8006318 <HAL_RCC_OscConfig+0x770>)
 80060ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060ee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060f0:	f7fb fd98 	bl	8001c24 <HAL_GetTick>
 80060f4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060f6:	e008      	b.n	800610a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060f8:	f7fb fd94 	bl	8001c24 <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006100:	1ad3      	subs	r3, r2, r3
 8006102:	2b64      	cmp	r3, #100	@ 0x64
 8006104:	d901      	bls.n	800610a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e1a0      	b.n	800644c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800610a:	4b83      	ldr	r3, [pc, #524]	@ (8006318 <HAL_RCC_OscConfig+0x770>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006112:	2b00      	cmp	r3, #0
 8006114:	d0f0      	beq.n	80060f8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	2b01      	cmp	r3, #1
 800611c:	d106      	bne.n	800612c <HAL_RCC_OscConfig+0x584>
 800611e:	4b7d      	ldr	r3, [pc, #500]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 8006120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006122:	4a7c      	ldr	r2, [pc, #496]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 8006124:	f043 0301 	orr.w	r3, r3, #1
 8006128:	6713      	str	r3, [r2, #112]	@ 0x70
 800612a:	e02d      	b.n	8006188 <HAL_RCC_OscConfig+0x5e0>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	689b      	ldr	r3, [r3, #8]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10c      	bne.n	800614e <HAL_RCC_OscConfig+0x5a6>
 8006134:	4b77      	ldr	r3, [pc, #476]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 8006136:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006138:	4a76      	ldr	r2, [pc, #472]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 800613a:	f023 0301 	bic.w	r3, r3, #1
 800613e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006140:	4b74      	ldr	r3, [pc, #464]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 8006142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006144:	4a73      	ldr	r2, [pc, #460]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 8006146:	f023 0304 	bic.w	r3, r3, #4
 800614a:	6713      	str	r3, [r2, #112]	@ 0x70
 800614c:	e01c      	b.n	8006188 <HAL_RCC_OscConfig+0x5e0>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	2b05      	cmp	r3, #5
 8006154:	d10c      	bne.n	8006170 <HAL_RCC_OscConfig+0x5c8>
 8006156:	4b6f      	ldr	r3, [pc, #444]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 8006158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800615a:	4a6e      	ldr	r2, [pc, #440]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 800615c:	f043 0304 	orr.w	r3, r3, #4
 8006160:	6713      	str	r3, [r2, #112]	@ 0x70
 8006162:	4b6c      	ldr	r3, [pc, #432]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 8006164:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006166:	4a6b      	ldr	r2, [pc, #428]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 8006168:	f043 0301 	orr.w	r3, r3, #1
 800616c:	6713      	str	r3, [r2, #112]	@ 0x70
 800616e:	e00b      	b.n	8006188 <HAL_RCC_OscConfig+0x5e0>
 8006170:	4b68      	ldr	r3, [pc, #416]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 8006172:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006174:	4a67      	ldr	r2, [pc, #412]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 8006176:	f023 0301 	bic.w	r3, r3, #1
 800617a:	6713      	str	r3, [r2, #112]	@ 0x70
 800617c:	4b65      	ldr	r3, [pc, #404]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 800617e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006180:	4a64      	ldr	r2, [pc, #400]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 8006182:	f023 0304 	bic.w	r3, r3, #4
 8006186:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d015      	beq.n	80061bc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006190:	f7fb fd48 	bl	8001c24 <HAL_GetTick>
 8006194:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006196:	e00a      	b.n	80061ae <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006198:	f7fb fd44 	bl	8001c24 <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d901      	bls.n	80061ae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e14e      	b.n	800644c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061ae:	4b59      	ldr	r3, [pc, #356]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 80061b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d0ee      	beq.n	8006198 <HAL_RCC_OscConfig+0x5f0>
 80061ba:	e014      	b.n	80061e6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061bc:	f7fb fd32 	bl	8001c24 <HAL_GetTick>
 80061c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80061c2:	e00a      	b.n	80061da <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061c4:	f7fb fd2e 	bl	8001c24 <HAL_GetTick>
 80061c8:	4602      	mov	r2, r0
 80061ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061cc:	1ad3      	subs	r3, r2, r3
 80061ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d901      	bls.n	80061da <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80061d6:	2303      	movs	r3, #3
 80061d8:	e138      	b.n	800644c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80061da:	4b4e      	ldr	r3, [pc, #312]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 80061dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d1ee      	bne.n	80061c4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 812d 	beq.w	800644a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80061f0:	4b48      	ldr	r3, [pc, #288]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80061f8:	2b18      	cmp	r3, #24
 80061fa:	f000 80bd 	beq.w	8006378 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006202:	2b02      	cmp	r3, #2
 8006204:	f040 809e 	bne.w	8006344 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006208:	4b42      	ldr	r3, [pc, #264]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a41      	ldr	r2, [pc, #260]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 800620e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006214:	f7fb fd06 	bl	8001c24 <HAL_GetTick>
 8006218:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800621a:	e008      	b.n	800622e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800621c:	f7fb fd02 	bl	8001c24 <HAL_GetTick>
 8006220:	4602      	mov	r2, r0
 8006222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006224:	1ad3      	subs	r3, r2, r3
 8006226:	2b02      	cmp	r3, #2
 8006228:	d901      	bls.n	800622e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800622a:	2303      	movs	r3, #3
 800622c:	e10e      	b.n	800644c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800622e:	4b39      	ldr	r3, [pc, #228]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1f0      	bne.n	800621c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800623a:	4b36      	ldr	r3, [pc, #216]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 800623c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800623e:	4b37      	ldr	r3, [pc, #220]	@ (800631c <HAL_RCC_OscConfig+0x774>)
 8006240:	4013      	ands	r3, r2
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800624a:	0112      	lsls	r2, r2, #4
 800624c:	430a      	orrs	r2, r1
 800624e:	4931      	ldr	r1, [pc, #196]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 8006250:	4313      	orrs	r3, r2
 8006252:	628b      	str	r3, [r1, #40]	@ 0x28
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006258:	3b01      	subs	r3, #1
 800625a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006262:	3b01      	subs	r3, #1
 8006264:	025b      	lsls	r3, r3, #9
 8006266:	b29b      	uxth	r3, r3
 8006268:	431a      	orrs	r2, r3
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800626e:	3b01      	subs	r3, #1
 8006270:	041b      	lsls	r3, r3, #16
 8006272:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006276:	431a      	orrs	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800627c:	3b01      	subs	r3, #1
 800627e:	061b      	lsls	r3, r3, #24
 8006280:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006284:	4923      	ldr	r1, [pc, #140]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 8006286:	4313      	orrs	r3, r2
 8006288:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800628a:	4b22      	ldr	r3, [pc, #136]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 800628c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800628e:	4a21      	ldr	r2, [pc, #132]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 8006290:	f023 0301 	bic.w	r3, r3, #1
 8006294:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006296:	4b1f      	ldr	r3, [pc, #124]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 8006298:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800629a:	4b21      	ldr	r3, [pc, #132]	@ (8006320 <HAL_RCC_OscConfig+0x778>)
 800629c:	4013      	ands	r3, r2
 800629e:	687a      	ldr	r2, [r7, #4]
 80062a0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80062a2:	00d2      	lsls	r2, r2, #3
 80062a4:	491b      	ldr	r1, [pc, #108]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 80062a6:	4313      	orrs	r3, r2
 80062a8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80062aa:	4b1a      	ldr	r3, [pc, #104]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 80062ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ae:	f023 020c 	bic.w	r2, r3, #12
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062b6:	4917      	ldr	r1, [pc, #92]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 80062b8:	4313      	orrs	r3, r2
 80062ba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80062bc:	4b15      	ldr	r3, [pc, #84]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 80062be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c0:	f023 0202 	bic.w	r2, r3, #2
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062c8:	4912      	ldr	r1, [pc, #72]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80062ce:	4b11      	ldr	r3, [pc, #68]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 80062d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d2:	4a10      	ldr	r2, [pc, #64]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 80062d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062da:	4b0e      	ldr	r3, [pc, #56]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 80062dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062de:	4a0d      	ldr	r2, [pc, #52]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 80062e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80062e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80062e6:	4b0b      	ldr	r3, [pc, #44]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 80062e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ea:	4a0a      	ldr	r2, [pc, #40]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 80062ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80062f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80062f2:	4b08      	ldr	r3, [pc, #32]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 80062f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062f6:	4a07      	ldr	r2, [pc, #28]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 80062f8:	f043 0301 	orr.w	r3, r3, #1
 80062fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062fe:	4b05      	ldr	r3, [pc, #20]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	4a04      	ldr	r2, [pc, #16]	@ (8006314 <HAL_RCC_OscConfig+0x76c>)
 8006304:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800630a:	f7fb fc8b 	bl	8001c24 <HAL_GetTick>
 800630e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006310:	e011      	b.n	8006336 <HAL_RCC_OscConfig+0x78e>
 8006312:	bf00      	nop
 8006314:	58024400 	.word	0x58024400
 8006318:	58024800 	.word	0x58024800
 800631c:	fffffc0c 	.word	0xfffffc0c
 8006320:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006324:	f7fb fc7e 	bl	8001c24 <HAL_GetTick>
 8006328:	4602      	mov	r2, r0
 800632a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	2b02      	cmp	r3, #2
 8006330:	d901      	bls.n	8006336 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e08a      	b.n	800644c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006336:	4b47      	ldr	r3, [pc, #284]	@ (8006454 <HAL_RCC_OscConfig+0x8ac>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d0f0      	beq.n	8006324 <HAL_RCC_OscConfig+0x77c>
 8006342:	e082      	b.n	800644a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006344:	4b43      	ldr	r3, [pc, #268]	@ (8006454 <HAL_RCC_OscConfig+0x8ac>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a42      	ldr	r2, [pc, #264]	@ (8006454 <HAL_RCC_OscConfig+0x8ac>)
 800634a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800634e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006350:	f7fb fc68 	bl	8001c24 <HAL_GetTick>
 8006354:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006356:	e008      	b.n	800636a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006358:	f7fb fc64 	bl	8001c24 <HAL_GetTick>
 800635c:	4602      	mov	r2, r0
 800635e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006360:	1ad3      	subs	r3, r2, r3
 8006362:	2b02      	cmp	r3, #2
 8006364:	d901      	bls.n	800636a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006366:	2303      	movs	r3, #3
 8006368:	e070      	b.n	800644c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800636a:	4b3a      	ldr	r3, [pc, #232]	@ (8006454 <HAL_RCC_OscConfig+0x8ac>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006372:	2b00      	cmp	r3, #0
 8006374:	d1f0      	bne.n	8006358 <HAL_RCC_OscConfig+0x7b0>
 8006376:	e068      	b.n	800644a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006378:	4b36      	ldr	r3, [pc, #216]	@ (8006454 <HAL_RCC_OscConfig+0x8ac>)
 800637a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800637c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800637e:	4b35      	ldr	r3, [pc, #212]	@ (8006454 <HAL_RCC_OscConfig+0x8ac>)
 8006380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006382:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006388:	2b01      	cmp	r3, #1
 800638a:	d031      	beq.n	80063f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	f003 0203 	and.w	r2, r3, #3
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006396:	429a      	cmp	r2, r3
 8006398:	d12a      	bne.n	80063f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	091b      	lsrs	r3, r3, #4
 800639e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d122      	bne.n	80063f0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063b4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80063b6:	429a      	cmp	r2, r3
 80063b8:	d11a      	bne.n	80063f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	0a5b      	lsrs	r3, r3, #9
 80063be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063c6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d111      	bne.n	80063f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	0c1b      	lsrs	r3, r3, #16
 80063d0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80063da:	429a      	cmp	r2, r3
 80063dc:	d108      	bne.n	80063f0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	0e1b      	lsrs	r3, r3, #24
 80063e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063ea:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d001      	beq.n	80063f4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80063f0:	2301      	movs	r3, #1
 80063f2:	e02b      	b.n	800644c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80063f4:	4b17      	ldr	r3, [pc, #92]	@ (8006454 <HAL_RCC_OscConfig+0x8ac>)
 80063f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063f8:	08db      	lsrs	r3, r3, #3
 80063fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063fe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006404:	693a      	ldr	r2, [r7, #16]
 8006406:	429a      	cmp	r2, r3
 8006408:	d01f      	beq.n	800644a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800640a:	4b12      	ldr	r3, [pc, #72]	@ (8006454 <HAL_RCC_OscConfig+0x8ac>)
 800640c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800640e:	4a11      	ldr	r2, [pc, #68]	@ (8006454 <HAL_RCC_OscConfig+0x8ac>)
 8006410:	f023 0301 	bic.w	r3, r3, #1
 8006414:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006416:	f7fb fc05 	bl	8001c24 <HAL_GetTick>
 800641a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800641c:	bf00      	nop
 800641e:	f7fb fc01 	bl	8001c24 <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006426:	4293      	cmp	r3, r2
 8006428:	d0f9      	beq.n	800641e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800642a:	4b0a      	ldr	r3, [pc, #40]	@ (8006454 <HAL_RCC_OscConfig+0x8ac>)
 800642c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800642e:	4b0a      	ldr	r3, [pc, #40]	@ (8006458 <HAL_RCC_OscConfig+0x8b0>)
 8006430:	4013      	ands	r3, r2
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006436:	00d2      	lsls	r2, r2, #3
 8006438:	4906      	ldr	r1, [pc, #24]	@ (8006454 <HAL_RCC_OscConfig+0x8ac>)
 800643a:	4313      	orrs	r3, r2
 800643c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800643e:	4b05      	ldr	r3, [pc, #20]	@ (8006454 <HAL_RCC_OscConfig+0x8ac>)
 8006440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006442:	4a04      	ldr	r2, [pc, #16]	@ (8006454 <HAL_RCC_OscConfig+0x8ac>)
 8006444:	f043 0301 	orr.w	r3, r3, #1
 8006448:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800644a:	2300      	movs	r3, #0
}
 800644c:	4618      	mov	r0, r3
 800644e:	3730      	adds	r7, #48	@ 0x30
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	58024400 	.word	0x58024400
 8006458:	ffff0007 	.word	0xffff0007

0800645c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d101      	bne.n	8006470 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e19c      	b.n	80067aa <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006470:	4b8a      	ldr	r3, [pc, #552]	@ (800669c <HAL_RCC_ClockConfig+0x240>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f003 030f 	and.w	r3, r3, #15
 8006478:	683a      	ldr	r2, [r7, #0]
 800647a:	429a      	cmp	r2, r3
 800647c:	d910      	bls.n	80064a0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800647e:	4b87      	ldr	r3, [pc, #540]	@ (800669c <HAL_RCC_ClockConfig+0x240>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f023 020f 	bic.w	r2, r3, #15
 8006486:	4985      	ldr	r1, [pc, #532]	@ (800669c <HAL_RCC_ClockConfig+0x240>)
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	4313      	orrs	r3, r2
 800648c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800648e:	4b83      	ldr	r3, [pc, #524]	@ (800669c <HAL_RCC_ClockConfig+0x240>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 030f 	and.w	r3, r3, #15
 8006496:	683a      	ldr	r2, [r7, #0]
 8006498:	429a      	cmp	r2, r3
 800649a:	d001      	beq.n	80064a0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e184      	b.n	80067aa <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0304 	and.w	r3, r3, #4
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d010      	beq.n	80064ce <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	691a      	ldr	r2, [r3, #16]
 80064b0:	4b7b      	ldr	r3, [pc, #492]	@ (80066a0 <HAL_RCC_ClockConfig+0x244>)
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d908      	bls.n	80064ce <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80064bc:	4b78      	ldr	r3, [pc, #480]	@ (80066a0 <HAL_RCC_ClockConfig+0x244>)
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	691b      	ldr	r3, [r3, #16]
 80064c8:	4975      	ldr	r1, [pc, #468]	@ (80066a0 <HAL_RCC_ClockConfig+0x244>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0308 	and.w	r3, r3, #8
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d010      	beq.n	80064fc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	695a      	ldr	r2, [r3, #20]
 80064de:	4b70      	ldr	r3, [pc, #448]	@ (80066a0 <HAL_RCC_ClockConfig+0x244>)
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d908      	bls.n	80064fc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80064ea:	4b6d      	ldr	r3, [pc, #436]	@ (80066a0 <HAL_RCC_ClockConfig+0x244>)
 80064ec:	69db      	ldr	r3, [r3, #28]
 80064ee:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	496a      	ldr	r1, [pc, #424]	@ (80066a0 <HAL_RCC_ClockConfig+0x244>)
 80064f8:	4313      	orrs	r3, r2
 80064fa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0310 	and.w	r3, r3, #16
 8006504:	2b00      	cmp	r3, #0
 8006506:	d010      	beq.n	800652a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	699a      	ldr	r2, [r3, #24]
 800650c:	4b64      	ldr	r3, [pc, #400]	@ (80066a0 <HAL_RCC_ClockConfig+0x244>)
 800650e:	69db      	ldr	r3, [r3, #28]
 8006510:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006514:	429a      	cmp	r2, r3
 8006516:	d908      	bls.n	800652a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006518:	4b61      	ldr	r3, [pc, #388]	@ (80066a0 <HAL_RCC_ClockConfig+0x244>)
 800651a:	69db      	ldr	r3, [r3, #28]
 800651c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	495e      	ldr	r1, [pc, #376]	@ (80066a0 <HAL_RCC_ClockConfig+0x244>)
 8006526:	4313      	orrs	r3, r2
 8006528:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 0320 	and.w	r3, r3, #32
 8006532:	2b00      	cmp	r3, #0
 8006534:	d010      	beq.n	8006558 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	69da      	ldr	r2, [r3, #28]
 800653a:	4b59      	ldr	r3, [pc, #356]	@ (80066a0 <HAL_RCC_ClockConfig+0x244>)
 800653c:	6a1b      	ldr	r3, [r3, #32]
 800653e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006542:	429a      	cmp	r2, r3
 8006544:	d908      	bls.n	8006558 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006546:	4b56      	ldr	r3, [pc, #344]	@ (80066a0 <HAL_RCC_ClockConfig+0x244>)
 8006548:	6a1b      	ldr	r3, [r3, #32]
 800654a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	4953      	ldr	r1, [pc, #332]	@ (80066a0 <HAL_RCC_ClockConfig+0x244>)
 8006554:	4313      	orrs	r3, r2
 8006556:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f003 0302 	and.w	r3, r3, #2
 8006560:	2b00      	cmp	r3, #0
 8006562:	d010      	beq.n	8006586 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	68da      	ldr	r2, [r3, #12]
 8006568:	4b4d      	ldr	r3, [pc, #308]	@ (80066a0 <HAL_RCC_ClockConfig+0x244>)
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	f003 030f 	and.w	r3, r3, #15
 8006570:	429a      	cmp	r2, r3
 8006572:	d908      	bls.n	8006586 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006574:	4b4a      	ldr	r3, [pc, #296]	@ (80066a0 <HAL_RCC_ClockConfig+0x244>)
 8006576:	699b      	ldr	r3, [r3, #24]
 8006578:	f023 020f 	bic.w	r2, r3, #15
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	4947      	ldr	r1, [pc, #284]	@ (80066a0 <HAL_RCC_ClockConfig+0x244>)
 8006582:	4313      	orrs	r3, r2
 8006584:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0301 	and.w	r3, r3, #1
 800658e:	2b00      	cmp	r3, #0
 8006590:	d055      	beq.n	800663e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006592:	4b43      	ldr	r3, [pc, #268]	@ (80066a0 <HAL_RCC_ClockConfig+0x244>)
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	4940      	ldr	r1, [pc, #256]	@ (80066a0 <HAL_RCC_ClockConfig+0x244>)
 80065a0:	4313      	orrs	r3, r2
 80065a2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d107      	bne.n	80065bc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80065ac:	4b3c      	ldr	r3, [pc, #240]	@ (80066a0 <HAL_RCC_ClockConfig+0x244>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d121      	bne.n	80065fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80065b8:	2301      	movs	r3, #1
 80065ba:	e0f6      	b.n	80067aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	2b03      	cmp	r3, #3
 80065c2:	d107      	bne.n	80065d4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80065c4:	4b36      	ldr	r3, [pc, #216]	@ (80066a0 <HAL_RCC_ClockConfig+0x244>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d115      	bne.n	80065fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e0ea      	b.n	80067aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d107      	bne.n	80065ec <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80065dc:	4b30      	ldr	r3, [pc, #192]	@ (80066a0 <HAL_RCC_ClockConfig+0x244>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d109      	bne.n	80065fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e0de      	b.n	80067aa <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80065ec:	4b2c      	ldr	r3, [pc, #176]	@ (80066a0 <HAL_RCC_ClockConfig+0x244>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0304 	and.w	r3, r3, #4
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80065f8:	2301      	movs	r3, #1
 80065fa:	e0d6      	b.n	80067aa <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80065fc:	4b28      	ldr	r3, [pc, #160]	@ (80066a0 <HAL_RCC_ClockConfig+0x244>)
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	f023 0207 	bic.w	r2, r3, #7
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	4925      	ldr	r1, [pc, #148]	@ (80066a0 <HAL_RCC_ClockConfig+0x244>)
 800660a:	4313      	orrs	r3, r2
 800660c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800660e:	f7fb fb09 	bl	8001c24 <HAL_GetTick>
 8006612:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006614:	e00a      	b.n	800662c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006616:	f7fb fb05 	bl	8001c24 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006624:	4293      	cmp	r3, r2
 8006626:	d901      	bls.n	800662c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006628:	2303      	movs	r3, #3
 800662a:	e0be      	b.n	80067aa <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800662c:	4b1c      	ldr	r3, [pc, #112]	@ (80066a0 <HAL_RCC_ClockConfig+0x244>)
 800662e:	691b      	ldr	r3, [r3, #16]
 8006630:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	00db      	lsls	r3, r3, #3
 800663a:	429a      	cmp	r2, r3
 800663c:	d1eb      	bne.n	8006616 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d010      	beq.n	800666c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	68da      	ldr	r2, [r3, #12]
 800664e:	4b14      	ldr	r3, [pc, #80]	@ (80066a0 <HAL_RCC_ClockConfig+0x244>)
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	f003 030f 	and.w	r3, r3, #15
 8006656:	429a      	cmp	r2, r3
 8006658:	d208      	bcs.n	800666c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800665a:	4b11      	ldr	r3, [pc, #68]	@ (80066a0 <HAL_RCC_ClockConfig+0x244>)
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	f023 020f 	bic.w	r2, r3, #15
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	68db      	ldr	r3, [r3, #12]
 8006666:	490e      	ldr	r1, [pc, #56]	@ (80066a0 <HAL_RCC_ClockConfig+0x244>)
 8006668:	4313      	orrs	r3, r2
 800666a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800666c:	4b0b      	ldr	r3, [pc, #44]	@ (800669c <HAL_RCC_ClockConfig+0x240>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f003 030f 	and.w	r3, r3, #15
 8006674:	683a      	ldr	r2, [r7, #0]
 8006676:	429a      	cmp	r2, r3
 8006678:	d214      	bcs.n	80066a4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800667a:	4b08      	ldr	r3, [pc, #32]	@ (800669c <HAL_RCC_ClockConfig+0x240>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f023 020f 	bic.w	r2, r3, #15
 8006682:	4906      	ldr	r1, [pc, #24]	@ (800669c <HAL_RCC_ClockConfig+0x240>)
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	4313      	orrs	r3, r2
 8006688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800668a:	4b04      	ldr	r3, [pc, #16]	@ (800669c <HAL_RCC_ClockConfig+0x240>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 030f 	and.w	r3, r3, #15
 8006692:	683a      	ldr	r2, [r7, #0]
 8006694:	429a      	cmp	r2, r3
 8006696:	d005      	beq.n	80066a4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006698:	2301      	movs	r3, #1
 800669a:	e086      	b.n	80067aa <HAL_RCC_ClockConfig+0x34e>
 800669c:	52002000 	.word	0x52002000
 80066a0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 0304 	and.w	r3, r3, #4
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d010      	beq.n	80066d2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	691a      	ldr	r2, [r3, #16]
 80066b4:	4b3f      	ldr	r3, [pc, #252]	@ (80067b4 <HAL_RCC_ClockConfig+0x358>)
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066bc:	429a      	cmp	r2, r3
 80066be:	d208      	bcs.n	80066d2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80066c0:	4b3c      	ldr	r3, [pc, #240]	@ (80067b4 <HAL_RCC_ClockConfig+0x358>)
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	4939      	ldr	r1, [pc, #228]	@ (80067b4 <HAL_RCC_ClockConfig+0x358>)
 80066ce:	4313      	orrs	r3, r2
 80066d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f003 0308 	and.w	r3, r3, #8
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d010      	beq.n	8006700 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	695a      	ldr	r2, [r3, #20]
 80066e2:	4b34      	ldr	r3, [pc, #208]	@ (80067b4 <HAL_RCC_ClockConfig+0x358>)
 80066e4:	69db      	ldr	r3, [r3, #28]
 80066e6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d208      	bcs.n	8006700 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80066ee:	4b31      	ldr	r3, [pc, #196]	@ (80067b4 <HAL_RCC_ClockConfig+0x358>)
 80066f0:	69db      	ldr	r3, [r3, #28]
 80066f2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	492e      	ldr	r1, [pc, #184]	@ (80067b4 <HAL_RCC_ClockConfig+0x358>)
 80066fc:	4313      	orrs	r3, r2
 80066fe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f003 0310 	and.w	r3, r3, #16
 8006708:	2b00      	cmp	r3, #0
 800670a:	d010      	beq.n	800672e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	699a      	ldr	r2, [r3, #24]
 8006710:	4b28      	ldr	r3, [pc, #160]	@ (80067b4 <HAL_RCC_ClockConfig+0x358>)
 8006712:	69db      	ldr	r3, [r3, #28]
 8006714:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006718:	429a      	cmp	r2, r3
 800671a:	d208      	bcs.n	800672e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800671c:	4b25      	ldr	r3, [pc, #148]	@ (80067b4 <HAL_RCC_ClockConfig+0x358>)
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	699b      	ldr	r3, [r3, #24]
 8006728:	4922      	ldr	r1, [pc, #136]	@ (80067b4 <HAL_RCC_ClockConfig+0x358>)
 800672a:	4313      	orrs	r3, r2
 800672c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f003 0320 	and.w	r3, r3, #32
 8006736:	2b00      	cmp	r3, #0
 8006738:	d010      	beq.n	800675c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	69da      	ldr	r2, [r3, #28]
 800673e:	4b1d      	ldr	r3, [pc, #116]	@ (80067b4 <HAL_RCC_ClockConfig+0x358>)
 8006740:	6a1b      	ldr	r3, [r3, #32]
 8006742:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006746:	429a      	cmp	r2, r3
 8006748:	d208      	bcs.n	800675c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800674a:	4b1a      	ldr	r3, [pc, #104]	@ (80067b4 <HAL_RCC_ClockConfig+0x358>)
 800674c:	6a1b      	ldr	r3, [r3, #32]
 800674e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	4917      	ldr	r1, [pc, #92]	@ (80067b4 <HAL_RCC_ClockConfig+0x358>)
 8006758:	4313      	orrs	r3, r2
 800675a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800675c:	f000 f834 	bl	80067c8 <HAL_RCC_GetSysClockFreq>
 8006760:	4602      	mov	r2, r0
 8006762:	4b14      	ldr	r3, [pc, #80]	@ (80067b4 <HAL_RCC_ClockConfig+0x358>)
 8006764:	699b      	ldr	r3, [r3, #24]
 8006766:	0a1b      	lsrs	r3, r3, #8
 8006768:	f003 030f 	and.w	r3, r3, #15
 800676c:	4912      	ldr	r1, [pc, #72]	@ (80067b8 <HAL_RCC_ClockConfig+0x35c>)
 800676e:	5ccb      	ldrb	r3, [r1, r3]
 8006770:	f003 031f 	and.w	r3, r3, #31
 8006774:	fa22 f303 	lsr.w	r3, r2, r3
 8006778:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800677a:	4b0e      	ldr	r3, [pc, #56]	@ (80067b4 <HAL_RCC_ClockConfig+0x358>)
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	f003 030f 	and.w	r3, r3, #15
 8006782:	4a0d      	ldr	r2, [pc, #52]	@ (80067b8 <HAL_RCC_ClockConfig+0x35c>)
 8006784:	5cd3      	ldrb	r3, [r2, r3]
 8006786:	f003 031f 	and.w	r3, r3, #31
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	fa22 f303 	lsr.w	r3, r2, r3
 8006790:	4a0a      	ldr	r2, [pc, #40]	@ (80067bc <HAL_RCC_ClockConfig+0x360>)
 8006792:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006794:	4a0a      	ldr	r2, [pc, #40]	@ (80067c0 <HAL_RCC_ClockConfig+0x364>)
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800679a:	4b0a      	ldr	r3, [pc, #40]	@ (80067c4 <HAL_RCC_ClockConfig+0x368>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4618      	mov	r0, r3
 80067a0:	f7fb f9f6 	bl	8001b90 <HAL_InitTick>
 80067a4:	4603      	mov	r3, r0
 80067a6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3718      	adds	r7, #24
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}
 80067b2:	bf00      	nop
 80067b4:	58024400 	.word	0x58024400
 80067b8:	0800f16c 	.word	0x0800f16c
 80067bc:	24000004 	.word	0x24000004
 80067c0:	24000000 	.word	0x24000000
 80067c4:	24000024 	.word	0x24000024

080067c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b089      	sub	sp, #36	@ 0x24
 80067cc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80067ce:	4bb3      	ldr	r3, [pc, #716]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80067d6:	2b18      	cmp	r3, #24
 80067d8:	f200 8155 	bhi.w	8006a86 <HAL_RCC_GetSysClockFreq+0x2be>
 80067dc:	a201      	add	r2, pc, #4	@ (adr r2, 80067e4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80067de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e2:	bf00      	nop
 80067e4:	08006849 	.word	0x08006849
 80067e8:	08006a87 	.word	0x08006a87
 80067ec:	08006a87 	.word	0x08006a87
 80067f0:	08006a87 	.word	0x08006a87
 80067f4:	08006a87 	.word	0x08006a87
 80067f8:	08006a87 	.word	0x08006a87
 80067fc:	08006a87 	.word	0x08006a87
 8006800:	08006a87 	.word	0x08006a87
 8006804:	0800686f 	.word	0x0800686f
 8006808:	08006a87 	.word	0x08006a87
 800680c:	08006a87 	.word	0x08006a87
 8006810:	08006a87 	.word	0x08006a87
 8006814:	08006a87 	.word	0x08006a87
 8006818:	08006a87 	.word	0x08006a87
 800681c:	08006a87 	.word	0x08006a87
 8006820:	08006a87 	.word	0x08006a87
 8006824:	08006875 	.word	0x08006875
 8006828:	08006a87 	.word	0x08006a87
 800682c:	08006a87 	.word	0x08006a87
 8006830:	08006a87 	.word	0x08006a87
 8006834:	08006a87 	.word	0x08006a87
 8006838:	08006a87 	.word	0x08006a87
 800683c:	08006a87 	.word	0x08006a87
 8006840:	08006a87 	.word	0x08006a87
 8006844:	0800687b 	.word	0x0800687b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006848:	4b94      	ldr	r3, [pc, #592]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0320 	and.w	r3, r3, #32
 8006850:	2b00      	cmp	r3, #0
 8006852:	d009      	beq.n	8006868 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006854:	4b91      	ldr	r3, [pc, #580]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	08db      	lsrs	r3, r3, #3
 800685a:	f003 0303 	and.w	r3, r3, #3
 800685e:	4a90      	ldr	r2, [pc, #576]	@ (8006aa0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006860:	fa22 f303 	lsr.w	r3, r2, r3
 8006864:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006866:	e111      	b.n	8006a8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006868:	4b8d      	ldr	r3, [pc, #564]	@ (8006aa0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800686a:	61bb      	str	r3, [r7, #24]
      break;
 800686c:	e10e      	b.n	8006a8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800686e:	4b8d      	ldr	r3, [pc, #564]	@ (8006aa4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006870:	61bb      	str	r3, [r7, #24]
      break;
 8006872:	e10b      	b.n	8006a8c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006874:	4b8c      	ldr	r3, [pc, #560]	@ (8006aa8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006876:	61bb      	str	r3, [r7, #24]
      break;
 8006878:	e108      	b.n	8006a8c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800687a:	4b88      	ldr	r3, [pc, #544]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800687c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800687e:	f003 0303 	and.w	r3, r3, #3
 8006882:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006884:	4b85      	ldr	r3, [pc, #532]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006888:	091b      	lsrs	r3, r3, #4
 800688a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800688e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006890:	4b82      	ldr	r3, [pc, #520]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006894:	f003 0301 	and.w	r3, r3, #1
 8006898:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800689a:	4b80      	ldr	r3, [pc, #512]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800689c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800689e:	08db      	lsrs	r3, r3, #3
 80068a0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80068a4:	68fa      	ldr	r2, [r7, #12]
 80068a6:	fb02 f303 	mul.w	r3, r2, r3
 80068aa:	ee07 3a90 	vmov	s15, r3
 80068ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068b2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 80e1 	beq.w	8006a80 <HAL_RCC_GetSysClockFreq+0x2b8>
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	f000 8083 	beq.w	80069cc <HAL_RCC_GetSysClockFreq+0x204>
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	f200 80a1 	bhi.w	8006a10 <HAL_RCC_GetSysClockFreq+0x248>
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d003      	beq.n	80068dc <HAL_RCC_GetSysClockFreq+0x114>
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d056      	beq.n	8006988 <HAL_RCC_GetSysClockFreq+0x1c0>
 80068da:	e099      	b.n	8006a10 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80068dc:	4b6f      	ldr	r3, [pc, #444]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0320 	and.w	r3, r3, #32
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d02d      	beq.n	8006944 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80068e8:	4b6c      	ldr	r3, [pc, #432]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	08db      	lsrs	r3, r3, #3
 80068ee:	f003 0303 	and.w	r3, r3, #3
 80068f2:	4a6b      	ldr	r2, [pc, #428]	@ (8006aa0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80068f4:	fa22 f303 	lsr.w	r3, r2, r3
 80068f8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	ee07 3a90 	vmov	s15, r3
 8006900:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	ee07 3a90 	vmov	s15, r3
 800690a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800690e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006912:	4b62      	ldr	r3, [pc, #392]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800691a:	ee07 3a90 	vmov	s15, r3
 800691e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006922:	ed97 6a02 	vldr	s12, [r7, #8]
 8006926:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006aac <HAL_RCC_GetSysClockFreq+0x2e4>
 800692a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800692e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006932:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006936:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800693a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800693e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006942:	e087      	b.n	8006a54 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	ee07 3a90 	vmov	s15, r3
 800694a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800694e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006ab0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006952:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006956:	4b51      	ldr	r3, [pc, #324]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800695a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800695e:	ee07 3a90 	vmov	s15, r3
 8006962:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006966:	ed97 6a02 	vldr	s12, [r7, #8]
 800696a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006aac <HAL_RCC_GetSysClockFreq+0x2e4>
 800696e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006972:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006976:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800697a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800697e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006982:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006986:	e065      	b.n	8006a54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	ee07 3a90 	vmov	s15, r3
 800698e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006992:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006ab4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006996:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800699a:	4b40      	ldr	r3, [pc, #256]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800699c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800699e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069a2:	ee07 3a90 	vmov	s15, r3
 80069a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80069ae:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006aac <HAL_RCC_GetSysClockFreq+0x2e4>
 80069b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80069be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80069c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80069ca:	e043      	b.n	8006a54 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	ee07 3a90 	vmov	s15, r3
 80069d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069d6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006ab8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80069da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069de:	4b2f      	ldr	r3, [pc, #188]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80069e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e6:	ee07 3a90 	vmov	s15, r3
 80069ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80069f2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006aac <HAL_RCC_GetSysClockFreq+0x2e4>
 80069f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a0a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006a0e:	e021      	b.n	8006a54 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	ee07 3a90 	vmov	s15, r3
 8006a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a1a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006ab4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a22:	4b1e      	ldr	r3, [pc, #120]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a2a:	ee07 3a90 	vmov	s15, r3
 8006a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a32:	ed97 6a02 	vldr	s12, [r7, #8]
 8006a36:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006aac <HAL_RCC_GetSysClockFreq+0x2e4>
 8006a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a4e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006a52:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006a54:	4b11      	ldr	r3, [pc, #68]	@ (8006a9c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a58:	0a5b      	lsrs	r3, r3, #9
 8006a5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a5e:	3301      	adds	r3, #1
 8006a60:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	ee07 3a90 	vmov	s15, r3
 8006a68:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006a6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006a70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006a74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006a78:	ee17 3a90 	vmov	r3, s15
 8006a7c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006a7e:	e005      	b.n	8006a8c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006a80:	2300      	movs	r3, #0
 8006a82:	61bb      	str	r3, [r7, #24]
      break;
 8006a84:	e002      	b.n	8006a8c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006a86:	4b07      	ldr	r3, [pc, #28]	@ (8006aa4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006a88:	61bb      	str	r3, [r7, #24]
      break;
 8006a8a:	bf00      	nop
  }

  return sysclockfreq;
 8006a8c:	69bb      	ldr	r3, [r7, #24]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3724      	adds	r7, #36	@ 0x24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	58024400 	.word	0x58024400
 8006aa0:	03d09000 	.word	0x03d09000
 8006aa4:	003d0900 	.word	0x003d0900
 8006aa8:	017d7840 	.word	0x017d7840
 8006aac:	46000000 	.word	0x46000000
 8006ab0:	4c742400 	.word	0x4c742400
 8006ab4:	4a742400 	.word	0x4a742400
 8006ab8:	4bbebc20 	.word	0x4bbebc20

08006abc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006ac2:	f7ff fe81 	bl	80067c8 <HAL_RCC_GetSysClockFreq>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	4b10      	ldr	r3, [pc, #64]	@ (8006b0c <HAL_RCC_GetHCLKFreq+0x50>)
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	0a1b      	lsrs	r3, r3, #8
 8006ace:	f003 030f 	and.w	r3, r3, #15
 8006ad2:	490f      	ldr	r1, [pc, #60]	@ (8006b10 <HAL_RCC_GetHCLKFreq+0x54>)
 8006ad4:	5ccb      	ldrb	r3, [r1, r3]
 8006ad6:	f003 031f 	and.w	r3, r3, #31
 8006ada:	fa22 f303 	lsr.w	r3, r2, r3
 8006ade:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8006b0c <HAL_RCC_GetHCLKFreq+0x50>)
 8006ae2:	699b      	ldr	r3, [r3, #24]
 8006ae4:	f003 030f 	and.w	r3, r3, #15
 8006ae8:	4a09      	ldr	r2, [pc, #36]	@ (8006b10 <HAL_RCC_GetHCLKFreq+0x54>)
 8006aea:	5cd3      	ldrb	r3, [r2, r3]
 8006aec:	f003 031f 	and.w	r3, r3, #31
 8006af0:	687a      	ldr	r2, [r7, #4]
 8006af2:	fa22 f303 	lsr.w	r3, r2, r3
 8006af6:	4a07      	ldr	r2, [pc, #28]	@ (8006b14 <HAL_RCC_GetHCLKFreq+0x58>)
 8006af8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006afa:	4a07      	ldr	r2, [pc, #28]	@ (8006b18 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006b00:	4b04      	ldr	r3, [pc, #16]	@ (8006b14 <HAL_RCC_GetHCLKFreq+0x58>)
 8006b02:	681b      	ldr	r3, [r3, #0]
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3708      	adds	r7, #8
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	58024400 	.word	0x58024400
 8006b10:	0800f16c 	.word	0x0800f16c
 8006b14:	24000004 	.word	0x24000004
 8006b18:	24000000 	.word	0x24000000

08006b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006b20:	f7ff ffcc 	bl	8006abc <HAL_RCC_GetHCLKFreq>
 8006b24:	4602      	mov	r2, r0
 8006b26:	4b06      	ldr	r3, [pc, #24]	@ (8006b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b28:	69db      	ldr	r3, [r3, #28]
 8006b2a:	091b      	lsrs	r3, r3, #4
 8006b2c:	f003 0307 	and.w	r3, r3, #7
 8006b30:	4904      	ldr	r1, [pc, #16]	@ (8006b44 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006b32:	5ccb      	ldrb	r3, [r1, r3]
 8006b34:	f003 031f 	and.w	r3, r3, #31
 8006b38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	58024400 	.word	0x58024400
 8006b44:	0800f16c 	.word	0x0800f16c

08006b48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006b4c:	f7ff ffb6 	bl	8006abc <HAL_RCC_GetHCLKFreq>
 8006b50:	4602      	mov	r2, r0
 8006b52:	4b06      	ldr	r3, [pc, #24]	@ (8006b6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	0a1b      	lsrs	r3, r3, #8
 8006b58:	f003 0307 	and.w	r3, r3, #7
 8006b5c:	4904      	ldr	r1, [pc, #16]	@ (8006b70 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006b5e:	5ccb      	ldrb	r3, [r1, r3]
 8006b60:	f003 031f 	and.w	r3, r3, #31
 8006b64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	58024400 	.word	0x58024400
 8006b70:	0800f16c 	.word	0x0800f16c

08006b74 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b78:	b0ca      	sub	sp, #296	@ 0x128
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006b80:	2300      	movs	r3, #0
 8006b82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006b86:	2300      	movs	r3, #0
 8006b88:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b94:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006b98:	2500      	movs	r5, #0
 8006b9a:	ea54 0305 	orrs.w	r3, r4, r5
 8006b9e:	d049      	beq.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ba4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ba6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006baa:	d02f      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006bac:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006bb0:	d828      	bhi.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006bb2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bb6:	d01a      	beq.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006bb8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bbc:	d822      	bhi.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d003      	beq.n	8006bca <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006bc2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bc6:	d007      	beq.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006bc8:	e01c      	b.n	8006c04 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bca:	4bb8      	ldr	r3, [pc, #736]	@ (8006eac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bce:	4ab7      	ldr	r2, [pc, #732]	@ (8006eac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006bd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006bd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006bd6:	e01a      	b.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bdc:	3308      	adds	r3, #8
 8006bde:	2102      	movs	r1, #2
 8006be0:	4618      	mov	r0, r3
 8006be2:	f001 fc8f 	bl	8008504 <RCCEx_PLL2_Config>
 8006be6:	4603      	mov	r3, r0
 8006be8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006bec:	e00f      	b.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006bee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006bf2:	3328      	adds	r3, #40	@ 0x28
 8006bf4:	2102      	movs	r1, #2
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f001 fd36 	bl	8008668 <RCCEx_PLL3_Config>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006c02:	e004      	b.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006c0a:	e000      	b.n	8006c0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006c0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d10a      	bne.n	8006c2c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006c16:	4ba5      	ldr	r3, [pc, #660]	@ (8006eac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c1a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c22:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006c24:	4aa1      	ldr	r2, [pc, #644]	@ (8006eac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c26:	430b      	orrs	r3, r1
 8006c28:	6513      	str	r3, [r2, #80]	@ 0x50
 8006c2a:	e003      	b.n	8006c34 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006c30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006c40:	f04f 0900 	mov.w	r9, #0
 8006c44:	ea58 0309 	orrs.w	r3, r8, r9
 8006c48:	d047      	beq.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c50:	2b04      	cmp	r3, #4
 8006c52:	d82a      	bhi.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006c54:	a201      	add	r2, pc, #4	@ (adr r2, 8006c5c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c5a:	bf00      	nop
 8006c5c:	08006c71 	.word	0x08006c71
 8006c60:	08006c7f 	.word	0x08006c7f
 8006c64:	08006c95 	.word	0x08006c95
 8006c68:	08006cb3 	.word	0x08006cb3
 8006c6c:	08006cb3 	.word	0x08006cb3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c70:	4b8e      	ldr	r3, [pc, #568]	@ (8006eac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c74:	4a8d      	ldr	r2, [pc, #564]	@ (8006eac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006c76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006c7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c7c:	e01a      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c82:	3308      	adds	r3, #8
 8006c84:	2100      	movs	r1, #0
 8006c86:	4618      	mov	r0, r3
 8006c88:	f001 fc3c 	bl	8008504 <RCCEx_PLL2_Config>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006c92:	e00f      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006c98:	3328      	adds	r3, #40	@ 0x28
 8006c9a:	2100      	movs	r1, #0
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f001 fce3 	bl	8008668 <RCCEx_PLL3_Config>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ca8:	e004      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006cb0:	e000      	b.n	8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006cb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006cb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10a      	bne.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006cbc:	4b7b      	ldr	r3, [pc, #492]	@ (8006eac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cc0:	f023 0107 	bic.w	r1, r3, #7
 8006cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cca:	4a78      	ldr	r2, [pc, #480]	@ (8006eac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ccc:	430b      	orrs	r3, r1
 8006cce:	6513      	str	r3, [r2, #80]	@ 0x50
 8006cd0:	e003      	b.n	8006cda <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006cd6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006cda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006ce6:	f04f 0b00 	mov.w	fp, #0
 8006cea:	ea5a 030b 	orrs.w	r3, sl, fp
 8006cee:	d04c      	beq.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006cf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006cf4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cfa:	d030      	beq.n	8006d5e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006cfc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d00:	d829      	bhi.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006d02:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d04:	d02d      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006d06:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d08:	d825      	bhi.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006d0a:	2b80      	cmp	r3, #128	@ 0x80
 8006d0c:	d018      	beq.n	8006d40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006d0e:	2b80      	cmp	r3, #128	@ 0x80
 8006d10:	d821      	bhi.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d002      	beq.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8006d16:	2b40      	cmp	r3, #64	@ 0x40
 8006d18:	d007      	beq.n	8006d2a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8006d1a:	e01c      	b.n	8006d56 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006d1c:	4b63      	ldr	r3, [pc, #396]	@ (8006eac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d20:	4a62      	ldr	r2, [pc, #392]	@ (8006eac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006d26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006d28:	e01c      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d2e:	3308      	adds	r3, #8
 8006d30:	2100      	movs	r1, #0
 8006d32:	4618      	mov	r0, r3
 8006d34:	f001 fbe6 	bl	8008504 <RCCEx_PLL2_Config>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006d3e:	e011      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006d40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d44:	3328      	adds	r3, #40	@ 0x28
 8006d46:	2100      	movs	r1, #0
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f001 fc8d 	bl	8008668 <RCCEx_PLL3_Config>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8006d54:	e006      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006d5c:	e002      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006d5e:	bf00      	nop
 8006d60:	e000      	b.n	8006d64 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8006d62:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006d64:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d10a      	bne.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006d6c:	4b4f      	ldr	r3, [pc, #316]	@ (8006eac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d6e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d70:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8006d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d7a:	4a4c      	ldr	r2, [pc, #304]	@ (8006eac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006d7c:	430b      	orrs	r3, r1
 8006d7e:	6513      	str	r3, [r2, #80]	@ 0x50
 8006d80:	e003      	b.n	8006d8a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d82:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006d86:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d92:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8006d96:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8006da0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8006da4:	460b      	mov	r3, r1
 8006da6:	4313      	orrs	r3, r2
 8006da8:	d053      	beq.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8006daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006dae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006db2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006db6:	d035      	beq.n	8006e24 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006db8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006dbc:	d82e      	bhi.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006dbe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006dc2:	d031      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8006dc4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006dc8:	d828      	bhi.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006dca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006dce:	d01a      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8006dd0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006dd4:	d822      	bhi.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d003      	beq.n	8006de2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8006dda:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006dde:	d007      	beq.n	8006df0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8006de0:	e01c      	b.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006de2:	4b32      	ldr	r3, [pc, #200]	@ (8006eac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006de6:	4a31      	ldr	r2, [pc, #196]	@ (8006eac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006de8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006dec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006dee:	e01c      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006df4:	3308      	adds	r3, #8
 8006df6:	2100      	movs	r1, #0
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f001 fb83 	bl	8008504 <RCCEx_PLL2_Config>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006e04:	e011      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e0a:	3328      	adds	r3, #40	@ 0x28
 8006e0c:	2100      	movs	r1, #0
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f001 fc2a 	bl	8008668 <RCCEx_PLL3_Config>
 8006e14:	4603      	mov	r3, r0
 8006e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006e1a:	e006      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006e22:	e002      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006e24:	bf00      	nop
 8006e26:	e000      	b.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8006e28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006e2a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d10b      	bne.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006e32:	4b1e      	ldr	r3, [pc, #120]	@ (8006eac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e36:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8006e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e3e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006e42:	4a1a      	ldr	r2, [pc, #104]	@ (8006eac <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006e44:	430b      	orrs	r3, r1
 8006e46:	6593      	str	r3, [r2, #88]	@ 0x58
 8006e48:	e003      	b.n	8006e52 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006e4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006e52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e5a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8006e5e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006e62:	2300      	movs	r3, #0
 8006e64:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8006e68:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8006e6c:	460b      	mov	r3, r1
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	d056      	beq.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8006e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e76:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006e7a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e7e:	d038      	beq.n	8006ef2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8006e80:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006e84:	d831      	bhi.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006e86:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006e8a:	d034      	beq.n	8006ef6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8006e8c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8006e90:	d82b      	bhi.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006e92:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e96:	d01d      	beq.n	8006ed4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006e98:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006e9c:	d825      	bhi.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d006      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8006ea2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ea6:	d00a      	beq.n	8006ebe <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006ea8:	e01f      	b.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006eaa:	bf00      	nop
 8006eac:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eb0:	4ba2      	ldr	r3, [pc, #648]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eb4:	4aa1      	ldr	r2, [pc, #644]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006eb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006eba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ebc:	e01c      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ec2:	3308      	adds	r3, #8
 8006ec4:	2100      	movs	r1, #0
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f001 fb1c 	bl	8008504 <RCCEx_PLL2_Config>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8006ed2:	e011      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006ed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ed8:	3328      	adds	r3, #40	@ 0x28
 8006eda:	2100      	movs	r1, #0
 8006edc:	4618      	mov	r0, r3
 8006ede:	f001 fbc3 	bl	8008668 <RCCEx_PLL3_Config>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006ee8:	e006      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006ef0:	e002      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006ef2:	bf00      	nop
 8006ef4:	e000      	b.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8006ef6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006ef8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10b      	bne.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006f00:	4b8e      	ldr	r3, [pc, #568]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f04:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8006f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f0c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006f10:	4a8a      	ldr	r2, [pc, #552]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f12:	430b      	orrs	r3, r1
 8006f14:	6593      	str	r3, [r2, #88]	@ 0x58
 8006f16:	e003      	b.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006f20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f28:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8006f2c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006f30:	2300      	movs	r3, #0
 8006f32:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006f36:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8006f3a:	460b      	mov	r3, r1
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	d03a      	beq.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8006f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f46:	2b30      	cmp	r3, #48	@ 0x30
 8006f48:	d01f      	beq.n	8006f8a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8006f4a:	2b30      	cmp	r3, #48	@ 0x30
 8006f4c:	d819      	bhi.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006f4e:	2b20      	cmp	r3, #32
 8006f50:	d00c      	beq.n	8006f6c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8006f52:	2b20      	cmp	r3, #32
 8006f54:	d815      	bhi.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d019      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8006f5a:	2b10      	cmp	r3, #16
 8006f5c:	d111      	bne.n	8006f82 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f5e:	4b77      	ldr	r3, [pc, #476]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f62:	4a76      	ldr	r2, [pc, #472]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006f6a:	e011      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f70:	3308      	adds	r3, #8
 8006f72:	2102      	movs	r1, #2
 8006f74:	4618      	mov	r0, r3
 8006f76:	f001 fac5 	bl	8008504 <RCCEx_PLL2_Config>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8006f80:	e006      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006f88:	e002      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006f8a:	bf00      	nop
 8006f8c:	e000      	b.n	8006f90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8006f8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f90:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d10a      	bne.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006f98:	4b68      	ldr	r3, [pc, #416]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006f9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f9c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8006fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fa6:	4a65      	ldr	r2, [pc, #404]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8006fa8:	430b      	orrs	r3, r1
 8006faa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006fac:	e003      	b.n	8006fb6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fb2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fbe:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8006fc2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8006fcc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	d051      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8006fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006fdc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006fe0:	d035      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006fe2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006fe6:	d82e      	bhi.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006fe8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006fec:	d031      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006fee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006ff2:	d828      	bhi.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8006ff4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ff8:	d01a      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8006ffa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ffe:	d822      	bhi.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007000:	2b00      	cmp	r3, #0
 8007002:	d003      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007004:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007008:	d007      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800700a:	e01c      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800700c:	4b4b      	ldr	r3, [pc, #300]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800700e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007010:	4a4a      	ldr	r2, [pc, #296]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007012:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007016:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007018:	e01c      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800701a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800701e:	3308      	adds	r3, #8
 8007020:	2100      	movs	r1, #0
 8007022:	4618      	mov	r0, r3
 8007024:	f001 fa6e 	bl	8008504 <RCCEx_PLL2_Config>
 8007028:	4603      	mov	r3, r0
 800702a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800702e:	e011      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007034:	3328      	adds	r3, #40	@ 0x28
 8007036:	2100      	movs	r1, #0
 8007038:	4618      	mov	r0, r3
 800703a:	f001 fb15 	bl	8008668 <RCCEx_PLL3_Config>
 800703e:	4603      	mov	r3, r0
 8007040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007044:	e006      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800704c:	e002      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800704e:	bf00      	nop
 8007050:	e000      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007052:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007054:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10a      	bne.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800705c:	4b37      	ldr	r3, [pc, #220]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800705e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007060:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800706a:	4a34      	ldr	r2, [pc, #208]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800706c:	430b      	orrs	r3, r1
 800706e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007070:	e003      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007076:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800707a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800707e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007082:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007086:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800708a:	2300      	movs	r3, #0
 800708c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007090:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007094:	460b      	mov	r3, r1
 8007096:	4313      	orrs	r3, r2
 8007098:	d056      	beq.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800709a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800709e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80070a4:	d033      	beq.n	800710e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80070a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80070aa:	d82c      	bhi.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80070ac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80070b0:	d02f      	beq.n	8007112 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80070b2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80070b6:	d826      	bhi.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80070b8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80070bc:	d02b      	beq.n	8007116 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80070be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80070c2:	d820      	bhi.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80070c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070c8:	d012      	beq.n	80070f0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80070ca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80070ce:	d81a      	bhi.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d022      	beq.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80070d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80070d8:	d115      	bne.n	8007106 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80070da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070de:	3308      	adds	r3, #8
 80070e0:	2101      	movs	r1, #1
 80070e2:	4618      	mov	r0, r3
 80070e4:	f001 fa0e 	bl	8008504 <RCCEx_PLL2_Config>
 80070e8:	4603      	mov	r3, r0
 80070ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80070ee:	e015      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80070f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070f4:	3328      	adds	r3, #40	@ 0x28
 80070f6:	2101      	movs	r1, #1
 80070f8:	4618      	mov	r0, r3
 80070fa:	f001 fab5 	bl	8008668 <RCCEx_PLL3_Config>
 80070fe:	4603      	mov	r3, r0
 8007100:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007104:	e00a      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800710c:	e006      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800710e:	bf00      	nop
 8007110:	e004      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007112:	bf00      	nop
 8007114:	e002      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007116:	bf00      	nop
 8007118:	e000      	b.n	800711c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800711a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800711c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10d      	bne.n	8007140 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007124:	4b05      	ldr	r3, [pc, #20]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007128:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800712c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007130:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007132:	4a02      	ldr	r2, [pc, #8]	@ (800713c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007134:	430b      	orrs	r3, r1
 8007136:	6513      	str	r3, [r2, #80]	@ 0x50
 8007138:	e006      	b.n	8007148 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800713a:	bf00      	nop
 800713c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007140:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007144:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800714c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007150:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007154:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007158:	2300      	movs	r3, #0
 800715a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800715e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007162:	460b      	mov	r3, r1
 8007164:	4313      	orrs	r3, r2
 8007166:	d055      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800716c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007170:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007174:	d033      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007176:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800717a:	d82c      	bhi.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800717c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007180:	d02f      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007186:	d826      	bhi.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007188:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800718c:	d02b      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800718e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007192:	d820      	bhi.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007194:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007198:	d012      	beq.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800719a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800719e:	d81a      	bhi.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d022      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0x676>
 80071a4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80071a8:	d115      	bne.n	80071d6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80071aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071ae:	3308      	adds	r3, #8
 80071b0:	2101      	movs	r1, #1
 80071b2:	4618      	mov	r0, r3
 80071b4:	f001 f9a6 	bl	8008504 <RCCEx_PLL2_Config>
 80071b8:	4603      	mov	r3, r0
 80071ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80071be:	e015      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80071c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c4:	3328      	adds	r3, #40	@ 0x28
 80071c6:	2101      	movs	r1, #1
 80071c8:	4618      	mov	r0, r3
 80071ca:	f001 fa4d 	bl	8008668 <RCCEx_PLL3_Config>
 80071ce:	4603      	mov	r3, r0
 80071d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80071d4:	e00a      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80071d6:	2301      	movs	r3, #1
 80071d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071dc:	e006      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80071de:	bf00      	nop
 80071e0:	e004      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80071e2:	bf00      	nop
 80071e4:	e002      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80071e6:	bf00      	nop
 80071e8:	e000      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80071ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071ec:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d10b      	bne.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80071f4:	4ba3      	ldr	r3, [pc, #652]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80071f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071f8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80071fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007200:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007204:	4a9f      	ldr	r2, [pc, #636]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007206:	430b      	orrs	r3, r1
 8007208:	6593      	str	r3, [r2, #88]	@ 0x58
 800720a:	e003      	b.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800720c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007210:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007214:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007220:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007224:	2300      	movs	r3, #0
 8007226:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800722a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800722e:	460b      	mov	r3, r1
 8007230:	4313      	orrs	r3, r2
 8007232:	d037      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007234:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007238:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800723a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800723e:	d00e      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007240:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007244:	d816      	bhi.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007246:	2b00      	cmp	r3, #0
 8007248:	d018      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800724a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800724e:	d111      	bne.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007250:	4b8c      	ldr	r3, [pc, #560]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007254:	4a8b      	ldr	r2, [pc, #556]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007256:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800725a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800725c:	e00f      	b.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800725e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007262:	3308      	adds	r3, #8
 8007264:	2101      	movs	r1, #1
 8007266:	4618      	mov	r0, r3
 8007268:	f001 f94c 	bl	8008504 <RCCEx_PLL2_Config>
 800726c:	4603      	mov	r3, r0
 800726e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007272:	e004      	b.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800727a:	e000      	b.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800727c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800727e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007282:	2b00      	cmp	r3, #0
 8007284:	d10a      	bne.n	800729c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007286:	4b7f      	ldr	r3, [pc, #508]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007288:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800728a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800728e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007294:	4a7b      	ldr	r2, [pc, #492]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007296:	430b      	orrs	r3, r1
 8007298:	6513      	str	r3, [r2, #80]	@ 0x50
 800729a:	e003      	b.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800729c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80072a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ac:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80072b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80072b4:	2300      	movs	r3, #0
 80072b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80072ba:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80072be:	460b      	mov	r3, r1
 80072c0:	4313      	orrs	r3, r2
 80072c2:	d039      	beq.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80072c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80072ca:	2b03      	cmp	r3, #3
 80072cc:	d81c      	bhi.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80072ce:	a201      	add	r2, pc, #4	@ (adr r2, 80072d4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80072d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d4:	08007311 	.word	0x08007311
 80072d8:	080072e5 	.word	0x080072e5
 80072dc:	080072f3 	.word	0x080072f3
 80072e0:	08007311 	.word	0x08007311
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072e4:	4b67      	ldr	r3, [pc, #412]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072e8:	4a66      	ldr	r2, [pc, #408]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80072ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80072ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80072f0:	e00f      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80072f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072f6:	3308      	adds	r3, #8
 80072f8:	2102      	movs	r1, #2
 80072fa:	4618      	mov	r0, r3
 80072fc:	f001 f902 	bl	8008504 <RCCEx_PLL2_Config>
 8007300:	4603      	mov	r3, r0
 8007302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007306:	e004      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800730e:	e000      	b.n	8007312 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007310:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007312:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10a      	bne.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800731a:	4b5a      	ldr	r3, [pc, #360]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800731c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800731e:	f023 0103 	bic.w	r1, r3, #3
 8007322:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007326:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007328:	4a56      	ldr	r2, [pc, #344]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800732a:	430b      	orrs	r3, r1
 800732c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800732e:	e003      	b.n	8007338 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007330:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007334:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800733c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007340:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007344:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007348:	2300      	movs	r3, #0
 800734a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800734e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007352:	460b      	mov	r3, r1
 8007354:	4313      	orrs	r3, r2
 8007356:	f000 809f 	beq.w	8007498 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800735a:	4b4b      	ldr	r3, [pc, #300]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a4a      	ldr	r2, [pc, #296]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007364:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007366:	f7fa fc5d 	bl	8001c24 <HAL_GetTick>
 800736a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800736e:	e00b      	b.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007370:	f7fa fc58 	bl	8001c24 <HAL_GetTick>
 8007374:	4602      	mov	r2, r0
 8007376:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800737a:	1ad3      	subs	r3, r2, r3
 800737c:	2b64      	cmp	r3, #100	@ 0x64
 800737e:	d903      	bls.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007380:	2303      	movs	r3, #3
 8007382:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007386:	e005      	b.n	8007394 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007388:	4b3f      	ldr	r3, [pc, #252]	@ (8007488 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007390:	2b00      	cmp	r3, #0
 8007392:	d0ed      	beq.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007394:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007398:	2b00      	cmp	r3, #0
 800739a:	d179      	bne.n	8007490 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800739c:	4b39      	ldr	r3, [pc, #228]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800739e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80073a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80073a8:	4053      	eors	r3, r2
 80073aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d015      	beq.n	80073de <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073b2:	4b34      	ldr	r3, [pc, #208]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073ba:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80073be:	4b31      	ldr	r3, [pc, #196]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073c2:	4a30      	ldr	r2, [pc, #192]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80073c8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80073ca:	4b2e      	ldr	r3, [pc, #184]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80073ce:	4a2d      	ldr	r2, [pc, #180]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073d4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80073d6:	4a2b      	ldr	r2, [pc, #172]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80073d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80073dc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80073de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80073e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80073ea:	d118      	bne.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073ec:	f7fa fc1a 	bl	8001c24 <HAL_GetTick>
 80073f0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80073f4:	e00d      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073f6:	f7fa fc15 	bl	8001c24 <HAL_GetTick>
 80073fa:	4602      	mov	r2, r0
 80073fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8007400:	1ad2      	subs	r2, r2, r3
 8007402:	f241 3388 	movw	r3, #5000	@ 0x1388
 8007406:	429a      	cmp	r2, r3
 8007408:	d903      	bls.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800740a:	2303      	movs	r3, #3
 800740c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007410:	e005      	b.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007412:	4b1c      	ldr	r3, [pc, #112]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007414:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007416:	f003 0302 	and.w	r3, r3, #2
 800741a:	2b00      	cmp	r3, #0
 800741c:	d0eb      	beq.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800741e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007422:	2b00      	cmp	r3, #0
 8007424:	d129      	bne.n	800747a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800742a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800742e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007432:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007436:	d10e      	bne.n	8007456 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007438:	4b12      	ldr	r3, [pc, #72]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007444:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007448:	091a      	lsrs	r2, r3, #4
 800744a:	4b10      	ldr	r3, [pc, #64]	@ (800748c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800744c:	4013      	ands	r3, r2
 800744e:	4a0d      	ldr	r2, [pc, #52]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007450:	430b      	orrs	r3, r1
 8007452:	6113      	str	r3, [r2, #16]
 8007454:	e005      	b.n	8007462 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007456:	4b0b      	ldr	r3, [pc, #44]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	4a0a      	ldr	r2, [pc, #40]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800745c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007460:	6113      	str	r3, [r2, #16]
 8007462:	4b08      	ldr	r3, [pc, #32]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007464:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007466:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800746a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800746e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007472:	4a04      	ldr	r2, [pc, #16]	@ (8007484 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007474:	430b      	orrs	r3, r1
 8007476:	6713      	str	r3, [r2, #112]	@ 0x70
 8007478:	e00e      	b.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800747a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800747e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007482:	e009      	b.n	8007498 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007484:	58024400 	.word	0x58024400
 8007488:	58024800 	.word	0x58024800
 800748c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007490:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007494:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007498:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800749c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a0:	f002 0301 	and.w	r3, r2, #1
 80074a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80074a8:	2300      	movs	r3, #0
 80074aa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80074ae:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80074b2:	460b      	mov	r3, r1
 80074b4:	4313      	orrs	r3, r2
 80074b6:	f000 8089 	beq.w	80075cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80074ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80074c0:	2b28      	cmp	r3, #40	@ 0x28
 80074c2:	d86b      	bhi.n	800759c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80074c4:	a201      	add	r2, pc, #4	@ (adr r2, 80074cc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80074c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ca:	bf00      	nop
 80074cc:	080075a5 	.word	0x080075a5
 80074d0:	0800759d 	.word	0x0800759d
 80074d4:	0800759d 	.word	0x0800759d
 80074d8:	0800759d 	.word	0x0800759d
 80074dc:	0800759d 	.word	0x0800759d
 80074e0:	0800759d 	.word	0x0800759d
 80074e4:	0800759d 	.word	0x0800759d
 80074e8:	0800759d 	.word	0x0800759d
 80074ec:	08007571 	.word	0x08007571
 80074f0:	0800759d 	.word	0x0800759d
 80074f4:	0800759d 	.word	0x0800759d
 80074f8:	0800759d 	.word	0x0800759d
 80074fc:	0800759d 	.word	0x0800759d
 8007500:	0800759d 	.word	0x0800759d
 8007504:	0800759d 	.word	0x0800759d
 8007508:	0800759d 	.word	0x0800759d
 800750c:	08007587 	.word	0x08007587
 8007510:	0800759d 	.word	0x0800759d
 8007514:	0800759d 	.word	0x0800759d
 8007518:	0800759d 	.word	0x0800759d
 800751c:	0800759d 	.word	0x0800759d
 8007520:	0800759d 	.word	0x0800759d
 8007524:	0800759d 	.word	0x0800759d
 8007528:	0800759d 	.word	0x0800759d
 800752c:	080075a5 	.word	0x080075a5
 8007530:	0800759d 	.word	0x0800759d
 8007534:	0800759d 	.word	0x0800759d
 8007538:	0800759d 	.word	0x0800759d
 800753c:	0800759d 	.word	0x0800759d
 8007540:	0800759d 	.word	0x0800759d
 8007544:	0800759d 	.word	0x0800759d
 8007548:	0800759d 	.word	0x0800759d
 800754c:	080075a5 	.word	0x080075a5
 8007550:	0800759d 	.word	0x0800759d
 8007554:	0800759d 	.word	0x0800759d
 8007558:	0800759d 	.word	0x0800759d
 800755c:	0800759d 	.word	0x0800759d
 8007560:	0800759d 	.word	0x0800759d
 8007564:	0800759d 	.word	0x0800759d
 8007568:	0800759d 	.word	0x0800759d
 800756c:	080075a5 	.word	0x080075a5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007570:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007574:	3308      	adds	r3, #8
 8007576:	2101      	movs	r1, #1
 8007578:	4618      	mov	r0, r3
 800757a:	f000 ffc3 	bl	8008504 <RCCEx_PLL2_Config>
 800757e:	4603      	mov	r3, r0
 8007580:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007584:	e00f      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800758a:	3328      	adds	r3, #40	@ 0x28
 800758c:	2101      	movs	r1, #1
 800758e:	4618      	mov	r0, r3
 8007590:	f001 f86a 	bl	8008668 <RCCEx_PLL3_Config>
 8007594:	4603      	mov	r3, r0
 8007596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800759a:	e004      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075a2:	e000      	b.n	80075a6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80075a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80075a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d10a      	bne.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80075ae:	4bbf      	ldr	r3, [pc, #764]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80075b2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80075b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075bc:	4abb      	ldr	r2, [pc, #748]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80075be:	430b      	orrs	r3, r1
 80075c0:	6553      	str	r3, [r2, #84]	@ 0x54
 80075c2:	e003      	b.n	80075cc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80075c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80075cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d4:	f002 0302 	and.w	r3, r2, #2
 80075d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80075dc:	2300      	movs	r3, #0
 80075de:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80075e2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80075e6:	460b      	mov	r3, r1
 80075e8:	4313      	orrs	r3, r2
 80075ea:	d041      	beq.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80075ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80075f2:	2b05      	cmp	r3, #5
 80075f4:	d824      	bhi.n	8007640 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80075f6:	a201      	add	r2, pc, #4	@ (adr r2, 80075fc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80075f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fc:	08007649 	.word	0x08007649
 8007600:	08007615 	.word	0x08007615
 8007604:	0800762b 	.word	0x0800762b
 8007608:	08007649 	.word	0x08007649
 800760c:	08007649 	.word	0x08007649
 8007610:	08007649 	.word	0x08007649
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007618:	3308      	adds	r3, #8
 800761a:	2101      	movs	r1, #1
 800761c:	4618      	mov	r0, r3
 800761e:	f000 ff71 	bl	8008504 <RCCEx_PLL2_Config>
 8007622:	4603      	mov	r3, r0
 8007624:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007628:	e00f      	b.n	800764a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800762a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800762e:	3328      	adds	r3, #40	@ 0x28
 8007630:	2101      	movs	r1, #1
 8007632:	4618      	mov	r0, r3
 8007634:	f001 f818 	bl	8008668 <RCCEx_PLL3_Config>
 8007638:	4603      	mov	r3, r0
 800763a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800763e:	e004      	b.n	800764a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007646:	e000      	b.n	800764a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800764a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800764e:	2b00      	cmp	r3, #0
 8007650:	d10a      	bne.n	8007668 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007652:	4b96      	ldr	r3, [pc, #600]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007656:	f023 0107 	bic.w	r1, r3, #7
 800765a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800765e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007660:	4a92      	ldr	r2, [pc, #584]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007662:	430b      	orrs	r3, r1
 8007664:	6553      	str	r3, [r2, #84]	@ 0x54
 8007666:	e003      	b.n	8007670 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007668:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800766c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007670:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007678:	f002 0304 	and.w	r3, r2, #4
 800767c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007680:	2300      	movs	r3, #0
 8007682:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007686:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800768a:	460b      	mov	r3, r1
 800768c:	4313      	orrs	r3, r2
 800768e:	d044      	beq.n	800771a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007694:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007698:	2b05      	cmp	r3, #5
 800769a:	d825      	bhi.n	80076e8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800769c:	a201      	add	r2, pc, #4	@ (adr r2, 80076a4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800769e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076a2:	bf00      	nop
 80076a4:	080076f1 	.word	0x080076f1
 80076a8:	080076bd 	.word	0x080076bd
 80076ac:	080076d3 	.word	0x080076d3
 80076b0:	080076f1 	.word	0x080076f1
 80076b4:	080076f1 	.word	0x080076f1
 80076b8:	080076f1 	.word	0x080076f1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80076bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076c0:	3308      	adds	r3, #8
 80076c2:	2101      	movs	r1, #1
 80076c4:	4618      	mov	r0, r3
 80076c6:	f000 ff1d 	bl	8008504 <RCCEx_PLL2_Config>
 80076ca:	4603      	mov	r3, r0
 80076cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80076d0:	e00f      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80076d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d6:	3328      	adds	r3, #40	@ 0x28
 80076d8:	2101      	movs	r1, #1
 80076da:	4618      	mov	r0, r3
 80076dc:	f000 ffc4 	bl	8008668 <RCCEx_PLL3_Config>
 80076e0:	4603      	mov	r3, r0
 80076e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80076e6:	e004      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80076e8:	2301      	movs	r3, #1
 80076ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80076ee:	e000      	b.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80076f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80076f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d10b      	bne.n	8007712 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80076fa:	4b6c      	ldr	r3, [pc, #432]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80076fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076fe:	f023 0107 	bic.w	r1, r3, #7
 8007702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007706:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800770a:	4a68      	ldr	r2, [pc, #416]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800770c:	430b      	orrs	r3, r1
 800770e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007710:	e003      	b.n	800771a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007712:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007716:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800771a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800771e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007722:	f002 0320 	and.w	r3, r2, #32
 8007726:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800772a:	2300      	movs	r3, #0
 800772c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007730:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007734:	460b      	mov	r3, r1
 8007736:	4313      	orrs	r3, r2
 8007738:	d055      	beq.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800773a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800773e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007742:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007746:	d033      	beq.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007748:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800774c:	d82c      	bhi.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800774e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007752:	d02f      	beq.n	80077b4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007758:	d826      	bhi.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800775a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800775e:	d02b      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007760:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007764:	d820      	bhi.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007766:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800776a:	d012      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800776c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007770:	d81a      	bhi.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007772:	2b00      	cmp	r3, #0
 8007774:	d022      	beq.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007776:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800777a:	d115      	bne.n	80077a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800777c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007780:	3308      	adds	r3, #8
 8007782:	2100      	movs	r1, #0
 8007784:	4618      	mov	r0, r3
 8007786:	f000 febd 	bl	8008504 <RCCEx_PLL2_Config>
 800778a:	4603      	mov	r3, r0
 800778c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007790:	e015      	b.n	80077be <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007796:	3328      	adds	r3, #40	@ 0x28
 8007798:	2102      	movs	r1, #2
 800779a:	4618      	mov	r0, r3
 800779c:	f000 ff64 	bl	8008668 <RCCEx_PLL3_Config>
 80077a0:	4603      	mov	r3, r0
 80077a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80077a6:	e00a      	b.n	80077be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80077ae:	e006      	b.n	80077be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80077b0:	bf00      	nop
 80077b2:	e004      	b.n	80077be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80077b4:	bf00      	nop
 80077b6:	e002      	b.n	80077be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80077b8:	bf00      	nop
 80077ba:	e000      	b.n	80077be <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80077bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10b      	bne.n	80077de <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077c6:	4b39      	ldr	r3, [pc, #228]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077ca:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80077ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077d6:	4a35      	ldr	r2, [pc, #212]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80077d8:	430b      	orrs	r3, r1
 80077da:	6553      	str	r3, [r2, #84]	@ 0x54
 80077dc:	e003      	b.n	80077e6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80077e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80077e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ee:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80077f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80077f6:	2300      	movs	r3, #0
 80077f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80077fc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007800:	460b      	mov	r3, r1
 8007802:	4313      	orrs	r3, r2
 8007804:	d058      	beq.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800780a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800780e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007812:	d033      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007814:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007818:	d82c      	bhi.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800781a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800781e:	d02f      	beq.n	8007880 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007820:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007824:	d826      	bhi.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007826:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800782a:	d02b      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800782c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007830:	d820      	bhi.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007832:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007836:	d012      	beq.n	800785e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007838:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800783c:	d81a      	bhi.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800783e:	2b00      	cmp	r3, #0
 8007840:	d022      	beq.n	8007888 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007842:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007846:	d115      	bne.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007848:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800784c:	3308      	adds	r3, #8
 800784e:	2100      	movs	r1, #0
 8007850:	4618      	mov	r0, r3
 8007852:	f000 fe57 	bl	8008504 <RCCEx_PLL2_Config>
 8007856:	4603      	mov	r3, r0
 8007858:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800785c:	e015      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800785e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007862:	3328      	adds	r3, #40	@ 0x28
 8007864:	2102      	movs	r1, #2
 8007866:	4618      	mov	r0, r3
 8007868:	f000 fefe 	bl	8008668 <RCCEx_PLL3_Config>
 800786c:	4603      	mov	r3, r0
 800786e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007872:	e00a      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007874:	2301      	movs	r3, #1
 8007876:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800787a:	e006      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800787c:	bf00      	nop
 800787e:	e004      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007880:	bf00      	nop
 8007882:	e002      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007884:	bf00      	nop
 8007886:	e000      	b.n	800788a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007888:	bf00      	nop
    }

    if (ret == HAL_OK)
 800788a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800788e:	2b00      	cmp	r3, #0
 8007890:	d10e      	bne.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007892:	4b06      	ldr	r3, [pc, #24]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007896:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800789a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800789e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80078a2:	4a02      	ldr	r2, [pc, #8]	@ (80078ac <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078a4:	430b      	orrs	r3, r1
 80078a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80078a8:	e006      	b.n	80078b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80078aa:	bf00      	nop
 80078ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80078b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80078c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80078c8:	2300      	movs	r3, #0
 80078ca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80078ce:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80078d2:	460b      	mov	r3, r1
 80078d4:	4313      	orrs	r3, r2
 80078d6:	d055      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80078d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80078e0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80078e4:	d033      	beq.n	800794e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80078e6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80078ea:	d82c      	bhi.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80078ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078f0:	d02f      	beq.n	8007952 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80078f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078f6:	d826      	bhi.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80078f8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80078fc:	d02b      	beq.n	8007956 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80078fe:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007902:	d820      	bhi.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007904:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007908:	d012      	beq.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800790a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800790e:	d81a      	bhi.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007910:	2b00      	cmp	r3, #0
 8007912:	d022      	beq.n	800795a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007914:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007918:	d115      	bne.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800791a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800791e:	3308      	adds	r3, #8
 8007920:	2100      	movs	r1, #0
 8007922:	4618      	mov	r0, r3
 8007924:	f000 fdee 	bl	8008504 <RCCEx_PLL2_Config>
 8007928:	4603      	mov	r3, r0
 800792a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800792e:	e015      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007930:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007934:	3328      	adds	r3, #40	@ 0x28
 8007936:	2102      	movs	r1, #2
 8007938:	4618      	mov	r0, r3
 800793a:	f000 fe95 	bl	8008668 <RCCEx_PLL3_Config>
 800793e:	4603      	mov	r3, r0
 8007940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007944:	e00a      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800794c:	e006      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800794e:	bf00      	nop
 8007950:	e004      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007952:	bf00      	nop
 8007954:	e002      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007956:	bf00      	nop
 8007958:	e000      	b.n	800795c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800795a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800795c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10b      	bne.n	800797c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007964:	4ba1      	ldr	r3, [pc, #644]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007968:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800796c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007970:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007974:	4a9d      	ldr	r2, [pc, #628]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007976:	430b      	orrs	r3, r1
 8007978:	6593      	str	r3, [r2, #88]	@ 0x58
 800797a:	e003      	b.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800797c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007980:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800798c:	f002 0308 	and.w	r3, r2, #8
 8007990:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007994:	2300      	movs	r3, #0
 8007996:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800799a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800799e:	460b      	mov	r3, r1
 80079a0:	4313      	orrs	r3, r2
 80079a2:	d01e      	beq.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80079a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079b0:	d10c      	bne.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80079b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079b6:	3328      	adds	r3, #40	@ 0x28
 80079b8:	2102      	movs	r1, #2
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 fe54 	bl	8008668 <RCCEx_PLL3_Config>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d002      	beq.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80079cc:	4b87      	ldr	r3, [pc, #540]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079d0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80079d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80079dc:	4a83      	ldr	r2, [pc, #524]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80079de:	430b      	orrs	r3, r1
 80079e0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80079e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ea:	f002 0310 	and.w	r3, r2, #16
 80079ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80079f2:	2300      	movs	r3, #0
 80079f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80079f8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80079fc:	460b      	mov	r3, r1
 80079fe:	4313      	orrs	r3, r2
 8007a00:	d01e      	beq.n	8007a40 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a06:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a0e:	d10c      	bne.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a14:	3328      	adds	r3, #40	@ 0x28
 8007a16:	2102      	movs	r1, #2
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f000 fe25 	bl	8008668 <RCCEx_PLL3_Config>
 8007a1e:	4603      	mov	r3, r0
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d002      	beq.n	8007a2a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007a24:	2301      	movs	r3, #1
 8007a26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007a2a:	4b70      	ldr	r3, [pc, #448]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a2e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007a32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a36:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007a3a:	4a6c      	ldr	r2, [pc, #432]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007a3c:	430b      	orrs	r3, r1
 8007a3e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a48:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007a4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a50:	2300      	movs	r3, #0
 8007a52:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007a56:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	d03e      	beq.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007a60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a64:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007a68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a6c:	d022      	beq.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007a6e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007a72:	d81b      	bhi.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d003      	beq.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007a78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a7c:	d00b      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007a7e:	e015      	b.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a84:	3308      	adds	r3, #8
 8007a86:	2100      	movs	r1, #0
 8007a88:	4618      	mov	r0, r3
 8007a8a:	f000 fd3b 	bl	8008504 <RCCEx_PLL2_Config>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007a94:	e00f      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a9a:	3328      	adds	r3, #40	@ 0x28
 8007a9c:	2102      	movs	r1, #2
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	f000 fde2 	bl	8008668 <RCCEx_PLL3_Config>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007aaa:	e004      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007ab2:	e000      	b.n	8007ab6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007ab4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d10b      	bne.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007abe:	4b4b      	ldr	r3, [pc, #300]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ac2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007aca:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007ace:	4a47      	ldr	r2, [pc, #284]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ad0:	430b      	orrs	r3, r1
 8007ad2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007ad4:	e003      	b.n	8007ade <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ada:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007ade:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007aea:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007aec:	2300      	movs	r3, #0
 8007aee:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007af0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007af4:	460b      	mov	r3, r1
 8007af6:	4313      	orrs	r3, r2
 8007af8:	d03b      	beq.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007afa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b02:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b06:	d01f      	beq.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007b08:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007b0c:	d818      	bhi.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007b0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007b12:	d003      	beq.n	8007b1c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007b14:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007b18:	d007      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007b1a:	e011      	b.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b1c:	4b33      	ldr	r3, [pc, #204]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b20:	4a32      	ldr	r2, [pc, #200]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007b26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007b28:	e00f      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007b2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b2e:	3328      	adds	r3, #40	@ 0x28
 8007b30:	2101      	movs	r1, #1
 8007b32:	4618      	mov	r0, r3
 8007b34:	f000 fd98 	bl	8008668 <RCCEx_PLL3_Config>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007b3e:	e004      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b40:	2301      	movs	r3, #1
 8007b42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b46:	e000      	b.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007b48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d10b      	bne.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007b52:	4b26      	ldr	r3, [pc, #152]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b56:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b62:	4a22      	ldr	r2, [pc, #136]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007b64:	430b      	orrs	r3, r1
 8007b66:	6553      	str	r3, [r2, #84]	@ 0x54
 8007b68:	e003      	b.n	8007b72 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007b7e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b80:	2300      	movs	r3, #0
 8007b82:	677b      	str	r3, [r7, #116]	@ 0x74
 8007b84:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007b88:	460b      	mov	r3, r1
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	d034      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b92:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d003      	beq.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007b98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b9c:	d007      	beq.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007b9e:	e011      	b.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ba0:	4b12      	ldr	r3, [pc, #72]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ba4:	4a11      	ldr	r2, [pc, #68]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ba6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007baa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007bac:	e00e      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bb2:	3308      	adds	r3, #8
 8007bb4:	2102      	movs	r1, #2
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 fca4 	bl	8008504 <RCCEx_PLL2_Config>
 8007bbc:	4603      	mov	r3, r0
 8007bbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007bc2:	e003      	b.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007bca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007bcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d10d      	bne.n	8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007bd4:	4b05      	ldr	r3, [pc, #20]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007bd8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007be0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007be2:	4a02      	ldr	r2, [pc, #8]	@ (8007bec <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007be4:	430b      	orrs	r3, r1
 8007be6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007be8:	e006      	b.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007bea:	bf00      	nop
 8007bec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bf0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007bf4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c00:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007c04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007c06:	2300      	movs	r3, #0
 8007c08:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007c0a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007c0e:	460b      	mov	r3, r1
 8007c10:	4313      	orrs	r3, r2
 8007c12:	d00c      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c18:	3328      	adds	r3, #40	@ 0x28
 8007c1a:	2102      	movs	r1, #2
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f000 fd23 	bl	8008668 <RCCEx_PLL3_Config>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d002      	beq.n	8007c2e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007c28:	2301      	movs	r3, #1
 8007c2a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007c2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c36:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007c3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c40:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007c44:	460b      	mov	r3, r1
 8007c46:	4313      	orrs	r3, r2
 8007c48:	d038      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007c52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c56:	d018      	beq.n	8007c8a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007c58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007c5c:	d811      	bhi.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007c5e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c62:	d014      	beq.n	8007c8e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007c64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c68:	d80b      	bhi.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d011      	beq.n	8007c92 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007c6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c72:	d106      	bne.n	8007c82 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c74:	4bc3      	ldr	r3, [pc, #780]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c78:	4ac2      	ldr	r2, [pc, #776]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007c7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007c80:	e008      	b.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c82:	2301      	movs	r3, #1
 8007c84:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c88:	e004      	b.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007c8a:	bf00      	nop
 8007c8c:	e002      	b.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007c8e:	bf00      	nop
 8007c90:	e000      	b.n	8007c94 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007c92:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d10b      	bne.n	8007cb4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007c9c:	4bb9      	ldr	r3, [pc, #740]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ca0:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007ca4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ca8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cac:	4ab5      	ldr	r2, [pc, #724]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007cae:	430b      	orrs	r3, r1
 8007cb0:	6553      	str	r3, [r2, #84]	@ 0x54
 8007cb2:	e003      	b.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cb4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007cb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007cbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007cc8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007cca:	2300      	movs	r3, #0
 8007ccc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007cce:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007cd2:	460b      	mov	r3, r1
 8007cd4:	4313      	orrs	r3, r2
 8007cd6:	d009      	beq.n	8007cec <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007cd8:	4baa      	ldr	r3, [pc, #680]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007cda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007cdc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ce6:	4aa7      	ldr	r2, [pc, #668]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ce8:	430b      	orrs	r3, r1
 8007cea:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cf4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007cf8:	653b      	str	r3, [r7, #80]	@ 0x50
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	657b      	str	r3, [r7, #84]	@ 0x54
 8007cfe:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007d02:	460b      	mov	r3, r1
 8007d04:	4313      	orrs	r3, r2
 8007d06:	d00a      	beq.n	8007d1e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007d08:	4b9e      	ldr	r3, [pc, #632]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d0a:	691b      	ldr	r3, [r3, #16]
 8007d0c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8007d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d14:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007d18:	4a9a      	ldr	r2, [pc, #616]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d1a:	430b      	orrs	r3, r1
 8007d1c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d26:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8007d2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d30:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8007d34:	460b      	mov	r3, r1
 8007d36:	4313      	orrs	r3, r2
 8007d38:	d009      	beq.n	8007d4e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007d3a:	4b92      	ldr	r3, [pc, #584]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d3e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8007d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d48:	4a8e      	ldr	r2, [pc, #568]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d4a:	430b      	orrs	r3, r1
 8007d4c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d56:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8007d5a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d60:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8007d64:	460b      	mov	r3, r1
 8007d66:	4313      	orrs	r3, r2
 8007d68:	d00e      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007d6a:	4b86      	ldr	r3, [pc, #536]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d6c:	691b      	ldr	r3, [r3, #16]
 8007d6e:	4a85      	ldr	r2, [pc, #532]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d70:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d74:	6113      	str	r3, [r2, #16]
 8007d76:	4b83      	ldr	r3, [pc, #524]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d78:	6919      	ldr	r1, [r3, #16]
 8007d7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d7e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007d82:	4a80      	ldr	r2, [pc, #512]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007d84:	430b      	orrs	r3, r1
 8007d86:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007d88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d90:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8007d94:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d96:	2300      	movs	r3, #0
 8007d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007d9a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8007d9e:	460b      	mov	r3, r1
 8007da0:	4313      	orrs	r3, r2
 8007da2:	d009      	beq.n	8007db8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007da4:	4b77      	ldr	r3, [pc, #476]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007da8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8007dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007db2:	4a74      	ldr	r2, [pc, #464]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007db4:	430b      	orrs	r3, r1
 8007db6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8007dc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dca:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8007dce:	460b      	mov	r3, r1
 8007dd0:	4313      	orrs	r3, r2
 8007dd2:	d00a      	beq.n	8007dea <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007dd4:	4b6b      	ldr	r3, [pc, #428]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007dd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007dd8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8007ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007de0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007de4:	4a67      	ldr	r2, [pc, #412]	@ (8007f84 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007de6:	430b      	orrs	r3, r1
 8007de8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8007dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df2:	2100      	movs	r1, #0
 8007df4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8007df6:	f003 0301 	and.w	r3, r3, #1
 8007dfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007dfc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8007e00:	460b      	mov	r3, r1
 8007e02:	4313      	orrs	r3, r2
 8007e04:	d011      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e0a:	3308      	adds	r3, #8
 8007e0c:	2100      	movs	r1, #0
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f000 fb78 	bl	8008504 <RCCEx_PLL2_Config>
 8007e14:	4603      	mov	r3, r0
 8007e16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007e1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d003      	beq.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8007e2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e32:	2100      	movs	r1, #0
 8007e34:	6239      	str	r1, [r7, #32]
 8007e36:	f003 0302 	and.w	r3, r3, #2
 8007e3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e3c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8007e40:	460b      	mov	r3, r1
 8007e42:	4313      	orrs	r3, r2
 8007e44:	d011      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e4a:	3308      	adds	r3, #8
 8007e4c:	2101      	movs	r1, #1
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 fb58 	bl	8008504 <RCCEx_PLL2_Config>
 8007e54:	4603      	mov	r3, r0
 8007e56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d003      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8007e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e72:	2100      	movs	r1, #0
 8007e74:	61b9      	str	r1, [r7, #24]
 8007e76:	f003 0304 	and.w	r3, r3, #4
 8007e7a:	61fb      	str	r3, [r7, #28]
 8007e7c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007e80:	460b      	mov	r3, r1
 8007e82:	4313      	orrs	r3, r2
 8007e84:	d011      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e8a:	3308      	adds	r3, #8
 8007e8c:	2102      	movs	r1, #2
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f000 fb38 	bl	8008504 <RCCEx_PLL2_Config>
 8007e94:	4603      	mov	r3, r0
 8007e96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007e9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d003      	beq.n	8007eaa <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ea6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8007eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb2:	2100      	movs	r1, #0
 8007eb4:	6139      	str	r1, [r7, #16]
 8007eb6:	f003 0308 	and.w	r3, r3, #8
 8007eba:	617b      	str	r3, [r7, #20]
 8007ebc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007ec0:	460b      	mov	r3, r1
 8007ec2:	4313      	orrs	r3, r2
 8007ec4:	d011      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007ec6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eca:	3328      	adds	r3, #40	@ 0x28
 8007ecc:	2100      	movs	r1, #0
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f000 fbca 	bl	8008668 <RCCEx_PLL3_Config>
 8007ed4:	4603      	mov	r3, r0
 8007ed6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8007eda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d003      	beq.n	8007eea <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ee2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ee6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8007eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	f003 0310 	and.w	r3, r3, #16
 8007efa:	60fb      	str	r3, [r7, #12]
 8007efc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007f00:	460b      	mov	r3, r1
 8007f02:	4313      	orrs	r3, r2
 8007f04:	d011      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f0a:	3328      	adds	r3, #40	@ 0x28
 8007f0c:	2101      	movs	r1, #1
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f000 fbaa 	bl	8008668 <RCCEx_PLL3_Config>
 8007f14:	4603      	mov	r3, r0
 8007f16:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d003      	beq.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f22:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f26:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8007f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f32:	2100      	movs	r1, #0
 8007f34:	6039      	str	r1, [r7, #0]
 8007f36:	f003 0320 	and.w	r3, r3, #32
 8007f3a:	607b      	str	r3, [r7, #4]
 8007f3c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007f40:	460b      	mov	r3, r1
 8007f42:	4313      	orrs	r3, r2
 8007f44:	d011      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f4a:	3328      	adds	r3, #40	@ 0x28
 8007f4c:	2102      	movs	r1, #2
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f000 fb8a 	bl	8008668 <RCCEx_PLL3_Config>
 8007f54:	4603      	mov	r3, r0
 8007f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8007f5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d003      	beq.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f62:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f66:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8007f6a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d101      	bne.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8007f72:	2300      	movs	r3, #0
 8007f74:	e000      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f84:	58024400 	.word	0x58024400

08007f88 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007f8c:	f7fe fd96 	bl	8006abc <HAL_RCC_GetHCLKFreq>
 8007f90:	4602      	mov	r2, r0
 8007f92:	4b06      	ldr	r3, [pc, #24]	@ (8007fac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007f94:	6a1b      	ldr	r3, [r3, #32]
 8007f96:	091b      	lsrs	r3, r3, #4
 8007f98:	f003 0307 	and.w	r3, r3, #7
 8007f9c:	4904      	ldr	r1, [pc, #16]	@ (8007fb0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8007f9e:	5ccb      	ldrb	r3, [r1, r3]
 8007fa0:	f003 031f 	and.w	r3, r3, #31
 8007fa4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	bd80      	pop	{r7, pc}
 8007fac:	58024400 	.word	0x58024400
 8007fb0:	0800f16c 	.word	0x0800f16c

08007fb4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b089      	sub	sp, #36	@ 0x24
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007fbc:	4ba1      	ldr	r3, [pc, #644]	@ (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fc0:	f003 0303 	and.w	r3, r3, #3
 8007fc4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8007fc6:	4b9f      	ldr	r3, [pc, #636]	@ (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fca:	0b1b      	lsrs	r3, r3, #12
 8007fcc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007fd0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007fd2:	4b9c      	ldr	r3, [pc, #624]	@ (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fd6:	091b      	lsrs	r3, r3, #4
 8007fd8:	f003 0301 	and.w	r3, r3, #1
 8007fdc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8007fde:	4b99      	ldr	r3, [pc, #612]	@ (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fe2:	08db      	lsrs	r3, r3, #3
 8007fe4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007fe8:	693a      	ldr	r2, [r7, #16]
 8007fea:	fb02 f303 	mul.w	r3, r2, r3
 8007fee:	ee07 3a90 	vmov	s15, r3
 8007ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ff6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	f000 8111 	beq.w	8008224 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008002:	69bb      	ldr	r3, [r7, #24]
 8008004:	2b02      	cmp	r3, #2
 8008006:	f000 8083 	beq.w	8008110 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	2b02      	cmp	r3, #2
 800800e:	f200 80a1 	bhi.w	8008154 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d003      	beq.n	8008020 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	2b01      	cmp	r3, #1
 800801c:	d056      	beq.n	80080cc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800801e:	e099      	b.n	8008154 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008020:	4b88      	ldr	r3, [pc, #544]	@ (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f003 0320 	and.w	r3, r3, #32
 8008028:	2b00      	cmp	r3, #0
 800802a:	d02d      	beq.n	8008088 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800802c:	4b85      	ldr	r3, [pc, #532]	@ (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	08db      	lsrs	r3, r3, #3
 8008032:	f003 0303 	and.w	r3, r3, #3
 8008036:	4a84      	ldr	r2, [pc, #528]	@ (8008248 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008038:	fa22 f303 	lsr.w	r3, r2, r3
 800803c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	ee07 3a90 	vmov	s15, r3
 8008044:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008048:	697b      	ldr	r3, [r7, #20]
 800804a:	ee07 3a90 	vmov	s15, r3
 800804e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008056:	4b7b      	ldr	r3, [pc, #492]	@ (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800805a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800805e:	ee07 3a90 	vmov	s15, r3
 8008062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008066:	ed97 6a03 	vldr	s12, [r7, #12]
 800806a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800824c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800806e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008076:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800807a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800807e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008082:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008086:	e087      	b.n	8008198 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	ee07 3a90 	vmov	s15, r3
 800808e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008092:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008250 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800809a:	4b6a      	ldr	r3, [pc, #424]	@ (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800809c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800809e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080a2:	ee07 3a90 	vmov	s15, r3
 80080a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80080ae:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800824c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80080be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80080c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80080c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80080ca:	e065      	b.n	8008198 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	ee07 3a90 	vmov	s15, r3
 80080d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080d6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008254 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80080da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80080de:	4b59      	ldr	r3, [pc, #356]	@ (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80080e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80080e6:	ee07 3a90 	vmov	s15, r3
 80080ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80080ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80080f2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800824c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80080f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80080fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80080fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800810a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800810e:	e043      	b.n	8008198 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	ee07 3a90 	vmov	s15, r3
 8008116:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800811a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008258 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800811e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008122:	4b48      	ldr	r3, [pc, #288]	@ (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008124:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008126:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800812a:	ee07 3a90 	vmov	s15, r3
 800812e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008132:	ed97 6a03 	vldr	s12, [r7, #12]
 8008136:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800824c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800813a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800813e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008142:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800814a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800814e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008152:	e021      	b.n	8008198 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008154:	697b      	ldr	r3, [r7, #20]
 8008156:	ee07 3a90 	vmov	s15, r3
 800815a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800815e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008254 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008162:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008166:	4b37      	ldr	r3, [pc, #220]	@ (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008168:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800816a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800816e:	ee07 3a90 	vmov	s15, r3
 8008172:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008176:	ed97 6a03 	vldr	s12, [r7, #12]
 800817a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800824c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800817e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008182:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008186:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800818a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800818e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008192:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008196:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008198:	4b2a      	ldr	r3, [pc, #168]	@ (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800819a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800819c:	0a5b      	lsrs	r3, r3, #9
 800819e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081a2:	ee07 3a90 	vmov	s15, r3
 80081a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081aa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80081ae:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081b2:	edd7 6a07 	vldr	s13, [r7, #28]
 80081b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081be:	ee17 2a90 	vmov	r2, s15
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80081c6:	4b1f      	ldr	r3, [pc, #124]	@ (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081ca:	0c1b      	lsrs	r3, r3, #16
 80081cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081d0:	ee07 3a90 	vmov	s15, r3
 80081d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80081d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80081dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80081e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80081e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80081e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80081ec:	ee17 2a90 	vmov	r2, s15
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80081f4:	4b13      	ldr	r3, [pc, #76]	@ (8008244 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80081f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081f8:	0e1b      	lsrs	r3, r3, #24
 80081fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081fe:	ee07 3a90 	vmov	s15, r3
 8008202:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008206:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800820a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800820e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008212:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008216:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800821a:	ee17 2a90 	vmov	r2, s15
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008222:	e008      	b.n	8008236 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2200      	movs	r2, #0
 8008234:	609a      	str	r2, [r3, #8]
}
 8008236:	bf00      	nop
 8008238:	3724      	adds	r7, #36	@ 0x24
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop
 8008244:	58024400 	.word	0x58024400
 8008248:	03d09000 	.word	0x03d09000
 800824c:	46000000 	.word	0x46000000
 8008250:	4c742400 	.word	0x4c742400
 8008254:	4a742400 	.word	0x4a742400
 8008258:	4bbebc20 	.word	0x4bbebc20

0800825c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800825c:	b480      	push	{r7}
 800825e:	b089      	sub	sp, #36	@ 0x24
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008264:	4ba1      	ldr	r3, [pc, #644]	@ (80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008268:	f003 0303 	and.w	r3, r3, #3
 800826c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800826e:	4b9f      	ldr	r3, [pc, #636]	@ (80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008272:	0d1b      	lsrs	r3, r3, #20
 8008274:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008278:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800827a:	4b9c      	ldr	r3, [pc, #624]	@ (80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800827c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800827e:	0a1b      	lsrs	r3, r3, #8
 8008280:	f003 0301 	and.w	r3, r3, #1
 8008284:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008286:	4b99      	ldr	r3, [pc, #612]	@ (80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800828a:	08db      	lsrs	r3, r3, #3
 800828c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	fb02 f303 	mul.w	r3, r2, r3
 8008296:	ee07 3a90 	vmov	s15, r3
 800829a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800829e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	f000 8111 	beq.w	80084cc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80082aa:	69bb      	ldr	r3, [r7, #24]
 80082ac:	2b02      	cmp	r3, #2
 80082ae:	f000 8083 	beq.w	80083b8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	f200 80a1 	bhi.w	80083fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80082ba:	69bb      	ldr	r3, [r7, #24]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d003      	beq.n	80082c8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80082c0:	69bb      	ldr	r3, [r7, #24]
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d056      	beq.n	8008374 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80082c6:	e099      	b.n	80083fc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082c8:	4b88      	ldr	r3, [pc, #544]	@ (80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f003 0320 	and.w	r3, r3, #32
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d02d      	beq.n	8008330 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80082d4:	4b85      	ldr	r3, [pc, #532]	@ (80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	08db      	lsrs	r3, r3, #3
 80082da:	f003 0303 	and.w	r3, r3, #3
 80082de:	4a84      	ldr	r2, [pc, #528]	@ (80084f0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80082e0:	fa22 f303 	lsr.w	r3, r2, r3
 80082e4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	ee07 3a90 	vmov	s15, r3
 80082ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	ee07 3a90 	vmov	s15, r3
 80082f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80082fe:	4b7b      	ldr	r3, [pc, #492]	@ (80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008306:	ee07 3a90 	vmov	s15, r3
 800830a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800830e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008312:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80084f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800831a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800831e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800832a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800832e:	e087      	b.n	8008440 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	ee07 3a90 	vmov	s15, r3
 8008336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800833a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80084f8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800833e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008342:	4b6a      	ldr	r3, [pc, #424]	@ (80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800834a:	ee07 3a90 	vmov	s15, r3
 800834e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008352:	ed97 6a03 	vldr	s12, [r7, #12]
 8008356:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80084f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800835a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800835e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800836a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800836e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008372:	e065      	b.n	8008440 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	ee07 3a90 	vmov	s15, r3
 800837a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800837e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80084fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008386:	4b59      	ldr	r3, [pc, #356]	@ (80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800838a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800838e:	ee07 3a90 	vmov	s15, r3
 8008392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008396:	ed97 6a03 	vldr	s12, [r7, #12]
 800839a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80084f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800839e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083b6:	e043      	b.n	8008440 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	ee07 3a90 	vmov	s15, r3
 80083be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008500 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80083c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ca:	4b48      	ldr	r3, [pc, #288]	@ (80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80083cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083d2:	ee07 3a90 	vmov	s15, r3
 80083d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083da:	ed97 6a03 	vldr	s12, [r7, #12]
 80083de:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80084f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80083e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083fa:	e021      	b.n	8008440 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	ee07 3a90 	vmov	s15, r3
 8008402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008406:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80084fc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800840a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800840e:	4b37      	ldr	r3, [pc, #220]	@ (80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008412:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008416:	ee07 3a90 	vmov	s15, r3
 800841a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800841e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008422:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80084f4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008426:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800842a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800842e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008432:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800843a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800843e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008440:	4b2a      	ldr	r3, [pc, #168]	@ (80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008444:	0a5b      	lsrs	r3, r3, #9
 8008446:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800844a:	ee07 3a90 	vmov	s15, r3
 800844e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008452:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008456:	ee37 7a87 	vadd.f32	s14, s15, s14
 800845a:	edd7 6a07 	vldr	s13, [r7, #28]
 800845e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008462:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008466:	ee17 2a90 	vmov	r2, s15
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800846e:	4b1f      	ldr	r3, [pc, #124]	@ (80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008472:	0c1b      	lsrs	r3, r3, #16
 8008474:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008478:	ee07 3a90 	vmov	s15, r3
 800847c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008480:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008484:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008488:	edd7 6a07 	vldr	s13, [r7, #28]
 800848c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008490:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008494:	ee17 2a90 	vmov	r2, s15
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800849c:	4b13      	ldr	r3, [pc, #76]	@ (80084ec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800849e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80084a0:	0e1b      	lsrs	r3, r3, #24
 80084a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084a6:	ee07 3a90 	vmov	s15, r3
 80084aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084ae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80084b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80084ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084c2:	ee17 2a90 	vmov	r2, s15
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80084ca:	e008      	b.n	80084de <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2200      	movs	r2, #0
 80084d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2200      	movs	r2, #0
 80084dc:	609a      	str	r2, [r3, #8]
}
 80084de:	bf00      	nop
 80084e0:	3724      	adds	r7, #36	@ 0x24
 80084e2:	46bd      	mov	sp, r7
 80084e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e8:	4770      	bx	lr
 80084ea:	bf00      	nop
 80084ec:	58024400 	.word	0x58024400
 80084f0:	03d09000 	.word	0x03d09000
 80084f4:	46000000 	.word	0x46000000
 80084f8:	4c742400 	.word	0x4c742400
 80084fc:	4a742400 	.word	0x4a742400
 8008500:	4bbebc20 	.word	0x4bbebc20

08008504 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
 800850c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800850e:	2300      	movs	r3, #0
 8008510:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008512:	4b53      	ldr	r3, [pc, #332]	@ (8008660 <RCCEx_PLL2_Config+0x15c>)
 8008514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008516:	f003 0303 	and.w	r3, r3, #3
 800851a:	2b03      	cmp	r3, #3
 800851c:	d101      	bne.n	8008522 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e099      	b.n	8008656 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008522:	4b4f      	ldr	r3, [pc, #316]	@ (8008660 <RCCEx_PLL2_Config+0x15c>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a4e      	ldr	r2, [pc, #312]	@ (8008660 <RCCEx_PLL2_Config+0x15c>)
 8008528:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800852c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800852e:	f7f9 fb79 	bl	8001c24 <HAL_GetTick>
 8008532:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008534:	e008      	b.n	8008548 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008536:	f7f9 fb75 	bl	8001c24 <HAL_GetTick>
 800853a:	4602      	mov	r2, r0
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	2b02      	cmp	r3, #2
 8008542:	d901      	bls.n	8008548 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008544:	2303      	movs	r3, #3
 8008546:	e086      	b.n	8008656 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008548:	4b45      	ldr	r3, [pc, #276]	@ (8008660 <RCCEx_PLL2_Config+0x15c>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d1f0      	bne.n	8008536 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008554:	4b42      	ldr	r3, [pc, #264]	@ (8008660 <RCCEx_PLL2_Config+0x15c>)
 8008556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008558:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	031b      	lsls	r3, r3, #12
 8008562:	493f      	ldr	r1, [pc, #252]	@ (8008660 <RCCEx_PLL2_Config+0x15c>)
 8008564:	4313      	orrs	r3, r2
 8008566:	628b      	str	r3, [r1, #40]	@ 0x28
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	3b01      	subs	r3, #1
 800856e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	689b      	ldr	r3, [r3, #8]
 8008576:	3b01      	subs	r3, #1
 8008578:	025b      	lsls	r3, r3, #9
 800857a:	b29b      	uxth	r3, r3
 800857c:	431a      	orrs	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	3b01      	subs	r3, #1
 8008584:	041b      	lsls	r3, r3, #16
 8008586:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800858a:	431a      	orrs	r2, r3
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	691b      	ldr	r3, [r3, #16]
 8008590:	3b01      	subs	r3, #1
 8008592:	061b      	lsls	r3, r3, #24
 8008594:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008598:	4931      	ldr	r1, [pc, #196]	@ (8008660 <RCCEx_PLL2_Config+0x15c>)
 800859a:	4313      	orrs	r3, r2
 800859c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800859e:	4b30      	ldr	r3, [pc, #192]	@ (8008660 <RCCEx_PLL2_Config+0x15c>)
 80085a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	695b      	ldr	r3, [r3, #20]
 80085aa:	492d      	ldr	r1, [pc, #180]	@ (8008660 <RCCEx_PLL2_Config+0x15c>)
 80085ac:	4313      	orrs	r3, r2
 80085ae:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80085b0:	4b2b      	ldr	r3, [pc, #172]	@ (8008660 <RCCEx_PLL2_Config+0x15c>)
 80085b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b4:	f023 0220 	bic.w	r2, r3, #32
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	4928      	ldr	r1, [pc, #160]	@ (8008660 <RCCEx_PLL2_Config+0x15c>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80085c2:	4b27      	ldr	r3, [pc, #156]	@ (8008660 <RCCEx_PLL2_Config+0x15c>)
 80085c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085c6:	4a26      	ldr	r2, [pc, #152]	@ (8008660 <RCCEx_PLL2_Config+0x15c>)
 80085c8:	f023 0310 	bic.w	r3, r3, #16
 80085cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80085ce:	4b24      	ldr	r3, [pc, #144]	@ (8008660 <RCCEx_PLL2_Config+0x15c>)
 80085d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80085d2:	4b24      	ldr	r3, [pc, #144]	@ (8008664 <RCCEx_PLL2_Config+0x160>)
 80085d4:	4013      	ands	r3, r2
 80085d6:	687a      	ldr	r2, [r7, #4]
 80085d8:	69d2      	ldr	r2, [r2, #28]
 80085da:	00d2      	lsls	r2, r2, #3
 80085dc:	4920      	ldr	r1, [pc, #128]	@ (8008660 <RCCEx_PLL2_Config+0x15c>)
 80085de:	4313      	orrs	r3, r2
 80085e0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80085e2:	4b1f      	ldr	r3, [pc, #124]	@ (8008660 <RCCEx_PLL2_Config+0x15c>)
 80085e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085e6:	4a1e      	ldr	r2, [pc, #120]	@ (8008660 <RCCEx_PLL2_Config+0x15c>)
 80085e8:	f043 0310 	orr.w	r3, r3, #16
 80085ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d106      	bne.n	8008602 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80085f4:	4b1a      	ldr	r3, [pc, #104]	@ (8008660 <RCCEx_PLL2_Config+0x15c>)
 80085f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085f8:	4a19      	ldr	r2, [pc, #100]	@ (8008660 <RCCEx_PLL2_Config+0x15c>)
 80085fa:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80085fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008600:	e00f      	b.n	8008622 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	2b01      	cmp	r3, #1
 8008606:	d106      	bne.n	8008616 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008608:	4b15      	ldr	r3, [pc, #84]	@ (8008660 <RCCEx_PLL2_Config+0x15c>)
 800860a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800860c:	4a14      	ldr	r2, [pc, #80]	@ (8008660 <RCCEx_PLL2_Config+0x15c>)
 800860e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008612:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008614:	e005      	b.n	8008622 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008616:	4b12      	ldr	r3, [pc, #72]	@ (8008660 <RCCEx_PLL2_Config+0x15c>)
 8008618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800861a:	4a11      	ldr	r2, [pc, #68]	@ (8008660 <RCCEx_PLL2_Config+0x15c>)
 800861c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008620:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008622:	4b0f      	ldr	r3, [pc, #60]	@ (8008660 <RCCEx_PLL2_Config+0x15c>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a0e      	ldr	r2, [pc, #56]	@ (8008660 <RCCEx_PLL2_Config+0x15c>)
 8008628:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800862c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800862e:	f7f9 faf9 	bl	8001c24 <HAL_GetTick>
 8008632:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008634:	e008      	b.n	8008648 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008636:	f7f9 faf5 	bl	8001c24 <HAL_GetTick>
 800863a:	4602      	mov	r2, r0
 800863c:	68bb      	ldr	r3, [r7, #8]
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	2b02      	cmp	r3, #2
 8008642:	d901      	bls.n	8008648 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008644:	2303      	movs	r3, #3
 8008646:	e006      	b.n	8008656 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008648:	4b05      	ldr	r3, [pc, #20]	@ (8008660 <RCCEx_PLL2_Config+0x15c>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d0f0      	beq.n	8008636 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008654:	7bfb      	ldrb	r3, [r7, #15]
}
 8008656:	4618      	mov	r0, r3
 8008658:	3710      	adds	r7, #16
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	58024400 	.word	0x58024400
 8008664:	ffff0007 	.word	0xffff0007

08008668 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008672:	2300      	movs	r3, #0
 8008674:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008676:	4b53      	ldr	r3, [pc, #332]	@ (80087c4 <RCCEx_PLL3_Config+0x15c>)
 8008678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800867a:	f003 0303 	and.w	r3, r3, #3
 800867e:	2b03      	cmp	r3, #3
 8008680:	d101      	bne.n	8008686 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	e099      	b.n	80087ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008686:	4b4f      	ldr	r3, [pc, #316]	@ (80087c4 <RCCEx_PLL3_Config+0x15c>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a4e      	ldr	r2, [pc, #312]	@ (80087c4 <RCCEx_PLL3_Config+0x15c>)
 800868c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008690:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008692:	f7f9 fac7 	bl	8001c24 <HAL_GetTick>
 8008696:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008698:	e008      	b.n	80086ac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800869a:	f7f9 fac3 	bl	8001c24 <HAL_GetTick>
 800869e:	4602      	mov	r2, r0
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	1ad3      	subs	r3, r2, r3
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d901      	bls.n	80086ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80086a8:	2303      	movs	r3, #3
 80086aa:	e086      	b.n	80087ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80086ac:	4b45      	ldr	r3, [pc, #276]	@ (80087c4 <RCCEx_PLL3_Config+0x15c>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d1f0      	bne.n	800869a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80086b8:	4b42      	ldr	r3, [pc, #264]	@ (80087c4 <RCCEx_PLL3_Config+0x15c>)
 80086ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086bc:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	051b      	lsls	r3, r3, #20
 80086c6:	493f      	ldr	r1, [pc, #252]	@ (80087c4 <RCCEx_PLL3_Config+0x15c>)
 80086c8:	4313      	orrs	r3, r2
 80086ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	3b01      	subs	r3, #1
 80086d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	689b      	ldr	r3, [r3, #8]
 80086da:	3b01      	subs	r3, #1
 80086dc:	025b      	lsls	r3, r3, #9
 80086de:	b29b      	uxth	r3, r3
 80086e0:	431a      	orrs	r2, r3
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	3b01      	subs	r3, #1
 80086e8:	041b      	lsls	r3, r3, #16
 80086ea:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80086ee:	431a      	orrs	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	691b      	ldr	r3, [r3, #16]
 80086f4:	3b01      	subs	r3, #1
 80086f6:	061b      	lsls	r3, r3, #24
 80086f8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80086fc:	4931      	ldr	r1, [pc, #196]	@ (80087c4 <RCCEx_PLL3_Config+0x15c>)
 80086fe:	4313      	orrs	r3, r2
 8008700:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008702:	4b30      	ldr	r3, [pc, #192]	@ (80087c4 <RCCEx_PLL3_Config+0x15c>)
 8008704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008706:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	695b      	ldr	r3, [r3, #20]
 800870e:	492d      	ldr	r1, [pc, #180]	@ (80087c4 <RCCEx_PLL3_Config+0x15c>)
 8008710:	4313      	orrs	r3, r2
 8008712:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008714:	4b2b      	ldr	r3, [pc, #172]	@ (80087c4 <RCCEx_PLL3_Config+0x15c>)
 8008716:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008718:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	699b      	ldr	r3, [r3, #24]
 8008720:	4928      	ldr	r1, [pc, #160]	@ (80087c4 <RCCEx_PLL3_Config+0x15c>)
 8008722:	4313      	orrs	r3, r2
 8008724:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008726:	4b27      	ldr	r3, [pc, #156]	@ (80087c4 <RCCEx_PLL3_Config+0x15c>)
 8008728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800872a:	4a26      	ldr	r2, [pc, #152]	@ (80087c4 <RCCEx_PLL3_Config+0x15c>)
 800872c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008730:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008732:	4b24      	ldr	r3, [pc, #144]	@ (80087c4 <RCCEx_PLL3_Config+0x15c>)
 8008734:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008736:	4b24      	ldr	r3, [pc, #144]	@ (80087c8 <RCCEx_PLL3_Config+0x160>)
 8008738:	4013      	ands	r3, r2
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	69d2      	ldr	r2, [r2, #28]
 800873e:	00d2      	lsls	r2, r2, #3
 8008740:	4920      	ldr	r1, [pc, #128]	@ (80087c4 <RCCEx_PLL3_Config+0x15c>)
 8008742:	4313      	orrs	r3, r2
 8008744:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008746:	4b1f      	ldr	r3, [pc, #124]	@ (80087c4 <RCCEx_PLL3_Config+0x15c>)
 8008748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800874a:	4a1e      	ldr	r2, [pc, #120]	@ (80087c4 <RCCEx_PLL3_Config+0x15c>)
 800874c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008750:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d106      	bne.n	8008766 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008758:	4b1a      	ldr	r3, [pc, #104]	@ (80087c4 <RCCEx_PLL3_Config+0x15c>)
 800875a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800875c:	4a19      	ldr	r2, [pc, #100]	@ (80087c4 <RCCEx_PLL3_Config+0x15c>)
 800875e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008762:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008764:	e00f      	b.n	8008786 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	2b01      	cmp	r3, #1
 800876a:	d106      	bne.n	800877a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800876c:	4b15      	ldr	r3, [pc, #84]	@ (80087c4 <RCCEx_PLL3_Config+0x15c>)
 800876e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008770:	4a14      	ldr	r2, [pc, #80]	@ (80087c4 <RCCEx_PLL3_Config+0x15c>)
 8008772:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008776:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008778:	e005      	b.n	8008786 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800877a:	4b12      	ldr	r3, [pc, #72]	@ (80087c4 <RCCEx_PLL3_Config+0x15c>)
 800877c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800877e:	4a11      	ldr	r2, [pc, #68]	@ (80087c4 <RCCEx_PLL3_Config+0x15c>)
 8008780:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008784:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008786:	4b0f      	ldr	r3, [pc, #60]	@ (80087c4 <RCCEx_PLL3_Config+0x15c>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a0e      	ldr	r2, [pc, #56]	@ (80087c4 <RCCEx_PLL3_Config+0x15c>)
 800878c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008790:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008792:	f7f9 fa47 	bl	8001c24 <HAL_GetTick>
 8008796:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008798:	e008      	b.n	80087ac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800879a:	f7f9 fa43 	bl	8001c24 <HAL_GetTick>
 800879e:	4602      	mov	r2, r0
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	1ad3      	subs	r3, r2, r3
 80087a4:	2b02      	cmp	r3, #2
 80087a6:	d901      	bls.n	80087ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80087a8:	2303      	movs	r3, #3
 80087aa:	e006      	b.n	80087ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80087ac:	4b05      	ldr	r3, [pc, #20]	@ (80087c4 <RCCEx_PLL3_Config+0x15c>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d0f0      	beq.n	800879a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80087b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3710      	adds	r7, #16
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}
 80087c2:	bf00      	nop
 80087c4:	58024400 	.word	0x58024400
 80087c8:	ffff0007 	.word	0xffff0007

080087cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d101      	bne.n	80087de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80087da:	2301      	movs	r3, #1
 80087dc:	e049      	b.n	8008872 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d106      	bne.n	80087f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f7f8 fecc 	bl	8001590 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2202      	movs	r2, #2
 80087fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	3304      	adds	r3, #4
 8008808:	4619      	mov	r1, r3
 800880a:	4610      	mov	r0, r2
 800880c:	f000 fea4 	bl	8009558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2201      	movs	r2, #1
 8008814:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	2201      	movs	r2, #1
 800881c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2201      	movs	r2, #1
 8008824:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2201      	movs	r2, #1
 800882c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2201      	movs	r2, #1
 800884c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2201      	movs	r2, #1
 8008854:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2201      	movs	r2, #1
 8008864:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008870:	2300      	movs	r3, #0
}
 8008872:	4618      	mov	r0, r3
 8008874:	3708      	adds	r7, #8
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
	...

0800887c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800887c:	b480      	push	{r7}
 800887e:	b085      	sub	sp, #20
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800888a:	b2db      	uxtb	r3, r3
 800888c:	2b01      	cmp	r3, #1
 800888e:	d001      	beq.n	8008894 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e054      	b.n	800893e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2202      	movs	r2, #2
 8008898:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68da      	ldr	r2, [r3, #12]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f042 0201 	orr.w	r2, r2, #1
 80088aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a26      	ldr	r2, [pc, #152]	@ (800894c <HAL_TIM_Base_Start_IT+0xd0>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d022      	beq.n	80088fc <HAL_TIM_Base_Start_IT+0x80>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088be:	d01d      	beq.n	80088fc <HAL_TIM_Base_Start_IT+0x80>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a22      	ldr	r2, [pc, #136]	@ (8008950 <HAL_TIM_Base_Start_IT+0xd4>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d018      	beq.n	80088fc <HAL_TIM_Base_Start_IT+0x80>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a21      	ldr	r2, [pc, #132]	@ (8008954 <HAL_TIM_Base_Start_IT+0xd8>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d013      	beq.n	80088fc <HAL_TIM_Base_Start_IT+0x80>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a1f      	ldr	r2, [pc, #124]	@ (8008958 <HAL_TIM_Base_Start_IT+0xdc>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d00e      	beq.n	80088fc <HAL_TIM_Base_Start_IT+0x80>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a1e      	ldr	r2, [pc, #120]	@ (800895c <HAL_TIM_Base_Start_IT+0xe0>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d009      	beq.n	80088fc <HAL_TIM_Base_Start_IT+0x80>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a1c      	ldr	r2, [pc, #112]	@ (8008960 <HAL_TIM_Base_Start_IT+0xe4>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d004      	beq.n	80088fc <HAL_TIM_Base_Start_IT+0x80>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a1b      	ldr	r2, [pc, #108]	@ (8008964 <HAL_TIM_Base_Start_IT+0xe8>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d115      	bne.n	8008928 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	689a      	ldr	r2, [r3, #8]
 8008902:	4b19      	ldr	r3, [pc, #100]	@ (8008968 <HAL_TIM_Base_Start_IT+0xec>)
 8008904:	4013      	ands	r3, r2
 8008906:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2b06      	cmp	r3, #6
 800890c:	d015      	beq.n	800893a <HAL_TIM_Base_Start_IT+0xbe>
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008914:	d011      	beq.n	800893a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f042 0201 	orr.w	r2, r2, #1
 8008924:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008926:	e008      	b.n	800893a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f042 0201 	orr.w	r2, r2, #1
 8008936:	601a      	str	r2, [r3, #0]
 8008938:	e000      	b.n	800893c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800893a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3714      	adds	r7, #20
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop
 800894c:	40010000 	.word	0x40010000
 8008950:	40000400 	.word	0x40000400
 8008954:	40000800 	.word	0x40000800
 8008958:	40000c00 	.word	0x40000c00
 800895c:	40010400 	.word	0x40010400
 8008960:	40001800 	.word	0x40001800
 8008964:	40014000 	.word	0x40014000
 8008968:	00010007 	.word	0x00010007

0800896c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d101      	bne.n	800897e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	e049      	b.n	8008a12 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008984:	b2db      	uxtb	r3, r3
 8008986:	2b00      	cmp	r3, #0
 8008988:	d106      	bne.n	8008998 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f7f8 fcf6 	bl	8001384 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2202      	movs	r2, #2
 800899c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	3304      	adds	r3, #4
 80089a8:	4619      	mov	r1, r3
 80089aa:	4610      	mov	r0, r2
 80089ac:	f000 fdd4 	bl	8009558 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2201      	movs	r2, #1
 80089d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008a10:	2300      	movs	r3, #0
}
 8008a12:	4618      	mov	r0, r3
 8008a14:	3708      	adds	r7, #8
 8008a16:	46bd      	mov	sp, r7
 8008a18:	bd80      	pop	{r7, pc}
	...

08008a1c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008a26:	683b      	ldr	r3, [r7, #0]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d109      	bne.n	8008a40 <HAL_TIM_PWM_Start+0x24>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	2b01      	cmp	r3, #1
 8008a36:	bf14      	ite	ne
 8008a38:	2301      	movne	r3, #1
 8008a3a:	2300      	moveq	r3, #0
 8008a3c:	b2db      	uxtb	r3, r3
 8008a3e:	e03c      	b.n	8008aba <HAL_TIM_PWM_Start+0x9e>
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	2b04      	cmp	r3, #4
 8008a44:	d109      	bne.n	8008a5a <HAL_TIM_PWM_Start+0x3e>
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	bf14      	ite	ne
 8008a52:	2301      	movne	r3, #1
 8008a54:	2300      	moveq	r3, #0
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	e02f      	b.n	8008aba <HAL_TIM_PWM_Start+0x9e>
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	2b08      	cmp	r3, #8
 8008a5e:	d109      	bne.n	8008a74 <HAL_TIM_PWM_Start+0x58>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b01      	cmp	r3, #1
 8008a6a:	bf14      	ite	ne
 8008a6c:	2301      	movne	r3, #1
 8008a6e:	2300      	moveq	r3, #0
 8008a70:	b2db      	uxtb	r3, r3
 8008a72:	e022      	b.n	8008aba <HAL_TIM_PWM_Start+0x9e>
 8008a74:	683b      	ldr	r3, [r7, #0]
 8008a76:	2b0c      	cmp	r3, #12
 8008a78:	d109      	bne.n	8008a8e <HAL_TIM_PWM_Start+0x72>
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	bf14      	ite	ne
 8008a86:	2301      	movne	r3, #1
 8008a88:	2300      	moveq	r3, #0
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	e015      	b.n	8008aba <HAL_TIM_PWM_Start+0x9e>
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	2b10      	cmp	r3, #16
 8008a92:	d109      	bne.n	8008aa8 <HAL_TIM_PWM_Start+0x8c>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	bf14      	ite	ne
 8008aa0:	2301      	movne	r3, #1
 8008aa2:	2300      	moveq	r3, #0
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	e008      	b.n	8008aba <HAL_TIM_PWM_Start+0x9e>
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008aae:	b2db      	uxtb	r3, r3
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	bf14      	ite	ne
 8008ab4:	2301      	movne	r3, #1
 8008ab6:	2300      	moveq	r3, #0
 8008ab8:	b2db      	uxtb	r3, r3
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d001      	beq.n	8008ac2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	e0a1      	b.n	8008c06 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d104      	bne.n	8008ad2 <HAL_TIM_PWM_Start+0xb6>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2202      	movs	r2, #2
 8008acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ad0:	e023      	b.n	8008b1a <HAL_TIM_PWM_Start+0xfe>
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	2b04      	cmp	r3, #4
 8008ad6:	d104      	bne.n	8008ae2 <HAL_TIM_PWM_Start+0xc6>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2202      	movs	r2, #2
 8008adc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ae0:	e01b      	b.n	8008b1a <HAL_TIM_PWM_Start+0xfe>
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	2b08      	cmp	r3, #8
 8008ae6:	d104      	bne.n	8008af2 <HAL_TIM_PWM_Start+0xd6>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2202      	movs	r2, #2
 8008aec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008af0:	e013      	b.n	8008b1a <HAL_TIM_PWM_Start+0xfe>
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	2b0c      	cmp	r3, #12
 8008af6:	d104      	bne.n	8008b02 <HAL_TIM_PWM_Start+0xe6>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2202      	movs	r2, #2
 8008afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008b00:	e00b      	b.n	8008b1a <HAL_TIM_PWM_Start+0xfe>
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	2b10      	cmp	r3, #16
 8008b06:	d104      	bne.n	8008b12 <HAL_TIM_PWM_Start+0xf6>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2202      	movs	r2, #2
 8008b0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b10:	e003      	b.n	8008b1a <HAL_TIM_PWM_Start+0xfe>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2202      	movs	r2, #2
 8008b16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	6839      	ldr	r1, [r7, #0]
 8008b22:	4618      	mov	r0, r3
 8008b24:	f001 f932 	bl	8009d8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a38      	ldr	r2, [pc, #224]	@ (8008c10 <HAL_TIM_PWM_Start+0x1f4>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d013      	beq.n	8008b5a <HAL_TIM_PWM_Start+0x13e>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4a37      	ldr	r2, [pc, #220]	@ (8008c14 <HAL_TIM_PWM_Start+0x1f8>)
 8008b38:	4293      	cmp	r3, r2
 8008b3a:	d00e      	beq.n	8008b5a <HAL_TIM_PWM_Start+0x13e>
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a35      	ldr	r2, [pc, #212]	@ (8008c18 <HAL_TIM_PWM_Start+0x1fc>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d009      	beq.n	8008b5a <HAL_TIM_PWM_Start+0x13e>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	4a34      	ldr	r2, [pc, #208]	@ (8008c1c <HAL_TIM_PWM_Start+0x200>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d004      	beq.n	8008b5a <HAL_TIM_PWM_Start+0x13e>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	4a32      	ldr	r2, [pc, #200]	@ (8008c20 <HAL_TIM_PWM_Start+0x204>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d101      	bne.n	8008b5e <HAL_TIM_PWM_Start+0x142>
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e000      	b.n	8008b60 <HAL_TIM_PWM_Start+0x144>
 8008b5e:	2300      	movs	r3, #0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d007      	beq.n	8008b74 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008b72:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a25      	ldr	r2, [pc, #148]	@ (8008c10 <HAL_TIM_PWM_Start+0x1f4>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d022      	beq.n	8008bc4 <HAL_TIM_PWM_Start+0x1a8>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b86:	d01d      	beq.n	8008bc4 <HAL_TIM_PWM_Start+0x1a8>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a25      	ldr	r2, [pc, #148]	@ (8008c24 <HAL_TIM_PWM_Start+0x208>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d018      	beq.n	8008bc4 <HAL_TIM_PWM_Start+0x1a8>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a24      	ldr	r2, [pc, #144]	@ (8008c28 <HAL_TIM_PWM_Start+0x20c>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d013      	beq.n	8008bc4 <HAL_TIM_PWM_Start+0x1a8>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a22      	ldr	r2, [pc, #136]	@ (8008c2c <HAL_TIM_PWM_Start+0x210>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d00e      	beq.n	8008bc4 <HAL_TIM_PWM_Start+0x1a8>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	4a1a      	ldr	r2, [pc, #104]	@ (8008c14 <HAL_TIM_PWM_Start+0x1f8>)
 8008bac:	4293      	cmp	r3, r2
 8008bae:	d009      	beq.n	8008bc4 <HAL_TIM_PWM_Start+0x1a8>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a1e      	ldr	r2, [pc, #120]	@ (8008c30 <HAL_TIM_PWM_Start+0x214>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d004      	beq.n	8008bc4 <HAL_TIM_PWM_Start+0x1a8>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a16      	ldr	r2, [pc, #88]	@ (8008c18 <HAL_TIM_PWM_Start+0x1fc>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d115      	bne.n	8008bf0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	689a      	ldr	r2, [r3, #8]
 8008bca:	4b1a      	ldr	r3, [pc, #104]	@ (8008c34 <HAL_TIM_PWM_Start+0x218>)
 8008bcc:	4013      	ands	r3, r2
 8008bce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	2b06      	cmp	r3, #6
 8008bd4:	d015      	beq.n	8008c02 <HAL_TIM_PWM_Start+0x1e6>
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008bdc:	d011      	beq.n	8008c02 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f042 0201 	orr.w	r2, r2, #1
 8008bec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bee:	e008      	b.n	8008c02 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	681a      	ldr	r2, [r3, #0]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	f042 0201 	orr.w	r2, r2, #1
 8008bfe:	601a      	str	r2, [r3, #0]
 8008c00:	e000      	b.n	8008c04 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	40010000 	.word	0x40010000
 8008c14:	40010400 	.word	0x40010400
 8008c18:	40014000 	.word	0x40014000
 8008c1c:	40014400 	.word	0x40014400
 8008c20:	40014800 	.word	0x40014800
 8008c24:	40000400 	.word	0x40000400
 8008c28:	40000800 	.word	0x40000800
 8008c2c:	40000c00 	.word	0x40000c00
 8008c30:	40001800 	.word	0x40001800
 8008c34:	00010007 	.word	0x00010007

08008c38 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b086      	sub	sp, #24
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
 8008c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d101      	bne.n	8008c4c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e08f      	b.n	8008d6c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d106      	bne.n	8008c66 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f7f8 fcbd 	bl	80015e0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2202      	movs	r2, #2
 8008c6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	6899      	ldr	r1, [r3, #8]
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681a      	ldr	r2, [r3, #0]
 8008c78:	4b3e      	ldr	r3, [pc, #248]	@ (8008d74 <HAL_TIM_Encoder_Init+0x13c>)
 8008c7a:	400b      	ands	r3, r1
 8008c7c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681a      	ldr	r2, [r3, #0]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	3304      	adds	r3, #4
 8008c86:	4619      	mov	r1, r3
 8008c88:	4610      	mov	r0, r2
 8008c8a:	f000 fc65 	bl	8009558 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	689b      	ldr	r3, [r3, #8]
 8008c94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	699b      	ldr	r3, [r3, #24]
 8008c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	6a1b      	ldr	r3, [r3, #32]
 8008ca4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	697a      	ldr	r2, [r7, #20]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008cb0:	693a      	ldr	r2, [r7, #16]
 8008cb2:	4b31      	ldr	r3, [pc, #196]	@ (8008d78 <HAL_TIM_Encoder_Init+0x140>)
 8008cb4:	4013      	ands	r3, r2
 8008cb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	689a      	ldr	r2, [r3, #8]
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	699b      	ldr	r3, [r3, #24]
 8008cc0:	021b      	lsls	r3, r3, #8
 8008cc2:	4313      	orrs	r3, r2
 8008cc4:	693a      	ldr	r2, [r7, #16]
 8008cc6:	4313      	orrs	r3, r2
 8008cc8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008cca:	693a      	ldr	r2, [r7, #16]
 8008ccc:	4b2b      	ldr	r3, [pc, #172]	@ (8008d7c <HAL_TIM_Encoder_Init+0x144>)
 8008cce:	4013      	ands	r3, r2
 8008cd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008cd2:	693a      	ldr	r2, [r7, #16]
 8008cd4:	4b2a      	ldr	r3, [pc, #168]	@ (8008d80 <HAL_TIM_Encoder_Init+0x148>)
 8008cd6:	4013      	ands	r3, r2
 8008cd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	68da      	ldr	r2, [r3, #12]
 8008cde:	683b      	ldr	r3, [r7, #0]
 8008ce0:	69db      	ldr	r3, [r3, #28]
 8008ce2:	021b      	lsls	r3, r3, #8
 8008ce4:	4313      	orrs	r3, r2
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	011a      	lsls	r2, r3, #4
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	6a1b      	ldr	r3, [r3, #32]
 8008cf6:	031b      	lsls	r3, r3, #12
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	693a      	ldr	r2, [r7, #16]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008d06:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008d0e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	685a      	ldr	r2, [r3, #4]
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	695b      	ldr	r3, [r3, #20]
 8008d18:	011b      	lsls	r3, r3, #4
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	4313      	orrs	r3, r2
 8008d20:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	697a      	ldr	r2, [r7, #20]
 8008d28:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	693a      	ldr	r2, [r7, #16]
 8008d30:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2201      	movs	r2, #1
 8008d56:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2201      	movs	r2, #1
 8008d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d6a:	2300      	movs	r3, #0
}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	3718      	adds	r7, #24
 8008d70:	46bd      	mov	sp, r7
 8008d72:	bd80      	pop	{r7, pc}
 8008d74:	fffebff8 	.word	0xfffebff8
 8008d78:	fffffcfc 	.word	0xfffffcfc
 8008d7c:	fffff3f3 	.word	0xfffff3f3
 8008d80:	ffff0f0f 	.word	0xffff0f0f

08008d84 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d94:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008d9c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008da4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008dac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d110      	bne.n	8008dd6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008db4:	7bfb      	ldrb	r3, [r7, #15]
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d102      	bne.n	8008dc0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8008dba:	7b7b      	ldrb	r3, [r7, #13]
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d001      	beq.n	8008dc4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e089      	b.n	8008ed8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2202      	movs	r2, #2
 8008dc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2202      	movs	r2, #2
 8008dd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008dd4:	e031      	b.n	8008e3a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	2b04      	cmp	r3, #4
 8008dda:	d110      	bne.n	8008dfe <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008ddc:	7bbb      	ldrb	r3, [r7, #14]
 8008dde:	2b01      	cmp	r3, #1
 8008de0:	d102      	bne.n	8008de8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008de2:	7b3b      	ldrb	r3, [r7, #12]
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d001      	beq.n	8008dec <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	e075      	b.n	8008ed8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2202      	movs	r2, #2
 8008df0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2202      	movs	r2, #2
 8008df8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008dfc:	e01d      	b.n	8008e3a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008dfe:	7bfb      	ldrb	r3, [r7, #15]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d108      	bne.n	8008e16 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e04:	7bbb      	ldrb	r3, [r7, #14]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d105      	bne.n	8008e16 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8008e0a:	7b7b      	ldrb	r3, [r7, #13]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d102      	bne.n	8008e16 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8008e10:	7b3b      	ldrb	r3, [r7, #12]
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d001      	beq.n	8008e1a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8008e16:	2301      	movs	r3, #1
 8008e18:	e05e      	b.n	8008ed8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	2202      	movs	r2, #2
 8008e1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2202      	movs	r2, #2
 8008e26:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	2202      	movs	r2, #2
 8008e2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2202      	movs	r2, #2
 8008e36:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d003      	beq.n	8008e48 <HAL_TIM_Encoder_Start_IT+0xc4>
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	2b04      	cmp	r3, #4
 8008e44:	d010      	beq.n	8008e68 <HAL_TIM_Encoder_Start_IT+0xe4>
 8008e46:	e01f      	b.n	8008e88 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	2100      	movs	r1, #0
 8008e50:	4618      	mov	r0, r3
 8008e52:	f000 ff9b 	bl	8009d8c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	68da      	ldr	r2, [r3, #12]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f042 0202 	orr.w	r2, r2, #2
 8008e64:	60da      	str	r2, [r3, #12]
      break;
 8008e66:	e02e      	b.n	8008ec6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	2104      	movs	r1, #4
 8008e70:	4618      	mov	r0, r3
 8008e72:	f000 ff8b 	bl	8009d8c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	68da      	ldr	r2, [r3, #12]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f042 0204 	orr.w	r2, r2, #4
 8008e84:	60da      	str	r2, [r3, #12]
      break;
 8008e86:	e01e      	b.n	8008ec6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	2100      	movs	r1, #0
 8008e90:	4618      	mov	r0, r3
 8008e92:	f000 ff7b 	bl	8009d8c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	2104      	movs	r1, #4
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	f000 ff74 	bl	8009d8c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68da      	ldr	r2, [r3, #12]
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f042 0202 	orr.w	r2, r2, #2
 8008eb2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	68da      	ldr	r2, [r3, #12]
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f042 0204 	orr.w	r2, r2, #4
 8008ec2:	60da      	str	r2, [r3, #12]
      break;
 8008ec4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f042 0201 	orr.w	r2, r2, #1
 8008ed4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8008ed6:	2300      	movs	r3, #0
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3710      	adds	r7, #16
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b084      	sub	sp, #16
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	68db      	ldr	r3, [r3, #12]
 8008eee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	f003 0302 	and.w	r3, r3, #2
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d020      	beq.n	8008f44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	f003 0302 	and.w	r3, r3, #2
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d01b      	beq.n	8008f44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f06f 0202 	mvn.w	r2, #2
 8008f14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	f003 0303 	and.w	r3, r3, #3
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d003      	beq.n	8008f32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f7f7 feca 	bl	8000cc4 <HAL_TIM_IC_CaptureCallback>
 8008f30:	e005      	b.n	8008f3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 faf2 	bl	800951c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 faf9 	bl	8009530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2200      	movs	r2, #0
 8008f42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	f003 0304 	and.w	r3, r3, #4
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d020      	beq.n	8008f90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	f003 0304 	and.w	r3, r3, #4
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d01b      	beq.n	8008f90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f06f 0204 	mvn.w	r2, #4
 8008f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2202      	movs	r2, #2
 8008f66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d003      	beq.n	8008f7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f7f7 fea4 	bl	8000cc4 <HAL_TIM_IC_CaptureCallback>
 8008f7c:	e005      	b.n	8008f8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 facc 	bl	800951c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 fad3 	bl	8009530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	f003 0308 	and.w	r3, r3, #8
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d020      	beq.n	8008fdc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f003 0308 	and.w	r3, r3, #8
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d01b      	beq.n	8008fdc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f06f 0208 	mvn.w	r2, #8
 8008fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2204      	movs	r2, #4
 8008fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	69db      	ldr	r3, [r3, #28]
 8008fba:	f003 0303 	and.w	r3, r3, #3
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d003      	beq.n	8008fca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7f7 fe7e 	bl	8000cc4 <HAL_TIM_IC_CaptureCallback>
 8008fc8:	e005      	b.n	8008fd6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 faa6 	bl	800951c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008fd0:	6878      	ldr	r0, [r7, #4]
 8008fd2:	f000 faad 	bl	8009530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2200      	movs	r2, #0
 8008fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008fdc:	68bb      	ldr	r3, [r7, #8]
 8008fde:	f003 0310 	and.w	r3, r3, #16
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d020      	beq.n	8009028 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f003 0310 	and.w	r3, r3, #16
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d01b      	beq.n	8009028 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f06f 0210 	mvn.w	r2, #16
 8008ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2208      	movs	r2, #8
 8008ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	69db      	ldr	r3, [r3, #28]
 8009006:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800900a:	2b00      	cmp	r3, #0
 800900c:	d003      	beq.n	8009016 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f7f7 fe58 	bl	8000cc4 <HAL_TIM_IC_CaptureCallback>
 8009014:	e005      	b.n	8009022 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 fa80 	bl	800951c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fa87 	bl	8009530 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2200      	movs	r2, #0
 8009026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	f003 0301 	and.w	r3, r3, #1
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00c      	beq.n	800904c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	2b00      	cmp	r3, #0
 800903a:	d007      	beq.n	800904c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	f06f 0201 	mvn.w	r2, #1
 8009044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f000 fa5e 	bl	8009508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009052:	2b00      	cmp	r3, #0
 8009054:	d104      	bne.n	8009060 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800905c:	2b00      	cmp	r3, #0
 800905e:	d00c      	beq.n	800907a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009066:	2b00      	cmp	r3, #0
 8009068:	d007      	beq.n	800907a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f000 ff47 	bl	8009f08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009080:	2b00      	cmp	r3, #0
 8009082:	d00c      	beq.n	800909e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800908a:	2b00      	cmp	r3, #0
 800908c:	d007      	beq.n	800909e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 ff3f 	bl	8009f1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d00c      	beq.n	80090c2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d007      	beq.n	80090c2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80090ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 fa41 	bl	8009544 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	f003 0320 	and.w	r3, r3, #32
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d00c      	beq.n	80090e6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f003 0320 	and.w	r3, r3, #32
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d007      	beq.n	80090e6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f06f 0220 	mvn.w	r2, #32
 80090de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 ff07 	bl	8009ef4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80090e6:	bf00      	nop
 80090e8:	3710      	adds	r7, #16
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
	...

080090f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b086      	sub	sp, #24
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	60f8      	str	r0, [r7, #12]
 80090f8:	60b9      	str	r1, [r7, #8]
 80090fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80090fc:	2300      	movs	r3, #0
 80090fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009106:	2b01      	cmp	r3, #1
 8009108:	d101      	bne.n	800910e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800910a:	2302      	movs	r3, #2
 800910c:	e0ff      	b.n	800930e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	2201      	movs	r2, #1
 8009112:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2b14      	cmp	r3, #20
 800911a:	f200 80f0 	bhi.w	80092fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800911e:	a201      	add	r2, pc, #4	@ (adr r2, 8009124 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009124:	08009179 	.word	0x08009179
 8009128:	080092ff 	.word	0x080092ff
 800912c:	080092ff 	.word	0x080092ff
 8009130:	080092ff 	.word	0x080092ff
 8009134:	080091b9 	.word	0x080091b9
 8009138:	080092ff 	.word	0x080092ff
 800913c:	080092ff 	.word	0x080092ff
 8009140:	080092ff 	.word	0x080092ff
 8009144:	080091fb 	.word	0x080091fb
 8009148:	080092ff 	.word	0x080092ff
 800914c:	080092ff 	.word	0x080092ff
 8009150:	080092ff 	.word	0x080092ff
 8009154:	0800923b 	.word	0x0800923b
 8009158:	080092ff 	.word	0x080092ff
 800915c:	080092ff 	.word	0x080092ff
 8009160:	080092ff 	.word	0x080092ff
 8009164:	0800927d 	.word	0x0800927d
 8009168:	080092ff 	.word	0x080092ff
 800916c:	080092ff 	.word	0x080092ff
 8009170:	080092ff 	.word	0x080092ff
 8009174:	080092bd 	.word	0x080092bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	68b9      	ldr	r1, [r7, #8]
 800917e:	4618      	mov	r0, r3
 8009180:	f000 fa90 	bl	80096a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	699a      	ldr	r2, [r3, #24]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f042 0208 	orr.w	r2, r2, #8
 8009192:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	699a      	ldr	r2, [r3, #24]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f022 0204 	bic.w	r2, r2, #4
 80091a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	6999      	ldr	r1, [r3, #24]
 80091aa:	68bb      	ldr	r3, [r7, #8]
 80091ac:	691a      	ldr	r2, [r3, #16]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	430a      	orrs	r2, r1
 80091b4:	619a      	str	r2, [r3, #24]
      break;
 80091b6:	e0a5      	b.n	8009304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	68b9      	ldr	r1, [r7, #8]
 80091be:	4618      	mov	r0, r3
 80091c0:	f000 fb00 	bl	80097c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	699a      	ldr	r2, [r3, #24]
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80091d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	699a      	ldr	r2, [r3, #24]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80091e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	6999      	ldr	r1, [r3, #24]
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	691b      	ldr	r3, [r3, #16]
 80091ee:	021a      	lsls	r2, r3, #8
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	430a      	orrs	r2, r1
 80091f6:	619a      	str	r2, [r3, #24]
      break;
 80091f8:	e084      	b.n	8009304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	68b9      	ldr	r1, [r7, #8]
 8009200:	4618      	mov	r0, r3
 8009202:	f000 fb69 	bl	80098d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	69da      	ldr	r2, [r3, #28]
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f042 0208 	orr.w	r2, r2, #8
 8009214:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	69da      	ldr	r2, [r3, #28]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f022 0204 	bic.w	r2, r2, #4
 8009224:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	69d9      	ldr	r1, [r3, #28]
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	691a      	ldr	r2, [r3, #16]
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	430a      	orrs	r2, r1
 8009236:	61da      	str	r2, [r3, #28]
      break;
 8009238:	e064      	b.n	8009304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	68b9      	ldr	r1, [r7, #8]
 8009240:	4618      	mov	r0, r3
 8009242:	f000 fbd1 	bl	80099e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	69da      	ldr	r2, [r3, #28]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	69da      	ldr	r2, [r3, #28]
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	69d9      	ldr	r1, [r3, #28]
 800926c:	68bb      	ldr	r3, [r7, #8]
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	021a      	lsls	r2, r3, #8
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	430a      	orrs	r2, r1
 8009278:	61da      	str	r2, [r3, #28]
      break;
 800927a:	e043      	b.n	8009304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	68b9      	ldr	r1, [r7, #8]
 8009282:	4618      	mov	r0, r3
 8009284:	f000 fc1a 	bl	8009abc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	f042 0208 	orr.w	r2, r2, #8
 8009296:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f022 0204 	bic.w	r2, r2, #4
 80092a6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	691a      	ldr	r2, [r3, #16]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	430a      	orrs	r2, r1
 80092b8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80092ba:	e023      	b.n	8009304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	68b9      	ldr	r1, [r7, #8]
 80092c2:	4618      	mov	r0, r3
 80092c4:	f000 fc5e 	bl	8009b84 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80092d6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80092e6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	021a      	lsls	r2, r3, #8
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	430a      	orrs	r2, r1
 80092fa:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80092fc:	e002      	b.n	8009304 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80092fe:	2301      	movs	r3, #1
 8009300:	75fb      	strb	r3, [r7, #23]
      break;
 8009302:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2200      	movs	r2, #0
 8009308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800930c:	7dfb      	ldrb	r3, [r7, #23]
}
 800930e:	4618      	mov	r0, r3
 8009310:	3718      	adds	r7, #24
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
 8009316:	bf00      	nop

08009318 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	b084      	sub	sp, #16
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
 8009320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009322:	2300      	movs	r3, #0
 8009324:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800932c:	2b01      	cmp	r3, #1
 800932e:	d101      	bne.n	8009334 <HAL_TIM_ConfigClockSource+0x1c>
 8009330:	2302      	movs	r3, #2
 8009332:	e0dc      	b.n	80094ee <HAL_TIM_ConfigClockSource+0x1d6>
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2201      	movs	r2, #1
 8009338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2202      	movs	r2, #2
 8009340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800934c:	68ba      	ldr	r2, [r7, #8]
 800934e:	4b6a      	ldr	r3, [pc, #424]	@ (80094f8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009350:	4013      	ands	r3, r2
 8009352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800935a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	68ba      	ldr	r2, [r7, #8]
 8009362:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a64      	ldr	r2, [pc, #400]	@ (80094fc <HAL_TIM_ConfigClockSource+0x1e4>)
 800936a:	4293      	cmp	r3, r2
 800936c:	f000 80a9 	beq.w	80094c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009370:	4a62      	ldr	r2, [pc, #392]	@ (80094fc <HAL_TIM_ConfigClockSource+0x1e4>)
 8009372:	4293      	cmp	r3, r2
 8009374:	f200 80ae 	bhi.w	80094d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009378:	4a61      	ldr	r2, [pc, #388]	@ (8009500 <HAL_TIM_ConfigClockSource+0x1e8>)
 800937a:	4293      	cmp	r3, r2
 800937c:	f000 80a1 	beq.w	80094c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009380:	4a5f      	ldr	r2, [pc, #380]	@ (8009500 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009382:	4293      	cmp	r3, r2
 8009384:	f200 80a6 	bhi.w	80094d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009388:	4a5e      	ldr	r2, [pc, #376]	@ (8009504 <HAL_TIM_ConfigClockSource+0x1ec>)
 800938a:	4293      	cmp	r3, r2
 800938c:	f000 8099 	beq.w	80094c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009390:	4a5c      	ldr	r2, [pc, #368]	@ (8009504 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009392:	4293      	cmp	r3, r2
 8009394:	f200 809e 	bhi.w	80094d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009398:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800939c:	f000 8091 	beq.w	80094c2 <HAL_TIM_ConfigClockSource+0x1aa>
 80093a0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80093a4:	f200 8096 	bhi.w	80094d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80093a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093ac:	f000 8089 	beq.w	80094c2 <HAL_TIM_ConfigClockSource+0x1aa>
 80093b0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80093b4:	f200 808e 	bhi.w	80094d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80093b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093bc:	d03e      	beq.n	800943c <HAL_TIM_ConfigClockSource+0x124>
 80093be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80093c2:	f200 8087 	bhi.w	80094d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80093c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093ca:	f000 8086 	beq.w	80094da <HAL_TIM_ConfigClockSource+0x1c2>
 80093ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80093d2:	d87f      	bhi.n	80094d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80093d4:	2b70      	cmp	r3, #112	@ 0x70
 80093d6:	d01a      	beq.n	800940e <HAL_TIM_ConfigClockSource+0xf6>
 80093d8:	2b70      	cmp	r3, #112	@ 0x70
 80093da:	d87b      	bhi.n	80094d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80093dc:	2b60      	cmp	r3, #96	@ 0x60
 80093de:	d050      	beq.n	8009482 <HAL_TIM_ConfigClockSource+0x16a>
 80093e0:	2b60      	cmp	r3, #96	@ 0x60
 80093e2:	d877      	bhi.n	80094d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80093e4:	2b50      	cmp	r3, #80	@ 0x50
 80093e6:	d03c      	beq.n	8009462 <HAL_TIM_ConfigClockSource+0x14a>
 80093e8:	2b50      	cmp	r3, #80	@ 0x50
 80093ea:	d873      	bhi.n	80094d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80093ec:	2b40      	cmp	r3, #64	@ 0x40
 80093ee:	d058      	beq.n	80094a2 <HAL_TIM_ConfigClockSource+0x18a>
 80093f0:	2b40      	cmp	r3, #64	@ 0x40
 80093f2:	d86f      	bhi.n	80094d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80093f4:	2b30      	cmp	r3, #48	@ 0x30
 80093f6:	d064      	beq.n	80094c2 <HAL_TIM_ConfigClockSource+0x1aa>
 80093f8:	2b30      	cmp	r3, #48	@ 0x30
 80093fa:	d86b      	bhi.n	80094d4 <HAL_TIM_ConfigClockSource+0x1bc>
 80093fc:	2b20      	cmp	r3, #32
 80093fe:	d060      	beq.n	80094c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009400:	2b20      	cmp	r3, #32
 8009402:	d867      	bhi.n	80094d4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009404:	2b00      	cmp	r3, #0
 8009406:	d05c      	beq.n	80094c2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009408:	2b10      	cmp	r3, #16
 800940a:	d05a      	beq.n	80094c2 <HAL_TIM_ConfigClockSource+0x1aa>
 800940c:	e062      	b.n	80094d4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009412:	683b      	ldr	r3, [r7, #0]
 8009414:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800941a:	683b      	ldr	r3, [r7, #0]
 800941c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800941e:	f000 fc95 	bl	8009d4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009430:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	68ba      	ldr	r2, [r7, #8]
 8009438:	609a      	str	r2, [r3, #8]
      break;
 800943a:	e04f      	b.n	80094dc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800944c:	f000 fc7e 	bl	8009d4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	689a      	ldr	r2, [r3, #8]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800945e:	609a      	str	r2, [r3, #8]
      break;
 8009460:	e03c      	b.n	80094dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800946a:	683b      	ldr	r3, [r7, #0]
 800946c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800946e:	461a      	mov	r2, r3
 8009470:	f000 fbee 	bl	8009c50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2150      	movs	r1, #80	@ 0x50
 800947a:	4618      	mov	r0, r3
 800947c:	f000 fc48 	bl	8009d10 <TIM_ITRx_SetConfig>
      break;
 8009480:	e02c      	b.n	80094dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800948a:	683b      	ldr	r3, [r7, #0]
 800948c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800948e:	461a      	mov	r2, r3
 8009490:	f000 fc0d 	bl	8009cae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	2160      	movs	r1, #96	@ 0x60
 800949a:	4618      	mov	r0, r3
 800949c:	f000 fc38 	bl	8009d10 <TIM_ITRx_SetConfig>
      break;
 80094a0:	e01c      	b.n	80094dc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80094ae:	461a      	mov	r2, r3
 80094b0:	f000 fbce 	bl	8009c50 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2140      	movs	r1, #64	@ 0x40
 80094ba:	4618      	mov	r0, r3
 80094bc:	f000 fc28 	bl	8009d10 <TIM_ITRx_SetConfig>
      break;
 80094c0:	e00c      	b.n	80094dc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681a      	ldr	r2, [r3, #0]
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4619      	mov	r1, r3
 80094cc:	4610      	mov	r0, r2
 80094ce:	f000 fc1f 	bl	8009d10 <TIM_ITRx_SetConfig>
      break;
 80094d2:	e003      	b.n	80094dc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80094d4:	2301      	movs	r3, #1
 80094d6:	73fb      	strb	r3, [r7, #15]
      break;
 80094d8:	e000      	b.n	80094dc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80094da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2200      	movs	r2, #0
 80094e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80094ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3710      	adds	r7, #16
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	ffceff88 	.word	0xffceff88
 80094fc:	00100040 	.word	0x00100040
 8009500:	00100030 	.word	0x00100030
 8009504:	00100020 	.word	0x00100020

08009508 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009508:	b480      	push	{r7}
 800950a:	b083      	sub	sp, #12
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009510:	bf00      	nop
 8009512:	370c      	adds	r7, #12
 8009514:	46bd      	mov	sp, r7
 8009516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951a:	4770      	bx	lr

0800951c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800951c:	b480      	push	{r7}
 800951e:	b083      	sub	sp, #12
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009524:	bf00      	nop
 8009526:	370c      	adds	r7, #12
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800954c:	bf00      	nop
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	4a46      	ldr	r2, [pc, #280]	@ (8009684 <TIM_Base_SetConfig+0x12c>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d013      	beq.n	8009598 <TIM_Base_SetConfig+0x40>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009576:	d00f      	beq.n	8009598 <TIM_Base_SetConfig+0x40>
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	4a43      	ldr	r2, [pc, #268]	@ (8009688 <TIM_Base_SetConfig+0x130>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d00b      	beq.n	8009598 <TIM_Base_SetConfig+0x40>
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	4a42      	ldr	r2, [pc, #264]	@ (800968c <TIM_Base_SetConfig+0x134>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d007      	beq.n	8009598 <TIM_Base_SetConfig+0x40>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4a41      	ldr	r2, [pc, #260]	@ (8009690 <TIM_Base_SetConfig+0x138>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d003      	beq.n	8009598 <TIM_Base_SetConfig+0x40>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a40      	ldr	r2, [pc, #256]	@ (8009694 <TIM_Base_SetConfig+0x13c>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d108      	bne.n	80095aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800959e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	4313      	orrs	r3, r2
 80095a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	4a35      	ldr	r2, [pc, #212]	@ (8009684 <TIM_Base_SetConfig+0x12c>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d01f      	beq.n	80095f2 <TIM_Base_SetConfig+0x9a>
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095b8:	d01b      	beq.n	80095f2 <TIM_Base_SetConfig+0x9a>
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	4a32      	ldr	r2, [pc, #200]	@ (8009688 <TIM_Base_SetConfig+0x130>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d017      	beq.n	80095f2 <TIM_Base_SetConfig+0x9a>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4a31      	ldr	r2, [pc, #196]	@ (800968c <TIM_Base_SetConfig+0x134>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d013      	beq.n	80095f2 <TIM_Base_SetConfig+0x9a>
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4a30      	ldr	r2, [pc, #192]	@ (8009690 <TIM_Base_SetConfig+0x138>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d00f      	beq.n	80095f2 <TIM_Base_SetConfig+0x9a>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4a2f      	ldr	r2, [pc, #188]	@ (8009694 <TIM_Base_SetConfig+0x13c>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d00b      	beq.n	80095f2 <TIM_Base_SetConfig+0x9a>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4a2e      	ldr	r2, [pc, #184]	@ (8009698 <TIM_Base_SetConfig+0x140>)
 80095de:	4293      	cmp	r3, r2
 80095e0:	d007      	beq.n	80095f2 <TIM_Base_SetConfig+0x9a>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4a2d      	ldr	r2, [pc, #180]	@ (800969c <TIM_Base_SetConfig+0x144>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d003      	beq.n	80095f2 <TIM_Base_SetConfig+0x9a>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4a2c      	ldr	r2, [pc, #176]	@ (80096a0 <TIM_Base_SetConfig+0x148>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d108      	bne.n	8009604 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	68fa      	ldr	r2, [r7, #12]
 8009600:	4313      	orrs	r3, r2
 8009602:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	695b      	ldr	r3, [r3, #20]
 800960e:	4313      	orrs	r3, r2
 8009610:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	689a      	ldr	r2, [r3, #8]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	4a16      	ldr	r2, [pc, #88]	@ (8009684 <TIM_Base_SetConfig+0x12c>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d00f      	beq.n	8009650 <TIM_Base_SetConfig+0xf8>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	4a18      	ldr	r2, [pc, #96]	@ (8009694 <TIM_Base_SetConfig+0x13c>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d00b      	beq.n	8009650 <TIM_Base_SetConfig+0xf8>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	4a17      	ldr	r2, [pc, #92]	@ (8009698 <TIM_Base_SetConfig+0x140>)
 800963c:	4293      	cmp	r3, r2
 800963e:	d007      	beq.n	8009650 <TIM_Base_SetConfig+0xf8>
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	4a16      	ldr	r2, [pc, #88]	@ (800969c <TIM_Base_SetConfig+0x144>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d003      	beq.n	8009650 <TIM_Base_SetConfig+0xf8>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	4a15      	ldr	r2, [pc, #84]	@ (80096a0 <TIM_Base_SetConfig+0x148>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d103      	bne.n	8009658 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009650:	683b      	ldr	r3, [r7, #0]
 8009652:	691a      	ldr	r2, [r3, #16]
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2201      	movs	r2, #1
 800965c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	691b      	ldr	r3, [r3, #16]
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	2b01      	cmp	r3, #1
 8009668:	d105      	bne.n	8009676 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	691b      	ldr	r3, [r3, #16]
 800966e:	f023 0201 	bic.w	r2, r3, #1
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	611a      	str	r2, [r3, #16]
  }
}
 8009676:	bf00      	nop
 8009678:	3714      	adds	r7, #20
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr
 8009682:	bf00      	nop
 8009684:	40010000 	.word	0x40010000
 8009688:	40000400 	.word	0x40000400
 800968c:	40000800 	.word	0x40000800
 8009690:	40000c00 	.word	0x40000c00
 8009694:	40010400 	.word	0x40010400
 8009698:	40014000 	.word	0x40014000
 800969c:	40014400 	.word	0x40014400
 80096a0:	40014800 	.word	0x40014800

080096a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80096a4:	b480      	push	{r7}
 80096a6:	b087      	sub	sp, #28
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6a1b      	ldr	r3, [r3, #32]
 80096b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6a1b      	ldr	r3, [r3, #32]
 80096b8:	f023 0201 	bic.w	r2, r3, #1
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	685b      	ldr	r3, [r3, #4]
 80096c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	699b      	ldr	r3, [r3, #24]
 80096ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80096cc:	68fa      	ldr	r2, [r7, #12]
 80096ce:	4b37      	ldr	r3, [pc, #220]	@ (80097ac <TIM_OC1_SetConfig+0x108>)
 80096d0:	4013      	ands	r3, r2
 80096d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	f023 0303 	bic.w	r3, r3, #3
 80096da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	68fa      	ldr	r2, [r7, #12]
 80096e2:	4313      	orrs	r3, r2
 80096e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	f023 0302 	bic.w	r3, r3, #2
 80096ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	697a      	ldr	r2, [r7, #20]
 80096f4:	4313      	orrs	r3, r2
 80096f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4a2d      	ldr	r2, [pc, #180]	@ (80097b0 <TIM_OC1_SetConfig+0x10c>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d00f      	beq.n	8009720 <TIM_OC1_SetConfig+0x7c>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	4a2c      	ldr	r2, [pc, #176]	@ (80097b4 <TIM_OC1_SetConfig+0x110>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d00b      	beq.n	8009720 <TIM_OC1_SetConfig+0x7c>
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	4a2b      	ldr	r2, [pc, #172]	@ (80097b8 <TIM_OC1_SetConfig+0x114>)
 800970c:	4293      	cmp	r3, r2
 800970e:	d007      	beq.n	8009720 <TIM_OC1_SetConfig+0x7c>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	4a2a      	ldr	r2, [pc, #168]	@ (80097bc <TIM_OC1_SetConfig+0x118>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d003      	beq.n	8009720 <TIM_OC1_SetConfig+0x7c>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	4a29      	ldr	r2, [pc, #164]	@ (80097c0 <TIM_OC1_SetConfig+0x11c>)
 800971c:	4293      	cmp	r3, r2
 800971e:	d10c      	bne.n	800973a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	f023 0308 	bic.w	r3, r3, #8
 8009726:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	697a      	ldr	r2, [r7, #20]
 800972e:	4313      	orrs	r3, r2
 8009730:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009732:	697b      	ldr	r3, [r7, #20]
 8009734:	f023 0304 	bic.w	r3, r3, #4
 8009738:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4a1c      	ldr	r2, [pc, #112]	@ (80097b0 <TIM_OC1_SetConfig+0x10c>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d00f      	beq.n	8009762 <TIM_OC1_SetConfig+0xbe>
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	4a1b      	ldr	r2, [pc, #108]	@ (80097b4 <TIM_OC1_SetConfig+0x110>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d00b      	beq.n	8009762 <TIM_OC1_SetConfig+0xbe>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a1a      	ldr	r2, [pc, #104]	@ (80097b8 <TIM_OC1_SetConfig+0x114>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d007      	beq.n	8009762 <TIM_OC1_SetConfig+0xbe>
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a19      	ldr	r2, [pc, #100]	@ (80097bc <TIM_OC1_SetConfig+0x118>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d003      	beq.n	8009762 <TIM_OC1_SetConfig+0xbe>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4a18      	ldr	r2, [pc, #96]	@ (80097c0 <TIM_OC1_SetConfig+0x11c>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d111      	bne.n	8009786 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009768:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009770:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009772:	683b      	ldr	r3, [r7, #0]
 8009774:	695b      	ldr	r3, [r3, #20]
 8009776:	693a      	ldr	r2, [r7, #16]
 8009778:	4313      	orrs	r3, r2
 800977a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	699b      	ldr	r3, [r3, #24]
 8009780:	693a      	ldr	r2, [r7, #16]
 8009782:	4313      	orrs	r3, r2
 8009784:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	693a      	ldr	r2, [r7, #16]
 800978a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	68fa      	ldr	r2, [r7, #12]
 8009790:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	685a      	ldr	r2, [r3, #4]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	697a      	ldr	r2, [r7, #20]
 800979e:	621a      	str	r2, [r3, #32]
}
 80097a0:	bf00      	nop
 80097a2:	371c      	adds	r7, #28
 80097a4:	46bd      	mov	sp, r7
 80097a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097aa:	4770      	bx	lr
 80097ac:	fffeff8f 	.word	0xfffeff8f
 80097b0:	40010000 	.word	0x40010000
 80097b4:	40010400 	.word	0x40010400
 80097b8:	40014000 	.word	0x40014000
 80097bc:	40014400 	.word	0x40014400
 80097c0:	40014800 	.word	0x40014800

080097c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b087      	sub	sp, #28
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
 80097cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	6a1b      	ldr	r3, [r3, #32]
 80097d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6a1b      	ldr	r3, [r3, #32]
 80097d8:	f023 0210 	bic.w	r2, r3, #16
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	699b      	ldr	r3, [r3, #24]
 80097ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	4b34      	ldr	r3, [pc, #208]	@ (80098c0 <TIM_OC2_SetConfig+0xfc>)
 80097f0:	4013      	ands	r3, r2
 80097f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	021b      	lsls	r3, r3, #8
 8009802:	68fa      	ldr	r2, [r7, #12]
 8009804:	4313      	orrs	r3, r2
 8009806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	f023 0320 	bic.w	r3, r3, #32
 800980e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	011b      	lsls	r3, r3, #4
 8009816:	697a      	ldr	r2, [r7, #20]
 8009818:	4313      	orrs	r3, r2
 800981a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	4a29      	ldr	r2, [pc, #164]	@ (80098c4 <TIM_OC2_SetConfig+0x100>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d003      	beq.n	800982c <TIM_OC2_SetConfig+0x68>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	4a28      	ldr	r2, [pc, #160]	@ (80098c8 <TIM_OC2_SetConfig+0x104>)
 8009828:	4293      	cmp	r3, r2
 800982a:	d10d      	bne.n	8009848 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009832:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	68db      	ldr	r3, [r3, #12]
 8009838:	011b      	lsls	r3, r3, #4
 800983a:	697a      	ldr	r2, [r7, #20]
 800983c:	4313      	orrs	r3, r2
 800983e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009846:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a1e      	ldr	r2, [pc, #120]	@ (80098c4 <TIM_OC2_SetConfig+0x100>)
 800984c:	4293      	cmp	r3, r2
 800984e:	d00f      	beq.n	8009870 <TIM_OC2_SetConfig+0xac>
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	4a1d      	ldr	r2, [pc, #116]	@ (80098c8 <TIM_OC2_SetConfig+0x104>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d00b      	beq.n	8009870 <TIM_OC2_SetConfig+0xac>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a1c      	ldr	r2, [pc, #112]	@ (80098cc <TIM_OC2_SetConfig+0x108>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d007      	beq.n	8009870 <TIM_OC2_SetConfig+0xac>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	4a1b      	ldr	r2, [pc, #108]	@ (80098d0 <TIM_OC2_SetConfig+0x10c>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d003      	beq.n	8009870 <TIM_OC2_SetConfig+0xac>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4a1a      	ldr	r2, [pc, #104]	@ (80098d4 <TIM_OC2_SetConfig+0x110>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d113      	bne.n	8009898 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009876:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800987e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	695b      	ldr	r3, [r3, #20]
 8009884:	009b      	lsls	r3, r3, #2
 8009886:	693a      	ldr	r2, [r7, #16]
 8009888:	4313      	orrs	r3, r2
 800988a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	699b      	ldr	r3, [r3, #24]
 8009890:	009b      	lsls	r3, r3, #2
 8009892:	693a      	ldr	r2, [r7, #16]
 8009894:	4313      	orrs	r3, r2
 8009896:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	693a      	ldr	r2, [r7, #16]
 800989c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	68fa      	ldr	r2, [r7, #12]
 80098a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	685a      	ldr	r2, [r3, #4]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	697a      	ldr	r2, [r7, #20]
 80098b0:	621a      	str	r2, [r3, #32]
}
 80098b2:	bf00      	nop
 80098b4:	371c      	adds	r7, #28
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr
 80098be:	bf00      	nop
 80098c0:	feff8fff 	.word	0xfeff8fff
 80098c4:	40010000 	.word	0x40010000
 80098c8:	40010400 	.word	0x40010400
 80098cc:	40014000 	.word	0x40014000
 80098d0:	40014400 	.word	0x40014400
 80098d4:	40014800 	.word	0x40014800

080098d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80098d8:	b480      	push	{r7}
 80098da:	b087      	sub	sp, #28
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
 80098e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6a1b      	ldr	r3, [r3, #32]
 80098e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6a1b      	ldr	r3, [r3, #32]
 80098ec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	69db      	ldr	r3, [r3, #28]
 80098fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009900:	68fa      	ldr	r2, [r7, #12]
 8009902:	4b33      	ldr	r3, [pc, #204]	@ (80099d0 <TIM_OC3_SetConfig+0xf8>)
 8009904:	4013      	ands	r3, r2
 8009906:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f023 0303 	bic.w	r3, r3, #3
 800990e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	4313      	orrs	r3, r2
 8009918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009920:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009922:	683b      	ldr	r3, [r7, #0]
 8009924:	689b      	ldr	r3, [r3, #8]
 8009926:	021b      	lsls	r3, r3, #8
 8009928:	697a      	ldr	r2, [r7, #20]
 800992a:	4313      	orrs	r3, r2
 800992c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	4a28      	ldr	r2, [pc, #160]	@ (80099d4 <TIM_OC3_SetConfig+0xfc>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d003      	beq.n	800993e <TIM_OC3_SetConfig+0x66>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	4a27      	ldr	r2, [pc, #156]	@ (80099d8 <TIM_OC3_SetConfig+0x100>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d10d      	bne.n	800995a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009944:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	68db      	ldr	r3, [r3, #12]
 800994a:	021b      	lsls	r3, r3, #8
 800994c:	697a      	ldr	r2, [r7, #20]
 800994e:	4313      	orrs	r3, r2
 8009950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	4a1d      	ldr	r2, [pc, #116]	@ (80099d4 <TIM_OC3_SetConfig+0xfc>)
 800995e:	4293      	cmp	r3, r2
 8009960:	d00f      	beq.n	8009982 <TIM_OC3_SetConfig+0xaa>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4a1c      	ldr	r2, [pc, #112]	@ (80099d8 <TIM_OC3_SetConfig+0x100>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d00b      	beq.n	8009982 <TIM_OC3_SetConfig+0xaa>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	4a1b      	ldr	r2, [pc, #108]	@ (80099dc <TIM_OC3_SetConfig+0x104>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d007      	beq.n	8009982 <TIM_OC3_SetConfig+0xaa>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4a1a      	ldr	r2, [pc, #104]	@ (80099e0 <TIM_OC3_SetConfig+0x108>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d003      	beq.n	8009982 <TIM_OC3_SetConfig+0xaa>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a19      	ldr	r2, [pc, #100]	@ (80099e4 <TIM_OC3_SetConfig+0x10c>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d113      	bne.n	80099aa <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009988:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800998a:	693b      	ldr	r3, [r7, #16]
 800998c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009990:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009992:	683b      	ldr	r3, [r7, #0]
 8009994:	695b      	ldr	r3, [r3, #20]
 8009996:	011b      	lsls	r3, r3, #4
 8009998:	693a      	ldr	r2, [r7, #16]
 800999a:	4313      	orrs	r3, r2
 800999c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	699b      	ldr	r3, [r3, #24]
 80099a2:	011b      	lsls	r3, r3, #4
 80099a4:	693a      	ldr	r2, [r7, #16]
 80099a6:	4313      	orrs	r3, r2
 80099a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	693a      	ldr	r2, [r7, #16]
 80099ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	68fa      	ldr	r2, [r7, #12]
 80099b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	685a      	ldr	r2, [r3, #4]
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	697a      	ldr	r2, [r7, #20]
 80099c2:	621a      	str	r2, [r3, #32]
}
 80099c4:	bf00      	nop
 80099c6:	371c      	adds	r7, #28
 80099c8:	46bd      	mov	sp, r7
 80099ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ce:	4770      	bx	lr
 80099d0:	fffeff8f 	.word	0xfffeff8f
 80099d4:	40010000 	.word	0x40010000
 80099d8:	40010400 	.word	0x40010400
 80099dc:	40014000 	.word	0x40014000
 80099e0:	40014400 	.word	0x40014400
 80099e4:	40014800 	.word	0x40014800

080099e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80099e8:	b480      	push	{r7}
 80099ea:	b087      	sub	sp, #28
 80099ec:	af00      	add	r7, sp, #0
 80099ee:	6078      	str	r0, [r7, #4]
 80099f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	6a1b      	ldr	r3, [r3, #32]
 80099f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	6a1b      	ldr	r3, [r3, #32]
 80099fc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	69db      	ldr	r3, [r3, #28]
 8009a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a10:	68fa      	ldr	r2, [r7, #12]
 8009a12:	4b24      	ldr	r3, [pc, #144]	@ (8009aa4 <TIM_OC4_SetConfig+0xbc>)
 8009a14:	4013      	ands	r3, r2
 8009a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009a1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	021b      	lsls	r3, r3, #8
 8009a26:	68fa      	ldr	r2, [r7, #12]
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009a32:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a34:	683b      	ldr	r3, [r7, #0]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	031b      	lsls	r3, r3, #12
 8009a3a:	693a      	ldr	r2, [r7, #16]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	4a19      	ldr	r2, [pc, #100]	@ (8009aa8 <TIM_OC4_SetConfig+0xc0>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d00f      	beq.n	8009a68 <TIM_OC4_SetConfig+0x80>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	4a18      	ldr	r2, [pc, #96]	@ (8009aac <TIM_OC4_SetConfig+0xc4>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d00b      	beq.n	8009a68 <TIM_OC4_SetConfig+0x80>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4a17      	ldr	r2, [pc, #92]	@ (8009ab0 <TIM_OC4_SetConfig+0xc8>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d007      	beq.n	8009a68 <TIM_OC4_SetConfig+0x80>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4a16      	ldr	r2, [pc, #88]	@ (8009ab4 <TIM_OC4_SetConfig+0xcc>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d003      	beq.n	8009a68 <TIM_OC4_SetConfig+0x80>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	4a15      	ldr	r2, [pc, #84]	@ (8009ab8 <TIM_OC4_SetConfig+0xd0>)
 8009a64:	4293      	cmp	r3, r2
 8009a66:	d109      	bne.n	8009a7c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a68:	697b      	ldr	r3, [r7, #20]
 8009a6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009a6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	695b      	ldr	r3, [r3, #20]
 8009a74:	019b      	lsls	r3, r3, #6
 8009a76:	697a      	ldr	r2, [r7, #20]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	697a      	ldr	r2, [r7, #20]
 8009a80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	68fa      	ldr	r2, [r7, #12]
 8009a86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	685a      	ldr	r2, [r3, #4]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	693a      	ldr	r2, [r7, #16]
 8009a94:	621a      	str	r2, [r3, #32]
}
 8009a96:	bf00      	nop
 8009a98:	371c      	adds	r7, #28
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	feff8fff 	.word	0xfeff8fff
 8009aa8:	40010000 	.word	0x40010000
 8009aac:	40010400 	.word	0x40010400
 8009ab0:	40014000 	.word	0x40014000
 8009ab4:	40014400 	.word	0x40014400
 8009ab8:	40014800 	.word	0x40014800

08009abc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b087      	sub	sp, #28
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
 8009ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a1b      	ldr	r3, [r3, #32]
 8009aca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6a1b      	ldr	r3, [r3, #32]
 8009ad0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009ae4:	68fa      	ldr	r2, [r7, #12]
 8009ae6:	4b21      	ldr	r3, [pc, #132]	@ (8009b6c <TIM_OC5_SetConfig+0xb0>)
 8009ae8:	4013      	ands	r3, r2
 8009aea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	68fa      	ldr	r2, [r7, #12]
 8009af2:	4313      	orrs	r3, r2
 8009af4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009af6:	693b      	ldr	r3, [r7, #16]
 8009af8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009afc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	689b      	ldr	r3, [r3, #8]
 8009b02:	041b      	lsls	r3, r3, #16
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	4313      	orrs	r3, r2
 8009b08:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	4a18      	ldr	r2, [pc, #96]	@ (8009b70 <TIM_OC5_SetConfig+0xb4>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d00f      	beq.n	8009b32 <TIM_OC5_SetConfig+0x76>
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	4a17      	ldr	r2, [pc, #92]	@ (8009b74 <TIM_OC5_SetConfig+0xb8>)
 8009b16:	4293      	cmp	r3, r2
 8009b18:	d00b      	beq.n	8009b32 <TIM_OC5_SetConfig+0x76>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	4a16      	ldr	r2, [pc, #88]	@ (8009b78 <TIM_OC5_SetConfig+0xbc>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d007      	beq.n	8009b32 <TIM_OC5_SetConfig+0x76>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4a15      	ldr	r2, [pc, #84]	@ (8009b7c <TIM_OC5_SetConfig+0xc0>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d003      	beq.n	8009b32 <TIM_OC5_SetConfig+0x76>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4a14      	ldr	r2, [pc, #80]	@ (8009b80 <TIM_OC5_SetConfig+0xc4>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d109      	bne.n	8009b46 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	695b      	ldr	r3, [r3, #20]
 8009b3e:	021b      	lsls	r3, r3, #8
 8009b40:	697a      	ldr	r2, [r7, #20]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	697a      	ldr	r2, [r7, #20]
 8009b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	685a      	ldr	r2, [r3, #4]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	693a      	ldr	r2, [r7, #16]
 8009b5e:	621a      	str	r2, [r3, #32]
}
 8009b60:	bf00      	nop
 8009b62:	371c      	adds	r7, #28
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr
 8009b6c:	fffeff8f 	.word	0xfffeff8f
 8009b70:	40010000 	.word	0x40010000
 8009b74:	40010400 	.word	0x40010400
 8009b78:	40014000 	.word	0x40014000
 8009b7c:	40014400 	.word	0x40014400
 8009b80:	40014800 	.word	0x40014800

08009b84 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b087      	sub	sp, #28
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a1b      	ldr	r3, [r3, #32]
 8009b92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	6a1b      	ldr	r3, [r3, #32]
 8009b98:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	4b22      	ldr	r3, [pc, #136]	@ (8009c38 <TIM_OC6_SetConfig+0xb4>)
 8009bb0:	4013      	ands	r3, r2
 8009bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	021b      	lsls	r3, r3, #8
 8009bba:	68fa      	ldr	r2, [r7, #12]
 8009bbc:	4313      	orrs	r3, r2
 8009bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009bc6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	051b      	lsls	r3, r3, #20
 8009bce:	693a      	ldr	r2, [r7, #16]
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	4a19      	ldr	r2, [pc, #100]	@ (8009c3c <TIM_OC6_SetConfig+0xb8>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d00f      	beq.n	8009bfc <TIM_OC6_SetConfig+0x78>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	4a18      	ldr	r2, [pc, #96]	@ (8009c40 <TIM_OC6_SetConfig+0xbc>)
 8009be0:	4293      	cmp	r3, r2
 8009be2:	d00b      	beq.n	8009bfc <TIM_OC6_SetConfig+0x78>
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	4a17      	ldr	r2, [pc, #92]	@ (8009c44 <TIM_OC6_SetConfig+0xc0>)
 8009be8:	4293      	cmp	r3, r2
 8009bea:	d007      	beq.n	8009bfc <TIM_OC6_SetConfig+0x78>
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	4a16      	ldr	r2, [pc, #88]	@ (8009c48 <TIM_OC6_SetConfig+0xc4>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d003      	beq.n	8009bfc <TIM_OC6_SetConfig+0x78>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4a15      	ldr	r2, [pc, #84]	@ (8009c4c <TIM_OC6_SetConfig+0xc8>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d109      	bne.n	8009c10 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009bfc:	697b      	ldr	r3, [r7, #20]
 8009bfe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009c02:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009c04:	683b      	ldr	r3, [r7, #0]
 8009c06:	695b      	ldr	r3, [r3, #20]
 8009c08:	029b      	lsls	r3, r3, #10
 8009c0a:	697a      	ldr	r2, [r7, #20]
 8009c0c:	4313      	orrs	r3, r2
 8009c0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	697a      	ldr	r2, [r7, #20]
 8009c14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	68fa      	ldr	r2, [r7, #12]
 8009c1a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009c1c:	683b      	ldr	r3, [r7, #0]
 8009c1e:	685a      	ldr	r2, [r3, #4]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	693a      	ldr	r2, [r7, #16]
 8009c28:	621a      	str	r2, [r3, #32]
}
 8009c2a:	bf00      	nop
 8009c2c:	371c      	adds	r7, #28
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
 8009c36:	bf00      	nop
 8009c38:	feff8fff 	.word	0xfeff8fff
 8009c3c:	40010000 	.word	0x40010000
 8009c40:	40010400 	.word	0x40010400
 8009c44:	40014000 	.word	0x40014000
 8009c48:	40014400 	.word	0x40014400
 8009c4c:	40014800 	.word	0x40014800

08009c50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b087      	sub	sp, #28
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	60f8      	str	r0, [r7, #12]
 8009c58:	60b9      	str	r1, [r7, #8]
 8009c5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	6a1b      	ldr	r3, [r3, #32]
 8009c60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	6a1b      	ldr	r3, [r3, #32]
 8009c66:	f023 0201 	bic.w	r2, r3, #1
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	699b      	ldr	r3, [r3, #24]
 8009c72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009c7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	011b      	lsls	r3, r3, #4
 8009c80:	693a      	ldr	r2, [r7, #16]
 8009c82:	4313      	orrs	r3, r2
 8009c84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	f023 030a 	bic.w	r3, r3, #10
 8009c8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c8e:	697a      	ldr	r2, [r7, #20]
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	693a      	ldr	r2, [r7, #16]
 8009c9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	697a      	ldr	r2, [r7, #20]
 8009ca0:	621a      	str	r2, [r3, #32]
}
 8009ca2:	bf00      	nop
 8009ca4:	371c      	adds	r7, #28
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cac:	4770      	bx	lr

08009cae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009cae:	b480      	push	{r7}
 8009cb0:	b087      	sub	sp, #28
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	60f8      	str	r0, [r7, #12]
 8009cb6:	60b9      	str	r1, [r7, #8]
 8009cb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6a1b      	ldr	r3, [r3, #32]
 8009cbe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	6a1b      	ldr	r3, [r3, #32]
 8009cc4:	f023 0210 	bic.w	r2, r3, #16
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	699b      	ldr	r3, [r3, #24]
 8009cd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009cd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	031b      	lsls	r3, r3, #12
 8009cde:	693a      	ldr	r2, [r7, #16]
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009ce4:	697b      	ldr	r3, [r7, #20]
 8009ce6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009cea:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	011b      	lsls	r3, r3, #4
 8009cf0:	697a      	ldr	r2, [r7, #20]
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	693a      	ldr	r2, [r7, #16]
 8009cfa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	697a      	ldr	r2, [r7, #20]
 8009d00:	621a      	str	r2, [r3, #32]
}
 8009d02:	bf00      	nop
 8009d04:	371c      	adds	r7, #28
 8009d06:	46bd      	mov	sp, r7
 8009d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0c:	4770      	bx	lr
	...

08009d10 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009d10:	b480      	push	{r7}
 8009d12:	b085      	sub	sp, #20
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009d20:	68fa      	ldr	r2, [r7, #12]
 8009d22:	4b09      	ldr	r3, [pc, #36]	@ (8009d48 <TIM_ITRx_SetConfig+0x38>)
 8009d24:	4013      	ands	r3, r2
 8009d26:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009d28:	683a      	ldr	r2, [r7, #0]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	f043 0307 	orr.w	r3, r3, #7
 8009d32:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	68fa      	ldr	r2, [r7, #12]
 8009d38:	609a      	str	r2, [r3, #8]
}
 8009d3a:	bf00      	nop
 8009d3c:	3714      	adds	r7, #20
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d44:	4770      	bx	lr
 8009d46:	bf00      	nop
 8009d48:	ffcfff8f 	.word	0xffcfff8f

08009d4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d4c:	b480      	push	{r7}
 8009d4e:	b087      	sub	sp, #28
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	60b9      	str	r1, [r7, #8]
 8009d56:	607a      	str	r2, [r7, #4]
 8009d58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d60:	697b      	ldr	r3, [r7, #20]
 8009d62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009d66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	021a      	lsls	r2, r3, #8
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	431a      	orrs	r2, r3
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	4313      	orrs	r3, r2
 8009d74:	697a      	ldr	r2, [r7, #20]
 8009d76:	4313      	orrs	r3, r2
 8009d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	697a      	ldr	r2, [r7, #20]
 8009d7e:	609a      	str	r2, [r3, #8]
}
 8009d80:	bf00      	nop
 8009d82:	371c      	adds	r7, #28
 8009d84:	46bd      	mov	sp, r7
 8009d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8a:	4770      	bx	lr

08009d8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b087      	sub	sp, #28
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	f003 031f 	and.w	r3, r3, #31
 8009d9e:	2201      	movs	r2, #1
 8009da0:	fa02 f303 	lsl.w	r3, r2, r3
 8009da4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	6a1a      	ldr	r2, [r3, #32]
 8009daa:	697b      	ldr	r3, [r7, #20]
 8009dac:	43db      	mvns	r3, r3
 8009dae:	401a      	ands	r2, r3
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	6a1a      	ldr	r2, [r3, #32]
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	f003 031f 	and.w	r3, r3, #31
 8009dbe:	6879      	ldr	r1, [r7, #4]
 8009dc0:	fa01 f303 	lsl.w	r3, r1, r3
 8009dc4:	431a      	orrs	r2, r3
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	621a      	str	r2, [r3, #32]
}
 8009dca:	bf00      	nop
 8009dcc:	371c      	adds	r7, #28
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr
	...

08009dd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b085      	sub	sp, #20
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
 8009de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009de8:	2b01      	cmp	r3, #1
 8009dea:	d101      	bne.n	8009df0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009dec:	2302      	movs	r3, #2
 8009dee:	e06d      	b.n	8009ecc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2201      	movs	r2, #1
 8009df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2202      	movs	r2, #2
 8009dfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	689b      	ldr	r3, [r3, #8]
 8009e0e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a30      	ldr	r2, [pc, #192]	@ (8009ed8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d004      	beq.n	8009e24 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a2f      	ldr	r2, [pc, #188]	@ (8009edc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d108      	bne.n	8009e36 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009e2a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	68fa      	ldr	r2, [r7, #12]
 8009e32:	4313      	orrs	r3, r2
 8009e34:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009e3c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	4313      	orrs	r3, r2
 8009e46:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	68fa      	ldr	r2, [r7, #12]
 8009e4e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a20      	ldr	r2, [pc, #128]	@ (8009ed8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d022      	beq.n	8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009e62:	d01d      	beq.n	8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a1d      	ldr	r2, [pc, #116]	@ (8009ee0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d018      	beq.n	8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a1c      	ldr	r2, [pc, #112]	@ (8009ee4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d013      	beq.n	8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	4a1a      	ldr	r2, [pc, #104]	@ (8009ee8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009e7e:	4293      	cmp	r3, r2
 8009e80:	d00e      	beq.n	8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a15      	ldr	r2, [pc, #84]	@ (8009edc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d009      	beq.n	8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	4a16      	ldr	r2, [pc, #88]	@ (8009eec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d004      	beq.n	8009ea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a15      	ldr	r2, [pc, #84]	@ (8009ef0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d10c      	bne.n	8009eba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009ea6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	68ba      	ldr	r2, [r7, #8]
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	68ba      	ldr	r2, [r7, #8]
 8009eb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2201      	movs	r2, #1
 8009ebe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009eca:	2300      	movs	r3, #0
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	3714      	adds	r7, #20
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr
 8009ed8:	40010000 	.word	0x40010000
 8009edc:	40010400 	.word	0x40010400
 8009ee0:	40000400 	.word	0x40000400
 8009ee4:	40000800 	.word	0x40000800
 8009ee8:	40000c00 	.word	0x40000c00
 8009eec:	40001800 	.word	0x40001800
 8009ef0:	40014000 	.word	0x40014000

08009ef4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b083      	sub	sp, #12
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009efc:	bf00      	nop
 8009efe:	370c      	adds	r7, #12
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr

08009f08 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f10:	bf00      	nop
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009f24:	bf00      	nop
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b082      	sub	sp, #8
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d101      	bne.n	8009f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e042      	b.n	8009fc8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d106      	bne.n	8009f5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 f83b 	bl	8009fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	2224      	movs	r2, #36	@ 0x24
 8009f5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f022 0201 	bic.w	r2, r2, #1
 8009f70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d002      	beq.n	8009f80 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8009f7a:	6878      	ldr	r0, [r7, #4]
 8009f7c:	f000 fd9a 	bl	800aab4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f80:	6878      	ldr	r0, [r7, #4]
 8009f82:	f000 f82f 	bl	8009fe4 <UART_SetConfig>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d101      	bne.n	8009f90 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8009f8c:	2301      	movs	r3, #1
 8009f8e:	e01b      	b.n	8009fc8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	685a      	ldr	r2, [r3, #4]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009f9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	689a      	ldr	r2, [r3, #8]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009fae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	681a      	ldr	r2, [r3, #0]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f042 0201 	orr.w	r2, r2, #1
 8009fbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	f000 fe19 	bl	800abf8 <UART_CheckIdleState>
 8009fc6:	4603      	mov	r3, r0
}
 8009fc8:	4618      	mov	r0, r3
 8009fca:	3708      	adds	r7, #8
 8009fcc:	46bd      	mov	sp, r7
 8009fce:	bd80      	pop	{r7, pc}

08009fd0 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8009fd0:	b480      	push	{r7}
 8009fd2:	b083      	sub	sp, #12
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8009fd8:	bf00      	nop
 8009fda:	370c      	adds	r7, #12
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr

08009fe4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fe4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009fe8:	b092      	sub	sp, #72	@ 0x48
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009fee:	2300      	movs	r3, #0
 8009ff0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ff4:	697b      	ldr	r3, [r7, #20]
 8009ff6:	689a      	ldr	r2, [r3, #8]
 8009ff8:	697b      	ldr	r3, [r7, #20]
 8009ffa:	691b      	ldr	r3, [r3, #16]
 8009ffc:	431a      	orrs	r2, r3
 8009ffe:	697b      	ldr	r3, [r7, #20]
 800a000:	695b      	ldr	r3, [r3, #20]
 800a002:	431a      	orrs	r2, r3
 800a004:	697b      	ldr	r3, [r7, #20]
 800a006:	69db      	ldr	r3, [r3, #28]
 800a008:	4313      	orrs	r3, r2
 800a00a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	681a      	ldr	r2, [r3, #0]
 800a012:	4bbe      	ldr	r3, [pc, #760]	@ (800a30c <UART_SetConfig+0x328>)
 800a014:	4013      	ands	r3, r2
 800a016:	697a      	ldr	r2, [r7, #20]
 800a018:	6812      	ldr	r2, [r2, #0]
 800a01a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a01c:	430b      	orrs	r3, r1
 800a01e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	685b      	ldr	r3, [r3, #4]
 800a026:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a02a:	697b      	ldr	r3, [r7, #20]
 800a02c:	68da      	ldr	r2, [r3, #12]
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	430a      	orrs	r2, r1
 800a034:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	699b      	ldr	r3, [r3, #24]
 800a03a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4ab3      	ldr	r2, [pc, #716]	@ (800a310 <UART_SetConfig+0x32c>)
 800a042:	4293      	cmp	r3, r2
 800a044:	d004      	beq.n	800a050 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a046:	697b      	ldr	r3, [r7, #20]
 800a048:	6a1b      	ldr	r3, [r3, #32]
 800a04a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a04c:	4313      	orrs	r3, r2
 800a04e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	689a      	ldr	r2, [r3, #8]
 800a056:	4baf      	ldr	r3, [pc, #700]	@ (800a314 <UART_SetConfig+0x330>)
 800a058:	4013      	ands	r3, r2
 800a05a:	697a      	ldr	r2, [r7, #20]
 800a05c:	6812      	ldr	r2, [r2, #0]
 800a05e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a060:	430b      	orrs	r3, r1
 800a062:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a064:	697b      	ldr	r3, [r7, #20]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a06a:	f023 010f 	bic.w	r1, r3, #15
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	430a      	orrs	r2, r1
 800a078:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4aa6      	ldr	r2, [pc, #664]	@ (800a318 <UART_SetConfig+0x334>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d177      	bne.n	800a174 <UART_SetConfig+0x190>
 800a084:	4ba5      	ldr	r3, [pc, #660]	@ (800a31c <UART_SetConfig+0x338>)
 800a086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a088:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a08c:	2b28      	cmp	r3, #40	@ 0x28
 800a08e:	d86d      	bhi.n	800a16c <UART_SetConfig+0x188>
 800a090:	a201      	add	r2, pc, #4	@ (adr r2, 800a098 <UART_SetConfig+0xb4>)
 800a092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a096:	bf00      	nop
 800a098:	0800a13d 	.word	0x0800a13d
 800a09c:	0800a16d 	.word	0x0800a16d
 800a0a0:	0800a16d 	.word	0x0800a16d
 800a0a4:	0800a16d 	.word	0x0800a16d
 800a0a8:	0800a16d 	.word	0x0800a16d
 800a0ac:	0800a16d 	.word	0x0800a16d
 800a0b0:	0800a16d 	.word	0x0800a16d
 800a0b4:	0800a16d 	.word	0x0800a16d
 800a0b8:	0800a145 	.word	0x0800a145
 800a0bc:	0800a16d 	.word	0x0800a16d
 800a0c0:	0800a16d 	.word	0x0800a16d
 800a0c4:	0800a16d 	.word	0x0800a16d
 800a0c8:	0800a16d 	.word	0x0800a16d
 800a0cc:	0800a16d 	.word	0x0800a16d
 800a0d0:	0800a16d 	.word	0x0800a16d
 800a0d4:	0800a16d 	.word	0x0800a16d
 800a0d8:	0800a14d 	.word	0x0800a14d
 800a0dc:	0800a16d 	.word	0x0800a16d
 800a0e0:	0800a16d 	.word	0x0800a16d
 800a0e4:	0800a16d 	.word	0x0800a16d
 800a0e8:	0800a16d 	.word	0x0800a16d
 800a0ec:	0800a16d 	.word	0x0800a16d
 800a0f0:	0800a16d 	.word	0x0800a16d
 800a0f4:	0800a16d 	.word	0x0800a16d
 800a0f8:	0800a155 	.word	0x0800a155
 800a0fc:	0800a16d 	.word	0x0800a16d
 800a100:	0800a16d 	.word	0x0800a16d
 800a104:	0800a16d 	.word	0x0800a16d
 800a108:	0800a16d 	.word	0x0800a16d
 800a10c:	0800a16d 	.word	0x0800a16d
 800a110:	0800a16d 	.word	0x0800a16d
 800a114:	0800a16d 	.word	0x0800a16d
 800a118:	0800a15d 	.word	0x0800a15d
 800a11c:	0800a16d 	.word	0x0800a16d
 800a120:	0800a16d 	.word	0x0800a16d
 800a124:	0800a16d 	.word	0x0800a16d
 800a128:	0800a16d 	.word	0x0800a16d
 800a12c:	0800a16d 	.word	0x0800a16d
 800a130:	0800a16d 	.word	0x0800a16d
 800a134:	0800a16d 	.word	0x0800a16d
 800a138:	0800a165 	.word	0x0800a165
 800a13c:	2301      	movs	r3, #1
 800a13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a142:	e222      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a144:	2304      	movs	r3, #4
 800a146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a14a:	e21e      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a14c:	2308      	movs	r3, #8
 800a14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a152:	e21a      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a154:	2310      	movs	r3, #16
 800a156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a15a:	e216      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a15c:	2320      	movs	r3, #32
 800a15e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a162:	e212      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a164:	2340      	movs	r3, #64	@ 0x40
 800a166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a16a:	e20e      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a16c:	2380      	movs	r3, #128	@ 0x80
 800a16e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a172:	e20a      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a174:	697b      	ldr	r3, [r7, #20]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	4a69      	ldr	r2, [pc, #420]	@ (800a320 <UART_SetConfig+0x33c>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d130      	bne.n	800a1e0 <UART_SetConfig+0x1fc>
 800a17e:	4b67      	ldr	r3, [pc, #412]	@ (800a31c <UART_SetConfig+0x338>)
 800a180:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a182:	f003 0307 	and.w	r3, r3, #7
 800a186:	2b05      	cmp	r3, #5
 800a188:	d826      	bhi.n	800a1d8 <UART_SetConfig+0x1f4>
 800a18a:	a201      	add	r2, pc, #4	@ (adr r2, 800a190 <UART_SetConfig+0x1ac>)
 800a18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a190:	0800a1a9 	.word	0x0800a1a9
 800a194:	0800a1b1 	.word	0x0800a1b1
 800a198:	0800a1b9 	.word	0x0800a1b9
 800a19c:	0800a1c1 	.word	0x0800a1c1
 800a1a0:	0800a1c9 	.word	0x0800a1c9
 800a1a4:	0800a1d1 	.word	0x0800a1d1
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ae:	e1ec      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a1b0:	2304      	movs	r3, #4
 800a1b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1b6:	e1e8      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a1b8:	2308      	movs	r3, #8
 800a1ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1be:	e1e4      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a1c0:	2310      	movs	r3, #16
 800a1c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1c6:	e1e0      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a1c8:	2320      	movs	r3, #32
 800a1ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1ce:	e1dc      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a1d0:	2340      	movs	r3, #64	@ 0x40
 800a1d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1d6:	e1d8      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a1d8:	2380      	movs	r3, #128	@ 0x80
 800a1da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a1de:	e1d4      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a1e0:	697b      	ldr	r3, [r7, #20]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a4f      	ldr	r2, [pc, #316]	@ (800a324 <UART_SetConfig+0x340>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d130      	bne.n	800a24c <UART_SetConfig+0x268>
 800a1ea:	4b4c      	ldr	r3, [pc, #304]	@ (800a31c <UART_SetConfig+0x338>)
 800a1ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a1ee:	f003 0307 	and.w	r3, r3, #7
 800a1f2:	2b05      	cmp	r3, #5
 800a1f4:	d826      	bhi.n	800a244 <UART_SetConfig+0x260>
 800a1f6:	a201      	add	r2, pc, #4	@ (adr r2, 800a1fc <UART_SetConfig+0x218>)
 800a1f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1fc:	0800a215 	.word	0x0800a215
 800a200:	0800a21d 	.word	0x0800a21d
 800a204:	0800a225 	.word	0x0800a225
 800a208:	0800a22d 	.word	0x0800a22d
 800a20c:	0800a235 	.word	0x0800a235
 800a210:	0800a23d 	.word	0x0800a23d
 800a214:	2300      	movs	r3, #0
 800a216:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a21a:	e1b6      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a21c:	2304      	movs	r3, #4
 800a21e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a222:	e1b2      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a224:	2308      	movs	r3, #8
 800a226:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a22a:	e1ae      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a22c:	2310      	movs	r3, #16
 800a22e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a232:	e1aa      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a234:	2320      	movs	r3, #32
 800a236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a23a:	e1a6      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a23c:	2340      	movs	r3, #64	@ 0x40
 800a23e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a242:	e1a2      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a244:	2380      	movs	r3, #128	@ 0x80
 800a246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a24a:	e19e      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a35      	ldr	r2, [pc, #212]	@ (800a328 <UART_SetConfig+0x344>)
 800a252:	4293      	cmp	r3, r2
 800a254:	d130      	bne.n	800a2b8 <UART_SetConfig+0x2d4>
 800a256:	4b31      	ldr	r3, [pc, #196]	@ (800a31c <UART_SetConfig+0x338>)
 800a258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a25a:	f003 0307 	and.w	r3, r3, #7
 800a25e:	2b05      	cmp	r3, #5
 800a260:	d826      	bhi.n	800a2b0 <UART_SetConfig+0x2cc>
 800a262:	a201      	add	r2, pc, #4	@ (adr r2, 800a268 <UART_SetConfig+0x284>)
 800a264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a268:	0800a281 	.word	0x0800a281
 800a26c:	0800a289 	.word	0x0800a289
 800a270:	0800a291 	.word	0x0800a291
 800a274:	0800a299 	.word	0x0800a299
 800a278:	0800a2a1 	.word	0x0800a2a1
 800a27c:	0800a2a9 	.word	0x0800a2a9
 800a280:	2300      	movs	r3, #0
 800a282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a286:	e180      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a288:	2304      	movs	r3, #4
 800a28a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a28e:	e17c      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a290:	2308      	movs	r3, #8
 800a292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a296:	e178      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a298:	2310      	movs	r3, #16
 800a29a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a29e:	e174      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a2a0:	2320      	movs	r3, #32
 800a2a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2a6:	e170      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a2a8:	2340      	movs	r3, #64	@ 0x40
 800a2aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2ae:	e16c      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a2b0:	2380      	movs	r3, #128	@ 0x80
 800a2b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2b6:	e168      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a1b      	ldr	r2, [pc, #108]	@ (800a32c <UART_SetConfig+0x348>)
 800a2be:	4293      	cmp	r3, r2
 800a2c0:	d142      	bne.n	800a348 <UART_SetConfig+0x364>
 800a2c2:	4b16      	ldr	r3, [pc, #88]	@ (800a31c <UART_SetConfig+0x338>)
 800a2c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a2c6:	f003 0307 	and.w	r3, r3, #7
 800a2ca:	2b05      	cmp	r3, #5
 800a2cc:	d838      	bhi.n	800a340 <UART_SetConfig+0x35c>
 800a2ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a2d4 <UART_SetConfig+0x2f0>)
 800a2d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2d4:	0800a2ed 	.word	0x0800a2ed
 800a2d8:	0800a2f5 	.word	0x0800a2f5
 800a2dc:	0800a2fd 	.word	0x0800a2fd
 800a2e0:	0800a305 	.word	0x0800a305
 800a2e4:	0800a331 	.word	0x0800a331
 800a2e8:	0800a339 	.word	0x0800a339
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2f2:	e14a      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a2f4:	2304      	movs	r3, #4
 800a2f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a2fa:	e146      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a2fc:	2308      	movs	r3, #8
 800a2fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a302:	e142      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a304:	2310      	movs	r3, #16
 800a306:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a30a:	e13e      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a30c:	cfff69f3 	.word	0xcfff69f3
 800a310:	58000c00 	.word	0x58000c00
 800a314:	11fff4ff 	.word	0x11fff4ff
 800a318:	40011000 	.word	0x40011000
 800a31c:	58024400 	.word	0x58024400
 800a320:	40004400 	.word	0x40004400
 800a324:	40004800 	.word	0x40004800
 800a328:	40004c00 	.word	0x40004c00
 800a32c:	40005000 	.word	0x40005000
 800a330:	2320      	movs	r3, #32
 800a332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a336:	e128      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a338:	2340      	movs	r3, #64	@ 0x40
 800a33a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a33e:	e124      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a340:	2380      	movs	r3, #128	@ 0x80
 800a342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a346:	e120      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a348:	697b      	ldr	r3, [r7, #20]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	4acb      	ldr	r2, [pc, #812]	@ (800a67c <UART_SetConfig+0x698>)
 800a34e:	4293      	cmp	r3, r2
 800a350:	d176      	bne.n	800a440 <UART_SetConfig+0x45c>
 800a352:	4bcb      	ldr	r3, [pc, #812]	@ (800a680 <UART_SetConfig+0x69c>)
 800a354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a356:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a35a:	2b28      	cmp	r3, #40	@ 0x28
 800a35c:	d86c      	bhi.n	800a438 <UART_SetConfig+0x454>
 800a35e:	a201      	add	r2, pc, #4	@ (adr r2, 800a364 <UART_SetConfig+0x380>)
 800a360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a364:	0800a409 	.word	0x0800a409
 800a368:	0800a439 	.word	0x0800a439
 800a36c:	0800a439 	.word	0x0800a439
 800a370:	0800a439 	.word	0x0800a439
 800a374:	0800a439 	.word	0x0800a439
 800a378:	0800a439 	.word	0x0800a439
 800a37c:	0800a439 	.word	0x0800a439
 800a380:	0800a439 	.word	0x0800a439
 800a384:	0800a411 	.word	0x0800a411
 800a388:	0800a439 	.word	0x0800a439
 800a38c:	0800a439 	.word	0x0800a439
 800a390:	0800a439 	.word	0x0800a439
 800a394:	0800a439 	.word	0x0800a439
 800a398:	0800a439 	.word	0x0800a439
 800a39c:	0800a439 	.word	0x0800a439
 800a3a0:	0800a439 	.word	0x0800a439
 800a3a4:	0800a419 	.word	0x0800a419
 800a3a8:	0800a439 	.word	0x0800a439
 800a3ac:	0800a439 	.word	0x0800a439
 800a3b0:	0800a439 	.word	0x0800a439
 800a3b4:	0800a439 	.word	0x0800a439
 800a3b8:	0800a439 	.word	0x0800a439
 800a3bc:	0800a439 	.word	0x0800a439
 800a3c0:	0800a439 	.word	0x0800a439
 800a3c4:	0800a421 	.word	0x0800a421
 800a3c8:	0800a439 	.word	0x0800a439
 800a3cc:	0800a439 	.word	0x0800a439
 800a3d0:	0800a439 	.word	0x0800a439
 800a3d4:	0800a439 	.word	0x0800a439
 800a3d8:	0800a439 	.word	0x0800a439
 800a3dc:	0800a439 	.word	0x0800a439
 800a3e0:	0800a439 	.word	0x0800a439
 800a3e4:	0800a429 	.word	0x0800a429
 800a3e8:	0800a439 	.word	0x0800a439
 800a3ec:	0800a439 	.word	0x0800a439
 800a3f0:	0800a439 	.word	0x0800a439
 800a3f4:	0800a439 	.word	0x0800a439
 800a3f8:	0800a439 	.word	0x0800a439
 800a3fc:	0800a439 	.word	0x0800a439
 800a400:	0800a439 	.word	0x0800a439
 800a404:	0800a431 	.word	0x0800a431
 800a408:	2301      	movs	r3, #1
 800a40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a40e:	e0bc      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a410:	2304      	movs	r3, #4
 800a412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a416:	e0b8      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a418:	2308      	movs	r3, #8
 800a41a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a41e:	e0b4      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a420:	2310      	movs	r3, #16
 800a422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a426:	e0b0      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a428:	2320      	movs	r3, #32
 800a42a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a42e:	e0ac      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a430:	2340      	movs	r3, #64	@ 0x40
 800a432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a436:	e0a8      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a438:	2380      	movs	r3, #128	@ 0x80
 800a43a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a43e:	e0a4      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	4a8f      	ldr	r2, [pc, #572]	@ (800a684 <UART_SetConfig+0x6a0>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d130      	bne.n	800a4ac <UART_SetConfig+0x4c8>
 800a44a:	4b8d      	ldr	r3, [pc, #564]	@ (800a680 <UART_SetConfig+0x69c>)
 800a44c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a44e:	f003 0307 	and.w	r3, r3, #7
 800a452:	2b05      	cmp	r3, #5
 800a454:	d826      	bhi.n	800a4a4 <UART_SetConfig+0x4c0>
 800a456:	a201      	add	r2, pc, #4	@ (adr r2, 800a45c <UART_SetConfig+0x478>)
 800a458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a45c:	0800a475 	.word	0x0800a475
 800a460:	0800a47d 	.word	0x0800a47d
 800a464:	0800a485 	.word	0x0800a485
 800a468:	0800a48d 	.word	0x0800a48d
 800a46c:	0800a495 	.word	0x0800a495
 800a470:	0800a49d 	.word	0x0800a49d
 800a474:	2300      	movs	r3, #0
 800a476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a47a:	e086      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a47c:	2304      	movs	r3, #4
 800a47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a482:	e082      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a484:	2308      	movs	r3, #8
 800a486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a48a:	e07e      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a48c:	2310      	movs	r3, #16
 800a48e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a492:	e07a      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a494:	2320      	movs	r3, #32
 800a496:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a49a:	e076      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a49c:	2340      	movs	r3, #64	@ 0x40
 800a49e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4a2:	e072      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a4a4:	2380      	movs	r3, #128	@ 0x80
 800a4a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4aa:	e06e      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a4ac:	697b      	ldr	r3, [r7, #20]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a75      	ldr	r2, [pc, #468]	@ (800a688 <UART_SetConfig+0x6a4>)
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	d130      	bne.n	800a518 <UART_SetConfig+0x534>
 800a4b6:	4b72      	ldr	r3, [pc, #456]	@ (800a680 <UART_SetConfig+0x69c>)
 800a4b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a4ba:	f003 0307 	and.w	r3, r3, #7
 800a4be:	2b05      	cmp	r3, #5
 800a4c0:	d826      	bhi.n	800a510 <UART_SetConfig+0x52c>
 800a4c2:	a201      	add	r2, pc, #4	@ (adr r2, 800a4c8 <UART_SetConfig+0x4e4>)
 800a4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4c8:	0800a4e1 	.word	0x0800a4e1
 800a4cc:	0800a4e9 	.word	0x0800a4e9
 800a4d0:	0800a4f1 	.word	0x0800a4f1
 800a4d4:	0800a4f9 	.word	0x0800a4f9
 800a4d8:	0800a501 	.word	0x0800a501
 800a4dc:	0800a509 	.word	0x0800a509
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4e6:	e050      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a4e8:	2304      	movs	r3, #4
 800a4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4ee:	e04c      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a4f0:	2308      	movs	r3, #8
 800a4f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4f6:	e048      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a4f8:	2310      	movs	r3, #16
 800a4fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a4fe:	e044      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a500:	2320      	movs	r3, #32
 800a502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a506:	e040      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a508:	2340      	movs	r3, #64	@ 0x40
 800a50a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a50e:	e03c      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a510:	2380      	movs	r3, #128	@ 0x80
 800a512:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a516:	e038      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a518:	697b      	ldr	r3, [r7, #20]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a5b      	ldr	r2, [pc, #364]	@ (800a68c <UART_SetConfig+0x6a8>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d130      	bne.n	800a584 <UART_SetConfig+0x5a0>
 800a522:	4b57      	ldr	r3, [pc, #348]	@ (800a680 <UART_SetConfig+0x69c>)
 800a524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a526:	f003 0307 	and.w	r3, r3, #7
 800a52a:	2b05      	cmp	r3, #5
 800a52c:	d826      	bhi.n	800a57c <UART_SetConfig+0x598>
 800a52e:	a201      	add	r2, pc, #4	@ (adr r2, 800a534 <UART_SetConfig+0x550>)
 800a530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a534:	0800a54d 	.word	0x0800a54d
 800a538:	0800a555 	.word	0x0800a555
 800a53c:	0800a55d 	.word	0x0800a55d
 800a540:	0800a565 	.word	0x0800a565
 800a544:	0800a56d 	.word	0x0800a56d
 800a548:	0800a575 	.word	0x0800a575
 800a54c:	2302      	movs	r3, #2
 800a54e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a552:	e01a      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a554:	2304      	movs	r3, #4
 800a556:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a55a:	e016      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a55c:	2308      	movs	r3, #8
 800a55e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a562:	e012      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a564:	2310      	movs	r3, #16
 800a566:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a56a:	e00e      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a56c:	2320      	movs	r3, #32
 800a56e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a572:	e00a      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a574:	2340      	movs	r3, #64	@ 0x40
 800a576:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a57a:	e006      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a57c:	2380      	movs	r3, #128	@ 0x80
 800a57e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a582:	e002      	b.n	800a58a <UART_SetConfig+0x5a6>
 800a584:	2380      	movs	r3, #128	@ 0x80
 800a586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a3f      	ldr	r2, [pc, #252]	@ (800a68c <UART_SetConfig+0x6a8>)
 800a590:	4293      	cmp	r3, r2
 800a592:	f040 80f8 	bne.w	800a786 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a596:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a59a:	2b20      	cmp	r3, #32
 800a59c:	dc46      	bgt.n	800a62c <UART_SetConfig+0x648>
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	f2c0 8082 	blt.w	800a6a8 <UART_SetConfig+0x6c4>
 800a5a4:	3b02      	subs	r3, #2
 800a5a6:	2b1e      	cmp	r3, #30
 800a5a8:	d87e      	bhi.n	800a6a8 <UART_SetConfig+0x6c4>
 800a5aa:	a201      	add	r2, pc, #4	@ (adr r2, 800a5b0 <UART_SetConfig+0x5cc>)
 800a5ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b0:	0800a633 	.word	0x0800a633
 800a5b4:	0800a6a9 	.word	0x0800a6a9
 800a5b8:	0800a63b 	.word	0x0800a63b
 800a5bc:	0800a6a9 	.word	0x0800a6a9
 800a5c0:	0800a6a9 	.word	0x0800a6a9
 800a5c4:	0800a6a9 	.word	0x0800a6a9
 800a5c8:	0800a64b 	.word	0x0800a64b
 800a5cc:	0800a6a9 	.word	0x0800a6a9
 800a5d0:	0800a6a9 	.word	0x0800a6a9
 800a5d4:	0800a6a9 	.word	0x0800a6a9
 800a5d8:	0800a6a9 	.word	0x0800a6a9
 800a5dc:	0800a6a9 	.word	0x0800a6a9
 800a5e0:	0800a6a9 	.word	0x0800a6a9
 800a5e4:	0800a6a9 	.word	0x0800a6a9
 800a5e8:	0800a65b 	.word	0x0800a65b
 800a5ec:	0800a6a9 	.word	0x0800a6a9
 800a5f0:	0800a6a9 	.word	0x0800a6a9
 800a5f4:	0800a6a9 	.word	0x0800a6a9
 800a5f8:	0800a6a9 	.word	0x0800a6a9
 800a5fc:	0800a6a9 	.word	0x0800a6a9
 800a600:	0800a6a9 	.word	0x0800a6a9
 800a604:	0800a6a9 	.word	0x0800a6a9
 800a608:	0800a6a9 	.word	0x0800a6a9
 800a60c:	0800a6a9 	.word	0x0800a6a9
 800a610:	0800a6a9 	.word	0x0800a6a9
 800a614:	0800a6a9 	.word	0x0800a6a9
 800a618:	0800a6a9 	.word	0x0800a6a9
 800a61c:	0800a6a9 	.word	0x0800a6a9
 800a620:	0800a6a9 	.word	0x0800a6a9
 800a624:	0800a6a9 	.word	0x0800a6a9
 800a628:	0800a69b 	.word	0x0800a69b
 800a62c:	2b40      	cmp	r3, #64	@ 0x40
 800a62e:	d037      	beq.n	800a6a0 <UART_SetConfig+0x6bc>
 800a630:	e03a      	b.n	800a6a8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a632:	f7fd fca9 	bl	8007f88 <HAL_RCCEx_GetD3PCLK1Freq>
 800a636:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a638:	e03c      	b.n	800a6b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a63a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a63e:	4618      	mov	r0, r3
 800a640:	f7fd fcb8 	bl	8007fb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a644:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a646:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a648:	e034      	b.n	800a6b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a64a:	f107 0318 	add.w	r3, r7, #24
 800a64e:	4618      	mov	r0, r3
 800a650:	f7fd fe04 	bl	800825c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a658:	e02c      	b.n	800a6b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a65a:	4b09      	ldr	r3, [pc, #36]	@ (800a680 <UART_SetConfig+0x69c>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	f003 0320 	and.w	r3, r3, #32
 800a662:	2b00      	cmp	r3, #0
 800a664:	d016      	beq.n	800a694 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a666:	4b06      	ldr	r3, [pc, #24]	@ (800a680 <UART_SetConfig+0x69c>)
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	08db      	lsrs	r3, r3, #3
 800a66c:	f003 0303 	and.w	r3, r3, #3
 800a670:	4a07      	ldr	r2, [pc, #28]	@ (800a690 <UART_SetConfig+0x6ac>)
 800a672:	fa22 f303 	lsr.w	r3, r2, r3
 800a676:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a678:	e01c      	b.n	800a6b4 <UART_SetConfig+0x6d0>
 800a67a:	bf00      	nop
 800a67c:	40011400 	.word	0x40011400
 800a680:	58024400 	.word	0x58024400
 800a684:	40007800 	.word	0x40007800
 800a688:	40007c00 	.word	0x40007c00
 800a68c:	58000c00 	.word	0x58000c00
 800a690:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a694:	4b9d      	ldr	r3, [pc, #628]	@ (800a90c <UART_SetConfig+0x928>)
 800a696:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a698:	e00c      	b.n	800a6b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a69a:	4b9d      	ldr	r3, [pc, #628]	@ (800a910 <UART_SetConfig+0x92c>)
 800a69c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a69e:	e009      	b.n	800a6b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a6a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6a6:	e005      	b.n	800a6b4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a6ac:	2301      	movs	r3, #1
 800a6ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a6b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a6b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	f000 81de 	beq.w	800aa78 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a6bc:	697b      	ldr	r3, [r7, #20]
 800a6be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6c0:	4a94      	ldr	r2, [pc, #592]	@ (800a914 <UART_SetConfig+0x930>)
 800a6c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a6c6:	461a      	mov	r2, r3
 800a6c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800a6ce:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	685a      	ldr	r2, [r3, #4]
 800a6d4:	4613      	mov	r3, r2
 800a6d6:	005b      	lsls	r3, r3, #1
 800a6d8:	4413      	add	r3, r2
 800a6da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d305      	bcc.n	800a6ec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a6e0:	697b      	ldr	r3, [r7, #20]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a6e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d903      	bls.n	800a6f4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a6f2:	e1c1      	b.n	800aa78 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a6f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	60bb      	str	r3, [r7, #8]
 800a6fa:	60fa      	str	r2, [r7, #12]
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a700:	4a84      	ldr	r2, [pc, #528]	@ (800a914 <UART_SetConfig+0x930>)
 800a702:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a706:	b29b      	uxth	r3, r3
 800a708:	2200      	movs	r2, #0
 800a70a:	603b      	str	r3, [r7, #0]
 800a70c:	607a      	str	r2, [r7, #4]
 800a70e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a712:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a716:	f7f5 fddf 	bl	80002d8 <__aeabi_uldivmod>
 800a71a:	4602      	mov	r2, r0
 800a71c:	460b      	mov	r3, r1
 800a71e:	4610      	mov	r0, r2
 800a720:	4619      	mov	r1, r3
 800a722:	f04f 0200 	mov.w	r2, #0
 800a726:	f04f 0300 	mov.w	r3, #0
 800a72a:	020b      	lsls	r3, r1, #8
 800a72c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a730:	0202      	lsls	r2, r0, #8
 800a732:	6979      	ldr	r1, [r7, #20]
 800a734:	6849      	ldr	r1, [r1, #4]
 800a736:	0849      	lsrs	r1, r1, #1
 800a738:	2000      	movs	r0, #0
 800a73a:	460c      	mov	r4, r1
 800a73c:	4605      	mov	r5, r0
 800a73e:	eb12 0804 	adds.w	r8, r2, r4
 800a742:	eb43 0905 	adc.w	r9, r3, r5
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	685b      	ldr	r3, [r3, #4]
 800a74a:	2200      	movs	r2, #0
 800a74c:	469a      	mov	sl, r3
 800a74e:	4693      	mov	fp, r2
 800a750:	4652      	mov	r2, sl
 800a752:	465b      	mov	r3, fp
 800a754:	4640      	mov	r0, r8
 800a756:	4649      	mov	r1, r9
 800a758:	f7f5 fdbe 	bl	80002d8 <__aeabi_uldivmod>
 800a75c:	4602      	mov	r2, r0
 800a75e:	460b      	mov	r3, r1
 800a760:	4613      	mov	r3, r2
 800a762:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a766:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a76a:	d308      	bcc.n	800a77e <UART_SetConfig+0x79a>
 800a76c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a76e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a772:	d204      	bcs.n	800a77e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a77a:	60da      	str	r2, [r3, #12]
 800a77c:	e17c      	b.n	800aa78 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a77e:	2301      	movs	r3, #1
 800a780:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a784:	e178      	b.n	800aa78 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	69db      	ldr	r3, [r3, #28]
 800a78a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a78e:	f040 80c5 	bne.w	800a91c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a792:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a796:	2b20      	cmp	r3, #32
 800a798:	dc48      	bgt.n	800a82c <UART_SetConfig+0x848>
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	db7b      	blt.n	800a896 <UART_SetConfig+0x8b2>
 800a79e:	2b20      	cmp	r3, #32
 800a7a0:	d879      	bhi.n	800a896 <UART_SetConfig+0x8b2>
 800a7a2:	a201      	add	r2, pc, #4	@ (adr r2, 800a7a8 <UART_SetConfig+0x7c4>)
 800a7a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7a8:	0800a833 	.word	0x0800a833
 800a7ac:	0800a83b 	.word	0x0800a83b
 800a7b0:	0800a897 	.word	0x0800a897
 800a7b4:	0800a897 	.word	0x0800a897
 800a7b8:	0800a843 	.word	0x0800a843
 800a7bc:	0800a897 	.word	0x0800a897
 800a7c0:	0800a897 	.word	0x0800a897
 800a7c4:	0800a897 	.word	0x0800a897
 800a7c8:	0800a853 	.word	0x0800a853
 800a7cc:	0800a897 	.word	0x0800a897
 800a7d0:	0800a897 	.word	0x0800a897
 800a7d4:	0800a897 	.word	0x0800a897
 800a7d8:	0800a897 	.word	0x0800a897
 800a7dc:	0800a897 	.word	0x0800a897
 800a7e0:	0800a897 	.word	0x0800a897
 800a7e4:	0800a897 	.word	0x0800a897
 800a7e8:	0800a863 	.word	0x0800a863
 800a7ec:	0800a897 	.word	0x0800a897
 800a7f0:	0800a897 	.word	0x0800a897
 800a7f4:	0800a897 	.word	0x0800a897
 800a7f8:	0800a897 	.word	0x0800a897
 800a7fc:	0800a897 	.word	0x0800a897
 800a800:	0800a897 	.word	0x0800a897
 800a804:	0800a897 	.word	0x0800a897
 800a808:	0800a897 	.word	0x0800a897
 800a80c:	0800a897 	.word	0x0800a897
 800a810:	0800a897 	.word	0x0800a897
 800a814:	0800a897 	.word	0x0800a897
 800a818:	0800a897 	.word	0x0800a897
 800a81c:	0800a897 	.word	0x0800a897
 800a820:	0800a897 	.word	0x0800a897
 800a824:	0800a897 	.word	0x0800a897
 800a828:	0800a889 	.word	0x0800a889
 800a82c:	2b40      	cmp	r3, #64	@ 0x40
 800a82e:	d02e      	beq.n	800a88e <UART_SetConfig+0x8aa>
 800a830:	e031      	b.n	800a896 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a832:	f7fc f973 	bl	8006b1c <HAL_RCC_GetPCLK1Freq>
 800a836:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a838:	e033      	b.n	800a8a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a83a:	f7fc f985 	bl	8006b48 <HAL_RCC_GetPCLK2Freq>
 800a83e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a840:	e02f      	b.n	800a8a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a842:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a846:	4618      	mov	r0, r3
 800a848:	f7fd fbb4 	bl	8007fb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a84c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a84e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a850:	e027      	b.n	800a8a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a852:	f107 0318 	add.w	r3, r7, #24
 800a856:	4618      	mov	r0, r3
 800a858:	f7fd fd00 	bl	800825c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a85c:	69fb      	ldr	r3, [r7, #28]
 800a85e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a860:	e01f      	b.n	800a8a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a862:	4b2d      	ldr	r3, [pc, #180]	@ (800a918 <UART_SetConfig+0x934>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	f003 0320 	and.w	r3, r3, #32
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d009      	beq.n	800a882 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a86e:	4b2a      	ldr	r3, [pc, #168]	@ (800a918 <UART_SetConfig+0x934>)
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	08db      	lsrs	r3, r3, #3
 800a874:	f003 0303 	and.w	r3, r3, #3
 800a878:	4a24      	ldr	r2, [pc, #144]	@ (800a90c <UART_SetConfig+0x928>)
 800a87a:	fa22 f303 	lsr.w	r3, r2, r3
 800a87e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a880:	e00f      	b.n	800a8a2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a882:	4b22      	ldr	r3, [pc, #136]	@ (800a90c <UART_SetConfig+0x928>)
 800a884:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a886:	e00c      	b.n	800a8a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a888:	4b21      	ldr	r3, [pc, #132]	@ (800a910 <UART_SetConfig+0x92c>)
 800a88a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a88c:	e009      	b.n	800a8a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a88e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a894:	e005      	b.n	800a8a2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a896:	2300      	movs	r3, #0
 800a898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800a89a:	2301      	movs	r3, #1
 800a89c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800a8a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a8a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f000 80e7 	beq.w	800aa78 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8ae:	4a19      	ldr	r2, [pc, #100]	@ (800a914 <UART_SetConfig+0x930>)
 800a8b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8b4:	461a      	mov	r2, r3
 800a8b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a8b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8bc:	005a      	lsls	r2, r3, #1
 800a8be:	697b      	ldr	r3, [r7, #20]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	085b      	lsrs	r3, r3, #1
 800a8c4:	441a      	add	r2, r3
 800a8c6:	697b      	ldr	r3, [r7, #20]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a8ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a8d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8d2:	2b0f      	cmp	r3, #15
 800a8d4:	d916      	bls.n	800a904 <UART_SetConfig+0x920>
 800a8d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a8dc:	d212      	bcs.n	800a904 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a8de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	f023 030f 	bic.w	r3, r3, #15
 800a8e6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a8e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8ea:	085b      	lsrs	r3, r3, #1
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	f003 0307 	and.w	r3, r3, #7
 800a8f2:	b29a      	uxth	r2, r3
 800a8f4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800a900:	60da      	str	r2, [r3, #12]
 800a902:	e0b9      	b.n	800aa78 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a904:	2301      	movs	r3, #1
 800a906:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800a90a:	e0b5      	b.n	800aa78 <UART_SetConfig+0xa94>
 800a90c:	03d09000 	.word	0x03d09000
 800a910:	003d0900 	.word	0x003d0900
 800a914:	0800f190 	.word	0x0800f190
 800a918:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a91c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a920:	2b20      	cmp	r3, #32
 800a922:	dc49      	bgt.n	800a9b8 <UART_SetConfig+0x9d4>
 800a924:	2b00      	cmp	r3, #0
 800a926:	db7c      	blt.n	800aa22 <UART_SetConfig+0xa3e>
 800a928:	2b20      	cmp	r3, #32
 800a92a:	d87a      	bhi.n	800aa22 <UART_SetConfig+0xa3e>
 800a92c:	a201      	add	r2, pc, #4	@ (adr r2, 800a934 <UART_SetConfig+0x950>)
 800a92e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a932:	bf00      	nop
 800a934:	0800a9bf 	.word	0x0800a9bf
 800a938:	0800a9c7 	.word	0x0800a9c7
 800a93c:	0800aa23 	.word	0x0800aa23
 800a940:	0800aa23 	.word	0x0800aa23
 800a944:	0800a9cf 	.word	0x0800a9cf
 800a948:	0800aa23 	.word	0x0800aa23
 800a94c:	0800aa23 	.word	0x0800aa23
 800a950:	0800aa23 	.word	0x0800aa23
 800a954:	0800a9df 	.word	0x0800a9df
 800a958:	0800aa23 	.word	0x0800aa23
 800a95c:	0800aa23 	.word	0x0800aa23
 800a960:	0800aa23 	.word	0x0800aa23
 800a964:	0800aa23 	.word	0x0800aa23
 800a968:	0800aa23 	.word	0x0800aa23
 800a96c:	0800aa23 	.word	0x0800aa23
 800a970:	0800aa23 	.word	0x0800aa23
 800a974:	0800a9ef 	.word	0x0800a9ef
 800a978:	0800aa23 	.word	0x0800aa23
 800a97c:	0800aa23 	.word	0x0800aa23
 800a980:	0800aa23 	.word	0x0800aa23
 800a984:	0800aa23 	.word	0x0800aa23
 800a988:	0800aa23 	.word	0x0800aa23
 800a98c:	0800aa23 	.word	0x0800aa23
 800a990:	0800aa23 	.word	0x0800aa23
 800a994:	0800aa23 	.word	0x0800aa23
 800a998:	0800aa23 	.word	0x0800aa23
 800a99c:	0800aa23 	.word	0x0800aa23
 800a9a0:	0800aa23 	.word	0x0800aa23
 800a9a4:	0800aa23 	.word	0x0800aa23
 800a9a8:	0800aa23 	.word	0x0800aa23
 800a9ac:	0800aa23 	.word	0x0800aa23
 800a9b0:	0800aa23 	.word	0x0800aa23
 800a9b4:	0800aa15 	.word	0x0800aa15
 800a9b8:	2b40      	cmp	r3, #64	@ 0x40
 800a9ba:	d02e      	beq.n	800aa1a <UART_SetConfig+0xa36>
 800a9bc:	e031      	b.n	800aa22 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a9be:	f7fc f8ad 	bl	8006b1c <HAL_RCC_GetPCLK1Freq>
 800a9c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a9c4:	e033      	b.n	800aa2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a9c6:	f7fc f8bf 	bl	8006b48 <HAL_RCC_GetPCLK2Freq>
 800a9ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a9cc:	e02f      	b.n	800aa2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a9ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f7fd faee 	bl	8007fb4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9dc:	e027      	b.n	800aa2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a9de:	f107 0318 	add.w	r3, r7, #24
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	f7fd fc3a 	bl	800825c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a9e8:	69fb      	ldr	r3, [r7, #28]
 800a9ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a9ec:	e01f      	b.n	800aa2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9ee:	4b2d      	ldr	r3, [pc, #180]	@ (800aaa4 <UART_SetConfig+0xac0>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f003 0320 	and.w	r3, r3, #32
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d009      	beq.n	800aa0e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a9fa:	4b2a      	ldr	r3, [pc, #168]	@ (800aaa4 <UART_SetConfig+0xac0>)
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	08db      	lsrs	r3, r3, #3
 800aa00:	f003 0303 	and.w	r3, r3, #3
 800aa04:	4a28      	ldr	r2, [pc, #160]	@ (800aaa8 <UART_SetConfig+0xac4>)
 800aa06:	fa22 f303 	lsr.w	r3, r2, r3
 800aa0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa0c:	e00f      	b.n	800aa2e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800aa0e:	4b26      	ldr	r3, [pc, #152]	@ (800aaa8 <UART_SetConfig+0xac4>)
 800aa10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa12:	e00c      	b.n	800aa2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aa14:	4b25      	ldr	r3, [pc, #148]	@ (800aaac <UART_SetConfig+0xac8>)
 800aa16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa18:	e009      	b.n	800aa2e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aa1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aa1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa20:	e005      	b.n	800aa2e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800aa22:	2300      	movs	r3, #0
 800aa24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aa26:	2301      	movs	r3, #1
 800aa28:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aa2c:	bf00      	nop
    }

    if (pclk != 0U)
 800aa2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d021      	beq.n	800aa78 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800aa34:	697b      	ldr	r3, [r7, #20]
 800aa36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa38:	4a1d      	ldr	r2, [pc, #116]	@ (800aab0 <UART_SetConfig+0xacc>)
 800aa3a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aa3e:	461a      	mov	r2, r3
 800aa40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aa42:	fbb3 f2f2 	udiv	r2, r3, r2
 800aa46:	697b      	ldr	r3, [r7, #20]
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	085b      	lsrs	r3, r3, #1
 800aa4c:	441a      	add	r2, r3
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	685b      	ldr	r3, [r3, #4]
 800aa52:	fbb2 f3f3 	udiv	r3, r2, r3
 800aa56:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800aa58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa5a:	2b0f      	cmp	r3, #15
 800aa5c:	d909      	bls.n	800aa72 <UART_SetConfig+0xa8e>
 800aa5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800aa64:	d205      	bcs.n	800aa72 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800aa66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aa68:	b29a      	uxth	r2, r3
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	60da      	str	r2, [r3, #12]
 800aa70:	e002      	b.n	800aa78 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800aa72:	2301      	movs	r3, #1
 800aa74:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800aa78:	697b      	ldr	r3, [r7, #20]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800aa80:	697b      	ldr	r3, [r7, #20]
 800aa82:	2201      	movs	r2, #1
 800aa84:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800aa8e:	697b      	ldr	r3, [r7, #20]
 800aa90:	2200      	movs	r2, #0
 800aa92:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800aa94:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3748      	adds	r7, #72	@ 0x48
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aaa2:	bf00      	nop
 800aaa4:	58024400 	.word	0x58024400
 800aaa8:	03d09000 	.word	0x03d09000
 800aaac:	003d0900 	.word	0x003d0900
 800aab0:	0800f190 	.word	0x0800f190

0800aab4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aac0:	f003 0308 	and.w	r3, r3, #8
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d00a      	beq.n	800aade <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	685b      	ldr	r3, [r3, #4]
 800aace:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	430a      	orrs	r2, r1
 800aadc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aae2:	f003 0301 	and.w	r3, r3, #1
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d00a      	beq.n	800ab00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	430a      	orrs	r2, r1
 800aafe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab04:	f003 0302 	and.w	r3, r3, #2
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d00a      	beq.n	800ab22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	685b      	ldr	r3, [r3, #4]
 800ab12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	430a      	orrs	r2, r1
 800ab20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab26:	f003 0304 	and.w	r3, r3, #4
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d00a      	beq.n	800ab44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	430a      	orrs	r2, r1
 800ab42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab48:	f003 0310 	and.w	r3, r3, #16
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d00a      	beq.n	800ab66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	430a      	orrs	r2, r1
 800ab64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab6a:	f003 0320 	and.w	r3, r3, #32
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d00a      	beq.n	800ab88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	689b      	ldr	r3, [r3, #8]
 800ab78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	430a      	orrs	r2, r1
 800ab86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d01a      	beq.n	800abca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	430a      	orrs	r2, r1
 800aba8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800abae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800abb2:	d10a      	bne.n	800abca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	430a      	orrs	r2, r1
 800abc8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d00a      	beq.n	800abec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	685b      	ldr	r3, [r3, #4]
 800abdc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	430a      	orrs	r2, r1
 800abea:	605a      	str	r2, [r3, #4]
  }
}
 800abec:	bf00      	nop
 800abee:	370c      	adds	r7, #12
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr

0800abf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b098      	sub	sp, #96	@ 0x60
 800abfc:	af02      	add	r7, sp, #8
 800abfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2200      	movs	r2, #0
 800ac04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ac08:	f7f7 f80c 	bl	8001c24 <HAL_GetTick>
 800ac0c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f003 0308 	and.w	r3, r3, #8
 800ac18:	2b08      	cmp	r3, #8
 800ac1a:	d12f      	bne.n	800ac7c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ac20:	9300      	str	r3, [sp, #0]
 800ac22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac24:	2200      	movs	r2, #0
 800ac26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 f88e 	bl	800ad4c <UART_WaitOnFlagUntilTimeout>
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d022      	beq.n	800ac7c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac3e:	e853 3f00 	ldrex	r3, [r3]
 800ac42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ac44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac4a:	653b      	str	r3, [r7, #80]	@ 0x50
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	461a      	mov	r2, r3
 800ac52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ac54:	647b      	str	r3, [r7, #68]	@ 0x44
 800ac56:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800ac5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ac5c:	e841 2300 	strex	r3, r2, [r1]
 800ac60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800ac62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d1e6      	bne.n	800ac36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	2220      	movs	r2, #32
 800ac6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2200      	movs	r2, #0
 800ac74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ac78:	2303      	movs	r3, #3
 800ac7a:	e063      	b.n	800ad44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	f003 0304 	and.w	r3, r3, #4
 800ac86:	2b04      	cmp	r3, #4
 800ac88:	d149      	bne.n	800ad1e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ac8a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800ac8e:	9300      	str	r3, [sp, #0]
 800ac90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800ac92:	2200      	movs	r2, #0
 800ac94:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 f857 	bl	800ad4c <UART_WaitOnFlagUntilTimeout>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d03c      	beq.n	800ad1e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acac:	e853 3f00 	ldrex	r3, [r3]
 800acb0:	623b      	str	r3, [r7, #32]
   return(result);
 800acb2:	6a3b      	ldr	r3, [r7, #32]
 800acb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800acb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	461a      	mov	r2, r3
 800acc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800acc2:	633b      	str	r3, [r7, #48]	@ 0x30
 800acc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800acc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800acca:	e841 2300 	strex	r3, r2, [r1]
 800acce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800acd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d1e6      	bne.n	800aca4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	3308      	adds	r3, #8
 800acdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acde:	693b      	ldr	r3, [r7, #16]
 800ace0:	e853 3f00 	ldrex	r3, [r3]
 800ace4:	60fb      	str	r3, [r7, #12]
   return(result);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f023 0301 	bic.w	r3, r3, #1
 800acec:	64bb      	str	r3, [r7, #72]	@ 0x48
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	3308      	adds	r3, #8
 800acf4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800acf6:	61fa      	str	r2, [r7, #28]
 800acf8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acfa:	69b9      	ldr	r1, [r7, #24]
 800acfc:	69fa      	ldr	r2, [r7, #28]
 800acfe:	e841 2300 	strex	r3, r2, [r1]
 800ad02:	617b      	str	r3, [r7, #20]
   return(result);
 800ad04:	697b      	ldr	r3, [r7, #20]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d1e5      	bne.n	800acd6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2220      	movs	r2, #32
 800ad0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2200      	movs	r2, #0
 800ad16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ad1a:	2303      	movs	r3, #3
 800ad1c:	e012      	b.n	800ad44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2220      	movs	r2, #32
 800ad22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	2220      	movs	r2, #32
 800ad2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2200      	movs	r2, #0
 800ad32:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2200      	movs	r2, #0
 800ad38:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800ad42:	2300      	movs	r3, #0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3758      	adds	r7, #88	@ 0x58
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	603b      	str	r3, [r7, #0]
 800ad58:	4613      	mov	r3, r2
 800ad5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad5c:	e04f      	b.n	800adfe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad5e:	69bb      	ldr	r3, [r7, #24]
 800ad60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad64:	d04b      	beq.n	800adfe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad66:	f7f6 ff5d 	bl	8001c24 <HAL_GetTick>
 800ad6a:	4602      	mov	r2, r0
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	1ad3      	subs	r3, r2, r3
 800ad70:	69ba      	ldr	r2, [r7, #24]
 800ad72:	429a      	cmp	r2, r3
 800ad74:	d302      	bcc.n	800ad7c <UART_WaitOnFlagUntilTimeout+0x30>
 800ad76:	69bb      	ldr	r3, [r7, #24]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d101      	bne.n	800ad80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ad7c:	2303      	movs	r3, #3
 800ad7e:	e04e      	b.n	800ae1e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	f003 0304 	and.w	r3, r3, #4
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d037      	beq.n	800adfe <UART_WaitOnFlagUntilTimeout+0xb2>
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	2b80      	cmp	r3, #128	@ 0x80
 800ad92:	d034      	beq.n	800adfe <UART_WaitOnFlagUntilTimeout+0xb2>
 800ad94:	68bb      	ldr	r3, [r7, #8]
 800ad96:	2b40      	cmp	r3, #64	@ 0x40
 800ad98:	d031      	beq.n	800adfe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	69db      	ldr	r3, [r3, #28]
 800ada0:	f003 0308 	and.w	r3, r3, #8
 800ada4:	2b08      	cmp	r3, #8
 800ada6:	d110      	bne.n	800adca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	2208      	movs	r2, #8
 800adae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800adb0:	68f8      	ldr	r0, [r7, #12]
 800adb2:	f000 f839 	bl	800ae28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2208      	movs	r2, #8
 800adba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	2200      	movs	r2, #0
 800adc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800adc6:	2301      	movs	r3, #1
 800adc8:	e029      	b.n	800ae1e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	69db      	ldr	r3, [r3, #28]
 800add0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800add4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800add8:	d111      	bne.n	800adfe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800ade2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ade4:	68f8      	ldr	r0, [r7, #12]
 800ade6:	f000 f81f 	bl	800ae28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2220      	movs	r2, #32
 800adee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800adf2:	68fb      	ldr	r3, [r7, #12]
 800adf4:	2200      	movs	r2, #0
 800adf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800adfa:	2303      	movs	r3, #3
 800adfc:	e00f      	b.n	800ae1e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	69da      	ldr	r2, [r3, #28]
 800ae04:	68bb      	ldr	r3, [r7, #8]
 800ae06:	4013      	ands	r3, r2
 800ae08:	68ba      	ldr	r2, [r7, #8]
 800ae0a:	429a      	cmp	r2, r3
 800ae0c:	bf0c      	ite	eq
 800ae0e:	2301      	moveq	r3, #1
 800ae10:	2300      	movne	r3, #0
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	461a      	mov	r2, r3
 800ae16:	79fb      	ldrb	r3, [r7, #7]
 800ae18:	429a      	cmp	r2, r3
 800ae1a:	d0a0      	beq.n	800ad5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ae1c:	2300      	movs	r3, #0
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3710      	adds	r7, #16
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}
	...

0800ae28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ae28:	b480      	push	{r7}
 800ae2a:	b095      	sub	sp, #84	@ 0x54
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae38:	e853 3f00 	ldrex	r3, [r3]
 800ae3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ae3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ae44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ae4e:	643b      	str	r3, [r7, #64]	@ 0x40
 800ae50:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ae54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ae56:	e841 2300 	strex	r3, r2, [r1]
 800ae5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ae5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d1e6      	bne.n	800ae30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	3308      	adds	r3, #8
 800ae68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae6a:	6a3b      	ldr	r3, [r7, #32]
 800ae6c:	e853 3f00 	ldrex	r3, [r3]
 800ae70:	61fb      	str	r3, [r7, #28]
   return(result);
 800ae72:	69fa      	ldr	r2, [r7, #28]
 800ae74:	4b1e      	ldr	r3, [pc, #120]	@ (800aef0 <UART_EndRxTransfer+0xc8>)
 800ae76:	4013      	ands	r3, r2
 800ae78:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	3308      	adds	r3, #8
 800ae80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ae82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ae84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ae8a:	e841 2300 	strex	r3, r2, [r1]
 800ae8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ae90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d1e5      	bne.n	800ae62 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	d118      	bne.n	800aed0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	e853 3f00 	ldrex	r3, [r3]
 800aeaa:	60bb      	str	r3, [r7, #8]
   return(result);
 800aeac:	68bb      	ldr	r3, [r7, #8]
 800aeae:	f023 0310 	bic.w	r3, r3, #16
 800aeb2:	647b      	str	r3, [r7, #68]	@ 0x44
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	461a      	mov	r2, r3
 800aeba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800aebc:	61bb      	str	r3, [r7, #24]
 800aebe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aec0:	6979      	ldr	r1, [r7, #20]
 800aec2:	69ba      	ldr	r2, [r7, #24]
 800aec4:	e841 2300 	strex	r3, r2, [r1]
 800aec8:	613b      	str	r3, [r7, #16]
   return(result);
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d1e6      	bne.n	800ae9e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2220      	movs	r2, #32
 800aed4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800aee4:	bf00      	nop
 800aee6:	3754      	adds	r7, #84	@ 0x54
 800aee8:	46bd      	mov	sp, r7
 800aeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeee:	4770      	bx	lr
 800aef0:	effffffe 	.word	0xeffffffe

0800aef4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aef4:	b084      	sub	sp, #16
 800aef6:	b580      	push	{r7, lr}
 800aef8:	b084      	sub	sp, #16
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	6078      	str	r0, [r7, #4]
 800aefe:	f107 001c 	add.w	r0, r7, #28
 800af02:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800af06:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800af0a:	2b01      	cmp	r3, #1
 800af0c:	d121      	bne.n	800af52 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af12:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	68da      	ldr	r2, [r3, #12]
 800af1e:	4b2c      	ldr	r3, [pc, #176]	@ (800afd0 <USB_CoreInit+0xdc>)
 800af20:	4013      	ands	r3, r2
 800af22:	687a      	ldr	r2, [r7, #4]
 800af24:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	68db      	ldr	r3, [r3, #12]
 800af2a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800af32:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800af36:	2b01      	cmp	r3, #1
 800af38:	d105      	bne.n	800af46 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	68db      	ldr	r3, [r3, #12]
 800af3e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f001 faf6 	bl	800c538 <USB_CoreReset>
 800af4c:	4603      	mov	r3, r0
 800af4e:	73fb      	strb	r3, [r7, #15]
 800af50:	e01b      	b.n	800af8a <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	68db      	ldr	r3, [r3, #12]
 800af56:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f001 faea 	bl	800c538 <USB_CoreReset>
 800af64:	4603      	mov	r3, r0
 800af66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800af68:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d106      	bne.n	800af7e <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af74:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	639a      	str	r2, [r3, #56]	@ 0x38
 800af7c:	e005      	b.n	800af8a <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af82:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800af8a:	7fbb      	ldrb	r3, [r7, #30]
 800af8c:	2b01      	cmp	r3, #1
 800af8e:	d116      	bne.n	800afbe <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800af94:	b29a      	uxth	r2, r3
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800af9e:	4b0d      	ldr	r3, [pc, #52]	@ (800afd4 <USB_CoreInit+0xe0>)
 800afa0:	4313      	orrs	r3, r2
 800afa2:	687a      	ldr	r2, [r7, #4]
 800afa4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	689b      	ldr	r3, [r3, #8]
 800afaa:	f043 0206 	orr.w	r2, r3, #6
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	f043 0220 	orr.w	r2, r3, #32
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800afbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3710      	adds	r7, #16
 800afc4:	46bd      	mov	sp, r7
 800afc6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800afca:	b004      	add	sp, #16
 800afcc:	4770      	bx	lr
 800afce:	bf00      	nop
 800afd0:	ffbdffbf 	.word	0xffbdffbf
 800afd4:	03ee0000 	.word	0x03ee0000

0800afd8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800afd8:	b480      	push	{r7}
 800afda:	b087      	sub	sp, #28
 800afdc:	af00      	add	r7, sp, #0
 800afde:	60f8      	str	r0, [r7, #12]
 800afe0:	60b9      	str	r1, [r7, #8]
 800afe2:	4613      	mov	r3, r2
 800afe4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800afe6:	79fb      	ldrb	r3, [r7, #7]
 800afe8:	2b02      	cmp	r3, #2
 800afea:	d165      	bne.n	800b0b8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800afec:	68bb      	ldr	r3, [r7, #8]
 800afee:	4a41      	ldr	r2, [pc, #260]	@ (800b0f4 <USB_SetTurnaroundTime+0x11c>)
 800aff0:	4293      	cmp	r3, r2
 800aff2:	d906      	bls.n	800b002 <USB_SetTurnaroundTime+0x2a>
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	4a40      	ldr	r2, [pc, #256]	@ (800b0f8 <USB_SetTurnaroundTime+0x120>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d202      	bcs.n	800b002 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800affc:	230f      	movs	r3, #15
 800affe:	617b      	str	r3, [r7, #20]
 800b000:	e062      	b.n	800b0c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	4a3c      	ldr	r2, [pc, #240]	@ (800b0f8 <USB_SetTurnaroundTime+0x120>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d306      	bcc.n	800b018 <USB_SetTurnaroundTime+0x40>
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	4a3b      	ldr	r2, [pc, #236]	@ (800b0fc <USB_SetTurnaroundTime+0x124>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d202      	bcs.n	800b018 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b012:	230e      	movs	r3, #14
 800b014:	617b      	str	r3, [r7, #20]
 800b016:	e057      	b.n	800b0c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	4a38      	ldr	r2, [pc, #224]	@ (800b0fc <USB_SetTurnaroundTime+0x124>)
 800b01c:	4293      	cmp	r3, r2
 800b01e:	d306      	bcc.n	800b02e <USB_SetTurnaroundTime+0x56>
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	4a37      	ldr	r2, [pc, #220]	@ (800b100 <USB_SetTurnaroundTime+0x128>)
 800b024:	4293      	cmp	r3, r2
 800b026:	d202      	bcs.n	800b02e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b028:	230d      	movs	r3, #13
 800b02a:	617b      	str	r3, [r7, #20]
 800b02c:	e04c      	b.n	800b0c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b02e:	68bb      	ldr	r3, [r7, #8]
 800b030:	4a33      	ldr	r2, [pc, #204]	@ (800b100 <USB_SetTurnaroundTime+0x128>)
 800b032:	4293      	cmp	r3, r2
 800b034:	d306      	bcc.n	800b044 <USB_SetTurnaroundTime+0x6c>
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	4a32      	ldr	r2, [pc, #200]	@ (800b104 <USB_SetTurnaroundTime+0x12c>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d802      	bhi.n	800b044 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b03e:	230c      	movs	r3, #12
 800b040:	617b      	str	r3, [r7, #20]
 800b042:	e041      	b.n	800b0c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	4a2f      	ldr	r2, [pc, #188]	@ (800b104 <USB_SetTurnaroundTime+0x12c>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d906      	bls.n	800b05a <USB_SetTurnaroundTime+0x82>
 800b04c:	68bb      	ldr	r3, [r7, #8]
 800b04e:	4a2e      	ldr	r2, [pc, #184]	@ (800b108 <USB_SetTurnaroundTime+0x130>)
 800b050:	4293      	cmp	r3, r2
 800b052:	d802      	bhi.n	800b05a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b054:	230b      	movs	r3, #11
 800b056:	617b      	str	r3, [r7, #20]
 800b058:	e036      	b.n	800b0c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	4a2a      	ldr	r2, [pc, #168]	@ (800b108 <USB_SetTurnaroundTime+0x130>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d906      	bls.n	800b070 <USB_SetTurnaroundTime+0x98>
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	4a29      	ldr	r2, [pc, #164]	@ (800b10c <USB_SetTurnaroundTime+0x134>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d802      	bhi.n	800b070 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b06a:	230a      	movs	r3, #10
 800b06c:	617b      	str	r3, [r7, #20]
 800b06e:	e02b      	b.n	800b0c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	4a26      	ldr	r2, [pc, #152]	@ (800b10c <USB_SetTurnaroundTime+0x134>)
 800b074:	4293      	cmp	r3, r2
 800b076:	d906      	bls.n	800b086 <USB_SetTurnaroundTime+0xae>
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	4a25      	ldr	r2, [pc, #148]	@ (800b110 <USB_SetTurnaroundTime+0x138>)
 800b07c:	4293      	cmp	r3, r2
 800b07e:	d202      	bcs.n	800b086 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b080:	2309      	movs	r3, #9
 800b082:	617b      	str	r3, [r7, #20]
 800b084:	e020      	b.n	800b0c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	4a21      	ldr	r2, [pc, #132]	@ (800b110 <USB_SetTurnaroundTime+0x138>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d306      	bcc.n	800b09c <USB_SetTurnaroundTime+0xc4>
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	4a20      	ldr	r2, [pc, #128]	@ (800b114 <USB_SetTurnaroundTime+0x13c>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d802      	bhi.n	800b09c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b096:	2308      	movs	r3, #8
 800b098:	617b      	str	r3, [r7, #20]
 800b09a:	e015      	b.n	800b0c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	4a1d      	ldr	r2, [pc, #116]	@ (800b114 <USB_SetTurnaroundTime+0x13c>)
 800b0a0:	4293      	cmp	r3, r2
 800b0a2:	d906      	bls.n	800b0b2 <USB_SetTurnaroundTime+0xda>
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	4a1c      	ldr	r2, [pc, #112]	@ (800b118 <USB_SetTurnaroundTime+0x140>)
 800b0a8:	4293      	cmp	r3, r2
 800b0aa:	d202      	bcs.n	800b0b2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b0ac:	2307      	movs	r3, #7
 800b0ae:	617b      	str	r3, [r7, #20]
 800b0b0:	e00a      	b.n	800b0c8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b0b2:	2306      	movs	r3, #6
 800b0b4:	617b      	str	r3, [r7, #20]
 800b0b6:	e007      	b.n	800b0c8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b0b8:	79fb      	ldrb	r3, [r7, #7]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d102      	bne.n	800b0c4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b0be:	2309      	movs	r3, #9
 800b0c0:	617b      	str	r3, [r7, #20]
 800b0c2:	e001      	b.n	800b0c8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b0c4:	2309      	movs	r3, #9
 800b0c6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	68db      	ldr	r3, [r3, #12]
 800b0cc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800b0d0:	68fb      	ldr	r3, [r7, #12]
 800b0d2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	68da      	ldr	r2, [r3, #12]
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	029b      	lsls	r3, r3, #10
 800b0dc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800b0e0:	431a      	orrs	r2, r3
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b0e6:	2300      	movs	r3, #0
}
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	371c      	adds	r7, #28
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr
 800b0f4:	00d8acbf 	.word	0x00d8acbf
 800b0f8:	00e4e1c0 	.word	0x00e4e1c0
 800b0fc:	00f42400 	.word	0x00f42400
 800b100:	01067380 	.word	0x01067380
 800b104:	011a499f 	.word	0x011a499f
 800b108:	01312cff 	.word	0x01312cff
 800b10c:	014ca43f 	.word	0x014ca43f
 800b110:	016e3600 	.word	0x016e3600
 800b114:	01a6ab1f 	.word	0x01a6ab1f
 800b118:	01e84800 	.word	0x01e84800

0800b11c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	f043 0201 	orr.w	r2, r3, #1
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b130:	2300      	movs	r3, #0
}
 800b132:	4618      	mov	r0, r3
 800b134:	370c      	adds	r7, #12
 800b136:	46bd      	mov	sp, r7
 800b138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13c:	4770      	bx	lr

0800b13e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b13e:	b480      	push	{r7}
 800b140:	b083      	sub	sp, #12
 800b142:	af00      	add	r7, sp, #0
 800b144:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	689b      	ldr	r3, [r3, #8]
 800b14a:	f023 0201 	bic.w	r2, r3, #1
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b152:	2300      	movs	r3, #0
}
 800b154:	4618      	mov	r0, r3
 800b156:	370c      	adds	r7, #12
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	460b      	mov	r3, r1
 800b16a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b16c:	2300      	movs	r3, #0
 800b16e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	68db      	ldr	r3, [r3, #12]
 800b174:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b17c:	78fb      	ldrb	r3, [r7, #3]
 800b17e:	2b01      	cmp	r3, #1
 800b180:	d115      	bne.n	800b1ae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	68db      	ldr	r3, [r3, #12]
 800b186:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b18e:	200a      	movs	r0, #10
 800b190:	f7f6 fd54 	bl	8001c3c <HAL_Delay>
      ms += 10U;
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	330a      	adds	r3, #10
 800b198:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b19a:	6878      	ldr	r0, [r7, #4]
 800b19c:	f001 f93b 	bl	800c416 <USB_GetMode>
 800b1a0:	4603      	mov	r3, r0
 800b1a2:	2b01      	cmp	r3, #1
 800b1a4:	d01e      	beq.n	800b1e4 <USB_SetCurrentMode+0x84>
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2bc7      	cmp	r3, #199	@ 0xc7
 800b1aa:	d9f0      	bls.n	800b18e <USB_SetCurrentMode+0x2e>
 800b1ac:	e01a      	b.n	800b1e4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b1ae:	78fb      	ldrb	r3, [r7, #3]
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d115      	bne.n	800b1e0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	68db      	ldr	r3, [r3, #12]
 800b1b8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b1c0:	200a      	movs	r0, #10
 800b1c2:	f7f6 fd3b 	bl	8001c3c <HAL_Delay>
      ms += 10U;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	330a      	adds	r3, #10
 800b1ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b1cc:	6878      	ldr	r0, [r7, #4]
 800b1ce:	f001 f922 	bl	800c416 <USB_GetMode>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d005      	beq.n	800b1e4 <USB_SetCurrentMode+0x84>
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2bc7      	cmp	r3, #199	@ 0xc7
 800b1dc:	d9f0      	bls.n	800b1c0 <USB_SetCurrentMode+0x60>
 800b1de:	e001      	b.n	800b1e4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	e005      	b.n	800b1f0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2bc8      	cmp	r3, #200	@ 0xc8
 800b1e8:	d101      	bne.n	800b1ee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e000      	b.n	800b1f0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b1ee:	2300      	movs	r3, #0
}
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	3710      	adds	r7, #16
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b1f8:	b084      	sub	sp, #16
 800b1fa:	b580      	push	{r7, lr}
 800b1fc:	b086      	sub	sp, #24
 800b1fe:	af00      	add	r7, sp, #0
 800b200:	6078      	str	r0, [r7, #4]
 800b202:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b206:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b20a:	2300      	movs	r3, #0
 800b20c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b212:	2300      	movs	r3, #0
 800b214:	613b      	str	r3, [r7, #16]
 800b216:	e009      	b.n	800b22c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b218:	687a      	ldr	r2, [r7, #4]
 800b21a:	693b      	ldr	r3, [r7, #16]
 800b21c:	3340      	adds	r3, #64	@ 0x40
 800b21e:	009b      	lsls	r3, r3, #2
 800b220:	4413      	add	r3, r2
 800b222:	2200      	movs	r2, #0
 800b224:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	3301      	adds	r3, #1
 800b22a:	613b      	str	r3, [r7, #16]
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	2b0e      	cmp	r3, #14
 800b230:	d9f2      	bls.n	800b218 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b232:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b236:	2b00      	cmp	r3, #0
 800b238:	d11c      	bne.n	800b274 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	68fa      	ldr	r2, [r7, #12]
 800b244:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b248:	f043 0302 	orr.w	r3, r3, #2
 800b24c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b252:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	601a      	str	r2, [r3, #0]
 800b272:	e005      	b.n	800b280 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b278:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b286:	461a      	mov	r2, r3
 800b288:	2300      	movs	r3, #0
 800b28a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b28c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b290:	2b01      	cmp	r3, #1
 800b292:	d10d      	bne.n	800b2b0 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b294:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d104      	bne.n	800b2a6 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b29c:	2100      	movs	r1, #0
 800b29e:	6878      	ldr	r0, [r7, #4]
 800b2a0:	f000 f968 	bl	800b574 <USB_SetDevSpeed>
 800b2a4:	e008      	b.n	800b2b8 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b2a6:	2101      	movs	r1, #1
 800b2a8:	6878      	ldr	r0, [r7, #4]
 800b2aa:	f000 f963 	bl	800b574 <USB_SetDevSpeed>
 800b2ae:	e003      	b.n	800b2b8 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b2b0:	2103      	movs	r1, #3
 800b2b2:	6878      	ldr	r0, [r7, #4]
 800b2b4:	f000 f95e 	bl	800b574 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b2b8:	2110      	movs	r1, #16
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 f8fa 	bl	800b4b4 <USB_FlushTxFifo>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d001      	beq.n	800b2ca <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f000 f924 	bl	800b518 <USB_FlushRxFifo>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d001      	beq.n	800b2da <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2e0:	461a      	mov	r2, r3
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2ec:	461a      	mov	r2, r3
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b2f8:	461a      	mov	r2, r3
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b2fe:	2300      	movs	r3, #0
 800b300:	613b      	str	r3, [r7, #16]
 800b302:	e043      	b.n	800b38c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	015a      	lsls	r2, r3, #5
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	4413      	add	r3, r2
 800b30c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b316:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b31a:	d118      	bne.n	800b34e <USB_DevInit+0x156>
    {
      if (i == 0U)
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d10a      	bne.n	800b338 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	015a      	lsls	r2, r3, #5
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	4413      	add	r3, r2
 800b32a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b32e:	461a      	mov	r2, r3
 800b330:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b334:	6013      	str	r3, [r2, #0]
 800b336:	e013      	b.n	800b360 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	015a      	lsls	r2, r3, #5
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	4413      	add	r3, r2
 800b340:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b344:	461a      	mov	r2, r3
 800b346:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b34a:	6013      	str	r3, [r2, #0]
 800b34c:	e008      	b.n	800b360 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	015a      	lsls	r2, r3, #5
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	4413      	add	r3, r2
 800b356:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b35a:	461a      	mov	r2, r3
 800b35c:	2300      	movs	r3, #0
 800b35e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b360:	693b      	ldr	r3, [r7, #16]
 800b362:	015a      	lsls	r2, r3, #5
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	4413      	add	r3, r2
 800b368:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b36c:	461a      	mov	r2, r3
 800b36e:	2300      	movs	r3, #0
 800b370:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	015a      	lsls	r2, r3, #5
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	4413      	add	r3, r2
 800b37a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b37e:	461a      	mov	r2, r3
 800b380:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b384:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	3301      	adds	r3, #1
 800b38a:	613b      	str	r3, [r7, #16]
 800b38c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b390:	461a      	mov	r2, r3
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	4293      	cmp	r3, r2
 800b396:	d3b5      	bcc.n	800b304 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b398:	2300      	movs	r3, #0
 800b39a:	613b      	str	r3, [r7, #16]
 800b39c:	e043      	b.n	800b426 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	015a      	lsls	r2, r3, #5
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	4413      	add	r3, r2
 800b3a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b3b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b3b4:	d118      	bne.n	800b3e8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d10a      	bne.n	800b3d2 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	015a      	lsls	r2, r3, #5
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	4413      	add	r3, r2
 800b3c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b3ce:	6013      	str	r3, [r2, #0]
 800b3d0:	e013      	b.n	800b3fa <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	015a      	lsls	r2, r3, #5
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	4413      	add	r3, r2
 800b3da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3de:	461a      	mov	r2, r3
 800b3e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b3e4:	6013      	str	r3, [r2, #0]
 800b3e6:	e008      	b.n	800b3fa <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	015a      	lsls	r2, r3, #5
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	4413      	add	r3, r2
 800b3f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3f4:	461a      	mov	r2, r3
 800b3f6:	2300      	movs	r3, #0
 800b3f8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b3fa:	693b      	ldr	r3, [r7, #16]
 800b3fc:	015a      	lsls	r2, r3, #5
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	4413      	add	r3, r2
 800b402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b406:	461a      	mov	r2, r3
 800b408:	2300      	movs	r3, #0
 800b40a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b40c:	693b      	ldr	r3, [r7, #16]
 800b40e:	015a      	lsls	r2, r3, #5
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	4413      	add	r3, r2
 800b414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b418:	461a      	mov	r2, r3
 800b41a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b41e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	3301      	adds	r3, #1
 800b424:	613b      	str	r3, [r7, #16]
 800b426:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b42a:	461a      	mov	r2, r3
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	4293      	cmp	r3, r2
 800b430:	d3b5      	bcc.n	800b39e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b438:	691b      	ldr	r3, [r3, #16]
 800b43a:	68fa      	ldr	r2, [r7, #12]
 800b43c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b440:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b444:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2200      	movs	r2, #0
 800b44a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b452:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b454:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d105      	bne.n	800b468 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	699b      	ldr	r3, [r3, #24]
 800b460:	f043 0210 	orr.w	r2, r3, #16
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	699a      	ldr	r2, [r3, #24]
 800b46c:	4b0f      	ldr	r3, [pc, #60]	@ (800b4ac <USB_DevInit+0x2b4>)
 800b46e:	4313      	orrs	r3, r2
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b474:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d005      	beq.n	800b488 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	699b      	ldr	r3, [r3, #24]
 800b480:	f043 0208 	orr.w	r2, r3, #8
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b488:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b48c:	2b01      	cmp	r3, #1
 800b48e:	d105      	bne.n	800b49c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	699a      	ldr	r2, [r3, #24]
 800b494:	4b06      	ldr	r3, [pc, #24]	@ (800b4b0 <USB_DevInit+0x2b8>)
 800b496:	4313      	orrs	r3, r2
 800b498:	687a      	ldr	r2, [r7, #4]
 800b49a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b49c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	3718      	adds	r7, #24
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b4a8:	b004      	add	sp, #16
 800b4aa:	4770      	bx	lr
 800b4ac:	803c3800 	.word	0x803c3800
 800b4b0:	40000004 	.word	0x40000004

0800b4b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b085      	sub	sp, #20
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	3301      	adds	r3, #1
 800b4c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b4ce:	d901      	bls.n	800b4d4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b4d0:	2303      	movs	r3, #3
 800b4d2:	e01b      	b.n	800b50c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	691b      	ldr	r3, [r3, #16]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	daf2      	bge.n	800b4c2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b4e0:	683b      	ldr	r3, [r7, #0]
 800b4e2:	019b      	lsls	r3, r3, #6
 800b4e4:	f043 0220 	orr.w	r2, r3, #32
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	3301      	adds	r3, #1
 800b4f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b4f8:	d901      	bls.n	800b4fe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b4fa:	2303      	movs	r3, #3
 800b4fc:	e006      	b.n	800b50c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	691b      	ldr	r3, [r3, #16]
 800b502:	f003 0320 	and.w	r3, r3, #32
 800b506:	2b20      	cmp	r3, #32
 800b508:	d0f0      	beq.n	800b4ec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b50a:	2300      	movs	r3, #0
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3714      	adds	r7, #20
 800b510:	46bd      	mov	sp, r7
 800b512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b516:	4770      	bx	lr

0800b518 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b518:	b480      	push	{r7}
 800b51a:	b085      	sub	sp, #20
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b520:	2300      	movs	r3, #0
 800b522:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	3301      	adds	r3, #1
 800b528:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b530:	d901      	bls.n	800b536 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b532:	2303      	movs	r3, #3
 800b534:	e018      	b.n	800b568 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	691b      	ldr	r3, [r3, #16]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	daf2      	bge.n	800b524 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b53e:	2300      	movs	r3, #0
 800b540:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2210      	movs	r2, #16
 800b546:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	3301      	adds	r3, #1
 800b54c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b554:	d901      	bls.n	800b55a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b556:	2303      	movs	r3, #3
 800b558:	e006      	b.n	800b568 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	691b      	ldr	r3, [r3, #16]
 800b55e:	f003 0310 	and.w	r3, r3, #16
 800b562:	2b10      	cmp	r3, #16
 800b564:	d0f0      	beq.n	800b548 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b566:	2300      	movs	r3, #0
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3714      	adds	r7, #20
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b574:	b480      	push	{r7}
 800b576:	b085      	sub	sp, #20
 800b578:	af00      	add	r7, sp, #0
 800b57a:	6078      	str	r0, [r7, #4]
 800b57c:	460b      	mov	r3, r1
 800b57e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b58a:	681a      	ldr	r2, [r3, #0]
 800b58c:	78fb      	ldrb	r3, [r7, #3]
 800b58e:	68f9      	ldr	r1, [r7, #12]
 800b590:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b594:	4313      	orrs	r3, r2
 800b596:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3714      	adds	r7, #20
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr

0800b5a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800b5a6:	b480      	push	{r7}
 800b5a8:	b087      	sub	sp, #28
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b5b2:	693b      	ldr	r3, [r7, #16]
 800b5b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b5b8:	689b      	ldr	r3, [r3, #8]
 800b5ba:	f003 0306 	and.w	r3, r3, #6
 800b5be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d102      	bne.n	800b5cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	75fb      	strb	r3, [r7, #23]
 800b5ca:	e00a      	b.n	800b5e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2b02      	cmp	r3, #2
 800b5d0:	d002      	beq.n	800b5d8 <USB_GetDevSpeed+0x32>
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2b06      	cmp	r3, #6
 800b5d6:	d102      	bne.n	800b5de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b5d8:	2302      	movs	r3, #2
 800b5da:	75fb      	strb	r3, [r7, #23]
 800b5dc:	e001      	b.n	800b5e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b5de:	230f      	movs	r3, #15
 800b5e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b5e2:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	371c      	adds	r7, #28
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ee:	4770      	bx	lr

0800b5f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b085      	sub	sp, #20
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
 800b5f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	781b      	ldrb	r3, [r3, #0]
 800b602:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	785b      	ldrb	r3, [r3, #1]
 800b608:	2b01      	cmp	r3, #1
 800b60a:	d139      	bne.n	800b680 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b612:	69da      	ldr	r2, [r3, #28]
 800b614:	683b      	ldr	r3, [r7, #0]
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	f003 030f 	and.w	r3, r3, #15
 800b61c:	2101      	movs	r1, #1
 800b61e:	fa01 f303 	lsl.w	r3, r1, r3
 800b622:	b29b      	uxth	r3, r3
 800b624:	68f9      	ldr	r1, [r7, #12]
 800b626:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b62a:	4313      	orrs	r3, r2
 800b62c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b62e:	68bb      	ldr	r3, [r7, #8]
 800b630:	015a      	lsls	r2, r3, #5
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	4413      	add	r3, r2
 800b636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b640:	2b00      	cmp	r3, #0
 800b642:	d153      	bne.n	800b6ec <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b644:	68bb      	ldr	r3, [r7, #8]
 800b646:	015a      	lsls	r2, r3, #5
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	4413      	add	r3, r2
 800b64c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b650:	681a      	ldr	r2, [r3, #0]
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	689b      	ldr	r3, [r3, #8]
 800b656:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	791b      	ldrb	r3, [r3, #4]
 800b65e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b660:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	059b      	lsls	r3, r3, #22
 800b666:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b668:	431a      	orrs	r2, r3
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	0159      	lsls	r1, r3, #5
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	440b      	add	r3, r1
 800b672:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b676:	4619      	mov	r1, r3
 800b678:	4b20      	ldr	r3, [pc, #128]	@ (800b6fc <USB_ActivateEndpoint+0x10c>)
 800b67a:	4313      	orrs	r3, r2
 800b67c:	600b      	str	r3, [r1, #0]
 800b67e:	e035      	b.n	800b6ec <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b686:	69da      	ldr	r2, [r3, #28]
 800b688:	683b      	ldr	r3, [r7, #0]
 800b68a:	781b      	ldrb	r3, [r3, #0]
 800b68c:	f003 030f 	and.w	r3, r3, #15
 800b690:	2101      	movs	r1, #1
 800b692:	fa01 f303 	lsl.w	r3, r1, r3
 800b696:	041b      	lsls	r3, r3, #16
 800b698:	68f9      	ldr	r1, [r7, #12]
 800b69a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	015a      	lsls	r2, r3, #5
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	4413      	add	r3, r2
 800b6aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d119      	bne.n	800b6ec <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	015a      	lsls	r2, r3, #5
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	4413      	add	r3, r2
 800b6c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	683b      	ldr	r3, [r7, #0]
 800b6c8:	689b      	ldr	r3, [r3, #8]
 800b6ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	791b      	ldrb	r3, [r3, #4]
 800b6d2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b6d4:	430b      	orrs	r3, r1
 800b6d6:	431a      	orrs	r2, r3
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	0159      	lsls	r1, r3, #5
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	440b      	add	r3, r1
 800b6e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6e4:	4619      	mov	r1, r3
 800b6e6:	4b05      	ldr	r3, [pc, #20]	@ (800b6fc <USB_ActivateEndpoint+0x10c>)
 800b6e8:	4313      	orrs	r3, r2
 800b6ea:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b6ec:	2300      	movs	r3, #0
}
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	3714      	adds	r7, #20
 800b6f2:	46bd      	mov	sp, r7
 800b6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f8:	4770      	bx	lr
 800b6fa:	bf00      	nop
 800b6fc:	10008000 	.word	0x10008000

0800b700 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b700:	b480      	push	{r7}
 800b702:	b085      	sub	sp, #20
 800b704:	af00      	add	r7, sp, #0
 800b706:	6078      	str	r0, [r7, #4]
 800b708:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	781b      	ldrb	r3, [r3, #0]
 800b712:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	785b      	ldrb	r3, [r3, #1]
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d161      	bne.n	800b7e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	015a      	lsls	r2, r3, #5
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	4413      	add	r3, r2
 800b724:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b72e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b732:	d11f      	bne.n	800b774 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	015a      	lsls	r2, r3, #5
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	4413      	add	r3, r2
 800b73c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	68ba      	ldr	r2, [r7, #8]
 800b744:	0151      	lsls	r1, r2, #5
 800b746:	68fa      	ldr	r2, [r7, #12]
 800b748:	440a      	add	r2, r1
 800b74a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b74e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b752:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b754:	68bb      	ldr	r3, [r7, #8]
 800b756:	015a      	lsls	r2, r3, #5
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	4413      	add	r3, r2
 800b75c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	68ba      	ldr	r2, [r7, #8]
 800b764:	0151      	lsls	r1, r2, #5
 800b766:	68fa      	ldr	r2, [r7, #12]
 800b768:	440a      	add	r2, r1
 800b76a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b76e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b772:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b77a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b77c:	683b      	ldr	r3, [r7, #0]
 800b77e:	781b      	ldrb	r3, [r3, #0]
 800b780:	f003 030f 	and.w	r3, r3, #15
 800b784:	2101      	movs	r1, #1
 800b786:	fa01 f303 	lsl.w	r3, r1, r3
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	43db      	mvns	r3, r3
 800b78e:	68f9      	ldr	r1, [r7, #12]
 800b790:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b794:	4013      	ands	r3, r2
 800b796:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b79e:	69da      	ldr	r2, [r3, #28]
 800b7a0:	683b      	ldr	r3, [r7, #0]
 800b7a2:	781b      	ldrb	r3, [r3, #0]
 800b7a4:	f003 030f 	and.w	r3, r3, #15
 800b7a8:	2101      	movs	r1, #1
 800b7aa:	fa01 f303 	lsl.w	r3, r1, r3
 800b7ae:	b29b      	uxth	r3, r3
 800b7b0:	43db      	mvns	r3, r3
 800b7b2:	68f9      	ldr	r1, [r7, #12]
 800b7b4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b7b8:	4013      	ands	r3, r2
 800b7ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	015a      	lsls	r2, r3, #5
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	4413      	add	r3, r2
 800b7c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7c8:	681a      	ldr	r2, [r3, #0]
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	0159      	lsls	r1, r3, #5
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	440b      	add	r3, r1
 800b7d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7d6:	4619      	mov	r1, r3
 800b7d8:	4b35      	ldr	r3, [pc, #212]	@ (800b8b0 <USB_DeactivateEndpoint+0x1b0>)
 800b7da:	4013      	ands	r3, r2
 800b7dc:	600b      	str	r3, [r1, #0]
 800b7de:	e060      	b.n	800b8a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b7e0:	68bb      	ldr	r3, [r7, #8]
 800b7e2:	015a      	lsls	r2, r3, #5
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	4413      	add	r3, r2
 800b7e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b7f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b7f6:	d11f      	bne.n	800b838 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	015a      	lsls	r2, r3, #5
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	4413      	add	r3, r2
 800b800:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	68ba      	ldr	r2, [r7, #8]
 800b808:	0151      	lsls	r1, r2, #5
 800b80a:	68fa      	ldr	r2, [r7, #12]
 800b80c:	440a      	add	r2, r1
 800b80e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b812:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b816:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	015a      	lsls	r2, r3, #5
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	4413      	add	r3, r2
 800b820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	68ba      	ldr	r2, [r7, #8]
 800b828:	0151      	lsls	r1, r2, #5
 800b82a:	68fa      	ldr	r2, [r7, #12]
 800b82c:	440a      	add	r2, r1
 800b82e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b832:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b836:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b83e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	781b      	ldrb	r3, [r3, #0]
 800b844:	f003 030f 	and.w	r3, r3, #15
 800b848:	2101      	movs	r1, #1
 800b84a:	fa01 f303 	lsl.w	r3, r1, r3
 800b84e:	041b      	lsls	r3, r3, #16
 800b850:	43db      	mvns	r3, r3
 800b852:	68f9      	ldr	r1, [r7, #12]
 800b854:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b858:	4013      	ands	r3, r2
 800b85a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b862:	69da      	ldr	r2, [r3, #28]
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	f003 030f 	and.w	r3, r3, #15
 800b86c:	2101      	movs	r1, #1
 800b86e:	fa01 f303 	lsl.w	r3, r1, r3
 800b872:	041b      	lsls	r3, r3, #16
 800b874:	43db      	mvns	r3, r3
 800b876:	68f9      	ldr	r1, [r7, #12]
 800b878:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b87c:	4013      	ands	r3, r2
 800b87e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	015a      	lsls	r2, r3, #5
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	4413      	add	r3, r2
 800b888:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b88c:	681a      	ldr	r2, [r3, #0]
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	0159      	lsls	r1, r3, #5
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	440b      	add	r3, r1
 800b896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b89a:	4619      	mov	r1, r3
 800b89c:	4b05      	ldr	r3, [pc, #20]	@ (800b8b4 <USB_DeactivateEndpoint+0x1b4>)
 800b89e:	4013      	ands	r3, r2
 800b8a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b8a2:	2300      	movs	r3, #0
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3714      	adds	r7, #20
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr
 800b8b0:	ec337800 	.word	0xec337800
 800b8b4:	eff37800 	.word	0xeff37800

0800b8b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b08a      	sub	sp, #40	@ 0x28
 800b8bc:	af02      	add	r7, sp, #8
 800b8be:	60f8      	str	r0, [r7, #12]
 800b8c0:	60b9      	str	r1, [r7, #8]
 800b8c2:	4613      	mov	r3, r2
 800b8c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	785b      	ldrb	r3, [r3, #1]
 800b8d4:	2b01      	cmp	r3, #1
 800b8d6:	f040 8181 	bne.w	800bbdc <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b8da:	68bb      	ldr	r3, [r7, #8]
 800b8dc:	691b      	ldr	r3, [r3, #16]
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d132      	bne.n	800b948 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b8e2:	69bb      	ldr	r3, [r7, #24]
 800b8e4:	015a      	lsls	r2, r3, #5
 800b8e6:	69fb      	ldr	r3, [r7, #28]
 800b8e8:	4413      	add	r3, r2
 800b8ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8ee:	691a      	ldr	r2, [r3, #16]
 800b8f0:	69bb      	ldr	r3, [r7, #24]
 800b8f2:	0159      	lsls	r1, r3, #5
 800b8f4:	69fb      	ldr	r3, [r7, #28]
 800b8f6:	440b      	add	r3, r1
 800b8f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	4ba5      	ldr	r3, [pc, #660]	@ (800bb94 <USB_EPStartXfer+0x2dc>)
 800b900:	4013      	ands	r3, r2
 800b902:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	015a      	lsls	r2, r3, #5
 800b908:	69fb      	ldr	r3, [r7, #28]
 800b90a:	4413      	add	r3, r2
 800b90c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	69ba      	ldr	r2, [r7, #24]
 800b914:	0151      	lsls	r1, r2, #5
 800b916:	69fa      	ldr	r2, [r7, #28]
 800b918:	440a      	add	r2, r1
 800b91a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b91e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b922:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b924:	69bb      	ldr	r3, [r7, #24]
 800b926:	015a      	lsls	r2, r3, #5
 800b928:	69fb      	ldr	r3, [r7, #28]
 800b92a:	4413      	add	r3, r2
 800b92c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b930:	691a      	ldr	r2, [r3, #16]
 800b932:	69bb      	ldr	r3, [r7, #24]
 800b934:	0159      	lsls	r1, r3, #5
 800b936:	69fb      	ldr	r3, [r7, #28]
 800b938:	440b      	add	r3, r1
 800b93a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b93e:	4619      	mov	r1, r3
 800b940:	4b95      	ldr	r3, [pc, #596]	@ (800bb98 <USB_EPStartXfer+0x2e0>)
 800b942:	4013      	ands	r3, r2
 800b944:	610b      	str	r3, [r1, #16]
 800b946:	e092      	b.n	800ba6e <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b948:	69bb      	ldr	r3, [r7, #24]
 800b94a:	015a      	lsls	r2, r3, #5
 800b94c:	69fb      	ldr	r3, [r7, #28]
 800b94e:	4413      	add	r3, r2
 800b950:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b954:	691a      	ldr	r2, [r3, #16]
 800b956:	69bb      	ldr	r3, [r7, #24]
 800b958:	0159      	lsls	r1, r3, #5
 800b95a:	69fb      	ldr	r3, [r7, #28]
 800b95c:	440b      	add	r3, r1
 800b95e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b962:	4619      	mov	r1, r3
 800b964:	4b8c      	ldr	r3, [pc, #560]	@ (800bb98 <USB_EPStartXfer+0x2e0>)
 800b966:	4013      	ands	r3, r2
 800b968:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b96a:	69bb      	ldr	r3, [r7, #24]
 800b96c:	015a      	lsls	r2, r3, #5
 800b96e:	69fb      	ldr	r3, [r7, #28]
 800b970:	4413      	add	r3, r2
 800b972:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b976:	691a      	ldr	r2, [r3, #16]
 800b978:	69bb      	ldr	r3, [r7, #24]
 800b97a:	0159      	lsls	r1, r3, #5
 800b97c:	69fb      	ldr	r3, [r7, #28]
 800b97e:	440b      	add	r3, r1
 800b980:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b984:	4619      	mov	r1, r3
 800b986:	4b83      	ldr	r3, [pc, #524]	@ (800bb94 <USB_EPStartXfer+0x2dc>)
 800b988:	4013      	ands	r3, r2
 800b98a:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800b98c:	69bb      	ldr	r3, [r7, #24]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d11a      	bne.n	800b9c8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	691a      	ldr	r2, [r3, #16]
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	689b      	ldr	r3, [r3, #8]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d903      	bls.n	800b9a6 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	689a      	ldr	r2, [r3, #8]
 800b9a2:	68bb      	ldr	r3, [r7, #8]
 800b9a4:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b9a6:	69bb      	ldr	r3, [r7, #24]
 800b9a8:	015a      	lsls	r2, r3, #5
 800b9aa:	69fb      	ldr	r3, [r7, #28]
 800b9ac:	4413      	add	r3, r2
 800b9ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9b2:	691b      	ldr	r3, [r3, #16]
 800b9b4:	69ba      	ldr	r2, [r7, #24]
 800b9b6:	0151      	lsls	r1, r2, #5
 800b9b8:	69fa      	ldr	r2, [r7, #28]
 800b9ba:	440a      	add	r2, r1
 800b9bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b9c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b9c4:	6113      	str	r3, [r2, #16]
 800b9c6:	e01b      	b.n	800ba00 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b9c8:	69bb      	ldr	r3, [r7, #24]
 800b9ca:	015a      	lsls	r2, r3, #5
 800b9cc:	69fb      	ldr	r3, [r7, #28]
 800b9ce:	4413      	add	r3, r2
 800b9d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9d4:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	6919      	ldr	r1, [r3, #16]
 800b9da:	68bb      	ldr	r3, [r7, #8]
 800b9dc:	689b      	ldr	r3, [r3, #8]
 800b9de:	440b      	add	r3, r1
 800b9e0:	1e59      	subs	r1, r3, #1
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	689b      	ldr	r3, [r3, #8]
 800b9e6:	fbb1 f3f3 	udiv	r3, r1, r3
 800b9ea:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b9ec:	4b6b      	ldr	r3, [pc, #428]	@ (800bb9c <USB_EPStartXfer+0x2e4>)
 800b9ee:	400b      	ands	r3, r1
 800b9f0:	69b9      	ldr	r1, [r7, #24]
 800b9f2:	0148      	lsls	r0, r1, #5
 800b9f4:	69f9      	ldr	r1, [r7, #28]
 800b9f6:	4401      	add	r1, r0
 800b9f8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ba00:	69bb      	ldr	r3, [r7, #24]
 800ba02:	015a      	lsls	r2, r3, #5
 800ba04:	69fb      	ldr	r3, [r7, #28]
 800ba06:	4413      	add	r3, r2
 800ba08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba0c:	691a      	ldr	r2, [r3, #16]
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	691b      	ldr	r3, [r3, #16]
 800ba12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba16:	69b9      	ldr	r1, [r7, #24]
 800ba18:	0148      	lsls	r0, r1, #5
 800ba1a:	69f9      	ldr	r1, [r7, #28]
 800ba1c:	4401      	add	r1, r0
 800ba1e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ba22:	4313      	orrs	r3, r2
 800ba24:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ba26:	68bb      	ldr	r3, [r7, #8]
 800ba28:	791b      	ldrb	r3, [r3, #4]
 800ba2a:	2b01      	cmp	r3, #1
 800ba2c:	d11f      	bne.n	800ba6e <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ba2e:	69bb      	ldr	r3, [r7, #24]
 800ba30:	015a      	lsls	r2, r3, #5
 800ba32:	69fb      	ldr	r3, [r7, #28]
 800ba34:	4413      	add	r3, r2
 800ba36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba3a:	691b      	ldr	r3, [r3, #16]
 800ba3c:	69ba      	ldr	r2, [r7, #24]
 800ba3e:	0151      	lsls	r1, r2, #5
 800ba40:	69fa      	ldr	r2, [r7, #28]
 800ba42:	440a      	add	r2, r1
 800ba44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ba48:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800ba4c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ba4e:	69bb      	ldr	r3, [r7, #24]
 800ba50:	015a      	lsls	r2, r3, #5
 800ba52:	69fb      	ldr	r3, [r7, #28]
 800ba54:	4413      	add	r3, r2
 800ba56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba5a:	691b      	ldr	r3, [r3, #16]
 800ba5c:	69ba      	ldr	r2, [r7, #24]
 800ba5e:	0151      	lsls	r1, r2, #5
 800ba60:	69fa      	ldr	r2, [r7, #28]
 800ba62:	440a      	add	r2, r1
 800ba64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ba68:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800ba6c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ba6e:	79fb      	ldrb	r3, [r7, #7]
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d14b      	bne.n	800bb0c <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	69db      	ldr	r3, [r3, #28]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d009      	beq.n	800ba90 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ba7c:	69bb      	ldr	r3, [r7, #24]
 800ba7e:	015a      	lsls	r2, r3, #5
 800ba80:	69fb      	ldr	r3, [r7, #28]
 800ba82:	4413      	add	r3, r2
 800ba84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba88:	461a      	mov	r2, r3
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	69db      	ldr	r3, [r3, #28]
 800ba8e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	791b      	ldrb	r3, [r3, #4]
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d128      	bne.n	800baea <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ba98:	69fb      	ldr	r3, [r7, #28]
 800ba9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba9e:	689b      	ldr	r3, [r3, #8]
 800baa0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d110      	bne.n	800baca <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800baa8:	69bb      	ldr	r3, [r7, #24]
 800baaa:	015a      	lsls	r2, r3, #5
 800baac:	69fb      	ldr	r3, [r7, #28]
 800baae:	4413      	add	r3, r2
 800bab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	69ba      	ldr	r2, [r7, #24]
 800bab8:	0151      	lsls	r1, r2, #5
 800baba:	69fa      	ldr	r2, [r7, #28]
 800babc:	440a      	add	r2, r1
 800babe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bac2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800bac6:	6013      	str	r3, [r2, #0]
 800bac8:	e00f      	b.n	800baea <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800baca:	69bb      	ldr	r3, [r7, #24]
 800bacc:	015a      	lsls	r2, r3, #5
 800bace:	69fb      	ldr	r3, [r7, #28]
 800bad0:	4413      	add	r3, r2
 800bad2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	69ba      	ldr	r2, [r7, #24]
 800bada:	0151      	lsls	r1, r2, #5
 800badc:	69fa      	ldr	r2, [r7, #28]
 800bade:	440a      	add	r2, r1
 800bae0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bae4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bae8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800baea:	69bb      	ldr	r3, [r7, #24]
 800baec:	015a      	lsls	r2, r3, #5
 800baee:	69fb      	ldr	r3, [r7, #28]
 800baf0:	4413      	add	r3, r2
 800baf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	69ba      	ldr	r2, [r7, #24]
 800bafa:	0151      	lsls	r1, r2, #5
 800bafc:	69fa      	ldr	r2, [r7, #28]
 800bafe:	440a      	add	r2, r1
 800bb00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bb04:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800bb08:	6013      	str	r3, [r2, #0]
 800bb0a:	e16a      	b.n	800bde2 <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bb0c:	69bb      	ldr	r3, [r7, #24]
 800bb0e:	015a      	lsls	r2, r3, #5
 800bb10:	69fb      	ldr	r3, [r7, #28]
 800bb12:	4413      	add	r3, r2
 800bb14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	69ba      	ldr	r2, [r7, #24]
 800bb1c:	0151      	lsls	r1, r2, #5
 800bb1e:	69fa      	ldr	r2, [r7, #28]
 800bb20:	440a      	add	r2, r1
 800bb22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bb26:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800bb2a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bb2c:	68bb      	ldr	r3, [r7, #8]
 800bb2e:	791b      	ldrb	r3, [r3, #4]
 800bb30:	2b01      	cmp	r3, #1
 800bb32:	d015      	beq.n	800bb60 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800bb34:	68bb      	ldr	r3, [r7, #8]
 800bb36:	691b      	ldr	r3, [r3, #16]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	f000 8152 	beq.w	800bde2 <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bb3e:	69fb      	ldr	r3, [r7, #28]
 800bb40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb44:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	781b      	ldrb	r3, [r3, #0]
 800bb4a:	f003 030f 	and.w	r3, r3, #15
 800bb4e:	2101      	movs	r1, #1
 800bb50:	fa01 f303 	lsl.w	r3, r1, r3
 800bb54:	69f9      	ldr	r1, [r7, #28]
 800bb56:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	634b      	str	r3, [r1, #52]	@ 0x34
 800bb5e:	e140      	b.n	800bde2 <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bb60:	69fb      	ldr	r3, [r7, #28]
 800bb62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb66:	689b      	ldr	r3, [r3, #8]
 800bb68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d117      	bne.n	800bba0 <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bb70:	69bb      	ldr	r3, [r7, #24]
 800bb72:	015a      	lsls	r2, r3, #5
 800bb74:	69fb      	ldr	r3, [r7, #28]
 800bb76:	4413      	add	r3, r2
 800bb78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	69ba      	ldr	r2, [r7, #24]
 800bb80:	0151      	lsls	r1, r2, #5
 800bb82:	69fa      	ldr	r2, [r7, #28]
 800bb84:	440a      	add	r2, r1
 800bb86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bb8a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800bb8e:	6013      	str	r3, [r2, #0]
 800bb90:	e016      	b.n	800bbc0 <USB_EPStartXfer+0x308>
 800bb92:	bf00      	nop
 800bb94:	e007ffff 	.word	0xe007ffff
 800bb98:	fff80000 	.word	0xfff80000
 800bb9c:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bba0:	69bb      	ldr	r3, [r7, #24]
 800bba2:	015a      	lsls	r2, r3, #5
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	4413      	add	r3, r2
 800bba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	69ba      	ldr	r2, [r7, #24]
 800bbb0:	0151      	lsls	r1, r2, #5
 800bbb2:	69fa      	ldr	r2, [r7, #28]
 800bbb4:	440a      	add	r2, r1
 800bbb6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bbba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bbbe:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	68d9      	ldr	r1, [r3, #12]
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	781a      	ldrb	r2, [r3, #0]
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	691b      	ldr	r3, [r3, #16]
 800bbcc:	b298      	uxth	r0, r3
 800bbce:	79fb      	ldrb	r3, [r7, #7]
 800bbd0:	9300      	str	r3, [sp, #0]
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	68f8      	ldr	r0, [r7, #12]
 800bbd6:	f000 f9b9 	bl	800bf4c <USB_WritePacket>
 800bbda:	e102      	b.n	800bde2 <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bbdc:	69bb      	ldr	r3, [r7, #24]
 800bbde:	015a      	lsls	r2, r3, #5
 800bbe0:	69fb      	ldr	r3, [r7, #28]
 800bbe2:	4413      	add	r3, r2
 800bbe4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbe8:	691a      	ldr	r2, [r3, #16]
 800bbea:	69bb      	ldr	r3, [r7, #24]
 800bbec:	0159      	lsls	r1, r3, #5
 800bbee:	69fb      	ldr	r3, [r7, #28]
 800bbf0:	440b      	add	r3, r1
 800bbf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	4b7c      	ldr	r3, [pc, #496]	@ (800bdec <USB_EPStartXfer+0x534>)
 800bbfa:	4013      	ands	r3, r2
 800bbfc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bbfe:	69bb      	ldr	r3, [r7, #24]
 800bc00:	015a      	lsls	r2, r3, #5
 800bc02:	69fb      	ldr	r3, [r7, #28]
 800bc04:	4413      	add	r3, r2
 800bc06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc0a:	691a      	ldr	r2, [r3, #16]
 800bc0c:	69bb      	ldr	r3, [r7, #24]
 800bc0e:	0159      	lsls	r1, r3, #5
 800bc10:	69fb      	ldr	r3, [r7, #28]
 800bc12:	440b      	add	r3, r1
 800bc14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc18:	4619      	mov	r1, r3
 800bc1a:	4b75      	ldr	r3, [pc, #468]	@ (800bdf0 <USB_EPStartXfer+0x538>)
 800bc1c:	4013      	ands	r3, r2
 800bc1e:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800bc20:	69bb      	ldr	r3, [r7, #24]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d12f      	bne.n	800bc86 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	691b      	ldr	r3, [r3, #16]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d003      	beq.n	800bc36 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	689a      	ldr	r2, [r3, #8]
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	689a      	ldr	r2, [r3, #8]
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	015a      	lsls	r2, r3, #5
 800bc42:	69fb      	ldr	r3, [r7, #28]
 800bc44:	4413      	add	r3, r2
 800bc46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc4a:	691a      	ldr	r2, [r3, #16]
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	6a1b      	ldr	r3, [r3, #32]
 800bc50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bc54:	69b9      	ldr	r1, [r7, #24]
 800bc56:	0148      	lsls	r0, r1, #5
 800bc58:	69f9      	ldr	r1, [r7, #28]
 800bc5a:	4401      	add	r1, r0
 800bc5c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bc60:	4313      	orrs	r3, r2
 800bc62:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bc64:	69bb      	ldr	r3, [r7, #24]
 800bc66:	015a      	lsls	r2, r3, #5
 800bc68:	69fb      	ldr	r3, [r7, #28]
 800bc6a:	4413      	add	r3, r2
 800bc6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc70:	691b      	ldr	r3, [r3, #16]
 800bc72:	69ba      	ldr	r2, [r7, #24]
 800bc74:	0151      	lsls	r1, r2, #5
 800bc76:	69fa      	ldr	r2, [r7, #28]
 800bc78:	440a      	add	r2, r1
 800bc7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bc7e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bc82:	6113      	str	r3, [r2, #16]
 800bc84:	e05f      	b.n	800bd46 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	691b      	ldr	r3, [r3, #16]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d123      	bne.n	800bcd6 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bc8e:	69bb      	ldr	r3, [r7, #24]
 800bc90:	015a      	lsls	r2, r3, #5
 800bc92:	69fb      	ldr	r3, [r7, #28]
 800bc94:	4413      	add	r3, r2
 800bc96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc9a:	691a      	ldr	r2, [r3, #16]
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	689b      	ldr	r3, [r3, #8]
 800bca0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bca4:	69b9      	ldr	r1, [r7, #24]
 800bca6:	0148      	lsls	r0, r1, #5
 800bca8:	69f9      	ldr	r1, [r7, #28]
 800bcaa:	4401      	add	r1, r0
 800bcac:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bcb0:	4313      	orrs	r3, r2
 800bcb2:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bcb4:	69bb      	ldr	r3, [r7, #24]
 800bcb6:	015a      	lsls	r2, r3, #5
 800bcb8:	69fb      	ldr	r3, [r7, #28]
 800bcba:	4413      	add	r3, r2
 800bcbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bcc0:	691b      	ldr	r3, [r3, #16]
 800bcc2:	69ba      	ldr	r2, [r7, #24]
 800bcc4:	0151      	lsls	r1, r2, #5
 800bcc6:	69fa      	ldr	r2, [r7, #28]
 800bcc8:	440a      	add	r2, r1
 800bcca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bcce:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bcd2:	6113      	str	r3, [r2, #16]
 800bcd4:	e037      	b.n	800bd46 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	691a      	ldr	r2, [r3, #16]
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	689b      	ldr	r3, [r3, #8]
 800bcde:	4413      	add	r3, r2
 800bce0:	1e5a      	subs	r2, r3, #1
 800bce2:	68bb      	ldr	r3, [r7, #8]
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bcea:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	689b      	ldr	r3, [r3, #8]
 800bcf0:	8afa      	ldrh	r2, [r7, #22]
 800bcf2:	fb03 f202 	mul.w	r2, r3, r2
 800bcf6:	68bb      	ldr	r3, [r7, #8]
 800bcf8:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bcfa:	69bb      	ldr	r3, [r7, #24]
 800bcfc:	015a      	lsls	r2, r3, #5
 800bcfe:	69fb      	ldr	r3, [r7, #28]
 800bd00:	4413      	add	r3, r2
 800bd02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd06:	691a      	ldr	r2, [r3, #16]
 800bd08:	8afb      	ldrh	r3, [r7, #22]
 800bd0a:	04d9      	lsls	r1, r3, #19
 800bd0c:	4b39      	ldr	r3, [pc, #228]	@ (800bdf4 <USB_EPStartXfer+0x53c>)
 800bd0e:	400b      	ands	r3, r1
 800bd10:	69b9      	ldr	r1, [r7, #24]
 800bd12:	0148      	lsls	r0, r1, #5
 800bd14:	69f9      	ldr	r1, [r7, #28]
 800bd16:	4401      	add	r1, r0
 800bd18:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bd1c:	4313      	orrs	r3, r2
 800bd1e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800bd20:	69bb      	ldr	r3, [r7, #24]
 800bd22:	015a      	lsls	r2, r3, #5
 800bd24:	69fb      	ldr	r3, [r7, #28]
 800bd26:	4413      	add	r3, r2
 800bd28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd2c:	691a      	ldr	r2, [r3, #16]
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	6a1b      	ldr	r3, [r3, #32]
 800bd32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bd36:	69b9      	ldr	r1, [r7, #24]
 800bd38:	0148      	lsls	r0, r1, #5
 800bd3a:	69f9      	ldr	r1, [r7, #28]
 800bd3c:	4401      	add	r1, r0
 800bd3e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800bd42:	4313      	orrs	r3, r2
 800bd44:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800bd46:	79fb      	ldrb	r3, [r7, #7]
 800bd48:	2b01      	cmp	r3, #1
 800bd4a:	d10d      	bne.n	800bd68 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bd4c:	68bb      	ldr	r3, [r7, #8]
 800bd4e:	68db      	ldr	r3, [r3, #12]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d009      	beq.n	800bd68 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	68d9      	ldr	r1, [r3, #12]
 800bd58:	69bb      	ldr	r3, [r7, #24]
 800bd5a:	015a      	lsls	r2, r3, #5
 800bd5c:	69fb      	ldr	r3, [r7, #28]
 800bd5e:	4413      	add	r3, r2
 800bd60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd64:	460a      	mov	r2, r1
 800bd66:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	791b      	ldrb	r3, [r3, #4]
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d128      	bne.n	800bdc2 <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bd70:	69fb      	ldr	r3, [r7, #28]
 800bd72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd76:	689b      	ldr	r3, [r3, #8]
 800bd78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d110      	bne.n	800bda2 <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bd80:	69bb      	ldr	r3, [r7, #24]
 800bd82:	015a      	lsls	r2, r3, #5
 800bd84:	69fb      	ldr	r3, [r7, #28]
 800bd86:	4413      	add	r3, r2
 800bd88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	69ba      	ldr	r2, [r7, #24]
 800bd90:	0151      	lsls	r1, r2, #5
 800bd92:	69fa      	ldr	r2, [r7, #28]
 800bd94:	440a      	add	r2, r1
 800bd96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bd9a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800bd9e:	6013      	str	r3, [r2, #0]
 800bda0:	e00f      	b.n	800bdc2 <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bda2:	69bb      	ldr	r3, [r7, #24]
 800bda4:	015a      	lsls	r2, r3, #5
 800bda6:	69fb      	ldr	r3, [r7, #28]
 800bda8:	4413      	add	r3, r2
 800bdaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	69ba      	ldr	r2, [r7, #24]
 800bdb2:	0151      	lsls	r1, r2, #5
 800bdb4:	69fa      	ldr	r2, [r7, #28]
 800bdb6:	440a      	add	r2, r1
 800bdb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bdbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bdc0:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bdc2:	69bb      	ldr	r3, [r7, #24]
 800bdc4:	015a      	lsls	r2, r3, #5
 800bdc6:	69fb      	ldr	r3, [r7, #28]
 800bdc8:	4413      	add	r3, r2
 800bdca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	69ba      	ldr	r2, [r7, #24]
 800bdd2:	0151      	lsls	r1, r2, #5
 800bdd4:	69fa      	ldr	r2, [r7, #28]
 800bdd6:	440a      	add	r2, r1
 800bdd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bddc:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800bde0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bde2:	2300      	movs	r3, #0
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3720      	adds	r7, #32
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}
 800bdec:	fff80000 	.word	0xfff80000
 800bdf0:	e007ffff 	.word	0xe007ffff
 800bdf4:	1ff80000 	.word	0x1ff80000

0800bdf8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bdf8:	b480      	push	{r7}
 800bdfa:	b087      	sub	sp, #28
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
 800be00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800be02:	2300      	movs	r3, #0
 800be04:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800be06:	2300      	movs	r3, #0
 800be08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	785b      	ldrb	r3, [r3, #1]
 800be12:	2b01      	cmp	r3, #1
 800be14:	d14a      	bne.n	800beac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	781b      	ldrb	r3, [r3, #0]
 800be1a:	015a      	lsls	r2, r3, #5
 800be1c:	693b      	ldr	r3, [r7, #16]
 800be1e:	4413      	add	r3, r2
 800be20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800be2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800be2e:	f040 8086 	bne.w	800bf3e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800be32:	683b      	ldr	r3, [r7, #0]
 800be34:	781b      	ldrb	r3, [r3, #0]
 800be36:	015a      	lsls	r2, r3, #5
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	4413      	add	r3, r2
 800be3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	683a      	ldr	r2, [r7, #0]
 800be44:	7812      	ldrb	r2, [r2, #0]
 800be46:	0151      	lsls	r1, r2, #5
 800be48:	693a      	ldr	r2, [r7, #16]
 800be4a:	440a      	add	r2, r1
 800be4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be50:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800be54:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	781b      	ldrb	r3, [r3, #0]
 800be5a:	015a      	lsls	r2, r3, #5
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	4413      	add	r3, r2
 800be60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	683a      	ldr	r2, [r7, #0]
 800be68:	7812      	ldrb	r2, [r2, #0]
 800be6a:	0151      	lsls	r1, r2, #5
 800be6c:	693a      	ldr	r2, [r7, #16]
 800be6e:	440a      	add	r2, r1
 800be70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800be78:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800be7a:	68fb      	ldr	r3, [r7, #12]
 800be7c:	3301      	adds	r3, #1
 800be7e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	f242 7210 	movw	r2, #10000	@ 0x2710
 800be86:	4293      	cmp	r3, r2
 800be88:	d902      	bls.n	800be90 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800be8a:	2301      	movs	r3, #1
 800be8c:	75fb      	strb	r3, [r7, #23]
          break;
 800be8e:	e056      	b.n	800bf3e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	015a      	lsls	r2, r3, #5
 800be96:	693b      	ldr	r3, [r7, #16]
 800be98:	4413      	add	r3, r2
 800be9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bea4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bea8:	d0e7      	beq.n	800be7a <USB_EPStopXfer+0x82>
 800beaa:	e048      	b.n	800bf3e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800beac:	683b      	ldr	r3, [r7, #0]
 800beae:	781b      	ldrb	r3, [r3, #0]
 800beb0:	015a      	lsls	r2, r3, #5
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	4413      	add	r3, r2
 800beb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bec0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bec4:	d13b      	bne.n	800bf3e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	015a      	lsls	r2, r3, #5
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	4413      	add	r3, r2
 800bed0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	683a      	ldr	r2, [r7, #0]
 800bed8:	7812      	ldrb	r2, [r2, #0]
 800beda:	0151      	lsls	r1, r2, #5
 800bedc:	693a      	ldr	r2, [r7, #16]
 800bede:	440a      	add	r2, r1
 800bee0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bee4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bee8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	781b      	ldrb	r3, [r3, #0]
 800beee:	015a      	lsls	r2, r3, #5
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	4413      	add	r3, r2
 800bef4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	683a      	ldr	r2, [r7, #0]
 800befc:	7812      	ldrb	r2, [r2, #0]
 800befe:	0151      	lsls	r1, r2, #5
 800bf00:	693a      	ldr	r2, [r7, #16]
 800bf02:	440a      	add	r2, r1
 800bf04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bf08:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bf0c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	3301      	adds	r3, #1
 800bf12:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	f242 7210 	movw	r2, #10000	@ 0x2710
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d902      	bls.n	800bf24 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800bf1e:	2301      	movs	r3, #1
 800bf20:	75fb      	strb	r3, [r7, #23]
          break;
 800bf22:	e00c      	b.n	800bf3e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	781b      	ldrb	r3, [r3, #0]
 800bf28:	015a      	lsls	r2, r3, #5
 800bf2a:	693b      	ldr	r3, [r7, #16]
 800bf2c:	4413      	add	r3, r2
 800bf2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bf38:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bf3c:	d0e7      	beq.n	800bf0e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800bf3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf40:	4618      	mov	r0, r3
 800bf42:	371c      	adds	r7, #28
 800bf44:	46bd      	mov	sp, r7
 800bf46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4a:	4770      	bx	lr

0800bf4c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bf4c:	b480      	push	{r7}
 800bf4e:	b089      	sub	sp, #36	@ 0x24
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	4611      	mov	r1, r2
 800bf58:	461a      	mov	r2, r3
 800bf5a:	460b      	mov	r3, r1
 800bf5c:	71fb      	strb	r3, [r7, #7]
 800bf5e:	4613      	mov	r3, r2
 800bf60:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bf6a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d123      	bne.n	800bfba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bf72:	88bb      	ldrh	r3, [r7, #4]
 800bf74:	3303      	adds	r3, #3
 800bf76:	089b      	lsrs	r3, r3, #2
 800bf78:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	61bb      	str	r3, [r7, #24]
 800bf7e:	e018      	b.n	800bfb2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bf80:	79fb      	ldrb	r3, [r7, #7]
 800bf82:	031a      	lsls	r2, r3, #12
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	4413      	add	r3, r2
 800bf88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	69fb      	ldr	r3, [r7, #28]
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bf94:	69fb      	ldr	r3, [r7, #28]
 800bf96:	3301      	adds	r3, #1
 800bf98:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bf9a:	69fb      	ldr	r3, [r7, #28]
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bfa0:	69fb      	ldr	r3, [r7, #28]
 800bfa2:	3301      	adds	r3, #1
 800bfa4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	3301      	adds	r3, #1
 800bfaa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bfac:	69bb      	ldr	r3, [r7, #24]
 800bfae:	3301      	adds	r3, #1
 800bfb0:	61bb      	str	r3, [r7, #24]
 800bfb2:	69ba      	ldr	r2, [r7, #24]
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d3e2      	bcc.n	800bf80 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bfba:	2300      	movs	r3, #0
}
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	3724      	adds	r7, #36	@ 0x24
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfc6:	4770      	bx	lr

0800bfc8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bfc8:	b480      	push	{r7}
 800bfca:	b08b      	sub	sp, #44	@ 0x2c
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	60f8      	str	r0, [r7, #12]
 800bfd0:	60b9      	str	r1, [r7, #8]
 800bfd2:	4613      	mov	r3, r2
 800bfd4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bfde:	88fb      	ldrh	r3, [r7, #6]
 800bfe0:	089b      	lsrs	r3, r3, #2
 800bfe2:	b29b      	uxth	r3, r3
 800bfe4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bfe6:	88fb      	ldrh	r3, [r7, #6]
 800bfe8:	f003 0303 	and.w	r3, r3, #3
 800bfec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bfee:	2300      	movs	r3, #0
 800bff0:	623b      	str	r3, [r7, #32]
 800bff2:	e014      	b.n	800c01e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bff4:	69bb      	ldr	r3, [r7, #24]
 800bff6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bffa:	681a      	ldr	r2, [r3, #0]
 800bffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bffe:	601a      	str	r2, [r3, #0]
    pDest++;
 800c000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c002:	3301      	adds	r3, #1
 800c004:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c008:	3301      	adds	r3, #1
 800c00a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c00c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c00e:	3301      	adds	r3, #1
 800c010:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c014:	3301      	adds	r3, #1
 800c016:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800c018:	6a3b      	ldr	r3, [r7, #32]
 800c01a:	3301      	adds	r3, #1
 800c01c:	623b      	str	r3, [r7, #32]
 800c01e:	6a3a      	ldr	r2, [r7, #32]
 800c020:	697b      	ldr	r3, [r7, #20]
 800c022:	429a      	cmp	r2, r3
 800c024:	d3e6      	bcc.n	800bff4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c026:	8bfb      	ldrh	r3, [r7, #30]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d01e      	beq.n	800c06a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c02c:	2300      	movs	r3, #0
 800c02e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c030:	69bb      	ldr	r3, [r7, #24]
 800c032:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c036:	461a      	mov	r2, r3
 800c038:	f107 0310 	add.w	r3, r7, #16
 800c03c:	6812      	ldr	r2, [r2, #0]
 800c03e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c040:	693a      	ldr	r2, [r7, #16]
 800c042:	6a3b      	ldr	r3, [r7, #32]
 800c044:	b2db      	uxtb	r3, r3
 800c046:	00db      	lsls	r3, r3, #3
 800c048:	fa22 f303 	lsr.w	r3, r2, r3
 800c04c:	b2da      	uxtb	r2, r3
 800c04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c050:	701a      	strb	r2, [r3, #0]
      i++;
 800c052:	6a3b      	ldr	r3, [r7, #32]
 800c054:	3301      	adds	r3, #1
 800c056:	623b      	str	r3, [r7, #32]
      pDest++;
 800c058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c05a:	3301      	adds	r3, #1
 800c05c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800c05e:	8bfb      	ldrh	r3, [r7, #30]
 800c060:	3b01      	subs	r3, #1
 800c062:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c064:	8bfb      	ldrh	r3, [r7, #30]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d1ea      	bne.n	800c040 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c06a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c06c:	4618      	mov	r0, r3
 800c06e:	372c      	adds	r7, #44	@ 0x2c
 800c070:	46bd      	mov	sp, r7
 800c072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c076:	4770      	bx	lr

0800c078 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c078:	b480      	push	{r7}
 800c07a:	b085      	sub	sp, #20
 800c07c:	af00      	add	r7, sp, #0
 800c07e:	6078      	str	r0, [r7, #4]
 800c080:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c086:	683b      	ldr	r3, [r7, #0]
 800c088:	781b      	ldrb	r3, [r3, #0]
 800c08a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	785b      	ldrb	r3, [r3, #1]
 800c090:	2b01      	cmp	r3, #1
 800c092:	d12c      	bne.n	800c0ee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	015a      	lsls	r2, r3, #5
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	4413      	add	r3, r2
 800c09c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	db12      	blt.n	800c0cc <USB_EPSetStall+0x54>
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d00f      	beq.n	800c0cc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	015a      	lsls	r2, r3, #5
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	4413      	add	r3, r2
 800c0b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	68ba      	ldr	r2, [r7, #8]
 800c0bc:	0151      	lsls	r1, r2, #5
 800c0be:	68fa      	ldr	r2, [r7, #12]
 800c0c0:	440a      	add	r2, r1
 800c0c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c0c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c0ca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c0cc:	68bb      	ldr	r3, [r7, #8]
 800c0ce:	015a      	lsls	r2, r3, #5
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	4413      	add	r3, r2
 800c0d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	68ba      	ldr	r2, [r7, #8]
 800c0dc:	0151      	lsls	r1, r2, #5
 800c0de:	68fa      	ldr	r2, [r7, #12]
 800c0e0:	440a      	add	r2, r1
 800c0e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c0e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c0ea:	6013      	str	r3, [r2, #0]
 800c0ec:	e02b      	b.n	800c146 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	015a      	lsls	r2, r3, #5
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	4413      	add	r3, r2
 800c0f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	db12      	blt.n	800c126 <USB_EPSetStall+0xae>
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d00f      	beq.n	800c126 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	015a      	lsls	r2, r3, #5
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	4413      	add	r3, r2
 800c10e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	68ba      	ldr	r2, [r7, #8]
 800c116:	0151      	lsls	r1, r2, #5
 800c118:	68fa      	ldr	r2, [r7, #12]
 800c11a:	440a      	add	r2, r1
 800c11c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c120:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c124:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	015a      	lsls	r2, r3, #5
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	4413      	add	r3, r2
 800c12e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	68ba      	ldr	r2, [r7, #8]
 800c136:	0151      	lsls	r1, r2, #5
 800c138:	68fa      	ldr	r2, [r7, #12]
 800c13a:	440a      	add	r2, r1
 800c13c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c140:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c144:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c146:	2300      	movs	r3, #0
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3714      	adds	r7, #20
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr

0800c154 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c154:	b480      	push	{r7}
 800c156:	b085      	sub	sp, #20
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c162:	683b      	ldr	r3, [r7, #0]
 800c164:	781b      	ldrb	r3, [r3, #0]
 800c166:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	785b      	ldrb	r3, [r3, #1]
 800c16c:	2b01      	cmp	r3, #1
 800c16e:	d128      	bne.n	800c1c2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	015a      	lsls	r2, r3, #5
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	4413      	add	r3, r2
 800c178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	68ba      	ldr	r2, [r7, #8]
 800c180:	0151      	lsls	r1, r2, #5
 800c182:	68fa      	ldr	r2, [r7, #12]
 800c184:	440a      	add	r2, r1
 800c186:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c18a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c18e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	791b      	ldrb	r3, [r3, #4]
 800c194:	2b03      	cmp	r3, #3
 800c196:	d003      	beq.n	800c1a0 <USB_EPClearStall+0x4c>
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	791b      	ldrb	r3, [r3, #4]
 800c19c:	2b02      	cmp	r3, #2
 800c19e:	d138      	bne.n	800c212 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	015a      	lsls	r2, r3, #5
 800c1a4:	68fb      	ldr	r3, [r7, #12]
 800c1a6:	4413      	add	r3, r2
 800c1a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	68ba      	ldr	r2, [r7, #8]
 800c1b0:	0151      	lsls	r1, r2, #5
 800c1b2:	68fa      	ldr	r2, [r7, #12]
 800c1b4:	440a      	add	r2, r1
 800c1b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c1ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c1be:	6013      	str	r3, [r2, #0]
 800c1c0:	e027      	b.n	800c212 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c1c2:	68bb      	ldr	r3, [r7, #8]
 800c1c4:	015a      	lsls	r2, r3, #5
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	4413      	add	r3, r2
 800c1ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	68ba      	ldr	r2, [r7, #8]
 800c1d2:	0151      	lsls	r1, r2, #5
 800c1d4:	68fa      	ldr	r2, [r7, #12]
 800c1d6:	440a      	add	r2, r1
 800c1d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c1dc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c1e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	791b      	ldrb	r3, [r3, #4]
 800c1e6:	2b03      	cmp	r3, #3
 800c1e8:	d003      	beq.n	800c1f2 <USB_EPClearStall+0x9e>
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	791b      	ldrb	r3, [r3, #4]
 800c1ee:	2b02      	cmp	r3, #2
 800c1f0:	d10f      	bne.n	800c212 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c1f2:	68bb      	ldr	r3, [r7, #8]
 800c1f4:	015a      	lsls	r2, r3, #5
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	4413      	add	r3, r2
 800c1fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	68ba      	ldr	r2, [r7, #8]
 800c202:	0151      	lsls	r1, r2, #5
 800c204:	68fa      	ldr	r2, [r7, #12]
 800c206:	440a      	add	r2, r1
 800c208:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c20c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c210:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c212:	2300      	movs	r3, #0
}
 800c214:	4618      	mov	r0, r3
 800c216:	3714      	adds	r7, #20
 800c218:	46bd      	mov	sp, r7
 800c21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21e:	4770      	bx	lr

0800c220 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c220:	b480      	push	{r7}
 800c222:	b085      	sub	sp, #20
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
 800c228:	460b      	mov	r3, r1
 800c22a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	68fa      	ldr	r2, [r7, #12]
 800c23a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c23e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c242:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c24a:	681a      	ldr	r2, [r3, #0]
 800c24c:	78fb      	ldrb	r3, [r7, #3]
 800c24e:	011b      	lsls	r3, r3, #4
 800c250:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800c254:	68f9      	ldr	r1, [r7, #12]
 800c256:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c25a:	4313      	orrs	r3, r2
 800c25c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c25e:	2300      	movs	r3, #0
}
 800c260:	4618      	mov	r0, r3
 800c262:	3714      	adds	r7, #20
 800c264:	46bd      	mov	sp, r7
 800c266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c26a:	4770      	bx	lr

0800c26c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c26c:	b480      	push	{r7}
 800c26e:	b085      	sub	sp, #20
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	68fa      	ldr	r2, [r7, #12]
 800c282:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c286:	f023 0303 	bic.w	r3, r3, #3
 800c28a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c292:	685b      	ldr	r3, [r3, #4]
 800c294:	68fa      	ldr	r2, [r7, #12]
 800c296:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c29a:	f023 0302 	bic.w	r3, r3, #2
 800c29e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c2a0:	2300      	movs	r3, #0
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3714      	adds	r7, #20
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ac:	4770      	bx	lr

0800c2ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c2ae:	b480      	push	{r7}
 800c2b0:	b085      	sub	sp, #20
 800c2b2:	af00      	add	r7, sp, #0
 800c2b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	68fa      	ldr	r2, [r7, #12]
 800c2c4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c2c8:	f023 0303 	bic.w	r3, r3, #3
 800c2cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	68fa      	ldr	r2, [r7, #12]
 800c2d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c2dc:	f043 0302 	orr.w	r3, r3, #2
 800c2e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c2e2:	2300      	movs	r3, #0
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3714      	adds	r7, #20
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ee:	4770      	bx	lr

0800c2f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c2f0:	b480      	push	{r7}
 800c2f2:	b085      	sub	sp, #20
 800c2f4:	af00      	add	r7, sp, #0
 800c2f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	695b      	ldr	r3, [r3, #20]
 800c2fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	699b      	ldr	r3, [r3, #24]
 800c302:	68fa      	ldr	r2, [r7, #12]
 800c304:	4013      	ands	r3, r2
 800c306:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c308:	68fb      	ldr	r3, [r7, #12]
}
 800c30a:	4618      	mov	r0, r3
 800c30c:	3714      	adds	r7, #20
 800c30e:	46bd      	mov	sp, r7
 800c310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c314:	4770      	bx	lr

0800c316 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c316:	b480      	push	{r7}
 800c318:	b085      	sub	sp, #20
 800c31a:	af00      	add	r7, sp, #0
 800c31c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c328:	699b      	ldr	r3, [r3, #24]
 800c32a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c332:	69db      	ldr	r3, [r3, #28]
 800c334:	68ba      	ldr	r2, [r7, #8]
 800c336:	4013      	ands	r3, r2
 800c338:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	0c1b      	lsrs	r3, r3, #16
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3714      	adds	r7, #20
 800c342:	46bd      	mov	sp, r7
 800c344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c348:	4770      	bx	lr

0800c34a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c34a:	b480      	push	{r7}
 800c34c:	b085      	sub	sp, #20
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c35c:	699b      	ldr	r3, [r3, #24]
 800c35e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c366:	69db      	ldr	r3, [r3, #28]
 800c368:	68ba      	ldr	r2, [r7, #8]
 800c36a:	4013      	ands	r3, r2
 800c36c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c36e:	68bb      	ldr	r3, [r7, #8]
 800c370:	b29b      	uxth	r3, r3
}
 800c372:	4618      	mov	r0, r3
 800c374:	3714      	adds	r7, #20
 800c376:	46bd      	mov	sp, r7
 800c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37c:	4770      	bx	lr

0800c37e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c37e:	b480      	push	{r7}
 800c380:	b085      	sub	sp, #20
 800c382:	af00      	add	r7, sp, #0
 800c384:	6078      	str	r0, [r7, #4]
 800c386:	460b      	mov	r3, r1
 800c388:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c38e:	78fb      	ldrb	r3, [r7, #3]
 800c390:	015a      	lsls	r2, r3, #5
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	4413      	add	r3, r2
 800c396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c39a:	689b      	ldr	r3, [r3, #8]
 800c39c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3a4:	695b      	ldr	r3, [r3, #20]
 800c3a6:	68ba      	ldr	r2, [r7, #8]
 800c3a8:	4013      	ands	r3, r2
 800c3aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c3ac:	68bb      	ldr	r3, [r7, #8]
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3714      	adds	r7, #20
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr

0800c3ba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c3ba:	b480      	push	{r7}
 800c3bc:	b087      	sub	sp, #28
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
 800c3c2:	460b      	mov	r3, r1
 800c3c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3d0:	691b      	ldr	r3, [r3, #16]
 800c3d2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c3da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c3dc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c3de:	78fb      	ldrb	r3, [r7, #3]
 800c3e0:	f003 030f 	and.w	r3, r3, #15
 800c3e4:	68fa      	ldr	r2, [r7, #12]
 800c3e6:	fa22 f303 	lsr.w	r3, r2, r3
 800c3ea:	01db      	lsls	r3, r3, #7
 800c3ec:	b2db      	uxtb	r3, r3
 800c3ee:	693a      	ldr	r2, [r7, #16]
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c3f4:	78fb      	ldrb	r3, [r7, #3]
 800c3f6:	015a      	lsls	r2, r3, #5
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	4413      	add	r3, r2
 800c3fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c400:	689b      	ldr	r3, [r3, #8]
 800c402:	693a      	ldr	r2, [r7, #16]
 800c404:	4013      	ands	r3, r2
 800c406:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c408:	68bb      	ldr	r3, [r7, #8]
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	371c      	adds	r7, #28
 800c40e:	46bd      	mov	sp, r7
 800c410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c414:	4770      	bx	lr

0800c416 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c416:	b480      	push	{r7}
 800c418:	b083      	sub	sp, #12
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	695b      	ldr	r3, [r3, #20]
 800c422:	f003 0301 	and.w	r3, r3, #1
}
 800c426:	4618      	mov	r0, r3
 800c428:	370c      	adds	r7, #12
 800c42a:	46bd      	mov	sp, r7
 800c42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c430:	4770      	bx	lr
	...

0800c434 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800c434:	b480      	push	{r7}
 800c436:	b085      	sub	sp, #20
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c446:	681a      	ldr	r2, [r3, #0]
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c44e:	4619      	mov	r1, r3
 800c450:	4b09      	ldr	r3, [pc, #36]	@ (800c478 <USB_ActivateSetup+0x44>)
 800c452:	4013      	ands	r3, r2
 800c454:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	68fa      	ldr	r2, [r7, #12]
 800c460:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c468:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c46a:	2300      	movs	r3, #0
}
 800c46c:	4618      	mov	r0, r3
 800c46e:	3714      	adds	r7, #20
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr
 800c478:	fffff800 	.word	0xfffff800

0800c47c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800c47c:	b480      	push	{r7}
 800c47e:	b087      	sub	sp, #28
 800c480:	af00      	add	r7, sp, #0
 800c482:	60f8      	str	r0, [r7, #12]
 800c484:	460b      	mov	r3, r1
 800c486:	607a      	str	r2, [r7, #4]
 800c488:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c48e:	68fb      	ldr	r3, [r7, #12]
 800c490:	333c      	adds	r3, #60	@ 0x3c
 800c492:	3304      	adds	r3, #4
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	4a26      	ldr	r2, [pc, #152]	@ (800c534 <USB_EP0_OutStart+0xb8>)
 800c49c:	4293      	cmp	r3, r2
 800c49e:	d90a      	bls.n	800c4b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c4ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c4b0:	d101      	bne.n	800c4b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	e037      	b.n	800c526 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c4b6:	697b      	ldr	r3, [r7, #20]
 800c4b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4bc:	461a      	mov	r2, r3
 800c4be:	2300      	movs	r3, #0
 800c4c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c4c2:	697b      	ldr	r3, [r7, #20]
 800c4c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4c8:	691b      	ldr	r3, [r3, #16]
 800c4ca:	697a      	ldr	r2, [r7, #20]
 800c4cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c4d0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c4d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c4d6:	697b      	ldr	r3, [r7, #20]
 800c4d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4dc:	691b      	ldr	r3, [r3, #16]
 800c4de:	697a      	ldr	r2, [r7, #20]
 800c4e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c4e4:	f043 0318 	orr.w	r3, r3, #24
 800c4e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c4ea:	697b      	ldr	r3, [r7, #20]
 800c4ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c4f0:	691b      	ldr	r3, [r3, #16]
 800c4f2:	697a      	ldr	r2, [r7, #20]
 800c4f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c4f8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800c4fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c4fe:	7afb      	ldrb	r3, [r7, #11]
 800c500:	2b01      	cmp	r3, #1
 800c502:	d10f      	bne.n	800c524 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c504:	697b      	ldr	r3, [r7, #20]
 800c506:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c50a:	461a      	mov	r2, r3
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c510:	697b      	ldr	r3, [r7, #20]
 800c512:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	697a      	ldr	r2, [r7, #20]
 800c51a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c51e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800c522:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c524:	2300      	movs	r3, #0
}
 800c526:	4618      	mov	r0, r3
 800c528:	371c      	adds	r7, #28
 800c52a:	46bd      	mov	sp, r7
 800c52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c530:	4770      	bx	lr
 800c532:	bf00      	nop
 800c534:	4f54300a 	.word	0x4f54300a

0800c538 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c538:	b480      	push	{r7}
 800c53a:	b085      	sub	sp, #20
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c540:	2300      	movs	r3, #0
 800c542:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	3301      	adds	r3, #1
 800c548:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c550:	d901      	bls.n	800c556 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c552:	2303      	movs	r3, #3
 800c554:	e01b      	b.n	800c58e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	691b      	ldr	r3, [r3, #16]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	daf2      	bge.n	800c544 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c55e:	2300      	movs	r3, #0
 800c560:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	691b      	ldr	r3, [r3, #16]
 800c566:	f043 0201 	orr.w	r2, r3, #1
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	3301      	adds	r3, #1
 800c572:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c57a:	d901      	bls.n	800c580 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c57c:	2303      	movs	r3, #3
 800c57e:	e006      	b.n	800c58e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	691b      	ldr	r3, [r3, #16]
 800c584:	f003 0301 	and.w	r3, r3, #1
 800c588:	2b01      	cmp	r3, #1
 800c58a:	d0f0      	beq.n	800c56e <USB_CoreReset+0x36>

  return HAL_OK;
 800c58c:	2300      	movs	r3, #0
}
 800c58e:	4618      	mov	r0, r3
 800c590:	3714      	adds	r7, #20
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr
	...

0800c59c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c59c:	b580      	push	{r7, lr}
 800c59e:	b084      	sub	sp, #16
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	460b      	mov	r3, r1
 800c5a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c5a8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800c5ac:	f002 fcfe 	bl	800efac <USBD_static_malloc>
 800c5b0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d109      	bne.n	800c5cc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c5b8:	687b      	ldr	r3, [r7, #4]
 800c5ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	32b0      	adds	r2, #176	@ 0xb0
 800c5c2:	2100      	movs	r1, #0
 800c5c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c5c8:	2302      	movs	r3, #2
 800c5ca:	e0d4      	b.n	800c776 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c5cc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800c5d0:	2100      	movs	r1, #0
 800c5d2:	68f8      	ldr	r0, [r7, #12]
 800c5d4:	f002 fd2e 	bl	800f034 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	32b0      	adds	r2, #176	@ 0xb0
 800c5e2:	68f9      	ldr	r1, [r7, #12]
 800c5e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	32b0      	adds	r2, #176	@ 0xb0
 800c5f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	7c1b      	ldrb	r3, [r3, #16]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d138      	bne.n	800c676 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c604:	4b5e      	ldr	r3, [pc, #376]	@ (800c780 <USBD_CDC_Init+0x1e4>)
 800c606:	7819      	ldrb	r1, [r3, #0]
 800c608:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c60c:	2202      	movs	r2, #2
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f002 fba9 	bl	800ed66 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c614:	4b5a      	ldr	r3, [pc, #360]	@ (800c780 <USBD_CDC_Init+0x1e4>)
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	f003 020f 	and.w	r2, r3, #15
 800c61c:	6879      	ldr	r1, [r7, #4]
 800c61e:	4613      	mov	r3, r2
 800c620:	009b      	lsls	r3, r3, #2
 800c622:	4413      	add	r3, r2
 800c624:	009b      	lsls	r3, r3, #2
 800c626:	440b      	add	r3, r1
 800c628:	3324      	adds	r3, #36	@ 0x24
 800c62a:	2201      	movs	r2, #1
 800c62c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c62e:	4b55      	ldr	r3, [pc, #340]	@ (800c784 <USBD_CDC_Init+0x1e8>)
 800c630:	7819      	ldrb	r1, [r3, #0]
 800c632:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c636:	2202      	movs	r2, #2
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f002 fb94 	bl	800ed66 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c63e:	4b51      	ldr	r3, [pc, #324]	@ (800c784 <USBD_CDC_Init+0x1e8>)
 800c640:	781b      	ldrb	r3, [r3, #0]
 800c642:	f003 020f 	and.w	r2, r3, #15
 800c646:	6879      	ldr	r1, [r7, #4]
 800c648:	4613      	mov	r3, r2
 800c64a:	009b      	lsls	r3, r3, #2
 800c64c:	4413      	add	r3, r2
 800c64e:	009b      	lsls	r3, r3, #2
 800c650:	440b      	add	r3, r1
 800c652:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c656:	2201      	movs	r2, #1
 800c658:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c65a:	4b4b      	ldr	r3, [pc, #300]	@ (800c788 <USBD_CDC_Init+0x1ec>)
 800c65c:	781b      	ldrb	r3, [r3, #0]
 800c65e:	f003 020f 	and.w	r2, r3, #15
 800c662:	6879      	ldr	r1, [r7, #4]
 800c664:	4613      	mov	r3, r2
 800c666:	009b      	lsls	r3, r3, #2
 800c668:	4413      	add	r3, r2
 800c66a:	009b      	lsls	r3, r3, #2
 800c66c:	440b      	add	r3, r1
 800c66e:	3326      	adds	r3, #38	@ 0x26
 800c670:	2210      	movs	r2, #16
 800c672:	801a      	strh	r2, [r3, #0]
 800c674:	e035      	b.n	800c6e2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c676:	4b42      	ldr	r3, [pc, #264]	@ (800c780 <USBD_CDC_Init+0x1e4>)
 800c678:	7819      	ldrb	r1, [r3, #0]
 800c67a:	2340      	movs	r3, #64	@ 0x40
 800c67c:	2202      	movs	r2, #2
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f002 fb71 	bl	800ed66 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c684:	4b3e      	ldr	r3, [pc, #248]	@ (800c780 <USBD_CDC_Init+0x1e4>)
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	f003 020f 	and.w	r2, r3, #15
 800c68c:	6879      	ldr	r1, [r7, #4]
 800c68e:	4613      	mov	r3, r2
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	4413      	add	r3, r2
 800c694:	009b      	lsls	r3, r3, #2
 800c696:	440b      	add	r3, r1
 800c698:	3324      	adds	r3, #36	@ 0x24
 800c69a:	2201      	movs	r2, #1
 800c69c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c69e:	4b39      	ldr	r3, [pc, #228]	@ (800c784 <USBD_CDC_Init+0x1e8>)
 800c6a0:	7819      	ldrb	r1, [r3, #0]
 800c6a2:	2340      	movs	r3, #64	@ 0x40
 800c6a4:	2202      	movs	r2, #2
 800c6a6:	6878      	ldr	r0, [r7, #4]
 800c6a8:	f002 fb5d 	bl	800ed66 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c6ac:	4b35      	ldr	r3, [pc, #212]	@ (800c784 <USBD_CDC_Init+0x1e8>)
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	f003 020f 	and.w	r2, r3, #15
 800c6b4:	6879      	ldr	r1, [r7, #4]
 800c6b6:	4613      	mov	r3, r2
 800c6b8:	009b      	lsls	r3, r3, #2
 800c6ba:	4413      	add	r3, r2
 800c6bc:	009b      	lsls	r3, r3, #2
 800c6be:	440b      	add	r3, r1
 800c6c0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c6c4:	2201      	movs	r2, #1
 800c6c6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c6c8:	4b2f      	ldr	r3, [pc, #188]	@ (800c788 <USBD_CDC_Init+0x1ec>)
 800c6ca:	781b      	ldrb	r3, [r3, #0]
 800c6cc:	f003 020f 	and.w	r2, r3, #15
 800c6d0:	6879      	ldr	r1, [r7, #4]
 800c6d2:	4613      	mov	r3, r2
 800c6d4:	009b      	lsls	r3, r3, #2
 800c6d6:	4413      	add	r3, r2
 800c6d8:	009b      	lsls	r3, r3, #2
 800c6da:	440b      	add	r3, r1
 800c6dc:	3326      	adds	r3, #38	@ 0x26
 800c6de:	2210      	movs	r2, #16
 800c6e0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c6e2:	4b29      	ldr	r3, [pc, #164]	@ (800c788 <USBD_CDC_Init+0x1ec>)
 800c6e4:	7819      	ldrb	r1, [r3, #0]
 800c6e6:	2308      	movs	r3, #8
 800c6e8:	2203      	movs	r2, #3
 800c6ea:	6878      	ldr	r0, [r7, #4]
 800c6ec:	f002 fb3b 	bl	800ed66 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c6f0:	4b25      	ldr	r3, [pc, #148]	@ (800c788 <USBD_CDC_Init+0x1ec>)
 800c6f2:	781b      	ldrb	r3, [r3, #0]
 800c6f4:	f003 020f 	and.w	r2, r3, #15
 800c6f8:	6879      	ldr	r1, [r7, #4]
 800c6fa:	4613      	mov	r3, r2
 800c6fc:	009b      	lsls	r3, r3, #2
 800c6fe:	4413      	add	r3, r2
 800c700:	009b      	lsls	r3, r3, #2
 800c702:	440b      	add	r3, r1
 800c704:	3324      	adds	r3, #36	@ 0x24
 800c706:	2201      	movs	r2, #1
 800c708:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	2200      	movs	r2, #0
 800c70e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	33b0      	adds	r3, #176	@ 0xb0
 800c71c:	009b      	lsls	r3, r3, #2
 800c71e:	4413      	add	r3, r2
 800c720:	685b      	ldr	r3, [r3, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2200      	movs	r2, #0
 800c72a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	2200      	movs	r2, #0
 800c732:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d101      	bne.n	800c744 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c740:	2302      	movs	r3, #2
 800c742:	e018      	b.n	800c776 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	7c1b      	ldrb	r3, [r3, #16]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d10a      	bne.n	800c762 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c74c:	4b0d      	ldr	r3, [pc, #52]	@ (800c784 <USBD_CDC_Init+0x1e8>)
 800c74e:	7819      	ldrb	r1, [r3, #0]
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c756:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c75a:	6878      	ldr	r0, [r7, #4]
 800c75c:	f002 fbf2 	bl	800ef44 <USBD_LL_PrepareReceive>
 800c760:	e008      	b.n	800c774 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c762:	4b08      	ldr	r3, [pc, #32]	@ (800c784 <USBD_CDC_Init+0x1e8>)
 800c764:	7819      	ldrb	r1, [r3, #0]
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c76c:	2340      	movs	r3, #64	@ 0x40
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	f002 fbe8 	bl	800ef44 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c774:	2300      	movs	r3, #0
}
 800c776:	4618      	mov	r0, r3
 800c778:	3710      	adds	r7, #16
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
 800c77e:	bf00      	nop
 800c780:	240000b3 	.word	0x240000b3
 800c784:	240000b4 	.word	0x240000b4
 800c788:	240000b5 	.word	0x240000b5

0800c78c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b082      	sub	sp, #8
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
 800c794:	460b      	mov	r3, r1
 800c796:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c798:	4b3a      	ldr	r3, [pc, #232]	@ (800c884 <USBD_CDC_DeInit+0xf8>)
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	4619      	mov	r1, r3
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	f002 fb07 	bl	800edb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c7a4:	4b37      	ldr	r3, [pc, #220]	@ (800c884 <USBD_CDC_DeInit+0xf8>)
 800c7a6:	781b      	ldrb	r3, [r3, #0]
 800c7a8:	f003 020f 	and.w	r2, r3, #15
 800c7ac:	6879      	ldr	r1, [r7, #4]
 800c7ae:	4613      	mov	r3, r2
 800c7b0:	009b      	lsls	r3, r3, #2
 800c7b2:	4413      	add	r3, r2
 800c7b4:	009b      	lsls	r3, r3, #2
 800c7b6:	440b      	add	r3, r1
 800c7b8:	3324      	adds	r3, #36	@ 0x24
 800c7ba:	2200      	movs	r2, #0
 800c7bc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c7be:	4b32      	ldr	r3, [pc, #200]	@ (800c888 <USBD_CDC_DeInit+0xfc>)
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	6878      	ldr	r0, [r7, #4]
 800c7c6:	f002 faf4 	bl	800edb2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c7ca:	4b2f      	ldr	r3, [pc, #188]	@ (800c888 <USBD_CDC_DeInit+0xfc>)
 800c7cc:	781b      	ldrb	r3, [r3, #0]
 800c7ce:	f003 020f 	and.w	r2, r3, #15
 800c7d2:	6879      	ldr	r1, [r7, #4]
 800c7d4:	4613      	mov	r3, r2
 800c7d6:	009b      	lsls	r3, r3, #2
 800c7d8:	4413      	add	r3, r2
 800c7da:	009b      	lsls	r3, r3, #2
 800c7dc:	440b      	add	r3, r1
 800c7de:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c7e6:	4b29      	ldr	r3, [pc, #164]	@ (800c88c <USBD_CDC_DeInit+0x100>)
 800c7e8:	781b      	ldrb	r3, [r3, #0]
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f002 fae0 	bl	800edb2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c7f2:	4b26      	ldr	r3, [pc, #152]	@ (800c88c <USBD_CDC_DeInit+0x100>)
 800c7f4:	781b      	ldrb	r3, [r3, #0]
 800c7f6:	f003 020f 	and.w	r2, r3, #15
 800c7fa:	6879      	ldr	r1, [r7, #4]
 800c7fc:	4613      	mov	r3, r2
 800c7fe:	009b      	lsls	r3, r3, #2
 800c800:	4413      	add	r3, r2
 800c802:	009b      	lsls	r3, r3, #2
 800c804:	440b      	add	r3, r1
 800c806:	3324      	adds	r3, #36	@ 0x24
 800c808:	2200      	movs	r2, #0
 800c80a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c80c:	4b1f      	ldr	r3, [pc, #124]	@ (800c88c <USBD_CDC_DeInit+0x100>)
 800c80e:	781b      	ldrb	r3, [r3, #0]
 800c810:	f003 020f 	and.w	r2, r3, #15
 800c814:	6879      	ldr	r1, [r7, #4]
 800c816:	4613      	mov	r3, r2
 800c818:	009b      	lsls	r3, r3, #2
 800c81a:	4413      	add	r3, r2
 800c81c:	009b      	lsls	r3, r3, #2
 800c81e:	440b      	add	r3, r1
 800c820:	3326      	adds	r3, #38	@ 0x26
 800c822:	2200      	movs	r2, #0
 800c824:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	32b0      	adds	r2, #176	@ 0xb0
 800c830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c834:	2b00      	cmp	r3, #0
 800c836:	d01f      	beq.n	800c878 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	33b0      	adds	r3, #176	@ 0xb0
 800c842:	009b      	lsls	r3, r3, #2
 800c844:	4413      	add	r3, r2
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	685b      	ldr	r3, [r3, #4]
 800c84a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	32b0      	adds	r2, #176	@ 0xb0
 800c856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c85a:	4618      	mov	r0, r3
 800c85c:	f002 fbb4 	bl	800efc8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	32b0      	adds	r2, #176	@ 0xb0
 800c86a:	2100      	movs	r1, #0
 800c86c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2200      	movs	r2, #0
 800c874:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c878:	2300      	movs	r3, #0
}
 800c87a:	4618      	mov	r0, r3
 800c87c:	3708      	adds	r7, #8
 800c87e:	46bd      	mov	sp, r7
 800c880:	bd80      	pop	{r7, pc}
 800c882:	bf00      	nop
 800c884:	240000b3 	.word	0x240000b3
 800c888:	240000b4 	.word	0x240000b4
 800c88c:	240000b5 	.word	0x240000b5

0800c890 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c890:	b580      	push	{r7, lr}
 800c892:	b086      	sub	sp, #24
 800c894:	af00      	add	r7, sp, #0
 800c896:	6078      	str	r0, [r7, #4]
 800c898:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	32b0      	adds	r2, #176	@ 0xb0
 800c8a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d101      	bne.n	800c8c0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c8bc:	2303      	movs	r3, #3
 800c8be:	e0bf      	b.n	800ca40 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	781b      	ldrb	r3, [r3, #0]
 800c8c4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d050      	beq.n	800c96e <USBD_CDC_Setup+0xde>
 800c8cc:	2b20      	cmp	r3, #32
 800c8ce:	f040 80af 	bne.w	800ca30 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c8d2:	683b      	ldr	r3, [r7, #0]
 800c8d4:	88db      	ldrh	r3, [r3, #6]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d03a      	beq.n	800c950 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	781b      	ldrb	r3, [r3, #0]
 800c8de:	b25b      	sxtb	r3, r3
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	da1b      	bge.n	800c91c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c8ea:	687a      	ldr	r2, [r7, #4]
 800c8ec:	33b0      	adds	r3, #176	@ 0xb0
 800c8ee:	009b      	lsls	r3, r3, #2
 800c8f0:	4413      	add	r3, r2
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	689b      	ldr	r3, [r3, #8]
 800c8f6:	683a      	ldr	r2, [r7, #0]
 800c8f8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c8fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c8fc:	683a      	ldr	r2, [r7, #0]
 800c8fe:	88d2      	ldrh	r2, [r2, #6]
 800c900:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	88db      	ldrh	r3, [r3, #6]
 800c906:	2b07      	cmp	r3, #7
 800c908:	bf28      	it	cs
 800c90a:	2307      	movcs	r3, #7
 800c90c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	89fa      	ldrh	r2, [r7, #14]
 800c912:	4619      	mov	r1, r3
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f001 fdbd 	bl	800e494 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c91a:	e090      	b.n	800ca3e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	785a      	ldrb	r2, [r3, #1]
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	88db      	ldrh	r3, [r3, #6]
 800c92a:	2b3f      	cmp	r3, #63	@ 0x3f
 800c92c:	d803      	bhi.n	800c936 <USBD_CDC_Setup+0xa6>
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	88db      	ldrh	r3, [r3, #6]
 800c932:	b2da      	uxtb	r2, r3
 800c934:	e000      	b.n	800c938 <USBD_CDC_Setup+0xa8>
 800c936:	2240      	movs	r2, #64	@ 0x40
 800c938:	693b      	ldr	r3, [r7, #16]
 800c93a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c93e:	6939      	ldr	r1, [r7, #16]
 800c940:	693b      	ldr	r3, [r7, #16]
 800c942:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800c946:	461a      	mov	r2, r3
 800c948:	6878      	ldr	r0, [r7, #4]
 800c94a:	f001 fdcf 	bl	800e4ec <USBD_CtlPrepareRx>
      break;
 800c94e:	e076      	b.n	800ca3e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c956:	687a      	ldr	r2, [r7, #4]
 800c958:	33b0      	adds	r3, #176	@ 0xb0
 800c95a:	009b      	lsls	r3, r3, #2
 800c95c:	4413      	add	r3, r2
 800c95e:	685b      	ldr	r3, [r3, #4]
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	683a      	ldr	r2, [r7, #0]
 800c964:	7850      	ldrb	r0, [r2, #1]
 800c966:	2200      	movs	r2, #0
 800c968:	6839      	ldr	r1, [r7, #0]
 800c96a:	4798      	blx	r3
      break;
 800c96c:	e067      	b.n	800ca3e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c96e:	683b      	ldr	r3, [r7, #0]
 800c970:	785b      	ldrb	r3, [r3, #1]
 800c972:	2b0b      	cmp	r3, #11
 800c974:	d851      	bhi.n	800ca1a <USBD_CDC_Setup+0x18a>
 800c976:	a201      	add	r2, pc, #4	@ (adr r2, 800c97c <USBD_CDC_Setup+0xec>)
 800c978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c97c:	0800c9ad 	.word	0x0800c9ad
 800c980:	0800ca29 	.word	0x0800ca29
 800c984:	0800ca1b 	.word	0x0800ca1b
 800c988:	0800ca1b 	.word	0x0800ca1b
 800c98c:	0800ca1b 	.word	0x0800ca1b
 800c990:	0800ca1b 	.word	0x0800ca1b
 800c994:	0800ca1b 	.word	0x0800ca1b
 800c998:	0800ca1b 	.word	0x0800ca1b
 800c99c:	0800ca1b 	.word	0x0800ca1b
 800c9a0:	0800ca1b 	.word	0x0800ca1b
 800c9a4:	0800c9d7 	.word	0x0800c9d7
 800c9a8:	0800ca01 	.word	0x0800ca01
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9b2:	b2db      	uxtb	r3, r3
 800c9b4:	2b03      	cmp	r3, #3
 800c9b6:	d107      	bne.n	800c9c8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c9b8:	f107 030a 	add.w	r3, r7, #10
 800c9bc:	2202      	movs	r2, #2
 800c9be:	4619      	mov	r1, r3
 800c9c0:	6878      	ldr	r0, [r7, #4]
 800c9c2:	f001 fd67 	bl	800e494 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c9c6:	e032      	b.n	800ca2e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c9c8:	6839      	ldr	r1, [r7, #0]
 800c9ca:	6878      	ldr	r0, [r7, #4]
 800c9cc:	f001 fce5 	bl	800e39a <USBD_CtlError>
            ret = USBD_FAIL;
 800c9d0:	2303      	movs	r3, #3
 800c9d2:	75fb      	strb	r3, [r7, #23]
          break;
 800c9d4:	e02b      	b.n	800ca2e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9dc:	b2db      	uxtb	r3, r3
 800c9de:	2b03      	cmp	r3, #3
 800c9e0:	d107      	bne.n	800c9f2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c9e2:	f107 030d 	add.w	r3, r7, #13
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	4619      	mov	r1, r3
 800c9ea:	6878      	ldr	r0, [r7, #4]
 800c9ec:	f001 fd52 	bl	800e494 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c9f0:	e01d      	b.n	800ca2e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c9f2:	6839      	ldr	r1, [r7, #0]
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	f001 fcd0 	bl	800e39a <USBD_CtlError>
            ret = USBD_FAIL;
 800c9fa:	2303      	movs	r3, #3
 800c9fc:	75fb      	strb	r3, [r7, #23]
          break;
 800c9fe:	e016      	b.n	800ca2e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca06:	b2db      	uxtb	r3, r3
 800ca08:	2b03      	cmp	r3, #3
 800ca0a:	d00f      	beq.n	800ca2c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ca0c:	6839      	ldr	r1, [r7, #0]
 800ca0e:	6878      	ldr	r0, [r7, #4]
 800ca10:	f001 fcc3 	bl	800e39a <USBD_CtlError>
            ret = USBD_FAIL;
 800ca14:	2303      	movs	r3, #3
 800ca16:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ca18:	e008      	b.n	800ca2c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ca1a:	6839      	ldr	r1, [r7, #0]
 800ca1c:	6878      	ldr	r0, [r7, #4]
 800ca1e:	f001 fcbc 	bl	800e39a <USBD_CtlError>
          ret = USBD_FAIL;
 800ca22:	2303      	movs	r3, #3
 800ca24:	75fb      	strb	r3, [r7, #23]
          break;
 800ca26:	e002      	b.n	800ca2e <USBD_CDC_Setup+0x19e>
          break;
 800ca28:	bf00      	nop
 800ca2a:	e008      	b.n	800ca3e <USBD_CDC_Setup+0x1ae>
          break;
 800ca2c:	bf00      	nop
      }
      break;
 800ca2e:	e006      	b.n	800ca3e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ca30:	6839      	ldr	r1, [r7, #0]
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f001 fcb1 	bl	800e39a <USBD_CtlError>
      ret = USBD_FAIL;
 800ca38:	2303      	movs	r3, #3
 800ca3a:	75fb      	strb	r3, [r7, #23]
      break;
 800ca3c:	bf00      	nop
  }

  return (uint8_t)ret;
 800ca3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca40:	4618      	mov	r0, r3
 800ca42:	3718      	adds	r7, #24
 800ca44:	46bd      	mov	sp, r7
 800ca46:	bd80      	pop	{r7, pc}

0800ca48 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b084      	sub	sp, #16
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	460b      	mov	r3, r1
 800ca52:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ca5a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	32b0      	adds	r2, #176	@ 0xb0
 800ca66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d101      	bne.n	800ca72 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ca6e:	2303      	movs	r3, #3
 800ca70:	e065      	b.n	800cb3e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	32b0      	adds	r2, #176	@ 0xb0
 800ca7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca80:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ca82:	78fb      	ldrb	r3, [r7, #3]
 800ca84:	f003 020f 	and.w	r2, r3, #15
 800ca88:	6879      	ldr	r1, [r7, #4]
 800ca8a:	4613      	mov	r3, r2
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	4413      	add	r3, r2
 800ca90:	009b      	lsls	r3, r3, #2
 800ca92:	440b      	add	r3, r1
 800ca94:	3318      	adds	r3, #24
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d02f      	beq.n	800cafc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ca9c:	78fb      	ldrb	r3, [r7, #3]
 800ca9e:	f003 020f 	and.w	r2, r3, #15
 800caa2:	6879      	ldr	r1, [r7, #4]
 800caa4:	4613      	mov	r3, r2
 800caa6:	009b      	lsls	r3, r3, #2
 800caa8:	4413      	add	r3, r2
 800caaa:	009b      	lsls	r3, r3, #2
 800caac:	440b      	add	r3, r1
 800caae:	3318      	adds	r3, #24
 800cab0:	681a      	ldr	r2, [r3, #0]
 800cab2:	78fb      	ldrb	r3, [r7, #3]
 800cab4:	f003 010f 	and.w	r1, r3, #15
 800cab8:	68f8      	ldr	r0, [r7, #12]
 800caba:	460b      	mov	r3, r1
 800cabc:	00db      	lsls	r3, r3, #3
 800cabe:	440b      	add	r3, r1
 800cac0:	009b      	lsls	r3, r3, #2
 800cac2:	4403      	add	r3, r0
 800cac4:	331c      	adds	r3, #28
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	fbb2 f1f3 	udiv	r1, r2, r3
 800cacc:	fb01 f303 	mul.w	r3, r1, r3
 800cad0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d112      	bne.n	800cafc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800cad6:	78fb      	ldrb	r3, [r7, #3]
 800cad8:	f003 020f 	and.w	r2, r3, #15
 800cadc:	6879      	ldr	r1, [r7, #4]
 800cade:	4613      	mov	r3, r2
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	4413      	add	r3, r2
 800cae4:	009b      	lsls	r3, r3, #2
 800cae6:	440b      	add	r3, r1
 800cae8:	3318      	adds	r3, #24
 800caea:	2200      	movs	r2, #0
 800caec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800caee:	78f9      	ldrb	r1, [r7, #3]
 800caf0:	2300      	movs	r3, #0
 800caf2:	2200      	movs	r2, #0
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f002 fa04 	bl	800ef02 <USBD_LL_Transmit>
 800cafa:	e01f      	b.n	800cb3c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	2200      	movs	r2, #0
 800cb00:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb0a:	687a      	ldr	r2, [r7, #4]
 800cb0c:	33b0      	adds	r3, #176	@ 0xb0
 800cb0e:	009b      	lsls	r3, r3, #2
 800cb10:	4413      	add	r3, r2
 800cb12:	685b      	ldr	r3, [r3, #4]
 800cb14:	691b      	ldr	r3, [r3, #16]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d010      	beq.n	800cb3c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb20:	687a      	ldr	r2, [r7, #4]
 800cb22:	33b0      	adds	r3, #176	@ 0xb0
 800cb24:	009b      	lsls	r3, r3, #2
 800cb26:	4413      	add	r3, r2
 800cb28:	685b      	ldr	r3, [r3, #4]
 800cb2a:	691b      	ldr	r3, [r3, #16]
 800cb2c:	68ba      	ldr	r2, [r7, #8]
 800cb2e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800cb32:	68ba      	ldr	r2, [r7, #8]
 800cb34:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800cb38:	78fa      	ldrb	r2, [r7, #3]
 800cb3a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cb3c:	2300      	movs	r3, #0
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3710      	adds	r7, #16
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}

0800cb46 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cb46:	b580      	push	{r7, lr}
 800cb48:	b084      	sub	sp, #16
 800cb4a:	af00      	add	r7, sp, #0
 800cb4c:	6078      	str	r0, [r7, #4]
 800cb4e:	460b      	mov	r3, r1
 800cb50:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	32b0      	adds	r2, #176	@ 0xb0
 800cb5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb60:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	32b0      	adds	r2, #176	@ 0xb0
 800cb6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d101      	bne.n	800cb78 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cb74:	2303      	movs	r3, #3
 800cb76:	e01a      	b.n	800cbae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cb78:	78fb      	ldrb	r3, [r7, #3]
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f002 fa02 	bl	800ef86 <USBD_LL_GetRxDataSize>
 800cb82:	4602      	mov	r2, r0
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb90:	687a      	ldr	r2, [r7, #4]
 800cb92:	33b0      	adds	r3, #176	@ 0xb0
 800cb94:	009b      	lsls	r3, r3, #2
 800cb96:	4413      	add	r3, r2
 800cb98:	685b      	ldr	r3, [r3, #4]
 800cb9a:	68db      	ldr	r3, [r3, #12]
 800cb9c:	68fa      	ldr	r2, [r7, #12]
 800cb9e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800cba2:	68fa      	ldr	r2, [r7, #12]
 800cba4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800cba8:	4611      	mov	r1, r2
 800cbaa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cbac:	2300      	movs	r3, #0
}
 800cbae:	4618      	mov	r0, r3
 800cbb0:	3710      	adds	r7, #16
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	bd80      	pop	{r7, pc}

0800cbb6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cbb6:	b580      	push	{r7, lr}
 800cbb8:	b084      	sub	sp, #16
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	32b0      	adds	r2, #176	@ 0xb0
 800cbc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbcc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d101      	bne.n	800cbd8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cbd4:	2303      	movs	r3, #3
 800cbd6:	e024      	b.n	800cc22 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cbde:	687a      	ldr	r2, [r7, #4]
 800cbe0:	33b0      	adds	r3, #176	@ 0xb0
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	4413      	add	r3, r2
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d019      	beq.n	800cc20 <USBD_CDC_EP0_RxReady+0x6a>
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800cbf2:	2bff      	cmp	r3, #255	@ 0xff
 800cbf4:	d014      	beq.n	800cc20 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cbfc:	687a      	ldr	r2, [r7, #4]
 800cbfe:	33b0      	adds	r3, #176	@ 0xb0
 800cc00:	009b      	lsls	r3, r3, #2
 800cc02:	4413      	add	r3, r2
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	689b      	ldr	r3, [r3, #8]
 800cc08:	68fa      	ldr	r2, [r7, #12]
 800cc0a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800cc0e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800cc10:	68fa      	ldr	r2, [r7, #12]
 800cc12:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cc16:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cc18:	68fb      	ldr	r3, [r7, #12]
 800cc1a:	22ff      	movs	r2, #255	@ 0xff
 800cc1c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800cc20:	2300      	movs	r3, #0
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3710      	adds	r7, #16
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}
	...

0800cc2c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b086      	sub	sp, #24
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cc34:	2182      	movs	r1, #130	@ 0x82
 800cc36:	4818      	ldr	r0, [pc, #96]	@ (800cc98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cc38:	f000 fd4f 	bl	800d6da <USBD_GetEpDesc>
 800cc3c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cc3e:	2101      	movs	r1, #1
 800cc40:	4815      	ldr	r0, [pc, #84]	@ (800cc98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cc42:	f000 fd4a 	bl	800d6da <USBD_GetEpDesc>
 800cc46:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cc48:	2181      	movs	r1, #129	@ 0x81
 800cc4a:	4813      	ldr	r0, [pc, #76]	@ (800cc98 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cc4c:	f000 fd45 	bl	800d6da <USBD_GetEpDesc>
 800cc50:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d002      	beq.n	800cc5e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cc58:	697b      	ldr	r3, [r7, #20]
 800cc5a:	2210      	movs	r2, #16
 800cc5c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d006      	beq.n	800cc72 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cc64:	693b      	ldr	r3, [r7, #16]
 800cc66:	2200      	movs	r2, #0
 800cc68:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cc6c:	711a      	strb	r2, [r3, #4]
 800cc6e:	2200      	movs	r2, #0
 800cc70:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d006      	beq.n	800cc86 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cc80:	711a      	strb	r2, [r3, #4]
 800cc82:	2200      	movs	r2, #0
 800cc84:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2243      	movs	r2, #67	@ 0x43
 800cc8a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cc8c:	4b02      	ldr	r3, [pc, #8]	@ (800cc98 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800cc8e:	4618      	mov	r0, r3
 800cc90:	3718      	adds	r7, #24
 800cc92:	46bd      	mov	sp, r7
 800cc94:	bd80      	pop	{r7, pc}
 800cc96:	bf00      	nop
 800cc98:	24000070 	.word	0x24000070

0800cc9c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b086      	sub	sp, #24
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cca4:	2182      	movs	r1, #130	@ 0x82
 800cca6:	4818      	ldr	r0, [pc, #96]	@ (800cd08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cca8:	f000 fd17 	bl	800d6da <USBD_GetEpDesc>
 800ccac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ccae:	2101      	movs	r1, #1
 800ccb0:	4815      	ldr	r0, [pc, #84]	@ (800cd08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ccb2:	f000 fd12 	bl	800d6da <USBD_GetEpDesc>
 800ccb6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ccb8:	2181      	movs	r1, #129	@ 0x81
 800ccba:	4813      	ldr	r0, [pc, #76]	@ (800cd08 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ccbc:	f000 fd0d 	bl	800d6da <USBD_GetEpDesc>
 800ccc0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d002      	beq.n	800ccce <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ccc8:	697b      	ldr	r3, [r7, #20]
 800ccca:	2210      	movs	r2, #16
 800cccc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d006      	beq.n	800cce2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ccd4:	693b      	ldr	r3, [r7, #16]
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	711a      	strb	r2, [r3, #4]
 800ccda:	2200      	movs	r2, #0
 800ccdc:	f042 0202 	orr.w	r2, r2, #2
 800cce0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d006      	beq.n	800ccf6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	2200      	movs	r2, #0
 800ccec:	711a      	strb	r2, [r3, #4]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	f042 0202 	orr.w	r2, r2, #2
 800ccf4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	2243      	movs	r2, #67	@ 0x43
 800ccfa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ccfc:	4b02      	ldr	r3, [pc, #8]	@ (800cd08 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ccfe:	4618      	mov	r0, r3
 800cd00:	3718      	adds	r7, #24
 800cd02:	46bd      	mov	sp, r7
 800cd04:	bd80      	pop	{r7, pc}
 800cd06:	bf00      	nop
 800cd08:	24000070 	.word	0x24000070

0800cd0c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cd0c:	b580      	push	{r7, lr}
 800cd0e:	b086      	sub	sp, #24
 800cd10:	af00      	add	r7, sp, #0
 800cd12:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cd14:	2182      	movs	r1, #130	@ 0x82
 800cd16:	4818      	ldr	r0, [pc, #96]	@ (800cd78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cd18:	f000 fcdf 	bl	800d6da <USBD_GetEpDesc>
 800cd1c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cd1e:	2101      	movs	r1, #1
 800cd20:	4815      	ldr	r0, [pc, #84]	@ (800cd78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cd22:	f000 fcda 	bl	800d6da <USBD_GetEpDesc>
 800cd26:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cd28:	2181      	movs	r1, #129	@ 0x81
 800cd2a:	4813      	ldr	r0, [pc, #76]	@ (800cd78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cd2c:	f000 fcd5 	bl	800d6da <USBD_GetEpDesc>
 800cd30:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d002      	beq.n	800cd3e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	2210      	movs	r2, #16
 800cd3c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cd3e:	693b      	ldr	r3, [r7, #16]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d006      	beq.n	800cd52 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	2200      	movs	r2, #0
 800cd48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cd4c:	711a      	strb	r2, [r3, #4]
 800cd4e:	2200      	movs	r2, #0
 800cd50:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cd52:	68fb      	ldr	r3, [r7, #12]
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d006      	beq.n	800cd66 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2200      	movs	r2, #0
 800cd5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cd60:	711a      	strb	r2, [r3, #4]
 800cd62:	2200      	movs	r2, #0
 800cd64:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2243      	movs	r2, #67	@ 0x43
 800cd6a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cd6c:	4b02      	ldr	r3, [pc, #8]	@ (800cd78 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800cd6e:	4618      	mov	r0, r3
 800cd70:	3718      	adds	r7, #24
 800cd72:	46bd      	mov	sp, r7
 800cd74:	bd80      	pop	{r7, pc}
 800cd76:	bf00      	nop
 800cd78:	24000070 	.word	0x24000070

0800cd7c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cd7c:	b480      	push	{r7}
 800cd7e:	b083      	sub	sp, #12
 800cd80:	af00      	add	r7, sp, #0
 800cd82:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	220a      	movs	r2, #10
 800cd88:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cd8a:	4b03      	ldr	r3, [pc, #12]	@ (800cd98 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	370c      	adds	r7, #12
 800cd90:	46bd      	mov	sp, r7
 800cd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd96:	4770      	bx	lr
 800cd98:	2400002c 	.word	0x2400002c

0800cd9c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cd9c:	b480      	push	{r7}
 800cd9e:	b083      	sub	sp, #12
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d101      	bne.n	800cdb0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cdac:	2303      	movs	r3, #3
 800cdae:	e009      	b.n	800cdc4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cdb6:	687a      	ldr	r2, [r7, #4]
 800cdb8:	33b0      	adds	r3, #176	@ 0xb0
 800cdba:	009b      	lsls	r3, r3, #2
 800cdbc:	4413      	add	r3, r2
 800cdbe:	683a      	ldr	r2, [r7, #0]
 800cdc0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800cdc2:	2300      	movs	r3, #0
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	370c      	adds	r7, #12
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdce:	4770      	bx	lr

0800cdd0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cdd0:	b480      	push	{r7}
 800cdd2:	b087      	sub	sp, #28
 800cdd4:	af00      	add	r7, sp, #0
 800cdd6:	60f8      	str	r0, [r7, #12]
 800cdd8:	60b9      	str	r1, [r7, #8]
 800cdda:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	32b0      	adds	r2, #176	@ 0xb0
 800cde6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdea:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d101      	bne.n	800cdf6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cdf2:	2303      	movs	r3, #3
 800cdf4:	e008      	b.n	800ce08 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800cdf6:	697b      	ldr	r3, [r7, #20]
 800cdf8:	68ba      	ldr	r2, [r7, #8]
 800cdfa:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800cdfe:	697b      	ldr	r3, [r7, #20]
 800ce00:	687a      	ldr	r2, [r7, #4]
 800ce02:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ce06:	2300      	movs	r3, #0
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	371c      	adds	r7, #28
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce12:	4770      	bx	lr

0800ce14 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ce14:	b480      	push	{r7}
 800ce16:	b085      	sub	sp, #20
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	32b0      	adds	r2, #176	@ 0xb0
 800ce28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce2c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ce2e:	68fb      	ldr	r3, [r7, #12]
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	d101      	bne.n	800ce38 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800ce34:	2303      	movs	r3, #3
 800ce36:	e004      	b.n	800ce42 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	683a      	ldr	r2, [r7, #0]
 800ce3c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800ce40:	2300      	movs	r3, #0
}
 800ce42:	4618      	mov	r0, r3
 800ce44:	3714      	adds	r7, #20
 800ce46:	46bd      	mov	sp, r7
 800ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4c:	4770      	bx	lr
	...

0800ce50 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b084      	sub	sp, #16
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	32b0      	adds	r2, #176	@ 0xb0
 800ce62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce66:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800ce68:	2301      	movs	r3, #1
 800ce6a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ce6c:	68bb      	ldr	r3, [r7, #8]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d101      	bne.n	800ce76 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ce72:	2303      	movs	r3, #3
 800ce74:	e025      	b.n	800cec2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d11f      	bne.n	800cec0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ce80:	68bb      	ldr	r3, [r7, #8]
 800ce82:	2201      	movs	r2, #1
 800ce84:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ce88:	4b10      	ldr	r3, [pc, #64]	@ (800cecc <USBD_CDC_TransmitPacket+0x7c>)
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	f003 020f 	and.w	r2, r3, #15
 800ce90:	68bb      	ldr	r3, [r7, #8]
 800ce92:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800ce96:	6878      	ldr	r0, [r7, #4]
 800ce98:	4613      	mov	r3, r2
 800ce9a:	009b      	lsls	r3, r3, #2
 800ce9c:	4413      	add	r3, r2
 800ce9e:	009b      	lsls	r3, r3, #2
 800cea0:	4403      	add	r3, r0
 800cea2:	3318      	adds	r3, #24
 800cea4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800cea6:	4b09      	ldr	r3, [pc, #36]	@ (800cecc <USBD_CDC_TransmitPacket+0x7c>)
 800cea8:	7819      	ldrb	r1, [r3, #0]
 800ceaa:	68bb      	ldr	r3, [r7, #8]
 800ceac:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f002 f823 	bl	800ef02 <USBD_LL_Transmit>

    ret = USBD_OK;
 800cebc:	2300      	movs	r3, #0
 800cebe:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800cec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cec2:	4618      	mov	r0, r3
 800cec4:	3710      	adds	r7, #16
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}
 800ceca:	bf00      	nop
 800cecc:	240000b3 	.word	0x240000b3

0800ced0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	32b0      	adds	r2, #176	@ 0xb0
 800cee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cee6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	32b0      	adds	r2, #176	@ 0xb0
 800cef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d101      	bne.n	800cefe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800cefa:	2303      	movs	r3, #3
 800cefc:	e018      	b.n	800cf30 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	7c1b      	ldrb	r3, [r3, #16]
 800cf02:	2b00      	cmp	r3, #0
 800cf04:	d10a      	bne.n	800cf1c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cf06:	4b0c      	ldr	r3, [pc, #48]	@ (800cf38 <USBD_CDC_ReceivePacket+0x68>)
 800cf08:	7819      	ldrb	r1, [r3, #0]
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cf10:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f002 f815 	bl	800ef44 <USBD_LL_PrepareReceive>
 800cf1a:	e008      	b.n	800cf2e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cf1c:	4b06      	ldr	r3, [pc, #24]	@ (800cf38 <USBD_CDC_ReceivePacket+0x68>)
 800cf1e:	7819      	ldrb	r1, [r3, #0]
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cf26:	2340      	movs	r3, #64	@ 0x40
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f002 f80b 	bl	800ef44 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cf2e:	2300      	movs	r3, #0
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3710      	adds	r7, #16
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}
 800cf38:	240000b4 	.word	0x240000b4

0800cf3c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cf3c:	b580      	push	{r7, lr}
 800cf3e:	b086      	sub	sp, #24
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	60f8      	str	r0, [r7, #12]
 800cf44:	60b9      	str	r1, [r7, #8]
 800cf46:	4613      	mov	r3, r2
 800cf48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d101      	bne.n	800cf54 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cf50:	2303      	movs	r3, #3
 800cf52:	e01f      	b.n	800cf94 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	2200      	movs	r2, #0
 800cf58:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	2200      	movs	r2, #0
 800cf68:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cf6c:	68bb      	ldr	r3, [r7, #8]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d003      	beq.n	800cf7a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	68ba      	ldr	r2, [r7, #8]
 800cf76:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	2201      	movs	r2, #1
 800cf7e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	79fa      	ldrb	r2, [r7, #7]
 800cf86:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cf88:	68f8      	ldr	r0, [r7, #12]
 800cf8a:	f001 fe81 	bl	800ec90 <USBD_LL_Init>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cf92:	7dfb      	ldrb	r3, [r7, #23]
}
 800cf94:	4618      	mov	r0, r3
 800cf96:	3718      	adds	r7, #24
 800cf98:	46bd      	mov	sp, r7
 800cf9a:	bd80      	pop	{r7, pc}

0800cf9c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cf9c:	b580      	push	{r7, lr}
 800cf9e:	b084      	sub	sp, #16
 800cfa0:	af00      	add	r7, sp, #0
 800cfa2:	6078      	str	r0, [r7, #4]
 800cfa4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d101      	bne.n	800cfb4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cfb0:	2303      	movs	r3, #3
 800cfb2:	e025      	b.n	800d000 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	683a      	ldr	r2, [r7, #0]
 800cfb8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	32ae      	adds	r2, #174	@ 0xae
 800cfc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d00f      	beq.n	800cff0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	32ae      	adds	r2, #174	@ 0xae
 800cfda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cfe0:	f107 020e 	add.w	r2, r7, #14
 800cfe4:	4610      	mov	r0, r2
 800cfe6:	4798      	blx	r3
 800cfe8:	4602      	mov	r2, r0
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800cff6:	1c5a      	adds	r2, r3, #1
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800cffe:	2300      	movs	r3, #0
}
 800d000:	4618      	mov	r0, r3
 800d002:	3710      	adds	r7, #16
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b082      	sub	sp, #8
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d010:	6878      	ldr	r0, [r7, #4]
 800d012:	f001 fe8d 	bl	800ed30 <USBD_LL_Start>
 800d016:	4603      	mov	r3, r0
}
 800d018:	4618      	mov	r0, r3
 800d01a:	3708      	adds	r7, #8
 800d01c:	46bd      	mov	sp, r7
 800d01e:	bd80      	pop	{r7, pc}

0800d020 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d020:	b480      	push	{r7}
 800d022:	b083      	sub	sp, #12
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d028:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d02a:	4618      	mov	r0, r3
 800d02c:	370c      	adds	r7, #12
 800d02e:	46bd      	mov	sp, r7
 800d030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d034:	4770      	bx	lr

0800d036 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d036:	b580      	push	{r7, lr}
 800d038:	b084      	sub	sp, #16
 800d03a:	af00      	add	r7, sp, #0
 800d03c:	6078      	str	r0, [r7, #4]
 800d03e:	460b      	mov	r3, r1
 800d040:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d042:	2300      	movs	r3, #0
 800d044:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d009      	beq.n	800d064 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d050:	687b      	ldr	r3, [r7, #4]
 800d052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	78fa      	ldrb	r2, [r7, #3]
 800d05a:	4611      	mov	r1, r2
 800d05c:	6878      	ldr	r0, [r7, #4]
 800d05e:	4798      	blx	r3
 800d060:	4603      	mov	r3, r0
 800d062:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d064:	7bfb      	ldrb	r3, [r7, #15]
}
 800d066:	4618      	mov	r0, r3
 800d068:	3710      	adds	r7, #16
 800d06a:	46bd      	mov	sp, r7
 800d06c:	bd80      	pop	{r7, pc}

0800d06e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d06e:	b580      	push	{r7, lr}
 800d070:	b084      	sub	sp, #16
 800d072:	af00      	add	r7, sp, #0
 800d074:	6078      	str	r0, [r7, #4]
 800d076:	460b      	mov	r3, r1
 800d078:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d07a:	2300      	movs	r3, #0
 800d07c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d084:	685b      	ldr	r3, [r3, #4]
 800d086:	78fa      	ldrb	r2, [r7, #3]
 800d088:	4611      	mov	r1, r2
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	4798      	blx	r3
 800d08e:	4603      	mov	r3, r0
 800d090:	2b00      	cmp	r3, #0
 800d092:	d001      	beq.n	800d098 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d094:	2303      	movs	r3, #3
 800d096:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d098:	7bfb      	ldrb	r3, [r7, #15]
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3710      	adds	r7, #16
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}

0800d0a2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d0a2:	b580      	push	{r7, lr}
 800d0a4:	b084      	sub	sp, #16
 800d0a6:	af00      	add	r7, sp, #0
 800d0a8:	6078      	str	r0, [r7, #4]
 800d0aa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d0b2:	6839      	ldr	r1, [r7, #0]
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	f001 f936 	bl	800e326 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2201      	movs	r2, #1
 800d0be:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d0c8:	461a      	mov	r2, r3
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d0d6:	f003 031f 	and.w	r3, r3, #31
 800d0da:	2b02      	cmp	r3, #2
 800d0dc:	d01a      	beq.n	800d114 <USBD_LL_SetupStage+0x72>
 800d0de:	2b02      	cmp	r3, #2
 800d0e0:	d822      	bhi.n	800d128 <USBD_LL_SetupStage+0x86>
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d002      	beq.n	800d0ec <USBD_LL_SetupStage+0x4a>
 800d0e6:	2b01      	cmp	r3, #1
 800d0e8:	d00a      	beq.n	800d100 <USBD_LL_SetupStage+0x5e>
 800d0ea:	e01d      	b.n	800d128 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d0f2:	4619      	mov	r1, r3
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	f000 fb63 	bl	800d7c0 <USBD_StdDevReq>
 800d0fa:	4603      	mov	r3, r0
 800d0fc:	73fb      	strb	r3, [r7, #15]
      break;
 800d0fe:	e020      	b.n	800d142 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d106:	4619      	mov	r1, r3
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f000 fbcb 	bl	800d8a4 <USBD_StdItfReq>
 800d10e:	4603      	mov	r3, r0
 800d110:	73fb      	strb	r3, [r7, #15]
      break;
 800d112:	e016      	b.n	800d142 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d11a:	4619      	mov	r1, r3
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f000 fc2d 	bl	800d97c <USBD_StdEPReq>
 800d122:	4603      	mov	r3, r0
 800d124:	73fb      	strb	r3, [r7, #15]
      break;
 800d126:	e00c      	b.n	800d142 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d12e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d132:	b2db      	uxtb	r3, r3
 800d134:	4619      	mov	r1, r3
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f001 fe5a 	bl	800edf0 <USBD_LL_StallEP>
 800d13c:	4603      	mov	r3, r0
 800d13e:	73fb      	strb	r3, [r7, #15]
      break;
 800d140:	bf00      	nop
  }

  return ret;
 800d142:	7bfb      	ldrb	r3, [r7, #15]
}
 800d144:	4618      	mov	r0, r3
 800d146:	3710      	adds	r7, #16
 800d148:	46bd      	mov	sp, r7
 800d14a:	bd80      	pop	{r7, pc}

0800d14c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d14c:	b580      	push	{r7, lr}
 800d14e:	b086      	sub	sp, #24
 800d150:	af00      	add	r7, sp, #0
 800d152:	60f8      	str	r0, [r7, #12]
 800d154:	460b      	mov	r3, r1
 800d156:	607a      	str	r2, [r7, #4]
 800d158:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d15a:	2300      	movs	r3, #0
 800d15c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d15e:	7afb      	ldrb	r3, [r7, #11]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d16e      	bne.n	800d242 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d16a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d172:	2b03      	cmp	r3, #3
 800d174:	f040 8098 	bne.w	800d2a8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	689a      	ldr	r2, [r3, #8]
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	68db      	ldr	r3, [r3, #12]
 800d180:	429a      	cmp	r2, r3
 800d182:	d913      	bls.n	800d1ac <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d184:	693b      	ldr	r3, [r7, #16]
 800d186:	689a      	ldr	r2, [r3, #8]
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	68db      	ldr	r3, [r3, #12]
 800d18c:	1ad2      	subs	r2, r2, r3
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	68da      	ldr	r2, [r3, #12]
 800d196:	693b      	ldr	r3, [r7, #16]
 800d198:	689b      	ldr	r3, [r3, #8]
 800d19a:	4293      	cmp	r3, r2
 800d19c:	bf28      	it	cs
 800d19e:	4613      	movcs	r3, r2
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	6879      	ldr	r1, [r7, #4]
 800d1a4:	68f8      	ldr	r0, [r7, #12]
 800d1a6:	f001 f9be 	bl	800e526 <USBD_CtlContinueRx>
 800d1aa:	e07d      	b.n	800d2a8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d1b2:	f003 031f 	and.w	r3, r3, #31
 800d1b6:	2b02      	cmp	r3, #2
 800d1b8:	d014      	beq.n	800d1e4 <USBD_LL_DataOutStage+0x98>
 800d1ba:	2b02      	cmp	r3, #2
 800d1bc:	d81d      	bhi.n	800d1fa <USBD_LL_DataOutStage+0xae>
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d002      	beq.n	800d1c8 <USBD_LL_DataOutStage+0x7c>
 800d1c2:	2b01      	cmp	r3, #1
 800d1c4:	d003      	beq.n	800d1ce <USBD_LL_DataOutStage+0x82>
 800d1c6:	e018      	b.n	800d1fa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	75bb      	strb	r3, [r7, #22]
            break;
 800d1cc:	e018      	b.n	800d200 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d1ce:	68fb      	ldr	r3, [r7, #12]
 800d1d0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d1d4:	b2db      	uxtb	r3, r3
 800d1d6:	4619      	mov	r1, r3
 800d1d8:	68f8      	ldr	r0, [r7, #12]
 800d1da:	f000 fa64 	bl	800d6a6 <USBD_CoreFindIF>
 800d1de:	4603      	mov	r3, r0
 800d1e0:	75bb      	strb	r3, [r7, #22]
            break;
 800d1e2:	e00d      	b.n	800d200 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d1ea:	b2db      	uxtb	r3, r3
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	68f8      	ldr	r0, [r7, #12]
 800d1f0:	f000 fa66 	bl	800d6c0 <USBD_CoreFindEP>
 800d1f4:	4603      	mov	r3, r0
 800d1f6:	75bb      	strb	r3, [r7, #22]
            break;
 800d1f8:	e002      	b.n	800d200 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	75bb      	strb	r3, [r7, #22]
            break;
 800d1fe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d200:	7dbb      	ldrb	r3, [r7, #22]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d119      	bne.n	800d23a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d20c:	b2db      	uxtb	r3, r3
 800d20e:	2b03      	cmp	r3, #3
 800d210:	d113      	bne.n	800d23a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d212:	7dba      	ldrb	r2, [r7, #22]
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	32ae      	adds	r2, #174	@ 0xae
 800d218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d21c:	691b      	ldr	r3, [r3, #16]
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d00b      	beq.n	800d23a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d222:	7dba      	ldrb	r2, [r7, #22]
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d22a:	7dba      	ldrb	r2, [r7, #22]
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	32ae      	adds	r2, #174	@ 0xae
 800d230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d234:	691b      	ldr	r3, [r3, #16]
 800d236:	68f8      	ldr	r0, [r7, #12]
 800d238:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d23a:	68f8      	ldr	r0, [r7, #12]
 800d23c:	f001 f984 	bl	800e548 <USBD_CtlSendStatus>
 800d240:	e032      	b.n	800d2a8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d242:	7afb      	ldrb	r3, [r7, #11]
 800d244:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d248:	b2db      	uxtb	r3, r3
 800d24a:	4619      	mov	r1, r3
 800d24c:	68f8      	ldr	r0, [r7, #12]
 800d24e:	f000 fa37 	bl	800d6c0 <USBD_CoreFindEP>
 800d252:	4603      	mov	r3, r0
 800d254:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d256:	7dbb      	ldrb	r3, [r7, #22]
 800d258:	2bff      	cmp	r3, #255	@ 0xff
 800d25a:	d025      	beq.n	800d2a8 <USBD_LL_DataOutStage+0x15c>
 800d25c:	7dbb      	ldrb	r3, [r7, #22]
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d122      	bne.n	800d2a8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d268:	b2db      	uxtb	r3, r3
 800d26a:	2b03      	cmp	r3, #3
 800d26c:	d117      	bne.n	800d29e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d26e:	7dba      	ldrb	r2, [r7, #22]
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	32ae      	adds	r2, #174	@ 0xae
 800d274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d278:	699b      	ldr	r3, [r3, #24]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d00f      	beq.n	800d29e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d27e:	7dba      	ldrb	r2, [r7, #22]
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d286:	7dba      	ldrb	r2, [r7, #22]
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	32ae      	adds	r2, #174	@ 0xae
 800d28c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d290:	699b      	ldr	r3, [r3, #24]
 800d292:	7afa      	ldrb	r2, [r7, #11]
 800d294:	4611      	mov	r1, r2
 800d296:	68f8      	ldr	r0, [r7, #12]
 800d298:	4798      	blx	r3
 800d29a:	4603      	mov	r3, r0
 800d29c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d29e:	7dfb      	ldrb	r3, [r7, #23]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d001      	beq.n	800d2a8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d2a4:	7dfb      	ldrb	r3, [r7, #23]
 800d2a6:	e000      	b.n	800d2aa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d2a8:	2300      	movs	r3, #0
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3718      	adds	r7, #24
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}

0800d2b2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d2b2:	b580      	push	{r7, lr}
 800d2b4:	b086      	sub	sp, #24
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	60f8      	str	r0, [r7, #12]
 800d2ba:	460b      	mov	r3, r1
 800d2bc:	607a      	str	r2, [r7, #4]
 800d2be:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d2c0:	7afb      	ldrb	r3, [r7, #11]
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d16f      	bne.n	800d3a6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	3314      	adds	r3, #20
 800d2ca:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d2d2:	2b02      	cmp	r3, #2
 800d2d4:	d15a      	bne.n	800d38c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d2d6:	693b      	ldr	r3, [r7, #16]
 800d2d8:	689a      	ldr	r2, [r3, #8]
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	68db      	ldr	r3, [r3, #12]
 800d2de:	429a      	cmp	r2, r3
 800d2e0:	d914      	bls.n	800d30c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	689a      	ldr	r2, [r3, #8]
 800d2e6:	693b      	ldr	r3, [r7, #16]
 800d2e8:	68db      	ldr	r3, [r3, #12]
 800d2ea:	1ad2      	subs	r2, r2, r3
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d2f0:	693b      	ldr	r3, [r7, #16]
 800d2f2:	689b      	ldr	r3, [r3, #8]
 800d2f4:	461a      	mov	r2, r3
 800d2f6:	6879      	ldr	r1, [r7, #4]
 800d2f8:	68f8      	ldr	r0, [r7, #12]
 800d2fa:	f001 f8e6 	bl	800e4ca <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d2fe:	2300      	movs	r3, #0
 800d300:	2200      	movs	r2, #0
 800d302:	2100      	movs	r1, #0
 800d304:	68f8      	ldr	r0, [r7, #12]
 800d306:	f001 fe1d 	bl	800ef44 <USBD_LL_PrepareReceive>
 800d30a:	e03f      	b.n	800d38c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	68da      	ldr	r2, [r3, #12]
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	689b      	ldr	r3, [r3, #8]
 800d314:	429a      	cmp	r2, r3
 800d316:	d11c      	bne.n	800d352 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d318:	693b      	ldr	r3, [r7, #16]
 800d31a:	685a      	ldr	r2, [r3, #4]
 800d31c:	693b      	ldr	r3, [r7, #16]
 800d31e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d320:	429a      	cmp	r2, r3
 800d322:	d316      	bcc.n	800d352 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d324:	693b      	ldr	r3, [r7, #16]
 800d326:	685a      	ldr	r2, [r3, #4]
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d32e:	429a      	cmp	r2, r3
 800d330:	d20f      	bcs.n	800d352 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d332:	2200      	movs	r2, #0
 800d334:	2100      	movs	r1, #0
 800d336:	68f8      	ldr	r0, [r7, #12]
 800d338:	f001 f8c7 	bl	800e4ca <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	2200      	movs	r2, #0
 800d340:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d344:	2300      	movs	r3, #0
 800d346:	2200      	movs	r2, #0
 800d348:	2100      	movs	r1, #0
 800d34a:	68f8      	ldr	r0, [r7, #12]
 800d34c:	f001 fdfa 	bl	800ef44 <USBD_LL_PrepareReceive>
 800d350:	e01c      	b.n	800d38c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d358:	b2db      	uxtb	r3, r3
 800d35a:	2b03      	cmp	r3, #3
 800d35c:	d10f      	bne.n	800d37e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d364:	68db      	ldr	r3, [r3, #12]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d009      	beq.n	800d37e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	2200      	movs	r2, #0
 800d36e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d378:	68db      	ldr	r3, [r3, #12]
 800d37a:	68f8      	ldr	r0, [r7, #12]
 800d37c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d37e:	2180      	movs	r1, #128	@ 0x80
 800d380:	68f8      	ldr	r0, [r7, #12]
 800d382:	f001 fd35 	bl	800edf0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d386:	68f8      	ldr	r0, [r7, #12]
 800d388:	f001 f8f1 	bl	800e56e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d392:	2b00      	cmp	r3, #0
 800d394:	d03a      	beq.n	800d40c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d396:	68f8      	ldr	r0, [r7, #12]
 800d398:	f7ff fe42 	bl	800d020 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	2200      	movs	r2, #0
 800d3a0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d3a4:	e032      	b.n	800d40c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d3a6:	7afb      	ldrb	r3, [r7, #11]
 800d3a8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d3ac:	b2db      	uxtb	r3, r3
 800d3ae:	4619      	mov	r1, r3
 800d3b0:	68f8      	ldr	r0, [r7, #12]
 800d3b2:	f000 f985 	bl	800d6c0 <USBD_CoreFindEP>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d3ba:	7dfb      	ldrb	r3, [r7, #23]
 800d3bc:	2bff      	cmp	r3, #255	@ 0xff
 800d3be:	d025      	beq.n	800d40c <USBD_LL_DataInStage+0x15a>
 800d3c0:	7dfb      	ldrb	r3, [r7, #23]
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d122      	bne.n	800d40c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3c6:	68fb      	ldr	r3, [r7, #12]
 800d3c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d3cc:	b2db      	uxtb	r3, r3
 800d3ce:	2b03      	cmp	r3, #3
 800d3d0:	d11c      	bne.n	800d40c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d3d2:	7dfa      	ldrb	r2, [r7, #23]
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	32ae      	adds	r2, #174	@ 0xae
 800d3d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3dc:	695b      	ldr	r3, [r3, #20]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d014      	beq.n	800d40c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d3e2:	7dfa      	ldrb	r2, [r7, #23]
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d3ea:	7dfa      	ldrb	r2, [r7, #23]
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	32ae      	adds	r2, #174	@ 0xae
 800d3f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3f4:	695b      	ldr	r3, [r3, #20]
 800d3f6:	7afa      	ldrb	r2, [r7, #11]
 800d3f8:	4611      	mov	r1, r2
 800d3fa:	68f8      	ldr	r0, [r7, #12]
 800d3fc:	4798      	blx	r3
 800d3fe:	4603      	mov	r3, r0
 800d400:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d402:	7dbb      	ldrb	r3, [r7, #22]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d001      	beq.n	800d40c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d408:	7dbb      	ldrb	r3, [r7, #22]
 800d40a:	e000      	b.n	800d40e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d40c:	2300      	movs	r3, #0
}
 800d40e:	4618      	mov	r0, r3
 800d410:	3718      	adds	r7, #24
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}

0800d416 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d416:	b580      	push	{r7, lr}
 800d418:	b084      	sub	sp, #16
 800d41a:	af00      	add	r7, sp, #0
 800d41c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d41e:	2300      	movs	r3, #0
 800d420:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2201      	movs	r2, #1
 800d426:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	2200      	movs	r2, #0
 800d42e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	2200      	movs	r2, #0
 800d436:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2200      	movs	r2, #0
 800d43c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	2200      	movs	r2, #0
 800d444:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d014      	beq.n	800d47c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d458:	685b      	ldr	r3, [r3, #4]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d00e      	beq.n	800d47c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d464:	685b      	ldr	r3, [r3, #4]
 800d466:	687a      	ldr	r2, [r7, #4]
 800d468:	6852      	ldr	r2, [r2, #4]
 800d46a:	b2d2      	uxtb	r2, r2
 800d46c:	4611      	mov	r1, r2
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	4798      	blx	r3
 800d472:	4603      	mov	r3, r0
 800d474:	2b00      	cmp	r3, #0
 800d476:	d001      	beq.n	800d47c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d478:	2303      	movs	r3, #3
 800d47a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d47c:	2340      	movs	r3, #64	@ 0x40
 800d47e:	2200      	movs	r2, #0
 800d480:	2100      	movs	r1, #0
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	f001 fc6f 	bl	800ed66 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2201      	movs	r2, #1
 800d48c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	2240      	movs	r2, #64	@ 0x40
 800d494:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d498:	2340      	movs	r3, #64	@ 0x40
 800d49a:	2200      	movs	r2, #0
 800d49c:	2180      	movs	r1, #128	@ 0x80
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f001 fc61 	bl	800ed66 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2240      	movs	r2, #64	@ 0x40
 800d4ae:	621a      	str	r2, [r3, #32]

  return ret;
 800d4b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3710      	adds	r7, #16
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}

0800d4ba <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d4ba:	b480      	push	{r7}
 800d4bc:	b083      	sub	sp, #12
 800d4be:	af00      	add	r7, sp, #0
 800d4c0:	6078      	str	r0, [r7, #4]
 800d4c2:	460b      	mov	r3, r1
 800d4c4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	78fa      	ldrb	r2, [r7, #3]
 800d4ca:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d4cc:	2300      	movs	r3, #0
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	370c      	adds	r7, #12
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d8:	4770      	bx	lr

0800d4da <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d4da:	b480      	push	{r7}
 800d4dc:	b083      	sub	sp, #12
 800d4de:	af00      	add	r7, sp, #0
 800d4e0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d4e8:	b2db      	uxtb	r3, r3
 800d4ea:	2b04      	cmp	r3, #4
 800d4ec:	d006      	beq.n	800d4fc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d4f4:	b2da      	uxtb	r2, r3
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2204      	movs	r2, #4
 800d500:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800d504:	2300      	movs	r3, #0
}
 800d506:	4618      	mov	r0, r3
 800d508:	370c      	adds	r7, #12
 800d50a:	46bd      	mov	sp, r7
 800d50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d510:	4770      	bx	lr

0800d512 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d512:	b480      	push	{r7}
 800d514:	b083      	sub	sp, #12
 800d516:	af00      	add	r7, sp, #0
 800d518:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d520:	b2db      	uxtb	r3, r3
 800d522:	2b04      	cmp	r3, #4
 800d524:	d106      	bne.n	800d534 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800d52c:	b2da      	uxtb	r2, r3
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800d534:	2300      	movs	r3, #0
}
 800d536:	4618      	mov	r0, r3
 800d538:	370c      	adds	r7, #12
 800d53a:	46bd      	mov	sp, r7
 800d53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d540:	4770      	bx	lr

0800d542 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d542:	b580      	push	{r7, lr}
 800d544:	b082      	sub	sp, #8
 800d546:	af00      	add	r7, sp, #0
 800d548:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d550:	b2db      	uxtb	r3, r3
 800d552:	2b03      	cmp	r3, #3
 800d554:	d110      	bne.n	800d578 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d00b      	beq.n	800d578 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d566:	69db      	ldr	r3, [r3, #28]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d005      	beq.n	800d578 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d572:	69db      	ldr	r3, [r3, #28]
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d578:	2300      	movs	r3, #0
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	3708      	adds	r7, #8
 800d57e:	46bd      	mov	sp, r7
 800d580:	bd80      	pop	{r7, pc}

0800d582 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d582:	b580      	push	{r7, lr}
 800d584:	b082      	sub	sp, #8
 800d586:	af00      	add	r7, sp, #0
 800d588:	6078      	str	r0, [r7, #4]
 800d58a:	460b      	mov	r3, r1
 800d58c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	32ae      	adds	r2, #174	@ 0xae
 800d598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d101      	bne.n	800d5a4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d5a0:	2303      	movs	r3, #3
 800d5a2:	e01c      	b.n	800d5de <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5aa:	b2db      	uxtb	r3, r3
 800d5ac:	2b03      	cmp	r3, #3
 800d5ae:	d115      	bne.n	800d5dc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	32ae      	adds	r2, #174	@ 0xae
 800d5ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5be:	6a1b      	ldr	r3, [r3, #32]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d00b      	beq.n	800d5dc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	32ae      	adds	r2, #174	@ 0xae
 800d5ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5d2:	6a1b      	ldr	r3, [r3, #32]
 800d5d4:	78fa      	ldrb	r2, [r7, #3]
 800d5d6:	4611      	mov	r1, r2
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d5dc:	2300      	movs	r3, #0
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3708      	adds	r7, #8
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}

0800d5e6 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d5e6:	b580      	push	{r7, lr}
 800d5e8:	b082      	sub	sp, #8
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	6078      	str	r0, [r7, #4]
 800d5ee:	460b      	mov	r3, r1
 800d5f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	32ae      	adds	r2, #174	@ 0xae
 800d5fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d101      	bne.n	800d608 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d604:	2303      	movs	r3, #3
 800d606:	e01c      	b.n	800d642 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d60e:	b2db      	uxtb	r3, r3
 800d610:	2b03      	cmp	r3, #3
 800d612:	d115      	bne.n	800d640 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	32ae      	adds	r2, #174	@ 0xae
 800d61e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d624:	2b00      	cmp	r3, #0
 800d626:	d00b      	beq.n	800d640 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	32ae      	adds	r2, #174	@ 0xae
 800d632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d636:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d638:	78fa      	ldrb	r2, [r7, #3]
 800d63a:	4611      	mov	r1, r2
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d640:	2300      	movs	r3, #0
}
 800d642:	4618      	mov	r0, r3
 800d644:	3708      	adds	r7, #8
 800d646:	46bd      	mov	sp, r7
 800d648:	bd80      	pop	{r7, pc}

0800d64a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d64a:	b480      	push	{r7}
 800d64c:	b083      	sub	sp, #12
 800d64e:	af00      	add	r7, sp, #0
 800d650:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d652:	2300      	movs	r3, #0
}
 800d654:	4618      	mov	r0, r3
 800d656:	370c      	adds	r7, #12
 800d658:	46bd      	mov	sp, r7
 800d65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d65e:	4770      	bx	lr

0800d660 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b084      	sub	sp, #16
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d668:	2300      	movs	r3, #0
 800d66a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2201      	movs	r2, #1
 800d670:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d00e      	beq.n	800d69c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d684:	685b      	ldr	r3, [r3, #4]
 800d686:	687a      	ldr	r2, [r7, #4]
 800d688:	6852      	ldr	r2, [r2, #4]
 800d68a:	b2d2      	uxtb	r2, r2
 800d68c:	4611      	mov	r1, r2
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	4798      	blx	r3
 800d692:	4603      	mov	r3, r0
 800d694:	2b00      	cmp	r3, #0
 800d696:	d001      	beq.n	800d69c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d698:	2303      	movs	r3, #3
 800d69a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3710      	adds	r7, #16
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}

0800d6a6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d6a6:	b480      	push	{r7}
 800d6a8:	b083      	sub	sp, #12
 800d6aa:	af00      	add	r7, sp, #0
 800d6ac:	6078      	str	r0, [r7, #4]
 800d6ae:	460b      	mov	r3, r1
 800d6b0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d6b2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	370c      	adds	r7, #12
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6be:	4770      	bx	lr

0800d6c0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d6c0:	b480      	push	{r7}
 800d6c2:	b083      	sub	sp, #12
 800d6c4:	af00      	add	r7, sp, #0
 800d6c6:	6078      	str	r0, [r7, #4]
 800d6c8:	460b      	mov	r3, r1
 800d6ca:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d6cc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d6ce:	4618      	mov	r0, r3
 800d6d0:	370c      	adds	r7, #12
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d8:	4770      	bx	lr

0800d6da <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d6da:	b580      	push	{r7, lr}
 800d6dc:	b086      	sub	sp, #24
 800d6de:	af00      	add	r7, sp, #0
 800d6e0:	6078      	str	r0, [r7, #4]
 800d6e2:	460b      	mov	r3, r1
 800d6e4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	885b      	ldrh	r3, [r3, #2]
 800d6f6:	b29b      	uxth	r3, r3
 800d6f8:	68fa      	ldr	r2, [r7, #12]
 800d6fa:	7812      	ldrb	r2, [r2, #0]
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	d91f      	bls.n	800d740 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	781b      	ldrb	r3, [r3, #0]
 800d704:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d706:	e013      	b.n	800d730 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d708:	f107 030a 	add.w	r3, r7, #10
 800d70c:	4619      	mov	r1, r3
 800d70e:	6978      	ldr	r0, [r7, #20]
 800d710:	f000 f81b 	bl	800d74a <USBD_GetNextDesc>
 800d714:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d716:	697b      	ldr	r3, [r7, #20]
 800d718:	785b      	ldrb	r3, [r3, #1]
 800d71a:	2b05      	cmp	r3, #5
 800d71c:	d108      	bne.n	800d730 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d71e:	697b      	ldr	r3, [r7, #20]
 800d720:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	789b      	ldrb	r3, [r3, #2]
 800d726:	78fa      	ldrb	r2, [r7, #3]
 800d728:	429a      	cmp	r2, r3
 800d72a:	d008      	beq.n	800d73e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d72c:	2300      	movs	r3, #0
 800d72e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	885b      	ldrh	r3, [r3, #2]
 800d734:	b29a      	uxth	r2, r3
 800d736:	897b      	ldrh	r3, [r7, #10]
 800d738:	429a      	cmp	r2, r3
 800d73a:	d8e5      	bhi.n	800d708 <USBD_GetEpDesc+0x2e>
 800d73c:	e000      	b.n	800d740 <USBD_GetEpDesc+0x66>
          break;
 800d73e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d740:	693b      	ldr	r3, [r7, #16]
}
 800d742:	4618      	mov	r0, r3
 800d744:	3718      	adds	r7, #24
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}

0800d74a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d74a:	b480      	push	{r7}
 800d74c:	b085      	sub	sp, #20
 800d74e:	af00      	add	r7, sp, #0
 800d750:	6078      	str	r0, [r7, #4]
 800d752:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	881b      	ldrh	r3, [r3, #0]
 800d75c:	68fa      	ldr	r2, [r7, #12]
 800d75e:	7812      	ldrb	r2, [r2, #0]
 800d760:	4413      	add	r3, r2
 800d762:	b29a      	uxth	r2, r3
 800d764:	683b      	ldr	r3, [r7, #0]
 800d766:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	461a      	mov	r2, r3
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	4413      	add	r3, r2
 800d772:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d774:	68fb      	ldr	r3, [r7, #12]
}
 800d776:	4618      	mov	r0, r3
 800d778:	3714      	adds	r7, #20
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr

0800d782 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d782:	b480      	push	{r7}
 800d784:	b087      	sub	sp, #28
 800d786:	af00      	add	r7, sp, #0
 800d788:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	781b      	ldrb	r3, [r3, #0]
 800d792:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d794:	697b      	ldr	r3, [r7, #20]
 800d796:	3301      	adds	r3, #1
 800d798:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	781b      	ldrb	r3, [r3, #0]
 800d79e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d7a0:	8a3b      	ldrh	r3, [r7, #16]
 800d7a2:	021b      	lsls	r3, r3, #8
 800d7a4:	b21a      	sxth	r2, r3
 800d7a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d7aa:	4313      	orrs	r3, r2
 800d7ac:	b21b      	sxth	r3, r3
 800d7ae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d7b0:	89fb      	ldrh	r3, [r7, #14]
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	371c      	adds	r7, #28
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7bc:	4770      	bx	lr
	...

0800d7c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b084      	sub	sp, #16
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d7ca:	2300      	movs	r3, #0
 800d7cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d7ce:	683b      	ldr	r3, [r7, #0]
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d7d6:	2b40      	cmp	r3, #64	@ 0x40
 800d7d8:	d005      	beq.n	800d7e6 <USBD_StdDevReq+0x26>
 800d7da:	2b40      	cmp	r3, #64	@ 0x40
 800d7dc:	d857      	bhi.n	800d88e <USBD_StdDevReq+0xce>
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d00f      	beq.n	800d802 <USBD_StdDevReq+0x42>
 800d7e2:	2b20      	cmp	r3, #32
 800d7e4:	d153      	bne.n	800d88e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	32ae      	adds	r2, #174	@ 0xae
 800d7f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7f4:	689b      	ldr	r3, [r3, #8]
 800d7f6:	6839      	ldr	r1, [r7, #0]
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	4798      	blx	r3
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	73fb      	strb	r3, [r7, #15]
      break;
 800d800:	e04a      	b.n	800d898 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d802:	683b      	ldr	r3, [r7, #0]
 800d804:	785b      	ldrb	r3, [r3, #1]
 800d806:	2b09      	cmp	r3, #9
 800d808:	d83b      	bhi.n	800d882 <USBD_StdDevReq+0xc2>
 800d80a:	a201      	add	r2, pc, #4	@ (adr r2, 800d810 <USBD_StdDevReq+0x50>)
 800d80c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d810:	0800d865 	.word	0x0800d865
 800d814:	0800d879 	.word	0x0800d879
 800d818:	0800d883 	.word	0x0800d883
 800d81c:	0800d86f 	.word	0x0800d86f
 800d820:	0800d883 	.word	0x0800d883
 800d824:	0800d843 	.word	0x0800d843
 800d828:	0800d839 	.word	0x0800d839
 800d82c:	0800d883 	.word	0x0800d883
 800d830:	0800d85b 	.word	0x0800d85b
 800d834:	0800d84d 	.word	0x0800d84d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d838:	6839      	ldr	r1, [r7, #0]
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f000 fa3c 	bl	800dcb8 <USBD_GetDescriptor>
          break;
 800d840:	e024      	b.n	800d88c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d842:	6839      	ldr	r1, [r7, #0]
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f000 fbcb 	bl	800dfe0 <USBD_SetAddress>
          break;
 800d84a:	e01f      	b.n	800d88c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d84c:	6839      	ldr	r1, [r7, #0]
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f000 fc0a 	bl	800e068 <USBD_SetConfig>
 800d854:	4603      	mov	r3, r0
 800d856:	73fb      	strb	r3, [r7, #15]
          break;
 800d858:	e018      	b.n	800d88c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d85a:	6839      	ldr	r1, [r7, #0]
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f000 fcad 	bl	800e1bc <USBD_GetConfig>
          break;
 800d862:	e013      	b.n	800d88c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d864:	6839      	ldr	r1, [r7, #0]
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f000 fcde 	bl	800e228 <USBD_GetStatus>
          break;
 800d86c:	e00e      	b.n	800d88c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d86e:	6839      	ldr	r1, [r7, #0]
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f000 fd0d 	bl	800e290 <USBD_SetFeature>
          break;
 800d876:	e009      	b.n	800d88c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d878:	6839      	ldr	r1, [r7, #0]
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f000 fd31 	bl	800e2e2 <USBD_ClrFeature>
          break;
 800d880:	e004      	b.n	800d88c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d882:	6839      	ldr	r1, [r7, #0]
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f000 fd88 	bl	800e39a <USBD_CtlError>
          break;
 800d88a:	bf00      	nop
      }
      break;
 800d88c:	e004      	b.n	800d898 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d88e:	6839      	ldr	r1, [r7, #0]
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f000 fd82 	bl	800e39a <USBD_CtlError>
      break;
 800d896:	bf00      	nop
  }

  return ret;
 800d898:	7bfb      	ldrb	r3, [r7, #15]
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3710      	adds	r7, #16
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}
 800d8a2:	bf00      	nop

0800d8a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b084      	sub	sp, #16
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	781b      	ldrb	r3, [r3, #0]
 800d8b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d8ba:	2b40      	cmp	r3, #64	@ 0x40
 800d8bc:	d005      	beq.n	800d8ca <USBD_StdItfReq+0x26>
 800d8be:	2b40      	cmp	r3, #64	@ 0x40
 800d8c0:	d852      	bhi.n	800d968 <USBD_StdItfReq+0xc4>
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d001      	beq.n	800d8ca <USBD_StdItfReq+0x26>
 800d8c6:	2b20      	cmp	r3, #32
 800d8c8:	d14e      	bne.n	800d968 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8d0:	b2db      	uxtb	r3, r3
 800d8d2:	3b01      	subs	r3, #1
 800d8d4:	2b02      	cmp	r3, #2
 800d8d6:	d840      	bhi.n	800d95a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d8d8:	683b      	ldr	r3, [r7, #0]
 800d8da:	889b      	ldrh	r3, [r3, #4]
 800d8dc:	b2db      	uxtb	r3, r3
 800d8de:	2b01      	cmp	r3, #1
 800d8e0:	d836      	bhi.n	800d950 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	889b      	ldrh	r3, [r3, #4]
 800d8e6:	b2db      	uxtb	r3, r3
 800d8e8:	4619      	mov	r1, r3
 800d8ea:	6878      	ldr	r0, [r7, #4]
 800d8ec:	f7ff fedb 	bl	800d6a6 <USBD_CoreFindIF>
 800d8f0:	4603      	mov	r3, r0
 800d8f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d8f4:	7bbb      	ldrb	r3, [r7, #14]
 800d8f6:	2bff      	cmp	r3, #255	@ 0xff
 800d8f8:	d01d      	beq.n	800d936 <USBD_StdItfReq+0x92>
 800d8fa:	7bbb      	ldrb	r3, [r7, #14]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d11a      	bne.n	800d936 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d900:	7bba      	ldrb	r2, [r7, #14]
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	32ae      	adds	r2, #174	@ 0xae
 800d906:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d90a:	689b      	ldr	r3, [r3, #8]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d00f      	beq.n	800d930 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d910:	7bba      	ldrb	r2, [r7, #14]
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d918:	7bba      	ldrb	r2, [r7, #14]
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	32ae      	adds	r2, #174	@ 0xae
 800d91e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d922:	689b      	ldr	r3, [r3, #8]
 800d924:	6839      	ldr	r1, [r7, #0]
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	4798      	blx	r3
 800d92a:	4603      	mov	r3, r0
 800d92c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d92e:	e004      	b.n	800d93a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d930:	2303      	movs	r3, #3
 800d932:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d934:	e001      	b.n	800d93a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d936:	2303      	movs	r3, #3
 800d938:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	88db      	ldrh	r3, [r3, #6]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d110      	bne.n	800d964 <USBD_StdItfReq+0xc0>
 800d942:	7bfb      	ldrb	r3, [r7, #15]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d10d      	bne.n	800d964 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f000 fdfd 	bl	800e548 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d94e:	e009      	b.n	800d964 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d950:	6839      	ldr	r1, [r7, #0]
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f000 fd21 	bl	800e39a <USBD_CtlError>
          break;
 800d958:	e004      	b.n	800d964 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d95a:	6839      	ldr	r1, [r7, #0]
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f000 fd1c 	bl	800e39a <USBD_CtlError>
          break;
 800d962:	e000      	b.n	800d966 <USBD_StdItfReq+0xc2>
          break;
 800d964:	bf00      	nop
      }
      break;
 800d966:	e004      	b.n	800d972 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d968:	6839      	ldr	r1, [r7, #0]
 800d96a:	6878      	ldr	r0, [r7, #4]
 800d96c:	f000 fd15 	bl	800e39a <USBD_CtlError>
      break;
 800d970:	bf00      	nop
  }

  return ret;
 800d972:	7bfb      	ldrb	r3, [r7, #15]
}
 800d974:	4618      	mov	r0, r3
 800d976:	3710      	adds	r7, #16
 800d978:	46bd      	mov	sp, r7
 800d97a:	bd80      	pop	{r7, pc}

0800d97c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b084      	sub	sp, #16
 800d980:	af00      	add	r7, sp, #0
 800d982:	6078      	str	r0, [r7, #4]
 800d984:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d986:	2300      	movs	r3, #0
 800d988:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	889b      	ldrh	r3, [r3, #4]
 800d98e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	781b      	ldrb	r3, [r3, #0]
 800d994:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d998:	2b40      	cmp	r3, #64	@ 0x40
 800d99a:	d007      	beq.n	800d9ac <USBD_StdEPReq+0x30>
 800d99c:	2b40      	cmp	r3, #64	@ 0x40
 800d99e:	f200 817f 	bhi.w	800dca0 <USBD_StdEPReq+0x324>
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	d02a      	beq.n	800d9fc <USBD_StdEPReq+0x80>
 800d9a6:	2b20      	cmp	r3, #32
 800d9a8:	f040 817a 	bne.w	800dca0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d9ac:	7bbb      	ldrb	r3, [r7, #14]
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f7ff fe85 	bl	800d6c0 <USBD_CoreFindEP>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d9ba:	7b7b      	ldrb	r3, [r7, #13]
 800d9bc:	2bff      	cmp	r3, #255	@ 0xff
 800d9be:	f000 8174 	beq.w	800dcaa <USBD_StdEPReq+0x32e>
 800d9c2:	7b7b      	ldrb	r3, [r7, #13]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	f040 8170 	bne.w	800dcaa <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d9ca:	7b7a      	ldrb	r2, [r7, #13]
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d9d2:	7b7a      	ldrb	r2, [r7, #13]
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	32ae      	adds	r2, #174	@ 0xae
 800d9d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9dc:	689b      	ldr	r3, [r3, #8]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	f000 8163 	beq.w	800dcaa <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d9e4:	7b7a      	ldrb	r2, [r7, #13]
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	32ae      	adds	r2, #174	@ 0xae
 800d9ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9ee:	689b      	ldr	r3, [r3, #8]
 800d9f0:	6839      	ldr	r1, [r7, #0]
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	4798      	blx	r3
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d9fa:	e156      	b.n	800dcaa <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d9fc:	683b      	ldr	r3, [r7, #0]
 800d9fe:	785b      	ldrb	r3, [r3, #1]
 800da00:	2b03      	cmp	r3, #3
 800da02:	d008      	beq.n	800da16 <USBD_StdEPReq+0x9a>
 800da04:	2b03      	cmp	r3, #3
 800da06:	f300 8145 	bgt.w	800dc94 <USBD_StdEPReq+0x318>
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	f000 809b 	beq.w	800db46 <USBD_StdEPReq+0x1ca>
 800da10:	2b01      	cmp	r3, #1
 800da12:	d03c      	beq.n	800da8e <USBD_StdEPReq+0x112>
 800da14:	e13e      	b.n	800dc94 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da1c:	b2db      	uxtb	r3, r3
 800da1e:	2b02      	cmp	r3, #2
 800da20:	d002      	beq.n	800da28 <USBD_StdEPReq+0xac>
 800da22:	2b03      	cmp	r3, #3
 800da24:	d016      	beq.n	800da54 <USBD_StdEPReq+0xd8>
 800da26:	e02c      	b.n	800da82 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800da28:	7bbb      	ldrb	r3, [r7, #14]
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d00d      	beq.n	800da4a <USBD_StdEPReq+0xce>
 800da2e:	7bbb      	ldrb	r3, [r7, #14]
 800da30:	2b80      	cmp	r3, #128	@ 0x80
 800da32:	d00a      	beq.n	800da4a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800da34:	7bbb      	ldrb	r3, [r7, #14]
 800da36:	4619      	mov	r1, r3
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f001 f9d9 	bl	800edf0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800da3e:	2180      	movs	r1, #128	@ 0x80
 800da40:	6878      	ldr	r0, [r7, #4]
 800da42:	f001 f9d5 	bl	800edf0 <USBD_LL_StallEP>
 800da46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800da48:	e020      	b.n	800da8c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800da4a:	6839      	ldr	r1, [r7, #0]
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 fca4 	bl	800e39a <USBD_CtlError>
              break;
 800da52:	e01b      	b.n	800da8c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800da54:	683b      	ldr	r3, [r7, #0]
 800da56:	885b      	ldrh	r3, [r3, #2]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d10e      	bne.n	800da7a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800da5c:	7bbb      	ldrb	r3, [r7, #14]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d00b      	beq.n	800da7a <USBD_StdEPReq+0xfe>
 800da62:	7bbb      	ldrb	r3, [r7, #14]
 800da64:	2b80      	cmp	r3, #128	@ 0x80
 800da66:	d008      	beq.n	800da7a <USBD_StdEPReq+0xfe>
 800da68:	683b      	ldr	r3, [r7, #0]
 800da6a:	88db      	ldrh	r3, [r3, #6]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d104      	bne.n	800da7a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800da70:	7bbb      	ldrb	r3, [r7, #14]
 800da72:	4619      	mov	r1, r3
 800da74:	6878      	ldr	r0, [r7, #4]
 800da76:	f001 f9bb 	bl	800edf0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f000 fd64 	bl	800e548 <USBD_CtlSendStatus>

              break;
 800da80:	e004      	b.n	800da8c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800da82:	6839      	ldr	r1, [r7, #0]
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f000 fc88 	bl	800e39a <USBD_CtlError>
              break;
 800da8a:	bf00      	nop
          }
          break;
 800da8c:	e107      	b.n	800dc9e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da94:	b2db      	uxtb	r3, r3
 800da96:	2b02      	cmp	r3, #2
 800da98:	d002      	beq.n	800daa0 <USBD_StdEPReq+0x124>
 800da9a:	2b03      	cmp	r3, #3
 800da9c:	d016      	beq.n	800dacc <USBD_StdEPReq+0x150>
 800da9e:	e04b      	b.n	800db38 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800daa0:	7bbb      	ldrb	r3, [r7, #14]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d00d      	beq.n	800dac2 <USBD_StdEPReq+0x146>
 800daa6:	7bbb      	ldrb	r3, [r7, #14]
 800daa8:	2b80      	cmp	r3, #128	@ 0x80
 800daaa:	d00a      	beq.n	800dac2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800daac:	7bbb      	ldrb	r3, [r7, #14]
 800daae:	4619      	mov	r1, r3
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f001 f99d 	bl	800edf0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dab6:	2180      	movs	r1, #128	@ 0x80
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f001 f999 	bl	800edf0 <USBD_LL_StallEP>
 800dabe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dac0:	e040      	b.n	800db44 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800dac2:	6839      	ldr	r1, [r7, #0]
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f000 fc68 	bl	800e39a <USBD_CtlError>
              break;
 800daca:	e03b      	b.n	800db44 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	885b      	ldrh	r3, [r3, #2]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d136      	bne.n	800db42 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dad4:	7bbb      	ldrb	r3, [r7, #14]
 800dad6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d004      	beq.n	800dae8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800dade:	7bbb      	ldrb	r3, [r7, #14]
 800dae0:	4619      	mov	r1, r3
 800dae2:	6878      	ldr	r0, [r7, #4]
 800dae4:	f001 f9a3 	bl	800ee2e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f000 fd2d 	bl	800e548 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800daee:	7bbb      	ldrb	r3, [r7, #14]
 800daf0:	4619      	mov	r1, r3
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f7ff fde4 	bl	800d6c0 <USBD_CoreFindEP>
 800daf8:	4603      	mov	r3, r0
 800dafa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dafc:	7b7b      	ldrb	r3, [r7, #13]
 800dafe:	2bff      	cmp	r3, #255	@ 0xff
 800db00:	d01f      	beq.n	800db42 <USBD_StdEPReq+0x1c6>
 800db02:	7b7b      	ldrb	r3, [r7, #13]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d11c      	bne.n	800db42 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800db08:	7b7a      	ldrb	r2, [r7, #13]
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800db10:	7b7a      	ldrb	r2, [r7, #13]
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	32ae      	adds	r2, #174	@ 0xae
 800db16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db1a:	689b      	ldr	r3, [r3, #8]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d010      	beq.n	800db42 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800db20:	7b7a      	ldrb	r2, [r7, #13]
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	32ae      	adds	r2, #174	@ 0xae
 800db26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db2a:	689b      	ldr	r3, [r3, #8]
 800db2c:	6839      	ldr	r1, [r7, #0]
 800db2e:	6878      	ldr	r0, [r7, #4]
 800db30:	4798      	blx	r3
 800db32:	4603      	mov	r3, r0
 800db34:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800db36:	e004      	b.n	800db42 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800db38:	6839      	ldr	r1, [r7, #0]
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f000 fc2d 	bl	800e39a <USBD_CtlError>
              break;
 800db40:	e000      	b.n	800db44 <USBD_StdEPReq+0x1c8>
              break;
 800db42:	bf00      	nop
          }
          break;
 800db44:	e0ab      	b.n	800dc9e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db4c:	b2db      	uxtb	r3, r3
 800db4e:	2b02      	cmp	r3, #2
 800db50:	d002      	beq.n	800db58 <USBD_StdEPReq+0x1dc>
 800db52:	2b03      	cmp	r3, #3
 800db54:	d032      	beq.n	800dbbc <USBD_StdEPReq+0x240>
 800db56:	e097      	b.n	800dc88 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800db58:	7bbb      	ldrb	r3, [r7, #14]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d007      	beq.n	800db6e <USBD_StdEPReq+0x1f2>
 800db5e:	7bbb      	ldrb	r3, [r7, #14]
 800db60:	2b80      	cmp	r3, #128	@ 0x80
 800db62:	d004      	beq.n	800db6e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800db64:	6839      	ldr	r1, [r7, #0]
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f000 fc17 	bl	800e39a <USBD_CtlError>
                break;
 800db6c:	e091      	b.n	800dc92 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db72:	2b00      	cmp	r3, #0
 800db74:	da0b      	bge.n	800db8e <USBD_StdEPReq+0x212>
 800db76:	7bbb      	ldrb	r3, [r7, #14]
 800db78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800db7c:	4613      	mov	r3, r2
 800db7e:	009b      	lsls	r3, r3, #2
 800db80:	4413      	add	r3, r2
 800db82:	009b      	lsls	r3, r3, #2
 800db84:	3310      	adds	r3, #16
 800db86:	687a      	ldr	r2, [r7, #4]
 800db88:	4413      	add	r3, r2
 800db8a:	3304      	adds	r3, #4
 800db8c:	e00b      	b.n	800dba6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800db8e:	7bbb      	ldrb	r3, [r7, #14]
 800db90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db94:	4613      	mov	r3, r2
 800db96:	009b      	lsls	r3, r3, #2
 800db98:	4413      	add	r3, r2
 800db9a:	009b      	lsls	r3, r3, #2
 800db9c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800dba0:	687a      	ldr	r2, [r7, #4]
 800dba2:	4413      	add	r3, r2
 800dba4:	3304      	adds	r3, #4
 800dba6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	2200      	movs	r2, #0
 800dbac:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	2202      	movs	r2, #2
 800dbb2:	4619      	mov	r1, r3
 800dbb4:	6878      	ldr	r0, [r7, #4]
 800dbb6:	f000 fc6d 	bl	800e494 <USBD_CtlSendData>
              break;
 800dbba:	e06a      	b.n	800dc92 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dbbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	da11      	bge.n	800dbe8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dbc4:	7bbb      	ldrb	r3, [r7, #14]
 800dbc6:	f003 020f 	and.w	r2, r3, #15
 800dbca:	6879      	ldr	r1, [r7, #4]
 800dbcc:	4613      	mov	r3, r2
 800dbce:	009b      	lsls	r3, r3, #2
 800dbd0:	4413      	add	r3, r2
 800dbd2:	009b      	lsls	r3, r3, #2
 800dbd4:	440b      	add	r3, r1
 800dbd6:	3324      	adds	r3, #36	@ 0x24
 800dbd8:	881b      	ldrh	r3, [r3, #0]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d117      	bne.n	800dc0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800dbde:	6839      	ldr	r1, [r7, #0]
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f000 fbda 	bl	800e39a <USBD_CtlError>
                  break;
 800dbe6:	e054      	b.n	800dc92 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dbe8:	7bbb      	ldrb	r3, [r7, #14]
 800dbea:	f003 020f 	and.w	r2, r3, #15
 800dbee:	6879      	ldr	r1, [r7, #4]
 800dbf0:	4613      	mov	r3, r2
 800dbf2:	009b      	lsls	r3, r3, #2
 800dbf4:	4413      	add	r3, r2
 800dbf6:	009b      	lsls	r3, r3, #2
 800dbf8:	440b      	add	r3, r1
 800dbfa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800dbfe:	881b      	ldrh	r3, [r3, #0]
 800dc00:	2b00      	cmp	r3, #0
 800dc02:	d104      	bne.n	800dc0e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800dc04:	6839      	ldr	r1, [r7, #0]
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f000 fbc7 	bl	800e39a <USBD_CtlError>
                  break;
 800dc0c:	e041      	b.n	800dc92 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dc0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	da0b      	bge.n	800dc2e <USBD_StdEPReq+0x2b2>
 800dc16:	7bbb      	ldrb	r3, [r7, #14]
 800dc18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800dc1c:	4613      	mov	r3, r2
 800dc1e:	009b      	lsls	r3, r3, #2
 800dc20:	4413      	add	r3, r2
 800dc22:	009b      	lsls	r3, r3, #2
 800dc24:	3310      	adds	r3, #16
 800dc26:	687a      	ldr	r2, [r7, #4]
 800dc28:	4413      	add	r3, r2
 800dc2a:	3304      	adds	r3, #4
 800dc2c:	e00b      	b.n	800dc46 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dc2e:	7bbb      	ldrb	r3, [r7, #14]
 800dc30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dc34:	4613      	mov	r3, r2
 800dc36:	009b      	lsls	r3, r3, #2
 800dc38:	4413      	add	r3, r2
 800dc3a:	009b      	lsls	r3, r3, #2
 800dc3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800dc40:	687a      	ldr	r2, [r7, #4]
 800dc42:	4413      	add	r3, r2
 800dc44:	3304      	adds	r3, #4
 800dc46:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dc48:	7bbb      	ldrb	r3, [r7, #14]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d002      	beq.n	800dc54 <USBD_StdEPReq+0x2d8>
 800dc4e:	7bbb      	ldrb	r3, [r7, #14]
 800dc50:	2b80      	cmp	r3, #128	@ 0x80
 800dc52:	d103      	bne.n	800dc5c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800dc54:	68bb      	ldr	r3, [r7, #8]
 800dc56:	2200      	movs	r2, #0
 800dc58:	601a      	str	r2, [r3, #0]
 800dc5a:	e00e      	b.n	800dc7a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800dc5c:	7bbb      	ldrb	r3, [r7, #14]
 800dc5e:	4619      	mov	r1, r3
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f001 f903 	bl	800ee6c <USBD_LL_IsStallEP>
 800dc66:	4603      	mov	r3, r0
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d003      	beq.n	800dc74 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	2201      	movs	r2, #1
 800dc70:	601a      	str	r2, [r3, #0]
 800dc72:	e002      	b.n	800dc7a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	2200      	movs	r2, #0
 800dc78:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	2202      	movs	r2, #2
 800dc7e:	4619      	mov	r1, r3
 800dc80:	6878      	ldr	r0, [r7, #4]
 800dc82:	f000 fc07 	bl	800e494 <USBD_CtlSendData>
              break;
 800dc86:	e004      	b.n	800dc92 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800dc88:	6839      	ldr	r1, [r7, #0]
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f000 fb85 	bl	800e39a <USBD_CtlError>
              break;
 800dc90:	bf00      	nop
          }
          break;
 800dc92:	e004      	b.n	800dc9e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800dc94:	6839      	ldr	r1, [r7, #0]
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f000 fb7f 	bl	800e39a <USBD_CtlError>
          break;
 800dc9c:	bf00      	nop
      }
      break;
 800dc9e:	e005      	b.n	800dcac <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800dca0:	6839      	ldr	r1, [r7, #0]
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 fb79 	bl	800e39a <USBD_CtlError>
      break;
 800dca8:	e000      	b.n	800dcac <USBD_StdEPReq+0x330>
      break;
 800dcaa:	bf00      	nop
  }

  return ret;
 800dcac:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcae:	4618      	mov	r0, r3
 800dcb0:	3710      	adds	r7, #16
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}
	...

0800dcb8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b084      	sub	sp, #16
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
 800dcc0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dcca:	2300      	movs	r3, #0
 800dccc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dcce:	683b      	ldr	r3, [r7, #0]
 800dcd0:	885b      	ldrh	r3, [r3, #2]
 800dcd2:	0a1b      	lsrs	r3, r3, #8
 800dcd4:	b29b      	uxth	r3, r3
 800dcd6:	3b01      	subs	r3, #1
 800dcd8:	2b0e      	cmp	r3, #14
 800dcda:	f200 8152 	bhi.w	800df82 <USBD_GetDescriptor+0x2ca>
 800dcde:	a201      	add	r2, pc, #4	@ (adr r2, 800dce4 <USBD_GetDescriptor+0x2c>)
 800dce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dce4:	0800dd55 	.word	0x0800dd55
 800dce8:	0800dd6d 	.word	0x0800dd6d
 800dcec:	0800ddad 	.word	0x0800ddad
 800dcf0:	0800df83 	.word	0x0800df83
 800dcf4:	0800df83 	.word	0x0800df83
 800dcf8:	0800df23 	.word	0x0800df23
 800dcfc:	0800df4f 	.word	0x0800df4f
 800dd00:	0800df83 	.word	0x0800df83
 800dd04:	0800df83 	.word	0x0800df83
 800dd08:	0800df83 	.word	0x0800df83
 800dd0c:	0800df83 	.word	0x0800df83
 800dd10:	0800df83 	.word	0x0800df83
 800dd14:	0800df83 	.word	0x0800df83
 800dd18:	0800df83 	.word	0x0800df83
 800dd1c:	0800dd21 	.word	0x0800dd21
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dd26:	69db      	ldr	r3, [r3, #28]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d00b      	beq.n	800dd44 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dd32:	69db      	ldr	r3, [r3, #28]
 800dd34:	687a      	ldr	r2, [r7, #4]
 800dd36:	7c12      	ldrb	r2, [r2, #16]
 800dd38:	f107 0108 	add.w	r1, r7, #8
 800dd3c:	4610      	mov	r0, r2
 800dd3e:	4798      	blx	r3
 800dd40:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dd42:	e126      	b.n	800df92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dd44:	6839      	ldr	r1, [r7, #0]
 800dd46:	6878      	ldr	r0, [r7, #4]
 800dd48:	f000 fb27 	bl	800e39a <USBD_CtlError>
        err++;
 800dd4c:	7afb      	ldrb	r3, [r7, #11]
 800dd4e:	3301      	adds	r3, #1
 800dd50:	72fb      	strb	r3, [r7, #11]
      break;
 800dd52:	e11e      	b.n	800df92 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	687a      	ldr	r2, [r7, #4]
 800dd5e:	7c12      	ldrb	r2, [r2, #16]
 800dd60:	f107 0108 	add.w	r1, r7, #8
 800dd64:	4610      	mov	r0, r2
 800dd66:	4798      	blx	r3
 800dd68:	60f8      	str	r0, [r7, #12]
      break;
 800dd6a:	e112      	b.n	800df92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	7c1b      	ldrb	r3, [r3, #16]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d10d      	bne.n	800dd90 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dd7c:	f107 0208 	add.w	r2, r7, #8
 800dd80:	4610      	mov	r0, r2
 800dd82:	4798      	blx	r3
 800dd84:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dd86:	68fb      	ldr	r3, [r7, #12]
 800dd88:	3301      	adds	r3, #1
 800dd8a:	2202      	movs	r2, #2
 800dd8c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dd8e:	e100      	b.n	800df92 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800dd96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dd98:	f107 0208 	add.w	r2, r7, #8
 800dd9c:	4610      	mov	r0, r2
 800dd9e:	4798      	blx	r3
 800dda0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	3301      	adds	r3, #1
 800dda6:	2202      	movs	r2, #2
 800dda8:	701a      	strb	r2, [r3, #0]
      break;
 800ddaa:	e0f2      	b.n	800df92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ddac:	683b      	ldr	r3, [r7, #0]
 800ddae:	885b      	ldrh	r3, [r3, #2]
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	2b05      	cmp	r3, #5
 800ddb4:	f200 80ac 	bhi.w	800df10 <USBD_GetDescriptor+0x258>
 800ddb8:	a201      	add	r2, pc, #4	@ (adr r2, 800ddc0 <USBD_GetDescriptor+0x108>)
 800ddba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddbe:	bf00      	nop
 800ddc0:	0800ddd9 	.word	0x0800ddd9
 800ddc4:	0800de0d 	.word	0x0800de0d
 800ddc8:	0800de41 	.word	0x0800de41
 800ddcc:	0800de75 	.word	0x0800de75
 800ddd0:	0800dea9 	.word	0x0800dea9
 800ddd4:	0800dedd 	.word	0x0800dedd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ddde:	685b      	ldr	r3, [r3, #4]
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d00b      	beq.n	800ddfc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ddea:	685b      	ldr	r3, [r3, #4]
 800ddec:	687a      	ldr	r2, [r7, #4]
 800ddee:	7c12      	ldrb	r2, [r2, #16]
 800ddf0:	f107 0108 	add.w	r1, r7, #8
 800ddf4:	4610      	mov	r0, r2
 800ddf6:	4798      	blx	r3
 800ddf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ddfa:	e091      	b.n	800df20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ddfc:	6839      	ldr	r1, [r7, #0]
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f000 facb 	bl	800e39a <USBD_CtlError>
            err++;
 800de04:	7afb      	ldrb	r3, [r7, #11]
 800de06:	3301      	adds	r3, #1
 800de08:	72fb      	strb	r3, [r7, #11]
          break;
 800de0a:	e089      	b.n	800df20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de12:	689b      	ldr	r3, [r3, #8]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d00b      	beq.n	800de30 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de1e:	689b      	ldr	r3, [r3, #8]
 800de20:	687a      	ldr	r2, [r7, #4]
 800de22:	7c12      	ldrb	r2, [r2, #16]
 800de24:	f107 0108 	add.w	r1, r7, #8
 800de28:	4610      	mov	r0, r2
 800de2a:	4798      	blx	r3
 800de2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de2e:	e077      	b.n	800df20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800de30:	6839      	ldr	r1, [r7, #0]
 800de32:	6878      	ldr	r0, [r7, #4]
 800de34:	f000 fab1 	bl	800e39a <USBD_CtlError>
            err++;
 800de38:	7afb      	ldrb	r3, [r7, #11]
 800de3a:	3301      	adds	r3, #1
 800de3c:	72fb      	strb	r3, [r7, #11]
          break;
 800de3e:	e06f      	b.n	800df20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de46:	68db      	ldr	r3, [r3, #12]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d00b      	beq.n	800de64 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de52:	68db      	ldr	r3, [r3, #12]
 800de54:	687a      	ldr	r2, [r7, #4]
 800de56:	7c12      	ldrb	r2, [r2, #16]
 800de58:	f107 0108 	add.w	r1, r7, #8
 800de5c:	4610      	mov	r0, r2
 800de5e:	4798      	blx	r3
 800de60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de62:	e05d      	b.n	800df20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800de64:	6839      	ldr	r1, [r7, #0]
 800de66:	6878      	ldr	r0, [r7, #4]
 800de68:	f000 fa97 	bl	800e39a <USBD_CtlError>
            err++;
 800de6c:	7afb      	ldrb	r3, [r7, #11]
 800de6e:	3301      	adds	r3, #1
 800de70:	72fb      	strb	r3, [r7, #11]
          break;
 800de72:	e055      	b.n	800df20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de7a:	691b      	ldr	r3, [r3, #16]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d00b      	beq.n	800de98 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800de86:	691b      	ldr	r3, [r3, #16]
 800de88:	687a      	ldr	r2, [r7, #4]
 800de8a:	7c12      	ldrb	r2, [r2, #16]
 800de8c:	f107 0108 	add.w	r1, r7, #8
 800de90:	4610      	mov	r0, r2
 800de92:	4798      	blx	r3
 800de94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800de96:	e043      	b.n	800df20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800de98:	6839      	ldr	r1, [r7, #0]
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f000 fa7d 	bl	800e39a <USBD_CtlError>
            err++;
 800dea0:	7afb      	ldrb	r3, [r7, #11]
 800dea2:	3301      	adds	r3, #1
 800dea4:	72fb      	strb	r3, [r7, #11]
          break;
 800dea6:	e03b      	b.n	800df20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800deae:	695b      	ldr	r3, [r3, #20]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d00b      	beq.n	800decc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800deba:	695b      	ldr	r3, [r3, #20]
 800debc:	687a      	ldr	r2, [r7, #4]
 800debe:	7c12      	ldrb	r2, [r2, #16]
 800dec0:	f107 0108 	add.w	r1, r7, #8
 800dec4:	4610      	mov	r0, r2
 800dec6:	4798      	blx	r3
 800dec8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800deca:	e029      	b.n	800df20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800decc:	6839      	ldr	r1, [r7, #0]
 800dece:	6878      	ldr	r0, [r7, #4]
 800ded0:	f000 fa63 	bl	800e39a <USBD_CtlError>
            err++;
 800ded4:	7afb      	ldrb	r3, [r7, #11]
 800ded6:	3301      	adds	r3, #1
 800ded8:	72fb      	strb	r3, [r7, #11]
          break;
 800deda:	e021      	b.n	800df20 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800dee2:	699b      	ldr	r3, [r3, #24]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d00b      	beq.n	800df00 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800deee:	699b      	ldr	r3, [r3, #24]
 800def0:	687a      	ldr	r2, [r7, #4]
 800def2:	7c12      	ldrb	r2, [r2, #16]
 800def4:	f107 0108 	add.w	r1, r7, #8
 800def8:	4610      	mov	r0, r2
 800defa:	4798      	blx	r3
 800defc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800defe:	e00f      	b.n	800df20 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800df00:	6839      	ldr	r1, [r7, #0]
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f000 fa49 	bl	800e39a <USBD_CtlError>
            err++;
 800df08:	7afb      	ldrb	r3, [r7, #11]
 800df0a:	3301      	adds	r3, #1
 800df0c:	72fb      	strb	r3, [r7, #11]
          break;
 800df0e:	e007      	b.n	800df20 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800df10:	6839      	ldr	r1, [r7, #0]
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f000 fa41 	bl	800e39a <USBD_CtlError>
          err++;
 800df18:	7afb      	ldrb	r3, [r7, #11]
 800df1a:	3301      	adds	r3, #1
 800df1c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800df1e:	bf00      	nop
      }
      break;
 800df20:	e037      	b.n	800df92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	7c1b      	ldrb	r3, [r3, #16]
 800df26:	2b00      	cmp	r3, #0
 800df28:	d109      	bne.n	800df3e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800df32:	f107 0208 	add.w	r2, r7, #8
 800df36:	4610      	mov	r0, r2
 800df38:	4798      	blx	r3
 800df3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800df3c:	e029      	b.n	800df92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800df3e:	6839      	ldr	r1, [r7, #0]
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f000 fa2a 	bl	800e39a <USBD_CtlError>
        err++;
 800df46:	7afb      	ldrb	r3, [r7, #11]
 800df48:	3301      	adds	r3, #1
 800df4a:	72fb      	strb	r3, [r7, #11]
      break;
 800df4c:	e021      	b.n	800df92 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	7c1b      	ldrb	r3, [r3, #16]
 800df52:	2b00      	cmp	r3, #0
 800df54:	d10d      	bne.n	800df72 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800df5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800df5e:	f107 0208 	add.w	r2, r7, #8
 800df62:	4610      	mov	r0, r2
 800df64:	4798      	blx	r3
 800df66:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	3301      	adds	r3, #1
 800df6c:	2207      	movs	r2, #7
 800df6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800df70:	e00f      	b.n	800df92 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800df72:	6839      	ldr	r1, [r7, #0]
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f000 fa10 	bl	800e39a <USBD_CtlError>
        err++;
 800df7a:	7afb      	ldrb	r3, [r7, #11]
 800df7c:	3301      	adds	r3, #1
 800df7e:	72fb      	strb	r3, [r7, #11]
      break;
 800df80:	e007      	b.n	800df92 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800df82:	6839      	ldr	r1, [r7, #0]
 800df84:	6878      	ldr	r0, [r7, #4]
 800df86:	f000 fa08 	bl	800e39a <USBD_CtlError>
      err++;
 800df8a:	7afb      	ldrb	r3, [r7, #11]
 800df8c:	3301      	adds	r3, #1
 800df8e:	72fb      	strb	r3, [r7, #11]
      break;
 800df90:	bf00      	nop
  }

  if (err != 0U)
 800df92:	7afb      	ldrb	r3, [r7, #11]
 800df94:	2b00      	cmp	r3, #0
 800df96:	d11e      	bne.n	800dfd6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	88db      	ldrh	r3, [r3, #6]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d016      	beq.n	800dfce <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800dfa0:	893b      	ldrh	r3, [r7, #8]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d00e      	beq.n	800dfc4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800dfa6:	683b      	ldr	r3, [r7, #0]
 800dfa8:	88da      	ldrh	r2, [r3, #6]
 800dfaa:	893b      	ldrh	r3, [r7, #8]
 800dfac:	4293      	cmp	r3, r2
 800dfae:	bf28      	it	cs
 800dfb0:	4613      	movcs	r3, r2
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dfb6:	893b      	ldrh	r3, [r7, #8]
 800dfb8:	461a      	mov	r2, r3
 800dfba:	68f9      	ldr	r1, [r7, #12]
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f000 fa69 	bl	800e494 <USBD_CtlSendData>
 800dfc2:	e009      	b.n	800dfd8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800dfc4:	6839      	ldr	r1, [r7, #0]
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f000 f9e7 	bl	800e39a <USBD_CtlError>
 800dfcc:	e004      	b.n	800dfd8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f000 faba 	bl	800e548 <USBD_CtlSendStatus>
 800dfd4:	e000      	b.n	800dfd8 <USBD_GetDescriptor+0x320>
    return;
 800dfd6:	bf00      	nop
  }
}
 800dfd8:	3710      	adds	r7, #16
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}
 800dfde:	bf00      	nop

0800dfe0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b084      	sub	sp, #16
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
 800dfe8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dfea:	683b      	ldr	r3, [r7, #0]
 800dfec:	889b      	ldrh	r3, [r3, #4]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d131      	bne.n	800e056 <USBD_SetAddress+0x76>
 800dff2:	683b      	ldr	r3, [r7, #0]
 800dff4:	88db      	ldrh	r3, [r3, #6]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d12d      	bne.n	800e056 <USBD_SetAddress+0x76>
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	885b      	ldrh	r3, [r3, #2]
 800dffe:	2b7f      	cmp	r3, #127	@ 0x7f
 800e000:	d829      	bhi.n	800e056 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e002:	683b      	ldr	r3, [r7, #0]
 800e004:	885b      	ldrh	r3, [r3, #2]
 800e006:	b2db      	uxtb	r3, r3
 800e008:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e00c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e014:	b2db      	uxtb	r3, r3
 800e016:	2b03      	cmp	r3, #3
 800e018:	d104      	bne.n	800e024 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e01a:	6839      	ldr	r1, [r7, #0]
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	f000 f9bc 	bl	800e39a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e022:	e01d      	b.n	800e060 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	7bfa      	ldrb	r2, [r7, #15]
 800e028:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e02c:	7bfb      	ldrb	r3, [r7, #15]
 800e02e:	4619      	mov	r1, r3
 800e030:	6878      	ldr	r0, [r7, #4]
 800e032:	f000 ff47 	bl	800eec4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f000 fa86 	bl	800e548 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e03c:	7bfb      	ldrb	r3, [r7, #15]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d004      	beq.n	800e04c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2202      	movs	r2, #2
 800e046:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e04a:	e009      	b.n	800e060 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2201      	movs	r2, #1
 800e050:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e054:	e004      	b.n	800e060 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e056:	6839      	ldr	r1, [r7, #0]
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f000 f99e 	bl	800e39a <USBD_CtlError>
  }
}
 800e05e:	bf00      	nop
 800e060:	bf00      	nop
 800e062:	3710      	adds	r7, #16
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}

0800e068 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b084      	sub	sp, #16
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
 800e070:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e072:	2300      	movs	r3, #0
 800e074:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	885b      	ldrh	r3, [r3, #2]
 800e07a:	b2da      	uxtb	r2, r3
 800e07c:	4b4e      	ldr	r3, [pc, #312]	@ (800e1b8 <USBD_SetConfig+0x150>)
 800e07e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e080:	4b4d      	ldr	r3, [pc, #308]	@ (800e1b8 <USBD_SetConfig+0x150>)
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	2b01      	cmp	r3, #1
 800e086:	d905      	bls.n	800e094 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e088:	6839      	ldr	r1, [r7, #0]
 800e08a:	6878      	ldr	r0, [r7, #4]
 800e08c:	f000 f985 	bl	800e39a <USBD_CtlError>
    return USBD_FAIL;
 800e090:	2303      	movs	r3, #3
 800e092:	e08c      	b.n	800e1ae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e09a:	b2db      	uxtb	r3, r3
 800e09c:	2b02      	cmp	r3, #2
 800e09e:	d002      	beq.n	800e0a6 <USBD_SetConfig+0x3e>
 800e0a0:	2b03      	cmp	r3, #3
 800e0a2:	d029      	beq.n	800e0f8 <USBD_SetConfig+0x90>
 800e0a4:	e075      	b.n	800e192 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e0a6:	4b44      	ldr	r3, [pc, #272]	@ (800e1b8 <USBD_SetConfig+0x150>)
 800e0a8:	781b      	ldrb	r3, [r3, #0]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d020      	beq.n	800e0f0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e0ae:	4b42      	ldr	r3, [pc, #264]	@ (800e1b8 <USBD_SetConfig+0x150>)
 800e0b0:	781b      	ldrb	r3, [r3, #0]
 800e0b2:	461a      	mov	r2, r3
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e0b8:	4b3f      	ldr	r3, [pc, #252]	@ (800e1b8 <USBD_SetConfig+0x150>)
 800e0ba:	781b      	ldrb	r3, [r3, #0]
 800e0bc:	4619      	mov	r1, r3
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f7fe ffb9 	bl	800d036 <USBD_SetClassConfig>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e0c8:	7bfb      	ldrb	r3, [r7, #15]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d008      	beq.n	800e0e0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e0ce:	6839      	ldr	r1, [r7, #0]
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f000 f962 	bl	800e39a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2202      	movs	r2, #2
 800e0da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e0de:	e065      	b.n	800e1ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e0e0:	6878      	ldr	r0, [r7, #4]
 800e0e2:	f000 fa31 	bl	800e548 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	2203      	movs	r2, #3
 800e0ea:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e0ee:	e05d      	b.n	800e1ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f000 fa29 	bl	800e548 <USBD_CtlSendStatus>
      break;
 800e0f6:	e059      	b.n	800e1ac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e0f8:	4b2f      	ldr	r3, [pc, #188]	@ (800e1b8 <USBD_SetConfig+0x150>)
 800e0fa:	781b      	ldrb	r3, [r3, #0]
 800e0fc:	2b00      	cmp	r3, #0
 800e0fe:	d112      	bne.n	800e126 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2202      	movs	r2, #2
 800e104:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e108:	4b2b      	ldr	r3, [pc, #172]	@ (800e1b8 <USBD_SetConfig+0x150>)
 800e10a:	781b      	ldrb	r3, [r3, #0]
 800e10c:	461a      	mov	r2, r3
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e112:	4b29      	ldr	r3, [pc, #164]	@ (800e1b8 <USBD_SetConfig+0x150>)
 800e114:	781b      	ldrb	r3, [r3, #0]
 800e116:	4619      	mov	r1, r3
 800e118:	6878      	ldr	r0, [r7, #4]
 800e11a:	f7fe ffa8 	bl	800d06e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f000 fa12 	bl	800e548 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e124:	e042      	b.n	800e1ac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e126:	4b24      	ldr	r3, [pc, #144]	@ (800e1b8 <USBD_SetConfig+0x150>)
 800e128:	781b      	ldrb	r3, [r3, #0]
 800e12a:	461a      	mov	r2, r3
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	685b      	ldr	r3, [r3, #4]
 800e130:	429a      	cmp	r2, r3
 800e132:	d02a      	beq.n	800e18a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	685b      	ldr	r3, [r3, #4]
 800e138:	b2db      	uxtb	r3, r3
 800e13a:	4619      	mov	r1, r3
 800e13c:	6878      	ldr	r0, [r7, #4]
 800e13e:	f7fe ff96 	bl	800d06e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e142:	4b1d      	ldr	r3, [pc, #116]	@ (800e1b8 <USBD_SetConfig+0x150>)
 800e144:	781b      	ldrb	r3, [r3, #0]
 800e146:	461a      	mov	r2, r3
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e14c:	4b1a      	ldr	r3, [pc, #104]	@ (800e1b8 <USBD_SetConfig+0x150>)
 800e14e:	781b      	ldrb	r3, [r3, #0]
 800e150:	4619      	mov	r1, r3
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f7fe ff6f 	bl	800d036 <USBD_SetClassConfig>
 800e158:	4603      	mov	r3, r0
 800e15a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e15c:	7bfb      	ldrb	r3, [r7, #15]
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d00f      	beq.n	800e182 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e162:	6839      	ldr	r1, [r7, #0]
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	f000 f918 	bl	800e39a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	685b      	ldr	r3, [r3, #4]
 800e16e:	b2db      	uxtb	r3, r3
 800e170:	4619      	mov	r1, r3
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f7fe ff7b 	bl	800d06e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2202      	movs	r2, #2
 800e17c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e180:	e014      	b.n	800e1ac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e182:	6878      	ldr	r0, [r7, #4]
 800e184:	f000 f9e0 	bl	800e548 <USBD_CtlSendStatus>
      break;
 800e188:	e010      	b.n	800e1ac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f000 f9dc 	bl	800e548 <USBD_CtlSendStatus>
      break;
 800e190:	e00c      	b.n	800e1ac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e192:	6839      	ldr	r1, [r7, #0]
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f000 f900 	bl	800e39a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e19a:	4b07      	ldr	r3, [pc, #28]	@ (800e1b8 <USBD_SetConfig+0x150>)
 800e19c:	781b      	ldrb	r3, [r3, #0]
 800e19e:	4619      	mov	r1, r3
 800e1a0:	6878      	ldr	r0, [r7, #4]
 800e1a2:	f7fe ff64 	bl	800d06e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e1a6:	2303      	movs	r3, #3
 800e1a8:	73fb      	strb	r3, [r7, #15]
      break;
 800e1aa:	bf00      	nop
  }

  return ret;
 800e1ac:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3710      	adds	r7, #16
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
 800e1b6:	bf00      	nop
 800e1b8:	24000628 	.word	0x24000628

0800e1bc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e1bc:	b580      	push	{r7, lr}
 800e1be:	b082      	sub	sp, #8
 800e1c0:	af00      	add	r7, sp, #0
 800e1c2:	6078      	str	r0, [r7, #4]
 800e1c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	88db      	ldrh	r3, [r3, #6]
 800e1ca:	2b01      	cmp	r3, #1
 800e1cc:	d004      	beq.n	800e1d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e1ce:	6839      	ldr	r1, [r7, #0]
 800e1d0:	6878      	ldr	r0, [r7, #4]
 800e1d2:	f000 f8e2 	bl	800e39a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e1d6:	e023      	b.n	800e220 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e1de:	b2db      	uxtb	r3, r3
 800e1e0:	2b02      	cmp	r3, #2
 800e1e2:	dc02      	bgt.n	800e1ea <USBD_GetConfig+0x2e>
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	dc03      	bgt.n	800e1f0 <USBD_GetConfig+0x34>
 800e1e8:	e015      	b.n	800e216 <USBD_GetConfig+0x5a>
 800e1ea:	2b03      	cmp	r3, #3
 800e1ec:	d00b      	beq.n	800e206 <USBD_GetConfig+0x4a>
 800e1ee:	e012      	b.n	800e216 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	3308      	adds	r3, #8
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	4619      	mov	r1, r3
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f000 f948 	bl	800e494 <USBD_CtlSendData>
        break;
 800e204:	e00c      	b.n	800e220 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	3304      	adds	r3, #4
 800e20a:	2201      	movs	r2, #1
 800e20c:	4619      	mov	r1, r3
 800e20e:	6878      	ldr	r0, [r7, #4]
 800e210:	f000 f940 	bl	800e494 <USBD_CtlSendData>
        break;
 800e214:	e004      	b.n	800e220 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e216:	6839      	ldr	r1, [r7, #0]
 800e218:	6878      	ldr	r0, [r7, #4]
 800e21a:	f000 f8be 	bl	800e39a <USBD_CtlError>
        break;
 800e21e:	bf00      	nop
}
 800e220:	bf00      	nop
 800e222:	3708      	adds	r7, #8
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}

0800e228 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b082      	sub	sp, #8
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e238:	b2db      	uxtb	r3, r3
 800e23a:	3b01      	subs	r3, #1
 800e23c:	2b02      	cmp	r3, #2
 800e23e:	d81e      	bhi.n	800e27e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e240:	683b      	ldr	r3, [r7, #0]
 800e242:	88db      	ldrh	r3, [r3, #6]
 800e244:	2b02      	cmp	r3, #2
 800e246:	d004      	beq.n	800e252 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e248:	6839      	ldr	r1, [r7, #0]
 800e24a:	6878      	ldr	r0, [r7, #4]
 800e24c:	f000 f8a5 	bl	800e39a <USBD_CtlError>
        break;
 800e250:	e01a      	b.n	800e288 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2201      	movs	r2, #1
 800e256:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d005      	beq.n	800e26e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	68db      	ldr	r3, [r3, #12]
 800e266:	f043 0202 	orr.w	r2, r3, #2
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	330c      	adds	r3, #12
 800e272:	2202      	movs	r2, #2
 800e274:	4619      	mov	r1, r3
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f000 f90c 	bl	800e494 <USBD_CtlSendData>
      break;
 800e27c:	e004      	b.n	800e288 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e27e:	6839      	ldr	r1, [r7, #0]
 800e280:	6878      	ldr	r0, [r7, #4]
 800e282:	f000 f88a 	bl	800e39a <USBD_CtlError>
      break;
 800e286:	bf00      	nop
  }
}
 800e288:	bf00      	nop
 800e28a:	3708      	adds	r7, #8
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}

0800e290 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b082      	sub	sp, #8
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
 800e298:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	885b      	ldrh	r3, [r3, #2]
 800e29e:	2b01      	cmp	r3, #1
 800e2a0:	d107      	bne.n	800e2b2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2201      	movs	r2, #1
 800e2a6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e2aa:	6878      	ldr	r0, [r7, #4]
 800e2ac:	f000 f94c 	bl	800e548 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e2b0:	e013      	b.n	800e2da <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e2b2:	683b      	ldr	r3, [r7, #0]
 800e2b4:	885b      	ldrh	r3, [r3, #2]
 800e2b6:	2b02      	cmp	r3, #2
 800e2b8:	d10b      	bne.n	800e2d2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e2ba:	683b      	ldr	r3, [r7, #0]
 800e2bc:	889b      	ldrh	r3, [r3, #4]
 800e2be:	0a1b      	lsrs	r3, r3, #8
 800e2c0:	b29b      	uxth	r3, r3
 800e2c2:	b2da      	uxtb	r2, r3
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	f000 f93c 	bl	800e548 <USBD_CtlSendStatus>
}
 800e2d0:	e003      	b.n	800e2da <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e2d2:	6839      	ldr	r1, [r7, #0]
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f000 f860 	bl	800e39a <USBD_CtlError>
}
 800e2da:	bf00      	nop
 800e2dc:	3708      	adds	r7, #8
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}

0800e2e2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2e2:	b580      	push	{r7, lr}
 800e2e4:	b082      	sub	sp, #8
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	6078      	str	r0, [r7, #4]
 800e2ea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e2f2:	b2db      	uxtb	r3, r3
 800e2f4:	3b01      	subs	r3, #1
 800e2f6:	2b02      	cmp	r3, #2
 800e2f8:	d80b      	bhi.n	800e312 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	885b      	ldrh	r3, [r3, #2]
 800e2fe:	2b01      	cmp	r3, #1
 800e300:	d10c      	bne.n	800e31c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2200      	movs	r2, #0
 800e306:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f000 f91c 	bl	800e548 <USBD_CtlSendStatus>
      }
      break;
 800e310:	e004      	b.n	800e31c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e312:	6839      	ldr	r1, [r7, #0]
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f000 f840 	bl	800e39a <USBD_CtlError>
      break;
 800e31a:	e000      	b.n	800e31e <USBD_ClrFeature+0x3c>
      break;
 800e31c:	bf00      	nop
  }
}
 800e31e:	bf00      	nop
 800e320:	3708      	adds	r7, #8
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}

0800e326 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e326:	b580      	push	{r7, lr}
 800e328:	b084      	sub	sp, #16
 800e32a:	af00      	add	r7, sp, #0
 800e32c:	6078      	str	r0, [r7, #4]
 800e32e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e330:	683b      	ldr	r3, [r7, #0]
 800e332:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	781a      	ldrb	r2, [r3, #0]
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	3301      	adds	r3, #1
 800e340:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	781a      	ldrb	r2, [r3, #0]
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	3301      	adds	r3, #1
 800e34e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e350:	68f8      	ldr	r0, [r7, #12]
 800e352:	f7ff fa16 	bl	800d782 <SWAPBYTE>
 800e356:	4603      	mov	r3, r0
 800e358:	461a      	mov	r2, r3
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	3301      	adds	r3, #1
 800e362:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	3301      	adds	r3, #1
 800e368:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e36a:	68f8      	ldr	r0, [r7, #12]
 800e36c:	f7ff fa09 	bl	800d782 <SWAPBYTE>
 800e370:	4603      	mov	r3, r0
 800e372:	461a      	mov	r2, r3
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	3301      	adds	r3, #1
 800e37c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	3301      	adds	r3, #1
 800e382:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e384:	68f8      	ldr	r0, [r7, #12]
 800e386:	f7ff f9fc 	bl	800d782 <SWAPBYTE>
 800e38a:	4603      	mov	r3, r0
 800e38c:	461a      	mov	r2, r3
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	80da      	strh	r2, [r3, #6]
}
 800e392:	bf00      	nop
 800e394:	3710      	adds	r7, #16
 800e396:	46bd      	mov	sp, r7
 800e398:	bd80      	pop	{r7, pc}

0800e39a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e39a:	b580      	push	{r7, lr}
 800e39c:	b082      	sub	sp, #8
 800e39e:	af00      	add	r7, sp, #0
 800e3a0:	6078      	str	r0, [r7, #4]
 800e3a2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e3a4:	2180      	movs	r1, #128	@ 0x80
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f000 fd22 	bl	800edf0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e3ac:	2100      	movs	r1, #0
 800e3ae:	6878      	ldr	r0, [r7, #4]
 800e3b0:	f000 fd1e 	bl	800edf0 <USBD_LL_StallEP>
}
 800e3b4:	bf00      	nop
 800e3b6:	3708      	adds	r7, #8
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}

0800e3bc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b086      	sub	sp, #24
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	60f8      	str	r0, [r7, #12]
 800e3c4:	60b9      	str	r1, [r7, #8]
 800e3c6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d042      	beq.n	800e458 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800e3d6:	6938      	ldr	r0, [r7, #16]
 800e3d8:	f000 f842 	bl	800e460 <USBD_GetLen>
 800e3dc:	4603      	mov	r3, r0
 800e3de:	3301      	adds	r3, #1
 800e3e0:	005b      	lsls	r3, r3, #1
 800e3e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e3e6:	d808      	bhi.n	800e3fa <USBD_GetString+0x3e>
 800e3e8:	6938      	ldr	r0, [r7, #16]
 800e3ea:	f000 f839 	bl	800e460 <USBD_GetLen>
 800e3ee:	4603      	mov	r3, r0
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	b29b      	uxth	r3, r3
 800e3f4:	005b      	lsls	r3, r3, #1
 800e3f6:	b29a      	uxth	r2, r3
 800e3f8:	e001      	b.n	800e3fe <USBD_GetString+0x42>
 800e3fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e402:	7dfb      	ldrb	r3, [r7, #23]
 800e404:	68ba      	ldr	r2, [r7, #8]
 800e406:	4413      	add	r3, r2
 800e408:	687a      	ldr	r2, [r7, #4]
 800e40a:	7812      	ldrb	r2, [r2, #0]
 800e40c:	701a      	strb	r2, [r3, #0]
  idx++;
 800e40e:	7dfb      	ldrb	r3, [r7, #23]
 800e410:	3301      	adds	r3, #1
 800e412:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e414:	7dfb      	ldrb	r3, [r7, #23]
 800e416:	68ba      	ldr	r2, [r7, #8]
 800e418:	4413      	add	r3, r2
 800e41a:	2203      	movs	r2, #3
 800e41c:	701a      	strb	r2, [r3, #0]
  idx++;
 800e41e:	7dfb      	ldrb	r3, [r7, #23]
 800e420:	3301      	adds	r3, #1
 800e422:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e424:	e013      	b.n	800e44e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800e426:	7dfb      	ldrb	r3, [r7, #23]
 800e428:	68ba      	ldr	r2, [r7, #8]
 800e42a:	4413      	add	r3, r2
 800e42c:	693a      	ldr	r2, [r7, #16]
 800e42e:	7812      	ldrb	r2, [r2, #0]
 800e430:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e432:	693b      	ldr	r3, [r7, #16]
 800e434:	3301      	adds	r3, #1
 800e436:	613b      	str	r3, [r7, #16]
    idx++;
 800e438:	7dfb      	ldrb	r3, [r7, #23]
 800e43a:	3301      	adds	r3, #1
 800e43c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e43e:	7dfb      	ldrb	r3, [r7, #23]
 800e440:	68ba      	ldr	r2, [r7, #8]
 800e442:	4413      	add	r3, r2
 800e444:	2200      	movs	r2, #0
 800e446:	701a      	strb	r2, [r3, #0]
    idx++;
 800e448:	7dfb      	ldrb	r3, [r7, #23]
 800e44a:	3301      	adds	r3, #1
 800e44c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e44e:	693b      	ldr	r3, [r7, #16]
 800e450:	781b      	ldrb	r3, [r3, #0]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d1e7      	bne.n	800e426 <USBD_GetString+0x6a>
 800e456:	e000      	b.n	800e45a <USBD_GetString+0x9e>
    return;
 800e458:	bf00      	nop
  }
}
 800e45a:	3718      	adds	r7, #24
 800e45c:	46bd      	mov	sp, r7
 800e45e:	bd80      	pop	{r7, pc}

0800e460 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e460:	b480      	push	{r7}
 800e462:	b085      	sub	sp, #20
 800e464:	af00      	add	r7, sp, #0
 800e466:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e468:	2300      	movs	r3, #0
 800e46a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e470:	e005      	b.n	800e47e <USBD_GetLen+0x1e>
  {
    len++;
 800e472:	7bfb      	ldrb	r3, [r7, #15]
 800e474:	3301      	adds	r3, #1
 800e476:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e478:	68bb      	ldr	r3, [r7, #8]
 800e47a:	3301      	adds	r3, #1
 800e47c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e47e:	68bb      	ldr	r3, [r7, #8]
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d1f5      	bne.n	800e472 <USBD_GetLen+0x12>
  }

  return len;
 800e486:	7bfb      	ldrb	r3, [r7, #15]
}
 800e488:	4618      	mov	r0, r3
 800e48a:	3714      	adds	r7, #20
 800e48c:	46bd      	mov	sp, r7
 800e48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e492:	4770      	bx	lr

0800e494 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b084      	sub	sp, #16
 800e498:	af00      	add	r7, sp, #0
 800e49a:	60f8      	str	r0, [r7, #12]
 800e49c:	60b9      	str	r1, [r7, #8]
 800e49e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	2202      	movs	r2, #2
 800e4a4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	687a      	ldr	r2, [r7, #4]
 800e4ac:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	687a      	ldr	r2, [r7, #4]
 800e4b2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	68ba      	ldr	r2, [r7, #8]
 800e4b8:	2100      	movs	r1, #0
 800e4ba:	68f8      	ldr	r0, [r7, #12]
 800e4bc:	f000 fd21 	bl	800ef02 <USBD_LL_Transmit>

  return USBD_OK;
 800e4c0:	2300      	movs	r3, #0
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3710      	adds	r7, #16
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}

0800e4ca <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e4ca:	b580      	push	{r7, lr}
 800e4cc:	b084      	sub	sp, #16
 800e4ce:	af00      	add	r7, sp, #0
 800e4d0:	60f8      	str	r0, [r7, #12]
 800e4d2:	60b9      	str	r1, [r7, #8]
 800e4d4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	68ba      	ldr	r2, [r7, #8]
 800e4da:	2100      	movs	r1, #0
 800e4dc:	68f8      	ldr	r0, [r7, #12]
 800e4de:	f000 fd10 	bl	800ef02 <USBD_LL_Transmit>

  return USBD_OK;
 800e4e2:	2300      	movs	r3, #0
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3710      	adds	r7, #16
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b084      	sub	sp, #16
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	60f8      	str	r0, [r7, #12]
 800e4f4:	60b9      	str	r1, [r7, #8]
 800e4f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	2203      	movs	r2, #3
 800e4fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	687a      	ldr	r2, [r7, #4]
 800e504:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	687a      	ldr	r2, [r7, #4]
 800e50c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	68ba      	ldr	r2, [r7, #8]
 800e514:	2100      	movs	r1, #0
 800e516:	68f8      	ldr	r0, [r7, #12]
 800e518:	f000 fd14 	bl	800ef44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e51c:	2300      	movs	r3, #0
}
 800e51e:	4618      	mov	r0, r3
 800e520:	3710      	adds	r7, #16
 800e522:	46bd      	mov	sp, r7
 800e524:	bd80      	pop	{r7, pc}

0800e526 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e526:	b580      	push	{r7, lr}
 800e528:	b084      	sub	sp, #16
 800e52a:	af00      	add	r7, sp, #0
 800e52c:	60f8      	str	r0, [r7, #12]
 800e52e:	60b9      	str	r1, [r7, #8]
 800e530:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	68ba      	ldr	r2, [r7, #8]
 800e536:	2100      	movs	r1, #0
 800e538:	68f8      	ldr	r0, [r7, #12]
 800e53a:	f000 fd03 	bl	800ef44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e53e:	2300      	movs	r3, #0
}
 800e540:	4618      	mov	r0, r3
 800e542:	3710      	adds	r7, #16
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}

0800e548 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e548:	b580      	push	{r7, lr}
 800e54a:	b082      	sub	sp, #8
 800e54c:	af00      	add	r7, sp, #0
 800e54e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	2204      	movs	r2, #4
 800e554:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e558:	2300      	movs	r3, #0
 800e55a:	2200      	movs	r2, #0
 800e55c:	2100      	movs	r1, #0
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	f000 fccf 	bl	800ef02 <USBD_LL_Transmit>

  return USBD_OK;
 800e564:	2300      	movs	r3, #0
}
 800e566:	4618      	mov	r0, r3
 800e568:	3708      	adds	r7, #8
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}

0800e56e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e56e:	b580      	push	{r7, lr}
 800e570:	b082      	sub	sp, #8
 800e572:	af00      	add	r7, sp, #0
 800e574:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	2205      	movs	r2, #5
 800e57a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e57e:	2300      	movs	r3, #0
 800e580:	2200      	movs	r2, #0
 800e582:	2100      	movs	r1, #0
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f000 fcdd 	bl	800ef44 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e58a:	2300      	movs	r3, #0
}
 800e58c:	4618      	mov	r0, r3
 800e58e:	3708      	adds	r7, #8
 800e590:	46bd      	mov	sp, r7
 800e592:	bd80      	pop	{r7, pc}

0800e594 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e594:	b580      	push	{r7, lr}
 800e596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e598:	2200      	movs	r2, #0
 800e59a:	4913      	ldr	r1, [pc, #76]	@ (800e5e8 <MX_USB_DEVICE_Init+0x54>)
 800e59c:	4813      	ldr	r0, [pc, #76]	@ (800e5ec <MX_USB_DEVICE_Init+0x58>)
 800e59e:	f7fe fccd 	bl	800cf3c <USBD_Init>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	2b00      	cmp	r3, #0
 800e5a6:	d001      	beq.n	800e5ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e5a8:	f7f2 fce6 	bl	8000f78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e5ac:	4910      	ldr	r1, [pc, #64]	@ (800e5f0 <MX_USB_DEVICE_Init+0x5c>)
 800e5ae:	480f      	ldr	r0, [pc, #60]	@ (800e5ec <MX_USB_DEVICE_Init+0x58>)
 800e5b0:	f7fe fcf4 	bl	800cf9c <USBD_RegisterClass>
 800e5b4:	4603      	mov	r3, r0
 800e5b6:	2b00      	cmp	r3, #0
 800e5b8:	d001      	beq.n	800e5be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e5ba:	f7f2 fcdd 	bl	8000f78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e5be:	490d      	ldr	r1, [pc, #52]	@ (800e5f4 <MX_USB_DEVICE_Init+0x60>)
 800e5c0:	480a      	ldr	r0, [pc, #40]	@ (800e5ec <MX_USB_DEVICE_Init+0x58>)
 800e5c2:	f7fe fbeb 	bl	800cd9c <USBD_CDC_RegisterInterface>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d001      	beq.n	800e5d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e5cc:	f7f2 fcd4 	bl	8000f78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e5d0:	4806      	ldr	r0, [pc, #24]	@ (800e5ec <MX_USB_DEVICE_Init+0x58>)
 800e5d2:	f7fe fd19 	bl	800d008 <USBD_Start>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d001      	beq.n	800e5e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e5dc:	f7f2 fccc 	bl	8000f78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800e5e0:	f7f7 fad2 	bl	8005b88 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e5e4:	bf00      	nop
 800e5e6:	bd80      	pop	{r7, pc}
 800e5e8:	240000cc 	.word	0x240000cc
 800e5ec:	2400062c 	.word	0x2400062c
 800e5f0:	24000038 	.word	0x24000038
 800e5f4:	240000b8 	.word	0x240000b8

0800e5f8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e5f8:	b580      	push	{r7, lr}
 800e5fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	4905      	ldr	r1, [pc, #20]	@ (800e614 <CDC_Init_FS+0x1c>)
 800e600:	4805      	ldr	r0, [pc, #20]	@ (800e618 <CDC_Init_FS+0x20>)
 800e602:	f7fe fbe5 	bl	800cdd0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e606:	4905      	ldr	r1, [pc, #20]	@ (800e61c <CDC_Init_FS+0x24>)
 800e608:	4803      	ldr	r0, [pc, #12]	@ (800e618 <CDC_Init_FS+0x20>)
 800e60a:	f7fe fc03 	bl	800ce14 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e60e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e610:	4618      	mov	r0, r3
 800e612:	bd80      	pop	{r7, pc}
 800e614:	24001108 	.word	0x24001108
 800e618:	2400062c 	.word	0x2400062c
 800e61c:	24000908 	.word	0x24000908

0800e620 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e620:	b480      	push	{r7}
 800e622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e624:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e626:	4618      	mov	r0, r3
 800e628:	46bd      	mov	sp, r7
 800e62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e62e:	4770      	bx	lr

0800e630 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e630:	b480      	push	{r7}
 800e632:	b083      	sub	sp, #12
 800e634:	af00      	add	r7, sp, #0
 800e636:	4603      	mov	r3, r0
 800e638:	6039      	str	r1, [r7, #0]
 800e63a:	71fb      	strb	r3, [r7, #7]
 800e63c:	4613      	mov	r3, r2
 800e63e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e640:	79fb      	ldrb	r3, [r7, #7]
 800e642:	2b23      	cmp	r3, #35	@ 0x23
 800e644:	d84a      	bhi.n	800e6dc <CDC_Control_FS+0xac>
 800e646:	a201      	add	r2, pc, #4	@ (adr r2, 800e64c <CDC_Control_FS+0x1c>)
 800e648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e64c:	0800e6dd 	.word	0x0800e6dd
 800e650:	0800e6dd 	.word	0x0800e6dd
 800e654:	0800e6dd 	.word	0x0800e6dd
 800e658:	0800e6dd 	.word	0x0800e6dd
 800e65c:	0800e6dd 	.word	0x0800e6dd
 800e660:	0800e6dd 	.word	0x0800e6dd
 800e664:	0800e6dd 	.word	0x0800e6dd
 800e668:	0800e6dd 	.word	0x0800e6dd
 800e66c:	0800e6dd 	.word	0x0800e6dd
 800e670:	0800e6dd 	.word	0x0800e6dd
 800e674:	0800e6dd 	.word	0x0800e6dd
 800e678:	0800e6dd 	.word	0x0800e6dd
 800e67c:	0800e6dd 	.word	0x0800e6dd
 800e680:	0800e6dd 	.word	0x0800e6dd
 800e684:	0800e6dd 	.word	0x0800e6dd
 800e688:	0800e6dd 	.word	0x0800e6dd
 800e68c:	0800e6dd 	.word	0x0800e6dd
 800e690:	0800e6dd 	.word	0x0800e6dd
 800e694:	0800e6dd 	.word	0x0800e6dd
 800e698:	0800e6dd 	.word	0x0800e6dd
 800e69c:	0800e6dd 	.word	0x0800e6dd
 800e6a0:	0800e6dd 	.word	0x0800e6dd
 800e6a4:	0800e6dd 	.word	0x0800e6dd
 800e6a8:	0800e6dd 	.word	0x0800e6dd
 800e6ac:	0800e6dd 	.word	0x0800e6dd
 800e6b0:	0800e6dd 	.word	0x0800e6dd
 800e6b4:	0800e6dd 	.word	0x0800e6dd
 800e6b8:	0800e6dd 	.word	0x0800e6dd
 800e6bc:	0800e6dd 	.word	0x0800e6dd
 800e6c0:	0800e6dd 	.word	0x0800e6dd
 800e6c4:	0800e6dd 	.word	0x0800e6dd
 800e6c8:	0800e6dd 	.word	0x0800e6dd
 800e6cc:	0800e6dd 	.word	0x0800e6dd
 800e6d0:	0800e6dd 	.word	0x0800e6dd
 800e6d4:	0800e6dd 	.word	0x0800e6dd
 800e6d8:	0800e6dd 	.word	0x0800e6dd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e6dc:	bf00      	nop
  }

  return (USBD_OK);
 800e6de:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	370c      	adds	r7, #12
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr

0800e6ec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
 800e6f4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e6f6:	6879      	ldr	r1, [r7, #4]
 800e6f8:	4805      	ldr	r0, [pc, #20]	@ (800e710 <CDC_Receive_FS+0x24>)
 800e6fa:	f7fe fb8b 	bl	800ce14 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e6fe:	4804      	ldr	r0, [pc, #16]	@ (800e710 <CDC_Receive_FS+0x24>)
 800e700:	f7fe fbe6 	bl	800ced0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e704:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e706:	4618      	mov	r0, r3
 800e708:	3708      	adds	r7, #8
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}
 800e70e:	bf00      	nop
 800e710:	2400062c 	.word	0x2400062c

0800e714 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e714:	b580      	push	{r7, lr}
 800e716:	b084      	sub	sp, #16
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	460b      	mov	r3, r1
 800e71e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e720:	2300      	movs	r3, #0
 800e722:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e724:	4b0d      	ldr	r3, [pc, #52]	@ (800e75c <CDC_Transmit_FS+0x48>)
 800e726:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e72a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e732:	2b00      	cmp	r3, #0
 800e734:	d001      	beq.n	800e73a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e736:	2301      	movs	r3, #1
 800e738:	e00b      	b.n	800e752 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e73a:	887b      	ldrh	r3, [r7, #2]
 800e73c:	461a      	mov	r2, r3
 800e73e:	6879      	ldr	r1, [r7, #4]
 800e740:	4806      	ldr	r0, [pc, #24]	@ (800e75c <CDC_Transmit_FS+0x48>)
 800e742:	f7fe fb45 	bl	800cdd0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e746:	4805      	ldr	r0, [pc, #20]	@ (800e75c <CDC_Transmit_FS+0x48>)
 800e748:	f7fe fb82 	bl	800ce50 <USBD_CDC_TransmitPacket>
 800e74c:	4603      	mov	r3, r0
 800e74e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e750:	7bfb      	ldrb	r3, [r7, #15]
}
 800e752:	4618      	mov	r0, r3
 800e754:	3710      	adds	r7, #16
 800e756:	46bd      	mov	sp, r7
 800e758:	bd80      	pop	{r7, pc}
 800e75a:	bf00      	nop
 800e75c:	2400062c 	.word	0x2400062c

0800e760 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e760:	b480      	push	{r7}
 800e762:	b087      	sub	sp, #28
 800e764:	af00      	add	r7, sp, #0
 800e766:	60f8      	str	r0, [r7, #12]
 800e768:	60b9      	str	r1, [r7, #8]
 800e76a:	4613      	mov	r3, r2
 800e76c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e76e:	2300      	movs	r3, #0
 800e770:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e772:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e776:	4618      	mov	r0, r3
 800e778:	371c      	adds	r7, #28
 800e77a:	46bd      	mov	sp, r7
 800e77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e780:	4770      	bx	lr
	...

0800e784 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e784:	b480      	push	{r7}
 800e786:	b083      	sub	sp, #12
 800e788:	af00      	add	r7, sp, #0
 800e78a:	4603      	mov	r3, r0
 800e78c:	6039      	str	r1, [r7, #0]
 800e78e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	2212      	movs	r2, #18
 800e794:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e796:	4b03      	ldr	r3, [pc, #12]	@ (800e7a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e798:	4618      	mov	r0, r3
 800e79a:	370c      	adds	r7, #12
 800e79c:	46bd      	mov	sp, r7
 800e79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a2:	4770      	bx	lr
 800e7a4:	240000ec 	.word	0x240000ec

0800e7a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7a8:	b480      	push	{r7}
 800e7aa:	b083      	sub	sp, #12
 800e7ac:	af00      	add	r7, sp, #0
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	6039      	str	r1, [r7, #0]
 800e7b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e7b4:	683b      	ldr	r3, [r7, #0]
 800e7b6:	2204      	movs	r2, #4
 800e7b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e7ba:	4b03      	ldr	r3, [pc, #12]	@ (800e7c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	370c      	adds	r7, #12
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7c6:	4770      	bx	lr
 800e7c8:	24000100 	.word	0x24000100

0800e7cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	6039      	str	r1, [r7, #0]
 800e7d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e7d8:	79fb      	ldrb	r3, [r7, #7]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d105      	bne.n	800e7ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e7de:	683a      	ldr	r2, [r7, #0]
 800e7e0:	4907      	ldr	r1, [pc, #28]	@ (800e800 <USBD_FS_ProductStrDescriptor+0x34>)
 800e7e2:	4808      	ldr	r0, [pc, #32]	@ (800e804 <USBD_FS_ProductStrDescriptor+0x38>)
 800e7e4:	f7ff fdea 	bl	800e3bc <USBD_GetString>
 800e7e8:	e004      	b.n	800e7f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e7ea:	683a      	ldr	r2, [r7, #0]
 800e7ec:	4904      	ldr	r1, [pc, #16]	@ (800e800 <USBD_FS_ProductStrDescriptor+0x34>)
 800e7ee:	4805      	ldr	r0, [pc, #20]	@ (800e804 <USBD_FS_ProductStrDescriptor+0x38>)
 800e7f0:	f7ff fde4 	bl	800e3bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800e7f4:	4b02      	ldr	r3, [pc, #8]	@ (800e800 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3708      	adds	r7, #8
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
 800e7fe:	bf00      	nop
 800e800:	24001908 	.word	0x24001908
 800e804:	0800f124 	.word	0x0800f124

0800e808 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b082      	sub	sp, #8
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	4603      	mov	r3, r0
 800e810:	6039      	str	r1, [r7, #0]
 800e812:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e814:	683a      	ldr	r2, [r7, #0]
 800e816:	4904      	ldr	r1, [pc, #16]	@ (800e828 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e818:	4804      	ldr	r0, [pc, #16]	@ (800e82c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e81a:	f7ff fdcf 	bl	800e3bc <USBD_GetString>
  return USBD_StrDesc;
 800e81e:	4b02      	ldr	r3, [pc, #8]	@ (800e828 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e820:	4618      	mov	r0, r3
 800e822:	3708      	adds	r7, #8
 800e824:	46bd      	mov	sp, r7
 800e826:	bd80      	pop	{r7, pc}
 800e828:	24001908 	.word	0x24001908
 800e82c:	0800f13c 	.word	0x0800f13c

0800e830 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b082      	sub	sp, #8
 800e834:	af00      	add	r7, sp, #0
 800e836:	4603      	mov	r3, r0
 800e838:	6039      	str	r1, [r7, #0]
 800e83a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e83c:	683b      	ldr	r3, [r7, #0]
 800e83e:	221a      	movs	r2, #26
 800e840:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e842:	f000 f843 	bl	800e8cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e846:	4b02      	ldr	r3, [pc, #8]	@ (800e850 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e848:	4618      	mov	r0, r3
 800e84a:	3708      	adds	r7, #8
 800e84c:	46bd      	mov	sp, r7
 800e84e:	bd80      	pop	{r7, pc}
 800e850:	24000104 	.word	0x24000104

0800e854 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e854:	b580      	push	{r7, lr}
 800e856:	b082      	sub	sp, #8
 800e858:	af00      	add	r7, sp, #0
 800e85a:	4603      	mov	r3, r0
 800e85c:	6039      	str	r1, [r7, #0]
 800e85e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e860:	79fb      	ldrb	r3, [r7, #7]
 800e862:	2b00      	cmp	r3, #0
 800e864:	d105      	bne.n	800e872 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e866:	683a      	ldr	r2, [r7, #0]
 800e868:	4907      	ldr	r1, [pc, #28]	@ (800e888 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e86a:	4808      	ldr	r0, [pc, #32]	@ (800e88c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e86c:	f7ff fda6 	bl	800e3bc <USBD_GetString>
 800e870:	e004      	b.n	800e87c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e872:	683a      	ldr	r2, [r7, #0]
 800e874:	4904      	ldr	r1, [pc, #16]	@ (800e888 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e876:	4805      	ldr	r0, [pc, #20]	@ (800e88c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e878:	f7ff fda0 	bl	800e3bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800e87c:	4b02      	ldr	r3, [pc, #8]	@ (800e888 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e87e:	4618      	mov	r0, r3
 800e880:	3708      	adds	r7, #8
 800e882:	46bd      	mov	sp, r7
 800e884:	bd80      	pop	{r7, pc}
 800e886:	bf00      	nop
 800e888:	24001908 	.word	0x24001908
 800e88c:	0800f150 	.word	0x0800f150

0800e890 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b082      	sub	sp, #8
 800e894:	af00      	add	r7, sp, #0
 800e896:	4603      	mov	r3, r0
 800e898:	6039      	str	r1, [r7, #0]
 800e89a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e89c:	79fb      	ldrb	r3, [r7, #7]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d105      	bne.n	800e8ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e8a2:	683a      	ldr	r2, [r7, #0]
 800e8a4:	4907      	ldr	r1, [pc, #28]	@ (800e8c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e8a6:	4808      	ldr	r0, [pc, #32]	@ (800e8c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e8a8:	f7ff fd88 	bl	800e3bc <USBD_GetString>
 800e8ac:	e004      	b.n	800e8b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e8ae:	683a      	ldr	r2, [r7, #0]
 800e8b0:	4904      	ldr	r1, [pc, #16]	@ (800e8c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e8b2:	4805      	ldr	r0, [pc, #20]	@ (800e8c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e8b4:	f7ff fd82 	bl	800e3bc <USBD_GetString>
  }
  return USBD_StrDesc;
 800e8b8:	4b02      	ldr	r3, [pc, #8]	@ (800e8c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	3708      	adds	r7, #8
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bd80      	pop	{r7, pc}
 800e8c2:	bf00      	nop
 800e8c4:	24001908 	.word	0x24001908
 800e8c8:	0800f15c 	.word	0x0800f15c

0800e8cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e8cc:	b580      	push	{r7, lr}
 800e8ce:	b084      	sub	sp, #16
 800e8d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e8d2:	4b0f      	ldr	r3, [pc, #60]	@ (800e910 <Get_SerialNum+0x44>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e8d8:	4b0e      	ldr	r3, [pc, #56]	@ (800e914 <Get_SerialNum+0x48>)
 800e8da:	681b      	ldr	r3, [r3, #0]
 800e8dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e8de:	4b0e      	ldr	r3, [pc, #56]	@ (800e918 <Get_SerialNum+0x4c>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e8e4:	68fa      	ldr	r2, [r7, #12]
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	4413      	add	r3, r2
 800e8ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e8ec:	68fb      	ldr	r3, [r7, #12]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d009      	beq.n	800e906 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e8f2:	2208      	movs	r2, #8
 800e8f4:	4909      	ldr	r1, [pc, #36]	@ (800e91c <Get_SerialNum+0x50>)
 800e8f6:	68f8      	ldr	r0, [r7, #12]
 800e8f8:	f000 f814 	bl	800e924 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e8fc:	2204      	movs	r2, #4
 800e8fe:	4908      	ldr	r1, [pc, #32]	@ (800e920 <Get_SerialNum+0x54>)
 800e900:	68b8      	ldr	r0, [r7, #8]
 800e902:	f000 f80f 	bl	800e924 <IntToUnicode>
  }
}
 800e906:	bf00      	nop
 800e908:	3710      	adds	r7, #16
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd80      	pop	{r7, pc}
 800e90e:	bf00      	nop
 800e910:	1ff1e800 	.word	0x1ff1e800
 800e914:	1ff1e804 	.word	0x1ff1e804
 800e918:	1ff1e808 	.word	0x1ff1e808
 800e91c:	24000106 	.word	0x24000106
 800e920:	24000116 	.word	0x24000116

0800e924 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e924:	b480      	push	{r7}
 800e926:	b087      	sub	sp, #28
 800e928:	af00      	add	r7, sp, #0
 800e92a:	60f8      	str	r0, [r7, #12]
 800e92c:	60b9      	str	r1, [r7, #8]
 800e92e:	4613      	mov	r3, r2
 800e930:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e932:	2300      	movs	r3, #0
 800e934:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e936:	2300      	movs	r3, #0
 800e938:	75fb      	strb	r3, [r7, #23]
 800e93a:	e027      	b.n	800e98c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	0f1b      	lsrs	r3, r3, #28
 800e940:	2b09      	cmp	r3, #9
 800e942:	d80b      	bhi.n	800e95c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	0f1b      	lsrs	r3, r3, #28
 800e948:	b2da      	uxtb	r2, r3
 800e94a:	7dfb      	ldrb	r3, [r7, #23]
 800e94c:	005b      	lsls	r3, r3, #1
 800e94e:	4619      	mov	r1, r3
 800e950:	68bb      	ldr	r3, [r7, #8]
 800e952:	440b      	add	r3, r1
 800e954:	3230      	adds	r2, #48	@ 0x30
 800e956:	b2d2      	uxtb	r2, r2
 800e958:	701a      	strb	r2, [r3, #0]
 800e95a:	e00a      	b.n	800e972 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	0f1b      	lsrs	r3, r3, #28
 800e960:	b2da      	uxtb	r2, r3
 800e962:	7dfb      	ldrb	r3, [r7, #23]
 800e964:	005b      	lsls	r3, r3, #1
 800e966:	4619      	mov	r1, r3
 800e968:	68bb      	ldr	r3, [r7, #8]
 800e96a:	440b      	add	r3, r1
 800e96c:	3237      	adds	r2, #55	@ 0x37
 800e96e:	b2d2      	uxtb	r2, r2
 800e970:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	011b      	lsls	r3, r3, #4
 800e976:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e978:	7dfb      	ldrb	r3, [r7, #23]
 800e97a:	005b      	lsls	r3, r3, #1
 800e97c:	3301      	adds	r3, #1
 800e97e:	68ba      	ldr	r2, [r7, #8]
 800e980:	4413      	add	r3, r2
 800e982:	2200      	movs	r2, #0
 800e984:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e986:	7dfb      	ldrb	r3, [r7, #23]
 800e988:	3301      	adds	r3, #1
 800e98a:	75fb      	strb	r3, [r7, #23]
 800e98c:	7dfa      	ldrb	r2, [r7, #23]
 800e98e:	79fb      	ldrb	r3, [r7, #7]
 800e990:	429a      	cmp	r2, r3
 800e992:	d3d3      	bcc.n	800e93c <IntToUnicode+0x18>
  }
}
 800e994:	bf00      	nop
 800e996:	bf00      	nop
 800e998:	371c      	adds	r7, #28
 800e99a:	46bd      	mov	sp, r7
 800e99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a0:	4770      	bx	lr
	...

0800e9a4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e9a4:	b580      	push	{r7, lr}
 800e9a6:	b0ba      	sub	sp, #232	@ 0xe8
 800e9a8:	af00      	add	r7, sp, #0
 800e9aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e9ac:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	601a      	str	r2, [r3, #0]
 800e9b4:	605a      	str	r2, [r3, #4]
 800e9b6:	609a      	str	r2, [r3, #8]
 800e9b8:	60da      	str	r2, [r3, #12]
 800e9ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e9bc:	f107 0310 	add.w	r3, r7, #16
 800e9c0:	22c0      	movs	r2, #192	@ 0xc0
 800e9c2:	2100      	movs	r1, #0
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f000 fb35 	bl	800f034 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	4a34      	ldr	r2, [pc, #208]	@ (800eaa0 <HAL_PCD_MspInit+0xfc>)
 800e9d0:	4293      	cmp	r3, r2
 800e9d2:	d161      	bne.n	800ea98 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800e9d4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800e9d8:	f04f 0300 	mov.w	r3, #0
 800e9dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800e9e0:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800e9e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e9e8:	f107 0310 	add.w	r3, r7, #16
 800e9ec:	4618      	mov	r0, r3
 800e9ee:	f7f8 f8c1 	bl	8006b74 <HAL_RCCEx_PeriphCLKConfig>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d001      	beq.n	800e9fc <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800e9f8:	f7f2 fabe 	bl	8000f78 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800e9fc:	f7f7 f8c4 	bl	8005b88 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ea00:	4b28      	ldr	r3, [pc, #160]	@ (800eaa4 <HAL_PCD_MspInit+0x100>)
 800ea02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ea06:	4a27      	ldr	r2, [pc, #156]	@ (800eaa4 <HAL_PCD_MspInit+0x100>)
 800ea08:	f043 0301 	orr.w	r3, r3, #1
 800ea0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ea10:	4b24      	ldr	r3, [pc, #144]	@ (800eaa4 <HAL_PCD_MspInit+0x100>)
 800ea12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ea16:	f003 0301 	and.w	r3, r3, #1
 800ea1a:	60fb      	str	r3, [r7, #12]
 800ea1c:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800ea1e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800ea22:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ea26:	2302      	movs	r3, #2
 800ea28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea2c:	2300      	movs	r3, #0
 800ea2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ea32:	2300      	movs	r3, #0
 800ea34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800ea38:	230a      	movs	r3, #10
 800ea3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ea3e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800ea42:	4619      	mov	r1, r3
 800ea44:	4818      	ldr	r0, [pc, #96]	@ (800eaa8 <HAL_PCD_MspInit+0x104>)
 800ea46:	f7f5 fb95 	bl	8004174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800ea4a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ea4e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ea52:	2300      	movs	r3, #0
 800ea54:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ea5e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800ea62:	4619      	mov	r1, r3
 800ea64:	4810      	ldr	r0, [pc, #64]	@ (800eaa8 <HAL_PCD_MspInit+0x104>)
 800ea66:	f7f5 fb85 	bl	8004174 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ea6a:	4b0e      	ldr	r3, [pc, #56]	@ (800eaa4 <HAL_PCD_MspInit+0x100>)
 800ea6c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ea70:	4a0c      	ldr	r2, [pc, #48]	@ (800eaa4 <HAL_PCD_MspInit+0x100>)
 800ea72:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ea76:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800ea7a:	4b0a      	ldr	r3, [pc, #40]	@ (800eaa4 <HAL_PCD_MspInit+0x100>)
 800ea7c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ea80:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ea84:	60bb      	str	r3, [r7, #8]
 800ea86:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ea88:	2200      	movs	r2, #0
 800ea8a:	2100      	movs	r1, #0
 800ea8c:	2065      	movs	r0, #101	@ 0x65
 800ea8e:	f7f3 f9e0 	bl	8001e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ea92:	2065      	movs	r0, #101	@ 0x65
 800ea94:	f7f3 f9f7 	bl	8001e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ea98:	bf00      	nop
 800ea9a:	37e8      	adds	r7, #232	@ 0xe8
 800ea9c:	46bd      	mov	sp, r7
 800ea9e:	bd80      	pop	{r7, pc}
 800eaa0:	40080000 	.word	0x40080000
 800eaa4:	58024400 	.word	0x58024400
 800eaa8:	58020000 	.word	0x58020000

0800eaac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eaac:	b580      	push	{r7, lr}
 800eaae:	b082      	sub	sp, #8
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800eac0:	4619      	mov	r1, r3
 800eac2:	4610      	mov	r0, r2
 800eac4:	f7fe faed 	bl	800d0a2 <USBD_LL_SetupStage>
}
 800eac8:	bf00      	nop
 800eaca:	3708      	adds	r7, #8
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}

0800ead0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ead0:	b580      	push	{r7, lr}
 800ead2:	b082      	sub	sp, #8
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
 800ead8:	460b      	mov	r3, r1
 800eada:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800eae2:	78fa      	ldrb	r2, [r7, #3]
 800eae4:	6879      	ldr	r1, [r7, #4]
 800eae6:	4613      	mov	r3, r2
 800eae8:	00db      	lsls	r3, r3, #3
 800eaea:	4413      	add	r3, r2
 800eaec:	009b      	lsls	r3, r3, #2
 800eaee:	440b      	add	r3, r1
 800eaf0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800eaf4:	681a      	ldr	r2, [r3, #0]
 800eaf6:	78fb      	ldrb	r3, [r7, #3]
 800eaf8:	4619      	mov	r1, r3
 800eafa:	f7fe fb27 	bl	800d14c <USBD_LL_DataOutStage>
}
 800eafe:	bf00      	nop
 800eb00:	3708      	adds	r7, #8
 800eb02:	46bd      	mov	sp, r7
 800eb04:	bd80      	pop	{r7, pc}

0800eb06 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb06:	b580      	push	{r7, lr}
 800eb08:	b082      	sub	sp, #8
 800eb0a:	af00      	add	r7, sp, #0
 800eb0c:	6078      	str	r0, [r7, #4]
 800eb0e:	460b      	mov	r3, r1
 800eb10:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800eb18:	78fa      	ldrb	r2, [r7, #3]
 800eb1a:	6879      	ldr	r1, [r7, #4]
 800eb1c:	4613      	mov	r3, r2
 800eb1e:	00db      	lsls	r3, r3, #3
 800eb20:	4413      	add	r3, r2
 800eb22:	009b      	lsls	r3, r3, #2
 800eb24:	440b      	add	r3, r1
 800eb26:	3320      	adds	r3, #32
 800eb28:	681a      	ldr	r2, [r3, #0]
 800eb2a:	78fb      	ldrb	r3, [r7, #3]
 800eb2c:	4619      	mov	r1, r3
 800eb2e:	f7fe fbc0 	bl	800d2b2 <USBD_LL_DataInStage>
}
 800eb32:	bf00      	nop
 800eb34:	3708      	adds	r7, #8
 800eb36:	46bd      	mov	sp, r7
 800eb38:	bd80      	pop	{r7, pc}

0800eb3a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb3a:	b580      	push	{r7, lr}
 800eb3c:	b082      	sub	sp, #8
 800eb3e:	af00      	add	r7, sp, #0
 800eb40:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eb48:	4618      	mov	r0, r3
 800eb4a:	f7fe fcfa 	bl	800d542 <USBD_LL_SOF>
}
 800eb4e:	bf00      	nop
 800eb50:	3708      	adds	r7, #8
 800eb52:	46bd      	mov	sp, r7
 800eb54:	bd80      	pop	{r7, pc}

0800eb56 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eb56:	b580      	push	{r7, lr}
 800eb58:	b084      	sub	sp, #16
 800eb5a:	af00      	add	r7, sp, #0
 800eb5c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800eb5e:	2301      	movs	r3, #1
 800eb60:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	79db      	ldrb	r3, [r3, #7]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d102      	bne.n	800eb70 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	73fb      	strb	r3, [r7, #15]
 800eb6e:	e008      	b.n	800eb82 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	79db      	ldrb	r3, [r3, #7]
 800eb74:	2b02      	cmp	r3, #2
 800eb76:	d102      	bne.n	800eb7e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800eb78:	2301      	movs	r3, #1
 800eb7a:	73fb      	strb	r3, [r7, #15]
 800eb7c:	e001      	b.n	800eb82 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800eb7e:	f7f2 f9fb 	bl	8000f78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eb88:	7bfa      	ldrb	r2, [r7, #15]
 800eb8a:	4611      	mov	r1, r2
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	f7fe fc94 	bl	800d4ba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eb98:	4618      	mov	r0, r3
 800eb9a:	f7fe fc3c 	bl	800d416 <USBD_LL_Reset>
}
 800eb9e:	bf00      	nop
 800eba0:	3710      	adds	r7, #16
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}
	...

0800eba8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b082      	sub	sp, #8
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	f7fe fc8f 	bl	800d4da <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	681b      	ldr	r3, [r3, #0]
 800ebc0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	687a      	ldr	r2, [r7, #4]
 800ebc8:	6812      	ldr	r2, [r2, #0]
 800ebca:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ebce:	f043 0301 	orr.w	r3, r3, #1
 800ebd2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	7adb      	ldrb	r3, [r3, #11]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d005      	beq.n	800ebe8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ebdc:	4b04      	ldr	r3, [pc, #16]	@ (800ebf0 <HAL_PCD_SuspendCallback+0x48>)
 800ebde:	691b      	ldr	r3, [r3, #16]
 800ebe0:	4a03      	ldr	r2, [pc, #12]	@ (800ebf0 <HAL_PCD_SuspendCallback+0x48>)
 800ebe2:	f043 0306 	orr.w	r3, r3, #6
 800ebe6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ebe8:	bf00      	nop
 800ebea:	3708      	adds	r7, #8
 800ebec:	46bd      	mov	sp, r7
 800ebee:	bd80      	pop	{r7, pc}
 800ebf0:	e000ed00 	.word	0xe000ed00

0800ebf4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b082      	sub	sp, #8
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ec02:	4618      	mov	r0, r3
 800ec04:	f7fe fc85 	bl	800d512 <USBD_LL_Resume>
}
 800ec08:	bf00      	nop
 800ec0a:	3708      	adds	r7, #8
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}

0800ec10 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec10:	b580      	push	{r7, lr}
 800ec12:	b082      	sub	sp, #8
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
 800ec18:	460b      	mov	r3, r1
 800ec1a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ec22:	78fa      	ldrb	r2, [r7, #3]
 800ec24:	4611      	mov	r1, r2
 800ec26:	4618      	mov	r0, r3
 800ec28:	f7fe fcdd 	bl	800d5e6 <USBD_LL_IsoOUTIncomplete>
}
 800ec2c:	bf00      	nop
 800ec2e:	3708      	adds	r7, #8
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}

0800ec34 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec34:	b580      	push	{r7, lr}
 800ec36:	b082      	sub	sp, #8
 800ec38:	af00      	add	r7, sp, #0
 800ec3a:	6078      	str	r0, [r7, #4]
 800ec3c:	460b      	mov	r3, r1
 800ec3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ec46:	78fa      	ldrb	r2, [r7, #3]
 800ec48:	4611      	mov	r1, r2
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f7fe fc99 	bl	800d582 <USBD_LL_IsoINIncomplete>
}
 800ec50:	bf00      	nop
 800ec52:	3708      	adds	r7, #8
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd80      	pop	{r7, pc}

0800ec58 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec58:	b580      	push	{r7, lr}
 800ec5a:	b082      	sub	sp, #8
 800ec5c:	af00      	add	r7, sp, #0
 800ec5e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ec66:	4618      	mov	r0, r3
 800ec68:	f7fe fcef 	bl	800d64a <USBD_LL_DevConnected>
}
 800ec6c:	bf00      	nop
 800ec6e:	3708      	adds	r7, #8
 800ec70:	46bd      	mov	sp, r7
 800ec72:	bd80      	pop	{r7, pc}

0800ec74 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ec74:	b580      	push	{r7, lr}
 800ec76:	b082      	sub	sp, #8
 800ec78:	af00      	add	r7, sp, #0
 800ec7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ec82:	4618      	mov	r0, r3
 800ec84:	f7fe fcec 	bl	800d660 <USBD_LL_DevDisconnected>
}
 800ec88:	bf00      	nop
 800ec8a:	3708      	adds	r7, #8
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}

0800ec90 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b082      	sub	sp, #8
 800ec94:	af00      	add	r7, sp, #0
 800ec96:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	781b      	ldrb	r3, [r3, #0]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d13e      	bne.n	800ed1e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800eca0:	4a21      	ldr	r2, [pc, #132]	@ (800ed28 <USBD_LL_Init+0x98>)
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	4a1f      	ldr	r2, [pc, #124]	@ (800ed28 <USBD_LL_Init+0x98>)
 800ecac:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ecb0:	4b1d      	ldr	r3, [pc, #116]	@ (800ed28 <USBD_LL_Init+0x98>)
 800ecb2:	4a1e      	ldr	r2, [pc, #120]	@ (800ed2c <USBD_LL_Init+0x9c>)
 800ecb4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800ecb6:	4b1c      	ldr	r3, [pc, #112]	@ (800ed28 <USBD_LL_Init+0x98>)
 800ecb8:	2209      	movs	r2, #9
 800ecba:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ecbc:	4b1a      	ldr	r3, [pc, #104]	@ (800ed28 <USBD_LL_Init+0x98>)
 800ecbe:	2202      	movs	r2, #2
 800ecc0:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ecc2:	4b19      	ldr	r3, [pc, #100]	@ (800ed28 <USBD_LL_Init+0x98>)
 800ecc4:	2200      	movs	r2, #0
 800ecc6:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ecc8:	4b17      	ldr	r3, [pc, #92]	@ (800ed28 <USBD_LL_Init+0x98>)
 800ecca:	2202      	movs	r2, #2
 800eccc:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800ecce:	4b16      	ldr	r3, [pc, #88]	@ (800ed28 <USBD_LL_Init+0x98>)
 800ecd0:	2201      	movs	r2, #1
 800ecd2:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ecd4:	4b14      	ldr	r3, [pc, #80]	@ (800ed28 <USBD_LL_Init+0x98>)
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ecda:	4b13      	ldr	r3, [pc, #76]	@ (800ed28 <USBD_LL_Init+0x98>)
 800ecdc:	2200      	movs	r2, #0
 800ecde:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800ece0:	4b11      	ldr	r3, [pc, #68]	@ (800ed28 <USBD_LL_Init+0x98>)
 800ece2:	2201      	movs	r2, #1
 800ece4:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800ece6:	4b10      	ldr	r3, [pc, #64]	@ (800ed28 <USBD_LL_Init+0x98>)
 800ece8:	2201      	movs	r2, #1
 800ecea:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ecec:	4b0e      	ldr	r3, [pc, #56]	@ (800ed28 <USBD_LL_Init+0x98>)
 800ecee:	2200      	movs	r2, #0
 800ecf0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ecf2:	480d      	ldr	r0, [pc, #52]	@ (800ed28 <USBD_LL_Init+0x98>)
 800ecf4:	f7f5 fc50 	bl	8004598 <HAL_PCD_Init>
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d001      	beq.n	800ed02 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800ecfe:	f7f2 f93b 	bl	8000f78 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ed02:	2180      	movs	r1, #128	@ 0x80
 800ed04:	4808      	ldr	r0, [pc, #32]	@ (800ed28 <USBD_LL_Init+0x98>)
 800ed06:	f7f6 fea4 	bl	8005a52 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ed0a:	2240      	movs	r2, #64	@ 0x40
 800ed0c:	2100      	movs	r1, #0
 800ed0e:	4806      	ldr	r0, [pc, #24]	@ (800ed28 <USBD_LL_Init+0x98>)
 800ed10:	f7f6 fe58 	bl	80059c4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ed14:	2280      	movs	r2, #128	@ 0x80
 800ed16:	2101      	movs	r1, #1
 800ed18:	4803      	ldr	r0, [pc, #12]	@ (800ed28 <USBD_LL_Init+0x98>)
 800ed1a:	f7f6 fe53 	bl	80059c4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800ed1e:	2300      	movs	r3, #0
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	3708      	adds	r7, #8
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}
 800ed28:	24001b08 	.word	0x24001b08
 800ed2c:	40080000 	.word	0x40080000

0800ed30 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b084      	sub	sp, #16
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed38:	2300      	movs	r3, #0
 800ed3a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ed46:	4618      	mov	r0, r3
 800ed48:	f7f5 fd32 	bl	80047b0 <HAL_PCD_Start>
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed50:	7bfb      	ldrb	r3, [r7, #15]
 800ed52:	4618      	mov	r0, r3
 800ed54:	f000 f942 	bl	800efdc <USBD_Get_USB_Status>
 800ed58:	4603      	mov	r3, r0
 800ed5a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ed5c:	7bbb      	ldrb	r3, [r7, #14]
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	3710      	adds	r7, #16
 800ed62:	46bd      	mov	sp, r7
 800ed64:	bd80      	pop	{r7, pc}

0800ed66 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ed66:	b580      	push	{r7, lr}
 800ed68:	b084      	sub	sp, #16
 800ed6a:	af00      	add	r7, sp, #0
 800ed6c:	6078      	str	r0, [r7, #4]
 800ed6e:	4608      	mov	r0, r1
 800ed70:	4611      	mov	r1, r2
 800ed72:	461a      	mov	r2, r3
 800ed74:	4603      	mov	r3, r0
 800ed76:	70fb      	strb	r3, [r7, #3]
 800ed78:	460b      	mov	r3, r1
 800ed7a:	70bb      	strb	r3, [r7, #2]
 800ed7c:	4613      	mov	r3, r2
 800ed7e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ed80:	2300      	movs	r3, #0
 800ed82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ed84:	2300      	movs	r3, #0
 800ed86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ed8e:	78bb      	ldrb	r3, [r7, #2]
 800ed90:	883a      	ldrh	r2, [r7, #0]
 800ed92:	78f9      	ldrb	r1, [r7, #3]
 800ed94:	f7f6 fa33 	bl	80051fe <HAL_PCD_EP_Open>
 800ed98:	4603      	mov	r3, r0
 800ed9a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ed9c:	7bfb      	ldrb	r3, [r7, #15]
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f000 f91c 	bl	800efdc <USBD_Get_USB_Status>
 800eda4:	4603      	mov	r3, r0
 800eda6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eda8:	7bbb      	ldrb	r3, [r7, #14]
}
 800edaa:	4618      	mov	r0, r3
 800edac:	3710      	adds	r7, #16
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}

0800edb2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800edb2:	b580      	push	{r7, lr}
 800edb4:	b084      	sub	sp, #16
 800edb6:	af00      	add	r7, sp, #0
 800edb8:	6078      	str	r0, [r7, #4]
 800edba:	460b      	mov	r3, r1
 800edbc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edbe:	2300      	movs	r3, #0
 800edc0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800edc2:	2300      	movs	r3, #0
 800edc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800edcc:	78fa      	ldrb	r2, [r7, #3]
 800edce:	4611      	mov	r1, r2
 800edd0:	4618      	mov	r0, r3
 800edd2:	f7f6 fa7c 	bl	80052ce <HAL_PCD_EP_Close>
 800edd6:	4603      	mov	r3, r0
 800edd8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800edda:	7bfb      	ldrb	r3, [r7, #15]
 800eddc:	4618      	mov	r0, r3
 800edde:	f000 f8fd 	bl	800efdc <USBD_Get_USB_Status>
 800ede2:	4603      	mov	r3, r0
 800ede4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ede6:	7bbb      	ldrb	r3, [r7, #14]
}
 800ede8:	4618      	mov	r0, r3
 800edea:	3710      	adds	r7, #16
 800edec:	46bd      	mov	sp, r7
 800edee:	bd80      	pop	{r7, pc}

0800edf0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b084      	sub	sp, #16
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	460b      	mov	r3, r1
 800edfa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800edfc:	2300      	movs	r3, #0
 800edfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee00:	2300      	movs	r3, #0
 800ee02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ee0a:	78fa      	ldrb	r2, [r7, #3]
 800ee0c:	4611      	mov	r1, r2
 800ee0e:	4618      	mov	r0, r3
 800ee10:	f7f6 fb34 	bl	800547c <HAL_PCD_EP_SetStall>
 800ee14:	4603      	mov	r3, r0
 800ee16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee18:	7bfb      	ldrb	r3, [r7, #15]
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f000 f8de 	bl	800efdc <USBD_Get_USB_Status>
 800ee20:	4603      	mov	r3, r0
 800ee22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee24:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee26:	4618      	mov	r0, r3
 800ee28:	3710      	adds	r7, #16
 800ee2a:	46bd      	mov	sp, r7
 800ee2c:	bd80      	pop	{r7, pc}

0800ee2e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee2e:	b580      	push	{r7, lr}
 800ee30:	b084      	sub	sp, #16
 800ee32:	af00      	add	r7, sp, #0
 800ee34:	6078      	str	r0, [r7, #4]
 800ee36:	460b      	mov	r3, r1
 800ee38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ee3a:	2300      	movs	r3, #0
 800ee3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ee3e:	2300      	movs	r3, #0
 800ee40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ee48:	78fa      	ldrb	r2, [r7, #3]
 800ee4a:	4611      	mov	r1, r2
 800ee4c:	4618      	mov	r0, r3
 800ee4e:	f7f6 fb78 	bl	8005542 <HAL_PCD_EP_ClrStall>
 800ee52:	4603      	mov	r3, r0
 800ee54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ee56:	7bfb      	ldrb	r3, [r7, #15]
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f000 f8bf 	bl	800efdc <USBD_Get_USB_Status>
 800ee5e:	4603      	mov	r3, r0
 800ee60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ee62:	7bbb      	ldrb	r3, [r7, #14]
}
 800ee64:	4618      	mov	r0, r3
 800ee66:	3710      	adds	r7, #16
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	bd80      	pop	{r7, pc}

0800ee6c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ee6c:	b480      	push	{r7}
 800ee6e:	b085      	sub	sp, #20
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	460b      	mov	r3, r1
 800ee76:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ee7e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ee80:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	da0b      	bge.n	800eea0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ee88:	78fb      	ldrb	r3, [r7, #3]
 800ee8a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ee8e:	68f9      	ldr	r1, [r7, #12]
 800ee90:	4613      	mov	r3, r2
 800ee92:	00db      	lsls	r3, r3, #3
 800ee94:	4413      	add	r3, r2
 800ee96:	009b      	lsls	r3, r3, #2
 800ee98:	440b      	add	r3, r1
 800ee9a:	3316      	adds	r3, #22
 800ee9c:	781b      	ldrb	r3, [r3, #0]
 800ee9e:	e00b      	b.n	800eeb8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800eea0:	78fb      	ldrb	r3, [r7, #3]
 800eea2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800eea6:	68f9      	ldr	r1, [r7, #12]
 800eea8:	4613      	mov	r3, r2
 800eeaa:	00db      	lsls	r3, r3, #3
 800eeac:	4413      	add	r3, r2
 800eeae:	009b      	lsls	r3, r3, #2
 800eeb0:	440b      	add	r3, r1
 800eeb2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800eeb6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800eeb8:	4618      	mov	r0, r3
 800eeba:	3714      	adds	r7, #20
 800eebc:	46bd      	mov	sp, r7
 800eebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec2:	4770      	bx	lr

0800eec4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b084      	sub	sp, #16
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
 800eecc:	460b      	mov	r3, r1
 800eece:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800eed0:	2300      	movs	r3, #0
 800eed2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800eed4:	2300      	movs	r3, #0
 800eed6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eede:	78fa      	ldrb	r2, [r7, #3]
 800eee0:	4611      	mov	r1, r2
 800eee2:	4618      	mov	r0, r3
 800eee4:	f7f6 f967 	bl	80051b6 <HAL_PCD_SetAddress>
 800eee8:	4603      	mov	r3, r0
 800eeea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eeec:	7bfb      	ldrb	r3, [r7, #15]
 800eeee:	4618      	mov	r0, r3
 800eef0:	f000 f874 	bl	800efdc <USBD_Get_USB_Status>
 800eef4:	4603      	mov	r3, r0
 800eef6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800eef8:	7bbb      	ldrb	r3, [r7, #14]
}
 800eefa:	4618      	mov	r0, r3
 800eefc:	3710      	adds	r7, #16
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd80      	pop	{r7, pc}

0800ef02 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ef02:	b580      	push	{r7, lr}
 800ef04:	b086      	sub	sp, #24
 800ef06:	af00      	add	r7, sp, #0
 800ef08:	60f8      	str	r0, [r7, #12]
 800ef0a:	607a      	str	r2, [r7, #4]
 800ef0c:	603b      	str	r3, [r7, #0]
 800ef0e:	460b      	mov	r3, r1
 800ef10:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef12:	2300      	movs	r3, #0
 800ef14:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef16:	2300      	movs	r3, #0
 800ef18:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ef1a:	68fb      	ldr	r3, [r7, #12]
 800ef1c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ef20:	7af9      	ldrb	r1, [r7, #11]
 800ef22:	683b      	ldr	r3, [r7, #0]
 800ef24:	687a      	ldr	r2, [r7, #4]
 800ef26:	f7f6 fa6f 	bl	8005408 <HAL_PCD_EP_Transmit>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef2e:	7dfb      	ldrb	r3, [r7, #23]
 800ef30:	4618      	mov	r0, r3
 800ef32:	f000 f853 	bl	800efdc <USBD_Get_USB_Status>
 800ef36:	4603      	mov	r3, r0
 800ef38:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ef3a:	7dbb      	ldrb	r3, [r7, #22]
}
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	3718      	adds	r7, #24
 800ef40:	46bd      	mov	sp, r7
 800ef42:	bd80      	pop	{r7, pc}

0800ef44 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b086      	sub	sp, #24
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	60f8      	str	r0, [r7, #12]
 800ef4c:	607a      	str	r2, [r7, #4]
 800ef4e:	603b      	str	r3, [r7, #0]
 800ef50:	460b      	mov	r3, r1
 800ef52:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef54:	2300      	movs	r3, #0
 800ef56:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef58:	2300      	movs	r3, #0
 800ef5a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ef62:	7af9      	ldrb	r1, [r7, #11]
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	687a      	ldr	r2, [r7, #4]
 800ef68:	f7f6 f9fb 	bl	8005362 <HAL_PCD_EP_Receive>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef70:	7dfb      	ldrb	r3, [r7, #23]
 800ef72:	4618      	mov	r0, r3
 800ef74:	f000 f832 	bl	800efdc <USBD_Get_USB_Status>
 800ef78:	4603      	mov	r3, r0
 800ef7a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ef7c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3718      	adds	r7, #24
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}

0800ef86 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef86:	b580      	push	{r7, lr}
 800ef88:	b082      	sub	sp, #8
 800ef8a:	af00      	add	r7, sp, #0
 800ef8c:	6078      	str	r0, [r7, #4]
 800ef8e:	460b      	mov	r3, r1
 800ef90:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ef98:	78fa      	ldrb	r2, [r7, #3]
 800ef9a:	4611      	mov	r1, r2
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f7f6 fa1b 	bl	80053d8 <HAL_PCD_EP_GetRxCount>
 800efa2:	4603      	mov	r3, r0
}
 800efa4:	4618      	mov	r0, r3
 800efa6:	3708      	adds	r7, #8
 800efa8:	46bd      	mov	sp, r7
 800efaa:	bd80      	pop	{r7, pc}

0800efac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800efac:	b480      	push	{r7}
 800efae:	b083      	sub	sp, #12
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800efb4:	4b03      	ldr	r3, [pc, #12]	@ (800efc4 <USBD_static_malloc+0x18>)
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	370c      	adds	r7, #12
 800efba:	46bd      	mov	sp, r7
 800efbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efc0:	4770      	bx	lr
 800efc2:	bf00      	nop
 800efc4:	24001fec 	.word	0x24001fec

0800efc8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800efc8:	b480      	push	{r7}
 800efca:	b083      	sub	sp, #12
 800efcc:	af00      	add	r7, sp, #0
 800efce:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800efd0:	bf00      	nop
 800efd2:	370c      	adds	r7, #12
 800efd4:	46bd      	mov	sp, r7
 800efd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efda:	4770      	bx	lr

0800efdc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800efdc:	b480      	push	{r7}
 800efde:	b085      	sub	sp, #20
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	4603      	mov	r3, r0
 800efe4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efe6:	2300      	movs	r3, #0
 800efe8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800efea:	79fb      	ldrb	r3, [r7, #7]
 800efec:	2b03      	cmp	r3, #3
 800efee:	d817      	bhi.n	800f020 <USBD_Get_USB_Status+0x44>
 800eff0:	a201      	add	r2, pc, #4	@ (adr r2, 800eff8 <USBD_Get_USB_Status+0x1c>)
 800eff2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eff6:	bf00      	nop
 800eff8:	0800f009 	.word	0x0800f009
 800effc:	0800f00f 	.word	0x0800f00f
 800f000:	0800f015 	.word	0x0800f015
 800f004:	0800f01b 	.word	0x0800f01b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f008:	2300      	movs	r3, #0
 800f00a:	73fb      	strb	r3, [r7, #15]
    break;
 800f00c:	e00b      	b.n	800f026 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f00e:	2303      	movs	r3, #3
 800f010:	73fb      	strb	r3, [r7, #15]
    break;
 800f012:	e008      	b.n	800f026 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f014:	2301      	movs	r3, #1
 800f016:	73fb      	strb	r3, [r7, #15]
    break;
 800f018:	e005      	b.n	800f026 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f01a:	2303      	movs	r3, #3
 800f01c:	73fb      	strb	r3, [r7, #15]
    break;
 800f01e:	e002      	b.n	800f026 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f020:	2303      	movs	r3, #3
 800f022:	73fb      	strb	r3, [r7, #15]
    break;
 800f024:	bf00      	nop
  }
  return usb_status;
 800f026:	7bfb      	ldrb	r3, [r7, #15]
}
 800f028:	4618      	mov	r0, r3
 800f02a:	3714      	adds	r7, #20
 800f02c:	46bd      	mov	sp, r7
 800f02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f032:	4770      	bx	lr

0800f034 <memset>:
 800f034:	4402      	add	r2, r0
 800f036:	4603      	mov	r3, r0
 800f038:	4293      	cmp	r3, r2
 800f03a:	d100      	bne.n	800f03e <memset+0xa>
 800f03c:	4770      	bx	lr
 800f03e:	f803 1b01 	strb.w	r1, [r3], #1
 800f042:	e7f9      	b.n	800f038 <memset+0x4>

0800f044 <__libc_init_array>:
 800f044:	b570      	push	{r4, r5, r6, lr}
 800f046:	4d0d      	ldr	r5, [pc, #52]	@ (800f07c <__libc_init_array+0x38>)
 800f048:	4c0d      	ldr	r4, [pc, #52]	@ (800f080 <__libc_init_array+0x3c>)
 800f04a:	1b64      	subs	r4, r4, r5
 800f04c:	10a4      	asrs	r4, r4, #2
 800f04e:	2600      	movs	r6, #0
 800f050:	42a6      	cmp	r6, r4
 800f052:	d109      	bne.n	800f068 <__libc_init_array+0x24>
 800f054:	4d0b      	ldr	r5, [pc, #44]	@ (800f084 <__libc_init_array+0x40>)
 800f056:	4c0c      	ldr	r4, [pc, #48]	@ (800f088 <__libc_init_array+0x44>)
 800f058:	f000 f858 	bl	800f10c <_init>
 800f05c:	1b64      	subs	r4, r4, r5
 800f05e:	10a4      	asrs	r4, r4, #2
 800f060:	2600      	movs	r6, #0
 800f062:	42a6      	cmp	r6, r4
 800f064:	d105      	bne.n	800f072 <__libc_init_array+0x2e>
 800f066:	bd70      	pop	{r4, r5, r6, pc}
 800f068:	f855 3b04 	ldr.w	r3, [r5], #4
 800f06c:	4798      	blx	r3
 800f06e:	3601      	adds	r6, #1
 800f070:	e7ee      	b.n	800f050 <__libc_init_array+0xc>
 800f072:	f855 3b04 	ldr.w	r3, [r5], #4
 800f076:	4798      	blx	r3
 800f078:	3601      	adds	r6, #1
 800f07a:	e7f2      	b.n	800f062 <__libc_init_array+0x1e>
 800f07c:	0800f1b8 	.word	0x0800f1b8
 800f080:	0800f1b8 	.word	0x0800f1b8
 800f084:	0800f1b8 	.word	0x0800f1b8
 800f088:	0800f1bc 	.word	0x0800f1bc

0800f08c <lrintf>:
 800f08c:	ee10 3a10 	vmov	r3, s0
 800f090:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800f094:	f1a2 007f 	sub.w	r0, r2, #127	@ 0x7f
 800f098:	281e      	cmp	r0, #30
 800f09a:	b082      	sub	sp, #8
 800f09c:	dc2f      	bgt.n	800f0fe <lrintf+0x72>
 800f09e:	1c41      	adds	r1, r0, #1
 800f0a0:	da02      	bge.n	800f0a8 <lrintf+0x1c>
 800f0a2:	2000      	movs	r0, #0
 800f0a4:	b002      	add	sp, #8
 800f0a6:	4770      	bx	lr
 800f0a8:	2816      	cmp	r0, #22
 800f0aa:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 800f0ae:	dd0a      	ble.n	800f0c6 <lrintf+0x3a>
 800f0b0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f0b4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800f0b8:	3a96      	subs	r2, #150	@ 0x96
 800f0ba:	fa03 f002 	lsl.w	r0, r3, r2
 800f0be:	2900      	cmp	r1, #0
 800f0c0:	d0f0      	beq.n	800f0a4 <lrintf+0x18>
 800f0c2:	4240      	negs	r0, r0
 800f0c4:	e7ee      	b.n	800f0a4 <lrintf+0x18>
 800f0c6:	4b10      	ldr	r3, [pc, #64]	@ (800f108 <lrintf+0x7c>)
 800f0c8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 800f0cc:	ed93 7a00 	vldr	s14, [r3]
 800f0d0:	ee37 0a00 	vadd.f32	s0, s14, s0
 800f0d4:	ed8d 0a01 	vstr	s0, [sp, #4]
 800f0d8:	eddd 7a01 	vldr	s15, [sp, #4]
 800f0dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f0e0:	ee17 3a90 	vmov	r3, s15
 800f0e4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800f0e8:	d0db      	beq.n	800f0a2 <lrintf+0x16>
 800f0ea:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800f0ee:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 800f0f2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800f0f6:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800f0fa:	40d8      	lsrs	r0, r3
 800f0fc:	e7df      	b.n	800f0be <lrintf+0x32>
 800f0fe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f102:	ee17 0a90 	vmov	r0, s15
 800f106:	e7cd      	b.n	800f0a4 <lrintf+0x18>
 800f108:	0800f1a8 	.word	0x0800f1a8

0800f10c <_init>:
 800f10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f10e:	bf00      	nop
 800f110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f112:	bc08      	pop	{r3}
 800f114:	469e      	mov	lr, r3
 800f116:	4770      	bx	lr

0800f118 <_fini>:
 800f118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f11a:	bf00      	nop
 800f11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f11e:	bc08      	pop	{r3}
 800f120:	469e      	mov	lr, r3
 800f122:	4770      	bx	lr
