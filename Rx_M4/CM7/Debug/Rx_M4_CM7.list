
Rx_M4_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011dac  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000410  08012050  08012050  00013050  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012460  08012460  000142ec  2**0
                  CONTENTS
  4 .ARM          00000008  08012460  08012460  00013460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012468  08012468  000142ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012468  08012468  00013468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801246c  0801246c  0001346c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002ec  24000000  08012470  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002248  240002ec  0801275c  000142ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24002534  0801275c  00014534  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000142ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002430f  00000000  00000000  0001431a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e54  00000000  00000000  00038629  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001af8  00000000  00000000  0003d480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014af  00000000  00000000  0003ef78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003ffdb  00000000  00000000  00040427  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00027def  00000000  00000000  00080402  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0018e224  00000000  00000000  000a81f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00236415  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007fe8  00000000  00000000  00236458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0023e440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240002ec 	.word	0x240002ec
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08012034 	.word	0x08012034

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240002f0 	.word	0x240002f0
 80002dc:	08012034 	.word	0x08012034

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96a 	b.w	800067c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	460c      	mov	r4, r1
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	d14e      	bne.n	800046a <__udivmoddi4+0xaa>
 80003cc:	4694      	mov	ip, r2
 80003ce:	458c      	cmp	ip, r1
 80003d0:	4686      	mov	lr, r0
 80003d2:	fab2 f282 	clz	r2, r2
 80003d6:	d962      	bls.n	800049e <__udivmoddi4+0xde>
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0320 	rsb	r3, r2, #32
 80003de:	4091      	lsls	r1, r2
 80003e0:	fa20 f303 	lsr.w	r3, r0, r3
 80003e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003e8:	4319      	orrs	r1, r3
 80003ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80003ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f2:	fa1f f68c 	uxth.w	r6, ip
 80003f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb04 f106 	mul.w	r1, r4, r6
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f104 30ff 	add.w	r0, r4, #4294967295
 8000416:	f080 8112 	bcs.w	800063e <__udivmoddi4+0x27e>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 810f 	bls.w	800063e <__udivmoddi4+0x27e>
 8000420:	3c02      	subs	r4, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a59      	subs	r1, r3, r1
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb1 f0f7 	udiv	r0, r1, r7
 800042e:	fb07 1110 	mls	r1, r7, r0, r1
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f606 	mul.w	r6, r0, r6
 800043a:	429e      	cmp	r6, r3
 800043c:	d90a      	bls.n	8000454 <__udivmoddi4+0x94>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 31ff 	add.w	r1, r0, #4294967295
 8000446:	f080 80fc 	bcs.w	8000642 <__udivmoddi4+0x282>
 800044a:	429e      	cmp	r6, r3
 800044c:	f240 80f9 	bls.w	8000642 <__udivmoddi4+0x282>
 8000450:	4463      	add	r3, ip
 8000452:	3802      	subs	r0, #2
 8000454:	1b9b      	subs	r3, r3, r6
 8000456:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800045a:	2100      	movs	r1, #0
 800045c:	b11d      	cbz	r5, 8000466 <__udivmoddi4+0xa6>
 800045e:	40d3      	lsrs	r3, r2
 8000460:	2200      	movs	r2, #0
 8000462:	e9c5 3200 	strd	r3, r2, [r5]
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d905      	bls.n	800047a <__udivmoddi4+0xba>
 800046e:	b10d      	cbz	r5, 8000474 <__udivmoddi4+0xb4>
 8000470:	e9c5 0100 	strd	r0, r1, [r5]
 8000474:	2100      	movs	r1, #0
 8000476:	4608      	mov	r0, r1
 8000478:	e7f5      	b.n	8000466 <__udivmoddi4+0xa6>
 800047a:	fab3 f183 	clz	r1, r3
 800047e:	2900      	cmp	r1, #0
 8000480:	d146      	bne.n	8000510 <__udivmoddi4+0x150>
 8000482:	42a3      	cmp	r3, r4
 8000484:	d302      	bcc.n	800048c <__udivmoddi4+0xcc>
 8000486:	4290      	cmp	r0, r2
 8000488:	f0c0 80f0 	bcc.w	800066c <__udivmoddi4+0x2ac>
 800048c:	1a86      	subs	r6, r0, r2
 800048e:	eb64 0303 	sbc.w	r3, r4, r3
 8000492:	2001      	movs	r0, #1
 8000494:	2d00      	cmp	r5, #0
 8000496:	d0e6      	beq.n	8000466 <__udivmoddi4+0xa6>
 8000498:	e9c5 6300 	strd	r6, r3, [r5]
 800049c:	e7e3      	b.n	8000466 <__udivmoddi4+0xa6>
 800049e:	2a00      	cmp	r2, #0
 80004a0:	f040 8090 	bne.w	80005c4 <__udivmoddi4+0x204>
 80004a4:	eba1 040c 	sub.w	r4, r1, ip
 80004a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	2101      	movs	r1, #1
 80004b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004ba:	fb08 4416 	mls	r4, r8, r6, r4
 80004be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004c2:	fb07 f006 	mul.w	r0, r7, r6
 80004c6:	4298      	cmp	r0, r3
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x11c>
 80004ca:	eb1c 0303 	adds.w	r3, ip, r3
 80004ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x11a>
 80004d4:	4298      	cmp	r0, r3
 80004d6:	f200 80cd 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004da:	4626      	mov	r6, r4
 80004dc:	1a1c      	subs	r4, r3, r0
 80004de:	fa1f f38e 	uxth.w	r3, lr
 80004e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004e6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004ee:	fb00 f707 	mul.w	r7, r0, r7
 80004f2:	429f      	cmp	r7, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x148>
 80004f6:	eb1c 0303 	adds.w	r3, ip, r3
 80004fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80004fe:	d202      	bcs.n	8000506 <__udivmoddi4+0x146>
 8000500:	429f      	cmp	r7, r3
 8000502:	f200 80b0 	bhi.w	8000666 <__udivmoddi4+0x2a6>
 8000506:	4620      	mov	r0, r4
 8000508:	1bdb      	subs	r3, r3, r7
 800050a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800050e:	e7a5      	b.n	800045c <__udivmoddi4+0x9c>
 8000510:	f1c1 0620 	rsb	r6, r1, #32
 8000514:	408b      	lsls	r3, r1
 8000516:	fa22 f706 	lsr.w	r7, r2, r6
 800051a:	431f      	orrs	r7, r3
 800051c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000520:	fa04 f301 	lsl.w	r3, r4, r1
 8000524:	ea43 030c 	orr.w	r3, r3, ip
 8000528:	40f4      	lsrs	r4, r6
 800052a:	fa00 f801 	lsl.w	r8, r0, r1
 800052e:	0c38      	lsrs	r0, r7, #16
 8000530:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000534:	fbb4 fef0 	udiv	lr, r4, r0
 8000538:	fa1f fc87 	uxth.w	ip, r7
 800053c:	fb00 441e 	mls	r4, r0, lr, r4
 8000540:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000544:	fb0e f90c 	mul.w	r9, lr, ip
 8000548:	45a1      	cmp	r9, r4
 800054a:	fa02 f201 	lsl.w	r2, r2, r1
 800054e:	d90a      	bls.n	8000566 <__udivmoddi4+0x1a6>
 8000550:	193c      	adds	r4, r7, r4
 8000552:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000556:	f080 8084 	bcs.w	8000662 <__udivmoddi4+0x2a2>
 800055a:	45a1      	cmp	r9, r4
 800055c:	f240 8081 	bls.w	8000662 <__udivmoddi4+0x2a2>
 8000560:	f1ae 0e02 	sub.w	lr, lr, #2
 8000564:	443c      	add	r4, r7
 8000566:	eba4 0409 	sub.w	r4, r4, r9
 800056a:	fa1f f983 	uxth.w	r9, r3
 800056e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000572:	fb00 4413 	mls	r4, r0, r3, r4
 8000576:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800057a:	fb03 fc0c 	mul.w	ip, r3, ip
 800057e:	45a4      	cmp	ip, r4
 8000580:	d907      	bls.n	8000592 <__udivmoddi4+0x1d2>
 8000582:	193c      	adds	r4, r7, r4
 8000584:	f103 30ff 	add.w	r0, r3, #4294967295
 8000588:	d267      	bcs.n	800065a <__udivmoddi4+0x29a>
 800058a:	45a4      	cmp	ip, r4
 800058c:	d965      	bls.n	800065a <__udivmoddi4+0x29a>
 800058e:	3b02      	subs	r3, #2
 8000590:	443c      	add	r4, r7
 8000592:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000596:	fba0 9302 	umull	r9, r3, r0, r2
 800059a:	eba4 040c 	sub.w	r4, r4, ip
 800059e:	429c      	cmp	r4, r3
 80005a0:	46ce      	mov	lr, r9
 80005a2:	469c      	mov	ip, r3
 80005a4:	d351      	bcc.n	800064a <__udivmoddi4+0x28a>
 80005a6:	d04e      	beq.n	8000646 <__udivmoddi4+0x286>
 80005a8:	b155      	cbz	r5, 80005c0 <__udivmoddi4+0x200>
 80005aa:	ebb8 030e 	subs.w	r3, r8, lr
 80005ae:	eb64 040c 	sbc.w	r4, r4, ip
 80005b2:	fa04 f606 	lsl.w	r6, r4, r6
 80005b6:	40cb      	lsrs	r3, r1
 80005b8:	431e      	orrs	r6, r3
 80005ba:	40cc      	lsrs	r4, r1
 80005bc:	e9c5 6400 	strd	r6, r4, [r5]
 80005c0:	2100      	movs	r1, #0
 80005c2:	e750      	b.n	8000466 <__udivmoddi4+0xa6>
 80005c4:	f1c2 0320 	rsb	r3, r2, #32
 80005c8:	fa20 f103 	lsr.w	r1, r0, r3
 80005cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d0:	fa24 f303 	lsr.w	r3, r4, r3
 80005d4:	4094      	lsls	r4, r2
 80005d6:	430c      	orrs	r4, r1
 80005d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005e0:	fa1f f78c 	uxth.w	r7, ip
 80005e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005e8:	fb08 3110 	mls	r1, r8, r0, r3
 80005ec:	0c23      	lsrs	r3, r4, #16
 80005ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005f2:	fb00 f107 	mul.w	r1, r0, r7
 80005f6:	4299      	cmp	r1, r3
 80005f8:	d908      	bls.n	800060c <__udivmoddi4+0x24c>
 80005fa:	eb1c 0303 	adds.w	r3, ip, r3
 80005fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000602:	d22c      	bcs.n	800065e <__udivmoddi4+0x29e>
 8000604:	4299      	cmp	r1, r3
 8000606:	d92a      	bls.n	800065e <__udivmoddi4+0x29e>
 8000608:	3802      	subs	r0, #2
 800060a:	4463      	add	r3, ip
 800060c:	1a5b      	subs	r3, r3, r1
 800060e:	b2a4      	uxth	r4, r4
 8000610:	fbb3 f1f8 	udiv	r1, r3, r8
 8000614:	fb08 3311 	mls	r3, r8, r1, r3
 8000618:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800061c:	fb01 f307 	mul.w	r3, r1, r7
 8000620:	42a3      	cmp	r3, r4
 8000622:	d908      	bls.n	8000636 <__udivmoddi4+0x276>
 8000624:	eb1c 0404 	adds.w	r4, ip, r4
 8000628:	f101 36ff 	add.w	r6, r1, #4294967295
 800062c:	d213      	bcs.n	8000656 <__udivmoddi4+0x296>
 800062e:	42a3      	cmp	r3, r4
 8000630:	d911      	bls.n	8000656 <__udivmoddi4+0x296>
 8000632:	3902      	subs	r1, #2
 8000634:	4464      	add	r4, ip
 8000636:	1ae4      	subs	r4, r4, r3
 8000638:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800063c:	e739      	b.n	80004b2 <__udivmoddi4+0xf2>
 800063e:	4604      	mov	r4, r0
 8000640:	e6f0      	b.n	8000424 <__udivmoddi4+0x64>
 8000642:	4608      	mov	r0, r1
 8000644:	e706      	b.n	8000454 <__udivmoddi4+0x94>
 8000646:	45c8      	cmp	r8, r9
 8000648:	d2ae      	bcs.n	80005a8 <__udivmoddi4+0x1e8>
 800064a:	ebb9 0e02 	subs.w	lr, r9, r2
 800064e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000652:	3801      	subs	r0, #1
 8000654:	e7a8      	b.n	80005a8 <__udivmoddi4+0x1e8>
 8000656:	4631      	mov	r1, r6
 8000658:	e7ed      	b.n	8000636 <__udivmoddi4+0x276>
 800065a:	4603      	mov	r3, r0
 800065c:	e799      	b.n	8000592 <__udivmoddi4+0x1d2>
 800065e:	4630      	mov	r0, r6
 8000660:	e7d4      	b.n	800060c <__udivmoddi4+0x24c>
 8000662:	46d6      	mov	lr, sl
 8000664:	e77f      	b.n	8000566 <__udivmoddi4+0x1a6>
 8000666:	4463      	add	r3, ip
 8000668:	3802      	subs	r0, #2
 800066a:	e74d      	b.n	8000508 <__udivmoddi4+0x148>
 800066c:	4606      	mov	r6, r0
 800066e:	4623      	mov	r3, r4
 8000670:	4608      	mov	r0, r1
 8000672:	e70f      	b.n	8000494 <__udivmoddi4+0xd4>
 8000674:	3e02      	subs	r6, #2
 8000676:	4463      	add	r3, ip
 8000678:	e730      	b.n	80004dc <__udivmoddi4+0x11c>
 800067a:	bf00      	nop

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000684:	4b3d      	ldr	r3, [pc, #244]	@ (800077c <SystemInit+0xfc>)
 8000686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800068a:	4a3c      	ldr	r2, [pc, #240]	@ (800077c <SystemInit+0xfc>)
 800068c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000690:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000694:	4b39      	ldr	r3, [pc, #228]	@ (800077c <SystemInit+0xfc>)
 8000696:	691b      	ldr	r3, [r3, #16]
 8000698:	4a38      	ldr	r2, [pc, #224]	@ (800077c <SystemInit+0xfc>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a0:	4b37      	ldr	r3, [pc, #220]	@ (8000780 <SystemInit+0x100>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	2b06      	cmp	r3, #6
 80006aa:	d807      	bhi.n	80006bc <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ac:	4b34      	ldr	r3, [pc, #208]	@ (8000780 <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f023 030f 	bic.w	r3, r3, #15
 80006b4:	4a32      	ldr	r2, [pc, #200]	@ (8000780 <SystemInit+0x100>)
 80006b6:	f043 0307 	orr.w	r3, r3, #7
 80006ba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006bc:	4b31      	ldr	r3, [pc, #196]	@ (8000784 <SystemInit+0x104>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a30      	ldr	r2, [pc, #192]	@ (8000784 <SystemInit+0x104>)
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000784 <SystemInit+0x104>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006ce:	4b2d      	ldr	r3, [pc, #180]	@ (8000784 <SystemInit+0x104>)
 80006d0:	681a      	ldr	r2, [r3, #0]
 80006d2:	492c      	ldr	r1, [pc, #176]	@ (8000784 <SystemInit+0x104>)
 80006d4:	4b2c      	ldr	r3, [pc, #176]	@ (8000788 <SystemInit+0x108>)
 80006d6:	4013      	ands	r3, r2
 80006d8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006da:	4b29      	ldr	r3, [pc, #164]	@ (8000780 <SystemInit+0x100>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	f003 0308 	and.w	r3, r3, #8
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d007      	beq.n	80006f6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006e6:	4b26      	ldr	r3, [pc, #152]	@ (8000780 <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f023 030f 	bic.w	r3, r3, #15
 80006ee:	4a24      	ldr	r2, [pc, #144]	@ (8000780 <SystemInit+0x100>)
 80006f0:	f043 0307 	orr.w	r3, r3, #7
 80006f4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006f6:	4b23      	ldr	r3, [pc, #140]	@ (8000784 <SystemInit+0x104>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006fc:	4b21      	ldr	r3, [pc, #132]	@ (8000784 <SystemInit+0x104>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000702:	4b20      	ldr	r3, [pc, #128]	@ (8000784 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000708:	4b1e      	ldr	r3, [pc, #120]	@ (8000784 <SystemInit+0x104>)
 800070a:	4a20      	ldr	r2, [pc, #128]	@ (800078c <SystemInit+0x10c>)
 800070c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800070e:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemInit+0x104>)
 8000710:	4a1f      	ldr	r2, [pc, #124]	@ (8000790 <SystemInit+0x110>)
 8000712:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000714:	4b1b      	ldr	r3, [pc, #108]	@ (8000784 <SystemInit+0x104>)
 8000716:	4a1f      	ldr	r2, [pc, #124]	@ (8000794 <SystemInit+0x114>)
 8000718:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800071a:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemInit+0x104>)
 800071c:	2200      	movs	r2, #0
 800071e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000720:	4b18      	ldr	r3, [pc, #96]	@ (8000784 <SystemInit+0x104>)
 8000722:	4a1c      	ldr	r2, [pc, #112]	@ (8000794 <SystemInit+0x114>)
 8000724:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000726:	4b17      	ldr	r3, [pc, #92]	@ (8000784 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800072c:	4b15      	ldr	r3, [pc, #84]	@ (8000784 <SystemInit+0x104>)
 800072e:	4a19      	ldr	r2, [pc, #100]	@ (8000794 <SystemInit+0x114>)
 8000730:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000732:	4b14      	ldr	r3, [pc, #80]	@ (8000784 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000738:	4b12      	ldr	r3, [pc, #72]	@ (8000784 <SystemInit+0x104>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4a11      	ldr	r2, [pc, #68]	@ (8000784 <SystemInit+0x104>)
 800073e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000742:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000744:	4b0f      	ldr	r3, [pc, #60]	@ (8000784 <SystemInit+0x104>)
 8000746:	2200      	movs	r2, #0
 8000748:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800074a:	4b13      	ldr	r3, [pc, #76]	@ (8000798 <SystemInit+0x118>)
 800074c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800074e:	4a12      	ldr	r2, [pc, #72]	@ (8000798 <SystemInit+0x118>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000754:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000756:	4b11      	ldr	r3, [pc, #68]	@ (800079c <SystemInit+0x11c>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b11      	ldr	r3, [pc, #68]	@ (80007a0 <SystemInit+0x120>)
 800075c:	4013      	ands	r3, r2
 800075e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000762:	d202      	bcs.n	800076a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000764:	4b0f      	ldr	r3, [pc, #60]	@ (80007a4 <SystemInit+0x124>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800076a:	4b0f      	ldr	r3, [pc, #60]	@ (80007a8 <SystemInit+0x128>)
 800076c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000770:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00
 8000780:	52002000 	.word	0x52002000
 8000784:	58024400 	.word	0x58024400
 8000788:	eaf6ed7f 	.word	0xeaf6ed7f
 800078c:	02020200 	.word	0x02020200
 8000790:	01ff0000 	.word	0x01ff0000
 8000794:	01010280 	.word	0x01010280
 8000798:	580000c0 	.word	0x580000c0
 800079c:	5c001000 	.word	0x5c001000
 80007a0:	ffff0000 	.word	0xffff0000
 80007a4:	51008108 	.word	0x51008108
 80007a8:	52004000 	.word	0x52004000

080007ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007b2:	4b19      	ldr	r3, [pc, #100]	@ (8000818 <MX_DMA_Init+0x6c>)
 80007b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007b8:	4a17      	ldr	r2, [pc, #92]	@ (8000818 <MX_DMA_Init+0x6c>)
 80007ba:	f043 0301 	orr.w	r3, r3, #1
 80007be:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80007c2:	4b15      	ldr	r3, [pc, #84]	@ (8000818 <MX_DMA_Init+0x6c>)
 80007c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80007c8:	f003 0301 	and.w	r3, r3, #1
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2100      	movs	r1, #0
 80007d4:	200c      	movs	r0, #12
 80007d6:	f001 fcb4 	bl	8002142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80007da:	200c      	movs	r0, #12
 80007dc:	f001 fccb 	bl	8002176 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2100      	movs	r1, #0
 80007e4:	200e      	movs	r0, #14
 80007e6:	f001 fcac 	bl	8002142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80007ea:	200e      	movs	r0, #14
 80007ec:	f001 fcc3 	bl	8002176 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2100      	movs	r1, #0
 80007f4:	200f      	movs	r0, #15
 80007f6:	f001 fca4 	bl	8002142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80007fa:	200f      	movs	r0, #15
 80007fc:	f001 fcbb 	bl	8002176 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000800:	2200      	movs	r2, #0
 8000802:	2100      	movs	r1, #0
 8000804:	2010      	movs	r0, #16
 8000806:	f001 fc9c 	bl	8002142 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800080a:	2010      	movs	r0, #16
 800080c:	f001 fcb3 	bl	8002176 <HAL_NVIC_EnableIRQ>

}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	58024400 	.word	0x58024400

0800081c <dshot_init>:
static void dshot_enable_dma_request();


/* Functions */
void dshot_init(dshot_type_e dshot_type)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	4603      	mov	r3, r0
 8000824:	71fb      	strb	r3, [r7, #7]
	dshot_set_timer(dshot_type);
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	4618      	mov	r0, r3
 800082a:	f000 f833 	bl	8000894 <dshot_set_timer>
	dshot_put_tc_callback_function();
 800082e:	f000 f8d3 	bl	80009d8 <dshot_put_tc_callback_function>
	dshot_start_pwm();
 8000832:	f000 f8ef 	bl	8000a14 <dshot_start_pwm>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <dshot_write>:

void dshot_write(uint16_t* motor_value)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer_all(motor_value);
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f000 f962 	bl	8000b10 <dshot_prepare_dmabuffer_all>
	dshot_dma_start();
 800084c:	f000 f98c 	bl	8000b68 <dshot_dma_start>
	dshot_enable_dma_request();
 8000850:	f000 f9c2 	bl	8000bd8 <dshot_enable_dma_request>
}
 8000854:	bf00      	nop
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <dshot_choose_type>:


/* Static functions */
static uint32_t dshot_choose_type(dshot_type_e dshot_type)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	4603      	mov	r3, r0
 8000864:	71fb      	strb	r3, [r7, #7]
	switch (dshot_type)
 8000866:	79fb      	ldrb	r3, [r7, #7]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d003      	beq.n	8000874 <dshot_choose_type+0x18>
 800086c:	2b02      	cmp	r3, #2
 800086e:	d103      	bne.n	8000878 <dshot_choose_type+0x1c>
	{
		case(DSHOT600):
				return DSHOT600_HZ;
 8000870:	4b05      	ldr	r3, [pc, #20]	@ (8000888 <dshot_choose_type+0x2c>)
 8000872:	e002      	b.n	800087a <dshot_choose_type+0x1e>

		case(DSHOT300):
				return DSHOT300_HZ;
 8000874:	4b05      	ldr	r3, [pc, #20]	@ (800088c <dshot_choose_type+0x30>)
 8000876:	e000      	b.n	800087a <dshot_choose_type+0x1e>

		default:
		case(DSHOT150):
				return DSHOT150_HZ;
 8000878:	4b05      	ldr	r3, [pc, #20]	@ (8000890 <dshot_choose_type+0x34>)
	}
}
 800087a:	4618      	mov	r0, r3
 800087c:	370c      	adds	r7, #12
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	00b71b00 	.word	0x00b71b00
 800088c:	005b8d80 	.word	0x005b8d80
 8000890:	002dc6c0 	.word	0x002dc6c0

08000894 <dshot_set_timer>:

static void dshot_set_timer(dshot_type_e dshot_type)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	ed2d 8b02 	vpush	{d8}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	71fb      	strb	r3, [r7, #7]
	uint16_t dshot_prescaler;
	uint32_t timer_clock = TIMER_CLOCK; // all timer clock is same as SystemCoreClock in stm32f411
 80008a2:	4b27      	ldr	r3, [pc, #156]	@ (8000940 <dshot_set_timer+0xac>)
 80008a4:	60fb      	str	r3, [r7, #12]

	// Calculate prescaler by dshot type
	dshot_prescaler = lrintf((float) timer_clock / dshot_choose_type(dshot_type) + 0.01f) - 1;
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	ee07 3a90 	vmov	s15, r3
 80008ac:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 80008b0:	79fb      	ldrb	r3, [r7, #7]
 80008b2:	4618      	mov	r0, r3
 80008b4:	f7ff ffd2 	bl	800085c <dshot_choose_type>
 80008b8:	ee07 0a90 	vmov	s15, r0
 80008bc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80008c0:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80008c4:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000944 <dshot_set_timer+0xb0>
 80008c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80008cc:	eeb0 0a67 	vmov.f32	s0, s15
 80008d0:	f011 fb70 	bl	8011fb4 <lrintf>
 80008d4:	4603      	mov	r3, r0
 80008d6:	b29b      	uxth	r3, r3
 80008d8:	3b01      	subs	r3, #1
 80008da:	817b      	strh	r3, [r7, #10]

	// motor1
	__HAL_TIM_SET_PRESCALER(MOTOR_1_TIM, dshot_prescaler);
 80008dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000948 <dshot_set_timer+0xb4>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	897a      	ldrh	r2, [r7, #10]
 80008e2:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_1_TIM, MOTOR_BITLENGTH);
 80008e4:	4b18      	ldr	r3, [pc, #96]	@ (8000948 <dshot_set_timer+0xb4>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2214      	movs	r2, #20
 80008ea:	62da      	str	r2, [r3, #44]	@ 0x2c
 80008ec:	4b16      	ldr	r3, [pc, #88]	@ (8000948 <dshot_set_timer+0xb4>)
 80008ee:	2214      	movs	r2, #20
 80008f0:	60da      	str	r2, [r3, #12]

	// motor2
	__HAL_TIM_SET_PRESCALER(MOTOR_2_TIM, dshot_prescaler);
 80008f2:	4b16      	ldr	r3, [pc, #88]	@ (800094c <dshot_set_timer+0xb8>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	897a      	ldrh	r2, [r7, #10]
 80008f8:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_2_TIM, MOTOR_BITLENGTH);
 80008fa:	4b14      	ldr	r3, [pc, #80]	@ (800094c <dshot_set_timer+0xb8>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	2214      	movs	r2, #20
 8000900:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000902:	4b12      	ldr	r3, [pc, #72]	@ (800094c <dshot_set_timer+0xb8>)
 8000904:	2214      	movs	r2, #20
 8000906:	60da      	str	r2, [r3, #12]

	// motor3
	__HAL_TIM_SET_PRESCALER(MOTOR_3_TIM, dshot_prescaler);
 8000908:	4b10      	ldr	r3, [pc, #64]	@ (800094c <dshot_set_timer+0xb8>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	897a      	ldrh	r2, [r7, #10]
 800090e:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_3_TIM, MOTOR_BITLENGTH);
 8000910:	4b0e      	ldr	r3, [pc, #56]	@ (800094c <dshot_set_timer+0xb8>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2214      	movs	r2, #20
 8000916:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000918:	4b0c      	ldr	r3, [pc, #48]	@ (800094c <dshot_set_timer+0xb8>)
 800091a:	2214      	movs	r2, #20
 800091c:	60da      	str	r2, [r3, #12]

	// motor4
	__HAL_TIM_SET_PRESCALER(MOTOR_4_TIM, dshot_prescaler);
 800091e:	4b0a      	ldr	r3, [pc, #40]	@ (8000948 <dshot_set_timer+0xb4>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	897a      	ldrh	r2, [r7, #10]
 8000924:	629a      	str	r2, [r3, #40]	@ 0x28
	__HAL_TIM_SET_AUTORELOAD(MOTOR_4_TIM, MOTOR_BITLENGTH);
 8000926:	4b08      	ldr	r3, [pc, #32]	@ (8000948 <dshot_set_timer+0xb4>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2214      	movs	r2, #20
 800092c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800092e:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <dshot_set_timer+0xb4>)
 8000930:	2214      	movs	r2, #20
 8000932:	60da      	str	r2, [r3, #12]
}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	ecbd 8b02 	vpop	{d8}
 800093e:	bd80      	pop	{r7, pc}
 8000940:	05f5e100 	.word	0x05f5e100
 8000944:	3c23d70a 	.word	0x3c23d70a
 8000948:	24000534 	.word	0x24000534
 800094c:	24000450 	.word	0x24000450

08000950 <dshot_dma_tc_callback>:

// __HAL_TIM_DISABLE_DMA is needed to eliminate the delay between different dshot signals
// I don't know why :(
static void dshot_dma_tc_callback(DMA_HandleTypeDef *hdma)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
	TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800095c:	60fb      	str	r3, [r7, #12]

	if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000962:	687a      	ldr	r2, [r7, #4]
 8000964:	429a      	cmp	r2, r3
 8000966:	d108      	bne.n	800097a <dshot_dma_tc_callback+0x2a>
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	68da      	ldr	r2, [r3, #12]
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000976:	60da      	str	r2, [r3, #12]
	}
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
	{
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
	}
}
 8000978:	e028      	b.n	80009cc <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC2])
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	429a      	cmp	r2, r3
 8000982:	d108      	bne.n	8000996 <dshot_dma_tc_callback+0x46>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	68da      	ldr	r2, [r3, #12]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000992:	60da      	str	r2, [r3, #12]
}
 8000994:	e01a      	b.n	80009cc <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC3])
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	429a      	cmp	r2, r3
 800099e:	d108      	bne.n	80009b2 <dshot_dma_tc_callback+0x62>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	68da      	ldr	r2, [r3, #12]
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80009ae:	60da      	str	r2, [r3, #12]
}
 80009b0:	e00c      	b.n	80009cc <dshot_dma_tc_callback+0x7c>
	else if(hdma == htim->hdma[TIM_DMA_ID_CC4])
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d107      	bne.n	80009cc <dshot_dma_tc_callback+0x7c>
		__HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	68da      	ldr	r2, [r3, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80009ca:	60da      	str	r2, [r3, #12]
}
 80009cc:	bf00      	nop
 80009ce:	3714      	adds	r7, #20
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr

080009d8 <dshot_put_tc_callback_function>:

static void dshot_put_tc_callback_function()
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
	// TIM_DMA_ID_CCx depends on timer channel
	MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = dshot_dma_tc_callback;
 80009dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000a08 <dshot_put_tc_callback_function+0x30>)
 80009de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e0:	4a0a      	ldr	r2, [pc, #40]	@ (8000a0c <dshot_put_tc_callback_function+0x34>)
 80009e2:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = dshot_dma_tc_callback;
 80009e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000a10 <dshot_put_tc_callback_function+0x38>)
 80009e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009e8:	4a08      	ldr	r2, [pc, #32]	@ (8000a0c <dshot_put_tc_callback_function+0x34>)
 80009ea:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = dshot_dma_tc_callback;
 80009ec:	4b08      	ldr	r3, [pc, #32]	@ (8000a10 <dshot_put_tc_callback_function+0x38>)
 80009ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009f0:	4a06      	ldr	r2, [pc, #24]	@ (8000a0c <dshot_put_tc_callback_function+0x34>)
 80009f2:	63da      	str	r2, [r3, #60]	@ 0x3c
	MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = dshot_dma_tc_callback;
 80009f4:	4b04      	ldr	r3, [pc, #16]	@ (8000a08 <dshot_put_tc_callback_function+0x30>)
 80009f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80009f8:	4a04      	ldr	r2, [pc, #16]	@ (8000a0c <dshot_put_tc_callback_function+0x34>)
 80009fa:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	24000534 	.word	0x24000534
 8000a0c:	08000951 	.word	0x08000951
 8000a10:	24000450 	.word	0x24000450

08000a14 <dshot_start_pwm>:

static void dshot_start_pwm()
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	// Start the timer channel now.
    // Enabling/disabling DMA request can restart a new cycle without PWM start/stop.
  	HAL_TIM_PWM_Start(MOTOR_1_TIM, MOTOR_1_TIM_CHANNEL);
 8000a18:	210c      	movs	r1, #12
 8000a1a:	4808      	ldr	r0, [pc, #32]	@ (8000a3c <dshot_start_pwm+0x28>)
 8000a1c:	f008 f976 	bl	8008d0c <HAL_TIM_PWM_Start>
  	HAL_TIM_PWM_Start(MOTOR_2_TIM, MOTOR_2_TIM_CHANNEL);
 8000a20:	2108      	movs	r1, #8
 8000a22:	4807      	ldr	r0, [pc, #28]	@ (8000a40 <dshot_start_pwm+0x2c>)
 8000a24:	f008 f972 	bl	8008d0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_3_TIM, MOTOR_3_TIM_CHANNEL);
 8000a28:	2100      	movs	r1, #0
 8000a2a:	4805      	ldr	r0, [pc, #20]	@ (8000a40 <dshot_start_pwm+0x2c>)
 8000a2c:	f008 f96e 	bl	8008d0c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(MOTOR_4_TIM, MOTOR_4_TIM_CHANNEL);
 8000a30:	2104      	movs	r1, #4
 8000a32:	4802      	ldr	r0, [pc, #8]	@ (8000a3c <dshot_start_pwm+0x28>)
 8000a34:	f008 f96a 	bl	8008d0c <HAL_TIM_PWM_Start>
}
 8000a38:	bf00      	nop
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	24000534 	.word	0x24000534
 8000a40:	24000450 	.word	0x24000450

08000a44 <dshot_prepare_packet>:

static uint16_t dshot_prepare_packet(uint16_t value)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b087      	sub	sp, #28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	80fb      	strh	r3, [r7, #6]
	uint16_t packet;
	bool dshot_telemetry = false;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	72fb      	strb	r3, [r7, #11]

	packet = (value << 1) | (dshot_telemetry ? 1 : 0);
 8000a52:	88fb      	ldrh	r3, [r7, #6]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	b21a      	sxth	r2, r3
 8000a58:	7afb      	ldrb	r3, [r7, #11]
 8000a5a:	b21b      	sxth	r3, r3
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	b21b      	sxth	r3, r3
 8000a60:	813b      	strh	r3, [r7, #8]

	// compute checksum
	unsigned csum = 0;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
	unsigned csum_data = packet;
 8000a66:	893b      	ldrh	r3, [r7, #8]
 8000a68:	613b      	str	r3, [r7, #16]

	for(int i = 0; i < 3; i++)
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60fb      	str	r3, [r7, #12]
 8000a6e:	e009      	b.n	8000a84 <dshot_prepare_packet+0x40>
	{
        csum ^=  csum_data; // xor data by nibbles
 8000a70:	697a      	ldr	r2, [r7, #20]
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	4053      	eors	r3, r2
 8000a76:	617b      	str	r3, [r7, #20]
        csum_data >>= 4;
 8000a78:	693b      	ldr	r3, [r7, #16]
 8000a7a:	091b      	lsrs	r3, r3, #4
 8000a7c:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < 3; i++)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	3301      	adds	r3, #1
 8000a82:	60fb      	str	r3, [r7, #12]
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	ddf2      	ble.n	8000a70 <dshot_prepare_packet+0x2c>
	}

	csum &= 0xf;
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	617b      	str	r3, [r7, #20]
	packet = (packet << 4) | csum;
 8000a92:	893b      	ldrh	r3, [r7, #8]
 8000a94:	011b      	lsls	r3, r3, #4
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	697b      	ldr	r3, [r7, #20]
 8000a9a:	b29b      	uxth	r3, r3
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	813b      	strh	r3, [r7, #8]

	return packet;
 8000aa0:	893b      	ldrh	r3, [r7, #8]
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	371c      	adds	r7, #28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <dshot_prepare_dmabuffer>:

// Convert 16 bits packet to 16 pwm signal
static void dshot_prepare_dmabuffer(uint32_t* motor_dmabuffer, uint16_t value)
{
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b084      	sub	sp, #16
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
 8000ab6:	460b      	mov	r3, r1
 8000ab8:	807b      	strh	r3, [r7, #2]
	uint16_t packet;
	packet = dshot_prepare_packet(value);
 8000aba:	887b      	ldrh	r3, [r7, #2]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff ffc1 	bl	8000a44 <dshot_prepare_packet>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	81fb      	strh	r3, [r7, #14]

	for(int i = 0; i < 16; i++)
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	60bb      	str	r3, [r7, #8]
 8000aca:	e011      	b.n	8000af0 <dshot_prepare_dmabuffer+0x42>
	{
		motor_dmabuffer[i] = (packet & 0x8000) ? MOTOR_BIT_1 : MOTOR_BIT_0;
 8000acc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	da01      	bge.n	8000ad8 <dshot_prepare_dmabuffer+0x2a>
 8000ad4:	220e      	movs	r2, #14
 8000ad6:	e000      	b.n	8000ada <dshot_prepare_dmabuffer+0x2c>
 8000ad8:	2207      	movs	r2, #7
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	009b      	lsls	r3, r3, #2
 8000ade:	6879      	ldr	r1, [r7, #4]
 8000ae0:	440b      	add	r3, r1
 8000ae2:	601a      	str	r2, [r3, #0]
		packet <<= 1;
 8000ae4:	89fb      	ldrh	r3, [r7, #14]
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	81fb      	strh	r3, [r7, #14]
	for(int i = 0; i < 16; i++)
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	3301      	adds	r3, #1
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	2b0f      	cmp	r3, #15
 8000af4:	ddea      	ble.n	8000acc <dshot_prepare_dmabuffer+0x1e>
	}

	motor_dmabuffer[16] = 0;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	3340      	adds	r3, #64	@ 0x40
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
	motor_dmabuffer[17] = 0;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	3344      	adds	r3, #68	@ 0x44
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
}
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <dshot_prepare_dmabuffer_all>:

static void dshot_prepare_dmabuffer_all(uint16_t* motor_value)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	dshot_prepare_dmabuffer(motor1_dmabuffer, motor_value[0]);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	881b      	ldrh	r3, [r3, #0]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	480e      	ldr	r0, [pc, #56]	@ (8000b58 <dshot_prepare_dmabuffer_all+0x48>)
 8000b20:	f7ff ffc5 	bl	8000aae <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor2_dmabuffer, motor_value[1]);
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3302      	adds	r3, #2
 8000b28:	881b      	ldrh	r3, [r3, #0]
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	480b      	ldr	r0, [pc, #44]	@ (8000b5c <dshot_prepare_dmabuffer_all+0x4c>)
 8000b2e:	f7ff ffbe 	bl	8000aae <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor3_dmabuffer, motor_value[2]);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	3304      	adds	r3, #4
 8000b36:	881b      	ldrh	r3, [r3, #0]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4809      	ldr	r0, [pc, #36]	@ (8000b60 <dshot_prepare_dmabuffer_all+0x50>)
 8000b3c:	f7ff ffb7 	bl	8000aae <dshot_prepare_dmabuffer>
	dshot_prepare_dmabuffer(motor4_dmabuffer, motor_value[3]);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3306      	adds	r3, #6
 8000b44:	881b      	ldrh	r3, [r3, #0]
 8000b46:	4619      	mov	r1, r3
 8000b48:	4806      	ldr	r0, [pc, #24]	@ (8000b64 <dshot_prepare_dmabuffer_all+0x54>)
 8000b4a:	f7ff ffb0 	bl	8000aae <dshot_prepare_dmabuffer>
}
 8000b4e:	bf00      	nop
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	24000308 	.word	0x24000308
 8000b5c:	24000350 	.word	0x24000350
 8000b60:	24000398 	.word	0x24000398
 8000b64:	240003e0 	.word	0x240003e0

08000b68 <dshot_dma_start>:

static void dshot_dma_start()
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	HAL_DMA_Start_IT(MOTOR_1_TIM->hdma[TIM_DMA_ID_CC4], (uint32_t)motor1_dmabuffer, (uint32_t)&MOTOR_1_TIM->Instance->CCR4, DSHOT_DMA_BUFFER_SIZE);
 8000b6c:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <dshot_dma_start+0x58>)
 8000b6e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000b70:	4914      	ldr	r1, [pc, #80]	@ (8000bc4 <dshot_dma_start+0x5c>)
 8000b72:	4b13      	ldr	r3, [pc, #76]	@ (8000bc0 <dshot_dma_start+0x58>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	3340      	adds	r3, #64	@ 0x40
 8000b78:	461a      	mov	r2, r3
 8000b7a:	2312      	movs	r3, #18
 8000b7c:	f001 fe86 	bl	800288c <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_2_TIM->hdma[TIM_DMA_ID_CC3], (uint32_t)motor2_dmabuffer, (uint32_t)&MOTOR_2_TIM->Instance->CCR3, DSHOT_DMA_BUFFER_SIZE);
 8000b80:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <dshot_dma_start+0x60>)
 8000b82:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8000b84:	4911      	ldr	r1, [pc, #68]	@ (8000bcc <dshot_dma_start+0x64>)
 8000b86:	4b10      	ldr	r3, [pc, #64]	@ (8000bc8 <dshot_dma_start+0x60>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	333c      	adds	r3, #60	@ 0x3c
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	2312      	movs	r3, #18
 8000b90:	f001 fe7c 	bl	800288c <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_3_TIM->hdma[TIM_DMA_ID_CC1], (uint32_t)motor3_dmabuffer, (uint32_t)&MOTOR_3_TIM->Instance->CCR1, DSHOT_DMA_BUFFER_SIZE);
 8000b94:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc8 <dshot_dma_start+0x60>)
 8000b96:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8000b98:	490d      	ldr	r1, [pc, #52]	@ (8000bd0 <dshot_dma_start+0x68>)
 8000b9a:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc8 <dshot_dma_start+0x60>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	3334      	adds	r3, #52	@ 0x34
 8000ba0:	461a      	mov	r2, r3
 8000ba2:	2312      	movs	r3, #18
 8000ba4:	f001 fe72 	bl	800288c <HAL_DMA_Start_IT>
	HAL_DMA_Start_IT(MOTOR_4_TIM->hdma[TIM_DMA_ID_CC2], (uint32_t)motor4_dmabuffer, (uint32_t)&MOTOR_4_TIM->Instance->CCR2, DSHOT_DMA_BUFFER_SIZE);
 8000ba8:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <dshot_dma_start+0x58>)
 8000baa:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000bac:	4909      	ldr	r1, [pc, #36]	@ (8000bd4 <dshot_dma_start+0x6c>)
 8000bae:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <dshot_dma_start+0x58>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	3338      	adds	r3, #56	@ 0x38
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	2312      	movs	r3, #18
 8000bb8:	f001 fe68 	bl	800288c <HAL_DMA_Start_IT>
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	24000534 	.word	0x24000534
 8000bc4:	24000308 	.word	0x24000308
 8000bc8:	24000450 	.word	0x24000450
 8000bcc:	24000350 	.word	0x24000350
 8000bd0:	24000398 	.word	0x24000398
 8000bd4:	240003e0 	.word	0x240003e0

08000bd8 <dshot_enable_dma_request>:

static void dshot_enable_dma_request()
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
	__HAL_TIM_ENABLE_DMA(MOTOR_1_TIM, TIM_DMA_CC4);
 8000bdc:	4b12      	ldr	r3, [pc, #72]	@ (8000c28 <dshot_enable_dma_request+0x50>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	68da      	ldr	r2, [r3, #12]
 8000be2:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <dshot_enable_dma_request+0x50>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8000bea:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_2_TIM, TIM_DMA_CC3);
 8000bec:	4b0f      	ldr	r3, [pc, #60]	@ (8000c2c <dshot_enable_dma_request+0x54>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	68da      	ldr	r2, [r3, #12]
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	@ (8000c2c <dshot_enable_dma_request+0x54>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8000bfa:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_3_TIM, TIM_DMA_CC1);
 8000bfc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c2c <dshot_enable_dma_request+0x54>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	68da      	ldr	r2, [r3, #12]
 8000c02:	4b0a      	ldr	r3, [pc, #40]	@ (8000c2c <dshot_enable_dma_request+0x54>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000c0a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(MOTOR_4_TIM, TIM_DMA_CC2);
 8000c0c:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <dshot_enable_dma_request+0x50>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	68da      	ldr	r2, [r3, #12]
 8000c12:	4b05      	ldr	r3, [pc, #20]	@ (8000c28 <dshot_enable_dma_request+0x50>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000c1a:	60da      	str	r2, [r3, #12]
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	24000534 	.word	0x24000534
 8000c2c:	24000450 	.word	0x24000450

08000c30 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	@ 0x28
 8000c34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c36:	f107 0314 	add.w	r3, r7, #20
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
 8000c44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c46:	4b48      	ldr	r3, [pc, #288]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c4c:	4a46      	ldr	r2, [pc, #280]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000c4e:	f043 0304 	orr.w	r3, r3, #4
 8000c52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c56:	4b44      	ldr	r3, [pc, #272]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c64:	4b40      	ldr	r3, [pc, #256]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6a:	4a3f      	ldr	r2, [pc, #252]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c74:	4b3c      	ldr	r3, [pc, #240]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c82:	4b39      	ldr	r3, [pc, #228]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c88:	4a37      	ldr	r2, [pc, #220]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000c8a:	f043 0302 	orr.w	r3, r3, #2
 8000c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c92:	4b35      	ldr	r3, [pc, #212]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c98:	f003 0302 	and.w	r3, r3, #2
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ca0:	4b31      	ldr	r3, [pc, #196]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca6:	4a30      	ldr	r2, [pc, #192]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000ca8:	f043 0308 	orr.w	r3, r3, #8
 8000cac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cb0:	4b2d      	ldr	r3, [pc, #180]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb6:	f003 0308 	and.w	r3, r3, #8
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cbe:	4b2a      	ldr	r3, [pc, #168]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc4:	4a28      	ldr	r2, [pc, #160]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000cc6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cce:	4b26      	ldr	r3, [pc, #152]	@ (8000d68 <MX_GPIO_Init+0x138>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cd8:	603b      	str	r3, [r7, #0]
 8000cda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000cdc:	2332      	movs	r3, #50	@ 0x32
 8000cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cec:	230b      	movs	r3, #11
 8000cee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	481d      	ldr	r0, [pc, #116]	@ (8000d6c <MX_GPIO_Init+0x13c>)
 8000cf8:	f003 fbb4 	bl	8004464 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cfc:	2380      	movs	r3, #128	@ 0x80
 8000cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d00:	2302      	movs	r3, #2
 8000d02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d0c:	230b      	movs	r3, #11
 8000d0e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	4619      	mov	r1, r3
 8000d16:	4816      	ldr	r0, [pc, #88]	@ (8000d70 <MX_GPIO_Init+0x140>)
 8000d18:	f003 fba4 	bl	8004464 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d22:	2302      	movs	r3, #2
 8000d24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d2e:	230b      	movs	r3, #11
 8000d30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d32:	f107 0314 	add.w	r3, r7, #20
 8000d36:	4619      	mov	r1, r3
 8000d38:	480e      	ldr	r0, [pc, #56]	@ (8000d74 <MX_GPIO_Init+0x144>)
 8000d3a:	f003 fb93 	bl	8004464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d3e:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000d42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d50:	230b      	movs	r3, #11
 8000d52:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4807      	ldr	r0, [pc, #28]	@ (8000d78 <MX_GPIO_Init+0x148>)
 8000d5c:	f003 fb82 	bl	8004464 <HAL_GPIO_Init>

}
 8000d60:	bf00      	nop
 8000d62:	3728      	adds	r7, #40	@ 0x28
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	58024400 	.word	0x58024400
 8000d6c:	58020800 	.word	0x58020800
 8000d70:	58020000 	.word	0x58020000
 8000d74:	58020400 	.word	0x58020400
 8000d78:	58021800 	.word	0x58021800

08000d7c <HAL_TIM_IC_CaptureCallback>:
		}
		xfr_ptr->sts_4to7 = 0; // M4 to M7 buffer is empty
	}
	return buffer; // return the buffer (pointer)
}
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	contador = __HAL_TIM_GET_COUNTER(&htim4);
 8000d84:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <HAL_TIM_IC_CaptureCallback+0x20>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d8a:	4a05      	ldr	r2, [pc, #20]	@ (8000da0 <HAL_TIM_IC_CaptureCallback+0x24>)
 8000d8c:	6013      	str	r3, [r2, #0]
}
 8000d8e:	bf00      	nop
 8000d90:	370c      	adds	r7, #12
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	240004e8 	.word	0x240004e8
 8000da0:	24000438 	.word	0x24000438

08000da4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08e      	sub	sp, #56	@ 0x38
 8000da8:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000daa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000dae:	637b      	str	r3, [r7, #52]	@ 0x34
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000db0:	bf00      	nop
 8000db2:	4b5f      	ldr	r3, [pc, #380]	@ (8000f30 <main+0x18c>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d004      	beq.n	8000dc8 <main+0x24>
 8000dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dc0:	1e5a      	subs	r2, r3, #1
 8000dc2:	637a      	str	r2, [r7, #52]	@ 0x34
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	dcf4      	bgt.n	8000db2 <main+0xe>
  if ( timeout < 0 )
 8000dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	da01      	bge.n	8000dd2 <main+0x2e>
  {
  Error_Handler();
 8000dce:	f000 f93f 	bl	8001050 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd2:	f001 f819 	bl	8001e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd6:	f000 f8bb 	bl	8000f50 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000dda:	4b55      	ldr	r3, [pc, #340]	@ (8000f30 <main+0x18c>)
 8000ddc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de0:	4a53      	ldr	r2, [pc, #332]	@ (8000f30 <main+0x18c>)
 8000de2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000de6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dea:	4b51      	ldr	r3, [pc, #324]	@ (8000f30 <main+0x18c>)
 8000dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f003 fd17 	bl	800482c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000dfe:	2100      	movs	r1, #0
 8000e00:	2000      	movs	r0, #0
 8000e02:	f003 fd2d 	bl	8004860 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000e06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000e0a:	637b      	str	r3, [r7, #52]	@ 0x34
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000e0c:	bf00      	nop
 8000e0e:	4b48      	ldr	r3, [pc, #288]	@ (8000f30 <main+0x18c>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d104      	bne.n	8000e24 <main+0x80>
 8000e1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e1c:	1e5a      	subs	r2, r3, #1
 8000e1e:	637a      	str	r2, [r7, #52]	@ 0x34
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	dcf4      	bgt.n	8000e0e <main+0x6a>
if ( timeout < 0 )
 8000e24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	da01      	bge.n	8000e2e <main+0x8a>
{
Error_Handler();
 8000e2a:	f000 f911 	bl	8001050 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2e:	f7ff feff 	bl	8000c30 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e32:	f7ff fcbb 	bl	80007ac <MX_DMA_Init>
  MX_TIM2_Init();
 8000e36:	f000 fa95 	bl	8001364 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000e3a:	f000 fb9b 	bl	8001574 <MX_TIM5_Init>
  MX_TIM3_Init();
 8000e3e:	f000 faf5 	bl	800142c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e42:	f000 fb41 	bl	80014c8 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8000e46:	f00d fdab 	bl	800e9a0 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  int count = 0;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_TIM_Encoder_Start_IT(&htim4, TIM_CHANNEL_ALL);
 8000e4e:	213c      	movs	r1, #60	@ 0x3c
 8000e50:	4838      	ldr	r0, [pc, #224]	@ (8000f34 <main+0x190>)
 8000e52:	f008 f90f 	bl	8009074 <HAL_TIM_Encoder_Start_IT>
	uint8_t * xfr_data; // pointer to transfer data


	//initialize inter-core status pointers
	xfr_ptr->sts_4to7 = 0;
 8000e56:	4b38      	ldr	r3, [pc, #224]	@ (8000f38 <main+0x194>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
	xfr_ptr->sts_7to4 = 0;
 8000e5c:	4b36      	ldr	r3, [pc, #216]	@ (8000f38 <main+0x194>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	705a      	strb	r2, [r3, #1]

	dshot_init(DSHOT150);
 8000e62:	2000      	movs	r0, #0
 8000e64:	f7ff fcda 	bl	800081c <dshot_init>
	  if (HAL_TIM_Base_Start_IT(&htim3) != HAL_OK)
 8000e68:	4834      	ldr	r0, [pc, #208]	@ (8000f3c <main+0x198>)
 8000e6a:	f007 fe7f 	bl	8008b6c <HAL_TIM_Base_Start_IT>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <main+0xd4>
	    {
	      /* Starting Error */
	      Error_Handler();
 8000e74:	f000 f8ec 	bl	8001050 <Error_Handler>
	    }
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000e78:	2000      	movs	r0, #0
 8000e7a:	f000 fde1 	bl	8001a40 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f000 fdde 	bl	8001a40 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000e84:	2002      	movs	r0, #2
 8000e86:	f000 fddb 	bl	8001a40 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000e8a:	2101      	movs	r1, #1
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	f000 fe4d 	bl	8001b2c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000e92:	4b2b      	ldr	r3, [pc, #172]	@ (8000f40 <main+0x19c>)
 8000e94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e98:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000e9a:	4b29      	ldr	r3, [pc, #164]	@ (8000f40 <main+0x19c>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000ea0:	4b27      	ldr	r3, [pc, #156]	@ (8000f40 <main+0x19c>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000ea6:	4b26      	ldr	r3, [pc, #152]	@ (8000f40 <main+0x19c>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000eac:	4b24      	ldr	r3, [pc, #144]	@ (8000f40 <main+0x19c>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000eb2:	4923      	ldr	r1, [pc, #140]	@ (8000f40 <main+0x19c>)
 8000eb4:	2000      	movs	r0, #0
 8000eb6:	f000 fec9 	bl	8001c4c <BSP_COM_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <main+0x120>
  {
    Error_Handler();
 8000ec0:	f000 f8c6 	bl	8001050 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char message[40]={'\0'};
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	60bb      	str	r3, [r7, #8]
 8000ec8:	f107 030c 	add.w	r3, r7, #12
 8000ecc:	2224      	movs	r2, #36	@ 0x24
 8000ece:	2100      	movs	r1, #0
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f00f f812 	bl	800fefa <memset>
	  	  for(int n=0;n<4;n++){
	  		  motores[n] = (Mensagem[n]*2048)/255;

	  	  }
	  	  */
	  	  if(count<2000){
 8000ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ed8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000edc:	da03      	bge.n	8000ee6 <main+0x142>
	  		  motores[0]=0;
 8000ede:	4b19      	ldr	r3, [pc, #100]	@ (8000f44 <main+0x1a0>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	801a      	strh	r2, [r3, #0]
 8000ee4:	e007      	b.n	8000ef6 <main+0x152>
	  	  }  else if(count>=2000){
 8000ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ee8:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000eec:	db03      	blt.n	8000ef6 <main+0x152>
	  		motores[0]=1000;
 8000eee:	4b15      	ldr	r3, [pc, #84]	@ (8000f44 <main+0x1a0>)
 8000ef0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000ef4:	801a      	strh	r2, [r3, #0]
	  	  }
	  	  count++;
 8000ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ef8:	3301      	adds	r3, #1
 8000efa:	633b      	str	r3, [r7, #48]	@ 0x30
	  	  dshot_write(motores);
 8000efc:	4811      	ldr	r0, [pc, #68]	@ (8000f44 <main+0x1a0>)
 8000efe:	f7ff fc9e 	bl	800083e <dshot_write>
	  	  sprintf(message, "velocidade : %f \n \r",velocidade);
 8000f02:	4b11      	ldr	r3, [pc, #68]	@ (8000f48 <main+0x1a4>)
 8000f04:	edd3 7a00 	vldr	s15, [r3]
 8000f08:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000f0c:	f107 0008 	add.w	r0, r7, #8
 8000f10:	ec53 2b17 	vmov	r2, r3, d7
 8000f14:	490d      	ldr	r1, [pc, #52]	@ (8000f4c <main+0x1a8>)
 8000f16:	f00e ff8d 	bl	800fe34 <siprintf>
	  	  CDC_Transmit_FS(message,sizeof(message));
 8000f1a:	f107 0308 	add.w	r3, r7, #8
 8000f1e:	2128      	movs	r1, #40	@ 0x28
 8000f20:	4618      	mov	r0, r3
 8000f22:	f00d fdfd 	bl	800eb20 <CDC_Transmit_FS>
	  	  HAL_Delay(1000);
 8000f26:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f2a:	f000 ffff 	bl	8001f2c <HAL_Delay>
  {
 8000f2e:	e7d2      	b.n	8000ed6 <main+0x132>
 8000f30:	58024400 	.word	0x58024400
 8000f34:	240004e8 	.word	0x240004e8
 8000f38:	38001000 	.word	0x38001000
 8000f3c:	2400049c 	.word	0x2400049c
 8000f40:	24000428 	.word	0x24000428
 8000f44:	2400043c 	.word	0x2400043c
 8000f48:	24000008 	.word	0x24000008
 8000f4c:	08012050 	.word	0x08012050

08000f50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b09c      	sub	sp, #112	@ 0x70
 8000f54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f5a:	224c      	movs	r2, #76	@ 0x4c
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f00e ffcb 	bl	800fefa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	2220      	movs	r2, #32
 8000f68:	2100      	movs	r1, #0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f00e ffc5 	bl	800fefa <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000f70:	2004      	movs	r0, #4
 8000f72:	f004 ff27 	bl	8005dc4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f76:	2300      	movs	r3, #0
 8000f78:	603b      	str	r3, [r7, #0]
 8000f7a:	4b33      	ldr	r3, [pc, #204]	@ (8001048 <SystemClock_Config+0xf8>)
 8000f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f7e:	4a32      	ldr	r2, [pc, #200]	@ (8001048 <SystemClock_Config+0xf8>)
 8000f80:	f023 0301 	bic.w	r3, r3, #1
 8000f84:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000f86:	4b30      	ldr	r3, [pc, #192]	@ (8001048 <SystemClock_Config+0xf8>)
 8000f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	4b2e      	ldr	r3, [pc, #184]	@ (800104c <SystemClock_Config+0xfc>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f98:	4a2c      	ldr	r2, [pc, #176]	@ (800104c <SystemClock_Config+0xfc>)
 8000f9a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f9e:	6193      	str	r3, [r2, #24]
 8000fa0:	4b2a      	ldr	r3, [pc, #168]	@ (800104c <SystemClock_Config+0xfc>)
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000fa8:	603b      	str	r3, [r7, #0]
 8000faa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fac:	bf00      	nop
 8000fae:	4b27      	ldr	r3, [pc, #156]	@ (800104c <SystemClock_Config+0xfc>)
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000fb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000fba:	d1f8      	bne.n	8000fae <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI;
 8000fbc:	2322      	movs	r3, #34	@ 0x22
 8000fbe:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fc4:	2340      	movs	r3, #64	@ 0x40
 8000fc6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 8000fd8:	2319      	movs	r3, #25
 8000fda:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000fe0:	2305      	movs	r3, #5
 8000fe2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000fe8:	230c      	movs	r3, #12
 8000fea:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000fec:	2300      	movs	r3, #0
 8000fee:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f004 ff4d 	bl	8005e98 <HAL_RCC_OscConfig>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001004:	f000 f824 	bl	8001050 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001008:	233f      	movs	r3, #63	@ 0x3f
 800100a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800100c:	2303      	movs	r3, #3
 800100e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001010:	2300      	movs	r3, #0
 8001012:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001018:	2340      	movs	r3, #64	@ 0x40
 800101a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800101c:	2340      	movs	r3, #64	@ 0x40
 800101e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001020:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001024:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001026:	2340      	movs	r3, #64	@ 0x40
 8001028:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2104      	movs	r1, #4
 800102e:	4618      	mov	r0, r3
 8001030:	f005 fb8c 	bl	800674c <HAL_RCC_ClockConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800103a:	f000 f809 	bl	8001050 <Error_Handler>
  }
}
 800103e:	bf00      	nop
 8001040:	3770      	adds	r7, #112	@ 0x70
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	58000400 	.word	0x58000400
 800104c:	58024800 	.word	0x58024800

08001050 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001054:	b672      	cpsid	i
}
 8001056:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <Error_Handler+0x8>

0800105c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001062:	4b0a      	ldr	r3, [pc, #40]	@ (800108c <HAL_MspInit+0x30>)
 8001064:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001068:	4a08      	ldr	r2, [pc, #32]	@ (800108c <HAL_MspInit+0x30>)
 800106a:	f043 0302 	orr.w	r3, r3, #2
 800106e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001072:	4b06      	ldr	r3, [pc, #24]	@ (800108c <HAL_MspInit+0x30>)
 8001074:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001078:	f003 0302 	and.w	r3, r3, #2
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	58024400 	.word	0x58024400

08001090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <NMI_Handler+0x4>

08001098 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800109c:	bf00      	nop
 800109e:	e7fd      	b.n	800109c <HardFault_Handler+0x4>

080010a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <MemManage_Handler+0x4>

080010a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ac:	bf00      	nop
 80010ae:	e7fd      	b.n	80010ac <BusFault_Handler+0x4>

080010b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010b4:	bf00      	nop
 80010b6:	e7fd      	b.n	80010b4 <UsageFault_Handler+0x4>

080010b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010e6:	f000 ff01 	bl	8001eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ea:	bf00      	nop
 80010ec:	bd80      	pop	{r7, pc}
	...

080010f0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch3);
 80010f4:	4802      	ldr	r0, [pc, #8]	@ (8001100 <DMA1_Stream1_IRQHandler+0x10>)
 80010f6:	f001 fe33 	bl	8002d60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80010fa:	bf00      	nop
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	240005f8 	.word	0x240005f8

08001104 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch4);
 8001108:	4802      	ldr	r0, [pc, #8]	@ (8001114 <DMA1_Stream3_IRQHandler+0x10>)
 800110a:	f001 fe29 	bl	8002d60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	240006e8 	.word	0x240006e8

08001118 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim5_ch2);
 800111c:	4802      	ldr	r0, [pc, #8]	@ (8001128 <DMA1_Stream4_IRQHandler+0x10>)
 800111e:	f001 fe1f 	bl	8002d60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	24000670 	.word	0x24000670

0800112c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8001130:	4802      	ldr	r0, [pc, #8]	@ (800113c <DMA1_Stream5_IRQHandler+0x10>)
 8001132:	f001 fe15 	bl	8002d60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	24000580 	.word	0x24000580

08001140 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001144:	4815      	ldr	r0, [pc, #84]	@ (800119c <TIM3_IRQHandler+0x5c>)
 8001146:	f008 f843 	bl	80091d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  Enc_1 = TIM4->CNT;
 800114a:	4b15      	ldr	r3, [pc, #84]	@ (80011a0 <TIM3_IRQHandler+0x60>)
 800114c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800114e:	4a15      	ldr	r2, [pc, #84]	@ (80011a4 <TIM3_IRQHandler+0x64>)
 8001150:	6013      	str	r3, [r2, #0]
  TIM4->CNT = 0;
 8001152:	4b13      	ldr	r3, [pc, #76]	@ (80011a0 <TIM3_IRQHandler+0x60>)
 8001154:	2200      	movs	r2, #0
 8001156:	625a      	str	r2, [r3, #36]	@ 0x24
  vel_1 = Enc_1;
 8001158:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <TIM3_IRQHandler+0x64>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	461a      	mov	r2, r3
 800115e:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <TIM3_IRQHandler+0x68>)
 8001160:	601a      	str	r2, [r3, #0]
  if(vel_1>60000){
 8001162:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <TIM3_IRQHandler+0x68>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f64e 2260 	movw	r2, #60000	@ 0xea60
 800116a:	4293      	cmp	r3, r2
 800116c:	dd06      	ble.n	800117c <TIM3_IRQHandler+0x3c>
		  vel_1 = 65356-vel_1;
 800116e:	4b0e      	ldr	r3, [pc, #56]	@ (80011a8 <TIM3_IRQHandler+0x68>)
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	f64f 734c 	movw	r3, #65356	@ 0xff4c
 8001176:	1a9b      	subs	r3, r3, r2
 8001178:	4a0b      	ldr	r2, [pc, #44]	@ (80011a8 <TIM3_IRQHandler+0x68>)
 800117a:	6013      	str	r3, [r2, #0]
  }
  velocidade = vel_1;
 800117c:	4b0a      	ldr	r3, [pc, #40]	@ (80011a8 <TIM3_IRQHandler+0x68>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	ee07 3a90 	vmov	s15, r3
 8001184:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001188:	4b08      	ldr	r3, [pc, #32]	@ (80011ac <TIM3_IRQHandler+0x6c>)
 800118a:	edc3 7a00 	vstr	s15, [r3]



  HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_14);
 800118e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001192:	4807      	ldr	r0, [pc, #28]	@ (80011b0 <TIM3_IRQHandler+0x70>)
 8001194:	f003 fb2f 	bl	80047f6 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM3_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	2400049c 	.word	0x2400049c
 80011a0:	40000800 	.word	0x40000800
 80011a4:	24000444 	.word	0x24000444
 80011a8:	24000448 	.word	0x24000448
 80011ac:	24000008 	.word	0x24000008
 80011b0:	58020400 	.word	0x58020400

080011b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80011b8:	2000      	movs	r0, #0
 80011ba:	f000 fd29 	bl	8001c10 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011c8:	4802      	ldr	r0, [pc, #8]	@ (80011d4 <OTG_FS_IRQHandler+0x10>)
 80011ca:	f003 fc9e 	bl	8004b0a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011ce:	bf00      	nop
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	24001ce4 	.word	0x24001ce4

080011d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return 1;
 80011dc:	2301      	movs	r3, #1
}
 80011de:	4618      	mov	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <_kill>:

int _kill(int pid, int sig)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011f2:	f00e fed5 	bl	800ffa0 <__errno>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2216      	movs	r2, #22
 80011fa:	601a      	str	r2, [r3, #0]
  return -1;
 80011fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <_exit>:

void _exit (int status)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001210:	f04f 31ff 	mov.w	r1, #4294967295
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ffe7 	bl	80011e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800121a:	bf00      	nop
 800121c:	e7fd      	b.n	800121a <_exit+0x12>

0800121e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	60f8      	str	r0, [r7, #12]
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	e00a      	b.n	8001246 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001230:	f3af 8000 	nop.w
 8001234:	4601      	mov	r1, r0
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	1c5a      	adds	r2, r3, #1
 800123a:	60ba      	str	r2, [r7, #8]
 800123c:	b2ca      	uxtb	r2, r1
 800123e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	3301      	adds	r3, #1
 8001244:	617b      	str	r3, [r7, #20]
 8001246:	697a      	ldr	r2, [r7, #20]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	429a      	cmp	r2, r3
 800124c:	dbf0      	blt.n	8001230 <_read+0x12>
  }

  return len;
 800124e:	687b      	ldr	r3, [r7, #4]
}
 8001250:	4618      	mov	r0, r3
 8001252:	3718      	adds	r7, #24
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b086      	sub	sp, #24
 800125c:	af00      	add	r7, sp, #0
 800125e:	60f8      	str	r0, [r7, #12]
 8001260:	60b9      	str	r1, [r7, #8]
 8001262:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001264:	2300      	movs	r3, #0
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	e009      	b.n	800127e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	1c5a      	adds	r2, r3, #1
 800126e:	60ba      	str	r2, [r7, #8]
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f000 fd4c 	bl	8001d10 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	3301      	adds	r3, #1
 800127c:	617b      	str	r3, [r7, #20]
 800127e:	697a      	ldr	r2, [r7, #20]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	429a      	cmp	r2, r3
 8001284:	dbf1      	blt.n	800126a <_write+0x12>
  }
  return len;
 8001286:	687b      	ldr	r3, [r7, #4]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <_close>:

int _close(int file)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001298:	f04f 33ff 	mov.w	r3, #4294967295
}
 800129c:	4618      	mov	r0, r3
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012b8:	605a      	str	r2, [r3, #4]
  return 0;
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <_isatty>:

int _isatty(int file)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012d0:	2301      	movs	r3, #1
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012de:	b480      	push	{r7}
 80012e0:	b085      	sub	sp, #20
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	60f8      	str	r0, [r7, #12]
 80012e6:	60b9      	str	r1, [r7, #8]
 80012e8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001300:	4a14      	ldr	r2, [pc, #80]	@ (8001354 <_sbrk+0x5c>)
 8001302:	4b15      	ldr	r3, [pc, #84]	@ (8001358 <_sbrk+0x60>)
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800130c:	4b13      	ldr	r3, [pc, #76]	@ (800135c <_sbrk+0x64>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d102      	bne.n	800131a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001314:	4b11      	ldr	r3, [pc, #68]	@ (800135c <_sbrk+0x64>)
 8001316:	4a12      	ldr	r2, [pc, #72]	@ (8001360 <_sbrk+0x68>)
 8001318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800131a:	4b10      	ldr	r3, [pc, #64]	@ (800135c <_sbrk+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	429a      	cmp	r2, r3
 8001326:	d207      	bcs.n	8001338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001328:	f00e fe3a 	bl	800ffa0 <__errno>
 800132c:	4603      	mov	r3, r0
 800132e:	220c      	movs	r2, #12
 8001330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
 8001336:	e009      	b.n	800134c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001338:	4b08      	ldr	r3, [pc, #32]	@ (800135c <_sbrk+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800133e:	4b07      	ldr	r3, [pc, #28]	@ (800135c <_sbrk+0x64>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	4a05      	ldr	r2, [pc, #20]	@ (800135c <_sbrk+0x64>)
 8001348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800134a:	68fb      	ldr	r3, [r7, #12]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	24080000 	.word	0x24080000
 8001358:	00000400 	.word	0x00000400
 800135c:	2400044c 	.word	0x2400044c
 8001360:	24002538 	.word	0x24002538

08001364 <MX_TIM2_Init>:
DMA_HandleTypeDef hdma_tim5_ch2;
DMA_HandleTypeDef hdma_tim5_ch4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	@ 0x28
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001376:	463b      	mov	r3, r7
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
 8001384:	615a      	str	r2, [r3, #20]
 8001386:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001388:	4b27      	ldr	r3, [pc, #156]	@ (8001428 <MX_TIM2_Init+0xc4>)
 800138a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800138e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001390:	4b25      	ldr	r3, [pc, #148]	@ (8001428 <MX_TIM2_Init+0xc4>)
 8001392:	2200      	movs	r2, #0
 8001394:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001396:	4b24      	ldr	r3, [pc, #144]	@ (8001428 <MX_TIM2_Init+0xc4>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 800139c:	4b22      	ldr	r3, [pc, #136]	@ (8001428 <MX_TIM2_Init+0xc4>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a2:	4b21      	ldr	r3, [pc, #132]	@ (8001428 <MX_TIM2_Init+0xc4>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001428 <MX_TIM2_Init+0xc4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013ae:	481e      	ldr	r0, [pc, #120]	@ (8001428 <MX_TIM2_Init+0xc4>)
 80013b0:	f007 fc54 	bl	8008c5c <HAL_TIM_PWM_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80013ba:	f7ff fe49 	bl	8001050 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013c6:	f107 031c 	add.w	r3, r7, #28
 80013ca:	4619      	mov	r1, r3
 80013cc:	4816      	ldr	r0, [pc, #88]	@ (8001428 <MX_TIM2_Init+0xc4>)
 80013ce:	f008 fe7b 	bl	800a0c8 <HAL_TIMEx_MasterConfigSynchronization>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80013d8:	f7ff fe3a 	bl	8001050 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013dc:	2360      	movs	r3, #96	@ 0x60
 80013de:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ec:	463b      	mov	r3, r7
 80013ee:	2200      	movs	r2, #0
 80013f0:	4619      	mov	r1, r3
 80013f2:	480d      	ldr	r0, [pc, #52]	@ (8001428 <MX_TIM2_Init+0xc4>)
 80013f4:	f007 fff4 	bl	80093e0 <HAL_TIM_PWM_ConfigChannel>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80013fe:	f7ff fe27 	bl	8001050 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001402:	463b      	mov	r3, r7
 8001404:	2208      	movs	r2, #8
 8001406:	4619      	mov	r1, r3
 8001408:	4807      	ldr	r0, [pc, #28]	@ (8001428 <MX_TIM2_Init+0xc4>)
 800140a:	f007 ffe9 	bl	80093e0 <HAL_TIM_PWM_ConfigChannel>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001414:	f7ff fe1c 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001418:	4803      	ldr	r0, [pc, #12]	@ (8001428 <MX_TIM2_Init+0xc4>)
 800141a:	f000 fa87 	bl	800192c <HAL_TIM_MspPostInit>

}
 800141e:	bf00      	nop
 8001420:	3728      	adds	r7, #40	@ 0x28
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	24000450 	.word	0x24000450

0800142c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b088      	sub	sp, #32
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001432:	f107 0310 	add.w	r3, r7, #16
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]
 800143a:	605a      	str	r2, [r3, #4]
 800143c:	609a      	str	r2, [r3, #8]
 800143e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800144a:	4b1d      	ldr	r3, [pc, #116]	@ (80014c0 <MX_TIM3_Init+0x94>)
 800144c:	4a1d      	ldr	r2, [pc, #116]	@ (80014c4 <MX_TIM3_Init+0x98>)
 800144e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 8001450:	4b1b      	ldr	r3, [pc, #108]	@ (80014c0 <MX_TIM3_Init+0x94>)
 8001452:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001456:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001458:	4b19      	ldr	r3, [pc, #100]	@ (80014c0 <MX_TIM3_Init+0x94>)
 800145a:	2200      	movs	r2, #0
 800145c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800145e:	4b18      	ldr	r3, [pc, #96]	@ (80014c0 <MX_TIM3_Init+0x94>)
 8001460:	2263      	movs	r2, #99	@ 0x63
 8001462:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001464:	4b16      	ldr	r3, [pc, #88]	@ (80014c0 <MX_TIM3_Init+0x94>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146a:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <MX_TIM3_Init+0x94>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001470:	4813      	ldr	r0, [pc, #76]	@ (80014c0 <MX_TIM3_Init+0x94>)
 8001472:	f007 fb23 	bl	8008abc <HAL_TIM_Base_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 800147c:	f7ff fde8 	bl	8001050 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001480:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001484:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001486:	f107 0310 	add.w	r3, r7, #16
 800148a:	4619      	mov	r1, r3
 800148c:	480c      	ldr	r0, [pc, #48]	@ (80014c0 <MX_TIM3_Init+0x94>)
 800148e:	f008 f8bb 	bl	8009608 <HAL_TIM_ConfigClockSource>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001498:	f7ff fdda 	bl	8001050 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149c:	2300      	movs	r3, #0
 800149e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	@ (80014c0 <MX_TIM3_Init+0x94>)
 80014aa:	f008 fe0d 	bl	800a0c8 <HAL_TIMEx_MasterConfigSynchronization>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80014b4:	f7ff fdcc 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	3720      	adds	r7, #32
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	2400049c 	.word	0x2400049c
 80014c4:	40000400 	.word	0x40000400

080014c8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08c      	sub	sp, #48	@ 0x30
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014ce:	f107 030c 	add.w	r3, r7, #12
 80014d2:	2224      	movs	r2, #36	@ 0x24
 80014d4:	2100      	movs	r1, #0
 80014d6:	4618      	mov	r0, r3
 80014d8:	f00e fd0f 	bl	800fefa <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014dc:	463b      	mov	r3, r7
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014e6:	4b21      	ldr	r3, [pc, #132]	@ (800156c <MX_TIM4_Init+0xa4>)
 80014e8:	4a21      	ldr	r2, [pc, #132]	@ (8001570 <MX_TIM4_Init+0xa8>)
 80014ea:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80014ec:	4b1f      	ldr	r3, [pc, #124]	@ (800156c <MX_TIM4_Init+0xa4>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f2:	4b1e      	ldr	r3, [pc, #120]	@ (800156c <MX_TIM4_Init+0xa4>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80014f8:	4b1c      	ldr	r3, [pc, #112]	@ (800156c <MX_TIM4_Init+0xa4>)
 80014fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80014fe:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001500:	4b1a      	ldr	r3, [pc, #104]	@ (800156c <MX_TIM4_Init+0xa4>)
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001506:	4b19      	ldr	r3, [pc, #100]	@ (800156c <MX_TIM4_Init+0xa4>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800150c:	2303      	movs	r3, #3
 800150e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001510:	2302      	movs	r3, #2
 8001512:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001514:	2301      	movs	r3, #1
 8001516:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001520:	2302      	movs	r3, #2
 8001522:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001524:	2301      	movs	r3, #1
 8001526:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001530:	f107 030c 	add.w	r3, r7, #12
 8001534:	4619      	mov	r1, r3
 8001536:	480d      	ldr	r0, [pc, #52]	@ (800156c <MX_TIM4_Init+0xa4>)
 8001538:	f007 fcf6 	bl	8008f28 <HAL_TIM_Encoder_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001542:	f7ff fd85 	bl	8001050 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001546:	2300      	movs	r3, #0
 8001548:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800154e:	463b      	mov	r3, r7
 8001550:	4619      	mov	r1, r3
 8001552:	4806      	ldr	r0, [pc, #24]	@ (800156c <MX_TIM4_Init+0xa4>)
 8001554:	f008 fdb8 	bl	800a0c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800155e:	f7ff fd77 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	3730      	adds	r7, #48	@ 0x30
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	240004e8 	.word	0x240004e8
 8001570:	40000800 	.word	0x40000800

08001574 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08a      	sub	sp, #40	@ 0x28
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157a:	f107 031c 	add.w	r3, r7, #28
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001586:	463b      	mov	r3, r7
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
 8001594:	615a      	str	r2, [r3, #20]
 8001596:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001598:	4b26      	ldr	r3, [pc, #152]	@ (8001634 <MX_TIM5_Init+0xc0>)
 800159a:	4a27      	ldr	r2, [pc, #156]	@ (8001638 <MX_TIM5_Init+0xc4>)
 800159c:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800159e:	4b25      	ldr	r3, [pc, #148]	@ (8001634 <MX_TIM5_Init+0xc0>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a4:	4b23      	ldr	r3, [pc, #140]	@ (8001634 <MX_TIM5_Init+0xc0>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 80015aa:	4b22      	ldr	r3, [pc, #136]	@ (8001634 <MX_TIM5_Init+0xc0>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b0:	4b20      	ldr	r3, [pc, #128]	@ (8001634 <MX_TIM5_Init+0xc0>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b6:	4b1f      	ldr	r3, [pc, #124]	@ (8001634 <MX_TIM5_Init+0xc0>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80015bc:	481d      	ldr	r0, [pc, #116]	@ (8001634 <MX_TIM5_Init+0xc0>)
 80015be:	f007 fb4d 	bl	8008c5c <HAL_TIM_PWM_Init>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80015c8:	f7ff fd42 	bl	8001050 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	4619      	mov	r1, r3
 80015da:	4816      	ldr	r0, [pc, #88]	@ (8001634 <MX_TIM5_Init+0xc0>)
 80015dc:	f008 fd74 	bl	800a0c8 <HAL_TIMEx_MasterConfigSynchronization>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 80015e6:	f7ff fd33 	bl	8001050 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015ea:	2360      	movs	r3, #96	@ 0x60
 80015ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80015fa:	463b      	mov	r3, r7
 80015fc:	2204      	movs	r2, #4
 80015fe:	4619      	mov	r1, r3
 8001600:	480c      	ldr	r0, [pc, #48]	@ (8001634 <MX_TIM5_Init+0xc0>)
 8001602:	f007 feed 	bl	80093e0 <HAL_TIM_PWM_ConfigChannel>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 800160c:	f7ff fd20 	bl	8001050 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001610:	463b      	mov	r3, r7
 8001612:	220c      	movs	r2, #12
 8001614:	4619      	mov	r1, r3
 8001616:	4807      	ldr	r0, [pc, #28]	@ (8001634 <MX_TIM5_Init+0xc0>)
 8001618:	f007 fee2 	bl	80093e0 <HAL_TIM_PWM_ConfigChannel>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001622:	f7ff fd15 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001626:	4803      	ldr	r0, [pc, #12]	@ (8001634 <MX_TIM5_Init+0xc0>)
 8001628:	f000 f980 	bl	800192c <HAL_TIM_MspPostInit>

}
 800162c:	bf00      	nop
 800162e:	3728      	adds	r7, #40	@ 0x28
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	24000534 	.word	0x24000534
 8001638:	40000c00 	.word	0x40000c00

0800163c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800164c:	d16f      	bne.n	800172e <HAL_TIM_PWM_MspInit+0xf2>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800164e:	4b74      	ldr	r3, [pc, #464]	@ (8001820 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001650:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001654:	4a72      	ldr	r2, [pc, #456]	@ (8001820 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800165e:	4b70      	ldr	r3, [pc, #448]	@ (8001820 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001660:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	60fb      	str	r3, [r7, #12]
 800166a:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 800166c:	4b6d      	ldr	r3, [pc, #436]	@ (8001824 <HAL_TIM_PWM_MspInit+0x1e8>)
 800166e:	4a6e      	ldr	r2, [pc, #440]	@ (8001828 <HAL_TIM_PWM_MspInit+0x1ec>)
 8001670:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8001672:	4b6c      	ldr	r3, [pc, #432]	@ (8001824 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001674:	2212      	movs	r2, #18
 8001676:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001678:	4b6a      	ldr	r3, [pc, #424]	@ (8001824 <HAL_TIM_PWM_MspInit+0x1e8>)
 800167a:	2240      	movs	r2, #64	@ 0x40
 800167c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800167e:	4b69      	ldr	r3, [pc, #420]	@ (8001824 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001680:	2200      	movs	r2, #0
 8001682:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001684:	4b67      	ldr	r3, [pc, #412]	@ (8001824 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001686:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800168a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800168c:	4b65      	ldr	r3, [pc, #404]	@ (8001824 <HAL_TIM_PWM_MspInit+0x1e8>)
 800168e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001692:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001694:	4b63      	ldr	r3, [pc, #396]	@ (8001824 <HAL_TIM_PWM_MspInit+0x1e8>)
 8001696:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800169a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 800169c:	4b61      	ldr	r3, [pc, #388]	@ (8001824 <HAL_TIM_PWM_MspInit+0x1e8>)
 800169e:	2200      	movs	r2, #0
 80016a0:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80016a2:	4b60      	ldr	r3, [pc, #384]	@ (8001824 <HAL_TIM_PWM_MspInit+0x1e8>)
 80016a4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80016a8:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016aa:	4b5e      	ldr	r3, [pc, #376]	@ (8001824 <HAL_TIM_PWM_MspInit+0x1e8>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80016b0:	485c      	ldr	r0, [pc, #368]	@ (8001824 <HAL_TIM_PWM_MspInit+0x1e8>)
 80016b2:	f000 fd8f 	bl	80021d4 <HAL_DMA_Init>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <HAL_TIM_PWM_MspInit+0x84>
    {
      Error_Handler();
 80016bc:	f7ff fcc8 	bl	8001050 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	4a58      	ldr	r2, [pc, #352]	@ (8001824 <HAL_TIM_PWM_MspInit+0x1e8>)
 80016c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80016c6:	4a57      	ldr	r2, [pc, #348]	@ (8001824 <HAL_TIM_PWM_MspInit+0x1e8>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6393      	str	r3, [r2, #56]	@ 0x38

    /* TIM2_CH3 Init */
    hdma_tim2_ch3.Instance = DMA1_Stream1;
 80016cc:	4b57      	ldr	r3, [pc, #348]	@ (800182c <HAL_TIM_PWM_MspInit+0x1f0>)
 80016ce:	4a58      	ldr	r2, [pc, #352]	@ (8001830 <HAL_TIM_PWM_MspInit+0x1f4>)
 80016d0:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch3.Init.Request = DMA_REQUEST_TIM2_CH3;
 80016d2:	4b56      	ldr	r3, [pc, #344]	@ (800182c <HAL_TIM_PWM_MspInit+0x1f0>)
 80016d4:	2214      	movs	r2, #20
 80016d6:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch3.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016d8:	4b54      	ldr	r3, [pc, #336]	@ (800182c <HAL_TIM_PWM_MspInit+0x1f0>)
 80016da:	2240      	movs	r2, #64	@ 0x40
 80016dc:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80016de:	4b53      	ldr	r3, [pc, #332]	@ (800182c <HAL_TIM_PWM_MspInit+0x1f0>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80016e4:	4b51      	ldr	r3, [pc, #324]	@ (800182c <HAL_TIM_PWM_MspInit+0x1f0>)
 80016e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80016ea:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80016ec:	4b4f      	ldr	r3, [pc, #316]	@ (800182c <HAL_TIM_PWM_MspInit+0x1f0>)
 80016ee:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016f2:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80016f4:	4b4d      	ldr	r3, [pc, #308]	@ (800182c <HAL_TIM_PWM_MspInit+0x1f0>)
 80016f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016fa:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch3.Init.Mode = DMA_NORMAL;
 80016fc:	4b4b      	ldr	r3, [pc, #300]	@ (800182c <HAL_TIM_PWM_MspInit+0x1f0>)
 80016fe:	2200      	movs	r2, #0
 8001700:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch3.Init.Priority = DMA_PRIORITY_HIGH;
 8001702:	4b4a      	ldr	r3, [pc, #296]	@ (800182c <HAL_TIM_PWM_MspInit+0x1f0>)
 8001704:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001708:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800170a:	4b48      	ldr	r3, [pc, #288]	@ (800182c <HAL_TIM_PWM_MspInit+0x1f0>)
 800170c:	2200      	movs	r2, #0
 800170e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch3) != HAL_OK)
 8001710:	4846      	ldr	r0, [pc, #280]	@ (800182c <HAL_TIM_PWM_MspInit+0x1f0>)
 8001712:	f000 fd5f 	bl	80021d4 <HAL_DMA_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <HAL_TIM_PWM_MspInit+0xe4>
    {
      Error_Handler();
 800171c:	f7ff fc98 	bl	8001050 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC3],hdma_tim2_ch3);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4a42      	ldr	r2, [pc, #264]	@ (800182c <HAL_TIM_PWM_MspInit+0x1f0>)
 8001724:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001726:	4a41      	ldr	r2, [pc, #260]	@ (800182c <HAL_TIM_PWM_MspInit+0x1f0>)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800172c:	e073      	b.n	8001816 <HAL_TIM_PWM_MspInit+0x1da>
  else if(tim_pwmHandle->Instance==TIM5)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a40      	ldr	r2, [pc, #256]	@ (8001834 <HAL_TIM_PWM_MspInit+0x1f8>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d16e      	bne.n	8001816 <HAL_TIM_PWM_MspInit+0x1da>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001738:	4b39      	ldr	r3, [pc, #228]	@ (8001820 <HAL_TIM_PWM_MspInit+0x1e4>)
 800173a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800173e:	4a38      	ldr	r2, [pc, #224]	@ (8001820 <HAL_TIM_PWM_MspInit+0x1e4>)
 8001740:	f043 0308 	orr.w	r3, r3, #8
 8001744:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001748:	4b35      	ldr	r3, [pc, #212]	@ (8001820 <HAL_TIM_PWM_MspInit+0x1e4>)
 800174a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800174e:	f003 0308 	and.w	r3, r3, #8
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]
    hdma_tim5_ch2.Instance = DMA1_Stream4;
 8001756:	4b38      	ldr	r3, [pc, #224]	@ (8001838 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001758:	4a38      	ldr	r2, [pc, #224]	@ (800183c <HAL_TIM_PWM_MspInit+0x200>)
 800175a:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch2.Init.Request = DMA_REQUEST_TIM5_CH2;
 800175c:	4b36      	ldr	r3, [pc, #216]	@ (8001838 <HAL_TIM_PWM_MspInit+0x1fc>)
 800175e:	2238      	movs	r2, #56	@ 0x38
 8001760:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001762:	4b35      	ldr	r3, [pc, #212]	@ (8001838 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001764:	2240      	movs	r2, #64	@ 0x40
 8001766:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001768:	4b33      	ldr	r3, [pc, #204]	@ (8001838 <HAL_TIM_PWM_MspInit+0x1fc>)
 800176a:	2200      	movs	r2, #0
 800176c:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch2.Init.MemInc = DMA_MINC_ENABLE;
 800176e:	4b32      	ldr	r3, [pc, #200]	@ (8001838 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001770:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001774:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001776:	4b30      	ldr	r3, [pc, #192]	@ (8001838 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001778:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800177c:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800177e:	4b2e      	ldr	r3, [pc, #184]	@ (8001838 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001780:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001784:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch2.Init.Mode = DMA_NORMAL;
 8001786:	4b2c      	ldr	r3, [pc, #176]	@ (8001838 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001788:	2200      	movs	r2, #0
 800178a:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 800178c:	4b2a      	ldr	r3, [pc, #168]	@ (8001838 <HAL_TIM_PWM_MspInit+0x1fc>)
 800178e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001792:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001794:	4b28      	ldr	r3, [pc, #160]	@ (8001838 <HAL_TIM_PWM_MspInit+0x1fc>)
 8001796:	2200      	movs	r2, #0
 8001798:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch2) != HAL_OK)
 800179a:	4827      	ldr	r0, [pc, #156]	@ (8001838 <HAL_TIM_PWM_MspInit+0x1fc>)
 800179c:	f000 fd1a 	bl	80021d4 <HAL_DMA_Init>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d001      	beq.n	80017aa <HAL_TIM_PWM_MspInit+0x16e>
      Error_Handler();
 80017a6:	f7ff fc53 	bl	8001050 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC2],hdma_tim5_ch2);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a22      	ldr	r2, [pc, #136]	@ (8001838 <HAL_TIM_PWM_MspInit+0x1fc>)
 80017ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80017b0:	4a21      	ldr	r2, [pc, #132]	@ (8001838 <HAL_TIM_PWM_MspInit+0x1fc>)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_tim5_ch4.Instance = DMA1_Stream3;
 80017b6:	4b22      	ldr	r3, [pc, #136]	@ (8001840 <HAL_TIM_PWM_MspInit+0x204>)
 80017b8:	4a22      	ldr	r2, [pc, #136]	@ (8001844 <HAL_TIM_PWM_MspInit+0x208>)
 80017ba:	601a      	str	r2, [r3, #0]
    hdma_tim5_ch4.Init.Request = DMA_REQUEST_TIM5_CH4;
 80017bc:	4b20      	ldr	r3, [pc, #128]	@ (8001840 <HAL_TIM_PWM_MspInit+0x204>)
 80017be:	223a      	movs	r2, #58	@ 0x3a
 80017c0:	605a      	str	r2, [r3, #4]
    hdma_tim5_ch4.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017c2:	4b1f      	ldr	r3, [pc, #124]	@ (8001840 <HAL_TIM_PWM_MspInit+0x204>)
 80017c4:	2240      	movs	r2, #64	@ 0x40
 80017c6:	609a      	str	r2, [r3, #8]
    hdma_tim5_ch4.Init.PeriphInc = DMA_PINC_DISABLE;
 80017c8:	4b1d      	ldr	r3, [pc, #116]	@ (8001840 <HAL_TIM_PWM_MspInit+0x204>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	60da      	str	r2, [r3, #12]
    hdma_tim5_ch4.Init.MemInc = DMA_MINC_ENABLE;
 80017ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001840 <HAL_TIM_PWM_MspInit+0x204>)
 80017d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80017d4:	611a      	str	r2, [r3, #16]
    hdma_tim5_ch4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001840 <HAL_TIM_PWM_MspInit+0x204>)
 80017d8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80017dc:	615a      	str	r2, [r3, #20]
    hdma_tim5_ch4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017de:	4b18      	ldr	r3, [pc, #96]	@ (8001840 <HAL_TIM_PWM_MspInit+0x204>)
 80017e0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80017e4:	619a      	str	r2, [r3, #24]
    hdma_tim5_ch4.Init.Mode = DMA_NORMAL;
 80017e6:	4b16      	ldr	r3, [pc, #88]	@ (8001840 <HAL_TIM_PWM_MspInit+0x204>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	61da      	str	r2, [r3, #28]
    hdma_tim5_ch4.Init.Priority = DMA_PRIORITY_HIGH;
 80017ec:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <HAL_TIM_PWM_MspInit+0x204>)
 80017ee:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017f2:	621a      	str	r2, [r3, #32]
    hdma_tim5_ch4.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017f4:	4b12      	ldr	r3, [pc, #72]	@ (8001840 <HAL_TIM_PWM_MspInit+0x204>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim5_ch4) != HAL_OK)
 80017fa:	4811      	ldr	r0, [pc, #68]	@ (8001840 <HAL_TIM_PWM_MspInit+0x204>)
 80017fc:	f000 fcea 	bl	80021d4 <HAL_DMA_Init>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <HAL_TIM_PWM_MspInit+0x1ce>
      Error_Handler();
 8001806:	f7ff fc23 	bl	8001050 <Error_Handler>
    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC4],hdma_tim5_ch4);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a0c      	ldr	r2, [pc, #48]	@ (8001840 <HAL_TIM_PWM_MspInit+0x204>)
 800180e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001810:	4a0b      	ldr	r2, [pc, #44]	@ (8001840 <HAL_TIM_PWM_MspInit+0x204>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001816:	bf00      	nop
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	58024400 	.word	0x58024400
 8001824:	24000580 	.word	0x24000580
 8001828:	40020088 	.word	0x40020088
 800182c:	240005f8 	.word	0x240005f8
 8001830:	40020028 	.word	0x40020028
 8001834:	40000c00 	.word	0x40000c00
 8001838:	24000670 	.word	0x24000670
 800183c:	40020070 	.word	0x40020070
 8001840:	240006e8 	.word	0x240006e8
 8001844:	40020058 	.word	0x40020058

08001848 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a0e      	ldr	r2, [pc, #56]	@ (8001890 <HAL_TIM_Base_MspInit+0x48>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d116      	bne.n	8001888 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800185a:	4b0e      	ldr	r3, [pc, #56]	@ (8001894 <HAL_TIM_Base_MspInit+0x4c>)
 800185c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001860:	4a0c      	ldr	r2, [pc, #48]	@ (8001894 <HAL_TIM_Base_MspInit+0x4c>)
 8001862:	f043 0302 	orr.w	r3, r3, #2
 8001866:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800186a:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <HAL_TIM_Base_MspInit+0x4c>)
 800186c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	60fb      	str	r3, [r7, #12]
 8001876:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001878:	2200      	movs	r2, #0
 800187a:	2100      	movs	r1, #0
 800187c:	201d      	movs	r0, #29
 800187e:	f000 fc60 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001882:	201d      	movs	r0, #29
 8001884:	f000 fc77 	bl	8002176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001888:	bf00      	nop
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40000400 	.word	0x40000400
 8001894:	58024400 	.word	0x58024400

08001898 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08a      	sub	sp, #40	@ 0x28
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM4)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a1a      	ldr	r2, [pc, #104]	@ (8001920 <HAL_TIM_Encoder_MspInit+0x88>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d12e      	bne.n	8001918 <HAL_TIM_Encoder_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001924 <HAL_TIM_Encoder_MspInit+0x8c>)
 80018bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018c0:	4a18      	ldr	r2, [pc, #96]	@ (8001924 <HAL_TIM_Encoder_MspInit+0x8c>)
 80018c2:	f043 0304 	orr.w	r3, r3, #4
 80018c6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80018ca:	4b16      	ldr	r3, [pc, #88]	@ (8001924 <HAL_TIM_Encoder_MspInit+0x8c>)
 80018cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d8:	4b12      	ldr	r3, [pc, #72]	@ (8001924 <HAL_TIM_Encoder_MspInit+0x8c>)
 80018da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018de:	4a11      	ldr	r2, [pc, #68]	@ (8001924 <HAL_TIM_Encoder_MspInit+0x8c>)
 80018e0:	f043 0308 	orr.w	r3, r3, #8
 80018e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001924 <HAL_TIM_Encoder_MspInit+0x8c>)
 80018ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ee:	f003 0308 	and.w	r3, r3, #8
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80018f6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80018fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fc:	2302      	movs	r3, #2
 80018fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001900:	2300      	movs	r3, #0
 8001902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001904:	2300      	movs	r3, #0
 8001906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001908:	2302      	movs	r3, #2
 800190a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800190c:	f107 0314 	add.w	r3, r7, #20
 8001910:	4619      	mov	r1, r3
 8001912:	4805      	ldr	r0, [pc, #20]	@ (8001928 <HAL_TIM_Encoder_MspInit+0x90>)
 8001914:	f002 fda6 	bl	8004464 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001918:	bf00      	nop
 800191a:	3728      	adds	r7, #40	@ 0x28
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40000800 	.word	0x40000800
 8001924:	58024400 	.word	0x58024400
 8001928:	58020c00 	.word	0x58020c00

0800192c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08a      	sub	sp, #40	@ 0x28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0314 	add.w	r3, r7, #20
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
 8001942:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800194c:	d11f      	bne.n	800198e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800194e:	4b24      	ldr	r3, [pc, #144]	@ (80019e0 <HAL_TIM_MspPostInit+0xb4>)
 8001950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001954:	4a22      	ldr	r2, [pc, #136]	@ (80019e0 <HAL_TIM_MspPostInit+0xb4>)
 8001956:	f043 0301 	orr.w	r3, r3, #1
 800195a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800195e:	4b20      	ldr	r3, [pc, #128]	@ (80019e0 <HAL_TIM_MspPostInit+0xb4>)
 8001960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	613b      	str	r3, [r7, #16]
 800196a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800196c:	2305      	movs	r3, #5
 800196e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2300      	movs	r3, #0
 800197a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800197c:	2301      	movs	r3, #1
 800197e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	4619      	mov	r1, r3
 8001986:	4817      	ldr	r0, [pc, #92]	@ (80019e4 <HAL_TIM_MspPostInit+0xb8>)
 8001988:	f002 fd6c 	bl	8004464 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 800198c:	e023      	b.n	80019d6 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM5)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a15      	ldr	r2, [pc, #84]	@ (80019e8 <HAL_TIM_MspPostInit+0xbc>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d11e      	bne.n	80019d6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001998:	4b11      	ldr	r3, [pc, #68]	@ (80019e0 <HAL_TIM_MspPostInit+0xb4>)
 800199a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800199e:	4a10      	ldr	r2, [pc, #64]	@ (80019e0 <HAL_TIM_MspPostInit+0xb4>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019a8:	4b0d      	ldr	r3, [pc, #52]	@ (80019e0 <HAL_TIM_MspPostInit+0xb4>)
 80019aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80019b6:	230a      	movs	r3, #10
 80019b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c2:	2300      	movs	r3, #0
 80019c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80019c6:	2302      	movs	r3, #2
 80019c8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ca:	f107 0314 	add.w	r3, r7, #20
 80019ce:	4619      	mov	r1, r3
 80019d0:	4804      	ldr	r0, [pc, #16]	@ (80019e4 <HAL_TIM_MspPostInit+0xb8>)
 80019d2:	f002 fd47 	bl	8004464 <HAL_GPIO_Init>
}
 80019d6:	bf00      	nop
 80019d8:	3728      	adds	r7, #40	@ 0x28
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	58024400 	.word	0x58024400
 80019e4:	58020000 	.word	0x58020000
 80019e8:	40000c00 	.word	0x40000c00

080019ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80019ec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001a24 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80019f0:	f7fe fe46 	bl	8000680 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019f4:	480c      	ldr	r0, [pc, #48]	@ (8001a28 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019f6:	490d      	ldr	r1, [pc, #52]	@ (8001a2c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001a30 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019fc:	e002      	b.n	8001a04 <LoopCopyDataInit>

080019fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a02:	3304      	adds	r3, #4

08001a04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a08:	d3f9      	bcc.n	80019fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a0a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a34 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001a0c:	4c0a      	ldr	r4, [pc, #40]	@ (8001a38 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a10:	e001      	b.n	8001a16 <LoopFillZerobss>

08001a12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a14:	3204      	adds	r2, #4

08001a16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a18:	d3fb      	bcc.n	8001a12 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a1a:	f00e fac7 	bl	800ffac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a1e:	f7ff f9c1 	bl	8000da4 <main>
  bx  lr
 8001a22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a24:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001a28:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001a2c:	240002ec 	.word	0x240002ec
  ldr r2, =_sidata
 8001a30:	08012470 	.word	0x08012470
  ldr r2, =_sbss
 8001a34:	240002ec 	.word	0x240002ec
  ldr r4, =_ebss
 8001a38:	24002534 	.word	0x24002534

08001a3c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a3c:	e7fe      	b.n	8001a3c <ADC3_IRQHandler>
	...

08001a40 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08c      	sub	sp, #48	@ 0x30
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d009      	beq.n	8001a68 <BSP_LED_Init+0x28>
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d006      	beq.n	8001a68 <BSP_LED_Init+0x28>
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d003      	beq.n	8001a68 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001a60:	f06f 0301 	mvn.w	r3, #1
 8001a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a66:	e055      	b.n	8001b14 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10f      	bne.n	8001a8e <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8001a6e:	4b2c      	ldr	r3, [pc, #176]	@ (8001b20 <BSP_LED_Init+0xe0>)
 8001a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a74:	4a2a      	ldr	r2, [pc, #168]	@ (8001b20 <BSP_LED_Init+0xe0>)
 8001a76:	f043 0302 	orr.w	r3, r3, #2
 8001a7a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a7e:	4b28      	ldr	r3, [pc, #160]	@ (8001b20 <BSP_LED_Init+0xe0>)
 8001a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a84:	f003 0302 	and.w	r3, r3, #2
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	e021      	b.n	8001ad2 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d10f      	bne.n	8001ab4 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001a94:	4b22      	ldr	r3, [pc, #136]	@ (8001b20 <BSP_LED_Init+0xe0>)
 8001a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a9a:	4a21      	ldr	r2, [pc, #132]	@ (8001b20 <BSP_LED_Init+0xe0>)
 8001a9c:	f043 0310 	orr.w	r3, r3, #16
 8001aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8001b20 <BSP_LED_Init+0xe0>)
 8001aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aaa:	f003 0310 	and.w	r3, r3, #16
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	e00e      	b.n	8001ad2 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001ab4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b20 <BSP_LED_Init+0xe0>)
 8001ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aba:	4a19      	ldr	r2, [pc, #100]	@ (8001b20 <BSP_LED_Init+0xe0>)
 8001abc:	f043 0302 	orr.w	r3, r3, #2
 8001ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ac4:	4b16      	ldr	r3, [pc, #88]	@ (8001b20 <BSP_LED_Init+0xe0>)
 8001ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001ad2:	79fb      	ldrb	r3, [r7, #7]
 8001ad4:	4a13      	ldr	r2, [pc, #76]	@ (8001b24 <BSP_LED_Init+0xe4>)
 8001ad6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001ada:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001adc:	2301      	movs	r3, #1
 8001ade:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	4a0f      	ldr	r2, [pc, #60]	@ (8001b28 <BSP_LED_Init+0xe8>)
 8001aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001af0:	f107 0218 	add.w	r2, r7, #24
 8001af4:	4611      	mov	r1, r2
 8001af6:	4618      	mov	r0, r3
 8001af8:	f002 fcb4 	bl	8004464 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	4a0a      	ldr	r2, [pc, #40]	@ (8001b28 <BSP_LED_Init+0xe8>)
 8001b00:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	4a07      	ldr	r2, [pc, #28]	@ (8001b24 <BSP_LED_Init+0xe4>)
 8001b08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	4619      	mov	r1, r3
 8001b10:	f002 fe58 	bl	80047c4 <HAL_GPIO_WritePin>
  }

  return ret;
 8001b14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3730      	adds	r7, #48	@ 0x30
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	58024400 	.word	0x58024400
 8001b24:	080120bc 	.word	0x080120bc
 8001b28:	24000010 	.word	0x24000010

08001b2c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b088      	sub	sp, #32
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	460a      	mov	r2, r1
 8001b36:	71fb      	strb	r3, [r7, #7]
 8001b38:	4613      	mov	r3, r2
 8001b3a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001b3c:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf8 <BSP_PB_Init+0xcc>)
 8001b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b42:	4a2d      	ldr	r2, [pc, #180]	@ (8001bf8 <BSP_PB_Init+0xcc>)
 8001b44:	f043 0304 	orr.w	r3, r3, #4
 8001b48:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001b4c:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf8 <BSP_PB_Init+0xcc>)
 8001b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b52:	f003 0304 	and.w	r3, r3, #4
 8001b56:	60bb      	str	r3, [r7, #8]
 8001b58:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001b5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b5e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001b60:	2302      	movs	r3, #2
 8001b62:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b64:	2302      	movs	r3, #2
 8001b66:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001b68:	79bb      	ldrb	r3, [r7, #6]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10c      	bne.n	8001b88 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	4a21      	ldr	r2, [pc, #132]	@ (8001bfc <BSP_PB_Init+0xd0>)
 8001b76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7a:	f107 020c 	add.w	r2, r7, #12
 8001b7e:	4611      	mov	r1, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f002 fc6f 	bl	8004464 <HAL_GPIO_Init>
 8001b86:	e031      	b.n	8001bec <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001b88:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b8c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	4a1a      	ldr	r2, [pc, #104]	@ (8001bfc <BSP_PB_Init+0xd0>)
 8001b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b96:	f107 020c 	add.w	r2, r7, #12
 8001b9a:	4611      	mov	r1, r2
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f002 fc61 	bl	8004464 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	00db      	lsls	r3, r3, #3
 8001ba6:	4a16      	ldr	r2, [pc, #88]	@ (8001c00 <BSP_PB_Init+0xd4>)
 8001ba8:	441a      	add	r2, r3
 8001baa:	79fb      	ldrb	r3, [r7, #7]
 8001bac:	4915      	ldr	r1, [pc, #84]	@ (8001c04 <BSP_PB_Init+0xd8>)
 8001bae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	f002 fc04 	bl	80043c2 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8001bba:	79fb      	ldrb	r3, [r7, #7]
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	4a10      	ldr	r2, [pc, #64]	@ (8001c00 <BSP_PB_Init+0xd4>)
 8001bc0:	1898      	adds	r0, r3, r2
 8001bc2:	79fb      	ldrb	r3, [r7, #7]
 8001bc4:	4a10      	ldr	r2, [pc, #64]	@ (8001c08 <BSP_PB_Init+0xdc>)
 8001bc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	2100      	movs	r1, #0
 8001bce:	f002 fbd9 	bl	8004384 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8001bd2:	2028      	movs	r0, #40	@ 0x28
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	4a0d      	ldr	r2, [pc, #52]	@ (8001c0c <BSP_PB_Init+0xe0>)
 8001bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	4619      	mov	r1, r3
 8001be0:	f000 faaf 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8001be4:	2328      	movs	r3, #40	@ 0x28
 8001be6:	4618      	mov	r0, r3
 8001be8:	f000 fac5 	bl	8002176 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3720      	adds	r7, #32
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	58024400 	.word	0x58024400
 8001bfc:	2400001c 	.word	0x2400001c
 8001c00:	24000760 	.word	0x24000760
 8001c04:	080120c4 	.word	0x080120c4
 8001c08:	24000020 	.word	0x24000020
 8001c0c:	24000024 	.word	0x24000024

08001c10 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	4603      	mov	r3, r0
 8001c18:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	00db      	lsls	r3, r3, #3
 8001c1e:	4a04      	ldr	r2, [pc, #16]	@ (8001c30 <BSP_PB_IRQHandler+0x20>)
 8001c20:	4413      	add	r3, r2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f002 fbe2 	bl	80043ec <HAL_EXTI_IRQHandler>
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	24000760 	.word	0x24000760

08001c34 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
	...

08001c4c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	4603      	mov	r3, r0
 8001c54:	6039      	str	r1, [r7, #0]
 8001c56:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001c5c:	79fb      	ldrb	r3, [r7, #7]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d003      	beq.n	8001c6a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001c62:	f06f 0301 	mvn.w	r3, #1
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	e018      	b.n	8001c9c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	2294      	movs	r2, #148	@ 0x94
 8001c6e:	fb02 f303 	mul.w	r3, r2, r3
 8001c72:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca8 <BSP_COM_Init+0x5c>)
 8001c74:	4413      	add	r3, r2
 8001c76:	4618      	mov	r0, r3
 8001c78:	f000 f86e 	bl	8001d58 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001c7c:	79fb      	ldrb	r3, [r7, #7]
 8001c7e:	2294      	movs	r2, #148	@ 0x94
 8001c80:	fb02 f303 	mul.w	r3, r2, r3
 8001c84:	4a08      	ldr	r2, [pc, #32]	@ (8001ca8 <BSP_COM_Init+0x5c>)
 8001c86:	4413      	add	r3, r2
 8001c88:	6839      	ldr	r1, [r7, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f000 f80e 	bl	8001cac <MX_USART3_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d002      	beq.n	8001c9c <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001c96:	f06f 0303 	mvn.w	r3, #3
 8001c9a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	24000768 	.word	0x24000768

08001cac <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001cb6:	4b15      	ldr	r3, [pc, #84]	@ (8001d0c <MX_USART3_Init+0x60>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	220c      	movs	r2, #12
 8001cca:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	895b      	ldrh	r3, [r3, #10]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	891b      	ldrh	r3, [r3, #8]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	899b      	ldrh	r3, [r3, #12]
 8001cec:	461a      	mov	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001cf8:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f008 fa90 	bl	800a220 <HAL_UART_Init>
 8001d00:	4603      	mov	r3, r0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3708      	adds	r7, #8
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	2400000c 	.word	0x2400000c

08001d10 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001d18:	4b09      	ldr	r3, [pc, #36]	@ (8001d40 <__io_putchar+0x30>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	2394      	movs	r3, #148	@ 0x94
 8001d20:	fb02 f303 	mul.w	r3, r2, r3
 8001d24:	4a07      	ldr	r2, [pc, #28]	@ (8001d44 <__io_putchar+0x34>)
 8001d26:	1898      	adds	r0, r3, r2
 8001d28:	1d39      	adds	r1, r7, #4
 8001d2a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f008 fad0 	bl	800a2d4 <HAL_UART_Transmit>
  return ch;
 8001d34:	687b      	ldr	r3, [r7, #4]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	240007fc 	.word	0x240007fc
 8001d44:	24000768 	.word	0x24000768

08001d48 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	f7ff ff71 	bl	8001c34 <BSP_PB_Callback>
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	@ 0x28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001d60:	4b27      	ldr	r3, [pc, #156]	@ (8001e00 <COM1_MspInit+0xa8>)
 8001d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d66:	4a26      	ldr	r2, [pc, #152]	@ (8001e00 <COM1_MspInit+0xa8>)
 8001d68:	f043 0308 	orr.w	r3, r3, #8
 8001d6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d70:	4b23      	ldr	r3, [pc, #140]	@ (8001e00 <COM1_MspInit+0xa8>)
 8001d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	613b      	str	r3, [r7, #16]
 8001d7c:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001d7e:	4b20      	ldr	r3, [pc, #128]	@ (8001e00 <COM1_MspInit+0xa8>)
 8001d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d84:	4a1e      	ldr	r2, [pc, #120]	@ (8001e00 <COM1_MspInit+0xa8>)
 8001d86:	f043 0308 	orr.w	r3, r3, #8
 8001d8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d8e:	4b1c      	ldr	r3, [pc, #112]	@ (8001e00 <COM1_MspInit+0xa8>)
 8001d90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d94:	f003 0308 	and.w	r3, r3, #8
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001d9c:	4b18      	ldr	r3, [pc, #96]	@ (8001e00 <COM1_MspInit+0xa8>)
 8001d9e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001da2:	4a17      	ldr	r2, [pc, #92]	@ (8001e00 <COM1_MspInit+0xa8>)
 8001da4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001da8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001dac:	4b14      	ldr	r3, [pc, #80]	@ (8001e00 <COM1_MspInit+0xa8>)
 8001dae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001db2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001dba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dbe:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001dcc:	2307      	movs	r3, #7
 8001dce:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	480b      	ldr	r0, [pc, #44]	@ (8001e04 <COM1_MspInit+0xac>)
 8001dd8:	f002 fb44 	bl	8004464 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001ddc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001de0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001de6:	2307      	movs	r3, #7
 8001de8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001dea:	f107 0314 	add.w	r3, r7, #20
 8001dee:	4619      	mov	r1, r3
 8001df0:	4804      	ldr	r0, [pc, #16]	@ (8001e04 <COM1_MspInit+0xac>)
 8001df2:	f002 fb37 	bl	8004464 <HAL_GPIO_Init>
}
 8001df6:	bf00      	nop
 8001df8:	3728      	adds	r7, #40	@ 0x28
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	58024400 	.word	0x58024400
 8001e04:	58020c00 	.word	0x58020c00

08001e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e0e:	2003      	movs	r0, #3
 8001e10:	f000 f98c 	bl	800212c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001e14:	f004 fe50 	bl	8006ab8 <HAL_RCC_GetSysClockFreq>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	4b15      	ldr	r3, [pc, #84]	@ (8001e70 <HAL_Init+0x68>)
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	0a1b      	lsrs	r3, r3, #8
 8001e20:	f003 030f 	and.w	r3, r3, #15
 8001e24:	4913      	ldr	r1, [pc, #76]	@ (8001e74 <HAL_Init+0x6c>)
 8001e26:	5ccb      	ldrb	r3, [r1, r3]
 8001e28:	f003 031f 	and.w	r3, r3, #31
 8001e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001e30:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001e32:	4b0f      	ldr	r3, [pc, #60]	@ (8001e70 <HAL_Init+0x68>)
 8001e34:	699b      	ldr	r3, [r3, #24]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	4a0e      	ldr	r2, [pc, #56]	@ (8001e74 <HAL_Init+0x6c>)
 8001e3c:	5cd3      	ldrb	r3, [r2, r3]
 8001e3e:	f003 031f 	and.w	r3, r3, #31
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	fa22 f303 	lsr.w	r3, r2, r3
 8001e48:	4a0b      	ldr	r2, [pc, #44]	@ (8001e78 <HAL_Init+0x70>)
 8001e4a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001e4c:	4a0b      	ldr	r2, [pc, #44]	@ (8001e7c <HAL_Init+0x74>)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e52:	2000      	movs	r0, #0
 8001e54:	f000 f814 	bl	8001e80 <HAL_InitTick>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e002      	b.n	8001e68 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001e62:	f7ff f8fb 	bl	800105c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	58024400 	.word	0x58024400
 8001e74:	080120ac 	.word	0x080120ac
 8001e78:	24000004 	.word	0x24000004
 8001e7c:	24000000 	.word	0x24000000

08001e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e88:	4b15      	ldr	r3, [pc, #84]	@ (8001ee0 <HAL_InitTick+0x60>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e021      	b.n	8001ed8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e94:	4b13      	ldr	r3, [pc, #76]	@ (8001ee4 <HAL_InitTick+0x64>)
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b11      	ldr	r3, [pc, #68]	@ (8001ee0 <HAL_InitTick+0x60>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f000 f971 	bl	8002192 <HAL_SYSTICK_Config>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e00e      	b.n	8001ed8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b0f      	cmp	r3, #15
 8001ebe:	d80a      	bhi.n	8001ed6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec8:	f000 f93b 	bl	8002142 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ecc:	4a06      	ldr	r2, [pc, #24]	@ (8001ee8 <HAL_InitTick+0x68>)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	e000      	b.n	8001ed8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	2400002c 	.word	0x2400002c
 8001ee4:	24000000 	.word	0x24000000
 8001ee8:	24000028 	.word	0x24000028

08001eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001ef0:	4b06      	ldr	r3, [pc, #24]	@ (8001f0c <HAL_IncTick+0x20>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <HAL_IncTick+0x24>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4413      	add	r3, r2
 8001efc:	4a04      	ldr	r2, [pc, #16]	@ (8001f10 <HAL_IncTick+0x24>)
 8001efe:	6013      	str	r3, [r2, #0]
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	2400002c 	.word	0x2400002c
 8001f10:	24000800 	.word	0x24000800

08001f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return uwTick;
 8001f18:	4b03      	ldr	r3, [pc, #12]	@ (8001f28 <HAL_GetTick+0x14>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	24000800 	.word	0x24000800

08001f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f34:	f7ff ffee 	bl	8001f14 <HAL_GetTick>
 8001f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f44:	d005      	beq.n	8001f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f46:	4b0a      	ldr	r3, [pc, #40]	@ (8001f70 <HAL_Delay+0x44>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4413      	add	r3, r2
 8001f50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f52:	bf00      	nop
 8001f54:	f7ff ffde 	bl	8001f14 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d8f7      	bhi.n	8001f54 <HAL_Delay+0x28>
  {
  }
}
 8001f64:	bf00      	nop
 8001f66:	bf00      	nop
 8001f68:	3710      	adds	r7, #16
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}
 8001f6e:	bf00      	nop
 8001f70:	2400002c 	.word	0x2400002c

08001f74 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001f78:	4b03      	ldr	r3, [pc, #12]	@ (8001f88 <HAL_GetREVID+0x14>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	0c1b      	lsrs	r3, r3, #16
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	5c001000 	.word	0x5c001000

08001f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fcc <__NVIC_SetPriorityGrouping+0x40>)
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa2:	68ba      	ldr	r2, [r7, #8]
 8001fa4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001fb4:	4b06      	ldr	r3, [pc, #24]	@ (8001fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fba:	4a04      	ldr	r2, [pc, #16]	@ (8001fcc <__NVIC_SetPriorityGrouping+0x40>)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	60d3      	str	r3, [r2, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000ed00 	.word	0xe000ed00
 8001fd0:	05fa0000 	.word	0x05fa0000

08001fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd8:	4b04      	ldr	r3, [pc, #16]	@ (8001fec <__NVIC_GetPriorityGrouping+0x18>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	0a1b      	lsrs	r3, r3, #8
 8001fde:	f003 0307 	and.w	r3, r3, #7
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ffa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	db0b      	blt.n	800201a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002002:	88fb      	ldrh	r3, [r7, #6]
 8002004:	f003 021f 	and.w	r2, r3, #31
 8002008:	4907      	ldr	r1, [pc, #28]	@ (8002028 <__NVIC_EnableIRQ+0x38>)
 800200a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800200e:	095b      	lsrs	r3, r3, #5
 8002010:	2001      	movs	r0, #1
 8002012:	fa00 f202 	lsl.w	r2, r0, r2
 8002016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	e000e100 	.word	0xe000e100

0800202c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	6039      	str	r1, [r7, #0]
 8002036:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002038:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800203c:	2b00      	cmp	r3, #0
 800203e:	db0a      	blt.n	8002056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	b2da      	uxtb	r2, r3
 8002044:	490c      	ldr	r1, [pc, #48]	@ (8002078 <__NVIC_SetPriority+0x4c>)
 8002046:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800204a:	0112      	lsls	r2, r2, #4
 800204c:	b2d2      	uxtb	r2, r2
 800204e:	440b      	add	r3, r1
 8002050:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002054:	e00a      	b.n	800206c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	b2da      	uxtb	r2, r3
 800205a:	4908      	ldr	r1, [pc, #32]	@ (800207c <__NVIC_SetPriority+0x50>)
 800205c:	88fb      	ldrh	r3, [r7, #6]
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	3b04      	subs	r3, #4
 8002064:	0112      	lsls	r2, r2, #4
 8002066:	b2d2      	uxtb	r2, r2
 8002068:	440b      	add	r3, r1
 800206a:	761a      	strb	r2, [r3, #24]
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	e000e100 	.word	0xe000e100
 800207c:	e000ed00 	.word	0xe000ed00

08002080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002080:	b480      	push	{r7}
 8002082:	b089      	sub	sp, #36	@ 0x24
 8002084:	af00      	add	r7, sp, #0
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	60b9      	str	r1, [r7, #8]
 800208a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f1c3 0307 	rsb	r3, r3, #7
 800209a:	2b04      	cmp	r3, #4
 800209c:	bf28      	it	cs
 800209e:	2304      	movcs	r3, #4
 80020a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	3304      	adds	r3, #4
 80020a6:	2b06      	cmp	r3, #6
 80020a8:	d902      	bls.n	80020b0 <NVIC_EncodePriority+0x30>
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3b03      	subs	r3, #3
 80020ae:	e000      	b.n	80020b2 <NVIC_EncodePriority+0x32>
 80020b0:	2300      	movs	r3, #0
 80020b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b4:	f04f 32ff 	mov.w	r2, #4294967295
 80020b8:	69bb      	ldr	r3, [r7, #24]
 80020ba:	fa02 f303 	lsl.w	r3, r2, r3
 80020be:	43da      	mvns	r2, r3
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	401a      	ands	r2, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c8:	f04f 31ff 	mov.w	r1, #4294967295
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	fa01 f303 	lsl.w	r3, r1, r3
 80020d2:	43d9      	mvns	r1, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d8:	4313      	orrs	r3, r2
         );
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3724      	adds	r7, #36	@ 0x24
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
	...

080020e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3b01      	subs	r3, #1
 80020f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020f8:	d301      	bcc.n	80020fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020fa:	2301      	movs	r3, #1
 80020fc:	e00f      	b.n	800211e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002128 <SysTick_Config+0x40>)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002106:	210f      	movs	r1, #15
 8002108:	f04f 30ff 	mov.w	r0, #4294967295
 800210c:	f7ff ff8e 	bl	800202c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002110:	4b05      	ldr	r3, [pc, #20]	@ (8002128 <SysTick_Config+0x40>)
 8002112:	2200      	movs	r2, #0
 8002114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002116:	4b04      	ldr	r3, [pc, #16]	@ (8002128 <SysTick_Config+0x40>)
 8002118:	2207      	movs	r2, #7
 800211a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3708      	adds	r7, #8
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	e000e010 	.word	0xe000e010

0800212c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002134:	6878      	ldr	r0, [r7, #4]
 8002136:	f7ff ff29 	bl	8001f8c <__NVIC_SetPriorityGrouping>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b086      	sub	sp, #24
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	60b9      	str	r1, [r7, #8]
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002150:	f7ff ff40 	bl	8001fd4 <__NVIC_GetPriorityGrouping>
 8002154:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002156:	687a      	ldr	r2, [r7, #4]
 8002158:	68b9      	ldr	r1, [r7, #8]
 800215a:	6978      	ldr	r0, [r7, #20]
 800215c:	f7ff ff90 	bl	8002080 <NVIC_EncodePriority>
 8002160:	4602      	mov	r2, r0
 8002162:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002166:	4611      	mov	r1, r2
 8002168:	4618      	mov	r0, r3
 800216a:	f7ff ff5f 	bl	800202c <__NVIC_SetPriority>
}
 800216e:	bf00      	nop
 8002170:	3718      	adds	r7, #24
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002176:	b580      	push	{r7, lr}
 8002178:	b082      	sub	sp, #8
 800217a:	af00      	add	r7, sp, #0
 800217c:	4603      	mov	r3, r0
 800217e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002180:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff33 	bl	8001ff0 <__NVIC_EnableIRQ>
}
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff ffa4 	bl	80020e8 <SysTick_Config>
 80021a0:	4603      	mov	r3, r0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 80021b0:	4b07      	ldr	r3, [pc, #28]	@ (80021d0 <HAL_GetCurrentCPUID+0x24>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	091b      	lsrs	r3, r3, #4
 80021b6:	f003 030f 	and.w	r3, r3, #15
 80021ba:	2b07      	cmp	r3, #7
 80021bc:	d101      	bne.n	80021c2 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 80021be:	2303      	movs	r3, #3
 80021c0:	e000      	b.n	80021c4 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 80021c2:	2301      	movs	r3, #1
  }
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80021dc:	f7ff fe9a 	bl	8001f14 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e316      	b.n	800281a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a66      	ldr	r2, [pc, #408]	@ (800238c <HAL_DMA_Init+0x1b8>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d04a      	beq.n	800228c <HAL_DMA_Init+0xb8>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a65      	ldr	r2, [pc, #404]	@ (8002390 <HAL_DMA_Init+0x1bc>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d045      	beq.n	800228c <HAL_DMA_Init+0xb8>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a63      	ldr	r2, [pc, #396]	@ (8002394 <HAL_DMA_Init+0x1c0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d040      	beq.n	800228c <HAL_DMA_Init+0xb8>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a62      	ldr	r2, [pc, #392]	@ (8002398 <HAL_DMA_Init+0x1c4>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d03b      	beq.n	800228c <HAL_DMA_Init+0xb8>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a60      	ldr	r2, [pc, #384]	@ (800239c <HAL_DMA_Init+0x1c8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d036      	beq.n	800228c <HAL_DMA_Init+0xb8>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a5f      	ldr	r2, [pc, #380]	@ (80023a0 <HAL_DMA_Init+0x1cc>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d031      	beq.n	800228c <HAL_DMA_Init+0xb8>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a5d      	ldr	r2, [pc, #372]	@ (80023a4 <HAL_DMA_Init+0x1d0>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d02c      	beq.n	800228c <HAL_DMA_Init+0xb8>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a5c      	ldr	r2, [pc, #368]	@ (80023a8 <HAL_DMA_Init+0x1d4>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d027      	beq.n	800228c <HAL_DMA_Init+0xb8>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a5a      	ldr	r2, [pc, #360]	@ (80023ac <HAL_DMA_Init+0x1d8>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d022      	beq.n	800228c <HAL_DMA_Init+0xb8>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a59      	ldr	r2, [pc, #356]	@ (80023b0 <HAL_DMA_Init+0x1dc>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d01d      	beq.n	800228c <HAL_DMA_Init+0xb8>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a57      	ldr	r2, [pc, #348]	@ (80023b4 <HAL_DMA_Init+0x1e0>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d018      	beq.n	800228c <HAL_DMA_Init+0xb8>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a56      	ldr	r2, [pc, #344]	@ (80023b8 <HAL_DMA_Init+0x1e4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d013      	beq.n	800228c <HAL_DMA_Init+0xb8>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a54      	ldr	r2, [pc, #336]	@ (80023bc <HAL_DMA_Init+0x1e8>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d00e      	beq.n	800228c <HAL_DMA_Init+0xb8>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a53      	ldr	r2, [pc, #332]	@ (80023c0 <HAL_DMA_Init+0x1ec>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d009      	beq.n	800228c <HAL_DMA_Init+0xb8>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a51      	ldr	r2, [pc, #324]	@ (80023c4 <HAL_DMA_Init+0x1f0>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d004      	beq.n	800228c <HAL_DMA_Init+0xb8>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a50      	ldr	r2, [pc, #320]	@ (80023c8 <HAL_DMA_Init+0x1f4>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d101      	bne.n	8002290 <HAL_DMA_Init+0xbc>
 800228c:	2301      	movs	r3, #1
 800228e:	e000      	b.n	8002292 <HAL_DMA_Init+0xbe>
 8002290:	2300      	movs	r3, #0
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 813b 	beq.w	800250e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a37      	ldr	r2, [pc, #220]	@ (800238c <HAL_DMA_Init+0x1b8>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d04a      	beq.n	8002348 <HAL_DMA_Init+0x174>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a36      	ldr	r2, [pc, #216]	@ (8002390 <HAL_DMA_Init+0x1bc>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	d045      	beq.n	8002348 <HAL_DMA_Init+0x174>
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a34      	ldr	r2, [pc, #208]	@ (8002394 <HAL_DMA_Init+0x1c0>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d040      	beq.n	8002348 <HAL_DMA_Init+0x174>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a33      	ldr	r2, [pc, #204]	@ (8002398 <HAL_DMA_Init+0x1c4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d03b      	beq.n	8002348 <HAL_DMA_Init+0x174>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a31      	ldr	r2, [pc, #196]	@ (800239c <HAL_DMA_Init+0x1c8>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d036      	beq.n	8002348 <HAL_DMA_Init+0x174>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a30      	ldr	r2, [pc, #192]	@ (80023a0 <HAL_DMA_Init+0x1cc>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d031      	beq.n	8002348 <HAL_DMA_Init+0x174>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a2e      	ldr	r2, [pc, #184]	@ (80023a4 <HAL_DMA_Init+0x1d0>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d02c      	beq.n	8002348 <HAL_DMA_Init+0x174>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a2d      	ldr	r2, [pc, #180]	@ (80023a8 <HAL_DMA_Init+0x1d4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d027      	beq.n	8002348 <HAL_DMA_Init+0x174>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a2b      	ldr	r2, [pc, #172]	@ (80023ac <HAL_DMA_Init+0x1d8>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d022      	beq.n	8002348 <HAL_DMA_Init+0x174>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a2a      	ldr	r2, [pc, #168]	@ (80023b0 <HAL_DMA_Init+0x1dc>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d01d      	beq.n	8002348 <HAL_DMA_Init+0x174>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a28      	ldr	r2, [pc, #160]	@ (80023b4 <HAL_DMA_Init+0x1e0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d018      	beq.n	8002348 <HAL_DMA_Init+0x174>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a27      	ldr	r2, [pc, #156]	@ (80023b8 <HAL_DMA_Init+0x1e4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d013      	beq.n	8002348 <HAL_DMA_Init+0x174>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a25      	ldr	r2, [pc, #148]	@ (80023bc <HAL_DMA_Init+0x1e8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d00e      	beq.n	8002348 <HAL_DMA_Init+0x174>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a24      	ldr	r2, [pc, #144]	@ (80023c0 <HAL_DMA_Init+0x1ec>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d009      	beq.n	8002348 <HAL_DMA_Init+0x174>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a22      	ldr	r2, [pc, #136]	@ (80023c4 <HAL_DMA_Init+0x1f0>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d004      	beq.n	8002348 <HAL_DMA_Init+0x174>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a21      	ldr	r2, [pc, #132]	@ (80023c8 <HAL_DMA_Init+0x1f4>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d108      	bne.n	800235a <HAL_DMA_Init+0x186>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f022 0201 	bic.w	r2, r2, #1
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	e007      	b.n	800236a <HAL_DMA_Init+0x196>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0201 	bic.w	r2, r2, #1
 8002368:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800236a:	e02f      	b.n	80023cc <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800236c:	f7ff fdd2 	bl	8001f14 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b05      	cmp	r3, #5
 8002378:	d928      	bls.n	80023cc <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2220      	movs	r2, #32
 800237e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2203      	movs	r2, #3
 8002384:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e246      	b.n	800281a <HAL_DMA_Init+0x646>
 800238c:	40020010 	.word	0x40020010
 8002390:	40020028 	.word	0x40020028
 8002394:	40020040 	.word	0x40020040
 8002398:	40020058 	.word	0x40020058
 800239c:	40020070 	.word	0x40020070
 80023a0:	40020088 	.word	0x40020088
 80023a4:	400200a0 	.word	0x400200a0
 80023a8:	400200b8 	.word	0x400200b8
 80023ac:	40020410 	.word	0x40020410
 80023b0:	40020428 	.word	0x40020428
 80023b4:	40020440 	.word	0x40020440
 80023b8:	40020458 	.word	0x40020458
 80023bc:	40020470 	.word	0x40020470
 80023c0:	40020488 	.word	0x40020488
 80023c4:	400204a0 	.word	0x400204a0
 80023c8:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0301 	and.w	r3, r3, #1
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1c8      	bne.n	800236c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	4b83      	ldr	r3, [pc, #524]	@ (80025f4 <HAL_DMA_Init+0x420>)
 80023e6:	4013      	ands	r3, r2
 80023e8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80023f2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023fe:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800240a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6a1b      	ldr	r3, [r3, #32]
 8002410:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8002412:	697a      	ldr	r2, [r7, #20]
 8002414:	4313      	orrs	r3, r2
 8002416:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241c:	2b04      	cmp	r3, #4
 800241e:	d107      	bne.n	8002430 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002428:	4313      	orrs	r3, r2
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	4313      	orrs	r3, r2
 800242e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002430:	4b71      	ldr	r3, [pc, #452]	@ (80025f8 <HAL_DMA_Init+0x424>)
 8002432:	681a      	ldr	r2, [r3, #0]
 8002434:	4b71      	ldr	r3, [pc, #452]	@ (80025fc <HAL_DMA_Init+0x428>)
 8002436:	4013      	ands	r3, r2
 8002438:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800243c:	d328      	bcc.n	8002490 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b28      	cmp	r3, #40	@ 0x28
 8002444:	d903      	bls.n	800244e <HAL_DMA_Init+0x27a>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	2b2e      	cmp	r3, #46	@ 0x2e
 800244c:	d917      	bls.n	800247e <HAL_DMA_Init+0x2aa>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b3e      	cmp	r3, #62	@ 0x3e
 8002454:	d903      	bls.n	800245e <HAL_DMA_Init+0x28a>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b42      	cmp	r3, #66	@ 0x42
 800245c:	d90f      	bls.n	800247e <HAL_DMA_Init+0x2aa>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b46      	cmp	r3, #70	@ 0x46
 8002464:	d903      	bls.n	800246e <HAL_DMA_Init+0x29a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b48      	cmp	r3, #72	@ 0x48
 800246c:	d907      	bls.n	800247e <HAL_DMA_Init+0x2aa>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	2b4e      	cmp	r3, #78	@ 0x4e
 8002474:	d905      	bls.n	8002482 <HAL_DMA_Init+0x2ae>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	2b52      	cmp	r3, #82	@ 0x52
 800247c:	d801      	bhi.n	8002482 <HAL_DMA_Init+0x2ae>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <HAL_DMA_Init+0x2b0>
 8002482:	2300      	movs	r3, #0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800248e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	697a      	ldr	r2, [r7, #20]
 8002496:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	f023 0307 	bic.w	r3, r3, #7
 80024a6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b6:	2b04      	cmp	r3, #4
 80024b8:	d117      	bne.n	80024ea <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00e      	beq.n	80024ea <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f001 fdcf 	bl	8004070 <DMA_CheckFifoParam>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d008      	beq.n	80024ea <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2240      	movs	r2, #64	@ 0x40
 80024dc:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2201      	movs	r2, #1
 80024e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e197      	b.n	800281a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024f2:	6878      	ldr	r0, [r7, #4]
 80024f4:	f001 fd0a 	bl	8003f0c <DMA_CalcBaseAndBitshift>
 80024f8:	4603      	mov	r3, r0
 80024fa:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002500:	f003 031f 	and.w	r3, r3, #31
 8002504:	223f      	movs	r2, #63	@ 0x3f
 8002506:	409a      	lsls	r2, r3
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	609a      	str	r2, [r3, #8]
 800250c:	e0cd      	b.n	80026aa <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a3b      	ldr	r2, [pc, #236]	@ (8002600 <HAL_DMA_Init+0x42c>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d022      	beq.n	800255e <HAL_DMA_Init+0x38a>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a39      	ldr	r2, [pc, #228]	@ (8002604 <HAL_DMA_Init+0x430>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d01d      	beq.n	800255e <HAL_DMA_Init+0x38a>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a38      	ldr	r2, [pc, #224]	@ (8002608 <HAL_DMA_Init+0x434>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d018      	beq.n	800255e <HAL_DMA_Init+0x38a>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a36      	ldr	r2, [pc, #216]	@ (800260c <HAL_DMA_Init+0x438>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d013      	beq.n	800255e <HAL_DMA_Init+0x38a>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a35      	ldr	r2, [pc, #212]	@ (8002610 <HAL_DMA_Init+0x43c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d00e      	beq.n	800255e <HAL_DMA_Init+0x38a>
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a33      	ldr	r2, [pc, #204]	@ (8002614 <HAL_DMA_Init+0x440>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d009      	beq.n	800255e <HAL_DMA_Init+0x38a>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a32      	ldr	r2, [pc, #200]	@ (8002618 <HAL_DMA_Init+0x444>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d004      	beq.n	800255e <HAL_DMA_Init+0x38a>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a30      	ldr	r2, [pc, #192]	@ (800261c <HAL_DMA_Init+0x448>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d101      	bne.n	8002562 <HAL_DMA_Init+0x38e>
 800255e:	2301      	movs	r3, #1
 8002560:	e000      	b.n	8002564 <HAL_DMA_Init+0x390>
 8002562:	2300      	movs	r3, #0
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 8097 	beq.w	8002698 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a24      	ldr	r2, [pc, #144]	@ (8002600 <HAL_DMA_Init+0x42c>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d021      	beq.n	80025b8 <HAL_DMA_Init+0x3e4>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a22      	ldr	r2, [pc, #136]	@ (8002604 <HAL_DMA_Init+0x430>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d01c      	beq.n	80025b8 <HAL_DMA_Init+0x3e4>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a21      	ldr	r2, [pc, #132]	@ (8002608 <HAL_DMA_Init+0x434>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d017      	beq.n	80025b8 <HAL_DMA_Init+0x3e4>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a1f      	ldr	r2, [pc, #124]	@ (800260c <HAL_DMA_Init+0x438>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d012      	beq.n	80025b8 <HAL_DMA_Init+0x3e4>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a1e      	ldr	r2, [pc, #120]	@ (8002610 <HAL_DMA_Init+0x43c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d00d      	beq.n	80025b8 <HAL_DMA_Init+0x3e4>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a1c      	ldr	r2, [pc, #112]	@ (8002614 <HAL_DMA_Init+0x440>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d008      	beq.n	80025b8 <HAL_DMA_Init+0x3e4>
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a1b      	ldr	r2, [pc, #108]	@ (8002618 <HAL_DMA_Init+0x444>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d003      	beq.n	80025b8 <HAL_DMA_Init+0x3e4>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a19      	ldr	r2, [pc, #100]	@ (800261c <HAL_DMA_Init+0x448>)
 80025b6:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	4b13      	ldr	r3, [pc, #76]	@ (8002620 <HAL_DMA_Init+0x44c>)
 80025d4:	4013      	ands	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	2b40      	cmp	r3, #64	@ 0x40
 80025de:	d021      	beq.n	8002624 <HAL_DMA_Init+0x450>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2b80      	cmp	r3, #128	@ 0x80
 80025e6:	d102      	bne.n	80025ee <HAL_DMA_Init+0x41a>
 80025e8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80025ec:	e01b      	b.n	8002626 <HAL_DMA_Init+0x452>
 80025ee:	2300      	movs	r3, #0
 80025f0:	e019      	b.n	8002626 <HAL_DMA_Init+0x452>
 80025f2:	bf00      	nop
 80025f4:	fe10803f 	.word	0xfe10803f
 80025f8:	5c001000 	.word	0x5c001000
 80025fc:	ffff0000 	.word	0xffff0000
 8002600:	58025408 	.word	0x58025408
 8002604:	5802541c 	.word	0x5802541c
 8002608:	58025430 	.word	0x58025430
 800260c:	58025444 	.word	0x58025444
 8002610:	58025458 	.word	0x58025458
 8002614:	5802546c 	.word	0x5802546c
 8002618:	58025480 	.word	0x58025480
 800261c:	58025494 	.word	0x58025494
 8002620:	fffe000f 	.word	0xfffe000f
 8002624:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68d2      	ldr	r2, [r2, #12]
 800262a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800262c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	691b      	ldr	r3, [r3, #16]
 8002632:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002634:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800263c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002644:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69db      	ldr	r3, [r3, #28]
 800264a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800264c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6a1b      	ldr	r3, [r3, #32]
 8002652:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002654:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	4313      	orrs	r3, r2
 800265a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	461a      	mov	r2, r3
 800266a:	4b6e      	ldr	r3, [pc, #440]	@ (8002824 <HAL_DMA_Init+0x650>)
 800266c:	4413      	add	r3, r2
 800266e:	4a6e      	ldr	r2, [pc, #440]	@ (8002828 <HAL_DMA_Init+0x654>)
 8002670:	fba2 2303 	umull	r2, r3, r2, r3
 8002674:	091b      	lsrs	r3, r3, #4
 8002676:	009a      	lsls	r2, r3, #2
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f001 fc45 	bl	8003f0c <DMA_CalcBaseAndBitshift>
 8002682:	4603      	mov	r3, r0
 8002684:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800268a:	f003 031f 	and.w	r3, r3, #31
 800268e:	2201      	movs	r2, #1
 8002690:	409a      	lsls	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	605a      	str	r2, [r3, #4]
 8002696:	e008      	b.n	80026aa <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2240      	movs	r2, #64	@ 0x40
 800269c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2203      	movs	r2, #3
 80026a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e0b7      	b.n	800281a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a5f      	ldr	r2, [pc, #380]	@ (800282c <HAL_DMA_Init+0x658>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d072      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a5d      	ldr	r2, [pc, #372]	@ (8002830 <HAL_DMA_Init+0x65c>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d06d      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a5c      	ldr	r2, [pc, #368]	@ (8002834 <HAL_DMA_Init+0x660>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d068      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a5a      	ldr	r2, [pc, #360]	@ (8002838 <HAL_DMA_Init+0x664>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d063      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a59      	ldr	r2, [pc, #356]	@ (800283c <HAL_DMA_Init+0x668>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d05e      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a57      	ldr	r2, [pc, #348]	@ (8002840 <HAL_DMA_Init+0x66c>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d059      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a56      	ldr	r2, [pc, #344]	@ (8002844 <HAL_DMA_Init+0x670>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d054      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a54      	ldr	r2, [pc, #336]	@ (8002848 <HAL_DMA_Init+0x674>)
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d04f      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a53      	ldr	r2, [pc, #332]	@ (800284c <HAL_DMA_Init+0x678>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d04a      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a51      	ldr	r2, [pc, #324]	@ (8002850 <HAL_DMA_Init+0x67c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d045      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a50      	ldr	r2, [pc, #320]	@ (8002854 <HAL_DMA_Init+0x680>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d040      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a4e      	ldr	r2, [pc, #312]	@ (8002858 <HAL_DMA_Init+0x684>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d03b      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a4d      	ldr	r2, [pc, #308]	@ (800285c <HAL_DMA_Init+0x688>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d036      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a4b      	ldr	r2, [pc, #300]	@ (8002860 <HAL_DMA_Init+0x68c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d031      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a4a      	ldr	r2, [pc, #296]	@ (8002864 <HAL_DMA_Init+0x690>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d02c      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a48      	ldr	r2, [pc, #288]	@ (8002868 <HAL_DMA_Init+0x694>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d027      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a47      	ldr	r2, [pc, #284]	@ (800286c <HAL_DMA_Init+0x698>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d022      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a45      	ldr	r2, [pc, #276]	@ (8002870 <HAL_DMA_Init+0x69c>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d01d      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a44      	ldr	r2, [pc, #272]	@ (8002874 <HAL_DMA_Init+0x6a0>)
 8002764:	4293      	cmp	r3, r2
 8002766:	d018      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a42      	ldr	r2, [pc, #264]	@ (8002878 <HAL_DMA_Init+0x6a4>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d013      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a41      	ldr	r2, [pc, #260]	@ (800287c <HAL_DMA_Init+0x6a8>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d00e      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a3f      	ldr	r2, [pc, #252]	@ (8002880 <HAL_DMA_Init+0x6ac>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d009      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a3e      	ldr	r2, [pc, #248]	@ (8002884 <HAL_DMA_Init+0x6b0>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d004      	beq.n	800279a <HAL_DMA_Init+0x5c6>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a3c      	ldr	r2, [pc, #240]	@ (8002888 <HAL_DMA_Init+0x6b4>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d101      	bne.n	800279e <HAL_DMA_Init+0x5ca>
 800279a:	2301      	movs	r3, #1
 800279c:	e000      	b.n	80027a0 <HAL_DMA_Init+0x5cc>
 800279e:	2300      	movs	r3, #0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d032      	beq.n	800280a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f001 fcdf 	bl	8004168 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	2b80      	cmp	r3, #128	@ 0x80
 80027b0:	d102      	bne.n	80027b8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80027cc:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d010      	beq.n	80027f8 <HAL_DMA_Init+0x624>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d80c      	bhi.n	80027f8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f001 fd5c 	bl	800429c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	e008      	b.n	800280a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2200      	movs	r2, #0
 8002802:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	a7fdabf8 	.word	0xa7fdabf8
 8002828:	cccccccd 	.word	0xcccccccd
 800282c:	40020010 	.word	0x40020010
 8002830:	40020028 	.word	0x40020028
 8002834:	40020040 	.word	0x40020040
 8002838:	40020058 	.word	0x40020058
 800283c:	40020070 	.word	0x40020070
 8002840:	40020088 	.word	0x40020088
 8002844:	400200a0 	.word	0x400200a0
 8002848:	400200b8 	.word	0x400200b8
 800284c:	40020410 	.word	0x40020410
 8002850:	40020428 	.word	0x40020428
 8002854:	40020440 	.word	0x40020440
 8002858:	40020458 	.word	0x40020458
 800285c:	40020470 	.word	0x40020470
 8002860:	40020488 	.word	0x40020488
 8002864:	400204a0 	.word	0x400204a0
 8002868:	400204b8 	.word	0x400204b8
 800286c:	58025408 	.word	0x58025408
 8002870:	5802541c 	.word	0x5802541c
 8002874:	58025430 	.word	0x58025430
 8002878:	58025444 	.word	0x58025444
 800287c:	58025458 	.word	0x58025458
 8002880:	5802546c 	.word	0x5802546c
 8002884:	58025480 	.word	0x58025480
 8002888:	58025494 	.word	0x58025494

0800288c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800289a:	2300      	movs	r3, #0
 800289c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e226      	b.n	8002cf6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <HAL_DMA_Start_IT+0x2a>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e21f      	b.n	8002cf6 <HAL_DMA_Start_IT+0x46a>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	f040 820a 	bne.w	8002ce0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2202      	movs	r2, #2
 80028d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2200      	movs	r2, #0
 80028d8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a68      	ldr	r2, [pc, #416]	@ (8002a80 <HAL_DMA_Start_IT+0x1f4>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d04a      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a66      	ldr	r2, [pc, #408]	@ (8002a84 <HAL_DMA_Start_IT+0x1f8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d045      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a65      	ldr	r2, [pc, #404]	@ (8002a88 <HAL_DMA_Start_IT+0x1fc>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d040      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a63      	ldr	r2, [pc, #396]	@ (8002a8c <HAL_DMA_Start_IT+0x200>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d03b      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a62      	ldr	r2, [pc, #392]	@ (8002a90 <HAL_DMA_Start_IT+0x204>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d036      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a60      	ldr	r2, [pc, #384]	@ (8002a94 <HAL_DMA_Start_IT+0x208>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d031      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a5f      	ldr	r2, [pc, #380]	@ (8002a98 <HAL_DMA_Start_IT+0x20c>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d02c      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a5d      	ldr	r2, [pc, #372]	@ (8002a9c <HAL_DMA_Start_IT+0x210>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d027      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a5c      	ldr	r2, [pc, #368]	@ (8002aa0 <HAL_DMA_Start_IT+0x214>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d022      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a5a      	ldr	r2, [pc, #360]	@ (8002aa4 <HAL_DMA_Start_IT+0x218>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d01d      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a59      	ldr	r2, [pc, #356]	@ (8002aa8 <HAL_DMA_Start_IT+0x21c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d018      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a57      	ldr	r2, [pc, #348]	@ (8002aac <HAL_DMA_Start_IT+0x220>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d013      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a56      	ldr	r2, [pc, #344]	@ (8002ab0 <HAL_DMA_Start_IT+0x224>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d00e      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a54      	ldr	r2, [pc, #336]	@ (8002ab4 <HAL_DMA_Start_IT+0x228>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d009      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a53      	ldr	r2, [pc, #332]	@ (8002ab8 <HAL_DMA_Start_IT+0x22c>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d004      	beq.n	800297a <HAL_DMA_Start_IT+0xee>
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a51      	ldr	r2, [pc, #324]	@ (8002abc <HAL_DMA_Start_IT+0x230>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d108      	bne.n	800298c <HAL_DMA_Start_IT+0x100>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f022 0201 	bic.w	r2, r2, #1
 8002988:	601a      	str	r2, [r3, #0]
 800298a:	e007      	b.n	800299c <HAL_DMA_Start_IT+0x110>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0201 	bic.w	r2, r2, #1
 800299a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f001 f906 	bl	8003bb4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a34      	ldr	r2, [pc, #208]	@ (8002a80 <HAL_DMA_Start_IT+0x1f4>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d04a      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a33      	ldr	r2, [pc, #204]	@ (8002a84 <HAL_DMA_Start_IT+0x1f8>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d045      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a31      	ldr	r2, [pc, #196]	@ (8002a88 <HAL_DMA_Start_IT+0x1fc>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d040      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a30      	ldr	r2, [pc, #192]	@ (8002a8c <HAL_DMA_Start_IT+0x200>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d03b      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a2e      	ldr	r2, [pc, #184]	@ (8002a90 <HAL_DMA_Start_IT+0x204>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d036      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a2d      	ldr	r2, [pc, #180]	@ (8002a94 <HAL_DMA_Start_IT+0x208>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d031      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a2b      	ldr	r2, [pc, #172]	@ (8002a98 <HAL_DMA_Start_IT+0x20c>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d02c      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a2a      	ldr	r2, [pc, #168]	@ (8002a9c <HAL_DMA_Start_IT+0x210>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d027      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a28      	ldr	r2, [pc, #160]	@ (8002aa0 <HAL_DMA_Start_IT+0x214>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d022      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a27      	ldr	r2, [pc, #156]	@ (8002aa4 <HAL_DMA_Start_IT+0x218>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d01d      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a25      	ldr	r2, [pc, #148]	@ (8002aa8 <HAL_DMA_Start_IT+0x21c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d018      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a24      	ldr	r2, [pc, #144]	@ (8002aac <HAL_DMA_Start_IT+0x220>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d013      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a22      	ldr	r2, [pc, #136]	@ (8002ab0 <HAL_DMA_Start_IT+0x224>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d00e      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a21      	ldr	r2, [pc, #132]	@ (8002ab4 <HAL_DMA_Start_IT+0x228>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d009      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a1f      	ldr	r2, [pc, #124]	@ (8002ab8 <HAL_DMA_Start_IT+0x22c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d004      	beq.n	8002a48 <HAL_DMA_Start_IT+0x1bc>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a1e      	ldr	r2, [pc, #120]	@ (8002abc <HAL_DMA_Start_IT+0x230>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d101      	bne.n	8002a4c <HAL_DMA_Start_IT+0x1c0>
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e000      	b.n	8002a4e <HAL_DMA_Start_IT+0x1c2>
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d036      	beq.n	8002ac0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f023 021e 	bic.w	r2, r3, #30
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f042 0216 	orr.w	r2, r2, #22
 8002a64:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d03e      	beq.n	8002aec <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f042 0208 	orr.w	r2, r2, #8
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	e035      	b.n	8002aec <HAL_DMA_Start_IT+0x260>
 8002a80:	40020010 	.word	0x40020010
 8002a84:	40020028 	.word	0x40020028
 8002a88:	40020040 	.word	0x40020040
 8002a8c:	40020058 	.word	0x40020058
 8002a90:	40020070 	.word	0x40020070
 8002a94:	40020088 	.word	0x40020088
 8002a98:	400200a0 	.word	0x400200a0
 8002a9c:	400200b8 	.word	0x400200b8
 8002aa0:	40020410 	.word	0x40020410
 8002aa4:	40020428 	.word	0x40020428
 8002aa8:	40020440 	.word	0x40020440
 8002aac:	40020458 	.word	0x40020458
 8002ab0:	40020470 	.word	0x40020470
 8002ab4:	40020488 	.word	0x40020488
 8002ab8:	400204a0 	.word	0x400204a0
 8002abc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f023 020e 	bic.w	r2, r3, #14
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 020a 	orr.w	r2, r2, #10
 8002ad2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d007      	beq.n	8002aec <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0204 	orr.w	r2, r2, #4
 8002aea:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a83      	ldr	r2, [pc, #524]	@ (8002d00 <HAL_DMA_Start_IT+0x474>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d072      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a82      	ldr	r2, [pc, #520]	@ (8002d04 <HAL_DMA_Start_IT+0x478>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d06d      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a80      	ldr	r2, [pc, #512]	@ (8002d08 <HAL_DMA_Start_IT+0x47c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d068      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a7f      	ldr	r2, [pc, #508]	@ (8002d0c <HAL_DMA_Start_IT+0x480>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d063      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a7d      	ldr	r2, [pc, #500]	@ (8002d10 <HAL_DMA_Start_IT+0x484>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d05e      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a7c      	ldr	r2, [pc, #496]	@ (8002d14 <HAL_DMA_Start_IT+0x488>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d059      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a7a      	ldr	r2, [pc, #488]	@ (8002d18 <HAL_DMA_Start_IT+0x48c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d054      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a79      	ldr	r2, [pc, #484]	@ (8002d1c <HAL_DMA_Start_IT+0x490>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d04f      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a77      	ldr	r2, [pc, #476]	@ (8002d20 <HAL_DMA_Start_IT+0x494>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d04a      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a76      	ldr	r2, [pc, #472]	@ (8002d24 <HAL_DMA_Start_IT+0x498>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d045      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a74      	ldr	r2, [pc, #464]	@ (8002d28 <HAL_DMA_Start_IT+0x49c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d040      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a73      	ldr	r2, [pc, #460]	@ (8002d2c <HAL_DMA_Start_IT+0x4a0>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d03b      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a71      	ldr	r2, [pc, #452]	@ (8002d30 <HAL_DMA_Start_IT+0x4a4>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d036      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a70      	ldr	r2, [pc, #448]	@ (8002d34 <HAL_DMA_Start_IT+0x4a8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d031      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a6e      	ldr	r2, [pc, #440]	@ (8002d38 <HAL_DMA_Start_IT+0x4ac>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d02c      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a6d      	ldr	r2, [pc, #436]	@ (8002d3c <HAL_DMA_Start_IT+0x4b0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d027      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a6b      	ldr	r2, [pc, #428]	@ (8002d40 <HAL_DMA_Start_IT+0x4b4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d022      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a6a      	ldr	r2, [pc, #424]	@ (8002d44 <HAL_DMA_Start_IT+0x4b8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d01d      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a68      	ldr	r2, [pc, #416]	@ (8002d48 <HAL_DMA_Start_IT+0x4bc>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d018      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a67      	ldr	r2, [pc, #412]	@ (8002d4c <HAL_DMA_Start_IT+0x4c0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d013      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a65      	ldr	r2, [pc, #404]	@ (8002d50 <HAL_DMA_Start_IT+0x4c4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00e      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a64      	ldr	r2, [pc, #400]	@ (8002d54 <HAL_DMA_Start_IT+0x4c8>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d009      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a62      	ldr	r2, [pc, #392]	@ (8002d58 <HAL_DMA_Start_IT+0x4cc>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d004      	beq.n	8002bdc <HAL_DMA_Start_IT+0x350>
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a61      	ldr	r2, [pc, #388]	@ (8002d5c <HAL_DMA_Start_IT+0x4d0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d101      	bne.n	8002be0 <HAL_DMA_Start_IT+0x354>
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e000      	b.n	8002be2 <HAL_DMA_Start_IT+0x356>
 8002be0:	2300      	movs	r3, #0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d01a      	beq.n	8002c1c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d007      	beq.n	8002c04 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bfe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c02:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d007      	beq.n	8002c1c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c16:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c1a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a37      	ldr	r2, [pc, #220]	@ (8002d00 <HAL_DMA_Start_IT+0x474>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d04a      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a36      	ldr	r2, [pc, #216]	@ (8002d04 <HAL_DMA_Start_IT+0x478>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d045      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a34      	ldr	r2, [pc, #208]	@ (8002d08 <HAL_DMA_Start_IT+0x47c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d040      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a33      	ldr	r2, [pc, #204]	@ (8002d0c <HAL_DMA_Start_IT+0x480>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d03b      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a31      	ldr	r2, [pc, #196]	@ (8002d10 <HAL_DMA_Start_IT+0x484>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d036      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a30      	ldr	r2, [pc, #192]	@ (8002d14 <HAL_DMA_Start_IT+0x488>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d031      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a2e      	ldr	r2, [pc, #184]	@ (8002d18 <HAL_DMA_Start_IT+0x48c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d02c      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a2d      	ldr	r2, [pc, #180]	@ (8002d1c <HAL_DMA_Start_IT+0x490>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d027      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a2b      	ldr	r2, [pc, #172]	@ (8002d20 <HAL_DMA_Start_IT+0x494>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d022      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a2a      	ldr	r2, [pc, #168]	@ (8002d24 <HAL_DMA_Start_IT+0x498>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d01d      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a28      	ldr	r2, [pc, #160]	@ (8002d28 <HAL_DMA_Start_IT+0x49c>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d018      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a27      	ldr	r2, [pc, #156]	@ (8002d2c <HAL_DMA_Start_IT+0x4a0>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d013      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a25      	ldr	r2, [pc, #148]	@ (8002d30 <HAL_DMA_Start_IT+0x4a4>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d00e      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a24      	ldr	r2, [pc, #144]	@ (8002d34 <HAL_DMA_Start_IT+0x4a8>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d009      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a22      	ldr	r2, [pc, #136]	@ (8002d38 <HAL_DMA_Start_IT+0x4ac>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d004      	beq.n	8002cbc <HAL_DMA_Start_IT+0x430>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a21      	ldr	r2, [pc, #132]	@ (8002d3c <HAL_DMA_Start_IT+0x4b0>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d108      	bne.n	8002cce <HAL_DMA_Start_IT+0x442>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f042 0201 	orr.w	r2, r2, #1
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	e012      	b.n	8002cf4 <HAL_DMA_Start_IT+0x468>
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f042 0201 	orr.w	r2, r2, #1
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	e009      	b.n	8002cf4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ce6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002cf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40020010 	.word	0x40020010
 8002d04:	40020028 	.word	0x40020028
 8002d08:	40020040 	.word	0x40020040
 8002d0c:	40020058 	.word	0x40020058
 8002d10:	40020070 	.word	0x40020070
 8002d14:	40020088 	.word	0x40020088
 8002d18:	400200a0 	.word	0x400200a0
 8002d1c:	400200b8 	.word	0x400200b8
 8002d20:	40020410 	.word	0x40020410
 8002d24:	40020428 	.word	0x40020428
 8002d28:	40020440 	.word	0x40020440
 8002d2c:	40020458 	.word	0x40020458
 8002d30:	40020470 	.word	0x40020470
 8002d34:	40020488 	.word	0x40020488
 8002d38:	400204a0 	.word	0x400204a0
 8002d3c:	400204b8 	.word	0x400204b8
 8002d40:	58025408 	.word	0x58025408
 8002d44:	5802541c 	.word	0x5802541c
 8002d48:	58025430 	.word	0x58025430
 8002d4c:	58025444 	.word	0x58025444
 8002d50:	58025458 	.word	0x58025458
 8002d54:	5802546c 	.word	0x5802546c
 8002d58:	58025480 	.word	0x58025480
 8002d5c:	58025494 	.word	0x58025494

08002d60 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b08a      	sub	sp, #40	@ 0x28
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d6c:	4b67      	ldr	r3, [pc, #412]	@ (8002f0c <HAL_DMA_IRQHandler+0x1ac>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a67      	ldr	r2, [pc, #412]	@ (8002f10 <HAL_DMA_IRQHandler+0x1b0>)
 8002d72:	fba2 2303 	umull	r2, r3, r2, r3
 8002d76:	0a9b      	lsrs	r3, r3, #10
 8002d78:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d7e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d84:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a5f      	ldr	r2, [pc, #380]	@ (8002f14 <HAL_DMA_IRQHandler+0x1b4>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d04a      	beq.n	8002e32 <HAL_DMA_IRQHandler+0xd2>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a5d      	ldr	r2, [pc, #372]	@ (8002f18 <HAL_DMA_IRQHandler+0x1b8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d045      	beq.n	8002e32 <HAL_DMA_IRQHandler+0xd2>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a5c      	ldr	r2, [pc, #368]	@ (8002f1c <HAL_DMA_IRQHandler+0x1bc>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d040      	beq.n	8002e32 <HAL_DMA_IRQHandler+0xd2>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a5a      	ldr	r2, [pc, #360]	@ (8002f20 <HAL_DMA_IRQHandler+0x1c0>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d03b      	beq.n	8002e32 <HAL_DMA_IRQHandler+0xd2>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a59      	ldr	r2, [pc, #356]	@ (8002f24 <HAL_DMA_IRQHandler+0x1c4>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d036      	beq.n	8002e32 <HAL_DMA_IRQHandler+0xd2>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a57      	ldr	r2, [pc, #348]	@ (8002f28 <HAL_DMA_IRQHandler+0x1c8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d031      	beq.n	8002e32 <HAL_DMA_IRQHandler+0xd2>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a56      	ldr	r2, [pc, #344]	@ (8002f2c <HAL_DMA_IRQHandler+0x1cc>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d02c      	beq.n	8002e32 <HAL_DMA_IRQHandler+0xd2>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a54      	ldr	r2, [pc, #336]	@ (8002f30 <HAL_DMA_IRQHandler+0x1d0>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d027      	beq.n	8002e32 <HAL_DMA_IRQHandler+0xd2>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a53      	ldr	r2, [pc, #332]	@ (8002f34 <HAL_DMA_IRQHandler+0x1d4>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d022      	beq.n	8002e32 <HAL_DMA_IRQHandler+0xd2>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a51      	ldr	r2, [pc, #324]	@ (8002f38 <HAL_DMA_IRQHandler+0x1d8>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d01d      	beq.n	8002e32 <HAL_DMA_IRQHandler+0xd2>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a50      	ldr	r2, [pc, #320]	@ (8002f3c <HAL_DMA_IRQHandler+0x1dc>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d018      	beq.n	8002e32 <HAL_DMA_IRQHandler+0xd2>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a4e      	ldr	r2, [pc, #312]	@ (8002f40 <HAL_DMA_IRQHandler+0x1e0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d013      	beq.n	8002e32 <HAL_DMA_IRQHandler+0xd2>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a4d      	ldr	r2, [pc, #308]	@ (8002f44 <HAL_DMA_IRQHandler+0x1e4>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d00e      	beq.n	8002e32 <HAL_DMA_IRQHandler+0xd2>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a4b      	ldr	r2, [pc, #300]	@ (8002f48 <HAL_DMA_IRQHandler+0x1e8>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d009      	beq.n	8002e32 <HAL_DMA_IRQHandler+0xd2>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a4a      	ldr	r2, [pc, #296]	@ (8002f4c <HAL_DMA_IRQHandler+0x1ec>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d004      	beq.n	8002e32 <HAL_DMA_IRQHandler+0xd2>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a48      	ldr	r2, [pc, #288]	@ (8002f50 <HAL_DMA_IRQHandler+0x1f0>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d101      	bne.n	8002e36 <HAL_DMA_IRQHandler+0xd6>
 8002e32:	2301      	movs	r3, #1
 8002e34:	e000      	b.n	8002e38 <HAL_DMA_IRQHandler+0xd8>
 8002e36:	2300      	movs	r3, #0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 842b 	beq.w	8003694 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e42:	f003 031f 	and.w	r3, r3, #31
 8002e46:	2208      	movs	r2, #8
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 80a2 	beq.w	8002f98 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a2e      	ldr	r2, [pc, #184]	@ (8002f14 <HAL_DMA_IRQHandler+0x1b4>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d04a      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x194>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a2d      	ldr	r2, [pc, #180]	@ (8002f18 <HAL_DMA_IRQHandler+0x1b8>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d045      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x194>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a2b      	ldr	r2, [pc, #172]	@ (8002f1c <HAL_DMA_IRQHandler+0x1bc>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d040      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x194>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a2a      	ldr	r2, [pc, #168]	@ (8002f20 <HAL_DMA_IRQHandler+0x1c0>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d03b      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x194>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a28      	ldr	r2, [pc, #160]	@ (8002f24 <HAL_DMA_IRQHandler+0x1c4>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d036      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x194>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a27      	ldr	r2, [pc, #156]	@ (8002f28 <HAL_DMA_IRQHandler+0x1c8>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d031      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x194>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a25      	ldr	r2, [pc, #148]	@ (8002f2c <HAL_DMA_IRQHandler+0x1cc>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d02c      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x194>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a24      	ldr	r2, [pc, #144]	@ (8002f30 <HAL_DMA_IRQHandler+0x1d0>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d027      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x194>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a22      	ldr	r2, [pc, #136]	@ (8002f34 <HAL_DMA_IRQHandler+0x1d4>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d022      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x194>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a21      	ldr	r2, [pc, #132]	@ (8002f38 <HAL_DMA_IRQHandler+0x1d8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d01d      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x194>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a1f      	ldr	r2, [pc, #124]	@ (8002f3c <HAL_DMA_IRQHandler+0x1dc>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d018      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x194>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a1e      	ldr	r2, [pc, #120]	@ (8002f40 <HAL_DMA_IRQHandler+0x1e0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d013      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x194>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8002f44 <HAL_DMA_IRQHandler+0x1e4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d00e      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x194>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a1b      	ldr	r2, [pc, #108]	@ (8002f48 <HAL_DMA_IRQHandler+0x1e8>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d009      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x194>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a19      	ldr	r2, [pc, #100]	@ (8002f4c <HAL_DMA_IRQHandler+0x1ec>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d004      	beq.n	8002ef4 <HAL_DMA_IRQHandler+0x194>
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a18      	ldr	r2, [pc, #96]	@ (8002f50 <HAL_DMA_IRQHandler+0x1f0>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d12f      	bne.n	8002f54 <HAL_DMA_IRQHandler+0x1f4>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0304 	and.w	r3, r3, #4
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	bf14      	ite	ne
 8002f02:	2301      	movne	r3, #1
 8002f04:	2300      	moveq	r3, #0
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	e02e      	b.n	8002f68 <HAL_DMA_IRQHandler+0x208>
 8002f0a:	bf00      	nop
 8002f0c:	24000000 	.word	0x24000000
 8002f10:	1b4e81b5 	.word	0x1b4e81b5
 8002f14:	40020010 	.word	0x40020010
 8002f18:	40020028 	.word	0x40020028
 8002f1c:	40020040 	.word	0x40020040
 8002f20:	40020058 	.word	0x40020058
 8002f24:	40020070 	.word	0x40020070
 8002f28:	40020088 	.word	0x40020088
 8002f2c:	400200a0 	.word	0x400200a0
 8002f30:	400200b8 	.word	0x400200b8
 8002f34:	40020410 	.word	0x40020410
 8002f38:	40020428 	.word	0x40020428
 8002f3c:	40020440 	.word	0x40020440
 8002f40:	40020458 	.word	0x40020458
 8002f44:	40020470 	.word	0x40020470
 8002f48:	40020488 	.word	0x40020488
 8002f4c:	400204a0 	.word	0x400204a0
 8002f50:	400204b8 	.word	0x400204b8
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	bf14      	ite	ne
 8002f62:	2301      	movne	r3, #1
 8002f64:	2300      	moveq	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d015      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0204 	bic.w	r2, r2, #4
 8002f7a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f80:	f003 031f 	and.w	r3, r3, #31
 8002f84:	2208      	movs	r2, #8
 8002f86:	409a      	lsls	r2, r3
 8002f88:	6a3b      	ldr	r3, [r7, #32]
 8002f8a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f90:	f043 0201 	orr.w	r2, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f9c:	f003 031f 	and.w	r3, r3, #31
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d06e      	beq.n	800308c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a69      	ldr	r2, [pc, #420]	@ (8003158 <HAL_DMA_IRQHandler+0x3f8>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d04a      	beq.n	800304e <HAL_DMA_IRQHandler+0x2ee>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a67      	ldr	r2, [pc, #412]	@ (800315c <HAL_DMA_IRQHandler+0x3fc>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d045      	beq.n	800304e <HAL_DMA_IRQHandler+0x2ee>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a66      	ldr	r2, [pc, #408]	@ (8003160 <HAL_DMA_IRQHandler+0x400>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d040      	beq.n	800304e <HAL_DMA_IRQHandler+0x2ee>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a64      	ldr	r2, [pc, #400]	@ (8003164 <HAL_DMA_IRQHandler+0x404>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d03b      	beq.n	800304e <HAL_DMA_IRQHandler+0x2ee>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a63      	ldr	r2, [pc, #396]	@ (8003168 <HAL_DMA_IRQHandler+0x408>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d036      	beq.n	800304e <HAL_DMA_IRQHandler+0x2ee>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a61      	ldr	r2, [pc, #388]	@ (800316c <HAL_DMA_IRQHandler+0x40c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d031      	beq.n	800304e <HAL_DMA_IRQHandler+0x2ee>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a60      	ldr	r2, [pc, #384]	@ (8003170 <HAL_DMA_IRQHandler+0x410>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d02c      	beq.n	800304e <HAL_DMA_IRQHandler+0x2ee>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a5e      	ldr	r2, [pc, #376]	@ (8003174 <HAL_DMA_IRQHandler+0x414>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d027      	beq.n	800304e <HAL_DMA_IRQHandler+0x2ee>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a5d      	ldr	r2, [pc, #372]	@ (8003178 <HAL_DMA_IRQHandler+0x418>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d022      	beq.n	800304e <HAL_DMA_IRQHandler+0x2ee>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a5b      	ldr	r2, [pc, #364]	@ (800317c <HAL_DMA_IRQHandler+0x41c>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d01d      	beq.n	800304e <HAL_DMA_IRQHandler+0x2ee>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a5a      	ldr	r2, [pc, #360]	@ (8003180 <HAL_DMA_IRQHandler+0x420>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d018      	beq.n	800304e <HAL_DMA_IRQHandler+0x2ee>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a58      	ldr	r2, [pc, #352]	@ (8003184 <HAL_DMA_IRQHandler+0x424>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d013      	beq.n	800304e <HAL_DMA_IRQHandler+0x2ee>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a57      	ldr	r2, [pc, #348]	@ (8003188 <HAL_DMA_IRQHandler+0x428>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d00e      	beq.n	800304e <HAL_DMA_IRQHandler+0x2ee>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a55      	ldr	r2, [pc, #340]	@ (800318c <HAL_DMA_IRQHandler+0x42c>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d009      	beq.n	800304e <HAL_DMA_IRQHandler+0x2ee>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a54      	ldr	r2, [pc, #336]	@ (8003190 <HAL_DMA_IRQHandler+0x430>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d004      	beq.n	800304e <HAL_DMA_IRQHandler+0x2ee>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a52      	ldr	r2, [pc, #328]	@ (8003194 <HAL_DMA_IRQHandler+0x434>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d10a      	bne.n	8003064 <HAL_DMA_IRQHandler+0x304>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003058:	2b00      	cmp	r3, #0
 800305a:	bf14      	ite	ne
 800305c:	2301      	movne	r3, #1
 800305e:	2300      	moveq	r3, #0
 8003060:	b2db      	uxtb	r3, r3
 8003062:	e003      	b.n	800306c <HAL_DMA_IRQHandler+0x30c>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2300      	movs	r3, #0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00d      	beq.n	800308c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003074:	f003 031f 	and.w	r3, r3, #31
 8003078:	2201      	movs	r2, #1
 800307a:	409a      	lsls	r2, r3
 800307c:	6a3b      	ldr	r3, [r7, #32]
 800307e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003084:	f043 0202 	orr.w	r2, r3, #2
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003090:	f003 031f 	and.w	r3, r3, #31
 8003094:	2204      	movs	r2, #4
 8003096:	409a      	lsls	r2, r3
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	4013      	ands	r3, r2
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 808f 	beq.w	80031c0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a2c      	ldr	r2, [pc, #176]	@ (8003158 <HAL_DMA_IRQHandler+0x3f8>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d04a      	beq.n	8003142 <HAL_DMA_IRQHandler+0x3e2>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a2a      	ldr	r2, [pc, #168]	@ (800315c <HAL_DMA_IRQHandler+0x3fc>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d045      	beq.n	8003142 <HAL_DMA_IRQHandler+0x3e2>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a29      	ldr	r2, [pc, #164]	@ (8003160 <HAL_DMA_IRQHandler+0x400>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d040      	beq.n	8003142 <HAL_DMA_IRQHandler+0x3e2>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a27      	ldr	r2, [pc, #156]	@ (8003164 <HAL_DMA_IRQHandler+0x404>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d03b      	beq.n	8003142 <HAL_DMA_IRQHandler+0x3e2>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a26      	ldr	r2, [pc, #152]	@ (8003168 <HAL_DMA_IRQHandler+0x408>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d036      	beq.n	8003142 <HAL_DMA_IRQHandler+0x3e2>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a24      	ldr	r2, [pc, #144]	@ (800316c <HAL_DMA_IRQHandler+0x40c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d031      	beq.n	8003142 <HAL_DMA_IRQHandler+0x3e2>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a23      	ldr	r2, [pc, #140]	@ (8003170 <HAL_DMA_IRQHandler+0x410>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d02c      	beq.n	8003142 <HAL_DMA_IRQHandler+0x3e2>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a21      	ldr	r2, [pc, #132]	@ (8003174 <HAL_DMA_IRQHandler+0x414>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d027      	beq.n	8003142 <HAL_DMA_IRQHandler+0x3e2>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a20      	ldr	r2, [pc, #128]	@ (8003178 <HAL_DMA_IRQHandler+0x418>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d022      	beq.n	8003142 <HAL_DMA_IRQHandler+0x3e2>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a1e      	ldr	r2, [pc, #120]	@ (800317c <HAL_DMA_IRQHandler+0x41c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d01d      	beq.n	8003142 <HAL_DMA_IRQHandler+0x3e2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a1d      	ldr	r2, [pc, #116]	@ (8003180 <HAL_DMA_IRQHandler+0x420>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d018      	beq.n	8003142 <HAL_DMA_IRQHandler+0x3e2>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a1b      	ldr	r2, [pc, #108]	@ (8003184 <HAL_DMA_IRQHandler+0x424>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d013      	beq.n	8003142 <HAL_DMA_IRQHandler+0x3e2>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a1a      	ldr	r2, [pc, #104]	@ (8003188 <HAL_DMA_IRQHandler+0x428>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d00e      	beq.n	8003142 <HAL_DMA_IRQHandler+0x3e2>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a18      	ldr	r2, [pc, #96]	@ (800318c <HAL_DMA_IRQHandler+0x42c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d009      	beq.n	8003142 <HAL_DMA_IRQHandler+0x3e2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a17      	ldr	r2, [pc, #92]	@ (8003190 <HAL_DMA_IRQHandler+0x430>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d004      	beq.n	8003142 <HAL_DMA_IRQHandler+0x3e2>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a15      	ldr	r2, [pc, #84]	@ (8003194 <HAL_DMA_IRQHandler+0x434>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d12a      	bne.n	8003198 <HAL_DMA_IRQHandler+0x438>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b00      	cmp	r3, #0
 800314e:	bf14      	ite	ne
 8003150:	2301      	movne	r3, #1
 8003152:	2300      	moveq	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	e023      	b.n	80031a0 <HAL_DMA_IRQHandler+0x440>
 8003158:	40020010 	.word	0x40020010
 800315c:	40020028 	.word	0x40020028
 8003160:	40020040 	.word	0x40020040
 8003164:	40020058 	.word	0x40020058
 8003168:	40020070 	.word	0x40020070
 800316c:	40020088 	.word	0x40020088
 8003170:	400200a0 	.word	0x400200a0
 8003174:	400200b8 	.word	0x400200b8
 8003178:	40020410 	.word	0x40020410
 800317c:	40020428 	.word	0x40020428
 8003180:	40020440 	.word	0x40020440
 8003184:	40020458 	.word	0x40020458
 8003188:	40020470 	.word	0x40020470
 800318c:	40020488 	.word	0x40020488
 8003190:	400204a0 	.word	0x400204a0
 8003194:	400204b8 	.word	0x400204b8
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	2300      	movs	r3, #0
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00d      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	2204      	movs	r2, #4
 80031ae:	409a      	lsls	r2, r3
 80031b0:	6a3b      	ldr	r3, [r7, #32]
 80031b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b8:	f043 0204 	orr.w	r2, r3, #4
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c4:	f003 031f 	and.w	r3, r3, #31
 80031c8:	2210      	movs	r2, #16
 80031ca:	409a      	lsls	r2, r3
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	4013      	ands	r3, r2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	f000 80a6 	beq.w	8003322 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a85      	ldr	r2, [pc, #532]	@ (80033f0 <HAL_DMA_IRQHandler+0x690>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d04a      	beq.n	8003276 <HAL_DMA_IRQHandler+0x516>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a83      	ldr	r2, [pc, #524]	@ (80033f4 <HAL_DMA_IRQHandler+0x694>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d045      	beq.n	8003276 <HAL_DMA_IRQHandler+0x516>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a82      	ldr	r2, [pc, #520]	@ (80033f8 <HAL_DMA_IRQHandler+0x698>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d040      	beq.n	8003276 <HAL_DMA_IRQHandler+0x516>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a80      	ldr	r2, [pc, #512]	@ (80033fc <HAL_DMA_IRQHandler+0x69c>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d03b      	beq.n	8003276 <HAL_DMA_IRQHandler+0x516>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a7f      	ldr	r2, [pc, #508]	@ (8003400 <HAL_DMA_IRQHandler+0x6a0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d036      	beq.n	8003276 <HAL_DMA_IRQHandler+0x516>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a7d      	ldr	r2, [pc, #500]	@ (8003404 <HAL_DMA_IRQHandler+0x6a4>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d031      	beq.n	8003276 <HAL_DMA_IRQHandler+0x516>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a7c      	ldr	r2, [pc, #496]	@ (8003408 <HAL_DMA_IRQHandler+0x6a8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d02c      	beq.n	8003276 <HAL_DMA_IRQHandler+0x516>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a7a      	ldr	r2, [pc, #488]	@ (800340c <HAL_DMA_IRQHandler+0x6ac>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d027      	beq.n	8003276 <HAL_DMA_IRQHandler+0x516>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a79      	ldr	r2, [pc, #484]	@ (8003410 <HAL_DMA_IRQHandler+0x6b0>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d022      	beq.n	8003276 <HAL_DMA_IRQHandler+0x516>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a77      	ldr	r2, [pc, #476]	@ (8003414 <HAL_DMA_IRQHandler+0x6b4>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d01d      	beq.n	8003276 <HAL_DMA_IRQHandler+0x516>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a76      	ldr	r2, [pc, #472]	@ (8003418 <HAL_DMA_IRQHandler+0x6b8>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d018      	beq.n	8003276 <HAL_DMA_IRQHandler+0x516>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a74      	ldr	r2, [pc, #464]	@ (800341c <HAL_DMA_IRQHandler+0x6bc>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d013      	beq.n	8003276 <HAL_DMA_IRQHandler+0x516>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a73      	ldr	r2, [pc, #460]	@ (8003420 <HAL_DMA_IRQHandler+0x6c0>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d00e      	beq.n	8003276 <HAL_DMA_IRQHandler+0x516>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a71      	ldr	r2, [pc, #452]	@ (8003424 <HAL_DMA_IRQHandler+0x6c4>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d009      	beq.n	8003276 <HAL_DMA_IRQHandler+0x516>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a70      	ldr	r2, [pc, #448]	@ (8003428 <HAL_DMA_IRQHandler+0x6c8>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d004      	beq.n	8003276 <HAL_DMA_IRQHandler+0x516>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a6e      	ldr	r2, [pc, #440]	@ (800342c <HAL_DMA_IRQHandler+0x6cc>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d10a      	bne.n	800328c <HAL_DMA_IRQHandler+0x52c>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0308 	and.w	r3, r3, #8
 8003280:	2b00      	cmp	r3, #0
 8003282:	bf14      	ite	ne
 8003284:	2301      	movne	r3, #1
 8003286:	2300      	moveq	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	e009      	b.n	80032a0 <HAL_DMA_IRQHandler+0x540>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0304 	and.w	r3, r3, #4
 8003296:	2b00      	cmp	r3, #0
 8003298:	bf14      	ite	ne
 800329a:	2301      	movne	r3, #1
 800329c:	2300      	moveq	r3, #0
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d03e      	beq.n	8003322 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a8:	f003 031f 	and.w	r3, r3, #31
 80032ac:	2210      	movs	r2, #16
 80032ae:	409a      	lsls	r2, r3
 80032b0:	6a3b      	ldr	r3, [r7, #32]
 80032b2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d018      	beq.n	80032f4 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d108      	bne.n	80032e2 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d024      	beq.n	8003322 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	4798      	blx	r3
 80032e0:	e01f      	b.n	8003322 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d01b      	beq.n	8003322 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	4798      	blx	r3
 80032f2:	e016      	b.n	8003322 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d107      	bne.n	8003312 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f022 0208 	bic.w	r2, r2, #8
 8003310:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003316:	2b00      	cmp	r3, #0
 8003318:	d003      	beq.n	8003322 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003326:	f003 031f 	and.w	r3, r3, #31
 800332a:	2220      	movs	r2, #32
 800332c:	409a      	lsls	r2, r3
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	4013      	ands	r3, r2
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 8110 	beq.w	8003558 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a2c      	ldr	r2, [pc, #176]	@ (80033f0 <HAL_DMA_IRQHandler+0x690>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d04a      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x678>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a2b      	ldr	r2, [pc, #172]	@ (80033f4 <HAL_DMA_IRQHandler+0x694>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d045      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x678>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a29      	ldr	r2, [pc, #164]	@ (80033f8 <HAL_DMA_IRQHandler+0x698>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d040      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x678>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a28      	ldr	r2, [pc, #160]	@ (80033fc <HAL_DMA_IRQHandler+0x69c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d03b      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x678>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a26      	ldr	r2, [pc, #152]	@ (8003400 <HAL_DMA_IRQHandler+0x6a0>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d036      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x678>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a25      	ldr	r2, [pc, #148]	@ (8003404 <HAL_DMA_IRQHandler+0x6a4>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d031      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x678>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a23      	ldr	r2, [pc, #140]	@ (8003408 <HAL_DMA_IRQHandler+0x6a8>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d02c      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x678>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a22      	ldr	r2, [pc, #136]	@ (800340c <HAL_DMA_IRQHandler+0x6ac>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d027      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x678>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a20      	ldr	r2, [pc, #128]	@ (8003410 <HAL_DMA_IRQHandler+0x6b0>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d022      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x678>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a1f      	ldr	r2, [pc, #124]	@ (8003414 <HAL_DMA_IRQHandler+0x6b4>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d01d      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x678>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a1d      	ldr	r2, [pc, #116]	@ (8003418 <HAL_DMA_IRQHandler+0x6b8>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d018      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x678>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a1c      	ldr	r2, [pc, #112]	@ (800341c <HAL_DMA_IRQHandler+0x6bc>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d013      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x678>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a1a      	ldr	r2, [pc, #104]	@ (8003420 <HAL_DMA_IRQHandler+0x6c0>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d00e      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x678>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a19      	ldr	r2, [pc, #100]	@ (8003424 <HAL_DMA_IRQHandler+0x6c4>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d009      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x678>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a17      	ldr	r2, [pc, #92]	@ (8003428 <HAL_DMA_IRQHandler+0x6c8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d004      	beq.n	80033d8 <HAL_DMA_IRQHandler+0x678>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a16      	ldr	r2, [pc, #88]	@ (800342c <HAL_DMA_IRQHandler+0x6cc>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d12b      	bne.n	8003430 <HAL_DMA_IRQHandler+0x6d0>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	bf14      	ite	ne
 80033e6:	2301      	movne	r3, #1
 80033e8:	2300      	moveq	r3, #0
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	e02a      	b.n	8003444 <HAL_DMA_IRQHandler+0x6e4>
 80033ee:	bf00      	nop
 80033f0:	40020010 	.word	0x40020010
 80033f4:	40020028 	.word	0x40020028
 80033f8:	40020040 	.word	0x40020040
 80033fc:	40020058 	.word	0x40020058
 8003400:	40020070 	.word	0x40020070
 8003404:	40020088 	.word	0x40020088
 8003408:	400200a0 	.word	0x400200a0
 800340c:	400200b8 	.word	0x400200b8
 8003410:	40020410 	.word	0x40020410
 8003414:	40020428 	.word	0x40020428
 8003418:	40020440 	.word	0x40020440
 800341c:	40020458 	.word	0x40020458
 8003420:	40020470 	.word	0x40020470
 8003424:	40020488 	.word	0x40020488
 8003428:	400204a0 	.word	0x400204a0
 800342c:	400204b8 	.word	0x400204b8
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0302 	and.w	r3, r3, #2
 800343a:	2b00      	cmp	r3, #0
 800343c:	bf14      	ite	ne
 800343e:	2301      	movne	r3, #1
 8003440:	2300      	moveq	r3, #0
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 8087 	beq.w	8003558 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344e:	f003 031f 	and.w	r3, r3, #31
 8003452:	2220      	movs	r2, #32
 8003454:	409a      	lsls	r2, r3
 8003456:	6a3b      	ldr	r3, [r7, #32]
 8003458:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003460:	b2db      	uxtb	r3, r3
 8003462:	2b04      	cmp	r3, #4
 8003464:	d139      	bne.n	80034da <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681a      	ldr	r2, [r3, #0]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f022 0216 	bic.w	r2, r2, #22
 8003474:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695a      	ldr	r2, [r3, #20]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003484:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348a:	2b00      	cmp	r3, #0
 800348c:	d103      	bne.n	8003496 <HAL_DMA_IRQHandler+0x736>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003492:	2b00      	cmp	r3, #0
 8003494:	d007      	beq.n	80034a6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 0208 	bic.w	r2, r2, #8
 80034a4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034aa:	f003 031f 	and.w	r3, r3, #31
 80034ae:	223f      	movs	r2, #63	@ 0x3f
 80034b0:	409a      	lsls	r2, r3
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	f000 834a 	beq.w	8003b64 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	4798      	blx	r3
          }
          return;
 80034d8:	e344      	b.n	8003b64 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d018      	beq.n	800351a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d108      	bne.n	8003508 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d02c      	beq.n	8003558 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	4798      	blx	r3
 8003506:	e027      	b.n	8003558 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800350c:	2b00      	cmp	r3, #0
 800350e:	d023      	beq.n	8003558 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	4798      	blx	r3
 8003518:	e01e      	b.n	8003558 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10f      	bne.n	8003548 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f022 0210 	bic.w	r2, r2, #16
 8003536:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800354c:	2b00      	cmp	r3, #0
 800354e:	d003      	beq.n	8003558 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 8306 	beq.w	8003b6e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 8088 	beq.w	8003680 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2204      	movs	r2, #4
 8003574:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a7a      	ldr	r2, [pc, #488]	@ (8003768 <HAL_DMA_IRQHandler+0xa08>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d04a      	beq.n	8003618 <HAL_DMA_IRQHandler+0x8b8>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a79      	ldr	r2, [pc, #484]	@ (800376c <HAL_DMA_IRQHandler+0xa0c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d045      	beq.n	8003618 <HAL_DMA_IRQHandler+0x8b8>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a77      	ldr	r2, [pc, #476]	@ (8003770 <HAL_DMA_IRQHandler+0xa10>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d040      	beq.n	8003618 <HAL_DMA_IRQHandler+0x8b8>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a76      	ldr	r2, [pc, #472]	@ (8003774 <HAL_DMA_IRQHandler+0xa14>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d03b      	beq.n	8003618 <HAL_DMA_IRQHandler+0x8b8>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a74      	ldr	r2, [pc, #464]	@ (8003778 <HAL_DMA_IRQHandler+0xa18>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d036      	beq.n	8003618 <HAL_DMA_IRQHandler+0x8b8>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a73      	ldr	r2, [pc, #460]	@ (800377c <HAL_DMA_IRQHandler+0xa1c>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d031      	beq.n	8003618 <HAL_DMA_IRQHandler+0x8b8>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a71      	ldr	r2, [pc, #452]	@ (8003780 <HAL_DMA_IRQHandler+0xa20>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d02c      	beq.n	8003618 <HAL_DMA_IRQHandler+0x8b8>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a70      	ldr	r2, [pc, #448]	@ (8003784 <HAL_DMA_IRQHandler+0xa24>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d027      	beq.n	8003618 <HAL_DMA_IRQHandler+0x8b8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a6e      	ldr	r2, [pc, #440]	@ (8003788 <HAL_DMA_IRQHandler+0xa28>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d022      	beq.n	8003618 <HAL_DMA_IRQHandler+0x8b8>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a6d      	ldr	r2, [pc, #436]	@ (800378c <HAL_DMA_IRQHandler+0xa2c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d01d      	beq.n	8003618 <HAL_DMA_IRQHandler+0x8b8>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a6b      	ldr	r2, [pc, #428]	@ (8003790 <HAL_DMA_IRQHandler+0xa30>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d018      	beq.n	8003618 <HAL_DMA_IRQHandler+0x8b8>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a6a      	ldr	r2, [pc, #424]	@ (8003794 <HAL_DMA_IRQHandler+0xa34>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d013      	beq.n	8003618 <HAL_DMA_IRQHandler+0x8b8>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a68      	ldr	r2, [pc, #416]	@ (8003798 <HAL_DMA_IRQHandler+0xa38>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00e      	beq.n	8003618 <HAL_DMA_IRQHandler+0x8b8>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a67      	ldr	r2, [pc, #412]	@ (800379c <HAL_DMA_IRQHandler+0xa3c>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d009      	beq.n	8003618 <HAL_DMA_IRQHandler+0x8b8>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a65      	ldr	r2, [pc, #404]	@ (80037a0 <HAL_DMA_IRQHandler+0xa40>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d004      	beq.n	8003618 <HAL_DMA_IRQHandler+0x8b8>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a64      	ldr	r2, [pc, #400]	@ (80037a4 <HAL_DMA_IRQHandler+0xa44>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d108      	bne.n	800362a <HAL_DMA_IRQHandler+0x8ca>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0201 	bic.w	r2, r2, #1
 8003626:	601a      	str	r2, [r3, #0]
 8003628:	e007      	b.n	800363a <HAL_DMA_IRQHandler+0x8da>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0201 	bic.w	r2, r2, #1
 8003638:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	3301      	adds	r3, #1
 800363e:	60fb      	str	r3, [r7, #12]
 8003640:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003642:	429a      	cmp	r2, r3
 8003644:	d307      	bcc.n	8003656 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0301 	and.w	r3, r3, #1
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1f2      	bne.n	800363a <HAL_DMA_IRQHandler+0x8da>
 8003654:	e000      	b.n	8003658 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003656:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b00      	cmp	r3, #0
 8003664:	d004      	beq.n	8003670 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2203      	movs	r2, #3
 800366a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800366e:	e003      	b.n	8003678 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2200      	movs	r2, #0
 800367c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 8272 	beq.w	8003b6e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	4798      	blx	r3
 8003692:	e26c      	b.n	8003b6e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a43      	ldr	r2, [pc, #268]	@ (80037a8 <HAL_DMA_IRQHandler+0xa48>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d022      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x984>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a42      	ldr	r2, [pc, #264]	@ (80037ac <HAL_DMA_IRQHandler+0xa4c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d01d      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x984>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a40      	ldr	r2, [pc, #256]	@ (80037b0 <HAL_DMA_IRQHandler+0xa50>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d018      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x984>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a3f      	ldr	r2, [pc, #252]	@ (80037b4 <HAL_DMA_IRQHandler+0xa54>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d013      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x984>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a3d      	ldr	r2, [pc, #244]	@ (80037b8 <HAL_DMA_IRQHandler+0xa58>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d00e      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x984>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a3c      	ldr	r2, [pc, #240]	@ (80037bc <HAL_DMA_IRQHandler+0xa5c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d009      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x984>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a3a      	ldr	r2, [pc, #232]	@ (80037c0 <HAL_DMA_IRQHandler+0xa60>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d004      	beq.n	80036e4 <HAL_DMA_IRQHandler+0x984>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a39      	ldr	r2, [pc, #228]	@ (80037c4 <HAL_DMA_IRQHandler+0xa64>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d101      	bne.n	80036e8 <HAL_DMA_IRQHandler+0x988>
 80036e4:	2301      	movs	r3, #1
 80036e6:	e000      	b.n	80036ea <HAL_DMA_IRQHandler+0x98a>
 80036e8:	2300      	movs	r3, #0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 823f 	beq.w	8003b6e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036fc:	f003 031f 	and.w	r3, r3, #31
 8003700:	2204      	movs	r2, #4
 8003702:	409a      	lsls	r2, r3
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	4013      	ands	r3, r2
 8003708:	2b00      	cmp	r3, #0
 800370a:	f000 80cd 	beq.w	80038a8 <HAL_DMA_IRQHandler+0xb48>
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b00      	cmp	r3, #0
 8003716:	f000 80c7 	beq.w	80038a8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800371e:	f003 031f 	and.w	r3, r3, #31
 8003722:	2204      	movs	r2, #4
 8003724:	409a      	lsls	r2, r3
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d049      	beq.n	80037c8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d109      	bne.n	8003752 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003742:	2b00      	cmp	r3, #0
 8003744:	f000 8210 	beq.w	8003b68 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003750:	e20a      	b.n	8003b68 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003756:	2b00      	cmp	r3, #0
 8003758:	f000 8206 	beq.w	8003b68 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003764:	e200      	b.n	8003b68 <HAL_DMA_IRQHandler+0xe08>
 8003766:	bf00      	nop
 8003768:	40020010 	.word	0x40020010
 800376c:	40020028 	.word	0x40020028
 8003770:	40020040 	.word	0x40020040
 8003774:	40020058 	.word	0x40020058
 8003778:	40020070 	.word	0x40020070
 800377c:	40020088 	.word	0x40020088
 8003780:	400200a0 	.word	0x400200a0
 8003784:	400200b8 	.word	0x400200b8
 8003788:	40020410 	.word	0x40020410
 800378c:	40020428 	.word	0x40020428
 8003790:	40020440 	.word	0x40020440
 8003794:	40020458 	.word	0x40020458
 8003798:	40020470 	.word	0x40020470
 800379c:	40020488 	.word	0x40020488
 80037a0:	400204a0 	.word	0x400204a0
 80037a4:	400204b8 	.word	0x400204b8
 80037a8:	58025408 	.word	0x58025408
 80037ac:	5802541c 	.word	0x5802541c
 80037b0:	58025430 	.word	0x58025430
 80037b4:	58025444 	.word	0x58025444
 80037b8:	58025458 	.word	0x58025458
 80037bc:	5802546c 	.word	0x5802546c
 80037c0:	58025480 	.word	0x58025480
 80037c4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	f003 0320 	and.w	r3, r3, #32
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d160      	bne.n	8003894 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a7f      	ldr	r2, [pc, #508]	@ (80039d4 <HAL_DMA_IRQHandler+0xc74>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d04a      	beq.n	8003872 <HAL_DMA_IRQHandler+0xb12>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a7d      	ldr	r2, [pc, #500]	@ (80039d8 <HAL_DMA_IRQHandler+0xc78>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d045      	beq.n	8003872 <HAL_DMA_IRQHandler+0xb12>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a7c      	ldr	r2, [pc, #496]	@ (80039dc <HAL_DMA_IRQHandler+0xc7c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d040      	beq.n	8003872 <HAL_DMA_IRQHandler+0xb12>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a7a      	ldr	r2, [pc, #488]	@ (80039e0 <HAL_DMA_IRQHandler+0xc80>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d03b      	beq.n	8003872 <HAL_DMA_IRQHandler+0xb12>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a79      	ldr	r2, [pc, #484]	@ (80039e4 <HAL_DMA_IRQHandler+0xc84>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d036      	beq.n	8003872 <HAL_DMA_IRQHandler+0xb12>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a77      	ldr	r2, [pc, #476]	@ (80039e8 <HAL_DMA_IRQHandler+0xc88>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d031      	beq.n	8003872 <HAL_DMA_IRQHandler+0xb12>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a76      	ldr	r2, [pc, #472]	@ (80039ec <HAL_DMA_IRQHandler+0xc8c>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d02c      	beq.n	8003872 <HAL_DMA_IRQHandler+0xb12>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a74      	ldr	r2, [pc, #464]	@ (80039f0 <HAL_DMA_IRQHandler+0xc90>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d027      	beq.n	8003872 <HAL_DMA_IRQHandler+0xb12>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a73      	ldr	r2, [pc, #460]	@ (80039f4 <HAL_DMA_IRQHandler+0xc94>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d022      	beq.n	8003872 <HAL_DMA_IRQHandler+0xb12>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a71      	ldr	r2, [pc, #452]	@ (80039f8 <HAL_DMA_IRQHandler+0xc98>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d01d      	beq.n	8003872 <HAL_DMA_IRQHandler+0xb12>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a70      	ldr	r2, [pc, #448]	@ (80039fc <HAL_DMA_IRQHandler+0xc9c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d018      	beq.n	8003872 <HAL_DMA_IRQHandler+0xb12>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a6e      	ldr	r2, [pc, #440]	@ (8003a00 <HAL_DMA_IRQHandler+0xca0>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d013      	beq.n	8003872 <HAL_DMA_IRQHandler+0xb12>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a6d      	ldr	r2, [pc, #436]	@ (8003a04 <HAL_DMA_IRQHandler+0xca4>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d00e      	beq.n	8003872 <HAL_DMA_IRQHandler+0xb12>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a6b      	ldr	r2, [pc, #428]	@ (8003a08 <HAL_DMA_IRQHandler+0xca8>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d009      	beq.n	8003872 <HAL_DMA_IRQHandler+0xb12>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a6a      	ldr	r2, [pc, #424]	@ (8003a0c <HAL_DMA_IRQHandler+0xcac>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d004      	beq.n	8003872 <HAL_DMA_IRQHandler+0xb12>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a68      	ldr	r2, [pc, #416]	@ (8003a10 <HAL_DMA_IRQHandler+0xcb0>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d108      	bne.n	8003884 <HAL_DMA_IRQHandler+0xb24>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f022 0208 	bic.w	r2, r2, #8
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	e007      	b.n	8003894 <HAL_DMA_IRQHandler+0xb34>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0204 	bic.w	r2, r2, #4
 8003892:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003898:	2b00      	cmp	r3, #0
 800389a:	f000 8165 	beq.w	8003b68 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038a6:	e15f      	b.n	8003b68 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ac:	f003 031f 	and.w	r3, r3, #31
 80038b0:	2202      	movs	r2, #2
 80038b2:	409a      	lsls	r2, r3
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	4013      	ands	r3, r2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	f000 80c5 	beq.w	8003a48 <HAL_DMA_IRQHandler+0xce8>
 80038be:	693b      	ldr	r3, [r7, #16]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 80bf 	beq.w	8003a48 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ce:	f003 031f 	and.w	r3, r3, #31
 80038d2:	2202      	movs	r2, #2
 80038d4:	409a      	lsls	r2, r3
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d018      	beq.n	8003916 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d109      	bne.n	8003902 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f000 813a 	beq.w	8003b6c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003900:	e134      	b.n	8003b6c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 8130 	beq.w	8003b6c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003910:	6878      	ldr	r0, [r7, #4]
 8003912:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003914:	e12a      	b.n	8003b6c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b00      	cmp	r3, #0
 800391e:	f040 8089 	bne.w	8003a34 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a2b      	ldr	r2, [pc, #172]	@ (80039d4 <HAL_DMA_IRQHandler+0xc74>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d04a      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xc62>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a29      	ldr	r2, [pc, #164]	@ (80039d8 <HAL_DMA_IRQHandler+0xc78>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d045      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xc62>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a28      	ldr	r2, [pc, #160]	@ (80039dc <HAL_DMA_IRQHandler+0xc7c>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d040      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xc62>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a26      	ldr	r2, [pc, #152]	@ (80039e0 <HAL_DMA_IRQHandler+0xc80>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d03b      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xc62>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4a25      	ldr	r2, [pc, #148]	@ (80039e4 <HAL_DMA_IRQHandler+0xc84>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d036      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xc62>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a23      	ldr	r2, [pc, #140]	@ (80039e8 <HAL_DMA_IRQHandler+0xc88>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d031      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xc62>
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a22      	ldr	r2, [pc, #136]	@ (80039ec <HAL_DMA_IRQHandler+0xc8c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d02c      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xc62>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a20      	ldr	r2, [pc, #128]	@ (80039f0 <HAL_DMA_IRQHandler+0xc90>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d027      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xc62>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a1f      	ldr	r2, [pc, #124]	@ (80039f4 <HAL_DMA_IRQHandler+0xc94>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d022      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xc62>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a1d      	ldr	r2, [pc, #116]	@ (80039f8 <HAL_DMA_IRQHandler+0xc98>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d01d      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xc62>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a1c      	ldr	r2, [pc, #112]	@ (80039fc <HAL_DMA_IRQHandler+0xc9c>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d018      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xc62>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a1a      	ldr	r2, [pc, #104]	@ (8003a00 <HAL_DMA_IRQHandler+0xca0>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d013      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xc62>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a19      	ldr	r2, [pc, #100]	@ (8003a04 <HAL_DMA_IRQHandler+0xca4>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d00e      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xc62>
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a17      	ldr	r2, [pc, #92]	@ (8003a08 <HAL_DMA_IRQHandler+0xca8>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d009      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xc62>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a16      	ldr	r2, [pc, #88]	@ (8003a0c <HAL_DMA_IRQHandler+0xcac>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d004      	beq.n	80039c2 <HAL_DMA_IRQHandler+0xc62>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a14      	ldr	r2, [pc, #80]	@ (8003a10 <HAL_DMA_IRQHandler+0xcb0>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d128      	bne.n	8003a14 <HAL_DMA_IRQHandler+0xcb4>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0214 	bic.w	r2, r2, #20
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	e027      	b.n	8003a24 <HAL_DMA_IRQHandler+0xcc4>
 80039d4:	40020010 	.word	0x40020010
 80039d8:	40020028 	.word	0x40020028
 80039dc:	40020040 	.word	0x40020040
 80039e0:	40020058 	.word	0x40020058
 80039e4:	40020070 	.word	0x40020070
 80039e8:	40020088 	.word	0x40020088
 80039ec:	400200a0 	.word	0x400200a0
 80039f0:	400200b8 	.word	0x400200b8
 80039f4:	40020410 	.word	0x40020410
 80039f8:	40020428 	.word	0x40020428
 80039fc:	40020440 	.word	0x40020440
 8003a00:	40020458 	.word	0x40020458
 8003a04:	40020470 	.word	0x40020470
 8003a08:	40020488 	.word	0x40020488
 8003a0c:	400204a0 	.word	0x400204a0
 8003a10:	400204b8 	.word	0x400204b8
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 020a 	bic.w	r2, r2, #10
 8003a22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 8097 	beq.w	8003b6c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a46:	e091      	b.n	8003b6c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a4c:	f003 031f 	and.w	r3, r3, #31
 8003a50:	2208      	movs	r2, #8
 8003a52:	409a      	lsls	r2, r3
 8003a54:	697b      	ldr	r3, [r7, #20]
 8003a56:	4013      	ands	r3, r2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	f000 8088 	beq.w	8003b6e <HAL_DMA_IRQHandler+0xe0e>
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	f003 0308 	and.w	r3, r3, #8
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 8082 	beq.w	8003b6e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a41      	ldr	r2, [pc, #260]	@ (8003b74 <HAL_DMA_IRQHandler+0xe14>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d04a      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xdaa>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a3f      	ldr	r2, [pc, #252]	@ (8003b78 <HAL_DMA_IRQHandler+0xe18>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d045      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xdaa>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a3e      	ldr	r2, [pc, #248]	@ (8003b7c <HAL_DMA_IRQHandler+0xe1c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d040      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xdaa>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a3c      	ldr	r2, [pc, #240]	@ (8003b80 <HAL_DMA_IRQHandler+0xe20>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d03b      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xdaa>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a3b      	ldr	r2, [pc, #236]	@ (8003b84 <HAL_DMA_IRQHandler+0xe24>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d036      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xdaa>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a39      	ldr	r2, [pc, #228]	@ (8003b88 <HAL_DMA_IRQHandler+0xe28>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d031      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xdaa>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a38      	ldr	r2, [pc, #224]	@ (8003b8c <HAL_DMA_IRQHandler+0xe2c>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d02c      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xdaa>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a36      	ldr	r2, [pc, #216]	@ (8003b90 <HAL_DMA_IRQHandler+0xe30>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d027      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xdaa>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a35      	ldr	r2, [pc, #212]	@ (8003b94 <HAL_DMA_IRQHandler+0xe34>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d022      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xdaa>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a33      	ldr	r2, [pc, #204]	@ (8003b98 <HAL_DMA_IRQHandler+0xe38>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d01d      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xdaa>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a32      	ldr	r2, [pc, #200]	@ (8003b9c <HAL_DMA_IRQHandler+0xe3c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d018      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xdaa>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a30      	ldr	r2, [pc, #192]	@ (8003ba0 <HAL_DMA_IRQHandler+0xe40>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d013      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xdaa>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a2f      	ldr	r2, [pc, #188]	@ (8003ba4 <HAL_DMA_IRQHandler+0xe44>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d00e      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xdaa>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a2d      	ldr	r2, [pc, #180]	@ (8003ba8 <HAL_DMA_IRQHandler+0xe48>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d009      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xdaa>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a2c      	ldr	r2, [pc, #176]	@ (8003bac <HAL_DMA_IRQHandler+0xe4c>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d004      	beq.n	8003b0a <HAL_DMA_IRQHandler+0xdaa>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a2a      	ldr	r2, [pc, #168]	@ (8003bb0 <HAL_DMA_IRQHandler+0xe50>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d108      	bne.n	8003b1c <HAL_DMA_IRQHandler+0xdbc>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 021c 	bic.w	r2, r2, #28
 8003b18:	601a      	str	r2, [r3, #0]
 8003b1a:	e007      	b.n	8003b2c <HAL_DMA_IRQHandler+0xdcc>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f022 020e 	bic.w	r2, r2, #14
 8003b2a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b30:	f003 031f 	and.w	r3, r3, #31
 8003b34:	2201      	movs	r2, #1
 8003b36:	409a      	lsls	r2, r3
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2201      	movs	r2, #1
 8003b46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d009      	beq.n	8003b6e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	4798      	blx	r3
 8003b62:	e004      	b.n	8003b6e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003b64:	bf00      	nop
 8003b66:	e002      	b.n	8003b6e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b68:	bf00      	nop
 8003b6a:	e000      	b.n	8003b6e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b6c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003b6e:	3728      	adds	r7, #40	@ 0x28
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	40020010 	.word	0x40020010
 8003b78:	40020028 	.word	0x40020028
 8003b7c:	40020040 	.word	0x40020040
 8003b80:	40020058 	.word	0x40020058
 8003b84:	40020070 	.word	0x40020070
 8003b88:	40020088 	.word	0x40020088
 8003b8c:	400200a0 	.word	0x400200a0
 8003b90:	400200b8 	.word	0x400200b8
 8003b94:	40020410 	.word	0x40020410
 8003b98:	40020428 	.word	0x40020428
 8003b9c:	40020440 	.word	0x40020440
 8003ba0:	40020458 	.word	0x40020458
 8003ba4:	40020470 	.word	0x40020470
 8003ba8:	40020488 	.word	0x40020488
 8003bac:	400204a0 	.word	0x400204a0
 8003bb0:	400204b8 	.word	0x400204b8

08003bb4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b087      	sub	sp, #28
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
 8003bc0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bcc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a7f      	ldr	r2, [pc, #508]	@ (8003dd0 <DMA_SetConfig+0x21c>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d072      	beq.n	8003cbe <DMA_SetConfig+0x10a>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a7d      	ldr	r2, [pc, #500]	@ (8003dd4 <DMA_SetConfig+0x220>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d06d      	beq.n	8003cbe <DMA_SetConfig+0x10a>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a7c      	ldr	r2, [pc, #496]	@ (8003dd8 <DMA_SetConfig+0x224>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d068      	beq.n	8003cbe <DMA_SetConfig+0x10a>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a7a      	ldr	r2, [pc, #488]	@ (8003ddc <DMA_SetConfig+0x228>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d063      	beq.n	8003cbe <DMA_SetConfig+0x10a>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a79      	ldr	r2, [pc, #484]	@ (8003de0 <DMA_SetConfig+0x22c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d05e      	beq.n	8003cbe <DMA_SetConfig+0x10a>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a77      	ldr	r2, [pc, #476]	@ (8003de4 <DMA_SetConfig+0x230>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d059      	beq.n	8003cbe <DMA_SetConfig+0x10a>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a76      	ldr	r2, [pc, #472]	@ (8003de8 <DMA_SetConfig+0x234>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d054      	beq.n	8003cbe <DMA_SetConfig+0x10a>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a74      	ldr	r2, [pc, #464]	@ (8003dec <DMA_SetConfig+0x238>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d04f      	beq.n	8003cbe <DMA_SetConfig+0x10a>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a73      	ldr	r2, [pc, #460]	@ (8003df0 <DMA_SetConfig+0x23c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d04a      	beq.n	8003cbe <DMA_SetConfig+0x10a>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a71      	ldr	r2, [pc, #452]	@ (8003df4 <DMA_SetConfig+0x240>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d045      	beq.n	8003cbe <DMA_SetConfig+0x10a>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a70      	ldr	r2, [pc, #448]	@ (8003df8 <DMA_SetConfig+0x244>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d040      	beq.n	8003cbe <DMA_SetConfig+0x10a>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a6e      	ldr	r2, [pc, #440]	@ (8003dfc <DMA_SetConfig+0x248>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d03b      	beq.n	8003cbe <DMA_SetConfig+0x10a>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a6d      	ldr	r2, [pc, #436]	@ (8003e00 <DMA_SetConfig+0x24c>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d036      	beq.n	8003cbe <DMA_SetConfig+0x10a>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a6b      	ldr	r2, [pc, #428]	@ (8003e04 <DMA_SetConfig+0x250>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d031      	beq.n	8003cbe <DMA_SetConfig+0x10a>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a6a      	ldr	r2, [pc, #424]	@ (8003e08 <DMA_SetConfig+0x254>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d02c      	beq.n	8003cbe <DMA_SetConfig+0x10a>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a68      	ldr	r2, [pc, #416]	@ (8003e0c <DMA_SetConfig+0x258>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d027      	beq.n	8003cbe <DMA_SetConfig+0x10a>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a67      	ldr	r2, [pc, #412]	@ (8003e10 <DMA_SetConfig+0x25c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d022      	beq.n	8003cbe <DMA_SetConfig+0x10a>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a65      	ldr	r2, [pc, #404]	@ (8003e14 <DMA_SetConfig+0x260>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d01d      	beq.n	8003cbe <DMA_SetConfig+0x10a>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a64      	ldr	r2, [pc, #400]	@ (8003e18 <DMA_SetConfig+0x264>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d018      	beq.n	8003cbe <DMA_SetConfig+0x10a>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a62      	ldr	r2, [pc, #392]	@ (8003e1c <DMA_SetConfig+0x268>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d013      	beq.n	8003cbe <DMA_SetConfig+0x10a>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a61      	ldr	r2, [pc, #388]	@ (8003e20 <DMA_SetConfig+0x26c>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d00e      	beq.n	8003cbe <DMA_SetConfig+0x10a>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a5f      	ldr	r2, [pc, #380]	@ (8003e24 <DMA_SetConfig+0x270>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d009      	beq.n	8003cbe <DMA_SetConfig+0x10a>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a5e      	ldr	r2, [pc, #376]	@ (8003e28 <DMA_SetConfig+0x274>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d004      	beq.n	8003cbe <DMA_SetConfig+0x10a>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a5c      	ldr	r2, [pc, #368]	@ (8003e2c <DMA_SetConfig+0x278>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d101      	bne.n	8003cc2 <DMA_SetConfig+0x10e>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	e000      	b.n	8003cc4 <DMA_SetConfig+0x110>
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00d      	beq.n	8003ce4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ccc:	68fa      	ldr	r2, [r7, #12]
 8003cce:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003cd0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d004      	beq.n	8003ce4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003ce2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a39      	ldr	r2, [pc, #228]	@ (8003dd0 <DMA_SetConfig+0x21c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d04a      	beq.n	8003d84 <DMA_SetConfig+0x1d0>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a38      	ldr	r2, [pc, #224]	@ (8003dd4 <DMA_SetConfig+0x220>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d045      	beq.n	8003d84 <DMA_SetConfig+0x1d0>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a36      	ldr	r2, [pc, #216]	@ (8003dd8 <DMA_SetConfig+0x224>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d040      	beq.n	8003d84 <DMA_SetConfig+0x1d0>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a35      	ldr	r2, [pc, #212]	@ (8003ddc <DMA_SetConfig+0x228>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d03b      	beq.n	8003d84 <DMA_SetConfig+0x1d0>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a33      	ldr	r2, [pc, #204]	@ (8003de0 <DMA_SetConfig+0x22c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d036      	beq.n	8003d84 <DMA_SetConfig+0x1d0>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a32      	ldr	r2, [pc, #200]	@ (8003de4 <DMA_SetConfig+0x230>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d031      	beq.n	8003d84 <DMA_SetConfig+0x1d0>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a30      	ldr	r2, [pc, #192]	@ (8003de8 <DMA_SetConfig+0x234>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d02c      	beq.n	8003d84 <DMA_SetConfig+0x1d0>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a2f      	ldr	r2, [pc, #188]	@ (8003dec <DMA_SetConfig+0x238>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d027      	beq.n	8003d84 <DMA_SetConfig+0x1d0>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a2d      	ldr	r2, [pc, #180]	@ (8003df0 <DMA_SetConfig+0x23c>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d022      	beq.n	8003d84 <DMA_SetConfig+0x1d0>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a2c      	ldr	r2, [pc, #176]	@ (8003df4 <DMA_SetConfig+0x240>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d01d      	beq.n	8003d84 <DMA_SetConfig+0x1d0>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a2a      	ldr	r2, [pc, #168]	@ (8003df8 <DMA_SetConfig+0x244>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d018      	beq.n	8003d84 <DMA_SetConfig+0x1d0>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a29      	ldr	r2, [pc, #164]	@ (8003dfc <DMA_SetConfig+0x248>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d013      	beq.n	8003d84 <DMA_SetConfig+0x1d0>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a27      	ldr	r2, [pc, #156]	@ (8003e00 <DMA_SetConfig+0x24c>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d00e      	beq.n	8003d84 <DMA_SetConfig+0x1d0>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a26      	ldr	r2, [pc, #152]	@ (8003e04 <DMA_SetConfig+0x250>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d009      	beq.n	8003d84 <DMA_SetConfig+0x1d0>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a24      	ldr	r2, [pc, #144]	@ (8003e08 <DMA_SetConfig+0x254>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d004      	beq.n	8003d84 <DMA_SetConfig+0x1d0>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a23      	ldr	r2, [pc, #140]	@ (8003e0c <DMA_SetConfig+0x258>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d101      	bne.n	8003d88 <DMA_SetConfig+0x1d4>
 8003d84:	2301      	movs	r3, #1
 8003d86:	e000      	b.n	8003d8a <DMA_SetConfig+0x1d6>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d059      	beq.n	8003e42 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d92:	f003 031f 	and.w	r3, r3, #31
 8003d96:	223f      	movs	r2, #63	@ 0x3f
 8003d98:	409a      	lsls	r2, r3
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003dac:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	2b40      	cmp	r3, #64	@ 0x40
 8003dbc:	d138      	bne.n	8003e30 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	687a      	ldr	r2, [r7, #4]
 8003dc4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68ba      	ldr	r2, [r7, #8]
 8003dcc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003dce:	e086      	b.n	8003ede <DMA_SetConfig+0x32a>
 8003dd0:	40020010 	.word	0x40020010
 8003dd4:	40020028 	.word	0x40020028
 8003dd8:	40020040 	.word	0x40020040
 8003ddc:	40020058 	.word	0x40020058
 8003de0:	40020070 	.word	0x40020070
 8003de4:	40020088 	.word	0x40020088
 8003de8:	400200a0 	.word	0x400200a0
 8003dec:	400200b8 	.word	0x400200b8
 8003df0:	40020410 	.word	0x40020410
 8003df4:	40020428 	.word	0x40020428
 8003df8:	40020440 	.word	0x40020440
 8003dfc:	40020458 	.word	0x40020458
 8003e00:	40020470 	.word	0x40020470
 8003e04:	40020488 	.word	0x40020488
 8003e08:	400204a0 	.word	0x400204a0
 8003e0c:	400204b8 	.word	0x400204b8
 8003e10:	58025408 	.word	0x58025408
 8003e14:	5802541c 	.word	0x5802541c
 8003e18:	58025430 	.word	0x58025430
 8003e1c:	58025444 	.word	0x58025444
 8003e20:	58025458 	.word	0x58025458
 8003e24:	5802546c 	.word	0x5802546c
 8003e28:	58025480 	.word	0x58025480
 8003e2c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	60da      	str	r2, [r3, #12]
}
 8003e40:	e04d      	b.n	8003ede <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a29      	ldr	r2, [pc, #164]	@ (8003eec <DMA_SetConfig+0x338>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d022      	beq.n	8003e92 <DMA_SetConfig+0x2de>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a27      	ldr	r2, [pc, #156]	@ (8003ef0 <DMA_SetConfig+0x33c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d01d      	beq.n	8003e92 <DMA_SetConfig+0x2de>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a26      	ldr	r2, [pc, #152]	@ (8003ef4 <DMA_SetConfig+0x340>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d018      	beq.n	8003e92 <DMA_SetConfig+0x2de>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a24      	ldr	r2, [pc, #144]	@ (8003ef8 <DMA_SetConfig+0x344>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d013      	beq.n	8003e92 <DMA_SetConfig+0x2de>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a23      	ldr	r2, [pc, #140]	@ (8003efc <DMA_SetConfig+0x348>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d00e      	beq.n	8003e92 <DMA_SetConfig+0x2de>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a21      	ldr	r2, [pc, #132]	@ (8003f00 <DMA_SetConfig+0x34c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d009      	beq.n	8003e92 <DMA_SetConfig+0x2de>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a20      	ldr	r2, [pc, #128]	@ (8003f04 <DMA_SetConfig+0x350>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d004      	beq.n	8003e92 <DMA_SetConfig+0x2de>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a1e      	ldr	r2, [pc, #120]	@ (8003f08 <DMA_SetConfig+0x354>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d101      	bne.n	8003e96 <DMA_SetConfig+0x2e2>
 8003e92:	2301      	movs	r3, #1
 8003e94:	e000      	b.n	8003e98 <DMA_SetConfig+0x2e4>
 8003e96:	2300      	movs	r3, #0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d020      	beq.n	8003ede <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ea0:	f003 031f 	and.w	r3, r3, #31
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	409a      	lsls	r2, r3
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	2b40      	cmp	r3, #64	@ 0x40
 8003eba:	d108      	bne.n	8003ece <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	60da      	str	r2, [r3, #12]
}
 8003ecc:	e007      	b.n	8003ede <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68ba      	ldr	r2, [r7, #8]
 8003ed4:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	60da      	str	r2, [r3, #12]
}
 8003ede:	bf00      	nop
 8003ee0:	371c      	adds	r7, #28
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	58025408 	.word	0x58025408
 8003ef0:	5802541c 	.word	0x5802541c
 8003ef4:	58025430 	.word	0x58025430
 8003ef8:	58025444 	.word	0x58025444
 8003efc:	58025458 	.word	0x58025458
 8003f00:	5802546c 	.word	0x5802546c
 8003f04:	58025480 	.word	0x58025480
 8003f08:	58025494 	.word	0x58025494

08003f0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a42      	ldr	r2, [pc, #264]	@ (8004024 <DMA_CalcBaseAndBitshift+0x118>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d04a      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a41      	ldr	r2, [pc, #260]	@ (8004028 <DMA_CalcBaseAndBitshift+0x11c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d045      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a3f      	ldr	r2, [pc, #252]	@ (800402c <DMA_CalcBaseAndBitshift+0x120>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d040      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a3e      	ldr	r2, [pc, #248]	@ (8004030 <DMA_CalcBaseAndBitshift+0x124>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d03b      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a3c      	ldr	r2, [pc, #240]	@ (8004034 <DMA_CalcBaseAndBitshift+0x128>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d036      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a3b      	ldr	r2, [pc, #236]	@ (8004038 <DMA_CalcBaseAndBitshift+0x12c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d031      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a39      	ldr	r2, [pc, #228]	@ (800403c <DMA_CalcBaseAndBitshift+0x130>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d02c      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a38      	ldr	r2, [pc, #224]	@ (8004040 <DMA_CalcBaseAndBitshift+0x134>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d027      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a36      	ldr	r2, [pc, #216]	@ (8004044 <DMA_CalcBaseAndBitshift+0x138>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d022      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a35      	ldr	r2, [pc, #212]	@ (8004048 <DMA_CalcBaseAndBitshift+0x13c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d01d      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a33      	ldr	r2, [pc, #204]	@ (800404c <DMA_CalcBaseAndBitshift+0x140>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d018      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a32      	ldr	r2, [pc, #200]	@ (8004050 <DMA_CalcBaseAndBitshift+0x144>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d013      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a30      	ldr	r2, [pc, #192]	@ (8004054 <DMA_CalcBaseAndBitshift+0x148>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00e      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a2f      	ldr	r2, [pc, #188]	@ (8004058 <DMA_CalcBaseAndBitshift+0x14c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d009      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a2d      	ldr	r2, [pc, #180]	@ (800405c <DMA_CalcBaseAndBitshift+0x150>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d004      	beq.n	8003fb4 <DMA_CalcBaseAndBitshift+0xa8>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a2c      	ldr	r2, [pc, #176]	@ (8004060 <DMA_CalcBaseAndBitshift+0x154>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d101      	bne.n	8003fb8 <DMA_CalcBaseAndBitshift+0xac>
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e000      	b.n	8003fba <DMA_CalcBaseAndBitshift+0xae>
 8003fb8:	2300      	movs	r3, #0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d024      	beq.n	8004008 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	3b10      	subs	r3, #16
 8003fc6:	4a27      	ldr	r2, [pc, #156]	@ (8004064 <DMA_CalcBaseAndBitshift+0x158>)
 8003fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8003fcc:	091b      	lsrs	r3, r3, #4
 8003fce:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f003 0307 	and.w	r3, r3, #7
 8003fd6:	4a24      	ldr	r2, [pc, #144]	@ (8004068 <DMA_CalcBaseAndBitshift+0x15c>)
 8003fd8:	5cd3      	ldrb	r3, [r2, r3]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2b03      	cmp	r3, #3
 8003fe4:	d908      	bls.n	8003ff8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	461a      	mov	r2, r3
 8003fec:	4b1f      	ldr	r3, [pc, #124]	@ (800406c <DMA_CalcBaseAndBitshift+0x160>)
 8003fee:	4013      	ands	r3, r2
 8003ff0:	1d1a      	adds	r2, r3, #4
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	659a      	str	r2, [r3, #88]	@ 0x58
 8003ff6:	e00d      	b.n	8004014 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	461a      	mov	r2, r3
 8003ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800406c <DMA_CalcBaseAndBitshift+0x160>)
 8004000:	4013      	ands	r3, r2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6593      	str	r3, [r2, #88]	@ 0x58
 8004006:	e005      	b.n	8004014 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004018:	4618      	mov	r0, r3
 800401a:	3714      	adds	r7, #20
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	40020010 	.word	0x40020010
 8004028:	40020028 	.word	0x40020028
 800402c:	40020040 	.word	0x40020040
 8004030:	40020058 	.word	0x40020058
 8004034:	40020070 	.word	0x40020070
 8004038:	40020088 	.word	0x40020088
 800403c:	400200a0 	.word	0x400200a0
 8004040:	400200b8 	.word	0x400200b8
 8004044:	40020410 	.word	0x40020410
 8004048:	40020428 	.word	0x40020428
 800404c:	40020440 	.word	0x40020440
 8004050:	40020458 	.word	0x40020458
 8004054:	40020470 	.word	0x40020470
 8004058:	40020488 	.word	0x40020488
 800405c:	400204a0 	.word	0x400204a0
 8004060:	400204b8 	.word	0x400204b8
 8004064:	aaaaaaab 	.word	0xaaaaaaab
 8004068:	080120c8 	.word	0x080120c8
 800406c:	fffffc00 	.word	0xfffffc00

08004070 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004070:	b480      	push	{r7}
 8004072:	b085      	sub	sp, #20
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004078:	2300      	movs	r3, #0
 800407a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	699b      	ldr	r3, [r3, #24]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d120      	bne.n	80040c6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004088:	2b03      	cmp	r3, #3
 800408a:	d858      	bhi.n	800413e <DMA_CheckFifoParam+0xce>
 800408c:	a201      	add	r2, pc, #4	@ (adr r2, 8004094 <DMA_CheckFifoParam+0x24>)
 800408e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004092:	bf00      	nop
 8004094:	080040a5 	.word	0x080040a5
 8004098:	080040b7 	.word	0x080040b7
 800409c:	080040a5 	.word	0x080040a5
 80040a0:	0800413f 	.word	0x0800413f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d048      	beq.n	8004142 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040b4:	e045      	b.n	8004142 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040be:	d142      	bne.n	8004146 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040c4:	e03f      	b.n	8004146 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040ce:	d123      	bne.n	8004118 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d4:	2b03      	cmp	r3, #3
 80040d6:	d838      	bhi.n	800414a <DMA_CheckFifoParam+0xda>
 80040d8:	a201      	add	r2, pc, #4	@ (adr r2, 80040e0 <DMA_CheckFifoParam+0x70>)
 80040da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040de:	bf00      	nop
 80040e0:	080040f1 	.word	0x080040f1
 80040e4:	080040f7 	.word	0x080040f7
 80040e8:	080040f1 	.word	0x080040f1
 80040ec:	08004109 	.word	0x08004109
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	73fb      	strb	r3, [r7, #15]
        break;
 80040f4:	e030      	b.n	8004158 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d025      	beq.n	800414e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004106:	e022      	b.n	800414e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004110:	d11f      	bne.n	8004152 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004116:	e01c      	b.n	8004152 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800411c:	2b02      	cmp	r3, #2
 800411e:	d902      	bls.n	8004126 <DMA_CheckFifoParam+0xb6>
 8004120:	2b03      	cmp	r3, #3
 8004122:	d003      	beq.n	800412c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004124:	e018      	b.n	8004158 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	73fb      	strb	r3, [r7, #15]
        break;
 800412a:	e015      	b.n	8004158 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004130:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00e      	beq.n	8004156 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	73fb      	strb	r3, [r7, #15]
    break;
 800413c:	e00b      	b.n	8004156 <DMA_CheckFifoParam+0xe6>
        break;
 800413e:	bf00      	nop
 8004140:	e00a      	b.n	8004158 <DMA_CheckFifoParam+0xe8>
        break;
 8004142:	bf00      	nop
 8004144:	e008      	b.n	8004158 <DMA_CheckFifoParam+0xe8>
        break;
 8004146:	bf00      	nop
 8004148:	e006      	b.n	8004158 <DMA_CheckFifoParam+0xe8>
        break;
 800414a:	bf00      	nop
 800414c:	e004      	b.n	8004158 <DMA_CheckFifoParam+0xe8>
        break;
 800414e:	bf00      	nop
 8004150:	e002      	b.n	8004158 <DMA_CheckFifoParam+0xe8>
        break;
 8004152:	bf00      	nop
 8004154:	e000      	b.n	8004158 <DMA_CheckFifoParam+0xe8>
    break;
 8004156:	bf00      	nop
    }
  }

  return status;
 8004158:	7bfb      	ldrb	r3, [r7, #15]
}
 800415a:	4618      	mov	r0, r3
 800415c:	3714      	adds	r7, #20
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop

08004168 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a38      	ldr	r2, [pc, #224]	@ (800425c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d022      	beq.n	80041c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a36      	ldr	r2, [pc, #216]	@ (8004260 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d01d      	beq.n	80041c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a35      	ldr	r2, [pc, #212]	@ (8004264 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d018      	beq.n	80041c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a33      	ldr	r2, [pc, #204]	@ (8004268 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d013      	beq.n	80041c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a32      	ldr	r2, [pc, #200]	@ (800426c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d00e      	beq.n	80041c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a30      	ldr	r2, [pc, #192]	@ (8004270 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d009      	beq.n	80041c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a2f      	ldr	r2, [pc, #188]	@ (8004274 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d004      	beq.n	80041c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a2d      	ldr	r2, [pc, #180]	@ (8004278 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d101      	bne.n	80041ca <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80041c6:	2301      	movs	r3, #1
 80041c8:	e000      	b.n	80041cc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80041ca:	2300      	movs	r3, #0
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d01a      	beq.n	8004206 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	3b08      	subs	r3, #8
 80041d8:	4a28      	ldr	r2, [pc, #160]	@ (800427c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80041da:	fba2 2303 	umull	r2, r3, r2, r3
 80041de:	091b      	lsrs	r3, r3, #4
 80041e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	4b26      	ldr	r3, [pc, #152]	@ (8004280 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80041e6:	4413      	add	r3, r2
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	461a      	mov	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a24      	ldr	r2, [pc, #144]	@ (8004284 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80041f4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f003 031f 	and.w	r3, r3, #31
 80041fc:	2201      	movs	r2, #1
 80041fe:	409a      	lsls	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004204:	e024      	b.n	8004250 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	b2db      	uxtb	r3, r3
 800420c:	3b10      	subs	r3, #16
 800420e:	4a1e      	ldr	r2, [pc, #120]	@ (8004288 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004210:	fba2 2303 	umull	r2, r3, r2, r3
 8004214:	091b      	lsrs	r3, r3, #4
 8004216:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	4a1c      	ldr	r2, [pc, #112]	@ (800428c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d806      	bhi.n	800422e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	4a1b      	ldr	r2, [pc, #108]	@ (8004290 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d902      	bls.n	800422e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	3308      	adds	r3, #8
 800422c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	4b18      	ldr	r3, [pc, #96]	@ (8004294 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004232:	4413      	add	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	461a      	mov	r2, r3
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	4a16      	ldr	r2, [pc, #88]	@ (8004298 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004240:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f003 031f 	and.w	r3, r3, #31
 8004248:	2201      	movs	r2, #1
 800424a:	409a      	lsls	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004250:	bf00      	nop
 8004252:	3714      	adds	r7, #20
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr
 800425c:	58025408 	.word	0x58025408
 8004260:	5802541c 	.word	0x5802541c
 8004264:	58025430 	.word	0x58025430
 8004268:	58025444 	.word	0x58025444
 800426c:	58025458 	.word	0x58025458
 8004270:	5802546c 	.word	0x5802546c
 8004274:	58025480 	.word	0x58025480
 8004278:	58025494 	.word	0x58025494
 800427c:	cccccccd 	.word	0xcccccccd
 8004280:	16009600 	.word	0x16009600
 8004284:	58025880 	.word	0x58025880
 8004288:	aaaaaaab 	.word	0xaaaaaaab
 800428c:	400204b8 	.word	0x400204b8
 8004290:	4002040f 	.word	0x4002040f
 8004294:	10008200 	.word	0x10008200
 8004298:	40020880 	.word	0x40020880

0800429c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800429c:	b480      	push	{r7}
 800429e:	b085      	sub	sp, #20
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d04a      	beq.n	8004348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d847      	bhi.n	8004348 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a25      	ldr	r2, [pc, #148]	@ (8004354 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d022      	beq.n	8004308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4a24      	ldr	r2, [pc, #144]	@ (8004358 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d01d      	beq.n	8004308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a22      	ldr	r2, [pc, #136]	@ (800435c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d018      	beq.n	8004308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a21      	ldr	r2, [pc, #132]	@ (8004360 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d013      	beq.n	8004308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a1f      	ldr	r2, [pc, #124]	@ (8004364 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d00e      	beq.n	8004308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d009      	beq.n	8004308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a1c      	ldr	r2, [pc, #112]	@ (800436c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d004      	beq.n	8004308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a1b      	ldr	r2, [pc, #108]	@ (8004370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d101      	bne.n	800430c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004308:	2301      	movs	r3, #1
 800430a:	e000      	b.n	800430e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800430c:	2300      	movs	r3, #0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00a      	beq.n	8004328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4b17      	ldr	r3, [pc, #92]	@ (8004374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8004316:	4413      	add	r3, r2
 8004318:	009b      	lsls	r3, r3, #2
 800431a:	461a      	mov	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a15      	ldr	r2, [pc, #84]	@ (8004378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004324:	671a      	str	r2, [r3, #112]	@ 0x70
 8004326:	e009      	b.n	800433c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4b14      	ldr	r3, [pc, #80]	@ (800437c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800432c:	4413      	add	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	461a      	mov	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a11      	ldr	r2, [pc, #68]	@ (8004380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800433a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	3b01      	subs	r3, #1
 8004340:	2201      	movs	r2, #1
 8004342:	409a      	lsls	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004348:	bf00      	nop
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	58025408 	.word	0x58025408
 8004358:	5802541c 	.word	0x5802541c
 800435c:	58025430 	.word	0x58025430
 8004360:	58025444 	.word	0x58025444
 8004364:	58025458 	.word	0x58025458
 8004368:	5802546c 	.word	0x5802546c
 800436c:	58025480 	.word	0x58025480
 8004370:	58025494 	.word	0x58025494
 8004374:	1600963f 	.word	0x1600963f
 8004378:	58025940 	.word	0x58025940
 800437c:	1000823f 	.word	0x1000823f
 8004380:	40020940 	.word	0x40020940

08004384 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8004384:	b480      	push	{r7}
 8004386:	b087      	sub	sp, #28
 8004388:	af00      	add	r7, sp, #0
 800438a:	60f8      	str	r0, [r7, #12]
 800438c:	460b      	mov	r3, r1
 800438e:	607a      	str	r2, [r7, #4]
 8004390:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004392:	2300      	movs	r3, #0
 8004394:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	e00a      	b.n	80043b6 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 80043a0:	7afb      	ldrb	r3, [r7, #11]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d103      	bne.n	80043ae <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	605a      	str	r2, [r3, #4]
      break;
 80043ac:	e002      	b.n	80043b4 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	75fb      	strb	r3, [r7, #23]
      break;
 80043b2:	bf00      	nop
  }

  return status;
 80043b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	371c      	adds	r7, #28
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b083      	sub	sp, #12
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
 80043ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e003      	b.n	80043de <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80043dc:	2300      	movs	r3, #0
  }
}
 80043de:	4618      	mov	r0, r3
 80043e0:	370c      	adds	r7, #12
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr
	...

080043ec <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	0c1b      	lsrs	r3, r3, #16
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 031f 	and.w	r3, r3, #31
 8004408:	2201      	movs	r2, #1
 800440a:	fa02 f303 	lsl.w	r3, r2, r3
 800440e:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8004410:	f7fd fecc 	bl	80021ac <HAL_GetCurrentCPUID>
 8004414:	4603      	mov	r3, r0
 8004416:	2b03      	cmp	r3, #3
 8004418:	d105      	bne.n	8004426 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	011a      	lsls	r2, r3, #4
 800441e:	4b0f      	ldr	r3, [pc, #60]	@ (800445c <HAL_EXTI_IRQHandler+0x70>)
 8004420:	4413      	add	r3, r2
 8004422:	617b      	str	r3, [r7, #20]
 8004424:	e004      	b.n	8004430 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	011a      	lsls	r2, r3, #4
 800442a:	4b0d      	ldr	r3, [pc, #52]	@ (8004460 <HAL_EXTI_IRQHandler+0x74>)
 800442c:	4413      	add	r3, r2
 800442e:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68fa      	ldr	r2, [r7, #12]
 8004436:	4013      	ands	r3, r2
 8004438:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d009      	beq.n	8004454 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	4798      	blx	r3
    }
  }
}
 8004454:	bf00      	nop
 8004456:	3718      	adds	r7, #24
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}
 800445c:	58000088 	.word	0x58000088
 8004460:	580000c8 	.word	0x580000c8

08004464 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004464:	b480      	push	{r7}
 8004466:	b089      	sub	sp, #36	@ 0x24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800446e:	2300      	movs	r3, #0
 8004470:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004472:	4b89      	ldr	r3, [pc, #548]	@ (8004698 <HAL_GPIO_Init+0x234>)
 8004474:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004476:	e194      	b.n	80047a2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	2101      	movs	r1, #1
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	fa01 f303 	lsl.w	r3, r1, r3
 8004484:	4013      	ands	r3, r2
 8004486:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	2b00      	cmp	r3, #0
 800448c:	f000 8186 	beq.w	800479c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f003 0303 	and.w	r3, r3, #3
 8004498:	2b01      	cmp	r3, #1
 800449a:	d005      	beq.n	80044a8 <HAL_GPIO_Init+0x44>
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f003 0303 	and.w	r3, r3, #3
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	d130      	bne.n	800450a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	005b      	lsls	r3, r3, #1
 80044b2:	2203      	movs	r2, #3
 80044b4:	fa02 f303 	lsl.w	r3, r2, r3
 80044b8:	43db      	mvns	r3, r3
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	4013      	ands	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	68da      	ldr	r2, [r3, #12]
 80044c4:	69fb      	ldr	r3, [r7, #28]
 80044c6:	005b      	lsls	r3, r3, #1
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69ba      	ldr	r2, [r7, #24]
 80044d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044de:	2201      	movs	r2, #1
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	fa02 f303 	lsl.w	r3, r2, r3
 80044e6:	43db      	mvns	r3, r3
 80044e8:	69ba      	ldr	r2, [r7, #24]
 80044ea:	4013      	ands	r3, r2
 80044ec:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	091b      	lsrs	r3, r3, #4
 80044f4:	f003 0201 	and.w	r2, r3, #1
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	fa02 f303 	lsl.w	r3, r2, r3
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	4313      	orrs	r3, r2
 8004502:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	69ba      	ldr	r2, [r7, #24]
 8004508:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f003 0303 	and.w	r3, r3, #3
 8004512:	2b03      	cmp	r3, #3
 8004514:	d017      	beq.n	8004546 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	005b      	lsls	r3, r3, #1
 8004520:	2203      	movs	r2, #3
 8004522:	fa02 f303 	lsl.w	r3, r2, r3
 8004526:	43db      	mvns	r3, r3
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4013      	ands	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	689a      	ldr	r2, [r3, #8]
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	fa02 f303 	lsl.w	r3, r2, r3
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	4313      	orrs	r3, r2
 800453e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f003 0303 	and.w	r3, r3, #3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d123      	bne.n	800459a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	08da      	lsrs	r2, r3, #3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	3208      	adds	r2, #8
 800455a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800455e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	220f      	movs	r2, #15
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	43db      	mvns	r3, r3
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4013      	ands	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	691a      	ldr	r2, [r3, #16]
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	f003 0307 	and.w	r3, r3, #7
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	4313      	orrs	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	08da      	lsrs	r2, r3, #3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3208      	adds	r2, #8
 8004594:	69b9      	ldr	r1, [r7, #24]
 8004596:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	2203      	movs	r2, #3
 80045a6:	fa02 f303 	lsl.w	r3, r2, r3
 80045aa:	43db      	mvns	r3, r3
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	4013      	ands	r3, r2
 80045b0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f003 0203 	and.w	r2, r3, #3
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	69ba      	ldr	r2, [r7, #24]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	f000 80e0 	beq.w	800479c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045dc:	4b2f      	ldr	r3, [pc, #188]	@ (800469c <HAL_GPIO_Init+0x238>)
 80045de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80045e2:	4a2e      	ldr	r2, [pc, #184]	@ (800469c <HAL_GPIO_Init+0x238>)
 80045e4:	f043 0302 	orr.w	r3, r3, #2
 80045e8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80045ec:	4b2b      	ldr	r3, [pc, #172]	@ (800469c <HAL_GPIO_Init+0x238>)
 80045ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045fa:	4a29      	ldr	r2, [pc, #164]	@ (80046a0 <HAL_GPIO_Init+0x23c>)
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	089b      	lsrs	r3, r3, #2
 8004600:	3302      	adds	r3, #2
 8004602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004606:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f003 0303 	and.w	r3, r3, #3
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	220f      	movs	r2, #15
 8004612:	fa02 f303 	lsl.w	r3, r2, r3
 8004616:	43db      	mvns	r3, r3
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	4013      	ands	r3, r2
 800461c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a20      	ldr	r2, [pc, #128]	@ (80046a4 <HAL_GPIO_Init+0x240>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d052      	beq.n	80046cc <HAL_GPIO_Init+0x268>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a1f      	ldr	r2, [pc, #124]	@ (80046a8 <HAL_GPIO_Init+0x244>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d031      	beq.n	8004692 <HAL_GPIO_Init+0x22e>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a1e      	ldr	r2, [pc, #120]	@ (80046ac <HAL_GPIO_Init+0x248>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d02b      	beq.n	800468e <HAL_GPIO_Init+0x22a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a1d      	ldr	r2, [pc, #116]	@ (80046b0 <HAL_GPIO_Init+0x24c>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d025      	beq.n	800468a <HAL_GPIO_Init+0x226>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a1c      	ldr	r2, [pc, #112]	@ (80046b4 <HAL_GPIO_Init+0x250>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d01f      	beq.n	8004686 <HAL_GPIO_Init+0x222>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a1b      	ldr	r2, [pc, #108]	@ (80046b8 <HAL_GPIO_Init+0x254>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d019      	beq.n	8004682 <HAL_GPIO_Init+0x21e>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a1a      	ldr	r2, [pc, #104]	@ (80046bc <HAL_GPIO_Init+0x258>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d013      	beq.n	800467e <HAL_GPIO_Init+0x21a>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	4a19      	ldr	r2, [pc, #100]	@ (80046c0 <HAL_GPIO_Init+0x25c>)
 800465a:	4293      	cmp	r3, r2
 800465c:	d00d      	beq.n	800467a <HAL_GPIO_Init+0x216>
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a18      	ldr	r2, [pc, #96]	@ (80046c4 <HAL_GPIO_Init+0x260>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d007      	beq.n	8004676 <HAL_GPIO_Init+0x212>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a17      	ldr	r2, [pc, #92]	@ (80046c8 <HAL_GPIO_Init+0x264>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d101      	bne.n	8004672 <HAL_GPIO_Init+0x20e>
 800466e:	2309      	movs	r3, #9
 8004670:	e02d      	b.n	80046ce <HAL_GPIO_Init+0x26a>
 8004672:	230a      	movs	r3, #10
 8004674:	e02b      	b.n	80046ce <HAL_GPIO_Init+0x26a>
 8004676:	2308      	movs	r3, #8
 8004678:	e029      	b.n	80046ce <HAL_GPIO_Init+0x26a>
 800467a:	2307      	movs	r3, #7
 800467c:	e027      	b.n	80046ce <HAL_GPIO_Init+0x26a>
 800467e:	2306      	movs	r3, #6
 8004680:	e025      	b.n	80046ce <HAL_GPIO_Init+0x26a>
 8004682:	2305      	movs	r3, #5
 8004684:	e023      	b.n	80046ce <HAL_GPIO_Init+0x26a>
 8004686:	2304      	movs	r3, #4
 8004688:	e021      	b.n	80046ce <HAL_GPIO_Init+0x26a>
 800468a:	2303      	movs	r3, #3
 800468c:	e01f      	b.n	80046ce <HAL_GPIO_Init+0x26a>
 800468e:	2302      	movs	r3, #2
 8004690:	e01d      	b.n	80046ce <HAL_GPIO_Init+0x26a>
 8004692:	2301      	movs	r3, #1
 8004694:	e01b      	b.n	80046ce <HAL_GPIO_Init+0x26a>
 8004696:	bf00      	nop
 8004698:	58000080 	.word	0x58000080
 800469c:	58024400 	.word	0x58024400
 80046a0:	58000400 	.word	0x58000400
 80046a4:	58020000 	.word	0x58020000
 80046a8:	58020400 	.word	0x58020400
 80046ac:	58020800 	.word	0x58020800
 80046b0:	58020c00 	.word	0x58020c00
 80046b4:	58021000 	.word	0x58021000
 80046b8:	58021400 	.word	0x58021400
 80046bc:	58021800 	.word	0x58021800
 80046c0:	58021c00 	.word	0x58021c00
 80046c4:	58022000 	.word	0x58022000
 80046c8:	58022400 	.word	0x58022400
 80046cc:	2300      	movs	r3, #0
 80046ce:	69fa      	ldr	r2, [r7, #28]
 80046d0:	f002 0203 	and.w	r2, r2, #3
 80046d4:	0092      	lsls	r2, r2, #2
 80046d6:	4093      	lsls	r3, r2
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	4313      	orrs	r3, r2
 80046dc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046de:	4938      	ldr	r1, [pc, #224]	@ (80047c0 <HAL_GPIO_Init+0x35c>)
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	089b      	lsrs	r3, r3, #2
 80046e4:	3302      	adds	r3, #2
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	43db      	mvns	r3, r3
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	4013      	ands	r3, r2
 80046fc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d003      	beq.n	8004712 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	4313      	orrs	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004712:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800471a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	43db      	mvns	r3, r3
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	4013      	ands	r3, r2
 800472a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004734:	2b00      	cmp	r3, #0
 8004736:	d003      	beq.n	8004740 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	4313      	orrs	r3, r2
 800473e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004740:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004748:	697b      	ldr	r3, [r7, #20]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	43db      	mvns	r3, r3
 8004752:	69ba      	ldr	r2, [r7, #24]
 8004754:	4013      	ands	r3, r2
 8004756:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	4313      	orrs	r3, r2
 800476a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	43db      	mvns	r3, r3
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	4013      	ands	r3, r2
 8004780:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d003      	beq.n	8004796 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	69ba      	ldr	r2, [r7, #24]
 800479a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	3301      	adds	r3, #1
 80047a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	fa22 f303 	lsr.w	r3, r2, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f47f ae63 	bne.w	8004478 <HAL_GPIO_Init+0x14>
  }
}
 80047b2:	bf00      	nop
 80047b4:	bf00      	nop
 80047b6:	3724      	adds	r7, #36	@ 0x24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr
 80047c0:	58000400 	.word	0x58000400

080047c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	460b      	mov	r3, r1
 80047ce:	807b      	strh	r3, [r7, #2]
 80047d0:	4613      	mov	r3, r2
 80047d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047d4:	787b      	ldrb	r3, [r7, #1]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047da:	887a      	ldrh	r2, [r7, #2]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80047e0:	e003      	b.n	80047ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80047e2:	887b      	ldrh	r3, [r7, #2]
 80047e4:	041a      	lsls	r2, r3, #16
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	619a      	str	r2, [r3, #24]
}
 80047ea:	bf00      	nop
 80047ec:	370c      	adds	r7, #12
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr

080047f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80047f6:	b480      	push	{r7}
 80047f8:	b085      	sub	sp, #20
 80047fa:	af00      	add	r7, sp, #0
 80047fc:	6078      	str	r0, [r7, #4]
 80047fe:	460b      	mov	r3, r1
 8004800:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	695b      	ldr	r3, [r3, #20]
 8004806:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004808:	887a      	ldrh	r2, [r7, #2]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4013      	ands	r3, r2
 800480e:	041a      	lsls	r2, r3, #16
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	43d9      	mvns	r1, r3
 8004814:	887b      	ldrh	r3, [r7, #2]
 8004816:	400b      	ands	r3, r1
 8004818:	431a      	orrs	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	619a      	str	r2, [r3, #24]
}
 800481e:	bf00      	nop
 8004820:	3714      	adds	r7, #20
 8004822:	46bd      	mov	sp, r7
 8004824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004828:	4770      	bx	lr
	...

0800482c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800482c:	b480      	push	{r7}
 800482e:	b083      	sub	sp, #12
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8004834:	4a08      	ldr	r2, [pc, #32]	@ (8004858 <HAL_HSEM_FastTake+0x2c>)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	3320      	adds	r3, #32
 800483a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800483e:	4a07      	ldr	r2, [pc, #28]	@ (800485c <HAL_HSEM_FastTake+0x30>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d101      	bne.n	8004848 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8004844:	2300      	movs	r3, #0
 8004846:	e000      	b.n	800484a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
}
 800484a:	4618      	mov	r0, r3
 800484c:	370c      	adds	r7, #12
 800484e:	46bd      	mov	sp, r7
 8004850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	58026400 	.word	0x58026400
 800485c:	80000300 	.word	0x80000300

08004860 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800486a:	4906      	ldr	r1, [pc, #24]	@ (8004884 <HAL_HSEM_Release+0x24>)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004878:	bf00      	nop
 800487a:	370c      	adds	r7, #12
 800487c:	46bd      	mov	sp, r7
 800487e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004882:	4770      	bx	lr
 8004884:	58026400 	.word	0x58026400

08004888 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af02      	add	r7, sp, #8
 800488e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e0fe      	b.n	8004a98 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f00a fa7e 	bl	800edb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2203      	movs	r2, #3
 80048b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f006 fe42 	bl	800b54a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6818      	ldr	r0, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	7c1a      	ldrb	r2, [r3, #16]
 80048ce:	f88d 2000 	strb.w	r2, [sp]
 80048d2:	3304      	adds	r3, #4
 80048d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048d6:	f006 fd13 	bl	800b300 <USB_CoreInit>
 80048da:	4603      	mov	r3, r0
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d005      	beq.n	80048ec <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e0d5      	b.n	8004a98 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	2100      	movs	r1, #0
 80048f2:	4618      	mov	r0, r3
 80048f4:	f006 fe3a 	bl	800b56c <USB_SetCurrentMode>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d005      	beq.n	800490a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2202      	movs	r2, #2
 8004902:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e0c6      	b.n	8004a98 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800490a:	2300      	movs	r3, #0
 800490c:	73fb      	strb	r3, [r7, #15]
 800490e:	e04a      	b.n	80049a6 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004910:	7bfa      	ldrb	r2, [r7, #15]
 8004912:	6879      	ldr	r1, [r7, #4]
 8004914:	4613      	mov	r3, r2
 8004916:	00db      	lsls	r3, r3, #3
 8004918:	4413      	add	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	3315      	adds	r3, #21
 8004920:	2201      	movs	r2, #1
 8004922:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004924:	7bfa      	ldrb	r2, [r7, #15]
 8004926:	6879      	ldr	r1, [r7, #4]
 8004928:	4613      	mov	r3, r2
 800492a:	00db      	lsls	r3, r3, #3
 800492c:	4413      	add	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	440b      	add	r3, r1
 8004932:	3314      	adds	r3, #20
 8004934:	7bfa      	ldrb	r2, [r7, #15]
 8004936:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004938:	7bfa      	ldrb	r2, [r7, #15]
 800493a:	7bfb      	ldrb	r3, [r7, #15]
 800493c:	b298      	uxth	r0, r3
 800493e:	6879      	ldr	r1, [r7, #4]
 8004940:	4613      	mov	r3, r2
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	4413      	add	r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	440b      	add	r3, r1
 800494a:	332e      	adds	r3, #46	@ 0x2e
 800494c:	4602      	mov	r2, r0
 800494e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004950:	7bfa      	ldrb	r2, [r7, #15]
 8004952:	6879      	ldr	r1, [r7, #4]
 8004954:	4613      	mov	r3, r2
 8004956:	00db      	lsls	r3, r3, #3
 8004958:	4413      	add	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	440b      	add	r3, r1
 800495e:	3318      	adds	r3, #24
 8004960:	2200      	movs	r2, #0
 8004962:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004964:	7bfa      	ldrb	r2, [r7, #15]
 8004966:	6879      	ldr	r1, [r7, #4]
 8004968:	4613      	mov	r3, r2
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	4413      	add	r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	440b      	add	r3, r1
 8004972:	331c      	adds	r3, #28
 8004974:	2200      	movs	r2, #0
 8004976:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004978:	7bfa      	ldrb	r2, [r7, #15]
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	4613      	mov	r3, r2
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	4413      	add	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	3320      	adds	r3, #32
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800498c:	7bfa      	ldrb	r2, [r7, #15]
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	4613      	mov	r3, r2
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	4413      	add	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	3324      	adds	r3, #36	@ 0x24
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	3301      	adds	r3, #1
 80049a4:	73fb      	strb	r3, [r7, #15]
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	791b      	ldrb	r3, [r3, #4]
 80049aa:	7bfa      	ldrb	r2, [r7, #15]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d3af      	bcc.n	8004910 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049b0:	2300      	movs	r3, #0
 80049b2:	73fb      	strb	r3, [r7, #15]
 80049b4:	e044      	b.n	8004a40 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80049b6:	7bfa      	ldrb	r2, [r7, #15]
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	4613      	mov	r3, r2
 80049bc:	00db      	lsls	r3, r3, #3
 80049be:	4413      	add	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	440b      	add	r3, r1
 80049c4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80049c8:	2200      	movs	r2, #0
 80049ca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80049cc:	7bfa      	ldrb	r2, [r7, #15]
 80049ce:	6879      	ldr	r1, [r7, #4]
 80049d0:	4613      	mov	r3, r2
 80049d2:	00db      	lsls	r3, r3, #3
 80049d4:	4413      	add	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	440b      	add	r3, r1
 80049da:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80049de:	7bfa      	ldrb	r2, [r7, #15]
 80049e0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80049e2:	7bfa      	ldrb	r2, [r7, #15]
 80049e4:	6879      	ldr	r1, [r7, #4]
 80049e6:	4613      	mov	r3, r2
 80049e8:	00db      	lsls	r3, r3, #3
 80049ea:	4413      	add	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	440b      	add	r3, r1
 80049f0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80049f4:	2200      	movs	r2, #0
 80049f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80049f8:	7bfa      	ldrb	r2, [r7, #15]
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	4613      	mov	r3, r2
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	4413      	add	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	440b      	add	r3, r1
 8004a06:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004a0e:	7bfa      	ldrb	r2, [r7, #15]
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	4613      	mov	r3, r2
 8004a14:	00db      	lsls	r3, r3, #3
 8004a16:	4413      	add	r3, r2
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	440b      	add	r3, r1
 8004a1c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004a20:	2200      	movs	r2, #0
 8004a22:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004a24:	7bfa      	ldrb	r2, [r7, #15]
 8004a26:	6879      	ldr	r1, [r7, #4]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	00db      	lsls	r3, r3, #3
 8004a2c:	4413      	add	r3, r2
 8004a2e:	009b      	lsls	r3, r3, #2
 8004a30:	440b      	add	r3, r1
 8004a32:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004a36:	2200      	movs	r2, #0
 8004a38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a3a:	7bfb      	ldrb	r3, [r7, #15]
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	73fb      	strb	r3, [r7, #15]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	791b      	ldrb	r3, [r3, #4]
 8004a44:	7bfa      	ldrb	r2, [r7, #15]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d3b5      	bcc.n	80049b6 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6818      	ldr	r0, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	7c1a      	ldrb	r2, [r3, #16]
 8004a52:	f88d 2000 	strb.w	r2, [sp]
 8004a56:	3304      	adds	r3, #4
 8004a58:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a5a:	f006 fdd3 	bl	800b604 <USB_DevInit>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d005      	beq.n	8004a70 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e013      	b.n	8004a98 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	7b1b      	ldrb	r3, [r3, #12]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d102      	bne.n	8004a8c <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f001 f96c 	bl	8005d64 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f007 fe12 	bl	800c6ba <USB_DevDisconnect>

  return HAL_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b084      	sub	sp, #16
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d101      	bne.n	8004abc <HAL_PCD_Start+0x1c>
 8004ab8:	2302      	movs	r3, #2
 8004aba:	e022      	b.n	8004b02 <HAL_PCD_Start+0x62>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d009      	beq.n	8004ae4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d105      	bne.n	8004ae4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004adc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f006 fd1d 	bl	800b528 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f007 fdc0 	bl	800c678 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}

08004b0a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004b0a:	b590      	push	{r4, r7, lr}
 8004b0c:	b08d      	sub	sp, #52	@ 0x34
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b18:	6a3b      	ldr	r3, [r7, #32]
 8004b1a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f007 fe7e 	bl	800c822 <USB_GetMode>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f040 84b9 	bne.w	80054a0 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f007 fde2 	bl	800c6fc <USB_ReadInterrupts>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 84af 	beq.w	800549e <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	0a1b      	lsrs	r3, r3, #8
 8004b4a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f007 fdcf 	bl	800c6fc <USB_ReadInterrupts>
 8004b5e:	4603      	mov	r3, r0
 8004b60:	f003 0302 	and.w	r3, r3, #2
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d107      	bne.n	8004b78 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	695a      	ldr	r2, [r3, #20]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f002 0202 	and.w	r2, r2, #2
 8004b76:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f007 fdbd 	bl	800c6fc <USB_ReadInterrupts>
 8004b82:	4603      	mov	r3, r0
 8004b84:	f003 0310 	and.w	r3, r3, #16
 8004b88:	2b10      	cmp	r3, #16
 8004b8a:	d161      	bne.n	8004c50 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	699a      	ldr	r2, [r3, #24]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0210 	bic.w	r2, r2, #16
 8004b9a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	6a1b      	ldr	r3, [r3, #32]
 8004ba0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	f003 020f 	and.w	r2, r3, #15
 8004ba8:	4613      	mov	r3, r2
 8004baa:	00db      	lsls	r3, r3, #3
 8004bac:	4413      	add	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004bb4:	687a      	ldr	r2, [r7, #4]
 8004bb6:	4413      	add	r3, r2
 8004bb8:	3304      	adds	r3, #4
 8004bba:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004bbc:	69bb      	ldr	r3, [r7, #24]
 8004bbe:	0c5b      	lsrs	r3, r3, #17
 8004bc0:	f003 030f 	and.w	r3, r3, #15
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d124      	bne.n	8004c12 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004bce:	4013      	ands	r3, r2
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d035      	beq.n	8004c40 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004bd8:	69bb      	ldr	r3, [r7, #24]
 8004bda:	091b      	lsrs	r3, r3, #4
 8004bdc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004bde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	461a      	mov	r2, r3
 8004be6:	6a38      	ldr	r0, [r7, #32]
 8004be8:	f007 fbf4 	bl	800c3d4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	69bb      	ldr	r3, [r7, #24]
 8004bf2:	091b      	lsrs	r3, r3, #4
 8004bf4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bf8:	441a      	add	r2, r3
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	695a      	ldr	r2, [r3, #20]
 8004c02:	69bb      	ldr	r3, [r7, #24]
 8004c04:	091b      	lsrs	r3, r3, #4
 8004c06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c0a:	441a      	add	r2, r3
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	615a      	str	r2, [r3, #20]
 8004c10:	e016      	b.n	8004c40 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004c12:	69bb      	ldr	r3, [r7, #24]
 8004c14:	0c5b      	lsrs	r3, r3, #17
 8004c16:	f003 030f 	and.w	r3, r3, #15
 8004c1a:	2b06      	cmp	r3, #6
 8004c1c:	d110      	bne.n	8004c40 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004c24:	2208      	movs	r2, #8
 8004c26:	4619      	mov	r1, r3
 8004c28:	6a38      	ldr	r0, [r7, #32]
 8004c2a:	f007 fbd3 	bl	800c3d4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	695a      	ldr	r2, [r3, #20]
 8004c32:	69bb      	ldr	r3, [r7, #24]
 8004c34:	091b      	lsrs	r3, r3, #4
 8004c36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c3a:	441a      	add	r2, r3
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	699a      	ldr	r2, [r3, #24]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0210 	orr.w	r2, r2, #16
 8004c4e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4618      	mov	r0, r3
 8004c56:	f007 fd51 	bl	800c6fc <USB_ReadInterrupts>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c60:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004c64:	f040 80a7 	bne.w	8004db6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4618      	mov	r0, r3
 8004c72:	f007 fd56 	bl	800c722 <USB_ReadDevAllOutEpInterrupt>
 8004c76:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004c78:	e099      	b.n	8004dae <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004c7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f000 808e 	beq.w	8004da2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c8c:	b2d2      	uxtb	r2, r2
 8004c8e:	4611      	mov	r1, r2
 8004c90:	4618      	mov	r0, r3
 8004c92:	f007 fd7a 	bl	800c78a <USB_ReadDevOutEPInterrupt>
 8004c96:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00c      	beq.n	8004cbc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca4:	015a      	lsls	r2, r3, #5
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	4413      	add	r3, r2
 8004caa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cae:	461a      	mov	r2, r3
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004cb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 fece 	bl	8005a58 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f003 0308 	and.w	r3, r3, #8
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00c      	beq.n	8004ce0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc8:	015a      	lsls	r2, r3, #5
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	4413      	add	r3, r2
 8004cce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	2308      	movs	r3, #8
 8004cd6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004cd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 ffa4 	bl	8005c28 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	f003 0310 	and.w	r3, r3, #16
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d008      	beq.n	8004cfc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	2310      	movs	r3, #16
 8004cfa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d030      	beq.n	8004d68 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004d06:	6a3b      	ldr	r3, [r7, #32]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d0e:	2b80      	cmp	r3, #128	@ 0x80
 8004d10:	d109      	bne.n	8004d26 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	69fa      	ldr	r2, [r7, #28]
 8004d1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d20:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004d24:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004d26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d28:	4613      	mov	r3, r2
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	4413      	add	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	4413      	add	r3, r2
 8004d38:	3304      	adds	r3, #4
 8004d3a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	78db      	ldrb	r3, [r3, #3]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d108      	bne.n	8004d56 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	2200      	movs	r2, #0
 8004d48:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	4619      	mov	r1, r3
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f00a f963 	bl	800f01c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	69fb      	ldr	r3, [r7, #28]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d62:	461a      	mov	r2, r3
 8004d64:	2302      	movs	r3, #2
 8004d66:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	f003 0320 	and.w	r3, r3, #32
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d008      	beq.n	8004d84 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d74:	015a      	lsls	r2, r3, #5
 8004d76:	69fb      	ldr	r3, [r7, #28]
 8004d78:	4413      	add	r3, r2
 8004d7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d7e:	461a      	mov	r2, r3
 8004d80:	2320      	movs	r3, #32
 8004d82:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d009      	beq.n	8004da2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004da0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da4:	3301      	adds	r3, #1
 8004da6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004daa:	085b      	lsrs	r3, r3, #1
 8004dac:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f47f af62 	bne.w	8004c7a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f007 fc9e 	bl	800c6fc <USB_ReadInterrupts>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004dc6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004dca:	f040 80db 	bne.w	8004f84 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f007 fcbf 	bl	800c756 <USB_ReadDevAllInEpInterrupt>
 8004dd8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004dde:	e0cd      	b.n	8004f7c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004de0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 80c2 	beq.w	8004f70 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004df2:	b2d2      	uxtb	r2, r2
 8004df4:	4611      	mov	r1, r2
 8004df6:	4618      	mov	r0, r3
 8004df8:	f007 fce5 	bl	800c7c6 <USB_ReadDevInEPInterrupt>
 8004dfc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	f003 0301 	and.w	r3, r3, #1
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d057      	beq.n	8004eb8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e0a:	f003 030f 	and.w	r3, r3, #15
 8004e0e:	2201      	movs	r2, #1
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	43db      	mvns	r3, r3
 8004e22:	69f9      	ldr	r1, [r7, #28]
 8004e24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e28:	4013      	ands	r3, r2
 8004e2a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2e:	015a      	lsls	r2, r3, #5
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	4413      	add	r3, r2
 8004e34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e38:	461a      	mov	r2, r3
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	799b      	ldrb	r3, [r3, #6]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d132      	bne.n	8004eac <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004e46:	6879      	ldr	r1, [r7, #4]
 8004e48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	00db      	lsls	r3, r3, #3
 8004e4e:	4413      	add	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	440b      	add	r3, r1
 8004e54:	3320      	adds	r3, #32
 8004e56:	6819      	ldr	r1, [r3, #0]
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e5c:	4613      	mov	r3, r2
 8004e5e:	00db      	lsls	r3, r3, #3
 8004e60:	4413      	add	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4403      	add	r3, r0
 8004e66:	331c      	adds	r3, #28
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4419      	add	r1, r3
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e70:	4613      	mov	r3, r2
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	4413      	add	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	4403      	add	r3, r0
 8004e7a:	3320      	adds	r3, #32
 8004e7c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d113      	bne.n	8004eac <HAL_PCD_IRQHandler+0x3a2>
 8004e84:	6879      	ldr	r1, [r7, #4]
 8004e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e88:	4613      	mov	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	440b      	add	r3, r1
 8004e92:	3324      	adds	r3, #36	@ 0x24
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d108      	bne.n	8004eac <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	2101      	movs	r1, #1
 8004ea8:	f007 fcee 	bl	800c888 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eae:	b2db      	uxtb	r3, r3
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f00a f82d 	bl	800ef12 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	f003 0308 	and.w	r3, r3, #8
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d008      	beq.n	8004ed4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ec4:	015a      	lsls	r2, r3, #5
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	4413      	add	r3, r2
 8004eca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ece:	461a      	mov	r2, r3
 8004ed0:	2308      	movs	r3, #8
 8004ed2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	f003 0310 	and.w	r3, r3, #16
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d008      	beq.n	8004ef0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eea:	461a      	mov	r2, r3
 8004eec:	2310      	movs	r3, #16
 8004eee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d008      	beq.n	8004f0c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efc:	015a      	lsls	r2, r3, #5
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	4413      	add	r3, r2
 8004f02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f06:	461a      	mov	r2, r3
 8004f08:	2340      	movs	r3, #64	@ 0x40
 8004f0a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d023      	beq.n	8004f5e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004f16:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f18:	6a38      	ldr	r0, [r7, #32]
 8004f1a:	f006 fcd1 	bl	800b8c0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f20:	4613      	mov	r3, r2
 8004f22:	00db      	lsls	r3, r3, #3
 8004f24:	4413      	add	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	3310      	adds	r3, #16
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	4413      	add	r3, r2
 8004f2e:	3304      	adds	r3, #4
 8004f30:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	78db      	ldrb	r3, [r3, #3]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d108      	bne.n	8004f4c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	4619      	mov	r1, r3
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f00a f87a 	bl	800f040 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f58:	461a      	mov	r2, r3
 8004f5a:	2302      	movs	r3, #2
 8004f5c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d003      	beq.n	8004f70 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004f68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 fce8 	bl	8005940 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f72:	3301      	adds	r3, #1
 8004f74:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f78:	085b      	lsrs	r3, r3, #1
 8004f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f47f af2e 	bne.w	8004de0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	4618      	mov	r0, r3
 8004f8a:	f007 fbb7 	bl	800c6fc <USB_ReadInterrupts>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004f94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004f98:	d122      	bne.n	8004fe0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	69fa      	ldr	r2, [r7, #28]
 8004fa4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fa8:	f023 0301 	bic.w	r3, r3, #1
 8004fac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d108      	bne.n	8004fca <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004fc0:	2100      	movs	r1, #0
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fef2 	bl	8005dac <HAL_PCDEx_LPM_Callback>
 8004fc8:	e002      	b.n	8004fd0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f00a f818 	bl	800f000 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	695a      	ldr	r2, [r3, #20]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8004fde:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f007 fb89 	bl	800c6fc <USB_ReadInterrupts>
 8004fea:	4603      	mov	r3, r0
 8004fec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ff0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ff4:	d112      	bne.n	800501c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b01      	cmp	r3, #1
 8005004:	d102      	bne.n	800500c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f009 ffd4 	bl	800efb4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	695a      	ldr	r2, [r3, #20]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800501a:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4618      	mov	r0, r3
 8005022:	f007 fb6b 	bl	800c6fc <USB_ReadInterrupts>
 8005026:	4603      	mov	r3, r0
 8005028:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800502c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005030:	d121      	bne.n	8005076 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695a      	ldr	r2, [r3, #20]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8005040:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005048:	2b00      	cmp	r3, #0
 800504a:	d111      	bne.n	8005070 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800505a:	089b      	lsrs	r3, r3, #2
 800505c:	f003 020f 	and.w	r2, r3, #15
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005066:	2101      	movs	r1, #1
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fe9f 	bl	8005dac <HAL_PCDEx_LPM_Callback>
 800506e:	e002      	b.n	8005076 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f009 ff9f 	bl	800efb4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4618      	mov	r0, r3
 800507c:	f007 fb3e 	bl	800c6fc <USB_ReadInterrupts>
 8005080:	4603      	mov	r3, r0
 8005082:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005086:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800508a:	f040 80b7 	bne.w	80051fc <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	69fa      	ldr	r2, [r7, #28]
 8005098:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800509c:	f023 0301 	bic.w	r3, r3, #1
 80050a0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2110      	movs	r1, #16
 80050a8:	4618      	mov	r0, r3
 80050aa:	f006 fc09 	bl	800b8c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050ae:	2300      	movs	r3, #0
 80050b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050b2:	e046      	b.n	8005142 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80050b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050b6:	015a      	lsls	r2, r3, #5
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	4413      	add	r3, r2
 80050bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050c0:	461a      	mov	r2, r3
 80050c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80050c6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80050c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ca:	015a      	lsls	r2, r3, #5
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	4413      	add	r3, r2
 80050d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050d8:	0151      	lsls	r1, r2, #5
 80050da:	69fa      	ldr	r2, [r7, #28]
 80050dc:	440a      	add	r2, r1
 80050de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80050e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80050e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050f4:	461a      	mov	r2, r3
 80050f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80050fa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80050fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	4413      	add	r3, r2
 8005104:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800510c:	0151      	lsls	r1, r2, #5
 800510e:	69fa      	ldr	r2, [r7, #28]
 8005110:	440a      	add	r2, r1
 8005112:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005116:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800511a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800511c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800512c:	0151      	lsls	r1, r2, #5
 800512e:	69fa      	ldr	r2, [r7, #28]
 8005130:	440a      	add	r2, r1
 8005132:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005136:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800513a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800513c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800513e:	3301      	adds	r3, #1
 8005140:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	791b      	ldrb	r3, [r3, #4]
 8005146:	461a      	mov	r2, r3
 8005148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800514a:	4293      	cmp	r3, r2
 800514c:	d3b2      	bcc.n	80050b4 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800514e:	69fb      	ldr	r3, [r7, #28]
 8005150:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	69fa      	ldr	r2, [r7, #28]
 8005158:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800515c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005160:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	7bdb      	ldrb	r3, [r3, #15]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d016      	beq.n	8005198 <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800516a:	69fb      	ldr	r3, [r7, #28]
 800516c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005170:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005174:	69fa      	ldr	r2, [r7, #28]
 8005176:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800517a:	f043 030b 	orr.w	r3, r3, #11
 800517e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800518a:	69fa      	ldr	r2, [r7, #28]
 800518c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005190:	f043 030b 	orr.w	r3, r3, #11
 8005194:	6453      	str	r3, [r2, #68]	@ 0x44
 8005196:	e015      	b.n	80051c4 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800519e:	695a      	ldr	r2, [r3, #20]
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051a6:	4619      	mov	r1, r3
 80051a8:	f242 032b 	movw	r3, #8235	@ 0x202b
 80051ac:	4313      	orrs	r3, r2
 80051ae:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	69fa      	ldr	r2, [r7, #28]
 80051ba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051be:	f043 030b 	orr.w	r3, r3, #11
 80051c2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	69fa      	ldr	r2, [r7, #28]
 80051ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051d2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80051d6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6818      	ldr	r0, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80051e6:	461a      	mov	r2, r3
 80051e8:	f007 fb4e 	bl	800c888 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	695a      	ldr	r2, [r3, #20]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80051fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4618      	mov	r0, r3
 8005202:	f007 fa7b 	bl	800c6fc <USB_ReadInterrupts>
 8005206:	4603      	mov	r3, r0
 8005208:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800520c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005210:	d123      	bne.n	800525a <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4618      	mov	r0, r3
 8005218:	f007 fb12 	bl	800c840 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4618      	mov	r0, r3
 8005222:	f006 fbc6 	bl	800b9b2 <USB_GetDevSpeed>
 8005226:	4603      	mov	r3, r0
 8005228:	461a      	mov	r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681c      	ldr	r4, [r3, #0]
 8005232:	f001 fdbb 	bl	8006dac <HAL_RCC_GetHCLKFreq>
 8005236:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800523c:	461a      	mov	r2, r3
 800523e:	4620      	mov	r0, r4
 8005240:	f006 f8d0 	bl	800b3e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f009 fe8c 	bl	800ef62 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	695a      	ldr	r2, [r3, #20]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005258:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4618      	mov	r0, r3
 8005260:	f007 fa4c 	bl	800c6fc <USB_ReadInterrupts>
 8005264:	4603      	mov	r3, r0
 8005266:	f003 0308 	and.w	r3, r3, #8
 800526a:	2b08      	cmp	r3, #8
 800526c:	d10a      	bne.n	8005284 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f009 fe69 	bl	800ef46 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	695a      	ldr	r2, [r3, #20]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f002 0208 	and.w	r2, r2, #8
 8005282:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4618      	mov	r0, r3
 800528a:	f007 fa37 	bl	800c6fc <USB_ReadInterrupts>
 800528e:	4603      	mov	r3, r0
 8005290:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005294:	2b80      	cmp	r3, #128	@ 0x80
 8005296:	d123      	bne.n	80052e0 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005298:	6a3b      	ldr	r3, [r7, #32]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052a0:	6a3b      	ldr	r3, [r7, #32]
 80052a2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80052a4:	2301      	movs	r3, #1
 80052a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80052a8:	e014      	b.n	80052d4 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80052aa:	6879      	ldr	r1, [r7, #4]
 80052ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052ae:	4613      	mov	r3, r2
 80052b0:	00db      	lsls	r3, r3, #3
 80052b2:	4413      	add	r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	440b      	add	r3, r1
 80052b8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	2b01      	cmp	r3, #1
 80052c0:	d105      	bne.n	80052ce <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80052c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	4619      	mov	r1, r3
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fb08 	bl	80058de <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80052ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d0:	3301      	adds	r3, #1
 80052d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	791b      	ldrb	r3, [r3, #4]
 80052d8:	461a      	mov	r2, r3
 80052da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052dc:	4293      	cmp	r3, r2
 80052de:	d3e4      	bcc.n	80052aa <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4618      	mov	r0, r3
 80052e6:	f007 fa09 	bl	800c6fc <USB_ReadInterrupts>
 80052ea:	4603      	mov	r3, r0
 80052ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80052f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052f4:	d13c      	bne.n	8005370 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80052f6:	2301      	movs	r3, #1
 80052f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80052fa:	e02b      	b.n	8005354 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80052fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052fe:	015a      	lsls	r2, r3, #5
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	4413      	add	r3, r2
 8005304:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800530c:	6879      	ldr	r1, [r7, #4]
 800530e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005310:	4613      	mov	r3, r2
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	4413      	add	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	440b      	add	r3, r1
 800531a:	3318      	adds	r3, #24
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d115      	bne.n	800534e <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005322:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005324:	2b00      	cmp	r3, #0
 8005326:	da12      	bge.n	800534e <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005328:	6879      	ldr	r1, [r7, #4]
 800532a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800532c:	4613      	mov	r3, r2
 800532e:	00db      	lsls	r3, r3, #3
 8005330:	4413      	add	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	440b      	add	r3, r1
 8005336:	3317      	adds	r3, #23
 8005338:	2201      	movs	r2, #1
 800533a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800533c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800533e:	b2db      	uxtb	r3, r3
 8005340:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005344:	b2db      	uxtb	r3, r3
 8005346:	4619      	mov	r1, r3
 8005348:	6878      	ldr	r0, [r7, #4]
 800534a:	f000 fac8 	bl	80058de <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800534e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005350:	3301      	adds	r3, #1
 8005352:	627b      	str	r3, [r7, #36]	@ 0x24
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	791b      	ldrb	r3, [r3, #4]
 8005358:	461a      	mov	r2, r3
 800535a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800535c:	4293      	cmp	r3, r2
 800535e:	d3cd      	bcc.n	80052fc <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	695a      	ldr	r2, [r3, #20]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800536e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4618      	mov	r0, r3
 8005376:	f007 f9c1 	bl	800c6fc <USB_ReadInterrupts>
 800537a:	4603      	mov	r3, r0
 800537c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005380:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005384:	d156      	bne.n	8005434 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005386:	2301      	movs	r3, #1
 8005388:	627b      	str	r3, [r7, #36]	@ 0x24
 800538a:	e045      	b.n	8005418 <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800538c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	4413      	add	r3, r2
 8005394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800539c:	6879      	ldr	r1, [r7, #4]
 800539e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053a0:	4613      	mov	r3, r2
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	4413      	add	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	440b      	add	r3, r1
 80053aa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	d12e      	bne.n	8005412 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80053b4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	da2b      	bge.n	8005412 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80053ba:	69bb      	ldr	r3, [r7, #24]
 80053bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80053c6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d121      	bne.n	8005412 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80053ce:	6879      	ldr	r1, [r7, #4]
 80053d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053d2:	4613      	mov	r3, r2
 80053d4:	00db      	lsls	r3, r3, #3
 80053d6:	4413      	add	r3, r2
 80053d8:	009b      	lsls	r3, r3, #2
 80053da:	440b      	add	r3, r1
 80053dc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80053e0:	2201      	movs	r2, #1
 80053e2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80053e4:	6a3b      	ldr	r3, [r7, #32]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80053ec:	6a3b      	ldr	r3, [r7, #32]
 80053ee:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80053f0:	6a3b      	ldr	r3, [r7, #32]
 80053f2:	695b      	ldr	r3, [r3, #20]
 80053f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10a      	bne.n	8005412 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	69fa      	ldr	r2, [r7, #28]
 8005406:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800540a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800540e:	6053      	str	r3, [r2, #4]
            break;
 8005410:	e008      	b.n	8005424 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005414:	3301      	adds	r3, #1
 8005416:	627b      	str	r3, [r7, #36]	@ 0x24
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	791b      	ldrb	r3, [r3, #4]
 800541c:	461a      	mov	r2, r3
 800541e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005420:	4293      	cmp	r3, r2
 8005422:	d3b3      	bcc.n	800538c <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	695a      	ldr	r2, [r3, #20]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005432:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4618      	mov	r0, r3
 800543a:	f007 f95f 	bl	800c6fc <USB_ReadInterrupts>
 800543e:	4603      	mov	r3, r0
 8005440:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005444:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005448:	d10a      	bne.n	8005460 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f009 fe0a 	bl	800f064 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	695a      	ldr	r2, [r3, #20]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800545e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4618      	mov	r0, r3
 8005466:	f007 f949 	bl	800c6fc <USB_ReadInterrupts>
 800546a:	4603      	mov	r3, r0
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b04      	cmp	r3, #4
 8005472:	d115      	bne.n	80054a0 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	f003 0304 	and.w	r3, r3, #4
 8005482:	2b00      	cmp	r3, #0
 8005484:	d002      	beq.n	800548c <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f009 fdfa 	bl	800f080 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	6859      	ldr	r1, [r3, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	69ba      	ldr	r2, [r7, #24]
 8005498:	430a      	orrs	r2, r1
 800549a:	605a      	str	r2, [r3, #4]
 800549c:	e000      	b.n	80054a0 <HAL_PCD_IRQHandler+0x996>
      return;
 800549e:	bf00      	nop
    }
  }
}
 80054a0:	3734      	adds	r7, #52	@ 0x34
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd90      	pop	{r4, r7, pc}

080054a6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b082      	sub	sp, #8
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
 80054ae:	460b      	mov	r3, r1
 80054b0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d101      	bne.n	80054c0 <HAL_PCD_SetAddress+0x1a>
 80054bc:	2302      	movs	r3, #2
 80054be:	e012      	b.n	80054e6 <HAL_PCD_SetAddress+0x40>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	78fa      	ldrb	r2, [r7, #3]
 80054cc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	78fa      	ldrb	r2, [r7, #3]
 80054d4:	4611      	mov	r1, r2
 80054d6:	4618      	mov	r0, r3
 80054d8:	f007 f8a8 	bl	800c62c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2200      	movs	r2, #0
 80054e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3708      	adds	r7, #8
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}

080054ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80054ee:	b580      	push	{r7, lr}
 80054f0:	b084      	sub	sp, #16
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
 80054f6:	4608      	mov	r0, r1
 80054f8:	4611      	mov	r1, r2
 80054fa:	461a      	mov	r2, r3
 80054fc:	4603      	mov	r3, r0
 80054fe:	70fb      	strb	r3, [r7, #3]
 8005500:	460b      	mov	r3, r1
 8005502:	803b      	strh	r3, [r7, #0]
 8005504:	4613      	mov	r3, r2
 8005506:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005508:	2300      	movs	r3, #0
 800550a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800550c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005510:	2b00      	cmp	r3, #0
 8005512:	da0f      	bge.n	8005534 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005514:	78fb      	ldrb	r3, [r7, #3]
 8005516:	f003 020f 	and.w	r2, r3, #15
 800551a:	4613      	mov	r3, r2
 800551c:	00db      	lsls	r3, r3, #3
 800551e:	4413      	add	r3, r2
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	3310      	adds	r3, #16
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	4413      	add	r3, r2
 8005528:	3304      	adds	r3, #4
 800552a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2201      	movs	r2, #1
 8005530:	705a      	strb	r2, [r3, #1]
 8005532:	e00f      	b.n	8005554 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005534:	78fb      	ldrb	r3, [r7, #3]
 8005536:	f003 020f 	and.w	r2, r3, #15
 800553a:	4613      	mov	r3, r2
 800553c:	00db      	lsls	r3, r3, #3
 800553e:	4413      	add	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	4413      	add	r3, r2
 800554a:	3304      	adds	r3, #4
 800554c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005554:	78fb      	ldrb	r3, [r7, #3]
 8005556:	f003 030f 	and.w	r3, r3, #15
 800555a:	b2da      	uxtb	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005560:	883a      	ldrh	r2, [r7, #0]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	78ba      	ldrb	r2, [r7, #2]
 800556a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	785b      	ldrb	r3, [r3, #1]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d004      	beq.n	800557e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	461a      	mov	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800557e:	78bb      	ldrb	r3, [r7, #2]
 8005580:	2b02      	cmp	r3, #2
 8005582:	d102      	bne.n	800558a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005590:	2b01      	cmp	r3, #1
 8005592:	d101      	bne.n	8005598 <HAL_PCD_EP_Open+0xaa>
 8005594:	2302      	movs	r3, #2
 8005596:	e00e      	b.n	80055b6 <HAL_PCD_EP_Open+0xc8>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2201      	movs	r2, #1
 800559c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	68f9      	ldr	r1, [r7, #12]
 80055a6:	4618      	mov	r0, r3
 80055a8:	f006 fa28 	bl	800b9fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80055b4:	7afb      	ldrb	r3, [r7, #11]
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b084      	sub	sp, #16
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	460b      	mov	r3, r1
 80055c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80055ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	da0f      	bge.n	80055f2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055d2:	78fb      	ldrb	r3, [r7, #3]
 80055d4:	f003 020f 	and.w	r2, r3, #15
 80055d8:	4613      	mov	r3, r2
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	4413      	add	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	3310      	adds	r3, #16
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	4413      	add	r3, r2
 80055e6:	3304      	adds	r3, #4
 80055e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2201      	movs	r2, #1
 80055ee:	705a      	strb	r2, [r3, #1]
 80055f0:	e00f      	b.n	8005612 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055f2:	78fb      	ldrb	r3, [r7, #3]
 80055f4:	f003 020f 	and.w	r2, r3, #15
 80055f8:	4613      	mov	r3, r2
 80055fa:	00db      	lsls	r3, r3, #3
 80055fc:	4413      	add	r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	4413      	add	r3, r2
 8005608:	3304      	adds	r3, #4
 800560a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005612:	78fb      	ldrb	r3, [r7, #3]
 8005614:	f003 030f 	and.w	r3, r3, #15
 8005618:	b2da      	uxtb	r2, r3
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005624:	2b01      	cmp	r3, #1
 8005626:	d101      	bne.n	800562c <HAL_PCD_EP_Close+0x6e>
 8005628:	2302      	movs	r3, #2
 800562a:	e00e      	b.n	800564a <HAL_PCD_EP_Close+0x8c>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68f9      	ldr	r1, [r7, #12]
 800563a:	4618      	mov	r0, r3
 800563c:	f006 fa66 	bl	800bb0c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}

08005652 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005652:	b580      	push	{r7, lr}
 8005654:	b086      	sub	sp, #24
 8005656:	af00      	add	r7, sp, #0
 8005658:	60f8      	str	r0, [r7, #12]
 800565a:	607a      	str	r2, [r7, #4]
 800565c:	603b      	str	r3, [r7, #0]
 800565e:	460b      	mov	r3, r1
 8005660:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005662:	7afb      	ldrb	r3, [r7, #11]
 8005664:	f003 020f 	and.w	r2, r3, #15
 8005668:	4613      	mov	r3, r2
 800566a:	00db      	lsls	r3, r3, #3
 800566c:	4413      	add	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	4413      	add	r3, r2
 8005678:	3304      	adds	r3, #4
 800567a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	2200      	movs	r2, #0
 800568c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800568e:	697b      	ldr	r3, [r7, #20]
 8005690:	2200      	movs	r2, #0
 8005692:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005694:	7afb      	ldrb	r3, [r7, #11]
 8005696:	f003 030f 	and.w	r3, r3, #15
 800569a:	b2da      	uxtb	r2, r3
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	799b      	ldrb	r3, [r3, #6]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d102      	bne.n	80056ae <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6818      	ldr	r0, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	799b      	ldrb	r3, [r3, #6]
 80056b6:	461a      	mov	r2, r3
 80056b8:	6979      	ldr	r1, [r7, #20]
 80056ba:	f006 fb03 	bl	800bcc4 <USB_EPStartXfer>

  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3718      	adds	r7, #24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
 80056d0:	460b      	mov	r3, r1
 80056d2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80056d4:	78fb      	ldrb	r3, [r7, #3]
 80056d6:	f003 020f 	and.w	r2, r3, #15
 80056da:	6879      	ldr	r1, [r7, #4]
 80056dc:	4613      	mov	r3, r2
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	4413      	add	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	440b      	add	r3, r1
 80056e6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80056ea:	681b      	ldr	r3, [r3, #0]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	370c      	adds	r7, #12
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b086      	sub	sp, #24
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	607a      	str	r2, [r7, #4]
 8005702:	603b      	str	r3, [r7, #0]
 8005704:	460b      	mov	r3, r1
 8005706:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005708:	7afb      	ldrb	r3, [r7, #11]
 800570a:	f003 020f 	and.w	r2, r3, #15
 800570e:	4613      	mov	r3, r2
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	4413      	add	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	3310      	adds	r3, #16
 8005718:	68fa      	ldr	r2, [r7, #12]
 800571a:	4413      	add	r3, r2
 800571c:	3304      	adds	r3, #4
 800571e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	683a      	ldr	r2, [r7, #0]
 800572a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	2200      	movs	r2, #0
 8005730:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	2201      	movs	r2, #1
 8005736:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005738:	7afb      	ldrb	r3, [r7, #11]
 800573a:	f003 030f 	and.w	r3, r3, #15
 800573e:	b2da      	uxtb	r2, r3
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	799b      	ldrb	r3, [r3, #6]
 8005748:	2b01      	cmp	r3, #1
 800574a:	d102      	bne.n	8005752 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6818      	ldr	r0, [r3, #0]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	799b      	ldrb	r3, [r3, #6]
 800575a:	461a      	mov	r2, r3
 800575c:	6979      	ldr	r1, [r7, #20]
 800575e:	f006 fab1 	bl	800bcc4 <USB_EPStartXfer>

  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3718      	adds	r7, #24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	460b      	mov	r3, r1
 8005776:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005778:	78fb      	ldrb	r3, [r7, #3]
 800577a:	f003 030f 	and.w	r3, r3, #15
 800577e:	687a      	ldr	r2, [r7, #4]
 8005780:	7912      	ldrb	r2, [r2, #4]
 8005782:	4293      	cmp	r3, r2
 8005784:	d901      	bls.n	800578a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e04f      	b.n	800582a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800578a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800578e:	2b00      	cmp	r3, #0
 8005790:	da0f      	bge.n	80057b2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005792:	78fb      	ldrb	r3, [r7, #3]
 8005794:	f003 020f 	and.w	r2, r3, #15
 8005798:	4613      	mov	r3, r2
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	4413      	add	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	3310      	adds	r3, #16
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	4413      	add	r3, r2
 80057a6:	3304      	adds	r3, #4
 80057a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2201      	movs	r2, #1
 80057ae:	705a      	strb	r2, [r3, #1]
 80057b0:	e00d      	b.n	80057ce <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80057b2:	78fa      	ldrb	r2, [r7, #3]
 80057b4:	4613      	mov	r3, r2
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	4413      	add	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	4413      	add	r3, r2
 80057c4:	3304      	adds	r3, #4
 80057c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2200      	movs	r2, #0
 80057cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2201      	movs	r2, #1
 80057d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057d4:	78fb      	ldrb	r3, [r7, #3]
 80057d6:	f003 030f 	and.w	r3, r3, #15
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d101      	bne.n	80057ee <HAL_PCD_EP_SetStall+0x82>
 80057ea:	2302      	movs	r3, #2
 80057ec:	e01d      	b.n	800582a <HAL_PCD_EP_SetStall+0xbe>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2201      	movs	r2, #1
 80057f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	68f9      	ldr	r1, [r7, #12]
 80057fc:	4618      	mov	r0, r3
 80057fe:	f006 fe41 	bl	800c484 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005802:	78fb      	ldrb	r3, [r7, #3]
 8005804:	f003 030f 	and.w	r3, r3, #15
 8005808:	2b00      	cmp	r3, #0
 800580a:	d109      	bne.n	8005820 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6818      	ldr	r0, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	7999      	ldrb	r1, [r3, #6]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800581a:	461a      	mov	r2, r3
 800581c:	f007 f834 	bl	800c888 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b084      	sub	sp, #16
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
 800583a:	460b      	mov	r3, r1
 800583c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800583e:	78fb      	ldrb	r3, [r7, #3]
 8005840:	f003 030f 	and.w	r3, r3, #15
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	7912      	ldrb	r2, [r2, #4]
 8005848:	4293      	cmp	r3, r2
 800584a:	d901      	bls.n	8005850 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	e042      	b.n	80058d6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005850:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005854:	2b00      	cmp	r3, #0
 8005856:	da0f      	bge.n	8005878 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005858:	78fb      	ldrb	r3, [r7, #3]
 800585a:	f003 020f 	and.w	r2, r3, #15
 800585e:	4613      	mov	r3, r2
 8005860:	00db      	lsls	r3, r3, #3
 8005862:	4413      	add	r3, r2
 8005864:	009b      	lsls	r3, r3, #2
 8005866:	3310      	adds	r3, #16
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	4413      	add	r3, r2
 800586c:	3304      	adds	r3, #4
 800586e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2201      	movs	r2, #1
 8005874:	705a      	strb	r2, [r3, #1]
 8005876:	e00f      	b.n	8005898 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005878:	78fb      	ldrb	r3, [r7, #3]
 800587a:	f003 020f 	and.w	r2, r3, #15
 800587e:	4613      	mov	r3, r2
 8005880:	00db      	lsls	r3, r3, #3
 8005882:	4413      	add	r3, r2
 8005884:	009b      	lsls	r3, r3, #2
 8005886:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	4413      	add	r3, r2
 800588e:	3304      	adds	r3, #4
 8005890:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2200      	movs	r2, #0
 8005896:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2200      	movs	r2, #0
 800589c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800589e:	78fb      	ldrb	r3, [r7, #3]
 80058a0:	f003 030f 	and.w	r3, r3, #15
 80058a4:	b2da      	uxtb	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d101      	bne.n	80058b8 <HAL_PCD_EP_ClrStall+0x86>
 80058b4:	2302      	movs	r3, #2
 80058b6:	e00e      	b.n	80058d6 <HAL_PCD_EP_ClrStall+0xa4>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68f9      	ldr	r1, [r7, #12]
 80058c6:	4618      	mov	r0, r3
 80058c8:	f006 fe4a 	bl	800c560 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2200      	movs	r2, #0
 80058d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3710      	adds	r7, #16
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}

080058de <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058de:	b580      	push	{r7, lr}
 80058e0:	b084      	sub	sp, #16
 80058e2:	af00      	add	r7, sp, #0
 80058e4:	6078      	str	r0, [r7, #4]
 80058e6:	460b      	mov	r3, r1
 80058e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80058ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	da0c      	bge.n	800590c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058f2:	78fb      	ldrb	r3, [r7, #3]
 80058f4:	f003 020f 	and.w	r2, r3, #15
 80058f8:	4613      	mov	r3, r2
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	4413      	add	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	3310      	adds	r3, #16
 8005902:	687a      	ldr	r2, [r7, #4]
 8005904:	4413      	add	r3, r2
 8005906:	3304      	adds	r3, #4
 8005908:	60fb      	str	r3, [r7, #12]
 800590a:	e00c      	b.n	8005926 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800590c:	78fb      	ldrb	r3, [r7, #3]
 800590e:	f003 020f 	and.w	r2, r3, #15
 8005912:	4613      	mov	r3, r2
 8005914:	00db      	lsls	r3, r3, #3
 8005916:	4413      	add	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800591e:	687a      	ldr	r2, [r7, #4]
 8005920:	4413      	add	r3, r2
 8005922:	3304      	adds	r3, #4
 8005924:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68f9      	ldr	r1, [r7, #12]
 800592c:	4618      	mov	r0, r3
 800592e:	f006 fc69 	bl	800c204 <USB_EPStopXfer>
 8005932:	4603      	mov	r3, r0
 8005934:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005936:	7afb      	ldrb	r3, [r7, #11]
}
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08a      	sub	sp, #40	@ 0x28
 8005944:	af02      	add	r7, sp, #8
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005954:	683a      	ldr	r2, [r7, #0]
 8005956:	4613      	mov	r3, r2
 8005958:	00db      	lsls	r3, r3, #3
 800595a:	4413      	add	r3, r2
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	3310      	adds	r3, #16
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	4413      	add	r3, r2
 8005964:	3304      	adds	r3, #4
 8005966:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	695a      	ldr	r2, [r3, #20]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	429a      	cmp	r2, r3
 8005972:	d901      	bls.n	8005978 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e06b      	b.n	8005a50 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	691a      	ldr	r2, [r3, #16]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	695b      	ldr	r3, [r3, #20]
 8005980:	1ad3      	subs	r3, r2, r3
 8005982:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	69fa      	ldr	r2, [r7, #28]
 800598a:	429a      	cmp	r2, r3
 800598c:	d902      	bls.n	8005994 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	3303      	adds	r3, #3
 8005998:	089b      	lsrs	r3, r3, #2
 800599a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800599c:	e02a      	b.n	80059f4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	691a      	ldr	r2, [r3, #16]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d902      	bls.n	80059ba <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	3303      	adds	r3, #3
 80059be:	089b      	lsrs	r3, r3, #2
 80059c0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	68d9      	ldr	r1, [r3, #12]
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	69fb      	ldr	r3, [r7, #28]
 80059cc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	4603      	mov	r3, r0
 80059d6:	6978      	ldr	r0, [r7, #20]
 80059d8:	f006 fcbe 	bl	800c358 <USB_WritePacket>

    ep->xfer_buff  += len;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	68da      	ldr	r2, [r3, #12]
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	441a      	add	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	695a      	ldr	r2, [r3, #20]
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	441a      	add	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	015a      	lsls	r2, r3, #5
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	4413      	add	r3, r2
 80059fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a00:	699b      	ldr	r3, [r3, #24]
 8005a02:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a04:	69ba      	ldr	r2, [r7, #24]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d809      	bhi.n	8005a1e <PCD_WriteEmptyTxFifo+0xde>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	695a      	ldr	r2, [r3, #20]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d203      	bcs.n	8005a1e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1bf      	bne.n	800599e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	691a      	ldr	r2, [r3, #16]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d811      	bhi.n	8005a4e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	f003 030f 	and.w	r3, r3, #15
 8005a30:	2201      	movs	r2, #1
 8005a32:	fa02 f303 	lsl.w	r3, r2, r3
 8005a36:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	43db      	mvns	r3, r3
 8005a44:	6939      	ldr	r1, [r7, #16]
 8005a46:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a4a:	4013      	ands	r3, r2
 8005a4c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005a4e:	2300      	movs	r3, #0
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3720      	adds	r7, #32
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b088      	sub	sp, #32
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	333c      	adds	r3, #60	@ 0x3c
 8005a70:	3304      	adds	r3, #4
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	799b      	ldrb	r3, [r3, #6]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d17b      	bne.n	8005b86 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	f003 0308 	and.w	r3, r3, #8
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d015      	beq.n	8005ac4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	4a61      	ldr	r2, [pc, #388]	@ (8005c20 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	f240 80b9 	bls.w	8005c14 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	f000 80b3 	beq.w	8005c14 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	015a      	lsls	r2, r3, #5
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	4413      	add	r3, r2
 8005ab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aba:	461a      	mov	r2, r3
 8005abc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ac0:	6093      	str	r3, [r2, #8]
 8005ac2:	e0a7      	b.n	8005c14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	f003 0320 	and.w	r3, r3, #32
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d009      	beq.n	8005ae2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	015a      	lsls	r2, r3, #5
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ada:	461a      	mov	r2, r3
 8005adc:	2320      	movs	r3, #32
 8005ade:	6093      	str	r3, [r2, #8]
 8005ae0:	e098      	b.n	8005c14 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f040 8093 	bne.w	8005c14 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	4a4b      	ldr	r2, [pc, #300]	@ (8005c20 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d90f      	bls.n	8005b16 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d00a      	beq.n	8005b16 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b12:	6093      	str	r3, [r2, #8]
 8005b14:	e07e      	b.n	8005c14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	4613      	mov	r3, r2
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	4413      	add	r3, r2
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	4413      	add	r3, r2
 8005b28:	3304      	adds	r3, #4
 8005b2a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6a1a      	ldr	r2, [r3, #32]
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	0159      	lsls	r1, r3, #5
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	440b      	add	r3, r1
 8005b38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b42:	1ad2      	subs	r2, r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d114      	bne.n	8005b78 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	691b      	ldr	r3, [r3, #16]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d109      	bne.n	8005b6a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6818      	ldr	r0, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005b60:	461a      	mov	r2, r3
 8005b62:	2101      	movs	r1, #1
 8005b64:	f006 fe90 	bl	800c888 <USB_EP0_OutStart>
 8005b68:	e006      	b.n	8005b78 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	68da      	ldr	r2, [r3, #12]
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	441a      	add	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f009 f9ac 	bl	800eedc <HAL_PCD_DataOutStageCallback>
 8005b84:	e046      	b.n	8005c14 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	4a26      	ldr	r2, [pc, #152]	@ (8005c24 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d124      	bne.n	8005bd8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d00a      	beq.n	8005bae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ba4:	461a      	mov	r2, r3
 8005ba6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005baa:	6093      	str	r3, [r2, #8]
 8005bac:	e032      	b.n	8005c14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	f003 0320 	and.w	r3, r3, #32
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d008      	beq.n	8005bca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	015a      	lsls	r2, r3, #5
 8005bbc:	69bb      	ldr	r3, [r7, #24]
 8005bbe:	4413      	add	r3, r2
 8005bc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	2320      	movs	r3, #32
 8005bc8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	4619      	mov	r1, r3
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f009 f983 	bl	800eedc <HAL_PCD_DataOutStageCallback>
 8005bd6:	e01d      	b.n	8005c14 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d114      	bne.n	8005c08 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005bde:	6879      	ldr	r1, [r7, #4]
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	4613      	mov	r3, r2
 8005be4:	00db      	lsls	r3, r3, #3
 8005be6:	4413      	add	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	440b      	add	r3, r1
 8005bec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d108      	bne.n	8005c08 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6818      	ldr	r0, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c00:	461a      	mov	r2, r3
 8005c02:	2100      	movs	r1, #0
 8005c04:	f006 fe40 	bl	800c888 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f009 f964 	bl	800eedc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3720      	adds	r7, #32
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}
 8005c1e:	bf00      	nop
 8005c20:	4f54300a 	.word	0x4f54300a
 8005c24:	4f54310a 	.word	0x4f54310a

08005c28 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	333c      	adds	r3, #60	@ 0x3c
 8005c40:	3304      	adds	r3, #4
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	015a      	lsls	r2, r3, #5
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	4a15      	ldr	r2, [pc, #84]	@ (8005cb0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d90e      	bls.n	8005c7c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d009      	beq.n	8005c7c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	015a      	lsls	r2, r3, #5
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	4413      	add	r3, r2
 8005c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c74:	461a      	mov	r2, r3
 8005c76:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c7a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f009 f91b 	bl	800eeb8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	4a0a      	ldr	r2, [pc, #40]	@ (8005cb0 <PCD_EP_OutSetupPacket_int+0x88>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d90c      	bls.n	8005ca4 <PCD_EP_OutSetupPacket_int+0x7c>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	799b      	ldrb	r3, [r3, #6]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d108      	bne.n	8005ca4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6818      	ldr	r0, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	2101      	movs	r1, #1
 8005ca0:	f006 fdf2 	bl	800c888 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3718      	adds	r7, #24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	4f54300a 	.word	0x4f54300a

08005cb4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b085      	sub	sp, #20
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	460b      	mov	r3, r1
 8005cbe:	70fb      	strb	r3, [r7, #3]
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005ccc:	78fb      	ldrb	r3, [r7, #3]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d107      	bne.n	8005ce2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005cd2:	883b      	ldrh	r3, [r7, #0]
 8005cd4:	0419      	lsls	r1, r3, #16
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	629a      	str	r2, [r3, #40]	@ 0x28
 8005ce0:	e028      	b.n	8005d34 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce8:	0c1b      	lsrs	r3, r3, #16
 8005cea:	68ba      	ldr	r2, [r7, #8]
 8005cec:	4413      	add	r3, r2
 8005cee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	73fb      	strb	r3, [r7, #15]
 8005cf4:	e00d      	b.n	8005d12 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	7bfb      	ldrb	r3, [r7, #15]
 8005cfc:	3340      	adds	r3, #64	@ 0x40
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	0c1b      	lsrs	r3, r3, #16
 8005d06:	68ba      	ldr	r2, [r7, #8]
 8005d08:	4413      	add	r3, r2
 8005d0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
 8005d0e:	3301      	adds	r3, #1
 8005d10:	73fb      	strb	r3, [r7, #15]
 8005d12:	7bfa      	ldrb	r2, [r7, #15]
 8005d14:	78fb      	ldrb	r3, [r7, #3]
 8005d16:	3b01      	subs	r3, #1
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d3ec      	bcc.n	8005cf6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005d1c:	883b      	ldrh	r3, [r7, #0]
 8005d1e:	0418      	lsls	r0, r3, #16
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6819      	ldr	r1, [r3, #0]
 8005d24:	78fb      	ldrb	r3, [r7, #3]
 8005d26:	3b01      	subs	r3, #1
 8005d28:	68ba      	ldr	r2, [r7, #8]
 8005d2a:	4302      	orrs	r2, r0
 8005d2c:	3340      	adds	r3, #64	@ 0x40
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	440b      	add	r3, r1
 8005d32:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005d34:	2300      	movs	r3, #0
}
 8005d36:	4618      	mov	r0, r3
 8005d38:	3714      	adds	r7, #20
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	460b      	mov	r3, r1
 8005d4c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	887a      	ldrh	r2, [r7, #2]
 8005d54:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005d56:	2300      	movs	r3, #0
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	370c      	adds	r7, #12
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b085      	sub	sp, #20
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d92:	4b05      	ldr	r3, [pc, #20]	@ (8005da8 <HAL_PCDEx_ActivateLPM+0x44>)
 8005d94:	4313      	orrs	r3, r2
 8005d96:	68fa      	ldr	r2, [r7, #12]
 8005d98:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	3714      	adds	r7, #20
 8005da0:	46bd      	mov	sp, r7
 8005da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da6:	4770      	bx	lr
 8005da8:	10000003 	.word	0x10000003

08005dac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	460b      	mov	r3, r1
 8005db6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8005dcc:	4b29      	ldr	r3, [pc, #164]	@ (8005e74 <HAL_PWREx_ConfigSupply+0xb0>)
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	f003 0307 	and.w	r3, r3, #7
 8005dd4:	2b06      	cmp	r3, #6
 8005dd6:	d00a      	beq.n	8005dee <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005dd8:	4b26      	ldr	r3, [pc, #152]	@ (8005e74 <HAL_PWREx_ConfigSupply+0xb0>)
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d001      	beq.n	8005dea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e040      	b.n	8005e6c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8005dea:	2300      	movs	r3, #0
 8005dec:	e03e      	b.n	8005e6c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005dee:	4b21      	ldr	r3, [pc, #132]	@ (8005e74 <HAL_PWREx_ConfigSupply+0xb0>)
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8005df6:	491f      	ldr	r1, [pc, #124]	@ (8005e74 <HAL_PWREx_ConfigSupply+0xb0>)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005dfe:	f7fc f889 	bl	8001f14 <HAL_GetTick>
 8005e02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e04:	e009      	b.n	8005e1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005e06:	f7fc f885 	bl	8001f14 <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e14:	d901      	bls.n	8005e1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e028      	b.n	8005e6c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005e1a:	4b16      	ldr	r3, [pc, #88]	@ (8005e74 <HAL_PWREx_ConfigSupply+0xb0>)
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e26:	d1ee      	bne.n	8005e06 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b1e      	cmp	r3, #30
 8005e2c:	d008      	beq.n	8005e40 <HAL_PWREx_ConfigSupply+0x7c>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e32:	d005      	beq.n	8005e40 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2b1d      	cmp	r3, #29
 8005e38:	d002      	beq.n	8005e40 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b2d      	cmp	r3, #45	@ 0x2d
 8005e3e:	d114      	bne.n	8005e6a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005e40:	f7fc f868 	bl	8001f14 <HAL_GetTick>
 8005e44:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005e46:	e009      	b.n	8005e5c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005e48:	f7fc f864 	bl	8001f14 <HAL_GetTick>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	1ad3      	subs	r3, r2, r3
 8005e52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005e56:	d901      	bls.n	8005e5c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e007      	b.n	8005e6c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005e5c:	4b05      	ldr	r3, [pc, #20]	@ (8005e74 <HAL_PWREx_ConfigSupply+0xb0>)
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005e64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e68:	d1ee      	bne.n	8005e48 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005e6a:	2300      	movs	r3, #0
}
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	3710      	adds	r7, #16
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bd80      	pop	{r7, pc}
 8005e74:	58024800 	.word	0x58024800

08005e78 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005e7c:	4b05      	ldr	r3, [pc, #20]	@ (8005e94 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	4a04      	ldr	r2, [pc, #16]	@ (8005e94 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005e82:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005e86:	60d3      	str	r3, [r2, #12]
}
 8005e88:	bf00      	nop
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	58024800 	.word	0x58024800

08005e98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b08c      	sub	sp, #48	@ 0x30
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d102      	bne.n	8005eac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	f000 bc48 	b.w	800673c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f000 8088 	beq.w	8005fca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eba:	4b99      	ldr	r3, [pc, #612]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005ec4:	4b96      	ldr	r3, [pc, #600]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 8005ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005eca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ecc:	2b10      	cmp	r3, #16
 8005ece:	d007      	beq.n	8005ee0 <HAL_RCC_OscConfig+0x48>
 8005ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed2:	2b18      	cmp	r3, #24
 8005ed4:	d111      	bne.n	8005efa <HAL_RCC_OscConfig+0x62>
 8005ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed8:	f003 0303 	and.w	r3, r3, #3
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d10c      	bne.n	8005efa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ee0:	4b8f      	ldr	r3, [pc, #572]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d06d      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x130>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d169      	bne.n	8005fc8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	f000 bc21 	b.w	800673c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f02:	d106      	bne.n	8005f12 <HAL_RCC_OscConfig+0x7a>
 8005f04:	4b86      	ldr	r3, [pc, #536]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a85      	ldr	r2, [pc, #532]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 8005f0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f0e:	6013      	str	r3, [r2, #0]
 8005f10:	e02e      	b.n	8005f70 <HAL_RCC_OscConfig+0xd8>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10c      	bne.n	8005f34 <HAL_RCC_OscConfig+0x9c>
 8005f1a:	4b81      	ldr	r3, [pc, #516]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a80      	ldr	r2, [pc, #512]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 8005f20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f24:	6013      	str	r3, [r2, #0]
 8005f26:	4b7e      	ldr	r3, [pc, #504]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a7d      	ldr	r2, [pc, #500]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 8005f2c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f30:	6013      	str	r3, [r2, #0]
 8005f32:	e01d      	b.n	8005f70 <HAL_RCC_OscConfig+0xd8>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f3c:	d10c      	bne.n	8005f58 <HAL_RCC_OscConfig+0xc0>
 8005f3e:	4b78      	ldr	r3, [pc, #480]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	4a77      	ldr	r2, [pc, #476]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 8005f44:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f48:	6013      	str	r3, [r2, #0]
 8005f4a:	4b75      	ldr	r3, [pc, #468]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a74      	ldr	r2, [pc, #464]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 8005f50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f54:	6013      	str	r3, [r2, #0]
 8005f56:	e00b      	b.n	8005f70 <HAL_RCC_OscConfig+0xd8>
 8005f58:	4b71      	ldr	r3, [pc, #452]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a70      	ldr	r2, [pc, #448]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 8005f5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f62:	6013      	str	r3, [r2, #0]
 8005f64:	4b6e      	ldr	r3, [pc, #440]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a6d      	ldr	r2, [pc, #436]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 8005f6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d013      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f78:	f7fb ffcc 	bl	8001f14 <HAL_GetTick>
 8005f7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f7e:	e008      	b.n	8005f92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f80:	f7fb ffc8 	bl	8001f14 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	2b64      	cmp	r3, #100	@ 0x64
 8005f8c:	d901      	bls.n	8005f92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e3d4      	b.n	800673c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f92:	4b63      	ldr	r3, [pc, #396]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d0f0      	beq.n	8005f80 <HAL_RCC_OscConfig+0xe8>
 8005f9e:	e014      	b.n	8005fca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fa0:	f7fb ffb8 	bl	8001f14 <HAL_GetTick>
 8005fa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005fa6:	e008      	b.n	8005fba <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fa8:	f7fb ffb4 	bl	8001f14 <HAL_GetTick>
 8005fac:	4602      	mov	r2, r0
 8005fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb0:	1ad3      	subs	r3, r2, r3
 8005fb2:	2b64      	cmp	r3, #100	@ 0x64
 8005fb4:	d901      	bls.n	8005fba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e3c0      	b.n	800673c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005fba:	4b59      	ldr	r3, [pc, #356]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d1f0      	bne.n	8005fa8 <HAL_RCC_OscConfig+0x110>
 8005fc6:	e000      	b.n	8005fca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 0302 	and.w	r3, r3, #2
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f000 80ca 	beq.w	800616c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005fd8:	4b51      	ldr	r3, [pc, #324]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005fe0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005fe2:	4b4f      	ldr	r3, [pc, #316]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 8005fe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d007      	beq.n	8005ffe <HAL_RCC_OscConfig+0x166>
 8005fee:	6a3b      	ldr	r3, [r7, #32]
 8005ff0:	2b18      	cmp	r3, #24
 8005ff2:	d156      	bne.n	80060a2 <HAL_RCC_OscConfig+0x20a>
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	f003 0303 	and.w	r3, r3, #3
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d151      	bne.n	80060a2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005ffe:	4b48      	ldr	r3, [pc, #288]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0304 	and.w	r3, r3, #4
 8006006:	2b00      	cmp	r3, #0
 8006008:	d005      	beq.n	8006016 <HAL_RCC_OscConfig+0x17e>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e392      	b.n	800673c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006016:	4b42      	ldr	r3, [pc, #264]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f023 0219 	bic.w	r2, r3, #25
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	68db      	ldr	r3, [r3, #12]
 8006022:	493f      	ldr	r1, [pc, #252]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 8006024:	4313      	orrs	r3, r2
 8006026:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006028:	f7fb ff74 	bl	8001f14 <HAL_GetTick>
 800602c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800602e:	e008      	b.n	8006042 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006030:	f7fb ff70 	bl	8001f14 <HAL_GetTick>
 8006034:	4602      	mov	r2, r0
 8006036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006038:	1ad3      	subs	r3, r2, r3
 800603a:	2b02      	cmp	r3, #2
 800603c:	d901      	bls.n	8006042 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800603e:	2303      	movs	r3, #3
 8006040:	e37c      	b.n	800673c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006042:	4b37      	ldr	r3, [pc, #220]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0304 	and.w	r3, r3, #4
 800604a:	2b00      	cmp	r3, #0
 800604c:	d0f0      	beq.n	8006030 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800604e:	f7fb ff91 	bl	8001f74 <HAL_GetREVID>
 8006052:	4603      	mov	r3, r0
 8006054:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006058:	4293      	cmp	r3, r2
 800605a:	d817      	bhi.n	800608c <HAL_RCC_OscConfig+0x1f4>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	691b      	ldr	r3, [r3, #16]
 8006060:	2b40      	cmp	r3, #64	@ 0x40
 8006062:	d108      	bne.n	8006076 <HAL_RCC_OscConfig+0x1de>
 8006064:	4b2e      	ldr	r3, [pc, #184]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800606c:	4a2c      	ldr	r2, [pc, #176]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 800606e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006072:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006074:	e07a      	b.n	800616c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006076:	4b2a      	ldr	r3, [pc, #168]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	031b      	lsls	r3, r3, #12
 8006084:	4926      	ldr	r1, [pc, #152]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 8006086:	4313      	orrs	r3, r2
 8006088:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800608a:	e06f      	b.n	800616c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800608c:	4b24      	ldr	r3, [pc, #144]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	061b      	lsls	r3, r3, #24
 800609a:	4921      	ldr	r1, [pc, #132]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 800609c:	4313      	orrs	r3, r2
 800609e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80060a0:	e064      	b.n	800616c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	68db      	ldr	r3, [r3, #12]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d047      	beq.n	800613a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80060aa:	4b1d      	ldr	r3, [pc, #116]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f023 0219 	bic.w	r2, r3, #25
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	491a      	ldr	r1, [pc, #104]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060bc:	f7fb ff2a 	bl	8001f14 <HAL_GetTick>
 80060c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060c2:	e008      	b.n	80060d6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060c4:	f7fb ff26 	bl	8001f14 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e332      	b.n	800673c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80060d6:	4b12      	ldr	r3, [pc, #72]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 0304 	and.w	r3, r3, #4
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0f0      	beq.n	80060c4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060e2:	f7fb ff47 	bl	8001f74 <HAL_GetREVID>
 80060e6:	4603      	mov	r3, r0
 80060e8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d819      	bhi.n	8006124 <HAL_RCC_OscConfig+0x28c>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	2b40      	cmp	r3, #64	@ 0x40
 80060f6:	d108      	bne.n	800610a <HAL_RCC_OscConfig+0x272>
 80060f8:	4b09      	ldr	r3, [pc, #36]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8006100:	4a07      	ldr	r2, [pc, #28]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 8006102:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006106:	6053      	str	r3, [r2, #4]
 8006108:	e030      	b.n	800616c <HAL_RCC_OscConfig+0x2d4>
 800610a:	4b05      	ldr	r3, [pc, #20]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	031b      	lsls	r3, r3, #12
 8006118:	4901      	ldr	r1, [pc, #4]	@ (8006120 <HAL_RCC_OscConfig+0x288>)
 800611a:	4313      	orrs	r3, r2
 800611c:	604b      	str	r3, [r1, #4]
 800611e:	e025      	b.n	800616c <HAL_RCC_OscConfig+0x2d4>
 8006120:	58024400 	.word	0x58024400
 8006124:	4b9a      	ldr	r3, [pc, #616]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	061b      	lsls	r3, r3, #24
 8006132:	4997      	ldr	r1, [pc, #604]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 8006134:	4313      	orrs	r3, r2
 8006136:	604b      	str	r3, [r1, #4]
 8006138:	e018      	b.n	800616c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800613a:	4b95      	ldr	r3, [pc, #596]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a94      	ldr	r2, [pc, #592]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 8006140:	f023 0301 	bic.w	r3, r3, #1
 8006144:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006146:	f7fb fee5 	bl	8001f14 <HAL_GetTick>
 800614a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800614c:	e008      	b.n	8006160 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800614e:	f7fb fee1 	bl	8001f14 <HAL_GetTick>
 8006152:	4602      	mov	r2, r0
 8006154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006156:	1ad3      	subs	r3, r2, r3
 8006158:	2b02      	cmp	r3, #2
 800615a:	d901      	bls.n	8006160 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e2ed      	b.n	800673c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006160:	4b8b      	ldr	r3, [pc, #556]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0304 	and.w	r3, r3, #4
 8006168:	2b00      	cmp	r3, #0
 800616a:	d1f0      	bne.n	800614e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f003 0310 	and.w	r3, r3, #16
 8006174:	2b00      	cmp	r3, #0
 8006176:	f000 80a9 	beq.w	80062cc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800617a:	4b85      	ldr	r3, [pc, #532]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 800617c:	691b      	ldr	r3, [r3, #16]
 800617e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006182:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006184:	4b82      	ldr	r3, [pc, #520]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 8006186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006188:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800618a:	69bb      	ldr	r3, [r7, #24]
 800618c:	2b08      	cmp	r3, #8
 800618e:	d007      	beq.n	80061a0 <HAL_RCC_OscConfig+0x308>
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	2b18      	cmp	r3, #24
 8006194:	d13a      	bne.n	800620c <HAL_RCC_OscConfig+0x374>
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f003 0303 	and.w	r3, r3, #3
 800619c:	2b01      	cmp	r3, #1
 800619e:	d135      	bne.n	800620c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061a0:	4b7b      	ldr	r3, [pc, #492]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d005      	beq.n	80061b8 <HAL_RCC_OscConfig+0x320>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	69db      	ldr	r3, [r3, #28]
 80061b0:	2b80      	cmp	r3, #128	@ 0x80
 80061b2:	d001      	beq.n	80061b8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80061b4:	2301      	movs	r3, #1
 80061b6:	e2c1      	b.n	800673c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061b8:	f7fb fedc 	bl	8001f74 <HAL_GetREVID>
 80061bc:	4603      	mov	r3, r0
 80061be:	f241 0203 	movw	r2, #4099	@ 0x1003
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d817      	bhi.n	80061f6 <HAL_RCC_OscConfig+0x35e>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6a1b      	ldr	r3, [r3, #32]
 80061ca:	2b20      	cmp	r3, #32
 80061cc:	d108      	bne.n	80061e0 <HAL_RCC_OscConfig+0x348>
 80061ce:	4b70      	ldr	r3, [pc, #448]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80061d6:	4a6e      	ldr	r2, [pc, #440]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 80061d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80061dc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061de:	e075      	b.n	80062cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061e0:	4b6b      	ldr	r3, [pc, #428]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6a1b      	ldr	r3, [r3, #32]
 80061ec:	069b      	lsls	r3, r3, #26
 80061ee:	4968      	ldr	r1, [pc, #416]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 80061f0:	4313      	orrs	r3, r2
 80061f2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80061f4:	e06a      	b.n	80062cc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80061f6:	4b66      	ldr	r3, [pc, #408]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6a1b      	ldr	r3, [r3, #32]
 8006202:	061b      	lsls	r3, r3, #24
 8006204:	4962      	ldr	r1, [pc, #392]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 8006206:	4313      	orrs	r3, r2
 8006208:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800620a:	e05f      	b.n	80062cc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	69db      	ldr	r3, [r3, #28]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d042      	beq.n	800629a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006214:	4b5e      	ldr	r3, [pc, #376]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a5d      	ldr	r2, [pc, #372]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 800621a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800621e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006220:	f7fb fe78 	bl	8001f14 <HAL_GetTick>
 8006224:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006226:	e008      	b.n	800623a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006228:	f7fb fe74 	bl	8001f14 <HAL_GetTick>
 800622c:	4602      	mov	r2, r0
 800622e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006230:	1ad3      	subs	r3, r2, r3
 8006232:	2b02      	cmp	r3, #2
 8006234:	d901      	bls.n	800623a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e280      	b.n	800673c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800623a:	4b55      	ldr	r3, [pc, #340]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006242:	2b00      	cmp	r3, #0
 8006244:	d0f0      	beq.n	8006228 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006246:	f7fb fe95 	bl	8001f74 <HAL_GetREVID>
 800624a:	4603      	mov	r3, r0
 800624c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8006250:	4293      	cmp	r3, r2
 8006252:	d817      	bhi.n	8006284 <HAL_RCC_OscConfig+0x3ec>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	2b20      	cmp	r3, #32
 800625a:	d108      	bne.n	800626e <HAL_RCC_OscConfig+0x3d6>
 800625c:	4b4c      	ldr	r3, [pc, #304]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8006264:	4a4a      	ldr	r2, [pc, #296]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 8006266:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800626a:	6053      	str	r3, [r2, #4]
 800626c:	e02e      	b.n	80062cc <HAL_RCC_OscConfig+0x434>
 800626e:	4b48      	ldr	r3, [pc, #288]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	069b      	lsls	r3, r3, #26
 800627c:	4944      	ldr	r1, [pc, #272]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 800627e:	4313      	orrs	r3, r2
 8006280:	604b      	str	r3, [r1, #4]
 8006282:	e023      	b.n	80062cc <HAL_RCC_OscConfig+0x434>
 8006284:	4b42      	ldr	r3, [pc, #264]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6a1b      	ldr	r3, [r3, #32]
 8006290:	061b      	lsls	r3, r3, #24
 8006292:	493f      	ldr	r1, [pc, #252]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 8006294:	4313      	orrs	r3, r2
 8006296:	60cb      	str	r3, [r1, #12]
 8006298:	e018      	b.n	80062cc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800629a:	4b3d      	ldr	r3, [pc, #244]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a3c      	ldr	r2, [pc, #240]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 80062a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80062a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062a6:	f7fb fe35 	bl	8001f14 <HAL_GetTick>
 80062aa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80062ac:	e008      	b.n	80062c0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80062ae:	f7fb fe31 	bl	8001f14 <HAL_GetTick>
 80062b2:	4602      	mov	r2, r0
 80062b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b6:	1ad3      	subs	r3, r2, r3
 80062b8:	2b02      	cmp	r3, #2
 80062ba:	d901      	bls.n	80062c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80062bc:	2303      	movs	r3, #3
 80062be:	e23d      	b.n	800673c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80062c0:	4b33      	ldr	r3, [pc, #204]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d1f0      	bne.n	80062ae <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0308 	and.w	r3, r3, #8
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d036      	beq.n	8006346 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	695b      	ldr	r3, [r3, #20]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d019      	beq.n	8006314 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80062e0:	4b2b      	ldr	r3, [pc, #172]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 80062e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80062e4:	4a2a      	ldr	r2, [pc, #168]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 80062e6:	f043 0301 	orr.w	r3, r3, #1
 80062ea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062ec:	f7fb fe12 	bl	8001f14 <HAL_GetTick>
 80062f0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80062f2:	e008      	b.n	8006306 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80062f4:	f7fb fe0e 	bl	8001f14 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d901      	bls.n	8006306 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006302:	2303      	movs	r3, #3
 8006304:	e21a      	b.n	800673c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006306:	4b22      	ldr	r3, [pc, #136]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 8006308:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d0f0      	beq.n	80062f4 <HAL_RCC_OscConfig+0x45c>
 8006312:	e018      	b.n	8006346 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006314:	4b1e      	ldr	r3, [pc, #120]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 8006316:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006318:	4a1d      	ldr	r2, [pc, #116]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 800631a:	f023 0301 	bic.w	r3, r3, #1
 800631e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006320:	f7fb fdf8 	bl	8001f14 <HAL_GetTick>
 8006324:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006326:	e008      	b.n	800633a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006328:	f7fb fdf4 	bl	8001f14 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	2b02      	cmp	r3, #2
 8006334:	d901      	bls.n	800633a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006336:	2303      	movs	r3, #3
 8006338:	e200      	b.n	800673c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800633a:	4b15      	ldr	r3, [pc, #84]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 800633c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1f0      	bne.n	8006328 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0320 	and.w	r3, r3, #32
 800634e:	2b00      	cmp	r3, #0
 8006350:	d039      	beq.n	80063c6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d01c      	beq.n	8006394 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800635a:	4b0d      	ldr	r3, [pc, #52]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	4a0c      	ldr	r2, [pc, #48]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 8006360:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006364:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006366:	f7fb fdd5 	bl	8001f14 <HAL_GetTick>
 800636a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800636c:	e008      	b.n	8006380 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800636e:	f7fb fdd1 	bl	8001f14 <HAL_GetTick>
 8006372:	4602      	mov	r2, r0
 8006374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	2b02      	cmp	r3, #2
 800637a:	d901      	bls.n	8006380 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800637c:	2303      	movs	r3, #3
 800637e:	e1dd      	b.n	800673c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006380:	4b03      	ldr	r3, [pc, #12]	@ (8006390 <HAL_RCC_OscConfig+0x4f8>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d0f0      	beq.n	800636e <HAL_RCC_OscConfig+0x4d6>
 800638c:	e01b      	b.n	80063c6 <HAL_RCC_OscConfig+0x52e>
 800638e:	bf00      	nop
 8006390:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006394:	4b9b      	ldr	r3, [pc, #620]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a9a      	ldr	r2, [pc, #616]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 800639a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800639e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80063a0:	f7fb fdb8 	bl	8001f14 <HAL_GetTick>
 80063a4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063a6:	e008      	b.n	80063ba <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80063a8:	f7fb fdb4 	bl	8001f14 <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d901      	bls.n	80063ba <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e1c0      	b.n	800673c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80063ba:	4b92      	ldr	r3, [pc, #584]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1f0      	bne.n	80063a8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f003 0304 	and.w	r3, r3, #4
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	f000 8081 	beq.w	80064d6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80063d4:	4b8c      	ldr	r3, [pc, #560]	@ (8006608 <HAL_RCC_OscConfig+0x770>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4a8b      	ldr	r2, [pc, #556]	@ (8006608 <HAL_RCC_OscConfig+0x770>)
 80063da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80063de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063e0:	f7fb fd98 	bl	8001f14 <HAL_GetTick>
 80063e4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063e6:	e008      	b.n	80063fa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063e8:	f7fb fd94 	bl	8001f14 <HAL_GetTick>
 80063ec:	4602      	mov	r2, r0
 80063ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	2b64      	cmp	r3, #100	@ 0x64
 80063f4:	d901      	bls.n	80063fa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e1a0      	b.n	800673c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80063fa:	4b83      	ldr	r3, [pc, #524]	@ (8006608 <HAL_RCC_OscConfig+0x770>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006402:	2b00      	cmp	r3, #0
 8006404:	d0f0      	beq.n	80063e8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	2b01      	cmp	r3, #1
 800640c:	d106      	bne.n	800641c <HAL_RCC_OscConfig+0x584>
 800640e:	4b7d      	ldr	r3, [pc, #500]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 8006410:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006412:	4a7c      	ldr	r2, [pc, #496]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 8006414:	f043 0301 	orr.w	r3, r3, #1
 8006418:	6713      	str	r3, [r2, #112]	@ 0x70
 800641a:	e02d      	b.n	8006478 <HAL_RCC_OscConfig+0x5e0>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10c      	bne.n	800643e <HAL_RCC_OscConfig+0x5a6>
 8006424:	4b77      	ldr	r3, [pc, #476]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 8006426:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006428:	4a76      	ldr	r2, [pc, #472]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 800642a:	f023 0301 	bic.w	r3, r3, #1
 800642e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006430:	4b74      	ldr	r3, [pc, #464]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 8006432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006434:	4a73      	ldr	r2, [pc, #460]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 8006436:	f023 0304 	bic.w	r3, r3, #4
 800643a:	6713      	str	r3, [r2, #112]	@ 0x70
 800643c:	e01c      	b.n	8006478 <HAL_RCC_OscConfig+0x5e0>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	689b      	ldr	r3, [r3, #8]
 8006442:	2b05      	cmp	r3, #5
 8006444:	d10c      	bne.n	8006460 <HAL_RCC_OscConfig+0x5c8>
 8006446:	4b6f      	ldr	r3, [pc, #444]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 8006448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800644a:	4a6e      	ldr	r2, [pc, #440]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 800644c:	f043 0304 	orr.w	r3, r3, #4
 8006450:	6713      	str	r3, [r2, #112]	@ 0x70
 8006452:	4b6c      	ldr	r3, [pc, #432]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 8006454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006456:	4a6b      	ldr	r2, [pc, #428]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 8006458:	f043 0301 	orr.w	r3, r3, #1
 800645c:	6713      	str	r3, [r2, #112]	@ 0x70
 800645e:	e00b      	b.n	8006478 <HAL_RCC_OscConfig+0x5e0>
 8006460:	4b68      	ldr	r3, [pc, #416]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 8006462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006464:	4a67      	ldr	r2, [pc, #412]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 8006466:	f023 0301 	bic.w	r3, r3, #1
 800646a:	6713      	str	r3, [r2, #112]	@ 0x70
 800646c:	4b65      	ldr	r3, [pc, #404]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 800646e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006470:	4a64      	ldr	r2, [pc, #400]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 8006472:	f023 0304 	bic.w	r3, r3, #4
 8006476:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	689b      	ldr	r3, [r3, #8]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d015      	beq.n	80064ac <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006480:	f7fb fd48 	bl	8001f14 <HAL_GetTick>
 8006484:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006486:	e00a      	b.n	800649e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006488:	f7fb fd44 	bl	8001f14 <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006496:	4293      	cmp	r3, r2
 8006498:	d901      	bls.n	800649e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e14e      	b.n	800673c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800649e:	4b59      	ldr	r3, [pc, #356]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 80064a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064a2:	f003 0302 	and.w	r3, r3, #2
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d0ee      	beq.n	8006488 <HAL_RCC_OscConfig+0x5f0>
 80064aa:	e014      	b.n	80064d6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064ac:	f7fb fd32 	bl	8001f14 <HAL_GetTick>
 80064b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80064b2:	e00a      	b.n	80064ca <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80064b4:	f7fb fd2e 	bl	8001f14 <HAL_GetTick>
 80064b8:	4602      	mov	r2, r0
 80064ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064bc:	1ad3      	subs	r3, r2, r3
 80064be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d901      	bls.n	80064ca <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e138      	b.n	800673c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80064ca:	4b4e      	ldr	r3, [pc, #312]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 80064cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064ce:	f003 0302 	and.w	r3, r3, #2
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d1ee      	bne.n	80064b4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 812d 	beq.w	800673a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80064e0:	4b48      	ldr	r3, [pc, #288]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80064e8:	2b18      	cmp	r3, #24
 80064ea:	f000 80bd 	beq.w	8006668 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	f040 809e 	bne.w	8006634 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064f8:	4b42      	ldr	r3, [pc, #264]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a41      	ldr	r2, [pc, #260]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 80064fe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006504:	f7fb fd06 	bl	8001f14 <HAL_GetTick>
 8006508:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800650a:	e008      	b.n	800651e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800650c:	f7fb fd02 	bl	8001f14 <HAL_GetTick>
 8006510:	4602      	mov	r2, r0
 8006512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	2b02      	cmp	r3, #2
 8006518:	d901      	bls.n	800651e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800651a:	2303      	movs	r3, #3
 800651c:	e10e      	b.n	800673c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800651e:	4b39      	ldr	r3, [pc, #228]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1f0      	bne.n	800650c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800652a:	4b36      	ldr	r3, [pc, #216]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 800652c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800652e:	4b37      	ldr	r3, [pc, #220]	@ (800660c <HAL_RCC_OscConfig+0x774>)
 8006530:	4013      	ands	r3, r2
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800653a:	0112      	lsls	r2, r2, #4
 800653c:	430a      	orrs	r2, r1
 800653e:	4931      	ldr	r1, [pc, #196]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 8006540:	4313      	orrs	r3, r2
 8006542:	628b      	str	r3, [r1, #40]	@ 0x28
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006548:	3b01      	subs	r3, #1
 800654a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006552:	3b01      	subs	r3, #1
 8006554:	025b      	lsls	r3, r3, #9
 8006556:	b29b      	uxth	r3, r3
 8006558:	431a      	orrs	r2, r3
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800655e:	3b01      	subs	r3, #1
 8006560:	041b      	lsls	r3, r3, #16
 8006562:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006566:	431a      	orrs	r2, r3
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800656c:	3b01      	subs	r3, #1
 800656e:	061b      	lsls	r3, r3, #24
 8006570:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006574:	4923      	ldr	r1, [pc, #140]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 8006576:	4313      	orrs	r3, r2
 8006578:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800657a:	4b22      	ldr	r3, [pc, #136]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 800657c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657e:	4a21      	ldr	r2, [pc, #132]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 8006580:	f023 0301 	bic.w	r3, r3, #1
 8006584:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006586:	4b1f      	ldr	r3, [pc, #124]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 8006588:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800658a:	4b21      	ldr	r3, [pc, #132]	@ (8006610 <HAL_RCC_OscConfig+0x778>)
 800658c:	4013      	ands	r3, r2
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006592:	00d2      	lsls	r2, r2, #3
 8006594:	491b      	ldr	r1, [pc, #108]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 8006596:	4313      	orrs	r3, r2
 8006598:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800659a:	4b1a      	ldr	r3, [pc, #104]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 800659c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800659e:	f023 020c 	bic.w	r2, r3, #12
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a6:	4917      	ldr	r1, [pc, #92]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 80065a8:	4313      	orrs	r3, r2
 80065aa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80065ac:	4b15      	ldr	r3, [pc, #84]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 80065ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b0:	f023 0202 	bic.w	r2, r3, #2
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065b8:	4912      	ldr	r1, [pc, #72]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80065be:	4b11      	ldr	r3, [pc, #68]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 80065c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c2:	4a10      	ldr	r2, [pc, #64]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 80065c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065c8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065ca:	4b0e      	ldr	r3, [pc, #56]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 80065cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ce:	4a0d      	ldr	r2, [pc, #52]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 80065d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80065d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 80065d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065da:	4a0a      	ldr	r2, [pc, #40]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 80065dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80065e0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80065e2:	4b08      	ldr	r3, [pc, #32]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 80065e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065e6:	4a07      	ldr	r2, [pc, #28]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 80065e8:	f043 0301 	orr.w	r3, r3, #1
 80065ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80065ee:	4b05      	ldr	r3, [pc, #20]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a04      	ldr	r2, [pc, #16]	@ (8006604 <HAL_RCC_OscConfig+0x76c>)
 80065f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065fa:	f7fb fc8b 	bl	8001f14 <HAL_GetTick>
 80065fe:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006600:	e011      	b.n	8006626 <HAL_RCC_OscConfig+0x78e>
 8006602:	bf00      	nop
 8006604:	58024400 	.word	0x58024400
 8006608:	58024800 	.word	0x58024800
 800660c:	fffffc0c 	.word	0xfffffc0c
 8006610:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006614:	f7fb fc7e 	bl	8001f14 <HAL_GetTick>
 8006618:	4602      	mov	r2, r0
 800661a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661c:	1ad3      	subs	r3, r2, r3
 800661e:	2b02      	cmp	r3, #2
 8006620:	d901      	bls.n	8006626 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e08a      	b.n	800673c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006626:	4b47      	ldr	r3, [pc, #284]	@ (8006744 <HAL_RCC_OscConfig+0x8ac>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d0f0      	beq.n	8006614 <HAL_RCC_OscConfig+0x77c>
 8006632:	e082      	b.n	800673a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006634:	4b43      	ldr	r3, [pc, #268]	@ (8006744 <HAL_RCC_OscConfig+0x8ac>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a42      	ldr	r2, [pc, #264]	@ (8006744 <HAL_RCC_OscConfig+0x8ac>)
 800663a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800663e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006640:	f7fb fc68 	bl	8001f14 <HAL_GetTick>
 8006644:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006646:	e008      	b.n	800665a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006648:	f7fb fc64 	bl	8001f14 <HAL_GetTick>
 800664c:	4602      	mov	r2, r0
 800664e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	2b02      	cmp	r3, #2
 8006654:	d901      	bls.n	800665a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e070      	b.n	800673c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800665a:	4b3a      	ldr	r3, [pc, #232]	@ (8006744 <HAL_RCC_OscConfig+0x8ac>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1f0      	bne.n	8006648 <HAL_RCC_OscConfig+0x7b0>
 8006666:	e068      	b.n	800673a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006668:	4b36      	ldr	r3, [pc, #216]	@ (8006744 <HAL_RCC_OscConfig+0x8ac>)
 800666a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800666c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800666e:	4b35      	ldr	r3, [pc, #212]	@ (8006744 <HAL_RCC_OscConfig+0x8ac>)
 8006670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006672:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006678:	2b01      	cmp	r3, #1
 800667a:	d031      	beq.n	80066e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	f003 0203 	and.w	r2, r3, #3
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006686:	429a      	cmp	r2, r3
 8006688:	d12a      	bne.n	80066e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	091b      	lsrs	r3, r3, #4
 800668e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006696:	429a      	cmp	r2, r3
 8006698:	d122      	bne.n	80066e0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d11a      	bne.n	80066e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	0a5b      	lsrs	r3, r3, #9
 80066ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066b6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d111      	bne.n	80066e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	0c1b      	lsrs	r3, r3, #16
 80066c0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066c8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d108      	bne.n	80066e0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	0e1b      	lsrs	r3, r3, #24
 80066d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066da:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80066dc:	429a      	cmp	r2, r3
 80066de:	d001      	beq.n	80066e4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e02b      	b.n	800673c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80066e4:	4b17      	ldr	r3, [pc, #92]	@ (8006744 <HAL_RCC_OscConfig+0x8ac>)
 80066e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066e8:	08db      	lsrs	r3, r3, #3
 80066ea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066ee:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066f4:	693a      	ldr	r2, [r7, #16]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d01f      	beq.n	800673a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80066fa:	4b12      	ldr	r3, [pc, #72]	@ (8006744 <HAL_RCC_OscConfig+0x8ac>)
 80066fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066fe:	4a11      	ldr	r2, [pc, #68]	@ (8006744 <HAL_RCC_OscConfig+0x8ac>)
 8006700:	f023 0301 	bic.w	r3, r3, #1
 8006704:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006706:	f7fb fc05 	bl	8001f14 <HAL_GetTick>
 800670a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800670c:	bf00      	nop
 800670e:	f7fb fc01 	bl	8001f14 <HAL_GetTick>
 8006712:	4602      	mov	r2, r0
 8006714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006716:	4293      	cmp	r3, r2
 8006718:	d0f9      	beq.n	800670e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800671a:	4b0a      	ldr	r3, [pc, #40]	@ (8006744 <HAL_RCC_OscConfig+0x8ac>)
 800671c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800671e:	4b0a      	ldr	r3, [pc, #40]	@ (8006748 <HAL_RCC_OscConfig+0x8b0>)
 8006720:	4013      	ands	r3, r2
 8006722:	687a      	ldr	r2, [r7, #4]
 8006724:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8006726:	00d2      	lsls	r2, r2, #3
 8006728:	4906      	ldr	r1, [pc, #24]	@ (8006744 <HAL_RCC_OscConfig+0x8ac>)
 800672a:	4313      	orrs	r3, r2
 800672c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800672e:	4b05      	ldr	r3, [pc, #20]	@ (8006744 <HAL_RCC_OscConfig+0x8ac>)
 8006730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006732:	4a04      	ldr	r2, [pc, #16]	@ (8006744 <HAL_RCC_OscConfig+0x8ac>)
 8006734:	f043 0301 	orr.w	r3, r3, #1
 8006738:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3730      	adds	r7, #48	@ 0x30
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	58024400 	.word	0x58024400
 8006748:	ffff0007 	.word	0xffff0007

0800674c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d101      	bne.n	8006760 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	e19c      	b.n	8006a9a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006760:	4b8a      	ldr	r3, [pc, #552]	@ (800698c <HAL_RCC_ClockConfig+0x240>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f003 030f 	and.w	r3, r3, #15
 8006768:	683a      	ldr	r2, [r7, #0]
 800676a:	429a      	cmp	r2, r3
 800676c:	d910      	bls.n	8006790 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800676e:	4b87      	ldr	r3, [pc, #540]	@ (800698c <HAL_RCC_ClockConfig+0x240>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f023 020f 	bic.w	r2, r3, #15
 8006776:	4985      	ldr	r1, [pc, #532]	@ (800698c <HAL_RCC_ClockConfig+0x240>)
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	4313      	orrs	r3, r2
 800677c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800677e:	4b83      	ldr	r3, [pc, #524]	@ (800698c <HAL_RCC_ClockConfig+0x240>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 030f 	and.w	r3, r3, #15
 8006786:	683a      	ldr	r2, [r7, #0]
 8006788:	429a      	cmp	r2, r3
 800678a:	d001      	beq.n	8006790 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e184      	b.n	8006a9a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f003 0304 	and.w	r3, r3, #4
 8006798:	2b00      	cmp	r3, #0
 800679a:	d010      	beq.n	80067be <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	691a      	ldr	r2, [r3, #16]
 80067a0:	4b7b      	ldr	r3, [pc, #492]	@ (8006990 <HAL_RCC_ClockConfig+0x244>)
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d908      	bls.n	80067be <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80067ac:	4b78      	ldr	r3, [pc, #480]	@ (8006990 <HAL_RCC_ClockConfig+0x244>)
 80067ae:	699b      	ldr	r3, [r3, #24]
 80067b0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	691b      	ldr	r3, [r3, #16]
 80067b8:	4975      	ldr	r1, [pc, #468]	@ (8006990 <HAL_RCC_ClockConfig+0x244>)
 80067ba:	4313      	orrs	r3, r2
 80067bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0308 	and.w	r3, r3, #8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d010      	beq.n	80067ec <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	695a      	ldr	r2, [r3, #20]
 80067ce:	4b70      	ldr	r3, [pc, #448]	@ (8006990 <HAL_RCC_ClockConfig+0x244>)
 80067d0:	69db      	ldr	r3, [r3, #28]
 80067d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d908      	bls.n	80067ec <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80067da:	4b6d      	ldr	r3, [pc, #436]	@ (8006990 <HAL_RCC_ClockConfig+0x244>)
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	695b      	ldr	r3, [r3, #20]
 80067e6:	496a      	ldr	r1, [pc, #424]	@ (8006990 <HAL_RCC_ClockConfig+0x244>)
 80067e8:	4313      	orrs	r3, r2
 80067ea:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0310 	and.w	r3, r3, #16
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d010      	beq.n	800681a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	699a      	ldr	r2, [r3, #24]
 80067fc:	4b64      	ldr	r3, [pc, #400]	@ (8006990 <HAL_RCC_ClockConfig+0x244>)
 80067fe:	69db      	ldr	r3, [r3, #28]
 8006800:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006804:	429a      	cmp	r2, r3
 8006806:	d908      	bls.n	800681a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006808:	4b61      	ldr	r3, [pc, #388]	@ (8006990 <HAL_RCC_ClockConfig+0x244>)
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	699b      	ldr	r3, [r3, #24]
 8006814:	495e      	ldr	r1, [pc, #376]	@ (8006990 <HAL_RCC_ClockConfig+0x244>)
 8006816:	4313      	orrs	r3, r2
 8006818:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 0320 	and.w	r3, r3, #32
 8006822:	2b00      	cmp	r3, #0
 8006824:	d010      	beq.n	8006848 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	69da      	ldr	r2, [r3, #28]
 800682a:	4b59      	ldr	r3, [pc, #356]	@ (8006990 <HAL_RCC_ClockConfig+0x244>)
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006832:	429a      	cmp	r2, r3
 8006834:	d908      	bls.n	8006848 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006836:	4b56      	ldr	r3, [pc, #344]	@ (8006990 <HAL_RCC_ClockConfig+0x244>)
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	4953      	ldr	r1, [pc, #332]	@ (8006990 <HAL_RCC_ClockConfig+0x244>)
 8006844:	4313      	orrs	r3, r2
 8006846:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0302 	and.w	r3, r3, #2
 8006850:	2b00      	cmp	r3, #0
 8006852:	d010      	beq.n	8006876 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68da      	ldr	r2, [r3, #12]
 8006858:	4b4d      	ldr	r3, [pc, #308]	@ (8006990 <HAL_RCC_ClockConfig+0x244>)
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	f003 030f 	and.w	r3, r3, #15
 8006860:	429a      	cmp	r2, r3
 8006862:	d908      	bls.n	8006876 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006864:	4b4a      	ldr	r3, [pc, #296]	@ (8006990 <HAL_RCC_ClockConfig+0x244>)
 8006866:	699b      	ldr	r3, [r3, #24]
 8006868:	f023 020f 	bic.w	r2, r3, #15
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	68db      	ldr	r3, [r3, #12]
 8006870:	4947      	ldr	r1, [pc, #284]	@ (8006990 <HAL_RCC_ClockConfig+0x244>)
 8006872:	4313      	orrs	r3, r2
 8006874:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0301 	and.w	r3, r3, #1
 800687e:	2b00      	cmp	r3, #0
 8006880:	d055      	beq.n	800692e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006882:	4b43      	ldr	r3, [pc, #268]	@ (8006990 <HAL_RCC_ClockConfig+0x244>)
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	4940      	ldr	r1, [pc, #256]	@ (8006990 <HAL_RCC_ClockConfig+0x244>)
 8006890:	4313      	orrs	r3, r2
 8006892:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	2b02      	cmp	r3, #2
 800689a:	d107      	bne.n	80068ac <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800689c:	4b3c      	ldr	r3, [pc, #240]	@ (8006990 <HAL_RCC_ClockConfig+0x244>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d121      	bne.n	80068ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e0f6      	b.n	8006a9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	2b03      	cmp	r3, #3
 80068b2:	d107      	bne.n	80068c4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80068b4:	4b36      	ldr	r3, [pc, #216]	@ (8006990 <HAL_RCC_ClockConfig+0x244>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d115      	bne.n	80068ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068c0:	2301      	movs	r3, #1
 80068c2:	e0ea      	b.n	8006a9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d107      	bne.n	80068dc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80068cc:	4b30      	ldr	r3, [pc, #192]	@ (8006990 <HAL_RCC_ClockConfig+0x244>)
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d109      	bne.n	80068ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068d8:	2301      	movs	r3, #1
 80068da:	e0de      	b.n	8006a9a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068dc:	4b2c      	ldr	r3, [pc, #176]	@ (8006990 <HAL_RCC_ClockConfig+0x244>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f003 0304 	and.w	r3, r3, #4
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	e0d6      	b.n	8006a9a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80068ec:	4b28      	ldr	r3, [pc, #160]	@ (8006990 <HAL_RCC_ClockConfig+0x244>)
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	f023 0207 	bic.w	r2, r3, #7
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	4925      	ldr	r1, [pc, #148]	@ (8006990 <HAL_RCC_ClockConfig+0x244>)
 80068fa:	4313      	orrs	r3, r2
 80068fc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068fe:	f7fb fb09 	bl	8001f14 <HAL_GetTick>
 8006902:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006904:	e00a      	b.n	800691c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006906:	f7fb fb05 	bl	8001f14 <HAL_GetTick>
 800690a:	4602      	mov	r2, r0
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006914:	4293      	cmp	r3, r2
 8006916:	d901      	bls.n	800691c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e0be      	b.n	8006a9a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800691c:	4b1c      	ldr	r3, [pc, #112]	@ (8006990 <HAL_RCC_ClockConfig+0x244>)
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	00db      	lsls	r3, r3, #3
 800692a:	429a      	cmp	r2, r3
 800692c:	d1eb      	bne.n	8006906 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f003 0302 	and.w	r3, r3, #2
 8006936:	2b00      	cmp	r3, #0
 8006938:	d010      	beq.n	800695c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68da      	ldr	r2, [r3, #12]
 800693e:	4b14      	ldr	r3, [pc, #80]	@ (8006990 <HAL_RCC_ClockConfig+0x244>)
 8006940:	699b      	ldr	r3, [r3, #24]
 8006942:	f003 030f 	and.w	r3, r3, #15
 8006946:	429a      	cmp	r2, r3
 8006948:	d208      	bcs.n	800695c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800694a:	4b11      	ldr	r3, [pc, #68]	@ (8006990 <HAL_RCC_ClockConfig+0x244>)
 800694c:	699b      	ldr	r3, [r3, #24]
 800694e:	f023 020f 	bic.w	r2, r3, #15
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	490e      	ldr	r1, [pc, #56]	@ (8006990 <HAL_RCC_ClockConfig+0x244>)
 8006958:	4313      	orrs	r3, r2
 800695a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800695c:	4b0b      	ldr	r3, [pc, #44]	@ (800698c <HAL_RCC_ClockConfig+0x240>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 030f 	and.w	r3, r3, #15
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	429a      	cmp	r2, r3
 8006968:	d214      	bcs.n	8006994 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800696a:	4b08      	ldr	r3, [pc, #32]	@ (800698c <HAL_RCC_ClockConfig+0x240>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f023 020f 	bic.w	r2, r3, #15
 8006972:	4906      	ldr	r1, [pc, #24]	@ (800698c <HAL_RCC_ClockConfig+0x240>)
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	4313      	orrs	r3, r2
 8006978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800697a:	4b04      	ldr	r3, [pc, #16]	@ (800698c <HAL_RCC_ClockConfig+0x240>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 030f 	and.w	r3, r3, #15
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	429a      	cmp	r2, r3
 8006986:	d005      	beq.n	8006994 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
 800698a:	e086      	b.n	8006a9a <HAL_RCC_ClockConfig+0x34e>
 800698c:	52002000 	.word	0x52002000
 8006990:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f003 0304 	and.w	r3, r3, #4
 800699c:	2b00      	cmp	r3, #0
 800699e:	d010      	beq.n	80069c2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	691a      	ldr	r2, [r3, #16]
 80069a4:	4b3f      	ldr	r3, [pc, #252]	@ (8006aa4 <HAL_RCC_ClockConfig+0x358>)
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069ac:	429a      	cmp	r2, r3
 80069ae:	d208      	bcs.n	80069c2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80069b0:	4b3c      	ldr	r3, [pc, #240]	@ (8006aa4 <HAL_RCC_ClockConfig+0x358>)
 80069b2:	699b      	ldr	r3, [r3, #24]
 80069b4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	4939      	ldr	r1, [pc, #228]	@ (8006aa4 <HAL_RCC_ClockConfig+0x358>)
 80069be:	4313      	orrs	r3, r2
 80069c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f003 0308 	and.w	r3, r3, #8
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d010      	beq.n	80069f0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	695a      	ldr	r2, [r3, #20]
 80069d2:	4b34      	ldr	r3, [pc, #208]	@ (8006aa4 <HAL_RCC_ClockConfig+0x358>)
 80069d4:	69db      	ldr	r3, [r3, #28]
 80069d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80069da:	429a      	cmp	r2, r3
 80069dc:	d208      	bcs.n	80069f0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80069de:	4b31      	ldr	r3, [pc, #196]	@ (8006aa4 <HAL_RCC_ClockConfig+0x358>)
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	695b      	ldr	r3, [r3, #20]
 80069ea:	492e      	ldr	r1, [pc, #184]	@ (8006aa4 <HAL_RCC_ClockConfig+0x358>)
 80069ec:	4313      	orrs	r3, r2
 80069ee:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 0310 	and.w	r3, r3, #16
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d010      	beq.n	8006a1e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	699a      	ldr	r2, [r3, #24]
 8006a00:	4b28      	ldr	r3, [pc, #160]	@ (8006aa4 <HAL_RCC_ClockConfig+0x358>)
 8006a02:	69db      	ldr	r3, [r3, #28]
 8006a04:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d208      	bcs.n	8006a1e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006a0c:	4b25      	ldr	r3, [pc, #148]	@ (8006aa4 <HAL_RCC_ClockConfig+0x358>)
 8006a0e:	69db      	ldr	r3, [r3, #28]
 8006a10:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	4922      	ldr	r1, [pc, #136]	@ (8006aa4 <HAL_RCC_ClockConfig+0x358>)
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f003 0320 	and.w	r3, r3, #32
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d010      	beq.n	8006a4c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	69da      	ldr	r2, [r3, #28]
 8006a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8006aa4 <HAL_RCC_ClockConfig+0x358>)
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d208      	bcs.n	8006a4c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8006a3a:	4b1a      	ldr	r3, [pc, #104]	@ (8006aa4 <HAL_RCC_ClockConfig+0x358>)
 8006a3c:	6a1b      	ldr	r3, [r3, #32]
 8006a3e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	69db      	ldr	r3, [r3, #28]
 8006a46:	4917      	ldr	r1, [pc, #92]	@ (8006aa4 <HAL_RCC_ClockConfig+0x358>)
 8006a48:	4313      	orrs	r3, r2
 8006a4a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006a4c:	f000 f834 	bl	8006ab8 <HAL_RCC_GetSysClockFreq>
 8006a50:	4602      	mov	r2, r0
 8006a52:	4b14      	ldr	r3, [pc, #80]	@ (8006aa4 <HAL_RCC_ClockConfig+0x358>)
 8006a54:	699b      	ldr	r3, [r3, #24]
 8006a56:	0a1b      	lsrs	r3, r3, #8
 8006a58:	f003 030f 	and.w	r3, r3, #15
 8006a5c:	4912      	ldr	r1, [pc, #72]	@ (8006aa8 <HAL_RCC_ClockConfig+0x35c>)
 8006a5e:	5ccb      	ldrb	r3, [r1, r3]
 8006a60:	f003 031f 	and.w	r3, r3, #31
 8006a64:	fa22 f303 	lsr.w	r3, r2, r3
 8006a68:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8006aa4 <HAL_RCC_ClockConfig+0x358>)
 8006a6c:	699b      	ldr	r3, [r3, #24]
 8006a6e:	f003 030f 	and.w	r3, r3, #15
 8006a72:	4a0d      	ldr	r2, [pc, #52]	@ (8006aa8 <HAL_RCC_ClockConfig+0x35c>)
 8006a74:	5cd3      	ldrb	r3, [r2, r3]
 8006a76:	f003 031f 	and.w	r3, r3, #31
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a80:	4a0a      	ldr	r2, [pc, #40]	@ (8006aac <HAL_RCC_ClockConfig+0x360>)
 8006a82:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006a84:	4a0a      	ldr	r2, [pc, #40]	@ (8006ab0 <HAL_RCC_ClockConfig+0x364>)
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8006a8a:	4b0a      	ldr	r3, [pc, #40]	@ (8006ab4 <HAL_RCC_ClockConfig+0x368>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7fb f9f6 	bl	8001e80 <HAL_InitTick>
 8006a94:	4603      	mov	r3, r0
 8006a96:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006a98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3718      	adds	r7, #24
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
 8006aa2:	bf00      	nop
 8006aa4:	58024400 	.word	0x58024400
 8006aa8:	080120ac 	.word	0x080120ac
 8006aac:	24000004 	.word	0x24000004
 8006ab0:	24000000 	.word	0x24000000
 8006ab4:	24000028 	.word	0x24000028

08006ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b089      	sub	sp, #36	@ 0x24
 8006abc:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006abe:	4bb3      	ldr	r3, [pc, #716]	@ (8006d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006ac0:	691b      	ldr	r3, [r3, #16]
 8006ac2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ac6:	2b18      	cmp	r3, #24
 8006ac8:	f200 8155 	bhi.w	8006d76 <HAL_RCC_GetSysClockFreq+0x2be>
 8006acc:	a201      	add	r2, pc, #4	@ (adr r2, 8006ad4 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ad2:	bf00      	nop
 8006ad4:	08006b39 	.word	0x08006b39
 8006ad8:	08006d77 	.word	0x08006d77
 8006adc:	08006d77 	.word	0x08006d77
 8006ae0:	08006d77 	.word	0x08006d77
 8006ae4:	08006d77 	.word	0x08006d77
 8006ae8:	08006d77 	.word	0x08006d77
 8006aec:	08006d77 	.word	0x08006d77
 8006af0:	08006d77 	.word	0x08006d77
 8006af4:	08006b5f 	.word	0x08006b5f
 8006af8:	08006d77 	.word	0x08006d77
 8006afc:	08006d77 	.word	0x08006d77
 8006b00:	08006d77 	.word	0x08006d77
 8006b04:	08006d77 	.word	0x08006d77
 8006b08:	08006d77 	.word	0x08006d77
 8006b0c:	08006d77 	.word	0x08006d77
 8006b10:	08006d77 	.word	0x08006d77
 8006b14:	08006b65 	.word	0x08006b65
 8006b18:	08006d77 	.word	0x08006d77
 8006b1c:	08006d77 	.word	0x08006d77
 8006b20:	08006d77 	.word	0x08006d77
 8006b24:	08006d77 	.word	0x08006d77
 8006b28:	08006d77 	.word	0x08006d77
 8006b2c:	08006d77 	.word	0x08006d77
 8006b30:	08006d77 	.word	0x08006d77
 8006b34:	08006b6b 	.word	0x08006b6b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006b38:	4b94      	ldr	r3, [pc, #592]	@ (8006d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0320 	and.w	r3, r3, #32
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d009      	beq.n	8006b58 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006b44:	4b91      	ldr	r3, [pc, #580]	@ (8006d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	08db      	lsrs	r3, r3, #3
 8006b4a:	f003 0303 	and.w	r3, r3, #3
 8006b4e:	4a90      	ldr	r2, [pc, #576]	@ (8006d90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b50:	fa22 f303 	lsr.w	r3, r2, r3
 8006b54:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8006b56:	e111      	b.n	8006d7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006b58:	4b8d      	ldr	r3, [pc, #564]	@ (8006d90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006b5a:	61bb      	str	r3, [r7, #24]
      break;
 8006b5c:	e10e      	b.n	8006d7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8006b5e:	4b8d      	ldr	r3, [pc, #564]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006b60:	61bb      	str	r3, [r7, #24]
      break;
 8006b62:	e10b      	b.n	8006d7c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8006b64:	4b8c      	ldr	r3, [pc, #560]	@ (8006d98 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8006b66:	61bb      	str	r3, [r7, #24]
      break;
 8006b68:	e108      	b.n	8006d7c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006b6a:	4b88      	ldr	r3, [pc, #544]	@ (8006d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b6e:	f003 0303 	and.w	r3, r3, #3
 8006b72:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8006b74:	4b85      	ldr	r3, [pc, #532]	@ (8006d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b78:	091b      	lsrs	r3, r3, #4
 8006b7a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b7e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006b80:	4b82      	ldr	r3, [pc, #520]	@ (8006d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b84:	f003 0301 	and.w	r3, r3, #1
 8006b88:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006b8a:	4b80      	ldr	r3, [pc, #512]	@ (8006d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b8e:	08db      	lsrs	r3, r3, #3
 8006b90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	fb02 f303 	mul.w	r3, r2, r3
 8006b9a:	ee07 3a90 	vmov	s15, r3
 8006b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ba2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8006ba6:	693b      	ldr	r3, [r7, #16]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f000 80e1 	beq.w	8006d70 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	2b02      	cmp	r3, #2
 8006bb2:	f000 8083 	beq.w	8006cbc <HAL_RCC_GetSysClockFreq+0x204>
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	2b02      	cmp	r3, #2
 8006bba:	f200 80a1 	bhi.w	8006d00 <HAL_RCC_GetSysClockFreq+0x248>
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d003      	beq.n	8006bcc <HAL_RCC_GetSysClockFreq+0x114>
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d056      	beq.n	8006c78 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006bca:	e099      	b.n	8006d00 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006bcc:	4b6f      	ldr	r3, [pc, #444]	@ (8006d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f003 0320 	and.w	r3, r3, #32
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d02d      	beq.n	8006c34 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006bd8:	4b6c      	ldr	r3, [pc, #432]	@ (8006d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	08db      	lsrs	r3, r3, #3
 8006bde:	f003 0303 	and.w	r3, r3, #3
 8006be2:	4a6b      	ldr	r2, [pc, #428]	@ (8006d90 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006be4:	fa22 f303 	lsr.w	r3, r2, r3
 8006be8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	ee07 3a90 	vmov	s15, r3
 8006bf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	ee07 3a90 	vmov	s15, r3
 8006bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c02:	4b62      	ldr	r3, [pc, #392]	@ (8006d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c0a:	ee07 3a90 	vmov	s15, r3
 8006c0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c12:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c16:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8006d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c2e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8006c32:	e087      	b.n	8006d44 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	ee07 3a90 	vmov	s15, r3
 8006c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c3e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8006da0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8006c42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c46:	4b51      	ldr	r3, [pc, #324]	@ (8006d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c4e:	ee07 3a90 	vmov	s15, r3
 8006c52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c56:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c5a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8006d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006c5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006c76:	e065      	b.n	8006d44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	ee07 3a90 	vmov	s15, r3
 8006c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c82:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8006da4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006c86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c8a:	4b40      	ldr	r3, [pc, #256]	@ (8006d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c92:	ee07 3a90 	vmov	s15, r3
 8006c96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c9a:	ed97 6a02 	vldr	s12, [r7, #8]
 8006c9e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8006d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ca2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006caa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006cba:	e043      	b.n	8006d44 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006cbc:	693b      	ldr	r3, [r7, #16]
 8006cbe:	ee07 3a90 	vmov	s15, r3
 8006cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8006da8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006cca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cce:	4b2f      	ldr	r3, [pc, #188]	@ (8006d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd6:	ee07 3a90 	vmov	s15, r3
 8006cda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cde:	ed97 6a02 	vldr	s12, [r7, #8]
 8006ce2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8006d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006ce6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006cea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cfa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006cfe:	e021      	b.n	8006d44 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	ee07 3a90 	vmov	s15, r3
 8006d06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d0a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006da4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8006d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d12:	4b1e      	ldr	r3, [pc, #120]	@ (8006d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d1a:	ee07 3a90 	vmov	s15, r3
 8006d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d22:	ed97 6a02 	vldr	s12, [r7, #8]
 8006d26:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8006d9c <HAL_RCC_GetSysClockFreq+0x2e4>
 8006d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d3e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8006d42:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8006d44:	4b11      	ldr	r3, [pc, #68]	@ (8006d8c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d48:	0a5b      	lsrs	r3, r3, #9
 8006d4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006d4e:	3301      	adds	r3, #1
 8006d50:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	ee07 3a90 	vmov	s15, r3
 8006d58:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006d5c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006d60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006d64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006d68:	ee17 3a90 	vmov	r3, s15
 8006d6c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8006d6e:	e005      	b.n	8006d7c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8006d70:	2300      	movs	r3, #0
 8006d72:	61bb      	str	r3, [r7, #24]
      break;
 8006d74:	e002      	b.n	8006d7c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8006d76:	4b07      	ldr	r3, [pc, #28]	@ (8006d94 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006d78:	61bb      	str	r3, [r7, #24]
      break;
 8006d7a:	bf00      	nop
  }

  return sysclockfreq;
 8006d7c:	69bb      	ldr	r3, [r7, #24]
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3724      	adds	r7, #36	@ 0x24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
 8006d8a:	bf00      	nop
 8006d8c:	58024400 	.word	0x58024400
 8006d90:	03d09000 	.word	0x03d09000
 8006d94:	003d0900 	.word	0x003d0900
 8006d98:	017d7840 	.word	0x017d7840
 8006d9c:	46000000 	.word	0x46000000
 8006da0:	4c742400 	.word	0x4c742400
 8006da4:	4a742400 	.word	0x4a742400
 8006da8:	4bbebc20 	.word	0x4bbebc20

08006dac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b082      	sub	sp, #8
 8006db0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006db2:	f7ff fe81 	bl	8006ab8 <HAL_RCC_GetSysClockFreq>
 8006db6:	4602      	mov	r2, r0
 8006db8:	4b10      	ldr	r3, [pc, #64]	@ (8006dfc <HAL_RCC_GetHCLKFreq+0x50>)
 8006dba:	699b      	ldr	r3, [r3, #24]
 8006dbc:	0a1b      	lsrs	r3, r3, #8
 8006dbe:	f003 030f 	and.w	r3, r3, #15
 8006dc2:	490f      	ldr	r1, [pc, #60]	@ (8006e00 <HAL_RCC_GetHCLKFreq+0x54>)
 8006dc4:	5ccb      	ldrb	r3, [r1, r3]
 8006dc6:	f003 031f 	and.w	r3, r3, #31
 8006dca:	fa22 f303 	lsr.w	r3, r2, r3
 8006dce:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8006dfc <HAL_RCC_GetHCLKFreq+0x50>)
 8006dd2:	699b      	ldr	r3, [r3, #24]
 8006dd4:	f003 030f 	and.w	r3, r3, #15
 8006dd8:	4a09      	ldr	r2, [pc, #36]	@ (8006e00 <HAL_RCC_GetHCLKFreq+0x54>)
 8006dda:	5cd3      	ldrb	r3, [r2, r3]
 8006ddc:	f003 031f 	and.w	r3, r3, #31
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	fa22 f303 	lsr.w	r3, r2, r3
 8006de6:	4a07      	ldr	r2, [pc, #28]	@ (8006e04 <HAL_RCC_GetHCLKFreq+0x58>)
 8006de8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006dea:	4a07      	ldr	r2, [pc, #28]	@ (8006e08 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006df0:	4b04      	ldr	r3, [pc, #16]	@ (8006e04 <HAL_RCC_GetHCLKFreq+0x58>)
 8006df2:	681b      	ldr	r3, [r3, #0]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3708      	adds	r7, #8
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	58024400 	.word	0x58024400
 8006e00:	080120ac 	.word	0x080120ac
 8006e04:	24000004 	.word	0x24000004
 8006e08:	24000000 	.word	0x24000000

08006e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006e10:	f7ff ffcc 	bl	8006dac <HAL_RCC_GetHCLKFreq>
 8006e14:	4602      	mov	r2, r0
 8006e16:	4b06      	ldr	r3, [pc, #24]	@ (8006e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e18:	69db      	ldr	r3, [r3, #28]
 8006e1a:	091b      	lsrs	r3, r3, #4
 8006e1c:	f003 0307 	and.w	r3, r3, #7
 8006e20:	4904      	ldr	r1, [pc, #16]	@ (8006e34 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006e22:	5ccb      	ldrb	r3, [r1, r3]
 8006e24:	f003 031f 	and.w	r3, r3, #31
 8006e28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	bd80      	pop	{r7, pc}
 8006e30:	58024400 	.word	0x58024400
 8006e34:	080120ac 	.word	0x080120ac

08006e38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006e3c:	f7ff ffb6 	bl	8006dac <HAL_RCC_GetHCLKFreq>
 8006e40:	4602      	mov	r2, r0
 8006e42:	4b06      	ldr	r3, [pc, #24]	@ (8006e5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e44:	69db      	ldr	r3, [r3, #28]
 8006e46:	0a1b      	lsrs	r3, r3, #8
 8006e48:	f003 0307 	and.w	r3, r3, #7
 8006e4c:	4904      	ldr	r1, [pc, #16]	@ (8006e60 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006e4e:	5ccb      	ldrb	r3, [r1, r3]
 8006e50:	f003 031f 	and.w	r3, r3, #31
 8006e54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006e58:	4618      	mov	r0, r3
 8006e5a:	bd80      	pop	{r7, pc}
 8006e5c:	58024400 	.word	0x58024400
 8006e60:	080120ac 	.word	0x080120ac

08006e64 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e68:	b0ca      	sub	sp, #296	@ 0x128
 8006e6a:	af00      	add	r7, sp, #0
 8006e6c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006e70:	2300      	movs	r3, #0
 8006e72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006e76:	2300      	movs	r3, #0
 8006e78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e84:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8006e88:	2500      	movs	r5, #0
 8006e8a:	ea54 0305 	orrs.w	r3, r4, r5
 8006e8e:	d049      	beq.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8006e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006e94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006e96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006e9a:	d02f      	beq.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8006e9c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006ea0:	d828      	bhi.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006ea2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006ea6:	d01a      	beq.n	8006ede <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8006ea8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006eac:	d822      	bhi.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d003      	beq.n	8006eba <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006eb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006eb6:	d007      	beq.n	8006ec8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8006eb8:	e01c      	b.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006eba:	4bb8      	ldr	r3, [pc, #736]	@ (800719c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ebe:	4ab7      	ldr	r2, [pc, #732]	@ (800719c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006ec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006ec4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ec6:	e01a      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ecc:	3308      	adds	r3, #8
 8006ece:	2102      	movs	r1, #2
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f001 fc8f 	bl	80087f4 <RCCEx_PLL2_Config>
 8006ed6:	4603      	mov	r3, r0
 8006ed8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006edc:	e00f      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006ede:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ee2:	3328      	adds	r3, #40	@ 0x28
 8006ee4:	2102      	movs	r1, #2
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f001 fd36 	bl	8008958 <RCCEx_PLL3_Config>
 8006eec:	4603      	mov	r3, r0
 8006eee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8006ef2:	e004      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006efa:	e000      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8006efc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006efe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10a      	bne.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006f06:	4ba5      	ldr	r3, [pc, #660]	@ (800719c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f0a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006f14:	4aa1      	ldr	r2, [pc, #644]	@ (800719c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f16:	430b      	orrs	r3, r1
 8006f18:	6513      	str	r3, [r2, #80]	@ 0x50
 8006f1a:	e003      	b.n	8006f24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006f20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006f24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8006f30:	f04f 0900 	mov.w	r9, #0
 8006f34:	ea58 0309 	orrs.w	r3, r8, r9
 8006f38:	d047      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8006f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f40:	2b04      	cmp	r3, #4
 8006f42:	d82a      	bhi.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8006f44:	a201      	add	r2, pc, #4	@ (adr r2, 8006f4c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8006f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4a:	bf00      	nop
 8006f4c:	08006f61 	.word	0x08006f61
 8006f50:	08006f6f 	.word	0x08006f6f
 8006f54:	08006f85 	.word	0x08006f85
 8006f58:	08006fa3 	.word	0x08006fa3
 8006f5c:	08006fa3 	.word	0x08006fa3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f60:	4b8e      	ldr	r3, [pc, #568]	@ (800719c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f64:	4a8d      	ldr	r2, [pc, #564]	@ (800719c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006f66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006f6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f6c:	e01a      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006f6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f72:	3308      	adds	r3, #8
 8006f74:	2100      	movs	r1, #0
 8006f76:	4618      	mov	r0, r3
 8006f78:	f001 fc3c 	bl	80087f4 <RCCEx_PLL2_Config>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f82:	e00f      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006f88:	3328      	adds	r3, #40	@ 0x28
 8006f8a:	2100      	movs	r1, #0
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f001 fce3 	bl	8008958 <RCCEx_PLL3_Config>
 8006f92:	4603      	mov	r3, r0
 8006f94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8006f98:	e004      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8006fa0:	e000      	b.n	8006fa4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8006fa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006fa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d10a      	bne.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006fac:	4b7b      	ldr	r3, [pc, #492]	@ (800719c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fb0:	f023 0107 	bic.w	r1, r3, #7
 8006fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fba:	4a78      	ldr	r2, [pc, #480]	@ (800719c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8006fbc:	430b      	orrs	r3, r1
 8006fbe:	6513      	str	r3, [r2, #80]	@ 0x50
 8006fc0:	e003      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8006fc6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fd2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8006fd6:	f04f 0b00 	mov.w	fp, #0
 8006fda:	ea5a 030b 	orrs.w	r3, sl, fp
 8006fde:	d04c      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8006fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006fe4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006fe6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fea:	d030      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8006fec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ff0:	d829      	bhi.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006ff2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ff4:	d02d      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8006ff6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ff8:	d825      	bhi.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006ffa:	2b80      	cmp	r3, #128	@ 0x80
 8006ffc:	d018      	beq.n	8007030 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8006ffe:	2b80      	cmp	r3, #128	@ 0x80
 8007000:	d821      	bhi.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8007002:	2b00      	cmp	r3, #0
 8007004:	d002      	beq.n	800700c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8007006:	2b40      	cmp	r3, #64	@ 0x40
 8007008:	d007      	beq.n	800701a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800700a:	e01c      	b.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800700c:	4b63      	ldr	r3, [pc, #396]	@ (800719c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800700e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007010:	4a62      	ldr	r2, [pc, #392]	@ (800719c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007012:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007016:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007018:	e01c      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800701a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800701e:	3308      	adds	r3, #8
 8007020:	2100      	movs	r1, #0
 8007022:	4618      	mov	r0, r3
 8007024:	f001 fbe6 	bl	80087f4 <RCCEx_PLL2_Config>
 8007028:	4603      	mov	r3, r0
 800702a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800702e:	e011      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007034:	3328      	adds	r3, #40	@ 0x28
 8007036:	2100      	movs	r1, #0
 8007038:	4618      	mov	r0, r3
 800703a:	f001 fc8d 	bl	8008958 <RCCEx_PLL3_Config>
 800703e:	4603      	mov	r3, r0
 8007040:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8007044:	e006      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800704c:	e002      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800704e:	bf00      	nop
 8007050:	e000      	b.n	8007054 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007052:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007054:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10a      	bne.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800705c:	4b4f      	ldr	r3, [pc, #316]	@ (800719c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800705e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007060:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8007064:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007068:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800706a:	4a4c      	ldr	r2, [pc, #304]	@ (800719c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800706c:	430b      	orrs	r3, r1
 800706e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007070:	e003      	b.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007072:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007076:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800707a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800707e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007082:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8007086:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800708a:	2300      	movs	r3, #0
 800708c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8007090:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8007094:	460b      	mov	r3, r1
 8007096:	4313      	orrs	r3, r2
 8007098:	d053      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800709a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800709e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80070a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80070a6:	d035      	beq.n	8007114 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80070a8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80070ac:	d82e      	bhi.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80070ae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80070b2:	d031      	beq.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80070b4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80070b8:	d828      	bhi.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80070ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070be:	d01a      	beq.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80070c0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80070c4:	d822      	bhi.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d003      	beq.n	80070d2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80070ca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80070ce:	d007      	beq.n	80070e0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80070d0:	e01c      	b.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80070d2:	4b32      	ldr	r3, [pc, #200]	@ (800719c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d6:	4a31      	ldr	r2, [pc, #196]	@ (800719c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80070d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80070dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80070de:	e01c      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80070e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070e4:	3308      	adds	r3, #8
 80070e6:	2100      	movs	r1, #0
 80070e8:	4618      	mov	r0, r3
 80070ea:	f001 fb83 	bl	80087f4 <RCCEx_PLL2_Config>
 80070ee:	4603      	mov	r3, r0
 80070f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80070f4:	e011      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80070f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80070fa:	3328      	adds	r3, #40	@ 0x28
 80070fc:	2100      	movs	r1, #0
 80070fe:	4618      	mov	r0, r3
 8007100:	f001 fc2a 	bl	8008958 <RCCEx_PLL3_Config>
 8007104:	4603      	mov	r3, r0
 8007106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800710a:	e006      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007112:	e002      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007114:	bf00      	nop
 8007116:	e000      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8007118:	bf00      	nop
    }

    if (ret == HAL_OK)
 800711a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800711e:	2b00      	cmp	r3, #0
 8007120:	d10b      	bne.n	800713a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007122:	4b1e      	ldr	r3, [pc, #120]	@ (800719c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007124:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007126:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800712a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800712e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8007132:	4a1a      	ldr	r2, [pc, #104]	@ (800719c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007134:	430b      	orrs	r3, r1
 8007136:	6593      	str	r3, [r2, #88]	@ 0x58
 8007138:	e003      	b.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800713a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800713e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007142:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007146:	e9d3 2300 	ldrd	r2, r3, [r3]
 800714a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800714e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8007152:	2300      	movs	r3, #0
 8007154:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8007158:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800715c:	460b      	mov	r3, r1
 800715e:	4313      	orrs	r3, r2
 8007160:	d056      	beq.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007162:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007166:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800716a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800716e:	d038      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007170:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007174:	d831      	bhi.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007176:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800717a:	d034      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800717c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007180:	d82b      	bhi.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007182:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007186:	d01d      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007188:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800718c:	d825      	bhi.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x376>
 800718e:	2b00      	cmp	r3, #0
 8007190:	d006      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007192:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007196:	d00a      	beq.n	80071ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007198:	e01f      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x376>
 800719a:	bf00      	nop
 800719c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071a0:	4ba2      	ldr	r3, [pc, #648]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a4:	4aa1      	ldr	r2, [pc, #644]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80071aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071ac:	e01c      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80071ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071b2:	3308      	adds	r3, #8
 80071b4:	2100      	movs	r1, #0
 80071b6:	4618      	mov	r0, r3
 80071b8:	f001 fb1c 	bl	80087f4 <RCCEx_PLL2_Config>
 80071bc:	4603      	mov	r3, r0
 80071be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80071c2:	e011      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80071c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071c8:	3328      	adds	r3, #40	@ 0x28
 80071ca:	2100      	movs	r1, #0
 80071cc:	4618      	mov	r0, r3
 80071ce:	f001 fbc3 	bl	8008958 <RCCEx_PLL3_Config>
 80071d2:	4603      	mov	r3, r0
 80071d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80071d8:	e006      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80071e0:	e002      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80071e2:	bf00      	nop
 80071e4:	e000      	b.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80071e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80071e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d10b      	bne.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80071f0:	4b8e      	ldr	r3, [pc, #568]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80071f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80071f4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80071f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80071fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007200:	4a8a      	ldr	r2, [pc, #552]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007202:	430b      	orrs	r3, r1
 8007204:	6593      	str	r3, [r2, #88]	@ 0x58
 8007206:	e003      	b.n	8007210 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007208:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800720c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007210:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007218:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800721c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8007220:	2300      	movs	r3, #0
 8007222:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8007226:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800722a:	460b      	mov	r3, r1
 800722c:	4313      	orrs	r3, r2
 800722e:	d03a      	beq.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007230:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007236:	2b30      	cmp	r3, #48	@ 0x30
 8007238:	d01f      	beq.n	800727a <HAL_RCCEx_PeriphCLKConfig+0x416>
 800723a:	2b30      	cmp	r3, #48	@ 0x30
 800723c:	d819      	bhi.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800723e:	2b20      	cmp	r3, #32
 8007240:	d00c      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007242:	2b20      	cmp	r3, #32
 8007244:	d815      	bhi.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007246:	2b00      	cmp	r3, #0
 8007248:	d019      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800724a:	2b10      	cmp	r3, #16
 800724c:	d111      	bne.n	8007272 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800724e:	4b77      	ldr	r3, [pc, #476]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007252:	4a76      	ldr	r2, [pc, #472]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007254:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007258:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800725a:	e011      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800725c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007260:	3308      	adds	r3, #8
 8007262:	2102      	movs	r1, #2
 8007264:	4618      	mov	r0, r3
 8007266:	f001 fac5 	bl	80087f4 <RCCEx_PLL2_Config>
 800726a:	4603      	mov	r3, r0
 800726c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007270:	e006      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007272:	2301      	movs	r3, #1
 8007274:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007278:	e002      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800727a:	bf00      	nop
 800727c:	e000      	b.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800727e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007280:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10a      	bne.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007288:	4b68      	ldr	r3, [pc, #416]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800728a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800728c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8007290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007296:	4a65      	ldr	r2, [pc, #404]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007298:	430b      	orrs	r3, r1
 800729a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800729c:	e003      	b.n	80072a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800729e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80072a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80072a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ae:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80072b2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80072b6:	2300      	movs	r3, #0
 80072b8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80072bc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80072c0:	460b      	mov	r3, r1
 80072c2:	4313      	orrs	r3, r2
 80072c4:	d051      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80072c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80072ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072d0:	d035      	beq.n	800733e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80072d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80072d6:	d82e      	bhi.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80072d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80072dc:	d031      	beq.n	8007342 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80072de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80072e2:	d828      	bhi.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80072e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072e8:	d01a      	beq.n	8007320 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80072ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072ee:	d822      	bhi.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d003      	beq.n	80072fc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80072f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072f8:	d007      	beq.n	800730a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80072fa:	e01c      	b.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80072fc:	4b4b      	ldr	r3, [pc, #300]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80072fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007300:	4a4a      	ldr	r2, [pc, #296]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007302:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007306:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007308:	e01c      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800730a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800730e:	3308      	adds	r3, #8
 8007310:	2100      	movs	r1, #0
 8007312:	4618      	mov	r0, r3
 8007314:	f001 fa6e 	bl	80087f4 <RCCEx_PLL2_Config>
 8007318:	4603      	mov	r3, r0
 800731a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800731e:	e011      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007320:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007324:	3328      	adds	r3, #40	@ 0x28
 8007326:	2100      	movs	r1, #0
 8007328:	4618      	mov	r0, r3
 800732a:	f001 fb15 	bl	8008958 <RCCEx_PLL3_Config>
 800732e:	4603      	mov	r3, r0
 8007330:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007334:	e006      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800733c:	e002      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800733e:	bf00      	nop
 8007340:	e000      	b.n	8007344 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007342:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007344:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007348:	2b00      	cmp	r3, #0
 800734a:	d10a      	bne.n	8007362 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800734c:	4b37      	ldr	r3, [pc, #220]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800734e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007350:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8007354:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007358:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800735a:	4a34      	ldr	r2, [pc, #208]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800735c:	430b      	orrs	r3, r1
 800735e:	6513      	str	r3, [r2, #80]	@ 0x50
 8007360:	e003      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007362:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007366:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800736a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800736e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007372:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8007376:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800737a:	2300      	movs	r3, #0
 800737c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8007380:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8007384:	460b      	mov	r3, r1
 8007386:	4313      	orrs	r3, r2
 8007388:	d056      	beq.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800738a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800738e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007390:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007394:	d033      	beq.n	80073fe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007396:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800739a:	d82c      	bhi.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800739c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80073a0:	d02f      	beq.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80073a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80073a6:	d826      	bhi.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80073a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80073ac:	d02b      	beq.n	8007406 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80073ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80073b2:	d820      	bhi.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80073b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073b8:	d012      	beq.n	80073e0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80073ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80073be:	d81a      	bhi.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d022      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80073c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073c8:	d115      	bne.n	80073f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80073ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073ce:	3308      	adds	r3, #8
 80073d0:	2101      	movs	r1, #1
 80073d2:	4618      	mov	r0, r3
 80073d4:	f001 fa0e 	bl	80087f4 <RCCEx_PLL2_Config>
 80073d8:	4603      	mov	r3, r0
 80073da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80073de:	e015      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80073e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80073e4:	3328      	adds	r3, #40	@ 0x28
 80073e6:	2101      	movs	r1, #1
 80073e8:	4618      	mov	r0, r3
 80073ea:	f001 fab5 	bl	8008958 <RCCEx_PLL3_Config>
 80073ee:	4603      	mov	r3, r0
 80073f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80073f4:	e00a      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80073fc:	e006      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80073fe:	bf00      	nop
 8007400:	e004      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007402:	bf00      	nop
 8007404:	e002      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007406:	bf00      	nop
 8007408:	e000      	b.n	800740c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800740a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800740c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007410:	2b00      	cmp	r3, #0
 8007412:	d10d      	bne.n	8007430 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007414:	4b05      	ldr	r3, [pc, #20]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007416:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007418:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800741c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007420:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007422:	4a02      	ldr	r2, [pc, #8]	@ (800742c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007424:	430b      	orrs	r3, r1
 8007426:	6513      	str	r3, [r2, #80]	@ 0x50
 8007428:	e006      	b.n	8007438 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800742a:	bf00      	nop
 800742c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007430:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007434:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800743c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007440:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8007444:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007448:	2300      	movs	r3, #0
 800744a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800744e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8007452:	460b      	mov	r3, r1
 8007454:	4313      	orrs	r3, r2
 8007456:	d055      	beq.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800745c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007460:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007464:	d033      	beq.n	80074ce <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007466:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800746a:	d82c      	bhi.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800746c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007470:	d02f      	beq.n	80074d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007476:	d826      	bhi.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007478:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800747c:	d02b      	beq.n	80074d6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800747e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007482:	d820      	bhi.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007484:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007488:	d012      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800748a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800748e:	d81a      	bhi.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007490:	2b00      	cmp	r3, #0
 8007492:	d022      	beq.n	80074da <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007494:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007498:	d115      	bne.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800749a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800749e:	3308      	adds	r3, #8
 80074a0:	2101      	movs	r1, #1
 80074a2:	4618      	mov	r0, r3
 80074a4:	f001 f9a6 	bl	80087f4 <RCCEx_PLL2_Config>
 80074a8:	4603      	mov	r3, r0
 80074aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80074ae:	e015      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80074b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074b4:	3328      	adds	r3, #40	@ 0x28
 80074b6:	2101      	movs	r1, #1
 80074b8:	4618      	mov	r0, r3
 80074ba:	f001 fa4d 	bl	8008958 <RCCEx_PLL3_Config>
 80074be:	4603      	mov	r3, r0
 80074c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80074c4:	e00a      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80074cc:	e006      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80074ce:	bf00      	nop
 80074d0:	e004      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80074d2:	bf00      	nop
 80074d4:	e002      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80074d6:	bf00      	nop
 80074d8:	e000      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80074da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80074dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10b      	bne.n	80074fc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80074e4:	4ba3      	ldr	r3, [pc, #652]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074e8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80074ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80074f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80074f4:	4a9f      	ldr	r2, [pc, #636]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80074f6:	430b      	orrs	r3, r1
 80074f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80074fa:	e003      	b.n	8007504 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007500:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007504:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8007510:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007514:	2300      	movs	r3, #0
 8007516:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800751a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800751e:	460b      	mov	r3, r1
 8007520:	4313      	orrs	r3, r2
 8007522:	d037      	beq.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007524:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007528:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800752a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800752e:	d00e      	beq.n	800754e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007530:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007534:	d816      	bhi.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007536:	2b00      	cmp	r3, #0
 8007538:	d018      	beq.n	800756c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800753a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800753e:	d111      	bne.n	8007564 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007540:	4b8c      	ldr	r3, [pc, #560]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007544:	4a8b      	ldr	r2, [pc, #556]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007546:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800754a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800754c:	e00f      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800754e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007552:	3308      	adds	r3, #8
 8007554:	2101      	movs	r1, #1
 8007556:	4618      	mov	r0, r3
 8007558:	f001 f94c 	bl	80087f4 <RCCEx_PLL2_Config>
 800755c:	4603      	mov	r3, r0
 800755e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007562:	e004      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007564:	2301      	movs	r3, #1
 8007566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800756a:	e000      	b.n	800756e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800756c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800756e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007572:	2b00      	cmp	r3, #0
 8007574:	d10a      	bne.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007576:	4b7f      	ldr	r3, [pc, #508]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007578:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800757a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800757e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007584:	4a7b      	ldr	r2, [pc, #492]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007586:	430b      	orrs	r3, r1
 8007588:	6513      	str	r3, [r2, #80]	@ 0x50
 800758a:	e003      	b.n	8007594 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800758c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007590:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007594:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800759c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 80075a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80075a4:	2300      	movs	r3, #0
 80075a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80075aa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80075ae:	460b      	mov	r3, r1
 80075b0:	4313      	orrs	r3, r2
 80075b2:	d039      	beq.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80075b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80075ba:	2b03      	cmp	r3, #3
 80075bc:	d81c      	bhi.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80075be:	a201      	add	r2, pc, #4	@ (adr r2, 80075c4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80075c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075c4:	08007601 	.word	0x08007601
 80075c8:	080075d5 	.word	0x080075d5
 80075cc:	080075e3 	.word	0x080075e3
 80075d0:	08007601 	.word	0x08007601
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075d4:	4b67      	ldr	r3, [pc, #412]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d8:	4a66      	ldr	r2, [pc, #408]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80075da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80075de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80075e0:	e00f      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80075e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80075e6:	3308      	adds	r3, #8
 80075e8:	2102      	movs	r1, #2
 80075ea:	4618      	mov	r0, r3
 80075ec:	f001 f902 	bl	80087f4 <RCCEx_PLL2_Config>
 80075f0:	4603      	mov	r3, r0
 80075f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80075f6:	e004      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80075f8:	2301      	movs	r3, #1
 80075fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80075fe:	e000      	b.n	8007602 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007600:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007602:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007606:	2b00      	cmp	r3, #0
 8007608:	d10a      	bne.n	8007620 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800760a:	4b5a      	ldr	r3, [pc, #360]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800760c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800760e:	f023 0103 	bic.w	r1, r3, #3
 8007612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007616:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007618:	4a56      	ldr	r2, [pc, #344]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800761a:	430b      	orrs	r3, r1
 800761c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800761e:	e003      	b.n	8007628 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007620:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007624:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800762c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007630:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8007634:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007638:	2300      	movs	r3, #0
 800763a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800763e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8007642:	460b      	mov	r3, r1
 8007644:	4313      	orrs	r3, r2
 8007646:	f000 809f 	beq.w	8007788 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800764a:	4b4b      	ldr	r3, [pc, #300]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a4a      	ldr	r2, [pc, #296]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007654:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007656:	f7fa fc5d 	bl	8001f14 <HAL_GetTick>
 800765a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800765e:	e00b      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007660:	f7fa fc58 	bl	8001f14 <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800766a:	1ad3      	subs	r3, r2, r3
 800766c:	2b64      	cmp	r3, #100	@ 0x64
 800766e:	d903      	bls.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007670:	2303      	movs	r3, #3
 8007672:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007676:	e005      	b.n	8007684 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007678:	4b3f      	ldr	r3, [pc, #252]	@ (8007778 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007680:	2b00      	cmp	r3, #0
 8007682:	d0ed      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007684:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007688:	2b00      	cmp	r3, #0
 800768a:	d179      	bne.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800768c:	4b39      	ldr	r3, [pc, #228]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800768e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007690:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007694:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007698:	4053      	eors	r3, r2
 800769a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d015      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80076a2:	4b34      	ldr	r3, [pc, #208]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076aa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80076ae:	4b31      	ldr	r3, [pc, #196]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076b2:	4a30      	ldr	r2, [pc, #192]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076b8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80076ba:	4b2e      	ldr	r3, [pc, #184]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80076be:	4a2d      	ldr	r2, [pc, #180]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076c4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80076c6:	4a2b      	ldr	r2, [pc, #172]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80076c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80076cc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80076ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80076d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80076d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076da:	d118      	bne.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076dc:	f7fa fc1a 	bl	8001f14 <HAL_GetTick>
 80076e0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80076e4:	e00d      	b.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076e6:	f7fa fc15 	bl	8001f14 <HAL_GetTick>
 80076ea:	4602      	mov	r2, r0
 80076ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80076f0:	1ad2      	subs	r2, r2, r3
 80076f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d903      	bls.n	8007702 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8007700:	e005      	b.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007702:	4b1c      	ldr	r3, [pc, #112]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007704:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007706:	f003 0302 	and.w	r3, r3, #2
 800770a:	2b00      	cmp	r3, #0
 800770c:	d0eb      	beq.n	80076e6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800770e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007712:	2b00      	cmp	r3, #0
 8007714:	d129      	bne.n	800776a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800771a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800771e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007722:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007726:	d10e      	bne.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007728:	4b12      	ldr	r3, [pc, #72]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8007730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007734:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007738:	091a      	lsrs	r2, r3, #4
 800773a:	4b10      	ldr	r3, [pc, #64]	@ (800777c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800773c:	4013      	ands	r3, r2
 800773e:	4a0d      	ldr	r2, [pc, #52]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007740:	430b      	orrs	r3, r1
 8007742:	6113      	str	r3, [r2, #16]
 8007744:	e005      	b.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8007746:	4b0b      	ldr	r3, [pc, #44]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	4a0a      	ldr	r2, [pc, #40]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800774c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007750:	6113      	str	r3, [r2, #16]
 8007752:	4b08      	ldr	r3, [pc, #32]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007754:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8007756:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800775a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800775e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007762:	4a04      	ldr	r2, [pc, #16]	@ (8007774 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007764:	430b      	orrs	r3, r1
 8007766:	6713      	str	r3, [r2, #112]	@ 0x70
 8007768:	e00e      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800776a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800776e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8007772:	e009      	b.n	8007788 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8007774:	58024400 	.word	0x58024400
 8007778:	58024800 	.word	0x58024800
 800777c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007780:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007784:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007788:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800778c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007790:	f002 0301 	and.w	r3, r2, #1
 8007794:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007798:	2300      	movs	r3, #0
 800779a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800779e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80077a2:	460b      	mov	r3, r1
 80077a4:	4313      	orrs	r3, r2
 80077a6:	f000 8089 	beq.w	80078bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80077aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80077ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80077b0:	2b28      	cmp	r3, #40	@ 0x28
 80077b2:	d86b      	bhi.n	800788c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80077b4:	a201      	add	r2, pc, #4	@ (adr r2, 80077bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80077b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ba:	bf00      	nop
 80077bc:	08007895 	.word	0x08007895
 80077c0:	0800788d 	.word	0x0800788d
 80077c4:	0800788d 	.word	0x0800788d
 80077c8:	0800788d 	.word	0x0800788d
 80077cc:	0800788d 	.word	0x0800788d
 80077d0:	0800788d 	.word	0x0800788d
 80077d4:	0800788d 	.word	0x0800788d
 80077d8:	0800788d 	.word	0x0800788d
 80077dc:	08007861 	.word	0x08007861
 80077e0:	0800788d 	.word	0x0800788d
 80077e4:	0800788d 	.word	0x0800788d
 80077e8:	0800788d 	.word	0x0800788d
 80077ec:	0800788d 	.word	0x0800788d
 80077f0:	0800788d 	.word	0x0800788d
 80077f4:	0800788d 	.word	0x0800788d
 80077f8:	0800788d 	.word	0x0800788d
 80077fc:	08007877 	.word	0x08007877
 8007800:	0800788d 	.word	0x0800788d
 8007804:	0800788d 	.word	0x0800788d
 8007808:	0800788d 	.word	0x0800788d
 800780c:	0800788d 	.word	0x0800788d
 8007810:	0800788d 	.word	0x0800788d
 8007814:	0800788d 	.word	0x0800788d
 8007818:	0800788d 	.word	0x0800788d
 800781c:	08007895 	.word	0x08007895
 8007820:	0800788d 	.word	0x0800788d
 8007824:	0800788d 	.word	0x0800788d
 8007828:	0800788d 	.word	0x0800788d
 800782c:	0800788d 	.word	0x0800788d
 8007830:	0800788d 	.word	0x0800788d
 8007834:	0800788d 	.word	0x0800788d
 8007838:	0800788d 	.word	0x0800788d
 800783c:	08007895 	.word	0x08007895
 8007840:	0800788d 	.word	0x0800788d
 8007844:	0800788d 	.word	0x0800788d
 8007848:	0800788d 	.word	0x0800788d
 800784c:	0800788d 	.word	0x0800788d
 8007850:	0800788d 	.word	0x0800788d
 8007854:	0800788d 	.word	0x0800788d
 8007858:	0800788d 	.word	0x0800788d
 800785c:	08007895 	.word	0x08007895
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007864:	3308      	adds	r3, #8
 8007866:	2101      	movs	r1, #1
 8007868:	4618      	mov	r0, r3
 800786a:	f000 ffc3 	bl	80087f4 <RCCEx_PLL2_Config>
 800786e:	4603      	mov	r3, r0
 8007870:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8007874:	e00f      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800787a:	3328      	adds	r3, #40	@ 0x28
 800787c:	2101      	movs	r1, #1
 800787e:	4618      	mov	r0, r3
 8007880:	f001 f86a 	bl	8008958 <RCCEx_PLL3_Config>
 8007884:	4603      	mov	r3, r0
 8007886:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800788a:	e004      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007892:	e000      	b.n	8007896 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8007894:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007896:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800789a:	2b00      	cmp	r3, #0
 800789c:	d10a      	bne.n	80078b4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800789e:	4bbf      	ldr	r3, [pc, #764]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078a2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80078a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80078ac:	4abb      	ldr	r2, [pc, #748]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80078ae:	430b      	orrs	r3, r1
 80078b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80078b2:	e003      	b.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80078b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80078bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078c4:	f002 0302 	and.w	r3, r2, #2
 80078c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80078cc:	2300      	movs	r3, #0
 80078ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80078d2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80078d6:	460b      	mov	r3, r1
 80078d8:	4313      	orrs	r3, r2
 80078da:	d041      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80078dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80078e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80078e2:	2b05      	cmp	r3, #5
 80078e4:	d824      	bhi.n	8007930 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80078e6:	a201      	add	r2, pc, #4	@ (adr r2, 80078ec <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80078e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ec:	08007939 	.word	0x08007939
 80078f0:	08007905 	.word	0x08007905
 80078f4:	0800791b 	.word	0x0800791b
 80078f8:	08007939 	.word	0x08007939
 80078fc:	08007939 	.word	0x08007939
 8007900:	08007939 	.word	0x08007939
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007904:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007908:	3308      	adds	r3, #8
 800790a:	2101      	movs	r1, #1
 800790c:	4618      	mov	r0, r3
 800790e:	f000 ff71 	bl	80087f4 <RCCEx_PLL2_Config>
 8007912:	4603      	mov	r3, r0
 8007914:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8007918:	e00f      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800791a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800791e:	3328      	adds	r3, #40	@ 0x28
 8007920:	2101      	movs	r1, #1
 8007922:	4618      	mov	r0, r3
 8007924:	f001 f818 	bl	8008958 <RCCEx_PLL3_Config>
 8007928:	4603      	mov	r3, r0
 800792a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800792e:	e004      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007930:	2301      	movs	r3, #1
 8007932:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007936:	e000      	b.n	800793a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8007938:	bf00      	nop
    }

    if (ret == HAL_OK)
 800793a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800793e:	2b00      	cmp	r3, #0
 8007940:	d10a      	bne.n	8007958 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007942:	4b96      	ldr	r3, [pc, #600]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007946:	f023 0107 	bic.w	r1, r3, #7
 800794a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800794e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007950:	4a92      	ldr	r2, [pc, #584]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007952:	430b      	orrs	r3, r1
 8007954:	6553      	str	r3, [r2, #84]	@ 0x54
 8007956:	e003      	b.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007958:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800795c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007968:	f002 0304 	and.w	r3, r2, #4
 800796c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007970:	2300      	movs	r3, #0
 8007972:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007976:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800797a:	460b      	mov	r3, r1
 800797c:	4313      	orrs	r3, r2
 800797e:	d044      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8007980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007984:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007988:	2b05      	cmp	r3, #5
 800798a:	d825      	bhi.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800798c:	a201      	add	r2, pc, #4	@ (adr r2, 8007994 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800798e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007992:	bf00      	nop
 8007994:	080079e1 	.word	0x080079e1
 8007998:	080079ad 	.word	0x080079ad
 800799c:	080079c3 	.word	0x080079c3
 80079a0:	080079e1 	.word	0x080079e1
 80079a4:	080079e1 	.word	0x080079e1
 80079a8:	080079e1 	.word	0x080079e1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80079ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079b0:	3308      	adds	r3, #8
 80079b2:	2101      	movs	r1, #1
 80079b4:	4618      	mov	r0, r3
 80079b6:	f000 ff1d 	bl	80087f4 <RCCEx_PLL2_Config>
 80079ba:	4603      	mov	r3, r0
 80079bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80079c0:	e00f      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80079c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079c6:	3328      	adds	r3, #40	@ 0x28
 80079c8:	2101      	movs	r1, #1
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 ffc4 	bl	8008958 <RCCEx_PLL3_Config>
 80079d0:	4603      	mov	r3, r0
 80079d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80079d6:	e004      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80079de:	e000      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80079e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10b      	bne.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80079ea:	4b6c      	ldr	r3, [pc, #432]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80079ee:	f023 0107 	bic.w	r1, r3, #7
 80079f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80079f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80079fa:	4a68      	ldr	r2, [pc, #416]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80079fc:	430b      	orrs	r3, r1
 80079fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a00:	e003      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007a06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a12:	f002 0320 	and.w	r3, r2, #32
 8007a16:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007a20:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007a24:	460b      	mov	r3, r1
 8007a26:	4313      	orrs	r3, r2
 8007a28:	d055      	beq.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8007a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007a32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a36:	d033      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8007a38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007a3c:	d82c      	bhi.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a42:	d02f      	beq.n	8007aa4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8007a44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a48:	d826      	bhi.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007a4a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007a4e:	d02b      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8007a50:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8007a54:	d820      	bhi.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007a56:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a5a:	d012      	beq.n	8007a82 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8007a5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007a60:	d81a      	bhi.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d022      	beq.n	8007aac <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8007a66:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007a6a:	d115      	bne.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a70:	3308      	adds	r3, #8
 8007a72:	2100      	movs	r1, #0
 8007a74:	4618      	mov	r0, r3
 8007a76:	f000 febd 	bl	80087f4 <RCCEx_PLL2_Config>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007a80:	e015      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007a82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007a86:	3328      	adds	r3, #40	@ 0x28
 8007a88:	2102      	movs	r1, #2
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f000 ff64 	bl	8008958 <RCCEx_PLL3_Config>
 8007a90:	4603      	mov	r3, r0
 8007a92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8007a96:	e00a      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007a9e:	e006      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007aa0:	bf00      	nop
 8007aa2:	e004      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007aa4:	bf00      	nop
 8007aa6:	e002      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007aa8:	bf00      	nop
 8007aaa:	e000      	b.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8007aac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007aae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d10b      	bne.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ab6:	4b39      	ldr	r3, [pc, #228]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8007abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ac6:	4a35      	ldr	r2, [pc, #212]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007ac8:	430b      	orrs	r3, r1
 8007aca:	6553      	str	r3, [r2, #84]	@ 0x54
 8007acc:	e003      	b.n	8007ad6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ace:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ad2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ade:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8007ae2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8007aec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8007af0:	460b      	mov	r3, r1
 8007af2:	4313      	orrs	r3, r2
 8007af4:	d058      	beq.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8007af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007afa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007afe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007b02:	d033      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8007b04:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8007b08:	d82c      	bhi.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007b0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b0e:	d02f      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8007b10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b14:	d826      	bhi.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007b16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b1a:	d02b      	beq.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8007b1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007b20:	d820      	bhi.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007b22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b26:	d012      	beq.n	8007b4e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8007b28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b2c:	d81a      	bhi.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d022      	beq.n	8007b78 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8007b32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b36:	d115      	bne.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b3c:	3308      	adds	r3, #8
 8007b3e:	2100      	movs	r1, #0
 8007b40:	4618      	mov	r0, r3
 8007b42:	f000 fe57 	bl	80087f4 <RCCEx_PLL2_Config>
 8007b46:	4603      	mov	r3, r0
 8007b48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007b4c:	e015      	b.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007b4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b52:	3328      	adds	r3, #40	@ 0x28
 8007b54:	2102      	movs	r1, #2
 8007b56:	4618      	mov	r0, r3
 8007b58:	f000 fefe 	bl	8008958 <RCCEx_PLL3_Config>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8007b62:	e00a      	b.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007b64:	2301      	movs	r3, #1
 8007b66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007b6a:	e006      	b.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007b6c:	bf00      	nop
 8007b6e:	e004      	b.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007b70:	bf00      	nop
 8007b72:	e002      	b.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007b74:	bf00      	nop
 8007b76:	e000      	b.n	8007b7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8007b78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d10e      	bne.n	8007ba0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007b82:	4b06      	ldr	r3, [pc, #24]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007b86:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8007b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007b8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007b92:	4a02      	ldr	r2, [pc, #8]	@ (8007b9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8007b94:	430b      	orrs	r3, r1
 8007b96:	6593      	str	r3, [r2, #88]	@ 0x58
 8007b98:	e006      	b.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8007b9a:	bf00      	nop
 8007b9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ba0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ba4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007ba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bb0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8007bb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007bb8:	2300      	movs	r3, #0
 8007bba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007bbe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8007bc2:	460b      	mov	r3, r1
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	d055      	beq.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8007bc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007bcc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007bd0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007bd4:	d033      	beq.n	8007c3e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8007bd6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8007bda:	d82c      	bhi.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007bdc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007be0:	d02f      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8007be2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007be6:	d826      	bhi.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007be8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007bec:	d02b      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8007bee:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8007bf2:	d820      	bhi.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007bf4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007bf8:	d012      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8007bfa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8007bfe:	d81a      	bhi.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d022      	beq.n	8007c4a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8007c04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c08:	d115      	bne.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c0e:	3308      	adds	r3, #8
 8007c10:	2100      	movs	r1, #0
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 fdee 	bl	80087f4 <RCCEx_PLL2_Config>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007c1e:	e015      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007c20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c24:	3328      	adds	r3, #40	@ 0x28
 8007c26:	2102      	movs	r1, #2
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f000 fe95 	bl	8008958 <RCCEx_PLL3_Config>
 8007c2e:	4603      	mov	r3, r0
 8007c30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8007c34:	e00a      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007c36:	2301      	movs	r3, #1
 8007c38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007c3c:	e006      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007c3e:	bf00      	nop
 8007c40:	e004      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007c42:	bf00      	nop
 8007c44:	e002      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007c46:	bf00      	nop
 8007c48:	e000      	b.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8007c4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d10b      	bne.n	8007c6c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007c54:	4ba1      	ldr	r3, [pc, #644]	@ (8007edc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c58:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8007c5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8007c64:	4a9d      	ldr	r2, [pc, #628]	@ (8007edc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007c66:	430b      	orrs	r3, r1
 8007c68:	6593      	str	r3, [r2, #88]	@ 0x58
 8007c6a:	e003      	b.n	8007c74 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007c70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007c74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7c:	f002 0308 	and.w	r3, r2, #8
 8007c80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007c84:	2300      	movs	r3, #0
 8007c86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007c8a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8007c8e:	460b      	mov	r3, r1
 8007c90:	4313      	orrs	r3, r2
 8007c92:	d01e      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8007c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007ca0:	d10c      	bne.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ca6:	3328      	adds	r3, #40	@ 0x28
 8007ca8:	2102      	movs	r1, #2
 8007caa:	4618      	mov	r0, r3
 8007cac:	f000 fe54 	bl	8008958 <RCCEx_PLL3_Config>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d002      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8007cbc:	4b87      	ldr	r3, [pc, #540]	@ (8007edc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cc0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ccc:	4a83      	ldr	r2, [pc, #524]	@ (8007edc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007cce:	430b      	orrs	r3, r1
 8007cd0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cda:	f002 0310 	and.w	r3, r2, #16
 8007cde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007ce8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8007cec:	460b      	mov	r3, r1
 8007cee:	4313      	orrs	r3, r2
 8007cf0:	d01e      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8007cf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007cf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007cfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007cfe:	d10c      	bne.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d04:	3328      	adds	r3, #40	@ 0x28
 8007d06:	2102      	movs	r1, #2
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f000 fe25 	bl	8008958 <RCCEx_PLL3_Config>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d002      	beq.n	8007d1a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007d1a:	4b70      	ldr	r3, [pc, #448]	@ (8007edc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d1e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007d22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8007d2a:	4a6c      	ldr	r2, [pc, #432]	@ (8007edc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007d2c:	430b      	orrs	r3, r1
 8007d2e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d38:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8007d3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007d40:	2300      	movs	r3, #0
 8007d42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d46:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8007d4a:	460b      	mov	r3, r1
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	d03e      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8007d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007d58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d5c:	d022      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8007d5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8007d62:	d81b      	bhi.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d003      	beq.n	8007d70 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8007d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007d6c:	d00b      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8007d6e:	e015      	b.n	8007d9c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d74:	3308      	adds	r3, #8
 8007d76:	2100      	movs	r1, #0
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f000 fd3b 	bl	80087f4 <RCCEx_PLL2_Config>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007d84:	e00f      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8007d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007d8a:	3328      	adds	r3, #40	@ 0x28
 8007d8c:	2102      	movs	r1, #2
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f000 fde2 	bl	8008958 <RCCEx_PLL3_Config>
 8007d94:	4603      	mov	r3, r0
 8007d96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8007d9a:	e004      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007da2:	e000      	b.n	8007da6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8007da4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007da6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d10b      	bne.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007dae:	4b4b      	ldr	r3, [pc, #300]	@ (8007edc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007db0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007db2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8007db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007dbe:	4a47      	ldr	r2, [pc, #284]	@ (8007edc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007dc0:	430b      	orrs	r3, r1
 8007dc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8007dc4:	e003      	b.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007dca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8007dda:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007ddc:	2300      	movs	r3, #0
 8007dde:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007de0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8007de4:	460b      	mov	r3, r1
 8007de6:	4313      	orrs	r3, r2
 8007de8:	d03b      	beq.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8007dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007df2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007df6:	d01f      	beq.n	8007e38 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8007df8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8007dfc:	d818      	bhi.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8007dfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007e02:	d003      	beq.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8007e04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007e08:	d007      	beq.n	8007e1a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8007e0a:	e011      	b.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e0c:	4b33      	ldr	r3, [pc, #204]	@ (8007edc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e10:	4a32      	ldr	r2, [pc, #200]	@ (8007edc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8007e18:	e00f      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e1e:	3328      	adds	r3, #40	@ 0x28
 8007e20:	2101      	movs	r1, #1
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 fd98 	bl	8008958 <RCCEx_PLL3_Config>
 8007e28:	4603      	mov	r3, r0
 8007e2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8007e2e:	e004      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007e36:	e000      	b.n	8007e3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8007e38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10b      	bne.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007e42:	4b26      	ldr	r3, [pc, #152]	@ (8007edc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e46:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8007e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007e52:	4a22      	ldr	r2, [pc, #136]	@ (8007edc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e54:	430b      	orrs	r3, r1
 8007e56:	6553      	str	r3, [r2, #84]	@ 0x54
 8007e58:	e003      	b.n	8007e62 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007e5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8007e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e6a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8007e6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007e70:	2300      	movs	r3, #0
 8007e72:	677b      	str	r3, [r7, #116]	@ 0x74
 8007e74:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8007e78:	460b      	mov	r3, r1
 8007e7a:	4313      	orrs	r3, r2
 8007e7c:	d034      	beq.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8007e7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d003      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8007e88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e8c:	d007      	beq.n	8007e9e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8007e8e:	e011      	b.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e90:	4b12      	ldr	r3, [pc, #72]	@ (8007edc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e94:	4a11      	ldr	r2, [pc, #68]	@ (8007edc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007e96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007e9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007e9c:	e00e      	b.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ea2:	3308      	adds	r3, #8
 8007ea4:	2102      	movs	r1, #2
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f000 fca4 	bl	80087f4 <RCCEx_PLL2_Config>
 8007eac:	4603      	mov	r3, r0
 8007eae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8007eb2:	e003      	b.n	8007ebc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007eba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ebc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10d      	bne.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007ec4:	4b05      	ldr	r3, [pc, #20]	@ (8007edc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ec8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007ed0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007ed2:	4a02      	ldr	r2, [pc, #8]	@ (8007edc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8007ed4:	430b      	orrs	r3, r1
 8007ed6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007ed8:	e006      	b.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8007eda:	bf00      	nop
 8007edc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ee0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007ee4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8007ef4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007efa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8007efe:	460b      	mov	r3, r1
 8007f00:	4313      	orrs	r3, r2
 8007f02:	d00c      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8007f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f08:	3328      	adds	r3, #40	@ 0x28
 8007f0a:	2102      	movs	r1, #2
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f000 fd23 	bl	8008958 <RCCEx_PLL3_Config>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d002      	beq.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f26:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8007f2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8007f30:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8007f34:	460b      	mov	r3, r1
 8007f36:	4313      	orrs	r3, r2
 8007f38:	d038      	beq.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8007f3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f46:	d018      	beq.n	8007f7a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8007f48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f4c:	d811      	bhi.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007f4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f52:	d014      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8007f54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007f58:	d80b      	bhi.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d011      	beq.n	8007f82 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8007f5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f62:	d106      	bne.n	8007f72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f64:	4bc3      	ldr	r3, [pc, #780]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f68:	4ac2      	ldr	r2, [pc, #776]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8007f70:	e008      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f72:	2301      	movs	r3, #1
 8007f74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8007f78:	e004      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007f7a:	bf00      	nop
 8007f7c:	e002      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007f7e:	bf00      	nop
 8007f80:	e000      	b.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8007f82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d10b      	bne.n	8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f8c:	4bb9      	ldr	r3, [pc, #740]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f90:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8007f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007f98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007f9c:	4ab5      	ldr	r2, [pc, #724]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007f9e:	430b      	orrs	r3, r1
 8007fa0:	6553      	str	r3, [r2, #84]	@ 0x54
 8007fa2:	e003      	b.n	8007fac <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007fa4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8007fa8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007fac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fb4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8007fb8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007fba:	2300      	movs	r3, #0
 8007fbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007fbe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8007fc2:	460b      	mov	r3, r1
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	d009      	beq.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007fc8:	4baa      	ldr	r3, [pc, #680]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007fcc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8007fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007fd6:	4aa7      	ldr	r2, [pc, #668]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007fd8:	430b      	orrs	r3, r1
 8007fda:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8007fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8007fe8:	653b      	str	r3, [r7, #80]	@ 0x50
 8007fea:	2300      	movs	r3, #0
 8007fec:	657b      	str	r3, [r7, #84]	@ 0x54
 8007fee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8007ff2:	460b      	mov	r3, r1
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	d00a      	beq.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007ff8:	4b9e      	ldr	r3, [pc, #632]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8008000:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008004:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008008:	4a9a      	ldr	r2, [pc, #616]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800800a:	430b      	orrs	r3, r1
 800800c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800800e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008016:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800801a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800801c:	2300      	movs	r3, #0
 800801e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008020:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8008024:	460b      	mov	r3, r1
 8008026:	4313      	orrs	r3, r2
 8008028:	d009      	beq.n	800803e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800802a:	4b92      	ldr	r3, [pc, #584]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800802c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800802e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8008032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008036:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008038:	4a8e      	ldr	r2, [pc, #568]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800803a:	430b      	orrs	r3, r1
 800803c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800803e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008046:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800804a:	643b      	str	r3, [r7, #64]	@ 0x40
 800804c:	2300      	movs	r3, #0
 800804e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008050:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8008054:	460b      	mov	r3, r1
 8008056:	4313      	orrs	r3, r2
 8008058:	d00e      	beq.n	8008078 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800805a:	4b86      	ldr	r3, [pc, #536]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800805c:	691b      	ldr	r3, [r3, #16]
 800805e:	4a85      	ldr	r2, [pc, #532]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008060:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008064:	6113      	str	r3, [r2, #16]
 8008066:	4b83      	ldr	r3, [pc, #524]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008068:	6919      	ldr	r1, [r3, #16]
 800806a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800806e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008072:	4a80      	ldr	r2, [pc, #512]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008074:	430b      	orrs	r3, r1
 8008076:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008080:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8008084:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008086:	2300      	movs	r3, #0
 8008088:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800808a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800808e:	460b      	mov	r3, r1
 8008090:	4313      	orrs	r3, r2
 8008092:	d009      	beq.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008094:	4b77      	ldr	r3, [pc, #476]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008096:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008098:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800809c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080a2:	4a74      	ldr	r2, [pc, #464]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080a4:	430b      	orrs	r3, r1
 80080a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80080a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080b0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80080b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80080b6:	2300      	movs	r3, #0
 80080b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80080ba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80080be:	460b      	mov	r3, r1
 80080c0:	4313      	orrs	r3, r2
 80080c2:	d00a      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80080c4:	4b6b      	ldr	r3, [pc, #428]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080c8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80080cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80080d4:	4a67      	ldr	r2, [pc, #412]	@ (8008274 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80080d6:	430b      	orrs	r3, r1
 80080d8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80080da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80080e2:	2100      	movs	r1, #0
 80080e4:	62b9      	str	r1, [r7, #40]	@ 0x28
 80080e6:	f003 0301 	and.w	r3, r3, #1
 80080ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80080ec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80080f0:	460b      	mov	r3, r1
 80080f2:	4313      	orrs	r3, r2
 80080f4:	d011      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80080f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80080fa:	3308      	adds	r3, #8
 80080fc:	2100      	movs	r1, #0
 80080fe:	4618      	mov	r0, r3
 8008100:	f000 fb78 	bl	80087f4 <RCCEx_PLL2_Config>
 8008104:	4603      	mov	r3, r0
 8008106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800810a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800810e:	2b00      	cmp	r3, #0
 8008110:	d003      	beq.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008116:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800811a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800811e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008122:	2100      	movs	r1, #0
 8008124:	6239      	str	r1, [r7, #32]
 8008126:	f003 0302 	and.w	r3, r3, #2
 800812a:	627b      	str	r3, [r7, #36]	@ 0x24
 800812c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8008130:	460b      	mov	r3, r1
 8008132:	4313      	orrs	r3, r2
 8008134:	d011      	beq.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800813a:	3308      	adds	r3, #8
 800813c:	2101      	movs	r1, #1
 800813e:	4618      	mov	r0, r3
 8008140:	f000 fb58 	bl	80087f4 <RCCEx_PLL2_Config>
 8008144:	4603      	mov	r3, r0
 8008146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800814a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800814e:	2b00      	cmp	r3, #0
 8008150:	d003      	beq.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008152:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008156:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800815a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800815e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008162:	2100      	movs	r1, #0
 8008164:	61b9      	str	r1, [r7, #24]
 8008166:	f003 0304 	and.w	r3, r3, #4
 800816a:	61fb      	str	r3, [r7, #28]
 800816c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008170:	460b      	mov	r3, r1
 8008172:	4313      	orrs	r3, r2
 8008174:	d011      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008176:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800817a:	3308      	adds	r3, #8
 800817c:	2102      	movs	r1, #2
 800817e:	4618      	mov	r0, r3
 8008180:	f000 fb38 	bl	80087f4 <RCCEx_PLL2_Config>
 8008184:	4603      	mov	r3, r0
 8008186:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800818a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800818e:	2b00      	cmp	r3, #0
 8008190:	d003      	beq.n	800819a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008192:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008196:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800819a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800819e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a2:	2100      	movs	r1, #0
 80081a4:	6139      	str	r1, [r7, #16]
 80081a6:	f003 0308 	and.w	r3, r3, #8
 80081aa:	617b      	str	r3, [r7, #20]
 80081ac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80081b0:	460b      	mov	r3, r1
 80081b2:	4313      	orrs	r3, r2
 80081b4:	d011      	beq.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80081b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081ba:	3328      	adds	r3, #40	@ 0x28
 80081bc:	2100      	movs	r1, #0
 80081be:	4618      	mov	r0, r3
 80081c0:	f000 fbca 	bl	8008958 <RCCEx_PLL3_Config>
 80081c4:	4603      	mov	r3, r0
 80081c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80081ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d003      	beq.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80081d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80081d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80081da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081e2:	2100      	movs	r1, #0
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	f003 0310 	and.w	r3, r3, #16
 80081ea:	60fb      	str	r3, [r7, #12]
 80081ec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80081f0:	460b      	mov	r3, r1
 80081f2:	4313      	orrs	r3, r2
 80081f4:	d011      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80081f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80081fa:	3328      	adds	r3, #40	@ 0x28
 80081fc:	2101      	movs	r1, #1
 80081fe:	4618      	mov	r0, r3
 8008200:	f000 fbaa 	bl	8008958 <RCCEx_PLL3_Config>
 8008204:	4603      	mov	r3, r0
 8008206:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800820a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800820e:	2b00      	cmp	r3, #0
 8008210:	d003      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008212:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008216:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800821a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800821e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008222:	2100      	movs	r1, #0
 8008224:	6039      	str	r1, [r7, #0]
 8008226:	f003 0320 	and.w	r3, r3, #32
 800822a:	607b      	str	r3, [r7, #4]
 800822c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008230:	460b      	mov	r3, r1
 8008232:	4313      	orrs	r3, r2
 8008234:	d011      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800823a:	3328      	adds	r3, #40	@ 0x28
 800823c:	2102      	movs	r1, #2
 800823e:	4618      	mov	r0, r3
 8008240:	f000 fb8a 	bl	8008958 <RCCEx_PLL3_Config>
 8008244:	4603      	mov	r3, r0
 8008246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 800824a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800824e:	2b00      	cmp	r3, #0
 8008250:	d003      	beq.n	800825a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008256:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 800825a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 800825e:	2b00      	cmp	r3, #0
 8008260:	d101      	bne.n	8008266 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008262:	2300      	movs	r3, #0
 8008264:	e000      	b.n	8008268 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008266:	2301      	movs	r3, #1
}
 8008268:	4618      	mov	r0, r3
 800826a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 800826e:	46bd      	mov	sp, r7
 8008270:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008274:	58024400 	.word	0x58024400

08008278 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800827c:	f7fe fd96 	bl	8006dac <HAL_RCC_GetHCLKFreq>
 8008280:	4602      	mov	r2, r0
 8008282:	4b06      	ldr	r3, [pc, #24]	@ (800829c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8008284:	6a1b      	ldr	r3, [r3, #32]
 8008286:	091b      	lsrs	r3, r3, #4
 8008288:	f003 0307 	and.w	r3, r3, #7
 800828c:	4904      	ldr	r1, [pc, #16]	@ (80082a0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800828e:	5ccb      	ldrb	r3, [r1, r3]
 8008290:	f003 031f 	and.w	r3, r3, #31
 8008294:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8008298:	4618      	mov	r0, r3
 800829a:	bd80      	pop	{r7, pc}
 800829c:	58024400 	.word	0x58024400
 80082a0:	080120ac 	.word	0x080120ac

080082a4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80082a4:	b480      	push	{r7}
 80082a6:	b089      	sub	sp, #36	@ 0x24
 80082a8:	af00      	add	r7, sp, #0
 80082aa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80082ac:	4ba1      	ldr	r3, [pc, #644]	@ (8008534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082b0:	f003 0303 	and.w	r3, r3, #3
 80082b4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80082b6:	4b9f      	ldr	r3, [pc, #636]	@ (8008534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082ba:	0b1b      	lsrs	r3, r3, #12
 80082bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80082c0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80082c2:	4b9c      	ldr	r3, [pc, #624]	@ (8008534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082c6:	091b      	lsrs	r3, r3, #4
 80082c8:	f003 0301 	and.w	r3, r3, #1
 80082cc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80082ce:	4b99      	ldr	r3, [pc, #612]	@ (8008534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80082d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082d2:	08db      	lsrs	r3, r3, #3
 80082d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80082d8:	693a      	ldr	r2, [r7, #16]
 80082da:	fb02 f303 	mul.w	r3, r2, r3
 80082de:	ee07 3a90 	vmov	s15, r3
 80082e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80082e6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f000 8111 	beq.w	8008514 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80082f2:	69bb      	ldr	r3, [r7, #24]
 80082f4:	2b02      	cmp	r3, #2
 80082f6:	f000 8083 	beq.w	8008400 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	2b02      	cmp	r3, #2
 80082fe:	f200 80a1 	bhi.w	8008444 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d003      	beq.n	8008310 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	2b01      	cmp	r3, #1
 800830c:	d056      	beq.n	80083bc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800830e:	e099      	b.n	8008444 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008310:	4b88      	ldr	r3, [pc, #544]	@ (8008534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f003 0320 	and.w	r3, r3, #32
 8008318:	2b00      	cmp	r3, #0
 800831a:	d02d      	beq.n	8008378 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800831c:	4b85      	ldr	r3, [pc, #532]	@ (8008534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	08db      	lsrs	r3, r3, #3
 8008322:	f003 0303 	and.w	r3, r3, #3
 8008326:	4a84      	ldr	r2, [pc, #528]	@ (8008538 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008328:	fa22 f303 	lsr.w	r3, r2, r3
 800832c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	ee07 3a90 	vmov	s15, r3
 8008334:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	ee07 3a90 	vmov	s15, r3
 800833e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008346:	4b7b      	ldr	r3, [pc, #492]	@ (8008534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800834a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800834e:	ee07 3a90 	vmov	s15, r3
 8008352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008356:	ed97 6a03 	vldr	s12, [r7, #12]
 800835a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800853c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800835e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008366:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800836a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800836e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008372:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8008376:	e087      	b.n	8008488 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	ee07 3a90 	vmov	s15, r3
 800837e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008382:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8008540 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8008386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800838a:	4b6a      	ldr	r3, [pc, #424]	@ (8008534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800838c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800838e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008392:	ee07 3a90 	vmov	s15, r3
 8008396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800839a:	ed97 6a03 	vldr	s12, [r7, #12]
 800839e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800853c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083ba:	e065      	b.n	8008488 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	ee07 3a90 	vmov	s15, r3
 80083c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80083c6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8008544 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80083ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80083ce:	4b59      	ldr	r3, [pc, #356]	@ (8008534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80083d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083d6:	ee07 3a90 	vmov	s15, r3
 80083da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80083de:	ed97 6a03 	vldr	s12, [r7, #12]
 80083e2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800853c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80083e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80083ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80083ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80083f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80083f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80083fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80083fe:	e043      	b.n	8008488 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008400:	697b      	ldr	r3, [r7, #20]
 8008402:	ee07 3a90 	vmov	s15, r3
 8008406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800840a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8008548 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800840e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008412:	4b48      	ldr	r3, [pc, #288]	@ (8008534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800841a:	ee07 3a90 	vmov	s15, r3
 800841e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008422:	ed97 6a03 	vldr	s12, [r7, #12]
 8008426:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800853c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800842a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800842e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008432:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800843a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800843e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008442:	e021      	b.n	8008488 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	ee07 3a90 	vmov	s15, r3
 800844a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800844e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8008544 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8008452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008456:	4b37      	ldr	r3, [pc, #220]	@ (8008534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800845a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800845e:	ee07 3a90 	vmov	s15, r3
 8008462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008466:	ed97 6a03 	vldr	s12, [r7, #12]
 800846a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800853c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800846e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008476:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800847a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800847e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008482:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008486:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8008488:	4b2a      	ldr	r3, [pc, #168]	@ (8008534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800848a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800848c:	0a5b      	lsrs	r3, r3, #9
 800848e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008492:	ee07 3a90 	vmov	s15, r3
 8008496:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800849a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800849e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084a2:	edd7 6a07 	vldr	s13, [r7, #28]
 80084a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084ae:	ee17 2a90 	vmov	r2, s15
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80084b6:	4b1f      	ldr	r3, [pc, #124]	@ (8008534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084ba:	0c1b      	lsrs	r3, r3, #16
 80084bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084c0:	ee07 3a90 	vmov	s15, r3
 80084c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80084cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80084d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80084dc:	ee17 2a90 	vmov	r2, s15
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80084e4:	4b13      	ldr	r3, [pc, #76]	@ (8008534 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80084e8:	0e1b      	lsrs	r3, r3, #24
 80084ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80084ee:	ee07 3a90 	vmov	s15, r3
 80084f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80084fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80084fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8008502:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008506:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800850a:	ee17 2a90 	vmov	r2, s15
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008512:	e008      	b.n	8008526 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2200      	movs	r2, #0
 8008518:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2200      	movs	r2, #0
 8008524:	609a      	str	r2, [r3, #8]
}
 8008526:	bf00      	nop
 8008528:	3724      	adds	r7, #36	@ 0x24
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	58024400 	.word	0x58024400
 8008538:	03d09000 	.word	0x03d09000
 800853c:	46000000 	.word	0x46000000
 8008540:	4c742400 	.word	0x4c742400
 8008544:	4a742400 	.word	0x4a742400
 8008548:	4bbebc20 	.word	0x4bbebc20

0800854c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800854c:	b480      	push	{r7}
 800854e:	b089      	sub	sp, #36	@ 0x24
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008554:	4ba1      	ldr	r3, [pc, #644]	@ (80087dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008558:	f003 0303 	and.w	r3, r3, #3
 800855c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800855e:	4b9f      	ldr	r3, [pc, #636]	@ (80087dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008562:	0d1b      	lsrs	r3, r3, #20
 8008564:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008568:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800856a:	4b9c      	ldr	r3, [pc, #624]	@ (80087dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800856c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800856e:	0a1b      	lsrs	r3, r3, #8
 8008570:	f003 0301 	and.w	r3, r3, #1
 8008574:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8008576:	4b99      	ldr	r3, [pc, #612]	@ (80087dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800857a:	08db      	lsrs	r3, r3, #3
 800857c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008580:	693a      	ldr	r2, [r7, #16]
 8008582:	fb02 f303 	mul.w	r3, r2, r3
 8008586:	ee07 3a90 	vmov	s15, r3
 800858a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800858e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	2b00      	cmp	r3, #0
 8008596:	f000 8111 	beq.w	80087bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	2b02      	cmp	r3, #2
 800859e:	f000 8083 	beq.w	80086a8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	f200 80a1 	bhi.w	80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80085aa:	69bb      	ldr	r3, [r7, #24]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d003      	beq.n	80085b8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	2b01      	cmp	r3, #1
 80085b4:	d056      	beq.n	8008664 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80085b6:	e099      	b.n	80086ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80085b8:	4b88      	ldr	r3, [pc, #544]	@ (80087dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 0320 	and.w	r3, r3, #32
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d02d      	beq.n	8008620 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80085c4:	4b85      	ldr	r3, [pc, #532]	@ (80087dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	08db      	lsrs	r3, r3, #3
 80085ca:	f003 0303 	and.w	r3, r3, #3
 80085ce:	4a84      	ldr	r2, [pc, #528]	@ (80087e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80085d0:	fa22 f303 	lsr.w	r3, r2, r3
 80085d4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	ee07 3a90 	vmov	s15, r3
 80085dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	ee07 3a90 	vmov	s15, r3
 80085e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ee:	4b7b      	ldr	r3, [pc, #492]	@ (80087dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80085f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f6:	ee07 3a90 	vmov	s15, r3
 80085fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8008602:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80087e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008606:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800860a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800860e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008612:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008616:	ee67 7a27 	vmul.f32	s15, s14, s15
 800861a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800861e:	e087      	b.n	8008730 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	ee07 3a90 	vmov	s15, r3
 8008626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800862a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80087e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800862e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008632:	4b6a      	ldr	r3, [pc, #424]	@ (80087dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008636:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800863a:	ee07 3a90 	vmov	s15, r3
 800863e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008642:	ed97 6a03 	vldr	s12, [r7, #12]
 8008646:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80087e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800864a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800864e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008652:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008656:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800865a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800865e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008662:	e065      	b.n	8008730 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	ee07 3a90 	vmov	s15, r3
 800866a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800866e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80087ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008676:	4b59      	ldr	r3, [pc, #356]	@ (80087dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800867a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800867e:	ee07 3a90 	vmov	s15, r3
 8008682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008686:	ed97 6a03 	vldr	s12, [r7, #12]
 800868a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80087e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800868e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008696:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800869a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800869e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086a6:	e043      	b.n	8008730 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80086a8:	697b      	ldr	r3, [r7, #20]
 80086aa:	ee07 3a90 	vmov	s15, r3
 80086ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086b2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80087f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80086b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086ba:	4b48      	ldr	r3, [pc, #288]	@ (80087dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80086bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086c2:	ee07 3a90 	vmov	s15, r3
 80086c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80086ce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80087e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80086d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80086ea:	e021      	b.n	8008730 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	ee07 3a90 	vmov	s15, r3
 80086f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80087ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80086fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086fe:	4b37      	ldr	r3, [pc, #220]	@ (80087dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008706:	ee07 3a90 	vmov	s15, r3
 800870a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800870e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008712:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80087e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800871a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800871e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800872a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800872e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8008730:	4b2a      	ldr	r3, [pc, #168]	@ (80087dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008734:	0a5b      	lsrs	r3, r3, #9
 8008736:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800873a:	ee07 3a90 	vmov	s15, r3
 800873e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008742:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008746:	ee37 7a87 	vadd.f32	s14, s15, s14
 800874a:	edd7 6a07 	vldr	s13, [r7, #28]
 800874e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008752:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008756:	ee17 2a90 	vmov	r2, s15
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800875e:	4b1f      	ldr	r3, [pc, #124]	@ (80087dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008762:	0c1b      	lsrs	r3, r3, #16
 8008764:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008768:	ee07 3a90 	vmov	s15, r3
 800876c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008770:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008774:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008778:	edd7 6a07 	vldr	s13, [r7, #28]
 800877c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008784:	ee17 2a90 	vmov	r2, s15
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800878c:	4b13      	ldr	r3, [pc, #76]	@ (80087dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800878e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008790:	0e1b      	lsrs	r3, r3, #24
 8008792:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008796:	ee07 3a90 	vmov	s15, r3
 800879a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800879e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80087a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80087aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80087ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80087b2:	ee17 2a90 	vmov	r2, s15
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80087ba:	e008      	b.n	80087ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2200      	movs	r2, #0
 80087c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2200      	movs	r2, #0
 80087c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	609a      	str	r2, [r3, #8]
}
 80087ce:	bf00      	nop
 80087d0:	3724      	adds	r7, #36	@ 0x24
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	58024400 	.word	0x58024400
 80087e0:	03d09000 	.word	0x03d09000
 80087e4:	46000000 	.word	0x46000000
 80087e8:	4c742400 	.word	0x4c742400
 80087ec:	4a742400 	.word	0x4a742400
 80087f0:	4bbebc20 	.word	0x4bbebc20

080087f4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b084      	sub	sp, #16
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80087fe:	2300      	movs	r3, #0
 8008800:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008802:	4b53      	ldr	r3, [pc, #332]	@ (8008950 <RCCEx_PLL2_Config+0x15c>)
 8008804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008806:	f003 0303 	and.w	r3, r3, #3
 800880a:	2b03      	cmp	r3, #3
 800880c:	d101      	bne.n	8008812 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	e099      	b.n	8008946 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008812:	4b4f      	ldr	r3, [pc, #316]	@ (8008950 <RCCEx_PLL2_Config+0x15c>)
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	4a4e      	ldr	r2, [pc, #312]	@ (8008950 <RCCEx_PLL2_Config+0x15c>)
 8008818:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800881c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800881e:	f7f9 fb79 	bl	8001f14 <HAL_GetTick>
 8008822:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008824:	e008      	b.n	8008838 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008826:	f7f9 fb75 	bl	8001f14 <HAL_GetTick>
 800882a:	4602      	mov	r2, r0
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	1ad3      	subs	r3, r2, r3
 8008830:	2b02      	cmp	r3, #2
 8008832:	d901      	bls.n	8008838 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008834:	2303      	movs	r3, #3
 8008836:	e086      	b.n	8008946 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008838:	4b45      	ldr	r3, [pc, #276]	@ (8008950 <RCCEx_PLL2_Config+0x15c>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008840:	2b00      	cmp	r3, #0
 8008842:	d1f0      	bne.n	8008826 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008844:	4b42      	ldr	r3, [pc, #264]	@ (8008950 <RCCEx_PLL2_Config+0x15c>)
 8008846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008848:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	031b      	lsls	r3, r3, #12
 8008852:	493f      	ldr	r1, [pc, #252]	@ (8008950 <RCCEx_PLL2_Config+0x15c>)
 8008854:	4313      	orrs	r3, r2
 8008856:	628b      	str	r3, [r1, #40]	@ 0x28
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	3b01      	subs	r3, #1
 800885e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	689b      	ldr	r3, [r3, #8]
 8008866:	3b01      	subs	r3, #1
 8008868:	025b      	lsls	r3, r3, #9
 800886a:	b29b      	uxth	r3, r3
 800886c:	431a      	orrs	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	3b01      	subs	r3, #1
 8008874:	041b      	lsls	r3, r3, #16
 8008876:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800887a:	431a      	orrs	r2, r3
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	691b      	ldr	r3, [r3, #16]
 8008880:	3b01      	subs	r3, #1
 8008882:	061b      	lsls	r3, r3, #24
 8008884:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8008888:	4931      	ldr	r1, [pc, #196]	@ (8008950 <RCCEx_PLL2_Config+0x15c>)
 800888a:	4313      	orrs	r3, r2
 800888c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800888e:	4b30      	ldr	r3, [pc, #192]	@ (8008950 <RCCEx_PLL2_Config+0x15c>)
 8008890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008892:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	695b      	ldr	r3, [r3, #20]
 800889a:	492d      	ldr	r1, [pc, #180]	@ (8008950 <RCCEx_PLL2_Config+0x15c>)
 800889c:	4313      	orrs	r3, r2
 800889e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80088a0:	4b2b      	ldr	r3, [pc, #172]	@ (8008950 <RCCEx_PLL2_Config+0x15c>)
 80088a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088a4:	f023 0220 	bic.w	r2, r3, #32
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	699b      	ldr	r3, [r3, #24]
 80088ac:	4928      	ldr	r1, [pc, #160]	@ (8008950 <RCCEx_PLL2_Config+0x15c>)
 80088ae:	4313      	orrs	r3, r2
 80088b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80088b2:	4b27      	ldr	r3, [pc, #156]	@ (8008950 <RCCEx_PLL2_Config+0x15c>)
 80088b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088b6:	4a26      	ldr	r2, [pc, #152]	@ (8008950 <RCCEx_PLL2_Config+0x15c>)
 80088b8:	f023 0310 	bic.w	r3, r3, #16
 80088bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80088be:	4b24      	ldr	r3, [pc, #144]	@ (8008950 <RCCEx_PLL2_Config+0x15c>)
 80088c0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80088c2:	4b24      	ldr	r3, [pc, #144]	@ (8008954 <RCCEx_PLL2_Config+0x160>)
 80088c4:	4013      	ands	r3, r2
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	69d2      	ldr	r2, [r2, #28]
 80088ca:	00d2      	lsls	r2, r2, #3
 80088cc:	4920      	ldr	r1, [pc, #128]	@ (8008950 <RCCEx_PLL2_Config+0x15c>)
 80088ce:	4313      	orrs	r3, r2
 80088d0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80088d2:	4b1f      	ldr	r3, [pc, #124]	@ (8008950 <RCCEx_PLL2_Config+0x15c>)
 80088d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d6:	4a1e      	ldr	r2, [pc, #120]	@ (8008950 <RCCEx_PLL2_Config+0x15c>)
 80088d8:	f043 0310 	orr.w	r3, r3, #16
 80088dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d106      	bne.n	80088f2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80088e4:	4b1a      	ldr	r3, [pc, #104]	@ (8008950 <RCCEx_PLL2_Config+0x15c>)
 80088e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088e8:	4a19      	ldr	r2, [pc, #100]	@ (8008950 <RCCEx_PLL2_Config+0x15c>)
 80088ea:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80088ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80088f0:	e00f      	b.n	8008912 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d106      	bne.n	8008906 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80088f8:	4b15      	ldr	r3, [pc, #84]	@ (8008950 <RCCEx_PLL2_Config+0x15c>)
 80088fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088fc:	4a14      	ldr	r2, [pc, #80]	@ (8008950 <RCCEx_PLL2_Config+0x15c>)
 80088fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008902:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008904:	e005      	b.n	8008912 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008906:	4b12      	ldr	r3, [pc, #72]	@ (8008950 <RCCEx_PLL2_Config+0x15c>)
 8008908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800890a:	4a11      	ldr	r2, [pc, #68]	@ (8008950 <RCCEx_PLL2_Config+0x15c>)
 800890c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008910:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008912:	4b0f      	ldr	r3, [pc, #60]	@ (8008950 <RCCEx_PLL2_Config+0x15c>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	4a0e      	ldr	r2, [pc, #56]	@ (8008950 <RCCEx_PLL2_Config+0x15c>)
 8008918:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800891c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800891e:	f7f9 faf9 	bl	8001f14 <HAL_GetTick>
 8008922:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008924:	e008      	b.n	8008938 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8008926:	f7f9 faf5 	bl	8001f14 <HAL_GetTick>
 800892a:	4602      	mov	r2, r0
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	1ad3      	subs	r3, r2, r3
 8008930:	2b02      	cmp	r3, #2
 8008932:	d901      	bls.n	8008938 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008934:	2303      	movs	r3, #3
 8008936:	e006      	b.n	8008946 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008938:	4b05      	ldr	r3, [pc, #20]	@ (8008950 <RCCEx_PLL2_Config+0x15c>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008940:	2b00      	cmp	r3, #0
 8008942:	d0f0      	beq.n	8008926 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008944:	7bfb      	ldrb	r3, [r7, #15]
}
 8008946:	4618      	mov	r0, r3
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
 800894e:	bf00      	nop
 8008950:	58024400 	.word	0x58024400
 8008954:	ffff0007 	.word	0xffff0007

08008958 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b084      	sub	sp, #16
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
 8008960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008962:	2300      	movs	r3, #0
 8008964:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008966:	4b53      	ldr	r3, [pc, #332]	@ (8008ab4 <RCCEx_PLL3_Config+0x15c>)
 8008968:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800896a:	f003 0303 	and.w	r3, r3, #3
 800896e:	2b03      	cmp	r3, #3
 8008970:	d101      	bne.n	8008976 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e099      	b.n	8008aaa <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008976:	4b4f      	ldr	r3, [pc, #316]	@ (8008ab4 <RCCEx_PLL3_Config+0x15c>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a4e      	ldr	r2, [pc, #312]	@ (8008ab4 <RCCEx_PLL3_Config+0x15c>)
 800897c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008980:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008982:	f7f9 fac7 	bl	8001f14 <HAL_GetTick>
 8008986:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008988:	e008      	b.n	800899c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800898a:	f7f9 fac3 	bl	8001f14 <HAL_GetTick>
 800898e:	4602      	mov	r2, r0
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	1ad3      	subs	r3, r2, r3
 8008994:	2b02      	cmp	r3, #2
 8008996:	d901      	bls.n	800899c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008998:	2303      	movs	r3, #3
 800899a:	e086      	b.n	8008aaa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800899c:	4b45      	ldr	r3, [pc, #276]	@ (8008ab4 <RCCEx_PLL3_Config+0x15c>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d1f0      	bne.n	800898a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80089a8:	4b42      	ldr	r3, [pc, #264]	@ (8008ab4 <RCCEx_PLL3_Config+0x15c>)
 80089aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089ac:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	051b      	lsls	r3, r3, #20
 80089b6:	493f      	ldr	r1, [pc, #252]	@ (8008ab4 <RCCEx_PLL3_Config+0x15c>)
 80089b8:	4313      	orrs	r3, r2
 80089ba:	628b      	str	r3, [r1, #40]	@ 0x28
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	3b01      	subs	r3, #1
 80089c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	3b01      	subs	r3, #1
 80089cc:	025b      	lsls	r3, r3, #9
 80089ce:	b29b      	uxth	r3, r3
 80089d0:	431a      	orrs	r2, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	68db      	ldr	r3, [r3, #12]
 80089d6:	3b01      	subs	r3, #1
 80089d8:	041b      	lsls	r3, r3, #16
 80089da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80089de:	431a      	orrs	r2, r3
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	691b      	ldr	r3, [r3, #16]
 80089e4:	3b01      	subs	r3, #1
 80089e6:	061b      	lsls	r3, r3, #24
 80089e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80089ec:	4931      	ldr	r1, [pc, #196]	@ (8008ab4 <RCCEx_PLL3_Config+0x15c>)
 80089ee:	4313      	orrs	r3, r2
 80089f0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80089f2:	4b30      	ldr	r3, [pc, #192]	@ (8008ab4 <RCCEx_PLL3_Config+0x15c>)
 80089f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	695b      	ldr	r3, [r3, #20]
 80089fe:	492d      	ldr	r1, [pc, #180]	@ (8008ab4 <RCCEx_PLL3_Config+0x15c>)
 8008a00:	4313      	orrs	r3, r2
 8008a02:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008a04:	4b2b      	ldr	r3, [pc, #172]	@ (8008ab4 <RCCEx_PLL3_Config+0x15c>)
 8008a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a08:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	699b      	ldr	r3, [r3, #24]
 8008a10:	4928      	ldr	r1, [pc, #160]	@ (8008ab4 <RCCEx_PLL3_Config+0x15c>)
 8008a12:	4313      	orrs	r3, r2
 8008a14:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008a16:	4b27      	ldr	r3, [pc, #156]	@ (8008ab4 <RCCEx_PLL3_Config+0x15c>)
 8008a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a1a:	4a26      	ldr	r2, [pc, #152]	@ (8008ab4 <RCCEx_PLL3_Config+0x15c>)
 8008a1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a20:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008a22:	4b24      	ldr	r3, [pc, #144]	@ (8008ab4 <RCCEx_PLL3_Config+0x15c>)
 8008a24:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a26:	4b24      	ldr	r3, [pc, #144]	@ (8008ab8 <RCCEx_PLL3_Config+0x160>)
 8008a28:	4013      	ands	r3, r2
 8008a2a:	687a      	ldr	r2, [r7, #4]
 8008a2c:	69d2      	ldr	r2, [r2, #28]
 8008a2e:	00d2      	lsls	r2, r2, #3
 8008a30:	4920      	ldr	r1, [pc, #128]	@ (8008ab4 <RCCEx_PLL3_Config+0x15c>)
 8008a32:	4313      	orrs	r3, r2
 8008a34:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008a36:	4b1f      	ldr	r3, [pc, #124]	@ (8008ab4 <RCCEx_PLL3_Config+0x15c>)
 8008a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a3a:	4a1e      	ldr	r2, [pc, #120]	@ (8008ab4 <RCCEx_PLL3_Config+0x15c>)
 8008a3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a40:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d106      	bne.n	8008a56 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008a48:	4b1a      	ldr	r3, [pc, #104]	@ (8008ab4 <RCCEx_PLL3_Config+0x15c>)
 8008a4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a4c:	4a19      	ldr	r2, [pc, #100]	@ (8008ab4 <RCCEx_PLL3_Config+0x15c>)
 8008a4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8008a52:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008a54:	e00f      	b.n	8008a76 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d106      	bne.n	8008a6a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008a5c:	4b15      	ldr	r3, [pc, #84]	@ (8008ab4 <RCCEx_PLL3_Config+0x15c>)
 8008a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a60:	4a14      	ldr	r2, [pc, #80]	@ (8008ab4 <RCCEx_PLL3_Config+0x15c>)
 8008a62:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8008a66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8008a68:	e005      	b.n	8008a76 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008a6a:	4b12      	ldr	r3, [pc, #72]	@ (8008ab4 <RCCEx_PLL3_Config+0x15c>)
 8008a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a6e:	4a11      	ldr	r2, [pc, #68]	@ (8008ab4 <RCCEx_PLL3_Config+0x15c>)
 8008a70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008a74:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008a76:	4b0f      	ldr	r3, [pc, #60]	@ (8008ab4 <RCCEx_PLL3_Config+0x15c>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a0e      	ldr	r2, [pc, #56]	@ (8008ab4 <RCCEx_PLL3_Config+0x15c>)
 8008a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a82:	f7f9 fa47 	bl	8001f14 <HAL_GetTick>
 8008a86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a88:	e008      	b.n	8008a9c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8008a8a:	f7f9 fa43 	bl	8001f14 <HAL_GetTick>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	1ad3      	subs	r3, r2, r3
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d901      	bls.n	8008a9c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	e006      	b.n	8008aaa <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008a9c:	4b05      	ldr	r3, [pc, #20]	@ (8008ab4 <RCCEx_PLL3_Config+0x15c>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d0f0      	beq.n	8008a8a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	58024400 	.word	0x58024400
 8008ab8:	ffff0007 	.word	0xffff0007

08008abc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b082      	sub	sp, #8
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d101      	bne.n	8008ace <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	e049      	b.n	8008b62 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ad4:	b2db      	uxtb	r3, r3
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d106      	bne.n	8008ae8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2200      	movs	r2, #0
 8008ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f7f8 feb0 	bl	8001848 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2202      	movs	r2, #2
 8008aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681a      	ldr	r2, [r3, #0]
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	3304      	adds	r3, #4
 8008af8:	4619      	mov	r1, r3
 8008afa:	4610      	mov	r0, r2
 8008afc:	f000 fea4 	bl	8009848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2201      	movs	r2, #1
 8008b04:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2201      	movs	r2, #1
 8008b14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2201      	movs	r2, #1
 8008b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2201      	movs	r2, #1
 8008b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	2201      	movs	r2, #1
 8008b34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2201      	movs	r2, #1
 8008b44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008b60:	2300      	movs	r3, #0
}
 8008b62:	4618      	mov	r0, r3
 8008b64:	3708      	adds	r7, #8
 8008b66:	46bd      	mov	sp, r7
 8008b68:	bd80      	pop	{r7, pc}
	...

08008b6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d001      	beq.n	8008b84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008b80:	2301      	movs	r3, #1
 8008b82:	e054      	b.n	8008c2e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2202      	movs	r2, #2
 8008b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	68da      	ldr	r2, [r3, #12]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f042 0201 	orr.w	r2, r2, #1
 8008b9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	4a26      	ldr	r2, [pc, #152]	@ (8008c3c <HAL_TIM_Base_Start_IT+0xd0>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d022      	beq.n	8008bec <HAL_TIM_Base_Start_IT+0x80>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bae:	d01d      	beq.n	8008bec <HAL_TIM_Base_Start_IT+0x80>
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a22      	ldr	r2, [pc, #136]	@ (8008c40 <HAL_TIM_Base_Start_IT+0xd4>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d018      	beq.n	8008bec <HAL_TIM_Base_Start_IT+0x80>
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4a21      	ldr	r2, [pc, #132]	@ (8008c44 <HAL_TIM_Base_Start_IT+0xd8>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d013      	beq.n	8008bec <HAL_TIM_Base_Start_IT+0x80>
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	4a1f      	ldr	r2, [pc, #124]	@ (8008c48 <HAL_TIM_Base_Start_IT+0xdc>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d00e      	beq.n	8008bec <HAL_TIM_Base_Start_IT+0x80>
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a1e      	ldr	r2, [pc, #120]	@ (8008c4c <HAL_TIM_Base_Start_IT+0xe0>)
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d009      	beq.n	8008bec <HAL_TIM_Base_Start_IT+0x80>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a1c      	ldr	r2, [pc, #112]	@ (8008c50 <HAL_TIM_Base_Start_IT+0xe4>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d004      	beq.n	8008bec <HAL_TIM_Base_Start_IT+0x80>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	4a1b      	ldr	r2, [pc, #108]	@ (8008c54 <HAL_TIM_Base_Start_IT+0xe8>)
 8008be8:	4293      	cmp	r3, r2
 8008bea:	d115      	bne.n	8008c18 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	689a      	ldr	r2, [r3, #8]
 8008bf2:	4b19      	ldr	r3, [pc, #100]	@ (8008c58 <HAL_TIM_Base_Start_IT+0xec>)
 8008bf4:	4013      	ands	r3, r2
 8008bf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2b06      	cmp	r3, #6
 8008bfc:	d015      	beq.n	8008c2a <HAL_TIM_Base_Start_IT+0xbe>
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008c04:	d011      	beq.n	8008c2a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f042 0201 	orr.w	r2, r2, #1
 8008c14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c16:	e008      	b.n	8008c2a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681a      	ldr	r2, [r3, #0]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f042 0201 	orr.w	r2, r2, #1
 8008c26:	601a      	str	r2, [r3, #0]
 8008c28:	e000      	b.n	8008c2c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c2a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c2c:	2300      	movs	r3, #0
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3714      	adds	r7, #20
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr
 8008c3a:	bf00      	nop
 8008c3c:	40010000 	.word	0x40010000
 8008c40:	40000400 	.word	0x40000400
 8008c44:	40000800 	.word	0x40000800
 8008c48:	40000c00 	.word	0x40000c00
 8008c4c:	40010400 	.word	0x40010400
 8008c50:	40001800 	.word	0x40001800
 8008c54:	40014000 	.word	0x40014000
 8008c58:	00010007 	.word	0x00010007

08008c5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008c5c:	b580      	push	{r7, lr}
 8008c5e:	b082      	sub	sp, #8
 8008c60:	af00      	add	r7, sp, #0
 8008c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d101      	bne.n	8008c6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e049      	b.n	8008d02 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c74:	b2db      	uxtb	r3, r3
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d106      	bne.n	8008c88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f7f8 fcda 	bl	800163c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2202      	movs	r2, #2
 8008c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681a      	ldr	r2, [r3, #0]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	3304      	adds	r3, #4
 8008c98:	4619      	mov	r1, r3
 8008c9a:	4610      	mov	r0, r2
 8008c9c:	f000 fdd4 	bl	8009848 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2201      	movs	r2, #1
 8008cac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2201      	movs	r2, #1
 8008cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2201      	movs	r2, #1
 8008cdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2201      	movs	r2, #1
 8008ce4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2201      	movs	r2, #1
 8008cec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	3708      	adds	r7, #8
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}
	...

08008d0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	b084      	sub	sp, #16
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008d16:	683b      	ldr	r3, [r7, #0]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d109      	bne.n	8008d30 <HAL_TIM_PWM_Start+0x24>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008d22:	b2db      	uxtb	r3, r3
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	bf14      	ite	ne
 8008d28:	2301      	movne	r3, #1
 8008d2a:	2300      	moveq	r3, #0
 8008d2c:	b2db      	uxtb	r3, r3
 8008d2e:	e03c      	b.n	8008daa <HAL_TIM_PWM_Start+0x9e>
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	2b04      	cmp	r3, #4
 8008d34:	d109      	bne.n	8008d4a <HAL_TIM_PWM_Start+0x3e>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	bf14      	ite	ne
 8008d42:	2301      	movne	r3, #1
 8008d44:	2300      	moveq	r3, #0
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	e02f      	b.n	8008daa <HAL_TIM_PWM_Start+0x9e>
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	2b08      	cmp	r3, #8
 8008d4e:	d109      	bne.n	8008d64 <HAL_TIM_PWM_Start+0x58>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	bf14      	ite	ne
 8008d5c:	2301      	movne	r3, #1
 8008d5e:	2300      	moveq	r3, #0
 8008d60:	b2db      	uxtb	r3, r3
 8008d62:	e022      	b.n	8008daa <HAL_TIM_PWM_Start+0x9e>
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	2b0c      	cmp	r3, #12
 8008d68:	d109      	bne.n	8008d7e <HAL_TIM_PWM_Start+0x72>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	bf14      	ite	ne
 8008d76:	2301      	movne	r3, #1
 8008d78:	2300      	moveq	r3, #0
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	e015      	b.n	8008daa <HAL_TIM_PWM_Start+0x9e>
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	2b10      	cmp	r3, #16
 8008d82:	d109      	bne.n	8008d98 <HAL_TIM_PWM_Start+0x8c>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008d8a:	b2db      	uxtb	r3, r3
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	bf14      	ite	ne
 8008d90:	2301      	movne	r3, #1
 8008d92:	2300      	moveq	r3, #0
 8008d94:	b2db      	uxtb	r3, r3
 8008d96:	e008      	b.n	8008daa <HAL_TIM_PWM_Start+0x9e>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	2b01      	cmp	r3, #1
 8008da2:	bf14      	ite	ne
 8008da4:	2301      	movne	r3, #1
 8008da6:	2300      	moveq	r3, #0
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d001      	beq.n	8008db2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e0a1      	b.n	8008ef6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d104      	bne.n	8008dc2 <HAL_TIM_PWM_Start+0xb6>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2202      	movs	r2, #2
 8008dbc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008dc0:	e023      	b.n	8008e0a <HAL_TIM_PWM_Start+0xfe>
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	2b04      	cmp	r3, #4
 8008dc6:	d104      	bne.n	8008dd2 <HAL_TIM_PWM_Start+0xc6>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2202      	movs	r2, #2
 8008dcc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008dd0:	e01b      	b.n	8008e0a <HAL_TIM_PWM_Start+0xfe>
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	2b08      	cmp	r3, #8
 8008dd6:	d104      	bne.n	8008de2 <HAL_TIM_PWM_Start+0xd6>
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2202      	movs	r2, #2
 8008ddc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008de0:	e013      	b.n	8008e0a <HAL_TIM_PWM_Start+0xfe>
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2b0c      	cmp	r3, #12
 8008de6:	d104      	bne.n	8008df2 <HAL_TIM_PWM_Start+0xe6>
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2202      	movs	r2, #2
 8008dec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008df0:	e00b      	b.n	8008e0a <HAL_TIM_PWM_Start+0xfe>
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	2b10      	cmp	r3, #16
 8008df6:	d104      	bne.n	8008e02 <HAL_TIM_PWM_Start+0xf6>
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2202      	movs	r2, #2
 8008dfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008e00:	e003      	b.n	8008e0a <HAL_TIM_PWM_Start+0xfe>
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2202      	movs	r2, #2
 8008e06:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	6839      	ldr	r1, [r7, #0]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f001 f932 	bl	800a07c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a38      	ldr	r2, [pc, #224]	@ (8008f00 <HAL_TIM_PWM_Start+0x1f4>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d013      	beq.n	8008e4a <HAL_TIM_PWM_Start+0x13e>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a37      	ldr	r2, [pc, #220]	@ (8008f04 <HAL_TIM_PWM_Start+0x1f8>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d00e      	beq.n	8008e4a <HAL_TIM_PWM_Start+0x13e>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a35      	ldr	r2, [pc, #212]	@ (8008f08 <HAL_TIM_PWM_Start+0x1fc>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d009      	beq.n	8008e4a <HAL_TIM_PWM_Start+0x13e>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a34      	ldr	r2, [pc, #208]	@ (8008f0c <HAL_TIM_PWM_Start+0x200>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d004      	beq.n	8008e4a <HAL_TIM_PWM_Start+0x13e>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a32      	ldr	r2, [pc, #200]	@ (8008f10 <HAL_TIM_PWM_Start+0x204>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d101      	bne.n	8008e4e <HAL_TIM_PWM_Start+0x142>
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e000      	b.n	8008e50 <HAL_TIM_PWM_Start+0x144>
 8008e4e:	2300      	movs	r3, #0
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d007      	beq.n	8008e64 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008e62:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a25      	ldr	r2, [pc, #148]	@ (8008f00 <HAL_TIM_PWM_Start+0x1f4>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d022      	beq.n	8008eb4 <HAL_TIM_PWM_Start+0x1a8>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e76:	d01d      	beq.n	8008eb4 <HAL_TIM_PWM_Start+0x1a8>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a25      	ldr	r2, [pc, #148]	@ (8008f14 <HAL_TIM_PWM_Start+0x208>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d018      	beq.n	8008eb4 <HAL_TIM_PWM_Start+0x1a8>
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a24      	ldr	r2, [pc, #144]	@ (8008f18 <HAL_TIM_PWM_Start+0x20c>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d013      	beq.n	8008eb4 <HAL_TIM_PWM_Start+0x1a8>
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a22      	ldr	r2, [pc, #136]	@ (8008f1c <HAL_TIM_PWM_Start+0x210>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d00e      	beq.n	8008eb4 <HAL_TIM_PWM_Start+0x1a8>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a1a      	ldr	r2, [pc, #104]	@ (8008f04 <HAL_TIM_PWM_Start+0x1f8>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d009      	beq.n	8008eb4 <HAL_TIM_PWM_Start+0x1a8>
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a1e      	ldr	r2, [pc, #120]	@ (8008f20 <HAL_TIM_PWM_Start+0x214>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d004      	beq.n	8008eb4 <HAL_TIM_PWM_Start+0x1a8>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	4a16      	ldr	r2, [pc, #88]	@ (8008f08 <HAL_TIM_PWM_Start+0x1fc>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d115      	bne.n	8008ee0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	689a      	ldr	r2, [r3, #8]
 8008eba:	4b1a      	ldr	r3, [pc, #104]	@ (8008f24 <HAL_TIM_PWM_Start+0x218>)
 8008ebc:	4013      	ands	r3, r2
 8008ebe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	2b06      	cmp	r3, #6
 8008ec4:	d015      	beq.n	8008ef2 <HAL_TIM_PWM_Start+0x1e6>
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008ecc:	d011      	beq.n	8008ef2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f042 0201 	orr.w	r2, r2, #1
 8008edc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ede:	e008      	b.n	8008ef2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	681a      	ldr	r2, [r3, #0]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f042 0201 	orr.w	r2, r2, #1
 8008eee:	601a      	str	r2, [r3, #0]
 8008ef0:	e000      	b.n	8008ef4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ef2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008ef4:	2300      	movs	r3, #0
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	40010000 	.word	0x40010000
 8008f04:	40010400 	.word	0x40010400
 8008f08:	40014000 	.word	0x40014000
 8008f0c:	40014400 	.word	0x40014400
 8008f10:	40014800 	.word	0x40014800
 8008f14:	40000400 	.word	0x40000400
 8008f18:	40000800 	.word	0x40000800
 8008f1c:	40000c00 	.word	0x40000c00
 8008f20:	40001800 	.word	0x40001800
 8008f24:	00010007 	.word	0x00010007

08008f28 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b086      	sub	sp, #24
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d101      	bne.n	8008f3c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e08f      	b.n	800905c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008f42:	b2db      	uxtb	r3, r3
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d106      	bne.n	8008f56 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f7f8 fca1 	bl	8001898 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2202      	movs	r2, #2
 8008f5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	6899      	ldr	r1, [r3, #8]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	4b3e      	ldr	r3, [pc, #248]	@ (8009064 <HAL_TIM_Encoder_Init+0x13c>)
 8008f6a:	400b      	ands	r3, r1
 8008f6c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681a      	ldr	r2, [r3, #0]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	3304      	adds	r3, #4
 8008f76:	4619      	mov	r1, r3
 8008f78:	4610      	mov	r0, r2
 8008f7a:	f000 fc65 	bl	8009848 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	699b      	ldr	r3, [r3, #24]
 8008f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	6a1b      	ldr	r3, [r3, #32]
 8008f94:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	697a      	ldr	r2, [r7, #20]
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008fa0:	693a      	ldr	r2, [r7, #16]
 8008fa2:	4b31      	ldr	r3, [pc, #196]	@ (8009068 <HAL_TIM_Encoder_Init+0x140>)
 8008fa4:	4013      	ands	r3, r2
 8008fa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	689a      	ldr	r2, [r3, #8]
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	699b      	ldr	r3, [r3, #24]
 8008fb0:	021b      	lsls	r3, r3, #8
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	693a      	ldr	r2, [r7, #16]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8008fba:	693a      	ldr	r2, [r7, #16]
 8008fbc:	4b2b      	ldr	r3, [pc, #172]	@ (800906c <HAL_TIM_Encoder_Init+0x144>)
 8008fbe:	4013      	ands	r3, r2
 8008fc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008fc2:	693a      	ldr	r2, [r7, #16]
 8008fc4:	4b2a      	ldr	r3, [pc, #168]	@ (8009070 <HAL_TIM_Encoder_Init+0x148>)
 8008fc6:	4013      	ands	r3, r2
 8008fc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	68da      	ldr	r2, [r3, #12]
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	69db      	ldr	r3, [r3, #28]
 8008fd2:	021b      	lsls	r3, r3, #8
 8008fd4:	4313      	orrs	r3, r2
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	691b      	ldr	r3, [r3, #16]
 8008fe0:	011a      	lsls	r2, r3, #4
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	6a1b      	ldr	r3, [r3, #32]
 8008fe6:	031b      	lsls	r3, r3, #12
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	693a      	ldr	r2, [r7, #16]
 8008fec:	4313      	orrs	r3, r2
 8008fee:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8008ff6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8008ffe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	685a      	ldr	r2, [r3, #4]
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	695b      	ldr	r3, [r3, #20]
 8009008:	011b      	lsls	r3, r3, #4
 800900a:	4313      	orrs	r3, r2
 800900c:	68fa      	ldr	r2, [r7, #12]
 800900e:	4313      	orrs	r3, r2
 8009010:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	697a      	ldr	r2, [r7, #20]
 8009018:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	693a      	ldr	r2, [r7, #16]
 8009020:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68fa      	ldr	r2, [r7, #12]
 8009028:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2201      	movs	r2, #1
 800902e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2201      	movs	r2, #1
 8009036:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2201      	movs	r2, #1
 800903e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2201      	movs	r2, #1
 8009046:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2201      	movs	r2, #1
 800904e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2201      	movs	r2, #1
 8009056:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800905a:	2300      	movs	r3, #0
}
 800905c:	4618      	mov	r0, r3
 800905e:	3718      	adds	r7, #24
 8009060:	46bd      	mov	sp, r7
 8009062:	bd80      	pop	{r7, pc}
 8009064:	fffebff8 	.word	0xfffebff8
 8009068:	fffffcfc 	.word	0xfffffcfc
 800906c:	fffff3f3 	.word	0xfffff3f3
 8009070:	ffff0f0f 	.word	0xffff0f0f

08009074 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009084:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800908c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009094:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800909c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800909e:	683b      	ldr	r3, [r7, #0]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d110      	bne.n	80090c6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80090a4:	7bfb      	ldrb	r3, [r7, #15]
 80090a6:	2b01      	cmp	r3, #1
 80090a8:	d102      	bne.n	80090b0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80090aa:	7b7b      	ldrb	r3, [r7, #13]
 80090ac:	2b01      	cmp	r3, #1
 80090ae:	d001      	beq.n	80090b4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	e089      	b.n	80091c8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2202      	movs	r2, #2
 80090b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2202      	movs	r2, #2
 80090c0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80090c4:	e031      	b.n	800912a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	2b04      	cmp	r3, #4
 80090ca:	d110      	bne.n	80090ee <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80090cc:	7bbb      	ldrb	r3, [r7, #14]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d102      	bne.n	80090d8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80090d2:	7b3b      	ldrb	r3, [r7, #12]
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d001      	beq.n	80090dc <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80090d8:	2301      	movs	r3, #1
 80090da:	e075      	b.n	80091c8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2202      	movs	r2, #2
 80090e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2202      	movs	r2, #2
 80090e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80090ec:	e01d      	b.n	800912a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80090ee:	7bfb      	ldrb	r3, [r7, #15]
 80090f0:	2b01      	cmp	r3, #1
 80090f2:	d108      	bne.n	8009106 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80090f4:	7bbb      	ldrb	r3, [r7, #14]
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d105      	bne.n	8009106 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80090fa:	7b7b      	ldrb	r3, [r7, #13]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d102      	bne.n	8009106 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009100:	7b3b      	ldrb	r3, [r7, #12]
 8009102:	2b01      	cmp	r3, #1
 8009104:	d001      	beq.n	800910a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e05e      	b.n	80091c8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2202      	movs	r2, #2
 800910e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2202      	movs	r2, #2
 8009116:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	2202      	movs	r2, #2
 800911e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2202      	movs	r2, #2
 8009126:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d003      	beq.n	8009138 <HAL_TIM_Encoder_Start_IT+0xc4>
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	2b04      	cmp	r3, #4
 8009134:	d010      	beq.n	8009158 <HAL_TIM_Encoder_Start_IT+0xe4>
 8009136:	e01f      	b.n	8009178 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	2201      	movs	r2, #1
 800913e:	2100      	movs	r1, #0
 8009140:	4618      	mov	r0, r3
 8009142:	f000 ff9b 	bl	800a07c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	68da      	ldr	r2, [r3, #12]
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f042 0202 	orr.w	r2, r2, #2
 8009154:	60da      	str	r2, [r3, #12]
      break;
 8009156:	e02e      	b.n	80091b6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	2201      	movs	r2, #1
 800915e:	2104      	movs	r1, #4
 8009160:	4618      	mov	r0, r3
 8009162:	f000 ff8b 	bl	800a07c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68da      	ldr	r2, [r3, #12]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f042 0204 	orr.w	r2, r2, #4
 8009174:	60da      	str	r2, [r3, #12]
      break;
 8009176:	e01e      	b.n	80091b6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2201      	movs	r2, #1
 800917e:	2100      	movs	r1, #0
 8009180:	4618      	mov	r0, r3
 8009182:	f000 ff7b 	bl	800a07c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	2201      	movs	r2, #1
 800918c:	2104      	movs	r1, #4
 800918e:	4618      	mov	r0, r3
 8009190:	f000 ff74 	bl	800a07c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	68da      	ldr	r2, [r3, #12]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f042 0202 	orr.w	r2, r2, #2
 80091a2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68da      	ldr	r2, [r3, #12]
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f042 0204 	orr.w	r2, r2, #4
 80091b2:	60da      	str	r2, [r3, #12]
      break;
 80091b4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	681a      	ldr	r2, [r3, #0]
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	f042 0201 	orr.w	r2, r2, #1
 80091c4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80091c6:	2300      	movs	r3, #0
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	f003 0302 	and.w	r3, r3, #2
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d020      	beq.n	8009234 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f003 0302 	and.w	r3, r3, #2
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d01b      	beq.n	8009234 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	f06f 0202 	mvn.w	r2, #2
 8009204:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2201      	movs	r2, #1
 800920a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	699b      	ldr	r3, [r3, #24]
 8009212:	f003 0303 	and.w	r3, r3, #3
 8009216:	2b00      	cmp	r3, #0
 8009218:	d003      	beq.n	8009222 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f7f7 fdae 	bl	8000d7c <HAL_TIM_IC_CaptureCallback>
 8009220:	e005      	b.n	800922e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 faf2 	bl	800980c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 faf9 	bl	8009820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	f003 0304 	and.w	r3, r3, #4
 800923a:	2b00      	cmp	r3, #0
 800923c:	d020      	beq.n	8009280 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	f003 0304 	and.w	r3, r3, #4
 8009244:	2b00      	cmp	r3, #0
 8009246:	d01b      	beq.n	8009280 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f06f 0204 	mvn.w	r2, #4
 8009250:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2202      	movs	r2, #2
 8009256:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	699b      	ldr	r3, [r3, #24]
 800925e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009262:	2b00      	cmp	r3, #0
 8009264:	d003      	beq.n	800926e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f7f7 fd88 	bl	8000d7c <HAL_TIM_IC_CaptureCallback>
 800926c:	e005      	b.n	800927a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 facc 	bl	800980c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 fad3 	bl	8009820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	f003 0308 	and.w	r3, r3, #8
 8009286:	2b00      	cmp	r3, #0
 8009288:	d020      	beq.n	80092cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f003 0308 	and.w	r3, r3, #8
 8009290:	2b00      	cmp	r3, #0
 8009292:	d01b      	beq.n	80092cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f06f 0208 	mvn.w	r2, #8
 800929c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2204      	movs	r2, #4
 80092a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	69db      	ldr	r3, [r3, #28]
 80092aa:	f003 0303 	and.w	r3, r3, #3
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d003      	beq.n	80092ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f7f7 fd62 	bl	8000d7c <HAL_TIM_IC_CaptureCallback>
 80092b8:	e005      	b.n	80092c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 faa6 	bl	800980c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 faad 	bl	8009820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2200      	movs	r2, #0
 80092ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	f003 0310 	and.w	r3, r3, #16
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d020      	beq.n	8009318 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	f003 0310 	and.w	r3, r3, #16
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d01b      	beq.n	8009318 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f06f 0210 	mvn.w	r2, #16
 80092e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2208      	movs	r2, #8
 80092ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	69db      	ldr	r3, [r3, #28]
 80092f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d003      	beq.n	8009306 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f7f7 fd3c 	bl	8000d7c <HAL_TIM_IC_CaptureCallback>
 8009304:	e005      	b.n	8009312 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f000 fa80 	bl	800980c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 fa87 	bl	8009820 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	f003 0301 	and.w	r3, r3, #1
 800931e:	2b00      	cmp	r3, #0
 8009320:	d00c      	beq.n	800933c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	f003 0301 	and.w	r3, r3, #1
 8009328:	2b00      	cmp	r3, #0
 800932a:	d007      	beq.n	800933c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f06f 0201 	mvn.w	r2, #1
 8009334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	f000 fa5e 	bl	80097f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009342:	2b00      	cmp	r3, #0
 8009344:	d104      	bne.n	8009350 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800934c:	2b00      	cmp	r3, #0
 800934e:	d00c      	beq.n	800936a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009356:	2b00      	cmp	r3, #0
 8009358:	d007      	beq.n	800936a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8009362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 ff47 	bl	800a1f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009370:	2b00      	cmp	r3, #0
 8009372:	d00c      	beq.n	800938e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800937a:	2b00      	cmp	r3, #0
 800937c:	d007      	beq.n	800938e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8009386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f000 ff3f 	bl	800a20c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00c      	beq.n	80093b2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d007      	beq.n	80093b2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80093aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80093ac:	6878      	ldr	r0, [r7, #4]
 80093ae:	f000 fa41 	bl	8009834 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	f003 0320 	and.w	r3, r3, #32
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d00c      	beq.n	80093d6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	f003 0320 	and.w	r3, r3, #32
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d007      	beq.n	80093d6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f06f 0220 	mvn.w	r2, #32
 80093ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 ff07 	bl	800a1e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80093d6:	bf00      	nop
 80093d8:	3710      	adds	r7, #16
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}
	...

080093e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	60f8      	str	r0, [r7, #12]
 80093e8:	60b9      	str	r1, [r7, #8]
 80093ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093ec:	2300      	movs	r3, #0
 80093ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80093f6:	2b01      	cmp	r3, #1
 80093f8:	d101      	bne.n	80093fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80093fa:	2302      	movs	r3, #2
 80093fc:	e0ff      	b.n	80095fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2201      	movs	r2, #1
 8009402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2b14      	cmp	r3, #20
 800940a:	f200 80f0 	bhi.w	80095ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800940e:	a201      	add	r2, pc, #4	@ (adr r2, 8009414 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009414:	08009469 	.word	0x08009469
 8009418:	080095ef 	.word	0x080095ef
 800941c:	080095ef 	.word	0x080095ef
 8009420:	080095ef 	.word	0x080095ef
 8009424:	080094a9 	.word	0x080094a9
 8009428:	080095ef 	.word	0x080095ef
 800942c:	080095ef 	.word	0x080095ef
 8009430:	080095ef 	.word	0x080095ef
 8009434:	080094eb 	.word	0x080094eb
 8009438:	080095ef 	.word	0x080095ef
 800943c:	080095ef 	.word	0x080095ef
 8009440:	080095ef 	.word	0x080095ef
 8009444:	0800952b 	.word	0x0800952b
 8009448:	080095ef 	.word	0x080095ef
 800944c:	080095ef 	.word	0x080095ef
 8009450:	080095ef 	.word	0x080095ef
 8009454:	0800956d 	.word	0x0800956d
 8009458:	080095ef 	.word	0x080095ef
 800945c:	080095ef 	.word	0x080095ef
 8009460:	080095ef 	.word	0x080095ef
 8009464:	080095ad 	.word	0x080095ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	68b9      	ldr	r1, [r7, #8]
 800946e:	4618      	mov	r0, r3
 8009470:	f000 fa90 	bl	8009994 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	699a      	ldr	r2, [r3, #24]
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f042 0208 	orr.w	r2, r2, #8
 8009482:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	699a      	ldr	r2, [r3, #24]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f022 0204 	bic.w	r2, r2, #4
 8009492:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	6999      	ldr	r1, [r3, #24]
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	691a      	ldr	r2, [r3, #16]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	430a      	orrs	r2, r1
 80094a4:	619a      	str	r2, [r3, #24]
      break;
 80094a6:	e0a5      	b.n	80095f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	68b9      	ldr	r1, [r7, #8]
 80094ae:	4618      	mov	r0, r3
 80094b0:	f000 fb00 	bl	8009ab4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	699a      	ldr	r2, [r3, #24]
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80094c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	699a      	ldr	r2, [r3, #24]
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80094d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	6999      	ldr	r1, [r3, #24]
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	021a      	lsls	r2, r3, #8
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	430a      	orrs	r2, r1
 80094e6:	619a      	str	r2, [r3, #24]
      break;
 80094e8:	e084      	b.n	80095f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68b9      	ldr	r1, [r7, #8]
 80094f0:	4618      	mov	r0, r3
 80094f2:	f000 fb69 	bl	8009bc8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	69da      	ldr	r2, [r3, #28]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f042 0208 	orr.w	r2, r2, #8
 8009504:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	69da      	ldr	r2, [r3, #28]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	f022 0204 	bic.w	r2, r2, #4
 8009514:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	69d9      	ldr	r1, [r3, #28]
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	691a      	ldr	r2, [r3, #16]
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	430a      	orrs	r2, r1
 8009526:	61da      	str	r2, [r3, #28]
      break;
 8009528:	e064      	b.n	80095f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	68b9      	ldr	r1, [r7, #8]
 8009530:	4618      	mov	r0, r3
 8009532:	f000 fbd1 	bl	8009cd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	69da      	ldr	r2, [r3, #28]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009544:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	69da      	ldr	r2, [r3, #28]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009554:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	69d9      	ldr	r1, [r3, #28]
 800955c:	68bb      	ldr	r3, [r7, #8]
 800955e:	691b      	ldr	r3, [r3, #16]
 8009560:	021a      	lsls	r2, r3, #8
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	430a      	orrs	r2, r1
 8009568:	61da      	str	r2, [r3, #28]
      break;
 800956a:	e043      	b.n	80095f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68b9      	ldr	r1, [r7, #8]
 8009572:	4618      	mov	r0, r3
 8009574:	f000 fc1a 	bl	8009dac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	f042 0208 	orr.w	r2, r2, #8
 8009586:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f022 0204 	bic.w	r2, r2, #4
 8009596:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	691a      	ldr	r2, [r3, #16]
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	430a      	orrs	r2, r1
 80095a8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80095aa:	e023      	b.n	80095f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	68b9      	ldr	r1, [r7, #8]
 80095b2:	4618      	mov	r0, r3
 80095b4:	f000 fc5e 	bl	8009e74 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80095c6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80095d6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	691b      	ldr	r3, [r3, #16]
 80095e2:	021a      	lsls	r2, r3, #8
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	430a      	orrs	r2, r1
 80095ea:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80095ec:	e002      	b.n	80095f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	75fb      	strb	r3, [r7, #23]
      break;
 80095f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	2200      	movs	r2, #0
 80095f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80095fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3718      	adds	r7, #24
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}
 8009606:	bf00      	nop

08009608 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b084      	sub	sp, #16
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009612:	2300      	movs	r3, #0
 8009614:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800961c:	2b01      	cmp	r3, #1
 800961e:	d101      	bne.n	8009624 <HAL_TIM_ConfigClockSource+0x1c>
 8009620:	2302      	movs	r3, #2
 8009622:	e0dc      	b.n	80097de <HAL_TIM_ConfigClockSource+0x1d6>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	2201      	movs	r2, #1
 8009628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2202      	movs	r2, #2
 8009630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800963c:	68ba      	ldr	r2, [r7, #8]
 800963e:	4b6a      	ldr	r3, [pc, #424]	@ (80097e8 <HAL_TIM_ConfigClockSource+0x1e0>)
 8009640:	4013      	ands	r3, r2
 8009642:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800964a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	68ba      	ldr	r2, [r7, #8]
 8009652:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a64      	ldr	r2, [pc, #400]	@ (80097ec <HAL_TIM_ConfigClockSource+0x1e4>)
 800965a:	4293      	cmp	r3, r2
 800965c:	f000 80a9 	beq.w	80097b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009660:	4a62      	ldr	r2, [pc, #392]	@ (80097ec <HAL_TIM_ConfigClockSource+0x1e4>)
 8009662:	4293      	cmp	r3, r2
 8009664:	f200 80ae 	bhi.w	80097c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009668:	4a61      	ldr	r2, [pc, #388]	@ (80097f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800966a:	4293      	cmp	r3, r2
 800966c:	f000 80a1 	beq.w	80097b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009670:	4a5f      	ldr	r2, [pc, #380]	@ (80097f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 8009672:	4293      	cmp	r3, r2
 8009674:	f200 80a6 	bhi.w	80097c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009678:	4a5e      	ldr	r2, [pc, #376]	@ (80097f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800967a:	4293      	cmp	r3, r2
 800967c:	f000 8099 	beq.w	80097b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009680:	4a5c      	ldr	r2, [pc, #368]	@ (80097f4 <HAL_TIM_ConfigClockSource+0x1ec>)
 8009682:	4293      	cmp	r3, r2
 8009684:	f200 809e 	bhi.w	80097c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009688:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800968c:	f000 8091 	beq.w	80097b2 <HAL_TIM_ConfigClockSource+0x1aa>
 8009690:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8009694:	f200 8096 	bhi.w	80097c4 <HAL_TIM_ConfigClockSource+0x1bc>
 8009698:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800969c:	f000 8089 	beq.w	80097b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80096a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80096a4:	f200 808e 	bhi.w	80097c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80096a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096ac:	d03e      	beq.n	800972c <HAL_TIM_ConfigClockSource+0x124>
 80096ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80096b2:	f200 8087 	bhi.w	80097c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80096b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096ba:	f000 8086 	beq.w	80097ca <HAL_TIM_ConfigClockSource+0x1c2>
 80096be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096c2:	d87f      	bhi.n	80097c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80096c4:	2b70      	cmp	r3, #112	@ 0x70
 80096c6:	d01a      	beq.n	80096fe <HAL_TIM_ConfigClockSource+0xf6>
 80096c8:	2b70      	cmp	r3, #112	@ 0x70
 80096ca:	d87b      	bhi.n	80097c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80096cc:	2b60      	cmp	r3, #96	@ 0x60
 80096ce:	d050      	beq.n	8009772 <HAL_TIM_ConfigClockSource+0x16a>
 80096d0:	2b60      	cmp	r3, #96	@ 0x60
 80096d2:	d877      	bhi.n	80097c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80096d4:	2b50      	cmp	r3, #80	@ 0x50
 80096d6:	d03c      	beq.n	8009752 <HAL_TIM_ConfigClockSource+0x14a>
 80096d8:	2b50      	cmp	r3, #80	@ 0x50
 80096da:	d873      	bhi.n	80097c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80096dc:	2b40      	cmp	r3, #64	@ 0x40
 80096de:	d058      	beq.n	8009792 <HAL_TIM_ConfigClockSource+0x18a>
 80096e0:	2b40      	cmp	r3, #64	@ 0x40
 80096e2:	d86f      	bhi.n	80097c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80096e4:	2b30      	cmp	r3, #48	@ 0x30
 80096e6:	d064      	beq.n	80097b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80096e8:	2b30      	cmp	r3, #48	@ 0x30
 80096ea:	d86b      	bhi.n	80097c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80096ec:	2b20      	cmp	r3, #32
 80096ee:	d060      	beq.n	80097b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80096f0:	2b20      	cmp	r3, #32
 80096f2:	d867      	bhi.n	80097c4 <HAL_TIM_ConfigClockSource+0x1bc>
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d05c      	beq.n	80097b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80096f8:	2b10      	cmp	r3, #16
 80096fa:	d05a      	beq.n	80097b2 <HAL_TIM_ConfigClockSource+0x1aa>
 80096fc:	e062      	b.n	80097c4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800970e:	f000 fc95 	bl	800a03c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	689b      	ldr	r3, [r3, #8]
 8009718:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009720:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	68ba      	ldr	r2, [r7, #8]
 8009728:	609a      	str	r2, [r3, #8]
      break;
 800972a:	e04f      	b.n	80097cc <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009730:	683b      	ldr	r3, [r7, #0]
 8009732:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800973c:	f000 fc7e 	bl	800a03c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	689a      	ldr	r2, [r3, #8]
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800974e:	609a      	str	r2, [r3, #8]
      break;
 8009750:	e03c      	b.n	80097cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800975a:	683b      	ldr	r3, [r7, #0]
 800975c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800975e:	461a      	mov	r2, r3
 8009760:	f000 fbee 	bl	8009f40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2150      	movs	r1, #80	@ 0x50
 800976a:	4618      	mov	r0, r3
 800976c:	f000 fc48 	bl	800a000 <TIM_ITRx_SetConfig>
      break;
 8009770:	e02c      	b.n	80097cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009776:	683b      	ldr	r3, [r7, #0]
 8009778:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800977e:	461a      	mov	r2, r3
 8009780:	f000 fc0d 	bl	8009f9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	2160      	movs	r1, #96	@ 0x60
 800978a:	4618      	mov	r0, r3
 800978c:	f000 fc38 	bl	800a000 <TIM_ITRx_SetConfig>
      break;
 8009790:	e01c      	b.n	80097cc <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800979e:	461a      	mov	r2, r3
 80097a0:	f000 fbce 	bl	8009f40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2140      	movs	r1, #64	@ 0x40
 80097aa:	4618      	mov	r0, r3
 80097ac:	f000 fc28 	bl	800a000 <TIM_ITRx_SetConfig>
      break;
 80097b0:	e00c      	b.n	80097cc <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681a      	ldr	r2, [r3, #0]
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4619      	mov	r1, r3
 80097bc:	4610      	mov	r0, r2
 80097be:	f000 fc1f 	bl	800a000 <TIM_ITRx_SetConfig>
      break;
 80097c2:	e003      	b.n	80097cc <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80097c4:	2301      	movs	r3, #1
 80097c6:	73fb      	strb	r3, [r7, #15]
      break;
 80097c8:	e000      	b.n	80097cc <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80097ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80097dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	ffceff88 	.word	0xffceff88
 80097ec:	00100040 	.word	0x00100040
 80097f0:	00100030 	.word	0x00100030
 80097f4:	00100020 	.word	0x00100020

080097f8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009800:	bf00      	nop
 8009802:	370c      	adds	r7, #12
 8009804:	46bd      	mov	sp, r7
 8009806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800980a:	4770      	bx	lr

0800980c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009814:	bf00      	nop
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009828:	bf00      	nop
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800983c:	bf00      	nop
 800983e:	370c      	adds	r7, #12
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	4a46      	ldr	r2, [pc, #280]	@ (8009974 <TIM_Base_SetConfig+0x12c>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d013      	beq.n	8009888 <TIM_Base_SetConfig+0x40>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009866:	d00f      	beq.n	8009888 <TIM_Base_SetConfig+0x40>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4a43      	ldr	r2, [pc, #268]	@ (8009978 <TIM_Base_SetConfig+0x130>)
 800986c:	4293      	cmp	r3, r2
 800986e:	d00b      	beq.n	8009888 <TIM_Base_SetConfig+0x40>
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	4a42      	ldr	r2, [pc, #264]	@ (800997c <TIM_Base_SetConfig+0x134>)
 8009874:	4293      	cmp	r3, r2
 8009876:	d007      	beq.n	8009888 <TIM_Base_SetConfig+0x40>
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	4a41      	ldr	r2, [pc, #260]	@ (8009980 <TIM_Base_SetConfig+0x138>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d003      	beq.n	8009888 <TIM_Base_SetConfig+0x40>
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a40      	ldr	r2, [pc, #256]	@ (8009984 <TIM_Base_SetConfig+0x13c>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d108      	bne.n	800989a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800988e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	4313      	orrs	r3, r2
 8009898:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4a35      	ldr	r2, [pc, #212]	@ (8009974 <TIM_Base_SetConfig+0x12c>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d01f      	beq.n	80098e2 <TIM_Base_SetConfig+0x9a>
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80098a8:	d01b      	beq.n	80098e2 <TIM_Base_SetConfig+0x9a>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	4a32      	ldr	r2, [pc, #200]	@ (8009978 <TIM_Base_SetConfig+0x130>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d017      	beq.n	80098e2 <TIM_Base_SetConfig+0x9a>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	4a31      	ldr	r2, [pc, #196]	@ (800997c <TIM_Base_SetConfig+0x134>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d013      	beq.n	80098e2 <TIM_Base_SetConfig+0x9a>
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	4a30      	ldr	r2, [pc, #192]	@ (8009980 <TIM_Base_SetConfig+0x138>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d00f      	beq.n	80098e2 <TIM_Base_SetConfig+0x9a>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a2f      	ldr	r2, [pc, #188]	@ (8009984 <TIM_Base_SetConfig+0x13c>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d00b      	beq.n	80098e2 <TIM_Base_SetConfig+0x9a>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	4a2e      	ldr	r2, [pc, #184]	@ (8009988 <TIM_Base_SetConfig+0x140>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d007      	beq.n	80098e2 <TIM_Base_SetConfig+0x9a>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a2d      	ldr	r2, [pc, #180]	@ (800998c <TIM_Base_SetConfig+0x144>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d003      	beq.n	80098e2 <TIM_Base_SetConfig+0x9a>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a2c      	ldr	r2, [pc, #176]	@ (8009990 <TIM_Base_SetConfig+0x148>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d108      	bne.n	80098f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80098e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	68db      	ldr	r3, [r3, #12]
 80098ee:	68fa      	ldr	r2, [r7, #12]
 80098f0:	4313      	orrs	r3, r2
 80098f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	695b      	ldr	r3, [r3, #20]
 80098fe:	4313      	orrs	r3, r2
 8009900:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	68fa      	ldr	r2, [r7, #12]
 8009906:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	689a      	ldr	r2, [r3, #8]
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	4a16      	ldr	r2, [pc, #88]	@ (8009974 <TIM_Base_SetConfig+0x12c>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d00f      	beq.n	8009940 <TIM_Base_SetConfig+0xf8>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a18      	ldr	r2, [pc, #96]	@ (8009984 <TIM_Base_SetConfig+0x13c>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d00b      	beq.n	8009940 <TIM_Base_SetConfig+0xf8>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a17      	ldr	r2, [pc, #92]	@ (8009988 <TIM_Base_SetConfig+0x140>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d007      	beq.n	8009940 <TIM_Base_SetConfig+0xf8>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a16      	ldr	r2, [pc, #88]	@ (800998c <TIM_Base_SetConfig+0x144>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d003      	beq.n	8009940 <TIM_Base_SetConfig+0xf8>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4a15      	ldr	r2, [pc, #84]	@ (8009990 <TIM_Base_SetConfig+0x148>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d103      	bne.n	8009948 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	691a      	ldr	r2, [r3, #16]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	2201      	movs	r2, #1
 800994c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	691b      	ldr	r3, [r3, #16]
 8009952:	f003 0301 	and.w	r3, r3, #1
 8009956:	2b01      	cmp	r3, #1
 8009958:	d105      	bne.n	8009966 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	691b      	ldr	r3, [r3, #16]
 800995e:	f023 0201 	bic.w	r2, r3, #1
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	611a      	str	r2, [r3, #16]
  }
}
 8009966:	bf00      	nop
 8009968:	3714      	adds	r7, #20
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr
 8009972:	bf00      	nop
 8009974:	40010000 	.word	0x40010000
 8009978:	40000400 	.word	0x40000400
 800997c:	40000800 	.word	0x40000800
 8009980:	40000c00 	.word	0x40000c00
 8009984:	40010400 	.word	0x40010400
 8009988:	40014000 	.word	0x40014000
 800998c:	40014400 	.word	0x40014400
 8009990:	40014800 	.word	0x40014800

08009994 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009994:	b480      	push	{r7}
 8009996:	b087      	sub	sp, #28
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a1b      	ldr	r3, [r3, #32]
 80099a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	6a1b      	ldr	r3, [r3, #32]
 80099a8:	f023 0201 	bic.w	r2, r3, #1
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	699b      	ldr	r3, [r3, #24]
 80099ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80099bc:	68fa      	ldr	r2, [r7, #12]
 80099be:	4b37      	ldr	r3, [pc, #220]	@ (8009a9c <TIM_OC1_SetConfig+0x108>)
 80099c0:	4013      	ands	r3, r2
 80099c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f023 0303 	bic.w	r3, r3, #3
 80099ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	68fa      	ldr	r2, [r7, #12]
 80099d2:	4313      	orrs	r3, r2
 80099d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	f023 0302 	bic.w	r3, r3, #2
 80099dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	689b      	ldr	r3, [r3, #8]
 80099e2:	697a      	ldr	r2, [r7, #20]
 80099e4:	4313      	orrs	r3, r2
 80099e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a2d      	ldr	r2, [pc, #180]	@ (8009aa0 <TIM_OC1_SetConfig+0x10c>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d00f      	beq.n	8009a10 <TIM_OC1_SetConfig+0x7c>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4a2c      	ldr	r2, [pc, #176]	@ (8009aa4 <TIM_OC1_SetConfig+0x110>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d00b      	beq.n	8009a10 <TIM_OC1_SetConfig+0x7c>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4a2b      	ldr	r2, [pc, #172]	@ (8009aa8 <TIM_OC1_SetConfig+0x114>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d007      	beq.n	8009a10 <TIM_OC1_SetConfig+0x7c>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a2a      	ldr	r2, [pc, #168]	@ (8009aac <TIM_OC1_SetConfig+0x118>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d003      	beq.n	8009a10 <TIM_OC1_SetConfig+0x7c>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	4a29      	ldr	r2, [pc, #164]	@ (8009ab0 <TIM_OC1_SetConfig+0x11c>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d10c      	bne.n	8009a2a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	f023 0308 	bic.w	r3, r3, #8
 8009a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	68db      	ldr	r3, [r3, #12]
 8009a1c:	697a      	ldr	r2, [r7, #20]
 8009a1e:	4313      	orrs	r3, r2
 8009a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	f023 0304 	bic.w	r3, r3, #4
 8009a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4a1c      	ldr	r2, [pc, #112]	@ (8009aa0 <TIM_OC1_SetConfig+0x10c>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d00f      	beq.n	8009a52 <TIM_OC1_SetConfig+0xbe>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4a1b      	ldr	r2, [pc, #108]	@ (8009aa4 <TIM_OC1_SetConfig+0x110>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d00b      	beq.n	8009a52 <TIM_OC1_SetConfig+0xbe>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	4a1a      	ldr	r2, [pc, #104]	@ (8009aa8 <TIM_OC1_SetConfig+0x114>)
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	d007      	beq.n	8009a52 <TIM_OC1_SetConfig+0xbe>
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	4a19      	ldr	r2, [pc, #100]	@ (8009aac <TIM_OC1_SetConfig+0x118>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d003      	beq.n	8009a52 <TIM_OC1_SetConfig+0xbe>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4a18      	ldr	r2, [pc, #96]	@ (8009ab0 <TIM_OC1_SetConfig+0x11c>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d111      	bne.n	8009a76 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	695b      	ldr	r3, [r3, #20]
 8009a66:	693a      	ldr	r2, [r7, #16]
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	699b      	ldr	r3, [r3, #24]
 8009a70:	693a      	ldr	r2, [r7, #16]
 8009a72:	4313      	orrs	r3, r2
 8009a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	693a      	ldr	r2, [r7, #16]
 8009a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	68fa      	ldr	r2, [r7, #12]
 8009a80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	685a      	ldr	r2, [r3, #4]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	697a      	ldr	r2, [r7, #20]
 8009a8e:	621a      	str	r2, [r3, #32]
}
 8009a90:	bf00      	nop
 8009a92:	371c      	adds	r7, #28
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr
 8009a9c:	fffeff8f 	.word	0xfffeff8f
 8009aa0:	40010000 	.word	0x40010000
 8009aa4:	40010400 	.word	0x40010400
 8009aa8:	40014000 	.word	0x40014000
 8009aac:	40014400 	.word	0x40014400
 8009ab0:	40014800 	.word	0x40014800

08009ab4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b087      	sub	sp, #28
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a1b      	ldr	r3, [r3, #32]
 8009ac2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6a1b      	ldr	r3, [r3, #32]
 8009ac8:	f023 0210 	bic.w	r2, r3, #16
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	699b      	ldr	r3, [r3, #24]
 8009ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009adc:	68fa      	ldr	r2, [r7, #12]
 8009ade:	4b34      	ldr	r3, [pc, #208]	@ (8009bb0 <TIM_OC2_SetConfig+0xfc>)
 8009ae0:	4013      	ands	r3, r2
 8009ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	021b      	lsls	r3, r3, #8
 8009af2:	68fa      	ldr	r2, [r7, #12]
 8009af4:	4313      	orrs	r3, r2
 8009af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	f023 0320 	bic.w	r3, r3, #32
 8009afe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b00:	683b      	ldr	r3, [r7, #0]
 8009b02:	689b      	ldr	r3, [r3, #8]
 8009b04:	011b      	lsls	r3, r3, #4
 8009b06:	697a      	ldr	r2, [r7, #20]
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	4a29      	ldr	r2, [pc, #164]	@ (8009bb4 <TIM_OC2_SetConfig+0x100>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d003      	beq.n	8009b1c <TIM_OC2_SetConfig+0x68>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	4a28      	ldr	r2, [pc, #160]	@ (8009bb8 <TIM_OC2_SetConfig+0x104>)
 8009b18:	4293      	cmp	r3, r2
 8009b1a:	d10d      	bne.n	8009b38 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b1c:	697b      	ldr	r3, [r7, #20]
 8009b1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009b22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	68db      	ldr	r3, [r3, #12]
 8009b28:	011b      	lsls	r3, r3, #4
 8009b2a:	697a      	ldr	r2, [r7, #20]
 8009b2c:	4313      	orrs	r3, r2
 8009b2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b30:	697b      	ldr	r3, [r7, #20]
 8009b32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b36:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	4a1e      	ldr	r2, [pc, #120]	@ (8009bb4 <TIM_OC2_SetConfig+0x100>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d00f      	beq.n	8009b60 <TIM_OC2_SetConfig+0xac>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4a1d      	ldr	r2, [pc, #116]	@ (8009bb8 <TIM_OC2_SetConfig+0x104>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d00b      	beq.n	8009b60 <TIM_OC2_SetConfig+0xac>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a1c      	ldr	r2, [pc, #112]	@ (8009bbc <TIM_OC2_SetConfig+0x108>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d007      	beq.n	8009b60 <TIM_OC2_SetConfig+0xac>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4a1b      	ldr	r2, [pc, #108]	@ (8009bc0 <TIM_OC2_SetConfig+0x10c>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d003      	beq.n	8009b60 <TIM_OC2_SetConfig+0xac>
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	4a1a      	ldr	r2, [pc, #104]	@ (8009bc4 <TIM_OC2_SetConfig+0x110>)
 8009b5c:	4293      	cmp	r3, r2
 8009b5e:	d113      	bne.n	8009b88 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b60:	693b      	ldr	r3, [r7, #16]
 8009b62:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009b66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009b6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	695b      	ldr	r3, [r3, #20]
 8009b74:	009b      	lsls	r3, r3, #2
 8009b76:	693a      	ldr	r2, [r7, #16]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b7c:	683b      	ldr	r3, [r7, #0]
 8009b7e:	699b      	ldr	r3, [r3, #24]
 8009b80:	009b      	lsls	r3, r3, #2
 8009b82:	693a      	ldr	r2, [r7, #16]
 8009b84:	4313      	orrs	r3, r2
 8009b86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	693a      	ldr	r2, [r7, #16]
 8009b8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	68fa      	ldr	r2, [r7, #12]
 8009b92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	685a      	ldr	r2, [r3, #4]
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	697a      	ldr	r2, [r7, #20]
 8009ba0:	621a      	str	r2, [r3, #32]
}
 8009ba2:	bf00      	nop
 8009ba4:	371c      	adds	r7, #28
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bac:	4770      	bx	lr
 8009bae:	bf00      	nop
 8009bb0:	feff8fff 	.word	0xfeff8fff
 8009bb4:	40010000 	.word	0x40010000
 8009bb8:	40010400 	.word	0x40010400
 8009bbc:	40014000 	.word	0x40014000
 8009bc0:	40014400 	.word	0x40014400
 8009bc4:	40014800 	.word	0x40014800

08009bc8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b087      	sub	sp, #28
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6a1b      	ldr	r3, [r3, #32]
 8009bd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a1b      	ldr	r3, [r3, #32]
 8009bdc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	685b      	ldr	r3, [r3, #4]
 8009be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	69db      	ldr	r3, [r3, #28]
 8009bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009bf0:	68fa      	ldr	r2, [r7, #12]
 8009bf2:	4b33      	ldr	r3, [pc, #204]	@ (8009cc0 <TIM_OC3_SetConfig+0xf8>)
 8009bf4:	4013      	ands	r3, r2
 8009bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	f023 0303 	bic.w	r3, r3, #3
 8009bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	68fa      	ldr	r2, [r7, #12]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009c10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c12:	683b      	ldr	r3, [r7, #0]
 8009c14:	689b      	ldr	r3, [r3, #8]
 8009c16:	021b      	lsls	r3, r3, #8
 8009c18:	697a      	ldr	r2, [r7, #20]
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	4a28      	ldr	r2, [pc, #160]	@ (8009cc4 <TIM_OC3_SetConfig+0xfc>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d003      	beq.n	8009c2e <TIM_OC3_SetConfig+0x66>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	4a27      	ldr	r2, [pc, #156]	@ (8009cc8 <TIM_OC3_SetConfig+0x100>)
 8009c2a:	4293      	cmp	r3, r2
 8009c2c:	d10d      	bne.n	8009c4a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009c34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c36:	683b      	ldr	r3, [r7, #0]
 8009c38:	68db      	ldr	r3, [r3, #12]
 8009c3a:	021b      	lsls	r3, r3, #8
 8009c3c:	697a      	ldr	r2, [r7, #20]
 8009c3e:	4313      	orrs	r3, r2
 8009c40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009c48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	4a1d      	ldr	r2, [pc, #116]	@ (8009cc4 <TIM_OC3_SetConfig+0xfc>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d00f      	beq.n	8009c72 <TIM_OC3_SetConfig+0xaa>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	4a1c      	ldr	r2, [pc, #112]	@ (8009cc8 <TIM_OC3_SetConfig+0x100>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d00b      	beq.n	8009c72 <TIM_OC3_SetConfig+0xaa>
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	4a1b      	ldr	r2, [pc, #108]	@ (8009ccc <TIM_OC3_SetConfig+0x104>)
 8009c5e:	4293      	cmp	r3, r2
 8009c60:	d007      	beq.n	8009c72 <TIM_OC3_SetConfig+0xaa>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	4a1a      	ldr	r2, [pc, #104]	@ (8009cd0 <TIM_OC3_SetConfig+0x108>)
 8009c66:	4293      	cmp	r3, r2
 8009c68:	d003      	beq.n	8009c72 <TIM_OC3_SetConfig+0xaa>
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4a19      	ldr	r2, [pc, #100]	@ (8009cd4 <TIM_OC3_SetConfig+0x10c>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d113      	bne.n	8009c9a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009c78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009c80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	695b      	ldr	r3, [r3, #20]
 8009c86:	011b      	lsls	r3, r3, #4
 8009c88:	693a      	ldr	r2, [r7, #16]
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c8e:	683b      	ldr	r3, [r7, #0]
 8009c90:	699b      	ldr	r3, [r3, #24]
 8009c92:	011b      	lsls	r3, r3, #4
 8009c94:	693a      	ldr	r2, [r7, #16]
 8009c96:	4313      	orrs	r3, r2
 8009c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	693a      	ldr	r2, [r7, #16]
 8009c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	68fa      	ldr	r2, [r7, #12]
 8009ca4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	685a      	ldr	r2, [r3, #4]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	697a      	ldr	r2, [r7, #20]
 8009cb2:	621a      	str	r2, [r3, #32]
}
 8009cb4:	bf00      	nop
 8009cb6:	371c      	adds	r7, #28
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbe:	4770      	bx	lr
 8009cc0:	fffeff8f 	.word	0xfffeff8f
 8009cc4:	40010000 	.word	0x40010000
 8009cc8:	40010400 	.word	0x40010400
 8009ccc:	40014000 	.word	0x40014000
 8009cd0:	40014400 	.word	0x40014400
 8009cd4:	40014800 	.word	0x40014800

08009cd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b087      	sub	sp, #28
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6a1b      	ldr	r3, [r3, #32]
 8009cec:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	69db      	ldr	r3, [r3, #28]
 8009cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	4b24      	ldr	r3, [pc, #144]	@ (8009d94 <TIM_OC4_SetConfig+0xbc>)
 8009d04:	4013      	ands	r3, r2
 8009d06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009d0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d10:	683b      	ldr	r3, [r7, #0]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	021b      	lsls	r3, r3, #8
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	4313      	orrs	r3, r2
 8009d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009d22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	031b      	lsls	r3, r3, #12
 8009d2a:	693a      	ldr	r2, [r7, #16]
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	4a19      	ldr	r2, [pc, #100]	@ (8009d98 <TIM_OC4_SetConfig+0xc0>)
 8009d34:	4293      	cmp	r3, r2
 8009d36:	d00f      	beq.n	8009d58 <TIM_OC4_SetConfig+0x80>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	4a18      	ldr	r2, [pc, #96]	@ (8009d9c <TIM_OC4_SetConfig+0xc4>)
 8009d3c:	4293      	cmp	r3, r2
 8009d3e:	d00b      	beq.n	8009d58 <TIM_OC4_SetConfig+0x80>
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	4a17      	ldr	r2, [pc, #92]	@ (8009da0 <TIM_OC4_SetConfig+0xc8>)
 8009d44:	4293      	cmp	r3, r2
 8009d46:	d007      	beq.n	8009d58 <TIM_OC4_SetConfig+0x80>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	4a16      	ldr	r2, [pc, #88]	@ (8009da4 <TIM_OC4_SetConfig+0xcc>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d003      	beq.n	8009d58 <TIM_OC4_SetConfig+0x80>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	4a15      	ldr	r2, [pc, #84]	@ (8009da8 <TIM_OC4_SetConfig+0xd0>)
 8009d54:	4293      	cmp	r3, r2
 8009d56:	d109      	bne.n	8009d6c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009d5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	695b      	ldr	r3, [r3, #20]
 8009d64:	019b      	lsls	r3, r3, #6
 8009d66:	697a      	ldr	r2, [r7, #20]
 8009d68:	4313      	orrs	r3, r2
 8009d6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	697a      	ldr	r2, [r7, #20]
 8009d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	68fa      	ldr	r2, [r7, #12]
 8009d76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	685a      	ldr	r2, [r3, #4]
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	693a      	ldr	r2, [r7, #16]
 8009d84:	621a      	str	r2, [r3, #32]
}
 8009d86:	bf00      	nop
 8009d88:	371c      	adds	r7, #28
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	feff8fff 	.word	0xfeff8fff
 8009d98:	40010000 	.word	0x40010000
 8009d9c:	40010400 	.word	0x40010400
 8009da0:	40014000 	.word	0x40014000
 8009da4:	40014400 	.word	0x40014400
 8009da8:	40014800 	.word	0x40014800

08009dac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b087      	sub	sp, #28
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a1b      	ldr	r3, [r3, #32]
 8009dba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a1b      	ldr	r3, [r3, #32]
 8009dc0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009dd4:	68fa      	ldr	r2, [r7, #12]
 8009dd6:	4b21      	ldr	r3, [pc, #132]	@ (8009e5c <TIM_OC5_SetConfig+0xb0>)
 8009dd8:	4013      	ands	r3, r2
 8009dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	68fa      	ldr	r2, [r7, #12]
 8009de2:	4313      	orrs	r3, r2
 8009de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8009dec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	689b      	ldr	r3, [r3, #8]
 8009df2:	041b      	lsls	r3, r3, #16
 8009df4:	693a      	ldr	r2, [r7, #16]
 8009df6:	4313      	orrs	r3, r2
 8009df8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4a18      	ldr	r2, [pc, #96]	@ (8009e60 <TIM_OC5_SetConfig+0xb4>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d00f      	beq.n	8009e22 <TIM_OC5_SetConfig+0x76>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4a17      	ldr	r2, [pc, #92]	@ (8009e64 <TIM_OC5_SetConfig+0xb8>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d00b      	beq.n	8009e22 <TIM_OC5_SetConfig+0x76>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	4a16      	ldr	r2, [pc, #88]	@ (8009e68 <TIM_OC5_SetConfig+0xbc>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d007      	beq.n	8009e22 <TIM_OC5_SetConfig+0x76>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4a15      	ldr	r2, [pc, #84]	@ (8009e6c <TIM_OC5_SetConfig+0xc0>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d003      	beq.n	8009e22 <TIM_OC5_SetConfig+0x76>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4a14      	ldr	r2, [pc, #80]	@ (8009e70 <TIM_OC5_SetConfig+0xc4>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d109      	bne.n	8009e36 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009e28:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	695b      	ldr	r3, [r3, #20]
 8009e2e:	021b      	lsls	r3, r3, #8
 8009e30:	697a      	ldr	r2, [r7, #20]
 8009e32:	4313      	orrs	r3, r2
 8009e34:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	697a      	ldr	r2, [r7, #20]
 8009e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	68fa      	ldr	r2, [r7, #12]
 8009e40:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	685a      	ldr	r2, [r3, #4]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	693a      	ldr	r2, [r7, #16]
 8009e4e:	621a      	str	r2, [r3, #32]
}
 8009e50:	bf00      	nop
 8009e52:	371c      	adds	r7, #28
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr
 8009e5c:	fffeff8f 	.word	0xfffeff8f
 8009e60:	40010000 	.word	0x40010000
 8009e64:	40010400 	.word	0x40010400
 8009e68:	40014000 	.word	0x40014000
 8009e6c:	40014400 	.word	0x40014400
 8009e70:	40014800 	.word	0x40014800

08009e74 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b087      	sub	sp, #28
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6a1b      	ldr	r3, [r3, #32]
 8009e82:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6a1b      	ldr	r3, [r3, #32]
 8009e88:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	685b      	ldr	r3, [r3, #4]
 8009e94:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009e9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009e9c:	68fa      	ldr	r2, [r7, #12]
 8009e9e:	4b22      	ldr	r3, [pc, #136]	@ (8009f28 <TIM_OC6_SetConfig+0xb4>)
 8009ea0:	4013      	ands	r3, r2
 8009ea2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ea4:	683b      	ldr	r3, [r7, #0]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	021b      	lsls	r3, r3, #8
 8009eaa:	68fa      	ldr	r2, [r7, #12]
 8009eac:	4313      	orrs	r3, r2
 8009eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009eb0:	693b      	ldr	r3, [r7, #16]
 8009eb2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009eb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	051b      	lsls	r3, r3, #20
 8009ebe:	693a      	ldr	r2, [r7, #16]
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	4a19      	ldr	r2, [pc, #100]	@ (8009f2c <TIM_OC6_SetConfig+0xb8>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d00f      	beq.n	8009eec <TIM_OC6_SetConfig+0x78>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4a18      	ldr	r2, [pc, #96]	@ (8009f30 <TIM_OC6_SetConfig+0xbc>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d00b      	beq.n	8009eec <TIM_OC6_SetConfig+0x78>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	4a17      	ldr	r2, [pc, #92]	@ (8009f34 <TIM_OC6_SetConfig+0xc0>)
 8009ed8:	4293      	cmp	r3, r2
 8009eda:	d007      	beq.n	8009eec <TIM_OC6_SetConfig+0x78>
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	4a16      	ldr	r2, [pc, #88]	@ (8009f38 <TIM_OC6_SetConfig+0xc4>)
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d003      	beq.n	8009eec <TIM_OC6_SetConfig+0x78>
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	4a15      	ldr	r2, [pc, #84]	@ (8009f3c <TIM_OC6_SetConfig+0xc8>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d109      	bne.n	8009f00 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009eec:	697b      	ldr	r3, [r7, #20]
 8009eee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009ef2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009ef4:	683b      	ldr	r3, [r7, #0]
 8009ef6:	695b      	ldr	r3, [r3, #20]
 8009ef8:	029b      	lsls	r3, r3, #10
 8009efa:	697a      	ldr	r2, [r7, #20]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	697a      	ldr	r2, [r7, #20]
 8009f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	685a      	ldr	r2, [r3, #4]
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	693a      	ldr	r2, [r7, #16]
 8009f18:	621a      	str	r2, [r3, #32]
}
 8009f1a:	bf00      	nop
 8009f1c:	371c      	adds	r7, #28
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr
 8009f26:	bf00      	nop
 8009f28:	feff8fff 	.word	0xfeff8fff
 8009f2c:	40010000 	.word	0x40010000
 8009f30:	40010400 	.word	0x40010400
 8009f34:	40014000 	.word	0x40014000
 8009f38:	40014400 	.word	0x40014400
 8009f3c:	40014800 	.word	0x40014800

08009f40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b087      	sub	sp, #28
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	6a1b      	ldr	r3, [r3, #32]
 8009f50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	6a1b      	ldr	r3, [r3, #32]
 8009f56:	f023 0201 	bic.w	r2, r3, #1
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	699b      	ldr	r3, [r3, #24]
 8009f62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009f6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	011b      	lsls	r3, r3, #4
 8009f70:	693a      	ldr	r2, [r7, #16]
 8009f72:	4313      	orrs	r3, r2
 8009f74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	f023 030a 	bic.w	r3, r3, #10
 8009f7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009f7e:	697a      	ldr	r2, [r7, #20]
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	4313      	orrs	r3, r2
 8009f84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	693a      	ldr	r2, [r7, #16]
 8009f8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	697a      	ldr	r2, [r7, #20]
 8009f90:	621a      	str	r2, [r3, #32]
}
 8009f92:	bf00      	nop
 8009f94:	371c      	adds	r7, #28
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr

08009f9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f9e:	b480      	push	{r7}
 8009fa0:	b087      	sub	sp, #28
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	60f8      	str	r0, [r7, #12]
 8009fa6:	60b9      	str	r1, [r7, #8]
 8009fa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	6a1b      	ldr	r3, [r3, #32]
 8009fae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	6a1b      	ldr	r3, [r3, #32]
 8009fb4:	f023 0210 	bic.w	r2, r3, #16
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	699b      	ldr	r3, [r3, #24]
 8009fc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009fc2:	693b      	ldr	r3, [r7, #16]
 8009fc4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009fc8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	031b      	lsls	r3, r3, #12
 8009fce:	693a      	ldr	r2, [r7, #16]
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009fda:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009fdc:	68bb      	ldr	r3, [r7, #8]
 8009fde:	011b      	lsls	r3, r3, #4
 8009fe0:	697a      	ldr	r2, [r7, #20]
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	693a      	ldr	r2, [r7, #16]
 8009fea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	697a      	ldr	r2, [r7, #20]
 8009ff0:	621a      	str	r2, [r3, #32]
}
 8009ff2:	bf00      	nop
 8009ff4:	371c      	adds	r7, #28
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr
	...

0800a000 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a000:	b480      	push	{r7}
 800a002:	b085      	sub	sp, #20
 800a004:	af00      	add	r7, sp, #0
 800a006:	6078      	str	r0, [r7, #4]
 800a008:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	689b      	ldr	r3, [r3, #8]
 800a00e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a010:	68fa      	ldr	r2, [r7, #12]
 800a012:	4b09      	ldr	r3, [pc, #36]	@ (800a038 <TIM_ITRx_SetConfig+0x38>)
 800a014:	4013      	ands	r3, r2
 800a016:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a018:	683a      	ldr	r2, [r7, #0]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	4313      	orrs	r3, r2
 800a01e:	f043 0307 	orr.w	r3, r3, #7
 800a022:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	609a      	str	r2, [r3, #8]
}
 800a02a:	bf00      	nop
 800a02c:	3714      	adds	r7, #20
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	ffcfff8f 	.word	0xffcfff8f

0800a03c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b087      	sub	sp, #28
 800a040:	af00      	add	r7, sp, #0
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	60b9      	str	r1, [r7, #8]
 800a046:	607a      	str	r2, [r7, #4]
 800a048:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	689b      	ldr	r3, [r3, #8]
 800a04e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a056:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	021a      	lsls	r2, r3, #8
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	431a      	orrs	r2, r3
 800a060:	68bb      	ldr	r3, [r7, #8]
 800a062:	4313      	orrs	r3, r2
 800a064:	697a      	ldr	r2, [r7, #20]
 800a066:	4313      	orrs	r3, r2
 800a068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	697a      	ldr	r2, [r7, #20]
 800a06e:	609a      	str	r2, [r3, #8]
}
 800a070:	bf00      	nop
 800a072:	371c      	adds	r7, #28
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr

0800a07c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b087      	sub	sp, #28
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	f003 031f 	and.w	r3, r3, #31
 800a08e:	2201      	movs	r2, #1
 800a090:	fa02 f303 	lsl.w	r3, r2, r3
 800a094:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	6a1a      	ldr	r2, [r3, #32]
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	43db      	mvns	r3, r3
 800a09e:	401a      	ands	r2, r3
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	6a1a      	ldr	r2, [r3, #32]
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	f003 031f 	and.w	r3, r3, #31
 800a0ae:	6879      	ldr	r1, [r7, #4]
 800a0b0:	fa01 f303 	lsl.w	r3, r1, r3
 800a0b4:	431a      	orrs	r2, r3
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	621a      	str	r2, [r3, #32]
}
 800a0ba:	bf00      	nop
 800a0bc:	371c      	adds	r7, #28
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr
	...

0800a0c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b085      	sub	sp, #20
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
 800a0d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a0d8:	2b01      	cmp	r3, #1
 800a0da:	d101      	bne.n	800a0e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a0dc:	2302      	movs	r3, #2
 800a0de:	e06d      	b.n	800a1bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2202      	movs	r2, #2
 800a0ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	685b      	ldr	r3, [r3, #4]
 800a0f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	4a30      	ldr	r2, [pc, #192]	@ (800a1c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a106:	4293      	cmp	r3, r2
 800a108:	d004      	beq.n	800a114 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a2f      	ldr	r2, [pc, #188]	@ (800a1cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d108      	bne.n	800a126 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800a11a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	68fa      	ldr	r2, [r7, #12]
 800a122:	4313      	orrs	r3, r2
 800a124:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a12c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	68fa      	ldr	r2, [r7, #12]
 800a134:	4313      	orrs	r3, r2
 800a136:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a20      	ldr	r2, [pc, #128]	@ (800a1c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d022      	beq.n	800a190 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a152:	d01d      	beq.n	800a190 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a1d      	ldr	r2, [pc, #116]	@ (800a1d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d018      	beq.n	800a190 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a1c      	ldr	r2, [pc, #112]	@ (800a1d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d013      	beq.n	800a190 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a1a      	ldr	r2, [pc, #104]	@ (800a1d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d00e      	beq.n	800a190 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a15      	ldr	r2, [pc, #84]	@ (800a1cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d009      	beq.n	800a190 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a16      	ldr	r2, [pc, #88]	@ (800a1dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d004      	beq.n	800a190 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a15      	ldr	r2, [pc, #84]	@ (800a1e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d10c      	bne.n	800a1aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a196:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	689b      	ldr	r3, [r3, #8]
 800a19c:	68ba      	ldr	r2, [r7, #8]
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	68ba      	ldr	r2, [r7, #8]
 800a1a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2200      	movs	r2, #0
 800a1b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3714      	adds	r7, #20
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c6:	4770      	bx	lr
 800a1c8:	40010000 	.word	0x40010000
 800a1cc:	40010400 	.word	0x40010400
 800a1d0:	40000400 	.word	0x40000400
 800a1d4:	40000800 	.word	0x40000800
 800a1d8:	40000c00 	.word	0x40000c00
 800a1dc:	40001800 	.word	0x40001800
 800a1e0:	40014000 	.word	0x40014000

0800a1e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a1ec:	bf00      	nop
 800a1ee:	370c      	adds	r7, #12
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b083      	sub	sp, #12
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a200:	bf00      	nop
 800a202:	370c      	adds	r7, #12
 800a204:	46bd      	mov	sp, r7
 800a206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20a:	4770      	bx	lr

0800a20c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a20c:	b480      	push	{r7}
 800a20e:	b083      	sub	sp, #12
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a214:	bf00      	nop
 800a216:	370c      	adds	r7, #12
 800a218:	46bd      	mov	sp, r7
 800a21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a21e:	4770      	bx	lr

0800a220 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d101      	bne.n	800a232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a22e:	2301      	movs	r3, #1
 800a230:	e042      	b.n	800a2b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d106      	bne.n	800a24a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2200      	movs	r2, #0
 800a240:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f000 f83b 	bl	800a2c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	2224      	movs	r2, #36	@ 0x24
 800a24e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f022 0201 	bic.w	r2, r2, #1
 800a260:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a266:	2b00      	cmp	r3, #0
 800a268:	d002      	beq.n	800a270 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 fe28 	bl	800aec0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f000 f8bd 	bl	800a3f0 <UART_SetConfig>
 800a276:	4603      	mov	r3, r0
 800a278:	2b01      	cmp	r3, #1
 800a27a:	d101      	bne.n	800a280 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800a27c:	2301      	movs	r3, #1
 800a27e:	e01b      	b.n	800a2b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	685a      	ldr	r2, [r3, #4]
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800a28e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	689a      	ldr	r2, [r3, #8]
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800a29e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	681a      	ldr	r2, [r3, #0]
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f042 0201 	orr.w	r2, r2, #1
 800a2ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a2b0:	6878      	ldr	r0, [r7, #4]
 800a2b2:	f000 fea7 	bl	800b004 <UART_CheckIdleState>
 800a2b6:	4603      	mov	r3, r0
}
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	3708      	adds	r7, #8
 800a2bc:	46bd      	mov	sp, r7
 800a2be:	bd80      	pop	{r7, pc}

0800a2c0 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800a2c8:	bf00      	nop
 800a2ca:	370c      	adds	r7, #12
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2d2:	4770      	bx	lr

0800a2d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b08a      	sub	sp, #40	@ 0x28
 800a2d8:	af02      	add	r7, sp, #8
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	603b      	str	r3, [r7, #0]
 800a2e0:	4613      	mov	r3, r2
 800a2e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800a2ea:	2b20      	cmp	r3, #32
 800a2ec:	d17b      	bne.n	800a3e6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800a2ee:	68bb      	ldr	r3, [r7, #8]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d002      	beq.n	800a2fa <HAL_UART_Transmit+0x26>
 800a2f4:	88fb      	ldrh	r3, [r7, #6]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d101      	bne.n	800a2fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e074      	b.n	800a3e8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2200      	movs	r2, #0
 800a302:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	2221      	movs	r2, #33	@ 0x21
 800a30a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a30e:	f7f7 fe01 	bl	8001f14 <HAL_GetTick>
 800a312:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	88fa      	ldrh	r2, [r7, #6]
 800a318:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	88fa      	ldrh	r2, [r7, #6]
 800a320:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a32c:	d108      	bne.n	800a340 <HAL_UART_Transmit+0x6c>
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	691b      	ldr	r3, [r3, #16]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d104      	bne.n	800a340 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800a336:	2300      	movs	r3, #0
 800a338:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	61bb      	str	r3, [r7, #24]
 800a33e:	e003      	b.n	800a348 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a344:	2300      	movs	r3, #0
 800a346:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a348:	e030      	b.n	800a3ac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	9300      	str	r3, [sp, #0]
 800a34e:	697b      	ldr	r3, [r7, #20]
 800a350:	2200      	movs	r2, #0
 800a352:	2180      	movs	r1, #128	@ 0x80
 800a354:	68f8      	ldr	r0, [r7, #12]
 800a356:	f000 feff 	bl	800b158 <UART_WaitOnFlagUntilTimeout>
 800a35a:	4603      	mov	r3, r0
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d005      	beq.n	800a36c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	2220      	movs	r2, #32
 800a364:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800a368:	2303      	movs	r3, #3
 800a36a:	e03d      	b.n	800a3e8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800a36c:	69fb      	ldr	r3, [r7, #28]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d10b      	bne.n	800a38a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a372:	69bb      	ldr	r3, [r7, #24]
 800a374:	881b      	ldrh	r3, [r3, #0]
 800a376:	461a      	mov	r2, r3
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a380:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a382:	69bb      	ldr	r3, [r7, #24]
 800a384:	3302      	adds	r3, #2
 800a386:	61bb      	str	r3, [r7, #24]
 800a388:	e007      	b.n	800a39a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a38a:	69fb      	ldr	r3, [r7, #28]
 800a38c:	781a      	ldrb	r2, [r3, #0]
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	3301      	adds	r3, #1
 800a398:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a3a0:	b29b      	uxth	r3, r3
 800a3a2:	3b01      	subs	r3, #1
 800a3a4:	b29a      	uxth	r2, r3
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800a3b2:	b29b      	uxth	r3, r3
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d1c8      	bne.n	800a34a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	9300      	str	r3, [sp, #0]
 800a3bc:	697b      	ldr	r3, [r7, #20]
 800a3be:	2200      	movs	r2, #0
 800a3c0:	2140      	movs	r1, #64	@ 0x40
 800a3c2:	68f8      	ldr	r0, [r7, #12]
 800a3c4:	f000 fec8 	bl	800b158 <UART_WaitOnFlagUntilTimeout>
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d005      	beq.n	800a3da <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	2220      	movs	r2, #32
 800a3d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800a3d6:	2303      	movs	r3, #3
 800a3d8:	e006      	b.n	800a3e8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	2220      	movs	r2, #32
 800a3de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	e000      	b.n	800a3e8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800a3e6:	2302      	movs	r3, #2
  }
}
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	3720      	adds	r7, #32
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	bd80      	pop	{r7, pc}

0800a3f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a3f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a3f4:	b092      	sub	sp, #72	@ 0x48
 800a3f6:	af00      	add	r7, sp, #0
 800a3f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a3fa:	2300      	movs	r3, #0
 800a3fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	689a      	ldr	r2, [r3, #8]
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	691b      	ldr	r3, [r3, #16]
 800a408:	431a      	orrs	r2, r3
 800a40a:	697b      	ldr	r3, [r7, #20]
 800a40c:	695b      	ldr	r3, [r3, #20]
 800a40e:	431a      	orrs	r2, r3
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	69db      	ldr	r3, [r3, #28]
 800a414:	4313      	orrs	r3, r2
 800a416:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	681a      	ldr	r2, [r3, #0]
 800a41e:	4bbe      	ldr	r3, [pc, #760]	@ (800a718 <UART_SetConfig+0x328>)
 800a420:	4013      	ands	r3, r2
 800a422:	697a      	ldr	r2, [r7, #20]
 800a424:	6812      	ldr	r2, [r2, #0]
 800a426:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a428:	430b      	orrs	r3, r1
 800a42a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	685b      	ldr	r3, [r3, #4]
 800a432:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800a436:	697b      	ldr	r3, [r7, #20]
 800a438:	68da      	ldr	r2, [r3, #12]
 800a43a:	697b      	ldr	r3, [r7, #20]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	430a      	orrs	r2, r1
 800a440:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a442:	697b      	ldr	r3, [r7, #20]
 800a444:	699b      	ldr	r3, [r3, #24]
 800a446:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a448:	697b      	ldr	r3, [r7, #20]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	4ab3      	ldr	r2, [pc, #716]	@ (800a71c <UART_SetConfig+0x32c>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d004      	beq.n	800a45c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	6a1b      	ldr	r3, [r3, #32]
 800a456:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a458:	4313      	orrs	r3, r2
 800a45a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a45c:	697b      	ldr	r3, [r7, #20]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	689a      	ldr	r2, [r3, #8]
 800a462:	4baf      	ldr	r3, [pc, #700]	@ (800a720 <UART_SetConfig+0x330>)
 800a464:	4013      	ands	r3, r2
 800a466:	697a      	ldr	r2, [r7, #20]
 800a468:	6812      	ldr	r2, [r2, #0]
 800a46a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800a46c:	430b      	orrs	r3, r1
 800a46e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a476:	f023 010f 	bic.w	r1, r3, #15
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	430a      	orrs	r2, r1
 800a484:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	4aa6      	ldr	r2, [pc, #664]	@ (800a724 <UART_SetConfig+0x334>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d177      	bne.n	800a580 <UART_SetConfig+0x190>
 800a490:	4ba5      	ldr	r3, [pc, #660]	@ (800a728 <UART_SetConfig+0x338>)
 800a492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a494:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a498:	2b28      	cmp	r3, #40	@ 0x28
 800a49a:	d86d      	bhi.n	800a578 <UART_SetConfig+0x188>
 800a49c:	a201      	add	r2, pc, #4	@ (adr r2, 800a4a4 <UART_SetConfig+0xb4>)
 800a49e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4a2:	bf00      	nop
 800a4a4:	0800a549 	.word	0x0800a549
 800a4a8:	0800a579 	.word	0x0800a579
 800a4ac:	0800a579 	.word	0x0800a579
 800a4b0:	0800a579 	.word	0x0800a579
 800a4b4:	0800a579 	.word	0x0800a579
 800a4b8:	0800a579 	.word	0x0800a579
 800a4bc:	0800a579 	.word	0x0800a579
 800a4c0:	0800a579 	.word	0x0800a579
 800a4c4:	0800a551 	.word	0x0800a551
 800a4c8:	0800a579 	.word	0x0800a579
 800a4cc:	0800a579 	.word	0x0800a579
 800a4d0:	0800a579 	.word	0x0800a579
 800a4d4:	0800a579 	.word	0x0800a579
 800a4d8:	0800a579 	.word	0x0800a579
 800a4dc:	0800a579 	.word	0x0800a579
 800a4e0:	0800a579 	.word	0x0800a579
 800a4e4:	0800a559 	.word	0x0800a559
 800a4e8:	0800a579 	.word	0x0800a579
 800a4ec:	0800a579 	.word	0x0800a579
 800a4f0:	0800a579 	.word	0x0800a579
 800a4f4:	0800a579 	.word	0x0800a579
 800a4f8:	0800a579 	.word	0x0800a579
 800a4fc:	0800a579 	.word	0x0800a579
 800a500:	0800a579 	.word	0x0800a579
 800a504:	0800a561 	.word	0x0800a561
 800a508:	0800a579 	.word	0x0800a579
 800a50c:	0800a579 	.word	0x0800a579
 800a510:	0800a579 	.word	0x0800a579
 800a514:	0800a579 	.word	0x0800a579
 800a518:	0800a579 	.word	0x0800a579
 800a51c:	0800a579 	.word	0x0800a579
 800a520:	0800a579 	.word	0x0800a579
 800a524:	0800a569 	.word	0x0800a569
 800a528:	0800a579 	.word	0x0800a579
 800a52c:	0800a579 	.word	0x0800a579
 800a530:	0800a579 	.word	0x0800a579
 800a534:	0800a579 	.word	0x0800a579
 800a538:	0800a579 	.word	0x0800a579
 800a53c:	0800a579 	.word	0x0800a579
 800a540:	0800a579 	.word	0x0800a579
 800a544:	0800a571 	.word	0x0800a571
 800a548:	2301      	movs	r3, #1
 800a54a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a54e:	e222      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a550:	2304      	movs	r3, #4
 800a552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a556:	e21e      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a558:	2308      	movs	r3, #8
 800a55a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a55e:	e21a      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a560:	2310      	movs	r3, #16
 800a562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a566:	e216      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a568:	2320      	movs	r3, #32
 800a56a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a56e:	e212      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a570:	2340      	movs	r3, #64	@ 0x40
 800a572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a576:	e20e      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a578:	2380      	movs	r3, #128	@ 0x80
 800a57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a57e:	e20a      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a580:	697b      	ldr	r3, [r7, #20]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	4a69      	ldr	r2, [pc, #420]	@ (800a72c <UART_SetConfig+0x33c>)
 800a586:	4293      	cmp	r3, r2
 800a588:	d130      	bne.n	800a5ec <UART_SetConfig+0x1fc>
 800a58a:	4b67      	ldr	r3, [pc, #412]	@ (800a728 <UART_SetConfig+0x338>)
 800a58c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a58e:	f003 0307 	and.w	r3, r3, #7
 800a592:	2b05      	cmp	r3, #5
 800a594:	d826      	bhi.n	800a5e4 <UART_SetConfig+0x1f4>
 800a596:	a201      	add	r2, pc, #4	@ (adr r2, 800a59c <UART_SetConfig+0x1ac>)
 800a598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a59c:	0800a5b5 	.word	0x0800a5b5
 800a5a0:	0800a5bd 	.word	0x0800a5bd
 800a5a4:	0800a5c5 	.word	0x0800a5c5
 800a5a8:	0800a5cd 	.word	0x0800a5cd
 800a5ac:	0800a5d5 	.word	0x0800a5d5
 800a5b0:	0800a5dd 	.word	0x0800a5dd
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ba:	e1ec      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a5bc:	2304      	movs	r3, #4
 800a5be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5c2:	e1e8      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a5c4:	2308      	movs	r3, #8
 800a5c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ca:	e1e4      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a5cc:	2310      	movs	r3, #16
 800a5ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5d2:	e1e0      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a5d4:	2320      	movs	r3, #32
 800a5d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5da:	e1dc      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a5dc:	2340      	movs	r3, #64	@ 0x40
 800a5de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5e2:	e1d8      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a5e4:	2380      	movs	r3, #128	@ 0x80
 800a5e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a5ea:	e1d4      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a4f      	ldr	r2, [pc, #316]	@ (800a730 <UART_SetConfig+0x340>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d130      	bne.n	800a658 <UART_SetConfig+0x268>
 800a5f6:	4b4c      	ldr	r3, [pc, #304]	@ (800a728 <UART_SetConfig+0x338>)
 800a5f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a5fa:	f003 0307 	and.w	r3, r3, #7
 800a5fe:	2b05      	cmp	r3, #5
 800a600:	d826      	bhi.n	800a650 <UART_SetConfig+0x260>
 800a602:	a201      	add	r2, pc, #4	@ (adr r2, 800a608 <UART_SetConfig+0x218>)
 800a604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a608:	0800a621 	.word	0x0800a621
 800a60c:	0800a629 	.word	0x0800a629
 800a610:	0800a631 	.word	0x0800a631
 800a614:	0800a639 	.word	0x0800a639
 800a618:	0800a641 	.word	0x0800a641
 800a61c:	0800a649 	.word	0x0800a649
 800a620:	2300      	movs	r3, #0
 800a622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a626:	e1b6      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a628:	2304      	movs	r3, #4
 800a62a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a62e:	e1b2      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a630:	2308      	movs	r3, #8
 800a632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a636:	e1ae      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a638:	2310      	movs	r3, #16
 800a63a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a63e:	e1aa      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a640:	2320      	movs	r3, #32
 800a642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a646:	e1a6      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a648:	2340      	movs	r3, #64	@ 0x40
 800a64a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a64e:	e1a2      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a650:	2380      	movs	r3, #128	@ 0x80
 800a652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a656:	e19e      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	4a35      	ldr	r2, [pc, #212]	@ (800a734 <UART_SetConfig+0x344>)
 800a65e:	4293      	cmp	r3, r2
 800a660:	d130      	bne.n	800a6c4 <UART_SetConfig+0x2d4>
 800a662:	4b31      	ldr	r3, [pc, #196]	@ (800a728 <UART_SetConfig+0x338>)
 800a664:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a666:	f003 0307 	and.w	r3, r3, #7
 800a66a:	2b05      	cmp	r3, #5
 800a66c:	d826      	bhi.n	800a6bc <UART_SetConfig+0x2cc>
 800a66e:	a201      	add	r2, pc, #4	@ (adr r2, 800a674 <UART_SetConfig+0x284>)
 800a670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a674:	0800a68d 	.word	0x0800a68d
 800a678:	0800a695 	.word	0x0800a695
 800a67c:	0800a69d 	.word	0x0800a69d
 800a680:	0800a6a5 	.word	0x0800a6a5
 800a684:	0800a6ad 	.word	0x0800a6ad
 800a688:	0800a6b5 	.word	0x0800a6b5
 800a68c:	2300      	movs	r3, #0
 800a68e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a692:	e180      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a694:	2304      	movs	r3, #4
 800a696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a69a:	e17c      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a69c:	2308      	movs	r3, #8
 800a69e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6a2:	e178      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a6a4:	2310      	movs	r3, #16
 800a6a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6aa:	e174      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a6ac:	2320      	movs	r3, #32
 800a6ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6b2:	e170      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a6b4:	2340      	movs	r3, #64	@ 0x40
 800a6b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6ba:	e16c      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a6bc:	2380      	movs	r3, #128	@ 0x80
 800a6be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6c2:	e168      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a6c4:	697b      	ldr	r3, [r7, #20]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	4a1b      	ldr	r2, [pc, #108]	@ (800a738 <UART_SetConfig+0x348>)
 800a6ca:	4293      	cmp	r3, r2
 800a6cc:	d142      	bne.n	800a754 <UART_SetConfig+0x364>
 800a6ce:	4b16      	ldr	r3, [pc, #88]	@ (800a728 <UART_SetConfig+0x338>)
 800a6d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a6d2:	f003 0307 	and.w	r3, r3, #7
 800a6d6:	2b05      	cmp	r3, #5
 800a6d8:	d838      	bhi.n	800a74c <UART_SetConfig+0x35c>
 800a6da:	a201      	add	r2, pc, #4	@ (adr r2, 800a6e0 <UART_SetConfig+0x2f0>)
 800a6dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e0:	0800a6f9 	.word	0x0800a6f9
 800a6e4:	0800a701 	.word	0x0800a701
 800a6e8:	0800a709 	.word	0x0800a709
 800a6ec:	0800a711 	.word	0x0800a711
 800a6f0:	0800a73d 	.word	0x0800a73d
 800a6f4:	0800a745 	.word	0x0800a745
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a6fe:	e14a      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a700:	2304      	movs	r3, #4
 800a702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a706:	e146      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a708:	2308      	movs	r3, #8
 800a70a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a70e:	e142      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a710:	2310      	movs	r3, #16
 800a712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a716:	e13e      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a718:	cfff69f3 	.word	0xcfff69f3
 800a71c:	58000c00 	.word	0x58000c00
 800a720:	11fff4ff 	.word	0x11fff4ff
 800a724:	40011000 	.word	0x40011000
 800a728:	58024400 	.word	0x58024400
 800a72c:	40004400 	.word	0x40004400
 800a730:	40004800 	.word	0x40004800
 800a734:	40004c00 	.word	0x40004c00
 800a738:	40005000 	.word	0x40005000
 800a73c:	2320      	movs	r3, #32
 800a73e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a742:	e128      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a744:	2340      	movs	r3, #64	@ 0x40
 800a746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a74a:	e124      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a74c:	2380      	movs	r3, #128	@ 0x80
 800a74e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a752:	e120      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4acb      	ldr	r2, [pc, #812]	@ (800aa88 <UART_SetConfig+0x698>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d176      	bne.n	800a84c <UART_SetConfig+0x45c>
 800a75e:	4bcb      	ldr	r3, [pc, #812]	@ (800aa8c <UART_SetConfig+0x69c>)
 800a760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a762:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a766:	2b28      	cmp	r3, #40	@ 0x28
 800a768:	d86c      	bhi.n	800a844 <UART_SetConfig+0x454>
 800a76a:	a201      	add	r2, pc, #4	@ (adr r2, 800a770 <UART_SetConfig+0x380>)
 800a76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a770:	0800a815 	.word	0x0800a815
 800a774:	0800a845 	.word	0x0800a845
 800a778:	0800a845 	.word	0x0800a845
 800a77c:	0800a845 	.word	0x0800a845
 800a780:	0800a845 	.word	0x0800a845
 800a784:	0800a845 	.word	0x0800a845
 800a788:	0800a845 	.word	0x0800a845
 800a78c:	0800a845 	.word	0x0800a845
 800a790:	0800a81d 	.word	0x0800a81d
 800a794:	0800a845 	.word	0x0800a845
 800a798:	0800a845 	.word	0x0800a845
 800a79c:	0800a845 	.word	0x0800a845
 800a7a0:	0800a845 	.word	0x0800a845
 800a7a4:	0800a845 	.word	0x0800a845
 800a7a8:	0800a845 	.word	0x0800a845
 800a7ac:	0800a845 	.word	0x0800a845
 800a7b0:	0800a825 	.word	0x0800a825
 800a7b4:	0800a845 	.word	0x0800a845
 800a7b8:	0800a845 	.word	0x0800a845
 800a7bc:	0800a845 	.word	0x0800a845
 800a7c0:	0800a845 	.word	0x0800a845
 800a7c4:	0800a845 	.word	0x0800a845
 800a7c8:	0800a845 	.word	0x0800a845
 800a7cc:	0800a845 	.word	0x0800a845
 800a7d0:	0800a82d 	.word	0x0800a82d
 800a7d4:	0800a845 	.word	0x0800a845
 800a7d8:	0800a845 	.word	0x0800a845
 800a7dc:	0800a845 	.word	0x0800a845
 800a7e0:	0800a845 	.word	0x0800a845
 800a7e4:	0800a845 	.word	0x0800a845
 800a7e8:	0800a845 	.word	0x0800a845
 800a7ec:	0800a845 	.word	0x0800a845
 800a7f0:	0800a835 	.word	0x0800a835
 800a7f4:	0800a845 	.word	0x0800a845
 800a7f8:	0800a845 	.word	0x0800a845
 800a7fc:	0800a845 	.word	0x0800a845
 800a800:	0800a845 	.word	0x0800a845
 800a804:	0800a845 	.word	0x0800a845
 800a808:	0800a845 	.word	0x0800a845
 800a80c:	0800a845 	.word	0x0800a845
 800a810:	0800a83d 	.word	0x0800a83d
 800a814:	2301      	movs	r3, #1
 800a816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a81a:	e0bc      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a81c:	2304      	movs	r3, #4
 800a81e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a822:	e0b8      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a824:	2308      	movs	r3, #8
 800a826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a82a:	e0b4      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a82c:	2310      	movs	r3, #16
 800a82e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a832:	e0b0      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a834:	2320      	movs	r3, #32
 800a836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a83a:	e0ac      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a83c:	2340      	movs	r3, #64	@ 0x40
 800a83e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a842:	e0a8      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a844:	2380      	movs	r3, #128	@ 0x80
 800a846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a84a:	e0a4      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a8f      	ldr	r2, [pc, #572]	@ (800aa90 <UART_SetConfig+0x6a0>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d130      	bne.n	800a8b8 <UART_SetConfig+0x4c8>
 800a856:	4b8d      	ldr	r3, [pc, #564]	@ (800aa8c <UART_SetConfig+0x69c>)
 800a858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a85a:	f003 0307 	and.w	r3, r3, #7
 800a85e:	2b05      	cmp	r3, #5
 800a860:	d826      	bhi.n	800a8b0 <UART_SetConfig+0x4c0>
 800a862:	a201      	add	r2, pc, #4	@ (adr r2, 800a868 <UART_SetConfig+0x478>)
 800a864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a868:	0800a881 	.word	0x0800a881
 800a86c:	0800a889 	.word	0x0800a889
 800a870:	0800a891 	.word	0x0800a891
 800a874:	0800a899 	.word	0x0800a899
 800a878:	0800a8a1 	.word	0x0800a8a1
 800a87c:	0800a8a9 	.word	0x0800a8a9
 800a880:	2300      	movs	r3, #0
 800a882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a886:	e086      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a888:	2304      	movs	r3, #4
 800a88a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a88e:	e082      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a890:	2308      	movs	r3, #8
 800a892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a896:	e07e      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a898:	2310      	movs	r3, #16
 800a89a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a89e:	e07a      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a8a0:	2320      	movs	r3, #32
 800a8a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8a6:	e076      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a8a8:	2340      	movs	r3, #64	@ 0x40
 800a8aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8ae:	e072      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a8b0:	2380      	movs	r3, #128	@ 0x80
 800a8b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8b6:	e06e      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a8b8:	697b      	ldr	r3, [r7, #20]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	4a75      	ldr	r2, [pc, #468]	@ (800aa94 <UART_SetConfig+0x6a4>)
 800a8be:	4293      	cmp	r3, r2
 800a8c0:	d130      	bne.n	800a924 <UART_SetConfig+0x534>
 800a8c2:	4b72      	ldr	r3, [pc, #456]	@ (800aa8c <UART_SetConfig+0x69c>)
 800a8c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800a8c6:	f003 0307 	and.w	r3, r3, #7
 800a8ca:	2b05      	cmp	r3, #5
 800a8cc:	d826      	bhi.n	800a91c <UART_SetConfig+0x52c>
 800a8ce:	a201      	add	r2, pc, #4	@ (adr r2, 800a8d4 <UART_SetConfig+0x4e4>)
 800a8d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8d4:	0800a8ed 	.word	0x0800a8ed
 800a8d8:	0800a8f5 	.word	0x0800a8f5
 800a8dc:	0800a8fd 	.word	0x0800a8fd
 800a8e0:	0800a905 	.word	0x0800a905
 800a8e4:	0800a90d 	.word	0x0800a90d
 800a8e8:	0800a915 	.word	0x0800a915
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8f2:	e050      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a8f4:	2304      	movs	r3, #4
 800a8f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a8fa:	e04c      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a8fc:	2308      	movs	r3, #8
 800a8fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a902:	e048      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a904:	2310      	movs	r3, #16
 800a906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a90a:	e044      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a90c:	2320      	movs	r3, #32
 800a90e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a912:	e040      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a914:	2340      	movs	r3, #64	@ 0x40
 800a916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a91a:	e03c      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a91c:	2380      	movs	r3, #128	@ 0x80
 800a91e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a922:	e038      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a924:	697b      	ldr	r3, [r7, #20]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	4a5b      	ldr	r2, [pc, #364]	@ (800aa98 <UART_SetConfig+0x6a8>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d130      	bne.n	800a990 <UART_SetConfig+0x5a0>
 800a92e:	4b57      	ldr	r3, [pc, #348]	@ (800aa8c <UART_SetConfig+0x69c>)
 800a930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a932:	f003 0307 	and.w	r3, r3, #7
 800a936:	2b05      	cmp	r3, #5
 800a938:	d826      	bhi.n	800a988 <UART_SetConfig+0x598>
 800a93a:	a201      	add	r2, pc, #4	@ (adr r2, 800a940 <UART_SetConfig+0x550>)
 800a93c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a940:	0800a959 	.word	0x0800a959
 800a944:	0800a961 	.word	0x0800a961
 800a948:	0800a969 	.word	0x0800a969
 800a94c:	0800a971 	.word	0x0800a971
 800a950:	0800a979 	.word	0x0800a979
 800a954:	0800a981 	.word	0x0800a981
 800a958:	2302      	movs	r3, #2
 800a95a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a95e:	e01a      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a960:	2304      	movs	r3, #4
 800a962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a966:	e016      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a968:	2308      	movs	r3, #8
 800a96a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a96e:	e012      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a970:	2310      	movs	r3, #16
 800a972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a976:	e00e      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a978:	2320      	movs	r3, #32
 800a97a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a97e:	e00a      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a980:	2340      	movs	r3, #64	@ 0x40
 800a982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a986:	e006      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a988:	2380      	movs	r3, #128	@ 0x80
 800a98a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a98e:	e002      	b.n	800a996 <UART_SetConfig+0x5a6>
 800a990:	2380      	movs	r3, #128	@ 0x80
 800a992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a3f      	ldr	r2, [pc, #252]	@ (800aa98 <UART_SetConfig+0x6a8>)
 800a99c:	4293      	cmp	r3, r2
 800a99e:	f040 80f8 	bne.w	800ab92 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a9a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a9a6:	2b20      	cmp	r3, #32
 800a9a8:	dc46      	bgt.n	800aa38 <UART_SetConfig+0x648>
 800a9aa:	2b02      	cmp	r3, #2
 800a9ac:	f2c0 8082 	blt.w	800aab4 <UART_SetConfig+0x6c4>
 800a9b0:	3b02      	subs	r3, #2
 800a9b2:	2b1e      	cmp	r3, #30
 800a9b4:	d87e      	bhi.n	800aab4 <UART_SetConfig+0x6c4>
 800a9b6:	a201      	add	r2, pc, #4	@ (adr r2, 800a9bc <UART_SetConfig+0x5cc>)
 800a9b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9bc:	0800aa3f 	.word	0x0800aa3f
 800a9c0:	0800aab5 	.word	0x0800aab5
 800a9c4:	0800aa47 	.word	0x0800aa47
 800a9c8:	0800aab5 	.word	0x0800aab5
 800a9cc:	0800aab5 	.word	0x0800aab5
 800a9d0:	0800aab5 	.word	0x0800aab5
 800a9d4:	0800aa57 	.word	0x0800aa57
 800a9d8:	0800aab5 	.word	0x0800aab5
 800a9dc:	0800aab5 	.word	0x0800aab5
 800a9e0:	0800aab5 	.word	0x0800aab5
 800a9e4:	0800aab5 	.word	0x0800aab5
 800a9e8:	0800aab5 	.word	0x0800aab5
 800a9ec:	0800aab5 	.word	0x0800aab5
 800a9f0:	0800aab5 	.word	0x0800aab5
 800a9f4:	0800aa67 	.word	0x0800aa67
 800a9f8:	0800aab5 	.word	0x0800aab5
 800a9fc:	0800aab5 	.word	0x0800aab5
 800aa00:	0800aab5 	.word	0x0800aab5
 800aa04:	0800aab5 	.word	0x0800aab5
 800aa08:	0800aab5 	.word	0x0800aab5
 800aa0c:	0800aab5 	.word	0x0800aab5
 800aa10:	0800aab5 	.word	0x0800aab5
 800aa14:	0800aab5 	.word	0x0800aab5
 800aa18:	0800aab5 	.word	0x0800aab5
 800aa1c:	0800aab5 	.word	0x0800aab5
 800aa20:	0800aab5 	.word	0x0800aab5
 800aa24:	0800aab5 	.word	0x0800aab5
 800aa28:	0800aab5 	.word	0x0800aab5
 800aa2c:	0800aab5 	.word	0x0800aab5
 800aa30:	0800aab5 	.word	0x0800aab5
 800aa34:	0800aaa7 	.word	0x0800aaa7
 800aa38:	2b40      	cmp	r3, #64	@ 0x40
 800aa3a:	d037      	beq.n	800aaac <UART_SetConfig+0x6bc>
 800aa3c:	e03a      	b.n	800aab4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800aa3e:	f7fd fc1b 	bl	8008278 <HAL_RCCEx_GetD3PCLK1Freq>
 800aa42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800aa44:	e03c      	b.n	800aac0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aa46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7fd fc2a 	bl	80082a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aa50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa54:	e034      	b.n	800aac0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aa56:	f107 0318 	add.w	r3, r7, #24
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f7fd fd76 	bl	800854c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aa60:	69fb      	ldr	r3, [r7, #28]
 800aa62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aa64:	e02c      	b.n	800aac0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa66:	4b09      	ldr	r3, [pc, #36]	@ (800aa8c <UART_SetConfig+0x69c>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	f003 0320 	and.w	r3, r3, #32
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d016      	beq.n	800aaa0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aa72:	4b06      	ldr	r3, [pc, #24]	@ (800aa8c <UART_SetConfig+0x69c>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	08db      	lsrs	r3, r3, #3
 800aa78:	f003 0303 	and.w	r3, r3, #3
 800aa7c:	4a07      	ldr	r2, [pc, #28]	@ (800aa9c <UART_SetConfig+0x6ac>)
 800aa7e:	fa22 f303 	lsr.w	r3, r2, r3
 800aa82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aa84:	e01c      	b.n	800aac0 <UART_SetConfig+0x6d0>
 800aa86:	bf00      	nop
 800aa88:	40011400 	.word	0x40011400
 800aa8c:	58024400 	.word	0x58024400
 800aa90:	40007800 	.word	0x40007800
 800aa94:	40007c00 	.word	0x40007c00
 800aa98:	58000c00 	.word	0x58000c00
 800aa9c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800aaa0:	4b9d      	ldr	r3, [pc, #628]	@ (800ad18 <UART_SetConfig+0x928>)
 800aaa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaa4:	e00c      	b.n	800aac0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aaa6:	4b9d      	ldr	r3, [pc, #628]	@ (800ad1c <UART_SetConfig+0x92c>)
 800aaa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aaaa:	e009      	b.n	800aac0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800aaac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800aab0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aab2:	e005      	b.n	800aac0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800aab4:	2300      	movs	r3, #0
 800aab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aab8:	2301      	movs	r3, #1
 800aaba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800aabe:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800aac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	f000 81de 	beq.w	800ae84 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aacc:	4a94      	ldr	r2, [pc, #592]	@ (800ad20 <UART_SetConfig+0x930>)
 800aace:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800aad2:	461a      	mov	r2, r3
 800aad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800aad6:	fbb3 f3f2 	udiv	r3, r3, r2
 800aada:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	685a      	ldr	r2, [r3, #4]
 800aae0:	4613      	mov	r3, r2
 800aae2:	005b      	lsls	r3, r3, #1
 800aae4:	4413      	add	r3, r2
 800aae6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d305      	bcc.n	800aaf8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800aaf2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aaf4:	429a      	cmp	r2, r3
 800aaf6:	d903      	bls.n	800ab00 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800aaf8:	2301      	movs	r3, #1
 800aafa:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800aafe:	e1c1      	b.n	800ae84 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ab02:	2200      	movs	r2, #0
 800ab04:	60bb      	str	r3, [r7, #8]
 800ab06:	60fa      	str	r2, [r7, #12]
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab0c:	4a84      	ldr	r2, [pc, #528]	@ (800ad20 <UART_SetConfig+0x930>)
 800ab0e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	2200      	movs	r2, #0
 800ab16:	603b      	str	r3, [r7, #0]
 800ab18:	607a      	str	r2, [r7, #4]
 800ab1a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab1e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ab22:	f7f5 fc35 	bl	8000390 <__aeabi_uldivmod>
 800ab26:	4602      	mov	r2, r0
 800ab28:	460b      	mov	r3, r1
 800ab2a:	4610      	mov	r0, r2
 800ab2c:	4619      	mov	r1, r3
 800ab2e:	f04f 0200 	mov.w	r2, #0
 800ab32:	f04f 0300 	mov.w	r3, #0
 800ab36:	020b      	lsls	r3, r1, #8
 800ab38:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ab3c:	0202      	lsls	r2, r0, #8
 800ab3e:	6979      	ldr	r1, [r7, #20]
 800ab40:	6849      	ldr	r1, [r1, #4]
 800ab42:	0849      	lsrs	r1, r1, #1
 800ab44:	2000      	movs	r0, #0
 800ab46:	460c      	mov	r4, r1
 800ab48:	4605      	mov	r5, r0
 800ab4a:	eb12 0804 	adds.w	r8, r2, r4
 800ab4e:	eb43 0905 	adc.w	r9, r3, r5
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	2200      	movs	r2, #0
 800ab58:	469a      	mov	sl, r3
 800ab5a:	4693      	mov	fp, r2
 800ab5c:	4652      	mov	r2, sl
 800ab5e:	465b      	mov	r3, fp
 800ab60:	4640      	mov	r0, r8
 800ab62:	4649      	mov	r1, r9
 800ab64:	f7f5 fc14 	bl	8000390 <__aeabi_uldivmod>
 800ab68:	4602      	mov	r2, r0
 800ab6a:	460b      	mov	r3, r1
 800ab6c:	4613      	mov	r3, r2
 800ab6e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800ab70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800ab76:	d308      	bcc.n	800ab8a <UART_SetConfig+0x79a>
 800ab78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ab7a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800ab7e:	d204      	bcs.n	800ab8a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ab86:	60da      	str	r2, [r3, #12]
 800ab88:	e17c      	b.n	800ae84 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800ab8a:	2301      	movs	r3, #1
 800ab8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ab90:	e178      	b.n	800ae84 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	69db      	ldr	r3, [r3, #28]
 800ab96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800ab9a:	f040 80c5 	bne.w	800ad28 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800ab9e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800aba2:	2b20      	cmp	r3, #32
 800aba4:	dc48      	bgt.n	800ac38 <UART_SetConfig+0x848>
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	db7b      	blt.n	800aca2 <UART_SetConfig+0x8b2>
 800abaa:	2b20      	cmp	r3, #32
 800abac:	d879      	bhi.n	800aca2 <UART_SetConfig+0x8b2>
 800abae:	a201      	add	r2, pc, #4	@ (adr r2, 800abb4 <UART_SetConfig+0x7c4>)
 800abb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb4:	0800ac3f 	.word	0x0800ac3f
 800abb8:	0800ac47 	.word	0x0800ac47
 800abbc:	0800aca3 	.word	0x0800aca3
 800abc0:	0800aca3 	.word	0x0800aca3
 800abc4:	0800ac4f 	.word	0x0800ac4f
 800abc8:	0800aca3 	.word	0x0800aca3
 800abcc:	0800aca3 	.word	0x0800aca3
 800abd0:	0800aca3 	.word	0x0800aca3
 800abd4:	0800ac5f 	.word	0x0800ac5f
 800abd8:	0800aca3 	.word	0x0800aca3
 800abdc:	0800aca3 	.word	0x0800aca3
 800abe0:	0800aca3 	.word	0x0800aca3
 800abe4:	0800aca3 	.word	0x0800aca3
 800abe8:	0800aca3 	.word	0x0800aca3
 800abec:	0800aca3 	.word	0x0800aca3
 800abf0:	0800aca3 	.word	0x0800aca3
 800abf4:	0800ac6f 	.word	0x0800ac6f
 800abf8:	0800aca3 	.word	0x0800aca3
 800abfc:	0800aca3 	.word	0x0800aca3
 800ac00:	0800aca3 	.word	0x0800aca3
 800ac04:	0800aca3 	.word	0x0800aca3
 800ac08:	0800aca3 	.word	0x0800aca3
 800ac0c:	0800aca3 	.word	0x0800aca3
 800ac10:	0800aca3 	.word	0x0800aca3
 800ac14:	0800aca3 	.word	0x0800aca3
 800ac18:	0800aca3 	.word	0x0800aca3
 800ac1c:	0800aca3 	.word	0x0800aca3
 800ac20:	0800aca3 	.word	0x0800aca3
 800ac24:	0800aca3 	.word	0x0800aca3
 800ac28:	0800aca3 	.word	0x0800aca3
 800ac2c:	0800aca3 	.word	0x0800aca3
 800ac30:	0800aca3 	.word	0x0800aca3
 800ac34:	0800ac95 	.word	0x0800ac95
 800ac38:	2b40      	cmp	r3, #64	@ 0x40
 800ac3a:	d02e      	beq.n	800ac9a <UART_SetConfig+0x8aa>
 800ac3c:	e031      	b.n	800aca2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac3e:	f7fc f8e5 	bl	8006e0c <HAL_RCC_GetPCLK1Freq>
 800ac42:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac44:	e033      	b.n	800acae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac46:	f7fc f8f7 	bl	8006e38 <HAL_RCC_GetPCLK2Freq>
 800ac4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ac4c:	e02f      	b.n	800acae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ac4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ac52:	4618      	mov	r0, r3
 800ac54:	f7fd fb26 	bl	80082a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ac58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac5c:	e027      	b.n	800acae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ac5e:	f107 0318 	add.w	r3, r7, #24
 800ac62:	4618      	mov	r0, r3
 800ac64:	f7fd fc72 	bl	800854c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ac68:	69fb      	ldr	r3, [r7, #28]
 800ac6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac6c:	e01f      	b.n	800acae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac6e:	4b2d      	ldr	r3, [pc, #180]	@ (800ad24 <UART_SetConfig+0x934>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	f003 0320 	and.w	r3, r3, #32
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d009      	beq.n	800ac8e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ac7a:	4b2a      	ldr	r3, [pc, #168]	@ (800ad24 <UART_SetConfig+0x934>)
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	08db      	lsrs	r3, r3, #3
 800ac80:	f003 0303 	and.w	r3, r3, #3
 800ac84:	4a24      	ldr	r2, [pc, #144]	@ (800ad18 <UART_SetConfig+0x928>)
 800ac86:	fa22 f303 	lsr.w	r3, r2, r3
 800ac8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ac8c:	e00f      	b.n	800acae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800ac8e:	4b22      	ldr	r3, [pc, #136]	@ (800ad18 <UART_SetConfig+0x928>)
 800ac90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac92:	e00c      	b.n	800acae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ac94:	4b21      	ldr	r3, [pc, #132]	@ (800ad1c <UART_SetConfig+0x92c>)
 800ac96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ac98:	e009      	b.n	800acae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ac9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800aca0:	e005      	b.n	800acae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800aca2:	2300      	movs	r3, #0
 800aca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800aca6:	2301      	movs	r3, #1
 800aca8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800acac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800acae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	f000 80e7 	beq.w	800ae84 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800acba:	4a19      	ldr	r2, [pc, #100]	@ (800ad20 <UART_SetConfig+0x930>)
 800acbc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800acc0:	461a      	mov	r2, r3
 800acc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800acc4:	fbb3 f3f2 	udiv	r3, r3, r2
 800acc8:	005a      	lsls	r2, r3, #1
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	085b      	lsrs	r3, r3, #1
 800acd0:	441a      	add	r2, r3
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	fbb2 f3f3 	udiv	r3, r2, r3
 800acda:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acde:	2b0f      	cmp	r3, #15
 800ace0:	d916      	bls.n	800ad10 <UART_SetConfig+0x920>
 800ace2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ace4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ace8:	d212      	bcs.n	800ad10 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800acea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acec:	b29b      	uxth	r3, r3
 800acee:	f023 030f 	bic.w	r3, r3, #15
 800acf2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800acf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acf6:	085b      	lsrs	r3, r3, #1
 800acf8:	b29b      	uxth	r3, r3
 800acfa:	f003 0307 	and.w	r3, r3, #7
 800acfe:	b29a      	uxth	r2, r3
 800ad00:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800ad02:	4313      	orrs	r3, r2
 800ad04:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800ad0c:	60da      	str	r2, [r3, #12]
 800ad0e:	e0b9      	b.n	800ae84 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ad10:	2301      	movs	r3, #1
 800ad12:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800ad16:	e0b5      	b.n	800ae84 <UART_SetConfig+0xa94>
 800ad18:	03d09000 	.word	0x03d09000
 800ad1c:	003d0900 	.word	0x003d0900
 800ad20:	080120d0 	.word	0x080120d0
 800ad24:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800ad28:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800ad2c:	2b20      	cmp	r3, #32
 800ad2e:	dc49      	bgt.n	800adc4 <UART_SetConfig+0x9d4>
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	db7c      	blt.n	800ae2e <UART_SetConfig+0xa3e>
 800ad34:	2b20      	cmp	r3, #32
 800ad36:	d87a      	bhi.n	800ae2e <UART_SetConfig+0xa3e>
 800ad38:	a201      	add	r2, pc, #4	@ (adr r2, 800ad40 <UART_SetConfig+0x950>)
 800ad3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad3e:	bf00      	nop
 800ad40:	0800adcb 	.word	0x0800adcb
 800ad44:	0800add3 	.word	0x0800add3
 800ad48:	0800ae2f 	.word	0x0800ae2f
 800ad4c:	0800ae2f 	.word	0x0800ae2f
 800ad50:	0800addb 	.word	0x0800addb
 800ad54:	0800ae2f 	.word	0x0800ae2f
 800ad58:	0800ae2f 	.word	0x0800ae2f
 800ad5c:	0800ae2f 	.word	0x0800ae2f
 800ad60:	0800adeb 	.word	0x0800adeb
 800ad64:	0800ae2f 	.word	0x0800ae2f
 800ad68:	0800ae2f 	.word	0x0800ae2f
 800ad6c:	0800ae2f 	.word	0x0800ae2f
 800ad70:	0800ae2f 	.word	0x0800ae2f
 800ad74:	0800ae2f 	.word	0x0800ae2f
 800ad78:	0800ae2f 	.word	0x0800ae2f
 800ad7c:	0800ae2f 	.word	0x0800ae2f
 800ad80:	0800adfb 	.word	0x0800adfb
 800ad84:	0800ae2f 	.word	0x0800ae2f
 800ad88:	0800ae2f 	.word	0x0800ae2f
 800ad8c:	0800ae2f 	.word	0x0800ae2f
 800ad90:	0800ae2f 	.word	0x0800ae2f
 800ad94:	0800ae2f 	.word	0x0800ae2f
 800ad98:	0800ae2f 	.word	0x0800ae2f
 800ad9c:	0800ae2f 	.word	0x0800ae2f
 800ada0:	0800ae2f 	.word	0x0800ae2f
 800ada4:	0800ae2f 	.word	0x0800ae2f
 800ada8:	0800ae2f 	.word	0x0800ae2f
 800adac:	0800ae2f 	.word	0x0800ae2f
 800adb0:	0800ae2f 	.word	0x0800ae2f
 800adb4:	0800ae2f 	.word	0x0800ae2f
 800adb8:	0800ae2f 	.word	0x0800ae2f
 800adbc:	0800ae2f 	.word	0x0800ae2f
 800adc0:	0800ae21 	.word	0x0800ae21
 800adc4:	2b40      	cmp	r3, #64	@ 0x40
 800adc6:	d02e      	beq.n	800ae26 <UART_SetConfig+0xa36>
 800adc8:	e031      	b.n	800ae2e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800adca:	f7fc f81f 	bl	8006e0c <HAL_RCC_GetPCLK1Freq>
 800adce:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800add0:	e033      	b.n	800ae3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800add2:	f7fc f831 	bl	8006e38 <HAL_RCC_GetPCLK2Freq>
 800add6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800add8:	e02f      	b.n	800ae3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800adda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800adde:	4618      	mov	r0, r3
 800ade0:	f7fd fa60 	bl	80082a4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ade4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ade6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ade8:	e027      	b.n	800ae3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800adea:	f107 0318 	add.w	r3, r7, #24
 800adee:	4618      	mov	r0, r3
 800adf0:	f7fd fbac 	bl	800854c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800adf4:	69fb      	ldr	r3, [r7, #28]
 800adf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800adf8:	e01f      	b.n	800ae3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800adfa:	4b2d      	ldr	r3, [pc, #180]	@ (800aeb0 <UART_SetConfig+0xac0>)
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f003 0320 	and.w	r3, r3, #32
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d009      	beq.n	800ae1a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ae06:	4b2a      	ldr	r3, [pc, #168]	@ (800aeb0 <UART_SetConfig+0xac0>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	08db      	lsrs	r3, r3, #3
 800ae0c:	f003 0303 	and.w	r3, r3, #3
 800ae10:	4a28      	ldr	r2, [pc, #160]	@ (800aeb4 <UART_SetConfig+0xac4>)
 800ae12:	fa22 f303 	lsr.w	r3, r2, r3
 800ae16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ae18:	e00f      	b.n	800ae3a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ae1a:	4b26      	ldr	r3, [pc, #152]	@ (800aeb4 <UART_SetConfig+0xac4>)
 800ae1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae1e:	e00c      	b.n	800ae3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ae20:	4b25      	ldr	r3, [pc, #148]	@ (800aeb8 <UART_SetConfig+0xac8>)
 800ae22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae24:	e009      	b.n	800ae3a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ae26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800ae2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ae2c:	e005      	b.n	800ae3a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800ae32:	2301      	movs	r3, #1
 800ae34:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800ae38:	bf00      	nop
    }

    if (pclk != 0U)
 800ae3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d021      	beq.n	800ae84 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae44:	4a1d      	ldr	r2, [pc, #116]	@ (800aebc <UART_SetConfig+0xacc>)
 800ae46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ae4a:	461a      	mov	r2, r3
 800ae4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ae4e:	fbb3 f2f2 	udiv	r2, r3, r2
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	085b      	lsrs	r3, r3, #1
 800ae58:	441a      	add	r2, r3
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae62:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ae64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae66:	2b0f      	cmp	r3, #15
 800ae68:	d909      	bls.n	800ae7e <UART_SetConfig+0xa8e>
 800ae6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ae70:	d205      	bcs.n	800ae7e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ae72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae74:	b29a      	uxth	r2, r3
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	60da      	str	r2, [r3, #12]
 800ae7c:	e002      	b.n	800ae84 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ae84:	697b      	ldr	r3, [r7, #20]
 800ae86:	2201      	movs	r2, #1
 800ae88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	2201      	movs	r2, #1
 800ae90:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ae94:	697b      	ldr	r3, [r7, #20]
 800ae96:	2200      	movs	r2, #0
 800ae98:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800aea0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800aea4:	4618      	mov	r0, r3
 800aea6:	3748      	adds	r7, #72	@ 0x48
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800aeae:	bf00      	nop
 800aeb0:	58024400 	.word	0x58024400
 800aeb4:	03d09000 	.word	0x03d09000
 800aeb8:	003d0900 	.word	0x003d0900
 800aebc:	080120d0 	.word	0x080120d0

0800aec0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b083      	sub	sp, #12
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aecc:	f003 0308 	and.w	r3, r3, #8
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d00a      	beq.n	800aeea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	685b      	ldr	r3, [r3, #4]
 800aeda:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	430a      	orrs	r2, r1
 800aee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aeee:	f003 0301 	and.w	r3, r3, #1
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d00a      	beq.n	800af0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	430a      	orrs	r2, r1
 800af0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af10:	f003 0302 	and.w	r3, r3, #2
 800af14:	2b00      	cmp	r3, #0
 800af16:	d00a      	beq.n	800af2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	430a      	orrs	r2, r1
 800af2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af32:	f003 0304 	and.w	r3, r3, #4
 800af36:	2b00      	cmp	r3, #0
 800af38:	d00a      	beq.n	800af50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	685b      	ldr	r3, [r3, #4]
 800af40:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	430a      	orrs	r2, r1
 800af4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af54:	f003 0310 	and.w	r3, r3, #16
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d00a      	beq.n	800af72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	430a      	orrs	r2, r1
 800af70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af76:	f003 0320 	and.w	r3, r3, #32
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d00a      	beq.n	800af94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	689b      	ldr	r3, [r3, #8]
 800af84:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	430a      	orrs	r2, r1
 800af92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d01a      	beq.n	800afd6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	685b      	ldr	r3, [r3, #4]
 800afa6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	430a      	orrs	r2, r1
 800afb4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800afbe:	d10a      	bne.n	800afd6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	685b      	ldr	r3, [r3, #4]
 800afc6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	430a      	orrs	r2, r1
 800afd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800afda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00a      	beq.n	800aff8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	685b      	ldr	r3, [r3, #4]
 800afe8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	430a      	orrs	r2, r1
 800aff6:	605a      	str	r2, [r3, #4]
  }
}
 800aff8:	bf00      	nop
 800affa:	370c      	adds	r7, #12
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b098      	sub	sp, #96	@ 0x60
 800b008:	af02      	add	r7, sp, #8
 800b00a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2200      	movs	r2, #0
 800b010:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b014:	f7f6 ff7e 	bl	8001f14 <HAL_GetTick>
 800b018:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f003 0308 	and.w	r3, r3, #8
 800b024:	2b08      	cmp	r3, #8
 800b026:	d12f      	bne.n	800b088 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b028:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b02c:	9300      	str	r3, [sp, #0]
 800b02e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b030:	2200      	movs	r2, #0
 800b032:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800b036:	6878      	ldr	r0, [r7, #4]
 800b038:	f000 f88e 	bl	800b158 <UART_WaitOnFlagUntilTimeout>
 800b03c:	4603      	mov	r3, r0
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d022      	beq.n	800b088 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b04a:	e853 3f00 	ldrex	r3, [r3]
 800b04e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b050:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b052:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b056:	653b      	str	r3, [r7, #80]	@ 0x50
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	461a      	mov	r2, r3
 800b05e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b060:	647b      	str	r3, [r7, #68]	@ 0x44
 800b062:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b064:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b066:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b068:	e841 2300 	strex	r3, r2, [r1]
 800b06c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b06e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b070:	2b00      	cmp	r3, #0
 800b072:	d1e6      	bne.n	800b042 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	2220      	movs	r2, #32
 800b078:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b084:	2303      	movs	r3, #3
 800b086:	e063      	b.n	800b150 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	f003 0304 	and.w	r3, r3, #4
 800b092:	2b04      	cmp	r3, #4
 800b094:	d149      	bne.n	800b12a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b096:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800b09a:	9300      	str	r3, [sp, #0]
 800b09c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b09e:	2200      	movs	r2, #0
 800b0a0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f000 f857 	bl	800b158 <UART_WaitOnFlagUntilTimeout>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d03c      	beq.n	800b12a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0b8:	e853 3f00 	ldrex	r3, [r3]
 800b0bc:	623b      	str	r3, [r7, #32]
   return(result);
 800b0be:	6a3b      	ldr	r3, [r7, #32]
 800b0c0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b0c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b0ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800b0d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b0d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0d6:	e841 2300 	strex	r3, r2, [r1]
 800b0da:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800b0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d1e6      	bne.n	800b0b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	3308      	adds	r3, #8
 800b0e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	e853 3f00 	ldrex	r3, [r3]
 800b0f0:	60fb      	str	r3, [r7, #12]
   return(result);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	f023 0301 	bic.w	r3, r3, #1
 800b0f8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	3308      	adds	r3, #8
 800b100:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b102:	61fa      	str	r2, [r7, #28]
 800b104:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b106:	69b9      	ldr	r1, [r7, #24]
 800b108:	69fa      	ldr	r2, [r7, #28]
 800b10a:	e841 2300 	strex	r3, r2, [r1]
 800b10e:	617b      	str	r3, [r7, #20]
   return(result);
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	2b00      	cmp	r3, #0
 800b114:	d1e5      	bne.n	800b0e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2220      	movs	r2, #32
 800b11a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	2200      	movs	r2, #0
 800b122:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b126:	2303      	movs	r3, #3
 800b128:	e012      	b.n	800b150 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2220      	movs	r2, #32
 800b12e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2220      	movs	r2, #32
 800b136:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	2200      	movs	r2, #0
 800b13e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2200      	movs	r2, #0
 800b144:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	2200      	movs	r2, #0
 800b14a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800b14e:	2300      	movs	r3, #0
}
 800b150:	4618      	mov	r0, r3
 800b152:	3758      	adds	r7, #88	@ 0x58
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	603b      	str	r3, [r7, #0]
 800b164:	4613      	mov	r3, r2
 800b166:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b168:	e04f      	b.n	800b20a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b16a:	69bb      	ldr	r3, [r7, #24]
 800b16c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b170:	d04b      	beq.n	800b20a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b172:	f7f6 fecf 	bl	8001f14 <HAL_GetTick>
 800b176:	4602      	mov	r2, r0
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	1ad3      	subs	r3, r2, r3
 800b17c:	69ba      	ldr	r2, [r7, #24]
 800b17e:	429a      	cmp	r2, r3
 800b180:	d302      	bcc.n	800b188 <UART_WaitOnFlagUntilTimeout+0x30>
 800b182:	69bb      	ldr	r3, [r7, #24]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d101      	bne.n	800b18c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b188:	2303      	movs	r3, #3
 800b18a:	e04e      	b.n	800b22a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	f003 0304 	and.w	r3, r3, #4
 800b196:	2b00      	cmp	r3, #0
 800b198:	d037      	beq.n	800b20a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b19a:	68bb      	ldr	r3, [r7, #8]
 800b19c:	2b80      	cmp	r3, #128	@ 0x80
 800b19e:	d034      	beq.n	800b20a <UART_WaitOnFlagUntilTimeout+0xb2>
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	2b40      	cmp	r3, #64	@ 0x40
 800b1a4:	d031      	beq.n	800b20a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	69db      	ldr	r3, [r3, #28]
 800b1ac:	f003 0308 	and.w	r3, r3, #8
 800b1b0:	2b08      	cmp	r3, #8
 800b1b2:	d110      	bne.n	800b1d6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	2208      	movs	r2, #8
 800b1ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b1bc:	68f8      	ldr	r0, [r7, #12]
 800b1be:	f000 f839 	bl	800b234 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	2208      	movs	r2, #8
 800b1c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e029      	b.n	800b22a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	69db      	ldr	r3, [r3, #28]
 800b1dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b1e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b1e4:	d111      	bne.n	800b20a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b1ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b1f0:	68f8      	ldr	r0, [r7, #12]
 800b1f2:	f000 f81f 	bl	800b234 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2220      	movs	r2, #32
 800b1fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	2200      	movs	r2, #0
 800b202:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800b206:	2303      	movs	r3, #3
 800b208:	e00f      	b.n	800b22a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	69da      	ldr	r2, [r3, #28]
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	4013      	ands	r3, r2
 800b214:	68ba      	ldr	r2, [r7, #8]
 800b216:	429a      	cmp	r2, r3
 800b218:	bf0c      	ite	eq
 800b21a:	2301      	moveq	r3, #1
 800b21c:	2300      	movne	r3, #0
 800b21e:	b2db      	uxtb	r3, r3
 800b220:	461a      	mov	r2, r3
 800b222:	79fb      	ldrb	r3, [r7, #7]
 800b224:	429a      	cmp	r2, r3
 800b226:	d0a0      	beq.n	800b16a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b228:	2300      	movs	r3, #0
}
 800b22a:	4618      	mov	r0, r3
 800b22c:	3710      	adds	r7, #16
 800b22e:	46bd      	mov	sp, r7
 800b230:	bd80      	pop	{r7, pc}
	...

0800b234 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b234:	b480      	push	{r7}
 800b236:	b095      	sub	sp, #84	@ 0x54
 800b238:	af00      	add	r7, sp, #0
 800b23a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b242:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b244:	e853 3f00 	ldrex	r3, [r3]
 800b248:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800b24a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b24c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b250:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	461a      	mov	r2, r3
 800b258:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b25a:	643b      	str	r3, [r7, #64]	@ 0x40
 800b25c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b25e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800b260:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b262:	e841 2300 	strex	r3, r2, [r1]
 800b266:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800b268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d1e6      	bne.n	800b23c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	3308      	adds	r3, #8
 800b274:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b276:	6a3b      	ldr	r3, [r7, #32]
 800b278:	e853 3f00 	ldrex	r3, [r3]
 800b27c:	61fb      	str	r3, [r7, #28]
   return(result);
 800b27e:	69fa      	ldr	r2, [r7, #28]
 800b280:	4b1e      	ldr	r3, [pc, #120]	@ (800b2fc <UART_EndRxTransfer+0xc8>)
 800b282:	4013      	ands	r3, r2
 800b284:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	3308      	adds	r3, #8
 800b28c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b28e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b290:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b292:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b294:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b296:	e841 2300 	strex	r3, r2, [r1]
 800b29a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800b29c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d1e5      	bne.n	800b26e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b2a6:	2b01      	cmp	r3, #1
 800b2a8:	d118      	bne.n	800b2dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	e853 3f00 	ldrex	r3, [r3]
 800b2b6:	60bb      	str	r3, [r7, #8]
   return(result);
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	f023 0310 	bic.w	r3, r3, #16
 800b2be:	647b      	str	r3, [r7, #68]	@ 0x44
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b2c8:	61bb      	str	r3, [r7, #24]
 800b2ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2cc:	6979      	ldr	r1, [r7, #20]
 800b2ce:	69ba      	ldr	r2, [r7, #24]
 800b2d0:	e841 2300 	strex	r3, r2, [r1]
 800b2d4:	613b      	str	r3, [r7, #16]
   return(result);
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d1e6      	bne.n	800b2aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2220      	movs	r2, #32
 800b2e0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800b2f0:	bf00      	nop
 800b2f2:	3754      	adds	r7, #84	@ 0x54
 800b2f4:	46bd      	mov	sp, r7
 800b2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fa:	4770      	bx	lr
 800b2fc:	effffffe 	.word	0xeffffffe

0800b300 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b300:	b084      	sub	sp, #16
 800b302:	b580      	push	{r7, lr}
 800b304:	b084      	sub	sp, #16
 800b306:	af00      	add	r7, sp, #0
 800b308:	6078      	str	r0, [r7, #4]
 800b30a:	f107 001c 	add.w	r0, r7, #28
 800b30e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b312:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b316:	2b01      	cmp	r3, #1
 800b318:	d121      	bne.n	800b35e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b31e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	68da      	ldr	r2, [r3, #12]
 800b32a:	4b2c      	ldr	r3, [pc, #176]	@ (800b3dc <USB_CoreInit+0xdc>)
 800b32c:	4013      	ands	r3, r2
 800b32e:	687a      	ldr	r2, [r7, #4]
 800b330:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	68db      	ldr	r3, [r3, #12]
 800b336:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b33e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b342:	2b01      	cmp	r3, #1
 800b344:	d105      	bne.n	800b352 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	68db      	ldr	r3, [r3, #12]
 800b34a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b352:	6878      	ldr	r0, [r7, #4]
 800b354:	f001 faf6 	bl	800c944 <USB_CoreReset>
 800b358:	4603      	mov	r3, r0
 800b35a:	73fb      	strb	r3, [r7, #15]
 800b35c:	e01b      	b.n	800b396 <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f001 faea 	bl	800c944 <USB_CoreReset>
 800b370:	4603      	mov	r3, r0
 800b372:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b374:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d106      	bne.n	800b38a <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b380:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	639a      	str	r2, [r3, #56]	@ 0x38
 800b388:	e005      	b.n	800b396 <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b38e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b396:	7fbb      	ldrb	r3, [r7, #30]
 800b398:	2b01      	cmp	r3, #1
 800b39a:	d116      	bne.n	800b3ca <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b3a0:	b29a      	uxth	r2, r3
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800b3aa:	4b0d      	ldr	r3, [pc, #52]	@ (800b3e0 <USB_CoreInit+0xe0>)
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	687a      	ldr	r2, [r7, #4]
 800b3b0:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	689b      	ldr	r3, [r3, #8]
 800b3b6:	f043 0206 	orr.w	r2, r3, #6
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	689b      	ldr	r3, [r3, #8]
 800b3c2:	f043 0220 	orr.w	r2, r3, #32
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b3ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3710      	adds	r7, #16
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b3d6:	b004      	add	sp, #16
 800b3d8:	4770      	bx	lr
 800b3da:	bf00      	nop
 800b3dc:	ffbdffbf 	.word	0xffbdffbf
 800b3e0:	03ee0000 	.word	0x03ee0000

0800b3e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b3e4:	b480      	push	{r7}
 800b3e6:	b087      	sub	sp, #28
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	60f8      	str	r0, [r7, #12]
 800b3ec:	60b9      	str	r1, [r7, #8]
 800b3ee:	4613      	mov	r3, r2
 800b3f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b3f2:	79fb      	ldrb	r3, [r7, #7]
 800b3f4:	2b02      	cmp	r3, #2
 800b3f6:	d165      	bne.n	800b4c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	4a41      	ldr	r2, [pc, #260]	@ (800b500 <USB_SetTurnaroundTime+0x11c>)
 800b3fc:	4293      	cmp	r3, r2
 800b3fe:	d906      	bls.n	800b40e <USB_SetTurnaroundTime+0x2a>
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	4a40      	ldr	r2, [pc, #256]	@ (800b504 <USB_SetTurnaroundTime+0x120>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d202      	bcs.n	800b40e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b408:	230f      	movs	r3, #15
 800b40a:	617b      	str	r3, [r7, #20]
 800b40c:	e062      	b.n	800b4d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b40e:	68bb      	ldr	r3, [r7, #8]
 800b410:	4a3c      	ldr	r2, [pc, #240]	@ (800b504 <USB_SetTurnaroundTime+0x120>)
 800b412:	4293      	cmp	r3, r2
 800b414:	d306      	bcc.n	800b424 <USB_SetTurnaroundTime+0x40>
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	4a3b      	ldr	r2, [pc, #236]	@ (800b508 <USB_SetTurnaroundTime+0x124>)
 800b41a:	4293      	cmp	r3, r2
 800b41c:	d202      	bcs.n	800b424 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b41e:	230e      	movs	r3, #14
 800b420:	617b      	str	r3, [r7, #20]
 800b422:	e057      	b.n	800b4d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b424:	68bb      	ldr	r3, [r7, #8]
 800b426:	4a38      	ldr	r2, [pc, #224]	@ (800b508 <USB_SetTurnaroundTime+0x124>)
 800b428:	4293      	cmp	r3, r2
 800b42a:	d306      	bcc.n	800b43a <USB_SetTurnaroundTime+0x56>
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	4a37      	ldr	r2, [pc, #220]	@ (800b50c <USB_SetTurnaroundTime+0x128>)
 800b430:	4293      	cmp	r3, r2
 800b432:	d202      	bcs.n	800b43a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b434:	230d      	movs	r3, #13
 800b436:	617b      	str	r3, [r7, #20]
 800b438:	e04c      	b.n	800b4d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b43a:	68bb      	ldr	r3, [r7, #8]
 800b43c:	4a33      	ldr	r2, [pc, #204]	@ (800b50c <USB_SetTurnaroundTime+0x128>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d306      	bcc.n	800b450 <USB_SetTurnaroundTime+0x6c>
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	4a32      	ldr	r2, [pc, #200]	@ (800b510 <USB_SetTurnaroundTime+0x12c>)
 800b446:	4293      	cmp	r3, r2
 800b448:	d802      	bhi.n	800b450 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b44a:	230c      	movs	r3, #12
 800b44c:	617b      	str	r3, [r7, #20]
 800b44e:	e041      	b.n	800b4d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	4a2f      	ldr	r2, [pc, #188]	@ (800b510 <USB_SetTurnaroundTime+0x12c>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d906      	bls.n	800b466 <USB_SetTurnaroundTime+0x82>
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	4a2e      	ldr	r2, [pc, #184]	@ (800b514 <USB_SetTurnaroundTime+0x130>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d802      	bhi.n	800b466 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b460:	230b      	movs	r3, #11
 800b462:	617b      	str	r3, [r7, #20]
 800b464:	e036      	b.n	800b4d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b466:	68bb      	ldr	r3, [r7, #8]
 800b468:	4a2a      	ldr	r2, [pc, #168]	@ (800b514 <USB_SetTurnaroundTime+0x130>)
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d906      	bls.n	800b47c <USB_SetTurnaroundTime+0x98>
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	4a29      	ldr	r2, [pc, #164]	@ (800b518 <USB_SetTurnaroundTime+0x134>)
 800b472:	4293      	cmp	r3, r2
 800b474:	d802      	bhi.n	800b47c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b476:	230a      	movs	r3, #10
 800b478:	617b      	str	r3, [r7, #20]
 800b47a:	e02b      	b.n	800b4d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	4a26      	ldr	r2, [pc, #152]	@ (800b518 <USB_SetTurnaroundTime+0x134>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d906      	bls.n	800b492 <USB_SetTurnaroundTime+0xae>
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	4a25      	ldr	r2, [pc, #148]	@ (800b51c <USB_SetTurnaroundTime+0x138>)
 800b488:	4293      	cmp	r3, r2
 800b48a:	d202      	bcs.n	800b492 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b48c:	2309      	movs	r3, #9
 800b48e:	617b      	str	r3, [r7, #20]
 800b490:	e020      	b.n	800b4d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	4a21      	ldr	r2, [pc, #132]	@ (800b51c <USB_SetTurnaroundTime+0x138>)
 800b496:	4293      	cmp	r3, r2
 800b498:	d306      	bcc.n	800b4a8 <USB_SetTurnaroundTime+0xc4>
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	4a20      	ldr	r2, [pc, #128]	@ (800b520 <USB_SetTurnaroundTime+0x13c>)
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d802      	bhi.n	800b4a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b4a2:	2308      	movs	r3, #8
 800b4a4:	617b      	str	r3, [r7, #20]
 800b4a6:	e015      	b.n	800b4d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	4a1d      	ldr	r2, [pc, #116]	@ (800b520 <USB_SetTurnaroundTime+0x13c>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d906      	bls.n	800b4be <USB_SetTurnaroundTime+0xda>
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	4a1c      	ldr	r2, [pc, #112]	@ (800b524 <USB_SetTurnaroundTime+0x140>)
 800b4b4:	4293      	cmp	r3, r2
 800b4b6:	d202      	bcs.n	800b4be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b4b8:	2307      	movs	r3, #7
 800b4ba:	617b      	str	r3, [r7, #20]
 800b4bc:	e00a      	b.n	800b4d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b4be:	2306      	movs	r3, #6
 800b4c0:	617b      	str	r3, [r7, #20]
 800b4c2:	e007      	b.n	800b4d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b4c4:	79fb      	ldrb	r3, [r7, #7]
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d102      	bne.n	800b4d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b4ca:	2309      	movs	r3, #9
 800b4cc:	617b      	str	r3, [r7, #20]
 800b4ce:	e001      	b.n	800b4d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b4d0:	2309      	movs	r3, #9
 800b4d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	68db      	ldr	r3, [r3, #12]
 800b4d8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	68da      	ldr	r2, [r3, #12]
 800b4e4:	697b      	ldr	r3, [r7, #20]
 800b4e6:	029b      	lsls	r3, r3, #10
 800b4e8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800b4ec:	431a      	orrs	r2, r3
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b4f2:	2300      	movs	r3, #0
}
 800b4f4:	4618      	mov	r0, r3
 800b4f6:	371c      	adds	r7, #28
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fe:	4770      	bx	lr
 800b500:	00d8acbf 	.word	0x00d8acbf
 800b504:	00e4e1c0 	.word	0x00e4e1c0
 800b508:	00f42400 	.word	0x00f42400
 800b50c:	01067380 	.word	0x01067380
 800b510:	011a499f 	.word	0x011a499f
 800b514:	01312cff 	.word	0x01312cff
 800b518:	014ca43f 	.word	0x014ca43f
 800b51c:	016e3600 	.word	0x016e3600
 800b520:	01a6ab1f 	.word	0x01a6ab1f
 800b524:	01e84800 	.word	0x01e84800

0800b528 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b528:	b480      	push	{r7}
 800b52a:	b083      	sub	sp, #12
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	689b      	ldr	r3, [r3, #8]
 800b534:	f043 0201 	orr.w	r2, r3, #1
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b53c:	2300      	movs	r3, #0
}
 800b53e:	4618      	mov	r0, r3
 800b540:	370c      	adds	r7, #12
 800b542:	46bd      	mov	sp, r7
 800b544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b548:	4770      	bx	lr

0800b54a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b54a:	b480      	push	{r7}
 800b54c:	b083      	sub	sp, #12
 800b54e:	af00      	add	r7, sp, #0
 800b550:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	689b      	ldr	r3, [r3, #8]
 800b556:	f023 0201 	bic.w	r2, r3, #1
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b55e:	2300      	movs	r3, #0
}
 800b560:	4618      	mov	r0, r3
 800b562:	370c      	adds	r7, #12
 800b564:	46bd      	mov	sp, r7
 800b566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56a:	4770      	bx	lr

0800b56c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	460b      	mov	r3, r1
 800b576:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b578:	2300      	movs	r3, #0
 800b57a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	68db      	ldr	r3, [r3, #12]
 800b580:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b588:	78fb      	ldrb	r3, [r7, #3]
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	d115      	bne.n	800b5ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	68db      	ldr	r3, [r3, #12]
 800b592:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b59a:	200a      	movs	r0, #10
 800b59c:	f7f6 fcc6 	bl	8001f2c <HAL_Delay>
      ms += 10U;
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	330a      	adds	r3, #10
 800b5a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f001 f93b 	bl	800c822 <USB_GetMode>
 800b5ac:	4603      	mov	r3, r0
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d01e      	beq.n	800b5f0 <USB_SetCurrentMode+0x84>
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	2bc7      	cmp	r3, #199	@ 0xc7
 800b5b6:	d9f0      	bls.n	800b59a <USB_SetCurrentMode+0x2e>
 800b5b8:	e01a      	b.n	800b5f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b5ba:	78fb      	ldrb	r3, [r7, #3]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d115      	bne.n	800b5ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	68db      	ldr	r3, [r3, #12]
 800b5c4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800b5cc:	200a      	movs	r0, #10
 800b5ce:	f7f6 fcad 	bl	8001f2c <HAL_Delay>
      ms += 10U;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	330a      	adds	r3, #10
 800b5d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f001 f922 	bl	800c822 <USB_GetMode>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d005      	beq.n	800b5f0 <USB_SetCurrentMode+0x84>
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2bc7      	cmp	r3, #199	@ 0xc7
 800b5e8:	d9f0      	bls.n	800b5cc <USB_SetCurrentMode+0x60>
 800b5ea:	e001      	b.n	800b5f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b5ec:	2301      	movs	r3, #1
 800b5ee:	e005      	b.n	800b5fc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2bc8      	cmp	r3, #200	@ 0xc8
 800b5f4:	d101      	bne.n	800b5fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	e000      	b.n	800b5fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b5fa:	2300      	movs	r3, #0
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3710      	adds	r7, #16
 800b600:	46bd      	mov	sp, r7
 800b602:	bd80      	pop	{r7, pc}

0800b604 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b604:	b084      	sub	sp, #16
 800b606:	b580      	push	{r7, lr}
 800b608:	b086      	sub	sp, #24
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
 800b60e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800b612:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b616:	2300      	movs	r3, #0
 800b618:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b61e:	2300      	movs	r3, #0
 800b620:	613b      	str	r3, [r7, #16]
 800b622:	e009      	b.n	800b638 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b624:	687a      	ldr	r2, [r7, #4]
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	3340      	adds	r3, #64	@ 0x40
 800b62a:	009b      	lsls	r3, r3, #2
 800b62c:	4413      	add	r3, r2
 800b62e:	2200      	movs	r2, #0
 800b630:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	3301      	adds	r3, #1
 800b636:	613b      	str	r3, [r7, #16]
 800b638:	693b      	ldr	r3, [r7, #16]
 800b63a:	2b0e      	cmp	r3, #14
 800b63c:	d9f2      	bls.n	800b624 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b63e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b642:	2b00      	cmp	r3, #0
 800b644:	d11c      	bne.n	800b680 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b64c:	685b      	ldr	r3, [r3, #4]
 800b64e:	68fa      	ldr	r2, [r7, #12]
 800b650:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b654:	f043 0302 	orr.w	r3, r3, #2
 800b658:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b65e:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	601a      	str	r2, [r3, #0]
 800b67e:	e005      	b.n	800b68c <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b684:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b692:	461a      	mov	r2, r3
 800b694:	2300      	movs	r3, #0
 800b696:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b698:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d10d      	bne.n	800b6bc <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b6a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d104      	bne.n	800b6b2 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b6a8:	2100      	movs	r1, #0
 800b6aa:	6878      	ldr	r0, [r7, #4]
 800b6ac:	f000 f968 	bl	800b980 <USB_SetDevSpeed>
 800b6b0:	e008      	b.n	800b6c4 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b6b2:	2101      	movs	r1, #1
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 f963 	bl	800b980 <USB_SetDevSpeed>
 800b6ba:	e003      	b.n	800b6c4 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b6bc:	2103      	movs	r1, #3
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 f95e 	bl	800b980 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b6c4:	2110      	movs	r1, #16
 800b6c6:	6878      	ldr	r0, [r7, #4]
 800b6c8:	f000 f8fa 	bl	800b8c0 <USB_FlushTxFifo>
 800b6cc:	4603      	mov	r3, r0
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d001      	beq.n	800b6d6 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 f924 	bl	800b924 <USB_FlushRxFifo>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d001      	beq.n	800b6e6 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6f8:	461a      	mov	r2, r3
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b704:	461a      	mov	r2, r3
 800b706:	2300      	movs	r3, #0
 800b708:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b70a:	2300      	movs	r3, #0
 800b70c:	613b      	str	r3, [r7, #16]
 800b70e:	e043      	b.n	800b798 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	015a      	lsls	r2, r3, #5
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	4413      	add	r3, r2
 800b718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b722:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b726:	d118      	bne.n	800b75a <USB_DevInit+0x156>
    {
      if (i == 0U)
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d10a      	bne.n	800b744 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	015a      	lsls	r2, r3, #5
 800b732:	68fb      	ldr	r3, [r7, #12]
 800b734:	4413      	add	r3, r2
 800b736:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b73a:	461a      	mov	r2, r3
 800b73c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b740:	6013      	str	r3, [r2, #0]
 800b742:	e013      	b.n	800b76c <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	015a      	lsls	r2, r3, #5
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	4413      	add	r3, r2
 800b74c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b750:	461a      	mov	r2, r3
 800b752:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b756:	6013      	str	r3, [r2, #0]
 800b758:	e008      	b.n	800b76c <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	015a      	lsls	r2, r3, #5
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	4413      	add	r3, r2
 800b762:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b766:	461a      	mov	r2, r3
 800b768:	2300      	movs	r3, #0
 800b76a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	015a      	lsls	r2, r3, #5
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	4413      	add	r3, r2
 800b774:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b778:	461a      	mov	r2, r3
 800b77a:	2300      	movs	r3, #0
 800b77c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	015a      	lsls	r2, r3, #5
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	4413      	add	r3, r2
 800b786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b78a:	461a      	mov	r2, r3
 800b78c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b790:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	3301      	adds	r3, #1
 800b796:	613b      	str	r3, [r7, #16]
 800b798:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b79c:	461a      	mov	r2, r3
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	d3b5      	bcc.n	800b710 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	613b      	str	r3, [r7, #16]
 800b7a8:	e043      	b.n	800b832 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	015a      	lsls	r2, r3, #5
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	4413      	add	r3, r2
 800b7b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b7bc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b7c0:	d118      	bne.n	800b7f4 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d10a      	bne.n	800b7de <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b7c8:	693b      	ldr	r3, [r7, #16]
 800b7ca:	015a      	lsls	r2, r3, #5
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	4413      	add	r3, r2
 800b7d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800b7da:	6013      	str	r3, [r2, #0]
 800b7dc:	e013      	b.n	800b806 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	015a      	lsls	r2, r3, #5
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	4413      	add	r3, r2
 800b7e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7ea:	461a      	mov	r2, r3
 800b7ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800b7f0:	6013      	str	r3, [r2, #0]
 800b7f2:	e008      	b.n	800b806 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	015a      	lsls	r2, r3, #5
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	4413      	add	r3, r2
 800b7fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b800:	461a      	mov	r2, r3
 800b802:	2300      	movs	r3, #0
 800b804:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	015a      	lsls	r2, r3, #5
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	4413      	add	r3, r2
 800b80e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b812:	461a      	mov	r2, r3
 800b814:	2300      	movs	r3, #0
 800b816:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	015a      	lsls	r2, r3, #5
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	4413      	add	r3, r2
 800b820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b824:	461a      	mov	r2, r3
 800b826:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800b82a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	3301      	adds	r3, #1
 800b830:	613b      	str	r3, [r7, #16]
 800b832:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b836:	461a      	mov	r2, r3
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	4293      	cmp	r3, r2
 800b83c:	d3b5      	bcc.n	800b7aa <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b844:	691b      	ldr	r3, [r3, #16]
 800b846:	68fa      	ldr	r2, [r7, #12]
 800b848:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b84c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b850:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2200      	movs	r2, #0
 800b856:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800b85e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b860:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b864:	2b00      	cmp	r3, #0
 800b866:	d105      	bne.n	800b874 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	699b      	ldr	r3, [r3, #24]
 800b86c:	f043 0210 	orr.w	r2, r3, #16
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	699a      	ldr	r2, [r3, #24]
 800b878:	4b0f      	ldr	r3, [pc, #60]	@ (800b8b8 <USB_DevInit+0x2b4>)
 800b87a:	4313      	orrs	r3, r2
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b880:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800b884:	2b00      	cmp	r3, #0
 800b886:	d005      	beq.n	800b894 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	699b      	ldr	r3, [r3, #24]
 800b88c:	f043 0208 	orr.w	r2, r3, #8
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b894:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d105      	bne.n	800b8a8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	699a      	ldr	r2, [r3, #24]
 800b8a0:	4b06      	ldr	r3, [pc, #24]	@ (800b8bc <USB_DevInit+0x2b8>)
 800b8a2:	4313      	orrs	r3, r2
 800b8a4:	687a      	ldr	r2, [r7, #4]
 800b8a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b8a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	3718      	adds	r7, #24
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b8b4:	b004      	add	sp, #16
 800b8b6:	4770      	bx	lr
 800b8b8:	803c3800 	.word	0x803c3800
 800b8bc:	40000004 	.word	0x40000004

0800b8c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b8c0:	b480      	push	{r7}
 800b8c2:	b085      	sub	sp, #20
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b8da:	d901      	bls.n	800b8e0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b8dc:	2303      	movs	r3, #3
 800b8de:	e01b      	b.n	800b918 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	691b      	ldr	r3, [r3, #16]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	daf2      	bge.n	800b8ce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	019b      	lsls	r3, r3, #6
 800b8f0:	f043 0220 	orr.w	r2, r3, #32
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	3301      	adds	r3, #1
 800b8fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b904:	d901      	bls.n	800b90a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b906:	2303      	movs	r3, #3
 800b908:	e006      	b.n	800b918 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	691b      	ldr	r3, [r3, #16]
 800b90e:	f003 0320 	and.w	r3, r3, #32
 800b912:	2b20      	cmp	r3, #32
 800b914:	d0f0      	beq.n	800b8f8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b916:	2300      	movs	r3, #0
}
 800b918:	4618      	mov	r0, r3
 800b91a:	3714      	adds	r7, #20
 800b91c:	46bd      	mov	sp, r7
 800b91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b922:	4770      	bx	lr

0800b924 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b924:	b480      	push	{r7}
 800b926:	b085      	sub	sp, #20
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b92c:	2300      	movs	r3, #0
 800b92e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	3301      	adds	r3, #1
 800b934:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b93c:	d901      	bls.n	800b942 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b93e:	2303      	movs	r3, #3
 800b940:	e018      	b.n	800b974 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	691b      	ldr	r3, [r3, #16]
 800b946:	2b00      	cmp	r3, #0
 800b948:	daf2      	bge.n	800b930 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b94a:	2300      	movs	r3, #0
 800b94c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2210      	movs	r2, #16
 800b952:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	3301      	adds	r3, #1
 800b958:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b960:	d901      	bls.n	800b966 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b962:	2303      	movs	r3, #3
 800b964:	e006      	b.n	800b974 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	691b      	ldr	r3, [r3, #16]
 800b96a:	f003 0310 	and.w	r3, r3, #16
 800b96e:	2b10      	cmp	r3, #16
 800b970:	d0f0      	beq.n	800b954 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b972:	2300      	movs	r3, #0
}
 800b974:	4618      	mov	r0, r3
 800b976:	3714      	adds	r7, #20
 800b978:	46bd      	mov	sp, r7
 800b97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97e:	4770      	bx	lr

0800b980 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b980:	b480      	push	{r7}
 800b982:	b085      	sub	sp, #20
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
 800b988:	460b      	mov	r3, r1
 800b98a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b996:	681a      	ldr	r2, [r3, #0]
 800b998:	78fb      	ldrb	r3, [r7, #3]
 800b99a:	68f9      	ldr	r1, [r7, #12]
 800b99c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b9a4:	2300      	movs	r3, #0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3714      	adds	r7, #20
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr

0800b9b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800b9b2:	b480      	push	{r7}
 800b9b4:	b087      	sub	sp, #28
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9c4:	689b      	ldr	r3, [r3, #8]
 800b9c6:	f003 0306 	and.w	r3, r3, #6
 800b9ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d102      	bne.n	800b9d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	75fb      	strb	r3, [r7, #23]
 800b9d6:	e00a      	b.n	800b9ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	2b02      	cmp	r3, #2
 800b9dc:	d002      	beq.n	800b9e4 <USB_GetDevSpeed+0x32>
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	2b06      	cmp	r3, #6
 800b9e2:	d102      	bne.n	800b9ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b9e4:	2302      	movs	r3, #2
 800b9e6:	75fb      	strb	r3, [r7, #23]
 800b9e8:	e001      	b.n	800b9ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b9ea:	230f      	movs	r3, #15
 800b9ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b9ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	371c      	adds	r7, #28
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fa:	4770      	bx	lr

0800b9fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]
 800ba04:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	785b      	ldrb	r3, [r3, #1]
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d139      	bne.n	800ba8c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba1e:	69da      	ldr	r2, [r3, #28]
 800ba20:	683b      	ldr	r3, [r7, #0]
 800ba22:	781b      	ldrb	r3, [r3, #0]
 800ba24:	f003 030f 	and.w	r3, r3, #15
 800ba28:	2101      	movs	r1, #1
 800ba2a:	fa01 f303 	lsl.w	r3, r1, r3
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	68f9      	ldr	r1, [r7, #12]
 800ba32:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ba36:	4313      	orrs	r3, r2
 800ba38:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ba3a:	68bb      	ldr	r3, [r7, #8]
 800ba3c:	015a      	lsls	r2, r3, #5
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	4413      	add	r3, r2
 800ba42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d153      	bne.n	800baf8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ba50:	68bb      	ldr	r3, [r7, #8]
 800ba52:	015a      	lsls	r2, r3, #5
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	4413      	add	r3, r2
 800ba58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba5c:	681a      	ldr	r2, [r3, #0]
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	689b      	ldr	r3, [r3, #8]
 800ba62:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	791b      	ldrb	r3, [r3, #4]
 800ba6a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ba6c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	059b      	lsls	r3, r3, #22
 800ba72:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ba74:	431a      	orrs	r2, r3
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	0159      	lsls	r1, r3, #5
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	440b      	add	r3, r1
 800ba7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba82:	4619      	mov	r1, r3
 800ba84:	4b20      	ldr	r3, [pc, #128]	@ (800bb08 <USB_ActivateEndpoint+0x10c>)
 800ba86:	4313      	orrs	r3, r2
 800ba88:	600b      	str	r3, [r1, #0]
 800ba8a:	e035      	b.n	800baf8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba92:	69da      	ldr	r2, [r3, #28]
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	781b      	ldrb	r3, [r3, #0]
 800ba98:	f003 030f 	and.w	r3, r3, #15
 800ba9c:	2101      	movs	r1, #1
 800ba9e:	fa01 f303 	lsl.w	r3, r1, r3
 800baa2:	041b      	lsls	r3, r3, #16
 800baa4:	68f9      	ldr	r1, [r7, #12]
 800baa6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800baaa:	4313      	orrs	r3, r2
 800baac:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	015a      	lsls	r2, r3, #5
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	4413      	add	r3, r2
 800bab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d119      	bne.n	800baf8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	015a      	lsls	r2, r3, #5
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	4413      	add	r3, r2
 800bacc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bad0:	681a      	ldr	r2, [r3, #0]
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	689b      	ldr	r3, [r3, #8]
 800bad6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	791b      	ldrb	r3, [r3, #4]
 800bade:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bae0:	430b      	orrs	r3, r1
 800bae2:	431a      	orrs	r2, r3
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	0159      	lsls	r1, r3, #5
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	440b      	add	r3, r1
 800baec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800baf0:	4619      	mov	r1, r3
 800baf2:	4b05      	ldr	r3, [pc, #20]	@ (800bb08 <USB_ActivateEndpoint+0x10c>)
 800baf4:	4313      	orrs	r3, r2
 800baf6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800baf8:	2300      	movs	r3, #0
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3714      	adds	r7, #20
 800bafe:	46bd      	mov	sp, r7
 800bb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb04:	4770      	bx	lr
 800bb06:	bf00      	nop
 800bb08:	10008000 	.word	0x10008000

0800bb0c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bb0c:	b480      	push	{r7}
 800bb0e:	b085      	sub	sp, #20
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	781b      	ldrb	r3, [r3, #0]
 800bb1e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bb20:	683b      	ldr	r3, [r7, #0]
 800bb22:	785b      	ldrb	r3, [r3, #1]
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	d161      	bne.n	800bbec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bb28:	68bb      	ldr	r3, [r7, #8]
 800bb2a:	015a      	lsls	r2, r3, #5
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	4413      	add	r3, r2
 800bb30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bb3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb3e:	d11f      	bne.n	800bb80 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	015a      	lsls	r2, r3, #5
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	4413      	add	r3, r2
 800bb48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	68ba      	ldr	r2, [r7, #8]
 800bb50:	0151      	lsls	r1, r2, #5
 800bb52:	68fa      	ldr	r2, [r7, #12]
 800bb54:	440a      	add	r2, r1
 800bb56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bb5a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bb5e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bb60:	68bb      	ldr	r3, [r7, #8]
 800bb62:	015a      	lsls	r2, r3, #5
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	4413      	add	r3, r2
 800bb68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	68ba      	ldr	r2, [r7, #8]
 800bb70:	0151      	lsls	r1, r2, #5
 800bb72:	68fa      	ldr	r2, [r7, #12]
 800bb74:	440a      	add	r2, r1
 800bb76:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bb7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bb7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	f003 030f 	and.w	r3, r3, #15
 800bb90:	2101      	movs	r1, #1
 800bb92:	fa01 f303 	lsl.w	r3, r1, r3
 800bb96:	b29b      	uxth	r3, r3
 800bb98:	43db      	mvns	r3, r3
 800bb9a:	68f9      	ldr	r1, [r7, #12]
 800bb9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bba0:	4013      	ands	r3, r2
 800bba2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bbaa:	69da      	ldr	r2, [r3, #28]
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	781b      	ldrb	r3, [r3, #0]
 800bbb0:	f003 030f 	and.w	r3, r3, #15
 800bbb4:	2101      	movs	r1, #1
 800bbb6:	fa01 f303 	lsl.w	r3, r1, r3
 800bbba:	b29b      	uxth	r3, r3
 800bbbc:	43db      	mvns	r3, r3
 800bbbe:	68f9      	ldr	r1, [r7, #12]
 800bbc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bbc4:	4013      	ands	r3, r2
 800bbc6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bbc8:	68bb      	ldr	r3, [r7, #8]
 800bbca:	015a      	lsls	r2, r3, #5
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	4413      	add	r3, r2
 800bbd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbd4:	681a      	ldr	r2, [r3, #0]
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	0159      	lsls	r1, r3, #5
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	440b      	add	r3, r1
 800bbde:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bbe2:	4619      	mov	r1, r3
 800bbe4:	4b35      	ldr	r3, [pc, #212]	@ (800bcbc <USB_DeactivateEndpoint+0x1b0>)
 800bbe6:	4013      	ands	r3, r2
 800bbe8:	600b      	str	r3, [r1, #0]
 800bbea:	e060      	b.n	800bcae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bbec:	68bb      	ldr	r3, [r7, #8]
 800bbee:	015a      	lsls	r2, r3, #5
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	4413      	add	r3, r2
 800bbf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bbfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bc02:	d11f      	bne.n	800bc44 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	015a      	lsls	r2, r3, #5
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	4413      	add	r3, r2
 800bc0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	68ba      	ldr	r2, [r7, #8]
 800bc14:	0151      	lsls	r1, r2, #5
 800bc16:	68fa      	ldr	r2, [r7, #12]
 800bc18:	440a      	add	r2, r1
 800bc1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bc1e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800bc22:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bc24:	68bb      	ldr	r3, [r7, #8]
 800bc26:	015a      	lsls	r2, r3, #5
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	4413      	add	r3, r2
 800bc2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	68ba      	ldr	r2, [r7, #8]
 800bc34:	0151      	lsls	r1, r2, #5
 800bc36:	68fa      	ldr	r2, [r7, #12]
 800bc38:	440a      	add	r2, r1
 800bc3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bc3e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bc42:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	f003 030f 	and.w	r3, r3, #15
 800bc54:	2101      	movs	r1, #1
 800bc56:	fa01 f303 	lsl.w	r3, r1, r3
 800bc5a:	041b      	lsls	r3, r3, #16
 800bc5c:	43db      	mvns	r3, r3
 800bc5e:	68f9      	ldr	r1, [r7, #12]
 800bc60:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bc64:	4013      	ands	r3, r2
 800bc66:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc6e:	69da      	ldr	r2, [r3, #28]
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	781b      	ldrb	r3, [r3, #0]
 800bc74:	f003 030f 	and.w	r3, r3, #15
 800bc78:	2101      	movs	r1, #1
 800bc7a:	fa01 f303 	lsl.w	r3, r1, r3
 800bc7e:	041b      	lsls	r3, r3, #16
 800bc80:	43db      	mvns	r3, r3
 800bc82:	68f9      	ldr	r1, [r7, #12]
 800bc84:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bc88:	4013      	ands	r3, r2
 800bc8a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	015a      	lsls	r2, r3, #5
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	4413      	add	r3, r2
 800bc94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	0159      	lsls	r1, r3, #5
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	440b      	add	r3, r1
 800bca2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bca6:	4619      	mov	r1, r3
 800bca8:	4b05      	ldr	r3, [pc, #20]	@ (800bcc0 <USB_DeactivateEndpoint+0x1b4>)
 800bcaa:	4013      	ands	r3, r2
 800bcac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bcae:	2300      	movs	r3, #0
}
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	3714      	adds	r7, #20
 800bcb4:	46bd      	mov	sp, r7
 800bcb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcba:	4770      	bx	lr
 800bcbc:	ec337800 	.word	0xec337800
 800bcc0:	eff37800 	.word	0xeff37800

0800bcc4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b08a      	sub	sp, #40	@ 0x28
 800bcc8:	af02      	add	r7, sp, #8
 800bcca:	60f8      	str	r0, [r7, #12]
 800bccc:	60b9      	str	r1, [r7, #8]
 800bcce:	4613      	mov	r3, r2
 800bcd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	781b      	ldrb	r3, [r3, #0]
 800bcda:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bcdc:	68bb      	ldr	r3, [r7, #8]
 800bcde:	785b      	ldrb	r3, [r3, #1]
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	f040 8181 	bne.w	800bfe8 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bce6:	68bb      	ldr	r3, [r7, #8]
 800bce8:	691b      	ldr	r3, [r3, #16]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d132      	bne.n	800bd54 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bcee:	69bb      	ldr	r3, [r7, #24]
 800bcf0:	015a      	lsls	r2, r3, #5
 800bcf2:	69fb      	ldr	r3, [r7, #28]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bcfa:	691a      	ldr	r2, [r3, #16]
 800bcfc:	69bb      	ldr	r3, [r7, #24]
 800bcfe:	0159      	lsls	r1, r3, #5
 800bd00:	69fb      	ldr	r3, [r7, #28]
 800bd02:	440b      	add	r3, r1
 800bd04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd08:	4619      	mov	r1, r3
 800bd0a:	4ba5      	ldr	r3, [pc, #660]	@ (800bfa0 <USB_EPStartXfer+0x2dc>)
 800bd0c:	4013      	ands	r3, r2
 800bd0e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bd10:	69bb      	ldr	r3, [r7, #24]
 800bd12:	015a      	lsls	r2, r3, #5
 800bd14:	69fb      	ldr	r3, [r7, #28]
 800bd16:	4413      	add	r3, r2
 800bd18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd1c:	691b      	ldr	r3, [r3, #16]
 800bd1e:	69ba      	ldr	r2, [r7, #24]
 800bd20:	0151      	lsls	r1, r2, #5
 800bd22:	69fa      	ldr	r2, [r7, #28]
 800bd24:	440a      	add	r2, r1
 800bd26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bd2a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bd2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bd30:	69bb      	ldr	r3, [r7, #24]
 800bd32:	015a      	lsls	r2, r3, #5
 800bd34:	69fb      	ldr	r3, [r7, #28]
 800bd36:	4413      	add	r3, r2
 800bd38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd3c:	691a      	ldr	r2, [r3, #16]
 800bd3e:	69bb      	ldr	r3, [r7, #24]
 800bd40:	0159      	lsls	r1, r3, #5
 800bd42:	69fb      	ldr	r3, [r7, #28]
 800bd44:	440b      	add	r3, r1
 800bd46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	4b95      	ldr	r3, [pc, #596]	@ (800bfa4 <USB_EPStartXfer+0x2e0>)
 800bd4e:	4013      	ands	r3, r2
 800bd50:	610b      	str	r3, [r1, #16]
 800bd52:	e092      	b.n	800be7a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bd54:	69bb      	ldr	r3, [r7, #24]
 800bd56:	015a      	lsls	r2, r3, #5
 800bd58:	69fb      	ldr	r3, [r7, #28]
 800bd5a:	4413      	add	r3, r2
 800bd5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd60:	691a      	ldr	r2, [r3, #16]
 800bd62:	69bb      	ldr	r3, [r7, #24]
 800bd64:	0159      	lsls	r1, r3, #5
 800bd66:	69fb      	ldr	r3, [r7, #28]
 800bd68:	440b      	add	r3, r1
 800bd6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd6e:	4619      	mov	r1, r3
 800bd70:	4b8c      	ldr	r3, [pc, #560]	@ (800bfa4 <USB_EPStartXfer+0x2e0>)
 800bd72:	4013      	ands	r3, r2
 800bd74:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bd76:	69bb      	ldr	r3, [r7, #24]
 800bd78:	015a      	lsls	r2, r3, #5
 800bd7a:	69fb      	ldr	r3, [r7, #28]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd82:	691a      	ldr	r2, [r3, #16]
 800bd84:	69bb      	ldr	r3, [r7, #24]
 800bd86:	0159      	lsls	r1, r3, #5
 800bd88:	69fb      	ldr	r3, [r7, #28]
 800bd8a:	440b      	add	r3, r1
 800bd8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bd90:	4619      	mov	r1, r3
 800bd92:	4b83      	ldr	r3, [pc, #524]	@ (800bfa0 <USB_EPStartXfer+0x2dc>)
 800bd94:	4013      	ands	r3, r2
 800bd96:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800bd98:	69bb      	ldr	r3, [r7, #24]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d11a      	bne.n	800bdd4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	691a      	ldr	r2, [r3, #16]
 800bda2:	68bb      	ldr	r3, [r7, #8]
 800bda4:	689b      	ldr	r3, [r3, #8]
 800bda6:	429a      	cmp	r2, r3
 800bda8:	d903      	bls.n	800bdb2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	689a      	ldr	r2, [r3, #8]
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bdb2:	69bb      	ldr	r3, [r7, #24]
 800bdb4:	015a      	lsls	r2, r3, #5
 800bdb6:	69fb      	ldr	r3, [r7, #28]
 800bdb8:	4413      	add	r3, r2
 800bdba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bdbe:	691b      	ldr	r3, [r3, #16]
 800bdc0:	69ba      	ldr	r2, [r7, #24]
 800bdc2:	0151      	lsls	r1, r2, #5
 800bdc4:	69fa      	ldr	r2, [r7, #28]
 800bdc6:	440a      	add	r2, r1
 800bdc8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bdcc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bdd0:	6113      	str	r3, [r2, #16]
 800bdd2:	e01b      	b.n	800be0c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bdd4:	69bb      	ldr	r3, [r7, #24]
 800bdd6:	015a      	lsls	r2, r3, #5
 800bdd8:	69fb      	ldr	r3, [r7, #28]
 800bdda:	4413      	add	r3, r2
 800bddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bde0:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	6919      	ldr	r1, [r3, #16]
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	689b      	ldr	r3, [r3, #8]
 800bdea:	440b      	add	r3, r1
 800bdec:	1e59      	subs	r1, r3, #1
 800bdee:	68bb      	ldr	r3, [r7, #8]
 800bdf0:	689b      	ldr	r3, [r3, #8]
 800bdf2:	fbb1 f3f3 	udiv	r3, r1, r3
 800bdf6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bdf8:	4b6b      	ldr	r3, [pc, #428]	@ (800bfa8 <USB_EPStartXfer+0x2e4>)
 800bdfa:	400b      	ands	r3, r1
 800bdfc:	69b9      	ldr	r1, [r7, #24]
 800bdfe:	0148      	lsls	r0, r1, #5
 800be00:	69f9      	ldr	r1, [r7, #28]
 800be02:	4401      	add	r1, r0
 800be04:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800be08:	4313      	orrs	r3, r2
 800be0a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800be0c:	69bb      	ldr	r3, [r7, #24]
 800be0e:	015a      	lsls	r2, r3, #5
 800be10:	69fb      	ldr	r3, [r7, #28]
 800be12:	4413      	add	r3, r2
 800be14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be18:	691a      	ldr	r2, [r3, #16]
 800be1a:	68bb      	ldr	r3, [r7, #8]
 800be1c:	691b      	ldr	r3, [r3, #16]
 800be1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be22:	69b9      	ldr	r1, [r7, #24]
 800be24:	0148      	lsls	r0, r1, #5
 800be26:	69f9      	ldr	r1, [r7, #28]
 800be28:	4401      	add	r1, r0
 800be2a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800be2e:	4313      	orrs	r3, r2
 800be30:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800be32:	68bb      	ldr	r3, [r7, #8]
 800be34:	791b      	ldrb	r3, [r3, #4]
 800be36:	2b01      	cmp	r3, #1
 800be38:	d11f      	bne.n	800be7a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800be3a:	69bb      	ldr	r3, [r7, #24]
 800be3c:	015a      	lsls	r2, r3, #5
 800be3e:	69fb      	ldr	r3, [r7, #28]
 800be40:	4413      	add	r3, r2
 800be42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be46:	691b      	ldr	r3, [r3, #16]
 800be48:	69ba      	ldr	r2, [r7, #24]
 800be4a:	0151      	lsls	r1, r2, #5
 800be4c:	69fa      	ldr	r2, [r7, #28]
 800be4e:	440a      	add	r2, r1
 800be50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be54:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800be58:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800be5a:	69bb      	ldr	r3, [r7, #24]
 800be5c:	015a      	lsls	r2, r3, #5
 800be5e:	69fb      	ldr	r3, [r7, #28]
 800be60:	4413      	add	r3, r2
 800be62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be66:	691b      	ldr	r3, [r3, #16]
 800be68:	69ba      	ldr	r2, [r7, #24]
 800be6a:	0151      	lsls	r1, r2, #5
 800be6c:	69fa      	ldr	r2, [r7, #28]
 800be6e:	440a      	add	r2, r1
 800be70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be74:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800be78:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800be7a:	79fb      	ldrb	r3, [r7, #7]
 800be7c:	2b01      	cmp	r3, #1
 800be7e:	d14b      	bne.n	800bf18 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	69db      	ldr	r3, [r3, #28]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d009      	beq.n	800be9c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800be88:	69bb      	ldr	r3, [r7, #24]
 800be8a:	015a      	lsls	r2, r3, #5
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	4413      	add	r3, r2
 800be90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be94:	461a      	mov	r2, r3
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	69db      	ldr	r3, [r3, #28]
 800be9a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800be9c:	68bb      	ldr	r3, [r7, #8]
 800be9e:	791b      	ldrb	r3, [r3, #4]
 800bea0:	2b01      	cmp	r3, #1
 800bea2:	d128      	bne.n	800bef6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bea4:	69fb      	ldr	r3, [r7, #28]
 800bea6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800beaa:	689b      	ldr	r3, [r3, #8]
 800beac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d110      	bne.n	800bed6 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800beb4:	69bb      	ldr	r3, [r7, #24]
 800beb6:	015a      	lsls	r2, r3, #5
 800beb8:	69fb      	ldr	r3, [r7, #28]
 800beba:	4413      	add	r3, r2
 800bebc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	69ba      	ldr	r2, [r7, #24]
 800bec4:	0151      	lsls	r1, r2, #5
 800bec6:	69fa      	ldr	r2, [r7, #28]
 800bec8:	440a      	add	r2, r1
 800beca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bece:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800bed2:	6013      	str	r3, [r2, #0]
 800bed4:	e00f      	b.n	800bef6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bed6:	69bb      	ldr	r3, [r7, #24]
 800bed8:	015a      	lsls	r2, r3, #5
 800beda:	69fb      	ldr	r3, [r7, #28]
 800bedc:	4413      	add	r3, r2
 800bede:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	69ba      	ldr	r2, [r7, #24]
 800bee6:	0151      	lsls	r1, r2, #5
 800bee8:	69fa      	ldr	r2, [r7, #28]
 800beea:	440a      	add	r2, r1
 800beec:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bef0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bef4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bef6:	69bb      	ldr	r3, [r7, #24]
 800bef8:	015a      	lsls	r2, r3, #5
 800befa:	69fb      	ldr	r3, [r7, #28]
 800befc:	4413      	add	r3, r2
 800befe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	69ba      	ldr	r2, [r7, #24]
 800bf06:	0151      	lsls	r1, r2, #5
 800bf08:	69fa      	ldr	r2, [r7, #28]
 800bf0a:	440a      	add	r2, r1
 800bf0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bf10:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800bf14:	6013      	str	r3, [r2, #0]
 800bf16:	e16a      	b.n	800c1ee <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bf18:	69bb      	ldr	r3, [r7, #24]
 800bf1a:	015a      	lsls	r2, r3, #5
 800bf1c:	69fb      	ldr	r3, [r7, #28]
 800bf1e:	4413      	add	r3, r2
 800bf20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf24:	681b      	ldr	r3, [r3, #0]
 800bf26:	69ba      	ldr	r2, [r7, #24]
 800bf28:	0151      	lsls	r1, r2, #5
 800bf2a:	69fa      	ldr	r2, [r7, #28]
 800bf2c:	440a      	add	r2, r1
 800bf2e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bf32:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800bf36:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	791b      	ldrb	r3, [r3, #4]
 800bf3c:	2b01      	cmp	r3, #1
 800bf3e:	d015      	beq.n	800bf6c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800bf40:	68bb      	ldr	r3, [r7, #8]
 800bf42:	691b      	ldr	r3, [r3, #16]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	f000 8152 	beq.w	800c1ee <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bf4a:	69fb      	ldr	r3, [r7, #28]
 800bf4c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	781b      	ldrb	r3, [r3, #0]
 800bf56:	f003 030f 	and.w	r3, r3, #15
 800bf5a:	2101      	movs	r1, #1
 800bf5c:	fa01 f303 	lsl.w	r3, r1, r3
 800bf60:	69f9      	ldr	r1, [r7, #28]
 800bf62:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bf66:	4313      	orrs	r3, r2
 800bf68:	634b      	str	r3, [r1, #52]	@ 0x34
 800bf6a:	e140      	b.n	800c1ee <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bf6c:	69fb      	ldr	r3, [r7, #28]
 800bf6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bf72:	689b      	ldr	r3, [r3, #8]
 800bf74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d117      	bne.n	800bfac <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bf7c:	69bb      	ldr	r3, [r7, #24]
 800bf7e:	015a      	lsls	r2, r3, #5
 800bf80:	69fb      	ldr	r3, [r7, #28]
 800bf82:	4413      	add	r3, r2
 800bf84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	69ba      	ldr	r2, [r7, #24]
 800bf8c:	0151      	lsls	r1, r2, #5
 800bf8e:	69fa      	ldr	r2, [r7, #28]
 800bf90:	440a      	add	r2, r1
 800bf92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bf96:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800bf9a:	6013      	str	r3, [r2, #0]
 800bf9c:	e016      	b.n	800bfcc <USB_EPStartXfer+0x308>
 800bf9e:	bf00      	nop
 800bfa0:	e007ffff 	.word	0xe007ffff
 800bfa4:	fff80000 	.word	0xfff80000
 800bfa8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bfac:	69bb      	ldr	r3, [r7, #24]
 800bfae:	015a      	lsls	r2, r3, #5
 800bfb0:	69fb      	ldr	r3, [r7, #28]
 800bfb2:	4413      	add	r3, r2
 800bfb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	69ba      	ldr	r2, [r7, #24]
 800bfbc:	0151      	lsls	r1, r2, #5
 800bfbe:	69fa      	ldr	r2, [r7, #28]
 800bfc0:	440a      	add	r2, r1
 800bfc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bfc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bfca:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800bfcc:	68bb      	ldr	r3, [r7, #8]
 800bfce:	68d9      	ldr	r1, [r3, #12]
 800bfd0:	68bb      	ldr	r3, [r7, #8]
 800bfd2:	781a      	ldrb	r2, [r3, #0]
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	691b      	ldr	r3, [r3, #16]
 800bfd8:	b298      	uxth	r0, r3
 800bfda:	79fb      	ldrb	r3, [r7, #7]
 800bfdc:	9300      	str	r3, [sp, #0]
 800bfde:	4603      	mov	r3, r0
 800bfe0:	68f8      	ldr	r0, [r7, #12]
 800bfe2:	f000 f9b9 	bl	800c358 <USB_WritePacket>
 800bfe6:	e102      	b.n	800c1ee <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bfe8:	69bb      	ldr	r3, [r7, #24]
 800bfea:	015a      	lsls	r2, r3, #5
 800bfec:	69fb      	ldr	r3, [r7, #28]
 800bfee:	4413      	add	r3, r2
 800bff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bff4:	691a      	ldr	r2, [r3, #16]
 800bff6:	69bb      	ldr	r3, [r7, #24]
 800bff8:	0159      	lsls	r1, r3, #5
 800bffa:	69fb      	ldr	r3, [r7, #28]
 800bffc:	440b      	add	r3, r1
 800bffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c002:	4619      	mov	r1, r3
 800c004:	4b7c      	ldr	r3, [pc, #496]	@ (800c1f8 <USB_EPStartXfer+0x534>)
 800c006:	4013      	ands	r3, r2
 800c008:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	015a      	lsls	r2, r3, #5
 800c00e:	69fb      	ldr	r3, [r7, #28]
 800c010:	4413      	add	r3, r2
 800c012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c016:	691a      	ldr	r2, [r3, #16]
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	0159      	lsls	r1, r3, #5
 800c01c:	69fb      	ldr	r3, [r7, #28]
 800c01e:	440b      	add	r3, r1
 800c020:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c024:	4619      	mov	r1, r3
 800c026:	4b75      	ldr	r3, [pc, #468]	@ (800c1fc <USB_EPStartXfer+0x538>)
 800c028:	4013      	ands	r3, r2
 800c02a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800c02c:	69bb      	ldr	r3, [r7, #24]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d12f      	bne.n	800c092 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	691b      	ldr	r3, [r3, #16]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d003      	beq.n	800c042 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	689a      	ldr	r2, [r3, #8]
 800c03e:	68bb      	ldr	r3, [r7, #8]
 800c040:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	689a      	ldr	r2, [r3, #8]
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c04a:	69bb      	ldr	r3, [r7, #24]
 800c04c:	015a      	lsls	r2, r3, #5
 800c04e:	69fb      	ldr	r3, [r7, #28]
 800c050:	4413      	add	r3, r2
 800c052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c056:	691a      	ldr	r2, [r3, #16]
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	6a1b      	ldr	r3, [r3, #32]
 800c05c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c060:	69b9      	ldr	r1, [r7, #24]
 800c062:	0148      	lsls	r0, r1, #5
 800c064:	69f9      	ldr	r1, [r7, #28]
 800c066:	4401      	add	r1, r0
 800c068:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c06c:	4313      	orrs	r3, r2
 800c06e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c070:	69bb      	ldr	r3, [r7, #24]
 800c072:	015a      	lsls	r2, r3, #5
 800c074:	69fb      	ldr	r3, [r7, #28]
 800c076:	4413      	add	r3, r2
 800c078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c07c:	691b      	ldr	r3, [r3, #16]
 800c07e:	69ba      	ldr	r2, [r7, #24]
 800c080:	0151      	lsls	r1, r2, #5
 800c082:	69fa      	ldr	r2, [r7, #28]
 800c084:	440a      	add	r2, r1
 800c086:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c08a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c08e:	6113      	str	r3, [r2, #16]
 800c090:	e05f      	b.n	800c152 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800c092:	68bb      	ldr	r3, [r7, #8]
 800c094:	691b      	ldr	r3, [r3, #16]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d123      	bne.n	800c0e2 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c09a:	69bb      	ldr	r3, [r7, #24]
 800c09c:	015a      	lsls	r2, r3, #5
 800c09e:	69fb      	ldr	r3, [r7, #28]
 800c0a0:	4413      	add	r3, r2
 800c0a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0a6:	691a      	ldr	r2, [r3, #16]
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	689b      	ldr	r3, [r3, #8]
 800c0ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c0b0:	69b9      	ldr	r1, [r7, #24]
 800c0b2:	0148      	lsls	r0, r1, #5
 800c0b4:	69f9      	ldr	r1, [r7, #28]
 800c0b6:	4401      	add	r1, r0
 800c0b8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c0bc:	4313      	orrs	r3, r2
 800c0be:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	015a      	lsls	r2, r3, #5
 800c0c4:	69fb      	ldr	r3, [r7, #28]
 800c0c6:	4413      	add	r3, r2
 800c0c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c0cc:	691b      	ldr	r3, [r3, #16]
 800c0ce:	69ba      	ldr	r2, [r7, #24]
 800c0d0:	0151      	lsls	r1, r2, #5
 800c0d2:	69fa      	ldr	r2, [r7, #28]
 800c0d4:	440a      	add	r2, r1
 800c0d6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c0da:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c0de:	6113      	str	r3, [r2, #16]
 800c0e0:	e037      	b.n	800c152 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c0e2:	68bb      	ldr	r3, [r7, #8]
 800c0e4:	691a      	ldr	r2, [r3, #16]
 800c0e6:	68bb      	ldr	r3, [r7, #8]
 800c0e8:	689b      	ldr	r3, [r3, #8]
 800c0ea:	4413      	add	r3, r2
 800c0ec:	1e5a      	subs	r2, r3, #1
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	689b      	ldr	r3, [r3, #8]
 800c0f2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0f6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	689b      	ldr	r3, [r3, #8]
 800c0fc:	8afa      	ldrh	r2, [r7, #22]
 800c0fe:	fb03 f202 	mul.w	r2, r3, r2
 800c102:	68bb      	ldr	r3, [r7, #8]
 800c104:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c106:	69bb      	ldr	r3, [r7, #24]
 800c108:	015a      	lsls	r2, r3, #5
 800c10a:	69fb      	ldr	r3, [r7, #28]
 800c10c:	4413      	add	r3, r2
 800c10e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c112:	691a      	ldr	r2, [r3, #16]
 800c114:	8afb      	ldrh	r3, [r7, #22]
 800c116:	04d9      	lsls	r1, r3, #19
 800c118:	4b39      	ldr	r3, [pc, #228]	@ (800c200 <USB_EPStartXfer+0x53c>)
 800c11a:	400b      	ands	r3, r1
 800c11c:	69b9      	ldr	r1, [r7, #24]
 800c11e:	0148      	lsls	r0, r1, #5
 800c120:	69f9      	ldr	r1, [r7, #28]
 800c122:	4401      	add	r1, r0
 800c124:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c128:	4313      	orrs	r3, r2
 800c12a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c12c:	69bb      	ldr	r3, [r7, #24]
 800c12e:	015a      	lsls	r2, r3, #5
 800c130:	69fb      	ldr	r3, [r7, #28]
 800c132:	4413      	add	r3, r2
 800c134:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c138:	691a      	ldr	r2, [r3, #16]
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	6a1b      	ldr	r3, [r3, #32]
 800c13e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c142:	69b9      	ldr	r1, [r7, #24]
 800c144:	0148      	lsls	r0, r1, #5
 800c146:	69f9      	ldr	r1, [r7, #28]
 800c148:	4401      	add	r1, r0
 800c14a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800c14e:	4313      	orrs	r3, r2
 800c150:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800c152:	79fb      	ldrb	r3, [r7, #7]
 800c154:	2b01      	cmp	r3, #1
 800c156:	d10d      	bne.n	800c174 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	68db      	ldr	r3, [r3, #12]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d009      	beq.n	800c174 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c160:	68bb      	ldr	r3, [r7, #8]
 800c162:	68d9      	ldr	r1, [r3, #12]
 800c164:	69bb      	ldr	r3, [r7, #24]
 800c166:	015a      	lsls	r2, r3, #5
 800c168:	69fb      	ldr	r3, [r7, #28]
 800c16a:	4413      	add	r3, r2
 800c16c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c170:	460a      	mov	r2, r1
 800c172:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c174:	68bb      	ldr	r3, [r7, #8]
 800c176:	791b      	ldrb	r3, [r3, #4]
 800c178:	2b01      	cmp	r3, #1
 800c17a:	d128      	bne.n	800c1ce <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c17c:	69fb      	ldr	r3, [r7, #28]
 800c17e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c182:	689b      	ldr	r3, [r3, #8]
 800c184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d110      	bne.n	800c1ae <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c18c:	69bb      	ldr	r3, [r7, #24]
 800c18e:	015a      	lsls	r2, r3, #5
 800c190:	69fb      	ldr	r3, [r7, #28]
 800c192:	4413      	add	r3, r2
 800c194:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	69ba      	ldr	r2, [r7, #24]
 800c19c:	0151      	lsls	r1, r2, #5
 800c19e:	69fa      	ldr	r2, [r7, #28]
 800c1a0:	440a      	add	r2, r1
 800c1a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c1a6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c1aa:	6013      	str	r3, [r2, #0]
 800c1ac:	e00f      	b.n	800c1ce <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c1ae:	69bb      	ldr	r3, [r7, #24]
 800c1b0:	015a      	lsls	r2, r3, #5
 800c1b2:	69fb      	ldr	r3, [r7, #28]
 800c1b4:	4413      	add	r3, r2
 800c1b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	69ba      	ldr	r2, [r7, #24]
 800c1be:	0151      	lsls	r1, r2, #5
 800c1c0:	69fa      	ldr	r2, [r7, #28]
 800c1c2:	440a      	add	r2, r1
 800c1c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c1c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c1cc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c1ce:	69bb      	ldr	r3, [r7, #24]
 800c1d0:	015a      	lsls	r2, r3, #5
 800c1d2:	69fb      	ldr	r3, [r7, #28]
 800c1d4:	4413      	add	r3, r2
 800c1d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	69ba      	ldr	r2, [r7, #24]
 800c1de:	0151      	lsls	r1, r2, #5
 800c1e0:	69fa      	ldr	r2, [r7, #28]
 800c1e2:	440a      	add	r2, r1
 800c1e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c1e8:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800c1ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c1ee:	2300      	movs	r3, #0
}
 800c1f0:	4618      	mov	r0, r3
 800c1f2:	3720      	adds	r7, #32
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	fff80000 	.word	0xfff80000
 800c1fc:	e007ffff 	.word	0xe007ffff
 800c200:	1ff80000 	.word	0x1ff80000

0800c204 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c204:	b480      	push	{r7}
 800c206:	b087      	sub	sp, #28
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c20e:	2300      	movs	r3, #0
 800c210:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c212:	2300      	movs	r3, #0
 800c214:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	785b      	ldrb	r3, [r3, #1]
 800c21e:	2b01      	cmp	r3, #1
 800c220:	d14a      	bne.n	800c2b8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	781b      	ldrb	r3, [r3, #0]
 800c226:	015a      	lsls	r2, r3, #5
 800c228:	693b      	ldr	r3, [r7, #16]
 800c22a:	4413      	add	r3, r2
 800c22c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c230:	681b      	ldr	r3, [r3, #0]
 800c232:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c236:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c23a:	f040 8086 	bne.w	800c34a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c23e:	683b      	ldr	r3, [r7, #0]
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	015a      	lsls	r2, r3, #5
 800c244:	693b      	ldr	r3, [r7, #16]
 800c246:	4413      	add	r3, r2
 800c248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	683a      	ldr	r2, [r7, #0]
 800c250:	7812      	ldrb	r2, [r2, #0]
 800c252:	0151      	lsls	r1, r2, #5
 800c254:	693a      	ldr	r2, [r7, #16]
 800c256:	440a      	add	r2, r1
 800c258:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c25c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c260:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	781b      	ldrb	r3, [r3, #0]
 800c266:	015a      	lsls	r2, r3, #5
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	4413      	add	r3, r2
 800c26c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	683a      	ldr	r2, [r7, #0]
 800c274:	7812      	ldrb	r2, [r2, #0]
 800c276:	0151      	lsls	r1, r2, #5
 800c278:	693a      	ldr	r2, [r7, #16]
 800c27a:	440a      	add	r2, r1
 800c27c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c280:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c284:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	3301      	adds	r3, #1
 800c28a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c292:	4293      	cmp	r3, r2
 800c294:	d902      	bls.n	800c29c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c296:	2301      	movs	r3, #1
 800c298:	75fb      	strb	r3, [r7, #23]
          break;
 800c29a:	e056      	b.n	800c34a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	781b      	ldrb	r3, [r3, #0]
 800c2a0:	015a      	lsls	r2, r3, #5
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	4413      	add	r3, r2
 800c2a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c2b0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c2b4:	d0e7      	beq.n	800c286 <USB_EPStopXfer+0x82>
 800c2b6:	e048      	b.n	800c34a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	781b      	ldrb	r3, [r3, #0]
 800c2bc:	015a      	lsls	r2, r3, #5
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	4413      	add	r3, r2
 800c2c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c2cc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c2d0:	d13b      	bne.n	800c34a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	781b      	ldrb	r3, [r3, #0]
 800c2d6:	015a      	lsls	r2, r3, #5
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	4413      	add	r3, r2
 800c2dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	683a      	ldr	r2, [r7, #0]
 800c2e4:	7812      	ldrb	r2, [r2, #0]
 800c2e6:	0151      	lsls	r1, r2, #5
 800c2e8:	693a      	ldr	r2, [r7, #16]
 800c2ea:	440a      	add	r2, r1
 800c2ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c2f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800c2f4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	015a      	lsls	r2, r3, #5
 800c2fc:	693b      	ldr	r3, [r7, #16]
 800c2fe:	4413      	add	r3, r2
 800c300:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	683a      	ldr	r2, [r7, #0]
 800c308:	7812      	ldrb	r2, [r2, #0]
 800c30a:	0151      	lsls	r1, r2, #5
 800c30c:	693a      	ldr	r2, [r7, #16]
 800c30e:	440a      	add	r2, r1
 800c310:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c314:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c318:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	3301      	adds	r3, #1
 800c31e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	f242 7210 	movw	r2, #10000	@ 0x2710
 800c326:	4293      	cmp	r3, r2
 800c328:	d902      	bls.n	800c330 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c32a:	2301      	movs	r3, #1
 800c32c:	75fb      	strb	r3, [r7, #23]
          break;
 800c32e:	e00c      	b.n	800c34a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	015a      	lsls	r2, r3, #5
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	4413      	add	r3, r2
 800c33a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c344:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c348:	d0e7      	beq.n	800c31a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c34a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	371c      	adds	r7, #28
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr

0800c358 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c358:	b480      	push	{r7}
 800c35a:	b089      	sub	sp, #36	@ 0x24
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	60f8      	str	r0, [r7, #12]
 800c360:	60b9      	str	r1, [r7, #8]
 800c362:	4611      	mov	r1, r2
 800c364:	461a      	mov	r2, r3
 800c366:	460b      	mov	r3, r1
 800c368:	71fb      	strb	r3, [r7, #7]
 800c36a:	4613      	mov	r3, r2
 800c36c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c376:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d123      	bne.n	800c3c6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c37e:	88bb      	ldrh	r3, [r7, #4]
 800c380:	3303      	adds	r3, #3
 800c382:	089b      	lsrs	r3, r3, #2
 800c384:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c386:	2300      	movs	r3, #0
 800c388:	61bb      	str	r3, [r7, #24]
 800c38a:	e018      	b.n	800c3be <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c38c:	79fb      	ldrb	r3, [r7, #7]
 800c38e:	031a      	lsls	r2, r3, #12
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	4413      	add	r3, r2
 800c394:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c398:	461a      	mov	r2, r3
 800c39a:	69fb      	ldr	r3, [r7, #28]
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c3a0:	69fb      	ldr	r3, [r7, #28]
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c3a6:	69fb      	ldr	r3, [r7, #28]
 800c3a8:	3301      	adds	r3, #1
 800c3aa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c3ac:	69fb      	ldr	r3, [r7, #28]
 800c3ae:	3301      	adds	r3, #1
 800c3b0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c3b2:	69fb      	ldr	r3, [r7, #28]
 800c3b4:	3301      	adds	r3, #1
 800c3b6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c3b8:	69bb      	ldr	r3, [r7, #24]
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	61bb      	str	r3, [r7, #24]
 800c3be:	69ba      	ldr	r2, [r7, #24]
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	d3e2      	bcc.n	800c38c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c3c6:	2300      	movs	r3, #0
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3724      	adds	r7, #36	@ 0x24
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d2:	4770      	bx	lr

0800c3d4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c3d4:	b480      	push	{r7}
 800c3d6:	b08b      	sub	sp, #44	@ 0x2c
 800c3d8:	af00      	add	r7, sp, #0
 800c3da:	60f8      	str	r0, [r7, #12]
 800c3dc:	60b9      	str	r1, [r7, #8]
 800c3de:	4613      	mov	r3, r2
 800c3e0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c3ea:	88fb      	ldrh	r3, [r7, #6]
 800c3ec:	089b      	lsrs	r3, r3, #2
 800c3ee:	b29b      	uxth	r3, r3
 800c3f0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c3f2:	88fb      	ldrh	r3, [r7, #6]
 800c3f4:	f003 0303 	and.w	r3, r3, #3
 800c3f8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	623b      	str	r3, [r7, #32]
 800c3fe:	e014      	b.n	800c42a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c400:	69bb      	ldr	r3, [r7, #24]
 800c402:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c406:	681a      	ldr	r2, [r3, #0]
 800c408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c40a:	601a      	str	r2, [r3, #0]
    pDest++;
 800c40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c40e:	3301      	adds	r3, #1
 800c410:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c414:	3301      	adds	r3, #1
 800c416:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c41a:	3301      	adds	r3, #1
 800c41c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800c41e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c420:	3301      	adds	r3, #1
 800c422:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800c424:	6a3b      	ldr	r3, [r7, #32]
 800c426:	3301      	adds	r3, #1
 800c428:	623b      	str	r3, [r7, #32]
 800c42a:	6a3a      	ldr	r2, [r7, #32]
 800c42c:	697b      	ldr	r3, [r7, #20]
 800c42e:	429a      	cmp	r2, r3
 800c430:	d3e6      	bcc.n	800c400 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c432:	8bfb      	ldrh	r3, [r7, #30]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d01e      	beq.n	800c476 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c438:	2300      	movs	r3, #0
 800c43a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c43c:	69bb      	ldr	r3, [r7, #24]
 800c43e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c442:	461a      	mov	r2, r3
 800c444:	f107 0310 	add.w	r3, r7, #16
 800c448:	6812      	ldr	r2, [r2, #0]
 800c44a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c44c:	693a      	ldr	r2, [r7, #16]
 800c44e:	6a3b      	ldr	r3, [r7, #32]
 800c450:	b2db      	uxtb	r3, r3
 800c452:	00db      	lsls	r3, r3, #3
 800c454:	fa22 f303 	lsr.w	r3, r2, r3
 800c458:	b2da      	uxtb	r2, r3
 800c45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c45c:	701a      	strb	r2, [r3, #0]
      i++;
 800c45e:	6a3b      	ldr	r3, [r7, #32]
 800c460:	3301      	adds	r3, #1
 800c462:	623b      	str	r3, [r7, #32]
      pDest++;
 800c464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c466:	3301      	adds	r3, #1
 800c468:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800c46a:	8bfb      	ldrh	r3, [r7, #30]
 800c46c:	3b01      	subs	r3, #1
 800c46e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c470:	8bfb      	ldrh	r3, [r7, #30]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d1ea      	bne.n	800c44c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c478:	4618      	mov	r0, r3
 800c47a:	372c      	adds	r7, #44	@ 0x2c
 800c47c:	46bd      	mov	sp, r7
 800c47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c482:	4770      	bx	lr

0800c484 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c484:	b480      	push	{r7}
 800c486:	b085      	sub	sp, #20
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
 800c48c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	781b      	ldrb	r3, [r3, #0]
 800c496:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c498:	683b      	ldr	r3, [r7, #0]
 800c49a:	785b      	ldrb	r3, [r3, #1]
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	d12c      	bne.n	800c4fa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	015a      	lsls	r2, r3, #5
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	4413      	add	r3, r2
 800c4a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	db12      	blt.n	800c4d8 <USB_EPSetStall+0x54>
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d00f      	beq.n	800c4d8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	015a      	lsls	r2, r3, #5
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	4413      	add	r3, r2
 800c4c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	68ba      	ldr	r2, [r7, #8]
 800c4c8:	0151      	lsls	r1, r2, #5
 800c4ca:	68fa      	ldr	r2, [r7, #12]
 800c4cc:	440a      	add	r2, r1
 800c4ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c4d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c4d6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	015a      	lsls	r2, r3, #5
 800c4dc:	68fb      	ldr	r3, [r7, #12]
 800c4de:	4413      	add	r3, r2
 800c4e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	68ba      	ldr	r2, [r7, #8]
 800c4e8:	0151      	lsls	r1, r2, #5
 800c4ea:	68fa      	ldr	r2, [r7, #12]
 800c4ec:	440a      	add	r2, r1
 800c4ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c4f2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c4f6:	6013      	str	r3, [r2, #0]
 800c4f8:	e02b      	b.n	800c552 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	015a      	lsls	r2, r3, #5
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	4413      	add	r3, r2
 800c502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	db12      	blt.n	800c532 <USB_EPSetStall+0xae>
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	2b00      	cmp	r3, #0
 800c510:	d00f      	beq.n	800c532 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c512:	68bb      	ldr	r3, [r7, #8]
 800c514:	015a      	lsls	r2, r3, #5
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	4413      	add	r3, r2
 800c51a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	68ba      	ldr	r2, [r7, #8]
 800c522:	0151      	lsls	r1, r2, #5
 800c524:	68fa      	ldr	r2, [r7, #12]
 800c526:	440a      	add	r2, r1
 800c528:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c52c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c530:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	015a      	lsls	r2, r3, #5
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	4413      	add	r3, r2
 800c53a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	68ba      	ldr	r2, [r7, #8]
 800c542:	0151      	lsls	r1, r2, #5
 800c544:	68fa      	ldr	r2, [r7, #12]
 800c546:	440a      	add	r2, r1
 800c548:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c54c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800c550:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c552:	2300      	movs	r3, #0
}
 800c554:	4618      	mov	r0, r3
 800c556:	3714      	adds	r7, #20
 800c558:	46bd      	mov	sp, r7
 800c55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c55e:	4770      	bx	lr

0800c560 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800c560:	b480      	push	{r7}
 800c562:	b085      	sub	sp, #20
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
 800c568:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c56e:	683b      	ldr	r3, [r7, #0]
 800c570:	781b      	ldrb	r3, [r3, #0]
 800c572:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c574:	683b      	ldr	r3, [r7, #0]
 800c576:	785b      	ldrb	r3, [r3, #1]
 800c578:	2b01      	cmp	r3, #1
 800c57a:	d128      	bne.n	800c5ce <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c57c:	68bb      	ldr	r3, [r7, #8]
 800c57e:	015a      	lsls	r2, r3, #5
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	4413      	add	r3, r2
 800c584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	68ba      	ldr	r2, [r7, #8]
 800c58c:	0151      	lsls	r1, r2, #5
 800c58e:	68fa      	ldr	r2, [r7, #12]
 800c590:	440a      	add	r2, r1
 800c592:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c596:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c59a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c59c:	683b      	ldr	r3, [r7, #0]
 800c59e:	791b      	ldrb	r3, [r3, #4]
 800c5a0:	2b03      	cmp	r3, #3
 800c5a2:	d003      	beq.n	800c5ac <USB_EPClearStall+0x4c>
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	791b      	ldrb	r3, [r3, #4]
 800c5a8:	2b02      	cmp	r3, #2
 800c5aa:	d138      	bne.n	800c61e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	015a      	lsls	r2, r3, #5
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	4413      	add	r3, r2
 800c5b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	68ba      	ldr	r2, [r7, #8]
 800c5bc:	0151      	lsls	r1, r2, #5
 800c5be:	68fa      	ldr	r2, [r7, #12]
 800c5c0:	440a      	add	r2, r1
 800c5c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800c5c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c5ca:	6013      	str	r3, [r2, #0]
 800c5cc:	e027      	b.n	800c61e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	015a      	lsls	r2, r3, #5
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	4413      	add	r3, r2
 800c5d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	68ba      	ldr	r2, [r7, #8]
 800c5de:	0151      	lsls	r1, r2, #5
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	440a      	add	r2, r1
 800c5e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c5e8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800c5ec:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	791b      	ldrb	r3, [r3, #4]
 800c5f2:	2b03      	cmp	r3, #3
 800c5f4:	d003      	beq.n	800c5fe <USB_EPClearStall+0x9e>
 800c5f6:	683b      	ldr	r3, [r7, #0]
 800c5f8:	791b      	ldrb	r3, [r3, #4]
 800c5fa:	2b02      	cmp	r3, #2
 800c5fc:	d10f      	bne.n	800c61e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	015a      	lsls	r2, r3, #5
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	4413      	add	r3, r2
 800c606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	68ba      	ldr	r2, [r7, #8]
 800c60e:	0151      	lsls	r1, r2, #5
 800c610:	68fa      	ldr	r2, [r7, #12]
 800c612:	440a      	add	r2, r1
 800c614:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c618:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c61c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c61e:	2300      	movs	r3, #0
}
 800c620:	4618      	mov	r0, r3
 800c622:	3714      	adds	r7, #20
 800c624:	46bd      	mov	sp, r7
 800c626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c62a:	4770      	bx	lr

0800c62c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c62c:	b480      	push	{r7}
 800c62e:	b085      	sub	sp, #20
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	460b      	mov	r3, r1
 800c636:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	68fa      	ldr	r2, [r7, #12]
 800c646:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c64a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800c64e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c656:	681a      	ldr	r2, [r3, #0]
 800c658:	78fb      	ldrb	r3, [r7, #3]
 800c65a:	011b      	lsls	r3, r3, #4
 800c65c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800c660:	68f9      	ldr	r1, [r7, #12]
 800c662:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800c666:	4313      	orrs	r3, r2
 800c668:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c66a:	2300      	movs	r3, #0
}
 800c66c:	4618      	mov	r0, r3
 800c66e:	3714      	adds	r7, #20
 800c670:	46bd      	mov	sp, r7
 800c672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c676:	4770      	bx	lr

0800c678 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c678:	b480      	push	{r7}
 800c67a:	b085      	sub	sp, #20
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	68fa      	ldr	r2, [r7, #12]
 800c68e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c692:	f023 0303 	bic.w	r3, r3, #3
 800c696:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c69e:	685b      	ldr	r3, [r3, #4]
 800c6a0:	68fa      	ldr	r2, [r7, #12]
 800c6a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c6a6:	f023 0302 	bic.w	r3, r3, #2
 800c6aa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c6ac:	2300      	movs	r3, #0
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3714      	adds	r7, #20
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b8:	4770      	bx	lr

0800c6ba <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800c6ba:	b480      	push	{r7}
 800c6bc:	b085      	sub	sp, #20
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	68fa      	ldr	r2, [r7, #12]
 800c6d0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c6d4:	f023 0303 	bic.w	r3, r3, #3
 800c6d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c6e0:	685b      	ldr	r3, [r3, #4]
 800c6e2:	68fa      	ldr	r2, [r7, #12]
 800c6e4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c6e8:	f043 0302 	orr.w	r3, r3, #2
 800c6ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c6ee:	2300      	movs	r3, #0
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3714      	adds	r7, #20
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr

0800c6fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b085      	sub	sp, #20
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	695b      	ldr	r3, [r3, #20]
 800c708:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	699b      	ldr	r3, [r3, #24]
 800c70e:	68fa      	ldr	r2, [r7, #12]
 800c710:	4013      	ands	r3, r2
 800c712:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c714:	68fb      	ldr	r3, [r7, #12]
}
 800c716:	4618      	mov	r0, r3
 800c718:	3714      	adds	r7, #20
 800c71a:	46bd      	mov	sp, r7
 800c71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c720:	4770      	bx	lr

0800c722 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c722:	b480      	push	{r7}
 800c724:	b085      	sub	sp, #20
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c734:	699b      	ldr	r3, [r3, #24]
 800c736:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c73e:	69db      	ldr	r3, [r3, #28]
 800c740:	68ba      	ldr	r2, [r7, #8]
 800c742:	4013      	ands	r3, r2
 800c744:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	0c1b      	lsrs	r3, r3, #16
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3714      	adds	r7, #20
 800c74e:	46bd      	mov	sp, r7
 800c750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c754:	4770      	bx	lr

0800c756 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c756:	b480      	push	{r7}
 800c758:	b085      	sub	sp, #20
 800c75a:	af00      	add	r7, sp, #0
 800c75c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c768:	699b      	ldr	r3, [r3, #24]
 800c76a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c772:	69db      	ldr	r3, [r3, #28]
 800c774:	68ba      	ldr	r2, [r7, #8]
 800c776:	4013      	ands	r3, r2
 800c778:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	b29b      	uxth	r3, r3
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3714      	adds	r7, #20
 800c782:	46bd      	mov	sp, r7
 800c784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c788:	4770      	bx	lr

0800c78a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c78a:	b480      	push	{r7}
 800c78c:	b085      	sub	sp, #20
 800c78e:	af00      	add	r7, sp, #0
 800c790:	6078      	str	r0, [r7, #4]
 800c792:	460b      	mov	r3, r1
 800c794:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c79a:	78fb      	ldrb	r3, [r7, #3]
 800c79c:	015a      	lsls	r2, r3, #5
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	4413      	add	r3, r2
 800c7a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c7a6:	689b      	ldr	r3, [r3, #8]
 800c7a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c7b0:	695b      	ldr	r3, [r3, #20]
 800c7b2:	68ba      	ldr	r2, [r7, #8]
 800c7b4:	4013      	ands	r3, r2
 800c7b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c7b8:	68bb      	ldr	r3, [r7, #8]
}
 800c7ba:	4618      	mov	r0, r3
 800c7bc:	3714      	adds	r7, #20
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c4:	4770      	bx	lr

0800c7c6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c7c6:	b480      	push	{r7}
 800c7c8:	b087      	sub	sp, #28
 800c7ca:	af00      	add	r7, sp, #0
 800c7cc:	6078      	str	r0, [r7, #4]
 800c7ce:	460b      	mov	r3, r1
 800c7d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c7dc:	691b      	ldr	r3, [r3, #16]
 800c7de:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c7e0:	697b      	ldr	r3, [r7, #20]
 800c7e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c7e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c7e8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c7ea:	78fb      	ldrb	r3, [r7, #3]
 800c7ec:	f003 030f 	and.w	r3, r3, #15
 800c7f0:	68fa      	ldr	r2, [r7, #12]
 800c7f2:	fa22 f303 	lsr.w	r3, r2, r3
 800c7f6:	01db      	lsls	r3, r3, #7
 800c7f8:	b2db      	uxtb	r3, r3
 800c7fa:	693a      	ldr	r2, [r7, #16]
 800c7fc:	4313      	orrs	r3, r2
 800c7fe:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c800:	78fb      	ldrb	r3, [r7, #3]
 800c802:	015a      	lsls	r2, r3, #5
 800c804:	697b      	ldr	r3, [r7, #20]
 800c806:	4413      	add	r3, r2
 800c808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c80c:	689b      	ldr	r3, [r3, #8]
 800c80e:	693a      	ldr	r2, [r7, #16]
 800c810:	4013      	ands	r3, r2
 800c812:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c814:	68bb      	ldr	r3, [r7, #8]
}
 800c816:	4618      	mov	r0, r3
 800c818:	371c      	adds	r7, #28
 800c81a:	46bd      	mov	sp, r7
 800c81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c820:	4770      	bx	lr

0800c822 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800c822:	b480      	push	{r7}
 800c824:	b083      	sub	sp, #12
 800c826:	af00      	add	r7, sp, #0
 800c828:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	695b      	ldr	r3, [r3, #20]
 800c82e:	f003 0301 	and.w	r3, r3, #1
}
 800c832:	4618      	mov	r0, r3
 800c834:	370c      	adds	r7, #12
 800c836:	46bd      	mov	sp, r7
 800c838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83c:	4770      	bx	lr
	...

0800c840 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800c840:	b480      	push	{r7}
 800c842:	b085      	sub	sp, #20
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c84c:	68fb      	ldr	r3, [r7, #12]
 800c84e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c852:	681a      	ldr	r2, [r3, #0]
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800c85a:	4619      	mov	r1, r3
 800c85c:	4b09      	ldr	r3, [pc, #36]	@ (800c884 <USB_ActivateSetup+0x44>)
 800c85e:	4013      	ands	r3, r2
 800c860:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	68fa      	ldr	r2, [r7, #12]
 800c86c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800c870:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c874:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c876:	2300      	movs	r3, #0
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3714      	adds	r7, #20
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr
 800c884:	fffff800 	.word	0xfffff800

0800c888 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800c888:	b480      	push	{r7}
 800c88a:	b087      	sub	sp, #28
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	60f8      	str	r0, [r7, #12]
 800c890:	460b      	mov	r3, r1
 800c892:	607a      	str	r2, [r7, #4]
 800c894:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	333c      	adds	r3, #60	@ 0x3c
 800c89e:	3304      	adds	r3, #4
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	4a26      	ldr	r2, [pc, #152]	@ (800c940 <USB_EP0_OutStart+0xb8>)
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d90a      	bls.n	800c8c2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c8b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c8bc:	d101      	bne.n	800c8c2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	e037      	b.n	800c932 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c8c2:	697b      	ldr	r3, [r7, #20]
 800c8c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8c8:	461a      	mov	r2, r3
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8d4:	691b      	ldr	r3, [r3, #16]
 800c8d6:	697a      	ldr	r2, [r7, #20]
 800c8d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c8dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800c8e0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c8e2:	697b      	ldr	r3, [r7, #20]
 800c8e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8e8:	691b      	ldr	r3, [r3, #16]
 800c8ea:	697a      	ldr	r2, [r7, #20]
 800c8ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c8f0:	f043 0318 	orr.w	r3, r3, #24
 800c8f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c8fc:	691b      	ldr	r3, [r3, #16]
 800c8fe:	697a      	ldr	r2, [r7, #20]
 800c900:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c904:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800c908:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c90a:	7afb      	ldrb	r3, [r7, #11]
 800c90c:	2b01      	cmp	r3, #1
 800c90e:	d10f      	bne.n	800c930 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c916:	461a      	mov	r2, r3
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	697a      	ldr	r2, [r7, #20]
 800c926:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800c92a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800c92e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c930:	2300      	movs	r3, #0
}
 800c932:	4618      	mov	r0, r3
 800c934:	371c      	adds	r7, #28
 800c936:	46bd      	mov	sp, r7
 800c938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93c:	4770      	bx	lr
 800c93e:	bf00      	nop
 800c940:	4f54300a 	.word	0x4f54300a

0800c944 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c944:	b480      	push	{r7}
 800c946:	b085      	sub	sp, #20
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c94c:	2300      	movs	r3, #0
 800c94e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	3301      	adds	r3, #1
 800c954:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c95c:	d901      	bls.n	800c962 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c95e:	2303      	movs	r3, #3
 800c960:	e01b      	b.n	800c99a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	691b      	ldr	r3, [r3, #16]
 800c966:	2b00      	cmp	r3, #0
 800c968:	daf2      	bge.n	800c950 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c96a:	2300      	movs	r3, #0
 800c96c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	691b      	ldr	r3, [r3, #16]
 800c972:	f043 0201 	orr.w	r2, r3, #1
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	3301      	adds	r3, #1
 800c97e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800c986:	d901      	bls.n	800c98c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c988:	2303      	movs	r3, #3
 800c98a:	e006      	b.n	800c99a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	691b      	ldr	r3, [r3, #16]
 800c990:	f003 0301 	and.w	r3, r3, #1
 800c994:	2b01      	cmp	r3, #1
 800c996:	d0f0      	beq.n	800c97a <USB_CoreReset+0x36>

  return HAL_OK;
 800c998:	2300      	movs	r3, #0
}
 800c99a:	4618      	mov	r0, r3
 800c99c:	3714      	adds	r7, #20
 800c99e:	46bd      	mov	sp, r7
 800c9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a4:	4770      	bx	lr
	...

0800c9a8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b084      	sub	sp, #16
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
 800c9b0:	460b      	mov	r3, r1
 800c9b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c9b4:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800c9b8:	f002 fcfe 	bl	800f3b8 <USBD_static_malloc>
 800c9bc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d109      	bne.n	800c9d8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	32b0      	adds	r2, #176	@ 0xb0
 800c9ce:	2100      	movs	r1, #0
 800c9d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c9d4:	2302      	movs	r3, #2
 800c9d6:	e0d4      	b.n	800cb82 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c9d8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800c9dc:	2100      	movs	r1, #0
 800c9de:	68f8      	ldr	r0, [r7, #12]
 800c9e0:	f003 fa8b 	bl	800fefa <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	32b0      	adds	r2, #176	@ 0xb0
 800c9ee:	68f9      	ldr	r1, [r7, #12]
 800c9f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	32b0      	adds	r2, #176	@ 0xb0
 800c9fe:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	7c1b      	ldrb	r3, [r3, #16]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d138      	bne.n	800ca82 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ca10:	4b5e      	ldr	r3, [pc, #376]	@ (800cb8c <USBD_CDC_Init+0x1e4>)
 800ca12:	7819      	ldrb	r1, [r3, #0]
 800ca14:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ca18:	2202      	movs	r2, #2
 800ca1a:	6878      	ldr	r0, [r7, #4]
 800ca1c:	f002 fba9 	bl	800f172 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ca20:	4b5a      	ldr	r3, [pc, #360]	@ (800cb8c <USBD_CDC_Init+0x1e4>)
 800ca22:	781b      	ldrb	r3, [r3, #0]
 800ca24:	f003 020f 	and.w	r2, r3, #15
 800ca28:	6879      	ldr	r1, [r7, #4]
 800ca2a:	4613      	mov	r3, r2
 800ca2c:	009b      	lsls	r3, r3, #2
 800ca2e:	4413      	add	r3, r2
 800ca30:	009b      	lsls	r3, r3, #2
 800ca32:	440b      	add	r3, r1
 800ca34:	3324      	adds	r3, #36	@ 0x24
 800ca36:	2201      	movs	r2, #1
 800ca38:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ca3a:	4b55      	ldr	r3, [pc, #340]	@ (800cb90 <USBD_CDC_Init+0x1e8>)
 800ca3c:	7819      	ldrb	r1, [r3, #0]
 800ca3e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ca42:	2202      	movs	r2, #2
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	f002 fb94 	bl	800f172 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ca4a:	4b51      	ldr	r3, [pc, #324]	@ (800cb90 <USBD_CDC_Init+0x1e8>)
 800ca4c:	781b      	ldrb	r3, [r3, #0]
 800ca4e:	f003 020f 	and.w	r2, r3, #15
 800ca52:	6879      	ldr	r1, [r7, #4]
 800ca54:	4613      	mov	r3, r2
 800ca56:	009b      	lsls	r3, r3, #2
 800ca58:	4413      	add	r3, r2
 800ca5a:	009b      	lsls	r3, r3, #2
 800ca5c:	440b      	add	r3, r1
 800ca5e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ca62:	2201      	movs	r2, #1
 800ca64:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ca66:	4b4b      	ldr	r3, [pc, #300]	@ (800cb94 <USBD_CDC_Init+0x1ec>)
 800ca68:	781b      	ldrb	r3, [r3, #0]
 800ca6a:	f003 020f 	and.w	r2, r3, #15
 800ca6e:	6879      	ldr	r1, [r7, #4]
 800ca70:	4613      	mov	r3, r2
 800ca72:	009b      	lsls	r3, r3, #2
 800ca74:	4413      	add	r3, r2
 800ca76:	009b      	lsls	r3, r3, #2
 800ca78:	440b      	add	r3, r1
 800ca7a:	3326      	adds	r3, #38	@ 0x26
 800ca7c:	2210      	movs	r2, #16
 800ca7e:	801a      	strh	r2, [r3, #0]
 800ca80:	e035      	b.n	800caee <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ca82:	4b42      	ldr	r3, [pc, #264]	@ (800cb8c <USBD_CDC_Init+0x1e4>)
 800ca84:	7819      	ldrb	r1, [r3, #0]
 800ca86:	2340      	movs	r3, #64	@ 0x40
 800ca88:	2202      	movs	r2, #2
 800ca8a:	6878      	ldr	r0, [r7, #4]
 800ca8c:	f002 fb71 	bl	800f172 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ca90:	4b3e      	ldr	r3, [pc, #248]	@ (800cb8c <USBD_CDC_Init+0x1e4>)
 800ca92:	781b      	ldrb	r3, [r3, #0]
 800ca94:	f003 020f 	and.w	r2, r3, #15
 800ca98:	6879      	ldr	r1, [r7, #4]
 800ca9a:	4613      	mov	r3, r2
 800ca9c:	009b      	lsls	r3, r3, #2
 800ca9e:	4413      	add	r3, r2
 800caa0:	009b      	lsls	r3, r3, #2
 800caa2:	440b      	add	r3, r1
 800caa4:	3324      	adds	r3, #36	@ 0x24
 800caa6:	2201      	movs	r2, #1
 800caa8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800caaa:	4b39      	ldr	r3, [pc, #228]	@ (800cb90 <USBD_CDC_Init+0x1e8>)
 800caac:	7819      	ldrb	r1, [r3, #0]
 800caae:	2340      	movs	r3, #64	@ 0x40
 800cab0:	2202      	movs	r2, #2
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f002 fb5d 	bl	800f172 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cab8:	4b35      	ldr	r3, [pc, #212]	@ (800cb90 <USBD_CDC_Init+0x1e8>)
 800caba:	781b      	ldrb	r3, [r3, #0]
 800cabc:	f003 020f 	and.w	r2, r3, #15
 800cac0:	6879      	ldr	r1, [r7, #4]
 800cac2:	4613      	mov	r3, r2
 800cac4:	009b      	lsls	r3, r3, #2
 800cac6:	4413      	add	r3, r2
 800cac8:	009b      	lsls	r3, r3, #2
 800caca:	440b      	add	r3, r1
 800cacc:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cad0:	2201      	movs	r2, #1
 800cad2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cad4:	4b2f      	ldr	r3, [pc, #188]	@ (800cb94 <USBD_CDC_Init+0x1ec>)
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	f003 020f 	and.w	r2, r3, #15
 800cadc:	6879      	ldr	r1, [r7, #4]
 800cade:	4613      	mov	r3, r2
 800cae0:	009b      	lsls	r3, r3, #2
 800cae2:	4413      	add	r3, r2
 800cae4:	009b      	lsls	r3, r3, #2
 800cae6:	440b      	add	r3, r1
 800cae8:	3326      	adds	r3, #38	@ 0x26
 800caea:	2210      	movs	r2, #16
 800caec:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800caee:	4b29      	ldr	r3, [pc, #164]	@ (800cb94 <USBD_CDC_Init+0x1ec>)
 800caf0:	7819      	ldrb	r1, [r3, #0]
 800caf2:	2308      	movs	r3, #8
 800caf4:	2203      	movs	r2, #3
 800caf6:	6878      	ldr	r0, [r7, #4]
 800caf8:	f002 fb3b 	bl	800f172 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cafc:	4b25      	ldr	r3, [pc, #148]	@ (800cb94 <USBD_CDC_Init+0x1ec>)
 800cafe:	781b      	ldrb	r3, [r3, #0]
 800cb00:	f003 020f 	and.w	r2, r3, #15
 800cb04:	6879      	ldr	r1, [r7, #4]
 800cb06:	4613      	mov	r3, r2
 800cb08:	009b      	lsls	r3, r3, #2
 800cb0a:	4413      	add	r3, r2
 800cb0c:	009b      	lsls	r3, r3, #2
 800cb0e:	440b      	add	r3, r1
 800cb10:	3324      	adds	r3, #36	@ 0x24
 800cb12:	2201      	movs	r2, #1
 800cb14:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cb24:	687a      	ldr	r2, [r7, #4]
 800cb26:	33b0      	adds	r3, #176	@ 0xb0
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	4413      	add	r3, r2
 800cb2c:	685b      	ldr	r3, [r3, #4]
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	2200      	movs	r2, #0
 800cb36:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d101      	bne.n	800cb50 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800cb4c:	2302      	movs	r3, #2
 800cb4e:	e018      	b.n	800cb82 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	7c1b      	ldrb	r3, [r3, #16]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d10a      	bne.n	800cb6e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cb58:	4b0d      	ldr	r3, [pc, #52]	@ (800cb90 <USBD_CDC_Init+0x1e8>)
 800cb5a:	7819      	ldrb	r1, [r3, #0]
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cb62:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f002 fbf2 	bl	800f350 <USBD_LL_PrepareReceive>
 800cb6c:	e008      	b.n	800cb80 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cb6e:	4b08      	ldr	r3, [pc, #32]	@ (800cb90 <USBD_CDC_Init+0x1e8>)
 800cb70:	7819      	ldrb	r1, [r3, #0]
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800cb78:	2340      	movs	r3, #64	@ 0x40
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f002 fbe8 	bl	800f350 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cb80:	2300      	movs	r3, #0
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3710      	adds	r7, #16
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}
 800cb8a:	bf00      	nop
 800cb8c:	240000b7 	.word	0x240000b7
 800cb90:	240000b8 	.word	0x240000b8
 800cb94:	240000b9 	.word	0x240000b9

0800cb98 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cb98:	b580      	push	{r7, lr}
 800cb9a:	b082      	sub	sp, #8
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
 800cba0:	460b      	mov	r3, r1
 800cba2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800cba4:	4b3a      	ldr	r3, [pc, #232]	@ (800cc90 <USBD_CDC_DeInit+0xf8>)
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	4619      	mov	r1, r3
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f002 fb07 	bl	800f1be <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cbb0:	4b37      	ldr	r3, [pc, #220]	@ (800cc90 <USBD_CDC_DeInit+0xf8>)
 800cbb2:	781b      	ldrb	r3, [r3, #0]
 800cbb4:	f003 020f 	and.w	r2, r3, #15
 800cbb8:	6879      	ldr	r1, [r7, #4]
 800cbba:	4613      	mov	r3, r2
 800cbbc:	009b      	lsls	r3, r3, #2
 800cbbe:	4413      	add	r3, r2
 800cbc0:	009b      	lsls	r3, r3, #2
 800cbc2:	440b      	add	r3, r1
 800cbc4:	3324      	adds	r3, #36	@ 0x24
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cbca:	4b32      	ldr	r3, [pc, #200]	@ (800cc94 <USBD_CDC_DeInit+0xfc>)
 800cbcc:	781b      	ldrb	r3, [r3, #0]
 800cbce:	4619      	mov	r1, r3
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	f002 faf4 	bl	800f1be <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cbd6:	4b2f      	ldr	r3, [pc, #188]	@ (800cc94 <USBD_CDC_DeInit+0xfc>)
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	f003 020f 	and.w	r2, r3, #15
 800cbde:	6879      	ldr	r1, [r7, #4]
 800cbe0:	4613      	mov	r3, r2
 800cbe2:	009b      	lsls	r3, r3, #2
 800cbe4:	4413      	add	r3, r2
 800cbe6:	009b      	lsls	r3, r3, #2
 800cbe8:	440b      	add	r3, r1
 800cbea:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800cbee:	2200      	movs	r2, #0
 800cbf0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cbf2:	4b29      	ldr	r3, [pc, #164]	@ (800cc98 <USBD_CDC_DeInit+0x100>)
 800cbf4:	781b      	ldrb	r3, [r3, #0]
 800cbf6:	4619      	mov	r1, r3
 800cbf8:	6878      	ldr	r0, [r7, #4]
 800cbfa:	f002 fae0 	bl	800f1be <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cbfe:	4b26      	ldr	r3, [pc, #152]	@ (800cc98 <USBD_CDC_DeInit+0x100>)
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	f003 020f 	and.w	r2, r3, #15
 800cc06:	6879      	ldr	r1, [r7, #4]
 800cc08:	4613      	mov	r3, r2
 800cc0a:	009b      	lsls	r3, r3, #2
 800cc0c:	4413      	add	r3, r2
 800cc0e:	009b      	lsls	r3, r3, #2
 800cc10:	440b      	add	r3, r1
 800cc12:	3324      	adds	r3, #36	@ 0x24
 800cc14:	2200      	movs	r2, #0
 800cc16:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cc18:	4b1f      	ldr	r3, [pc, #124]	@ (800cc98 <USBD_CDC_DeInit+0x100>)
 800cc1a:	781b      	ldrb	r3, [r3, #0]
 800cc1c:	f003 020f 	and.w	r2, r3, #15
 800cc20:	6879      	ldr	r1, [r7, #4]
 800cc22:	4613      	mov	r3, r2
 800cc24:	009b      	lsls	r3, r3, #2
 800cc26:	4413      	add	r3, r2
 800cc28:	009b      	lsls	r3, r3, #2
 800cc2a:	440b      	add	r3, r1
 800cc2c:	3326      	adds	r3, #38	@ 0x26
 800cc2e:	2200      	movs	r2, #0
 800cc30:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	32b0      	adds	r2, #176	@ 0xb0
 800cc3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d01f      	beq.n	800cc84 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cc4a:	687a      	ldr	r2, [r7, #4]
 800cc4c:	33b0      	adds	r3, #176	@ 0xb0
 800cc4e:	009b      	lsls	r3, r3, #2
 800cc50:	4413      	add	r3, r2
 800cc52:	685b      	ldr	r3, [r3, #4]
 800cc54:	685b      	ldr	r3, [r3, #4]
 800cc56:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	32b0      	adds	r2, #176	@ 0xb0
 800cc62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc66:	4618      	mov	r0, r3
 800cc68:	f002 fbb4 	bl	800f3d4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	32b0      	adds	r2, #176	@ 0xb0
 800cc76:	2100      	movs	r1, #0
 800cc78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cc84:	2300      	movs	r3, #0
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3708      	adds	r7, #8
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}
 800cc8e:	bf00      	nop
 800cc90:	240000b7 	.word	0x240000b7
 800cc94:	240000b8 	.word	0x240000b8
 800cc98:	240000b9 	.word	0x240000b9

0800cc9c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b086      	sub	sp, #24
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
 800cca4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	32b0      	adds	r2, #176	@ 0xb0
 800ccb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccb4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ccb6:	2300      	movs	r3, #0
 800ccb8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ccba:	2300      	movs	r3, #0
 800ccbc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ccc2:	693b      	ldr	r3, [r7, #16]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d101      	bne.n	800cccc <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ccc8:	2303      	movs	r3, #3
 800ccca:	e0bf      	b.n	800ce4c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cccc:	683b      	ldr	r3, [r7, #0]
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d050      	beq.n	800cd7a <USBD_CDC_Setup+0xde>
 800ccd8:	2b20      	cmp	r3, #32
 800ccda:	f040 80af 	bne.w	800ce3c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	88db      	ldrh	r3, [r3, #6]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d03a      	beq.n	800cd5c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	b25b      	sxtb	r3, r3
 800ccec:	2b00      	cmp	r3, #0
 800ccee:	da1b      	bge.n	800cd28 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ccf6:	687a      	ldr	r2, [r7, #4]
 800ccf8:	33b0      	adds	r3, #176	@ 0xb0
 800ccfa:	009b      	lsls	r3, r3, #2
 800ccfc:	4413      	add	r3, r2
 800ccfe:	685b      	ldr	r3, [r3, #4]
 800cd00:	689b      	ldr	r3, [r3, #8]
 800cd02:	683a      	ldr	r2, [r7, #0]
 800cd04:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800cd06:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cd08:	683a      	ldr	r2, [r7, #0]
 800cd0a:	88d2      	ldrh	r2, [r2, #6]
 800cd0c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	88db      	ldrh	r3, [r3, #6]
 800cd12:	2b07      	cmp	r3, #7
 800cd14:	bf28      	it	cs
 800cd16:	2307      	movcs	r3, #7
 800cd18:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cd1a:	693b      	ldr	r3, [r7, #16]
 800cd1c:	89fa      	ldrh	r2, [r7, #14]
 800cd1e:	4619      	mov	r1, r3
 800cd20:	6878      	ldr	r0, [r7, #4]
 800cd22:	f001 fdbd 	bl	800e8a0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800cd26:	e090      	b.n	800ce4a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	785a      	ldrb	r2, [r3, #1]
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	88db      	ldrh	r3, [r3, #6]
 800cd36:	2b3f      	cmp	r3, #63	@ 0x3f
 800cd38:	d803      	bhi.n	800cd42 <USBD_CDC_Setup+0xa6>
 800cd3a:	683b      	ldr	r3, [r7, #0]
 800cd3c:	88db      	ldrh	r3, [r3, #6]
 800cd3e:	b2da      	uxtb	r2, r3
 800cd40:	e000      	b.n	800cd44 <USBD_CDC_Setup+0xa8>
 800cd42:	2240      	movs	r2, #64	@ 0x40
 800cd44:	693b      	ldr	r3, [r7, #16]
 800cd46:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800cd4a:	6939      	ldr	r1, [r7, #16]
 800cd4c:	693b      	ldr	r3, [r7, #16]
 800cd4e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800cd52:	461a      	mov	r2, r3
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f001 fdcf 	bl	800e8f8 <USBD_CtlPrepareRx>
      break;
 800cd5a:	e076      	b.n	800ce4a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cd62:	687a      	ldr	r2, [r7, #4]
 800cd64:	33b0      	adds	r3, #176	@ 0xb0
 800cd66:	009b      	lsls	r3, r3, #2
 800cd68:	4413      	add	r3, r2
 800cd6a:	685b      	ldr	r3, [r3, #4]
 800cd6c:	689b      	ldr	r3, [r3, #8]
 800cd6e:	683a      	ldr	r2, [r7, #0]
 800cd70:	7850      	ldrb	r0, [r2, #1]
 800cd72:	2200      	movs	r2, #0
 800cd74:	6839      	ldr	r1, [r7, #0]
 800cd76:	4798      	blx	r3
      break;
 800cd78:	e067      	b.n	800ce4a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cd7a:	683b      	ldr	r3, [r7, #0]
 800cd7c:	785b      	ldrb	r3, [r3, #1]
 800cd7e:	2b0b      	cmp	r3, #11
 800cd80:	d851      	bhi.n	800ce26 <USBD_CDC_Setup+0x18a>
 800cd82:	a201      	add	r2, pc, #4	@ (adr r2, 800cd88 <USBD_CDC_Setup+0xec>)
 800cd84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd88:	0800cdb9 	.word	0x0800cdb9
 800cd8c:	0800ce35 	.word	0x0800ce35
 800cd90:	0800ce27 	.word	0x0800ce27
 800cd94:	0800ce27 	.word	0x0800ce27
 800cd98:	0800ce27 	.word	0x0800ce27
 800cd9c:	0800ce27 	.word	0x0800ce27
 800cda0:	0800ce27 	.word	0x0800ce27
 800cda4:	0800ce27 	.word	0x0800ce27
 800cda8:	0800ce27 	.word	0x0800ce27
 800cdac:	0800ce27 	.word	0x0800ce27
 800cdb0:	0800cde3 	.word	0x0800cde3
 800cdb4:	0800ce0d 	.word	0x0800ce0d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cdbe:	b2db      	uxtb	r3, r3
 800cdc0:	2b03      	cmp	r3, #3
 800cdc2:	d107      	bne.n	800cdd4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cdc4:	f107 030a 	add.w	r3, r7, #10
 800cdc8:	2202      	movs	r2, #2
 800cdca:	4619      	mov	r1, r3
 800cdcc:	6878      	ldr	r0, [r7, #4]
 800cdce:	f001 fd67 	bl	800e8a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cdd2:	e032      	b.n	800ce3a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cdd4:	6839      	ldr	r1, [r7, #0]
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f001 fce5 	bl	800e7a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800cddc:	2303      	movs	r3, #3
 800cdde:	75fb      	strb	r3, [r7, #23]
          break;
 800cde0:	e02b      	b.n	800ce3a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cde8:	b2db      	uxtb	r3, r3
 800cdea:	2b03      	cmp	r3, #3
 800cdec:	d107      	bne.n	800cdfe <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cdee:	f107 030d 	add.w	r3, r7, #13
 800cdf2:	2201      	movs	r2, #1
 800cdf4:	4619      	mov	r1, r3
 800cdf6:	6878      	ldr	r0, [r7, #4]
 800cdf8:	f001 fd52 	bl	800e8a0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cdfc:	e01d      	b.n	800ce3a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cdfe:	6839      	ldr	r1, [r7, #0]
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f001 fcd0 	bl	800e7a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ce06:	2303      	movs	r3, #3
 800ce08:	75fb      	strb	r3, [r7, #23]
          break;
 800ce0a:	e016      	b.n	800ce3a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce12:	b2db      	uxtb	r3, r3
 800ce14:	2b03      	cmp	r3, #3
 800ce16:	d00f      	beq.n	800ce38 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ce18:	6839      	ldr	r1, [r7, #0]
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f001 fcc3 	bl	800e7a6 <USBD_CtlError>
            ret = USBD_FAIL;
 800ce20:	2303      	movs	r3, #3
 800ce22:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800ce24:	e008      	b.n	800ce38 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800ce26:	6839      	ldr	r1, [r7, #0]
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f001 fcbc 	bl	800e7a6 <USBD_CtlError>
          ret = USBD_FAIL;
 800ce2e:	2303      	movs	r3, #3
 800ce30:	75fb      	strb	r3, [r7, #23]
          break;
 800ce32:	e002      	b.n	800ce3a <USBD_CDC_Setup+0x19e>
          break;
 800ce34:	bf00      	nop
 800ce36:	e008      	b.n	800ce4a <USBD_CDC_Setup+0x1ae>
          break;
 800ce38:	bf00      	nop
      }
      break;
 800ce3a:	e006      	b.n	800ce4a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800ce3c:	6839      	ldr	r1, [r7, #0]
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f001 fcb1 	bl	800e7a6 <USBD_CtlError>
      ret = USBD_FAIL;
 800ce44:	2303      	movs	r3, #3
 800ce46:	75fb      	strb	r3, [r7, #23]
      break;
 800ce48:	bf00      	nop
  }

  return (uint8_t)ret;
 800ce4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3718      	adds	r7, #24
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b084      	sub	sp, #16
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	460b      	mov	r3, r1
 800ce5e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ce66:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	32b0      	adds	r2, #176	@ 0xb0
 800ce72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d101      	bne.n	800ce7e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ce7a:	2303      	movs	r3, #3
 800ce7c:	e065      	b.n	800cf4a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	32b0      	adds	r2, #176	@ 0xb0
 800ce88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce8c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ce8e:	78fb      	ldrb	r3, [r7, #3]
 800ce90:	f003 020f 	and.w	r2, r3, #15
 800ce94:	6879      	ldr	r1, [r7, #4]
 800ce96:	4613      	mov	r3, r2
 800ce98:	009b      	lsls	r3, r3, #2
 800ce9a:	4413      	add	r3, r2
 800ce9c:	009b      	lsls	r3, r3, #2
 800ce9e:	440b      	add	r3, r1
 800cea0:	3318      	adds	r3, #24
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d02f      	beq.n	800cf08 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800cea8:	78fb      	ldrb	r3, [r7, #3]
 800ceaa:	f003 020f 	and.w	r2, r3, #15
 800ceae:	6879      	ldr	r1, [r7, #4]
 800ceb0:	4613      	mov	r3, r2
 800ceb2:	009b      	lsls	r3, r3, #2
 800ceb4:	4413      	add	r3, r2
 800ceb6:	009b      	lsls	r3, r3, #2
 800ceb8:	440b      	add	r3, r1
 800ceba:	3318      	adds	r3, #24
 800cebc:	681a      	ldr	r2, [r3, #0]
 800cebe:	78fb      	ldrb	r3, [r7, #3]
 800cec0:	f003 010f 	and.w	r1, r3, #15
 800cec4:	68f8      	ldr	r0, [r7, #12]
 800cec6:	460b      	mov	r3, r1
 800cec8:	00db      	lsls	r3, r3, #3
 800ceca:	440b      	add	r3, r1
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	4403      	add	r3, r0
 800ced0:	331c      	adds	r3, #28
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	fbb2 f1f3 	udiv	r1, r2, r3
 800ced8:	fb01 f303 	mul.w	r3, r1, r3
 800cedc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d112      	bne.n	800cf08 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800cee2:	78fb      	ldrb	r3, [r7, #3]
 800cee4:	f003 020f 	and.w	r2, r3, #15
 800cee8:	6879      	ldr	r1, [r7, #4]
 800ceea:	4613      	mov	r3, r2
 800ceec:	009b      	lsls	r3, r3, #2
 800ceee:	4413      	add	r3, r2
 800cef0:	009b      	lsls	r3, r3, #2
 800cef2:	440b      	add	r3, r1
 800cef4:	3318      	adds	r3, #24
 800cef6:	2200      	movs	r2, #0
 800cef8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cefa:	78f9      	ldrb	r1, [r7, #3]
 800cefc:	2300      	movs	r3, #0
 800cefe:	2200      	movs	r2, #0
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f002 fa04 	bl	800f30e <USBD_LL_Transmit>
 800cf06:	e01f      	b.n	800cf48 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cf16:	687a      	ldr	r2, [r7, #4]
 800cf18:	33b0      	adds	r3, #176	@ 0xb0
 800cf1a:	009b      	lsls	r3, r3, #2
 800cf1c:	4413      	add	r3, r2
 800cf1e:	685b      	ldr	r3, [r3, #4]
 800cf20:	691b      	ldr	r3, [r3, #16]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d010      	beq.n	800cf48 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cf2c:	687a      	ldr	r2, [r7, #4]
 800cf2e:	33b0      	adds	r3, #176	@ 0xb0
 800cf30:	009b      	lsls	r3, r3, #2
 800cf32:	4413      	add	r3, r2
 800cf34:	685b      	ldr	r3, [r3, #4]
 800cf36:	691b      	ldr	r3, [r3, #16]
 800cf38:	68ba      	ldr	r2, [r7, #8]
 800cf3a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800cf3e:	68ba      	ldr	r2, [r7, #8]
 800cf40:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800cf44:	78fa      	ldrb	r2, [r7, #3]
 800cf46:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cf48:	2300      	movs	r3, #0
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3710      	adds	r7, #16
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}

0800cf52 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cf52:	b580      	push	{r7, lr}
 800cf54:	b084      	sub	sp, #16
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	6078      	str	r0, [r7, #4]
 800cf5a:	460b      	mov	r3, r1
 800cf5c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	32b0      	adds	r2, #176	@ 0xb0
 800cf68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf6c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	32b0      	adds	r2, #176	@ 0xb0
 800cf78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d101      	bne.n	800cf84 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cf80:	2303      	movs	r3, #3
 800cf82:	e01a      	b.n	800cfba <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cf84:	78fb      	ldrb	r3, [r7, #3]
 800cf86:	4619      	mov	r1, r3
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f002 fa02 	bl	800f392 <USBD_LL_GetRxDataSize>
 800cf8e:	4602      	mov	r2, r0
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cf9c:	687a      	ldr	r2, [r7, #4]
 800cf9e:	33b0      	adds	r3, #176	@ 0xb0
 800cfa0:	009b      	lsls	r3, r3, #2
 800cfa2:	4413      	add	r3, r2
 800cfa4:	685b      	ldr	r3, [r3, #4]
 800cfa6:	68db      	ldr	r3, [r3, #12]
 800cfa8:	68fa      	ldr	r2, [r7, #12]
 800cfaa:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800cfae:	68fa      	ldr	r2, [r7, #12]
 800cfb0:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800cfb4:	4611      	mov	r1, r2
 800cfb6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cfb8:	2300      	movs	r3, #0
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3710      	adds	r7, #16
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}

0800cfc2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cfc2:	b580      	push	{r7, lr}
 800cfc4:	b084      	sub	sp, #16
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	32b0      	adds	r2, #176	@ 0xb0
 800cfd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfd8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d101      	bne.n	800cfe4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cfe0:	2303      	movs	r3, #3
 800cfe2:	e024      	b.n	800d02e <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800cfea:	687a      	ldr	r2, [r7, #4]
 800cfec:	33b0      	adds	r3, #176	@ 0xb0
 800cfee:	009b      	lsls	r3, r3, #2
 800cff0:	4413      	add	r3, r2
 800cff2:	685b      	ldr	r3, [r3, #4]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d019      	beq.n	800d02c <USBD_CDC_EP0_RxReady+0x6a>
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800cffe:	2bff      	cmp	r3, #255	@ 0xff
 800d000:	d014      	beq.n	800d02c <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d008:	687a      	ldr	r2, [r7, #4]
 800d00a:	33b0      	adds	r3, #176	@ 0xb0
 800d00c:	009b      	lsls	r3, r3, #2
 800d00e:	4413      	add	r3, r2
 800d010:	685b      	ldr	r3, [r3, #4]
 800d012:	689b      	ldr	r3, [r3, #8]
 800d014:	68fa      	ldr	r2, [r7, #12]
 800d016:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800d01a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d01c:	68fa      	ldr	r2, [r7, #12]
 800d01e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d022:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	22ff      	movs	r2, #255	@ 0xff
 800d028:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800d02c:	2300      	movs	r3, #0
}
 800d02e:	4618      	mov	r0, r3
 800d030:	3710      	adds	r7, #16
 800d032:	46bd      	mov	sp, r7
 800d034:	bd80      	pop	{r7, pc}
	...

0800d038 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b086      	sub	sp, #24
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d040:	2182      	movs	r1, #130	@ 0x82
 800d042:	4818      	ldr	r0, [pc, #96]	@ (800d0a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d044:	f000 fd4f 	bl	800dae6 <USBD_GetEpDesc>
 800d048:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d04a:	2101      	movs	r1, #1
 800d04c:	4815      	ldr	r0, [pc, #84]	@ (800d0a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d04e:	f000 fd4a 	bl	800dae6 <USBD_GetEpDesc>
 800d052:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d054:	2181      	movs	r1, #129	@ 0x81
 800d056:	4813      	ldr	r0, [pc, #76]	@ (800d0a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d058:	f000 fd45 	bl	800dae6 <USBD_GetEpDesc>
 800d05c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d05e:	697b      	ldr	r3, [r7, #20]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d002      	beq.n	800d06a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	2210      	movs	r2, #16
 800d068:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d06a:	693b      	ldr	r3, [r7, #16]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d006      	beq.n	800d07e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d070:	693b      	ldr	r3, [r7, #16]
 800d072:	2200      	movs	r2, #0
 800d074:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d078:	711a      	strb	r2, [r3, #4]
 800d07a:	2200      	movs	r2, #0
 800d07c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d006      	beq.n	800d092 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	2200      	movs	r2, #0
 800d088:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d08c:	711a      	strb	r2, [r3, #4]
 800d08e:	2200      	movs	r2, #0
 800d090:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2243      	movs	r2, #67	@ 0x43
 800d096:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d098:	4b02      	ldr	r3, [pc, #8]	@ (800d0a4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3718      	adds	r7, #24
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}
 800d0a2:	bf00      	nop
 800d0a4:	24000074 	.word	0x24000074

0800d0a8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b086      	sub	sp, #24
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d0b0:	2182      	movs	r1, #130	@ 0x82
 800d0b2:	4818      	ldr	r0, [pc, #96]	@ (800d114 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d0b4:	f000 fd17 	bl	800dae6 <USBD_GetEpDesc>
 800d0b8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d0ba:	2101      	movs	r1, #1
 800d0bc:	4815      	ldr	r0, [pc, #84]	@ (800d114 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d0be:	f000 fd12 	bl	800dae6 <USBD_GetEpDesc>
 800d0c2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d0c4:	2181      	movs	r1, #129	@ 0x81
 800d0c6:	4813      	ldr	r0, [pc, #76]	@ (800d114 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d0c8:	f000 fd0d 	bl	800dae6 <USBD_GetEpDesc>
 800d0cc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d002      	beq.n	800d0da <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	2210      	movs	r2, #16
 800d0d8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d0da:	693b      	ldr	r3, [r7, #16]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d006      	beq.n	800d0ee <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d0e0:	693b      	ldr	r3, [r7, #16]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	711a      	strb	r2, [r3, #4]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	f042 0202 	orr.w	r2, r2, #2
 800d0ec:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d006      	beq.n	800d102 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d0f4:	68fb      	ldr	r3, [r7, #12]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	711a      	strb	r2, [r3, #4]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	f042 0202 	orr.w	r2, r2, #2
 800d100:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2243      	movs	r2, #67	@ 0x43
 800d106:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d108:	4b02      	ldr	r3, [pc, #8]	@ (800d114 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d10a:	4618      	mov	r0, r3
 800d10c:	3718      	adds	r7, #24
 800d10e:	46bd      	mov	sp, r7
 800d110:	bd80      	pop	{r7, pc}
 800d112:	bf00      	nop
 800d114:	24000074 	.word	0x24000074

0800d118 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b086      	sub	sp, #24
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d120:	2182      	movs	r1, #130	@ 0x82
 800d122:	4818      	ldr	r0, [pc, #96]	@ (800d184 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d124:	f000 fcdf 	bl	800dae6 <USBD_GetEpDesc>
 800d128:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d12a:	2101      	movs	r1, #1
 800d12c:	4815      	ldr	r0, [pc, #84]	@ (800d184 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d12e:	f000 fcda 	bl	800dae6 <USBD_GetEpDesc>
 800d132:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d134:	2181      	movs	r1, #129	@ 0x81
 800d136:	4813      	ldr	r0, [pc, #76]	@ (800d184 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d138:	f000 fcd5 	bl	800dae6 <USBD_GetEpDesc>
 800d13c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d13e:	697b      	ldr	r3, [r7, #20]
 800d140:	2b00      	cmp	r3, #0
 800d142:	d002      	beq.n	800d14a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	2210      	movs	r2, #16
 800d148:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d14a:	693b      	ldr	r3, [r7, #16]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d006      	beq.n	800d15e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d150:	693b      	ldr	r3, [r7, #16]
 800d152:	2200      	movs	r2, #0
 800d154:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d158:	711a      	strb	r2, [r3, #4]
 800d15a:	2200      	movs	r2, #0
 800d15c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d006      	beq.n	800d172 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	2200      	movs	r2, #0
 800d168:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800d16c:	711a      	strb	r2, [r3, #4]
 800d16e:	2200      	movs	r2, #0
 800d170:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2243      	movs	r2, #67	@ 0x43
 800d176:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d178:	4b02      	ldr	r3, [pc, #8]	@ (800d184 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d17a:	4618      	mov	r0, r3
 800d17c:	3718      	adds	r7, #24
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}
 800d182:	bf00      	nop
 800d184:	24000074 	.word	0x24000074

0800d188 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d188:	b480      	push	{r7}
 800d18a:	b083      	sub	sp, #12
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	220a      	movs	r2, #10
 800d194:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d196:	4b03      	ldr	r3, [pc, #12]	@ (800d1a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d198:	4618      	mov	r0, r3
 800d19a:	370c      	adds	r7, #12
 800d19c:	46bd      	mov	sp, r7
 800d19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a2:	4770      	bx	lr
 800d1a4:	24000030 	.word	0x24000030

0800d1a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b083      	sub	sp, #12
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d101      	bne.n	800d1bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d1b8:	2303      	movs	r3, #3
 800d1ba:	e009      	b.n	800d1d0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800d1c2:	687a      	ldr	r2, [r7, #4]
 800d1c4:	33b0      	adds	r3, #176	@ 0xb0
 800d1c6:	009b      	lsls	r3, r3, #2
 800d1c8:	4413      	add	r3, r2
 800d1ca:	683a      	ldr	r2, [r7, #0]
 800d1cc:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d1ce:	2300      	movs	r3, #0
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	370c      	adds	r7, #12
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1da:	4770      	bx	lr

0800d1dc <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d1dc:	b480      	push	{r7}
 800d1de:	b087      	sub	sp, #28
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	60f8      	str	r0, [r7, #12]
 800d1e4:	60b9      	str	r1, [r7, #8]
 800d1e6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	32b0      	adds	r2, #176	@ 0xb0
 800d1f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1f6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d1f8:	697b      	ldr	r3, [r7, #20]
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	d101      	bne.n	800d202 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d1fe:	2303      	movs	r3, #3
 800d200:	e008      	b.n	800d214 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	68ba      	ldr	r2, [r7, #8]
 800d206:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800d20a:	697b      	ldr	r3, [r7, #20]
 800d20c:	687a      	ldr	r2, [r7, #4]
 800d20e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800d212:	2300      	movs	r3, #0
}
 800d214:	4618      	mov	r0, r3
 800d216:	371c      	adds	r7, #28
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr

0800d220 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d220:	b480      	push	{r7}
 800d222:	b085      	sub	sp, #20
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
 800d228:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	32b0      	adds	r2, #176	@ 0xb0
 800d234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d238:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d101      	bne.n	800d244 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d240:	2303      	movs	r3, #3
 800d242:	e004      	b.n	800d24e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	683a      	ldr	r2, [r7, #0]
 800d248:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800d24c:	2300      	movs	r3, #0
}
 800d24e:	4618      	mov	r0, r3
 800d250:	3714      	adds	r7, #20
 800d252:	46bd      	mov	sp, r7
 800d254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d258:	4770      	bx	lr
	...

0800d25c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b084      	sub	sp, #16
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	32b0      	adds	r2, #176	@ 0xb0
 800d26e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d272:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800d274:	2301      	movs	r3, #1
 800d276:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d101      	bne.n	800d282 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d27e:	2303      	movs	r3, #3
 800d280:	e025      	b.n	800d2ce <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d11f      	bne.n	800d2cc <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	2201      	movs	r2, #1
 800d290:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d294:	4b10      	ldr	r3, [pc, #64]	@ (800d2d8 <USBD_CDC_TransmitPacket+0x7c>)
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	f003 020f 	and.w	r2, r3, #15
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800d2a2:	6878      	ldr	r0, [r7, #4]
 800d2a4:	4613      	mov	r3, r2
 800d2a6:	009b      	lsls	r3, r3, #2
 800d2a8:	4413      	add	r3, r2
 800d2aa:	009b      	lsls	r3, r3, #2
 800d2ac:	4403      	add	r3, r0
 800d2ae:	3318      	adds	r3, #24
 800d2b0:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d2b2:	4b09      	ldr	r3, [pc, #36]	@ (800d2d8 <USBD_CDC_TransmitPacket+0x7c>)
 800d2b4:	7819      	ldrb	r1, [r3, #0]
 800d2b6:	68bb      	ldr	r3, [r7, #8]
 800d2b8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f002 f823 	bl	800f30e <USBD_LL_Transmit>

    ret = USBD_OK;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d2cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2ce:	4618      	mov	r0, r3
 800d2d0:	3710      	adds	r7, #16
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}
 800d2d6:	bf00      	nop
 800d2d8:	240000b7 	.word	0x240000b7

0800d2dc <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b084      	sub	sp, #16
 800d2e0:	af00      	add	r7, sp, #0
 800d2e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	32b0      	adds	r2, #176	@ 0xb0
 800d2ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2f2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	32b0      	adds	r2, #176	@ 0xb0
 800d2fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d302:	2b00      	cmp	r3, #0
 800d304:	d101      	bne.n	800d30a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d306:	2303      	movs	r3, #3
 800d308:	e018      	b.n	800d33c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	7c1b      	ldrb	r3, [r3, #16]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d10a      	bne.n	800d328 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d312:	4b0c      	ldr	r3, [pc, #48]	@ (800d344 <USBD_CDC_ReceivePacket+0x68>)
 800d314:	7819      	ldrb	r1, [r3, #0]
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d31c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f002 f815 	bl	800f350 <USBD_LL_PrepareReceive>
 800d326:	e008      	b.n	800d33a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d328:	4b06      	ldr	r3, [pc, #24]	@ (800d344 <USBD_CDC_ReceivePacket+0x68>)
 800d32a:	7819      	ldrb	r1, [r3, #0]
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800d332:	2340      	movs	r3, #64	@ 0x40
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	f002 f80b 	bl	800f350 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d33a:	2300      	movs	r3, #0
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3710      	adds	r7, #16
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}
 800d344:	240000b8 	.word	0x240000b8

0800d348 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d348:	b580      	push	{r7, lr}
 800d34a:	b086      	sub	sp, #24
 800d34c:	af00      	add	r7, sp, #0
 800d34e:	60f8      	str	r0, [r7, #12]
 800d350:	60b9      	str	r1, [r7, #8]
 800d352:	4613      	mov	r3, r2
 800d354:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d101      	bne.n	800d360 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d35c:	2303      	movs	r3, #3
 800d35e:	e01f      	b.n	800d3a0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	2200      	movs	r2, #0
 800d364:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	2200      	movs	r2, #0
 800d36c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	2200      	movs	r2, #0
 800d374:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d378:	68bb      	ldr	r3, [r7, #8]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d003      	beq.n	800d386 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	68ba      	ldr	r2, [r7, #8]
 800d382:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	2201      	movs	r2, #1
 800d38a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	79fa      	ldrb	r2, [r7, #7]
 800d392:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d394:	68f8      	ldr	r0, [r7, #12]
 800d396:	f001 fe81 	bl	800f09c <USBD_LL_Init>
 800d39a:	4603      	mov	r3, r0
 800d39c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d39e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3718      	adds	r7, #24
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b084      	sub	sp, #16
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d3b2:	2300      	movs	r3, #0
 800d3b4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d101      	bne.n	800d3c0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d3bc:	2303      	movs	r3, #3
 800d3be:	e025      	b.n	800d40c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d3c0:	687b      	ldr	r3, [r7, #4]
 800d3c2:	683a      	ldr	r2, [r7, #0]
 800d3c4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	32ae      	adds	r2, #174	@ 0xae
 800d3d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d00f      	beq.n	800d3fc <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	32ae      	adds	r2, #174	@ 0xae
 800d3e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d3ec:	f107 020e 	add.w	r2, r7, #14
 800d3f0:	4610      	mov	r0, r2
 800d3f2:	4798      	blx	r3
 800d3f4:	4602      	mov	r2, r0
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800d402:	1c5a      	adds	r2, r3, #1
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800d40a:	2300      	movs	r3, #0
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3710      	adds	r7, #16
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}

0800d414 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d414:	b580      	push	{r7, lr}
 800d416:	b082      	sub	sp, #8
 800d418:	af00      	add	r7, sp, #0
 800d41a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d41c:	6878      	ldr	r0, [r7, #4]
 800d41e:	f001 fe8d 	bl	800f13c <USBD_LL_Start>
 800d422:	4603      	mov	r3, r0
}
 800d424:	4618      	mov	r0, r3
 800d426:	3708      	adds	r7, #8
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d42c:	b480      	push	{r7}
 800d42e:	b083      	sub	sp, #12
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d434:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d436:	4618      	mov	r0, r3
 800d438:	370c      	adds	r7, #12
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr

0800d442 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d442:	b580      	push	{r7, lr}
 800d444:	b084      	sub	sp, #16
 800d446:	af00      	add	r7, sp, #0
 800d448:	6078      	str	r0, [r7, #4]
 800d44a:	460b      	mov	r3, r1
 800d44c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d44e:	2300      	movs	r3, #0
 800d450:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d009      	beq.n	800d470 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	78fa      	ldrb	r2, [r7, #3]
 800d466:	4611      	mov	r1, r2
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	4798      	blx	r3
 800d46c:	4603      	mov	r3, r0
 800d46e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d470:	7bfb      	ldrb	r3, [r7, #15]
}
 800d472:	4618      	mov	r0, r3
 800d474:	3710      	adds	r7, #16
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}

0800d47a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d47a:	b580      	push	{r7, lr}
 800d47c:	b084      	sub	sp, #16
 800d47e:	af00      	add	r7, sp, #0
 800d480:	6078      	str	r0, [r7, #4]
 800d482:	460b      	mov	r3, r1
 800d484:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d486:	2300      	movs	r3, #0
 800d488:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d490:	685b      	ldr	r3, [r3, #4]
 800d492:	78fa      	ldrb	r2, [r7, #3]
 800d494:	4611      	mov	r1, r2
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	4798      	blx	r3
 800d49a:	4603      	mov	r3, r0
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d001      	beq.n	800d4a4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d4a0:	2303      	movs	r3, #3
 800d4a2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d4a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3710      	adds	r7, #16
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	bd80      	pop	{r7, pc}

0800d4ae <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d4ae:	b580      	push	{r7, lr}
 800d4b0:	b084      	sub	sp, #16
 800d4b2:	af00      	add	r7, sp, #0
 800d4b4:	6078      	str	r0, [r7, #4]
 800d4b6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d4be:	6839      	ldr	r1, [r7, #0]
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f001 f936 	bl	800e732 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2201      	movs	r2, #1
 800d4ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800d4d4:	461a      	mov	r2, r3
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d4e2:	f003 031f 	and.w	r3, r3, #31
 800d4e6:	2b02      	cmp	r3, #2
 800d4e8:	d01a      	beq.n	800d520 <USBD_LL_SetupStage+0x72>
 800d4ea:	2b02      	cmp	r3, #2
 800d4ec:	d822      	bhi.n	800d534 <USBD_LL_SetupStage+0x86>
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d002      	beq.n	800d4f8 <USBD_LL_SetupStage+0x4a>
 800d4f2:	2b01      	cmp	r3, #1
 800d4f4:	d00a      	beq.n	800d50c <USBD_LL_SetupStage+0x5e>
 800d4f6:	e01d      	b.n	800d534 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d4fe:	4619      	mov	r1, r3
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f000 fb63 	bl	800dbcc <USBD_StdDevReq>
 800d506:	4603      	mov	r3, r0
 800d508:	73fb      	strb	r3, [r7, #15]
      break;
 800d50a:	e020      	b.n	800d54e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d512:	4619      	mov	r1, r3
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f000 fbcb 	bl	800dcb0 <USBD_StdItfReq>
 800d51a:	4603      	mov	r3, r0
 800d51c:	73fb      	strb	r3, [r7, #15]
      break;
 800d51e:	e016      	b.n	800d54e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800d526:	4619      	mov	r1, r3
 800d528:	6878      	ldr	r0, [r7, #4]
 800d52a:	f000 fc2d 	bl	800dd88 <USBD_StdEPReq>
 800d52e:	4603      	mov	r3, r0
 800d530:	73fb      	strb	r3, [r7, #15]
      break;
 800d532:	e00c      	b.n	800d54e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d53a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800d53e:	b2db      	uxtb	r3, r3
 800d540:	4619      	mov	r1, r3
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f001 fe5a 	bl	800f1fc <USBD_LL_StallEP>
 800d548:	4603      	mov	r3, r0
 800d54a:	73fb      	strb	r3, [r7, #15]
      break;
 800d54c:	bf00      	nop
  }

  return ret;
 800d54e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d550:	4618      	mov	r0, r3
 800d552:	3710      	adds	r7, #16
 800d554:	46bd      	mov	sp, r7
 800d556:	bd80      	pop	{r7, pc}

0800d558 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d558:	b580      	push	{r7, lr}
 800d55a:	b086      	sub	sp, #24
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	60f8      	str	r0, [r7, #12]
 800d560:	460b      	mov	r3, r1
 800d562:	607a      	str	r2, [r7, #4]
 800d564:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d566:	2300      	movs	r3, #0
 800d568:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d56a:	7afb      	ldrb	r3, [r7, #11]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d16e      	bne.n	800d64e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d576:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d57e:	2b03      	cmp	r3, #3
 800d580:	f040 8098 	bne.w	800d6b4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d584:	693b      	ldr	r3, [r7, #16]
 800d586:	689a      	ldr	r2, [r3, #8]
 800d588:	693b      	ldr	r3, [r7, #16]
 800d58a:	68db      	ldr	r3, [r3, #12]
 800d58c:	429a      	cmp	r2, r3
 800d58e:	d913      	bls.n	800d5b8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d590:	693b      	ldr	r3, [r7, #16]
 800d592:	689a      	ldr	r2, [r3, #8]
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	68db      	ldr	r3, [r3, #12]
 800d598:	1ad2      	subs	r2, r2, r3
 800d59a:	693b      	ldr	r3, [r7, #16]
 800d59c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	68da      	ldr	r2, [r3, #12]
 800d5a2:	693b      	ldr	r3, [r7, #16]
 800d5a4:	689b      	ldr	r3, [r3, #8]
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	bf28      	it	cs
 800d5aa:	4613      	movcs	r3, r2
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	6879      	ldr	r1, [r7, #4]
 800d5b0:	68f8      	ldr	r0, [r7, #12]
 800d5b2:	f001 f9be 	bl	800e932 <USBD_CtlContinueRx>
 800d5b6:	e07d      	b.n	800d6b4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800d5be:	f003 031f 	and.w	r3, r3, #31
 800d5c2:	2b02      	cmp	r3, #2
 800d5c4:	d014      	beq.n	800d5f0 <USBD_LL_DataOutStage+0x98>
 800d5c6:	2b02      	cmp	r3, #2
 800d5c8:	d81d      	bhi.n	800d606 <USBD_LL_DataOutStage+0xae>
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d002      	beq.n	800d5d4 <USBD_LL_DataOutStage+0x7c>
 800d5ce:	2b01      	cmp	r3, #1
 800d5d0:	d003      	beq.n	800d5da <USBD_LL_DataOutStage+0x82>
 800d5d2:	e018      	b.n	800d606 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d5d4:	2300      	movs	r3, #0
 800d5d6:	75bb      	strb	r3, [r7, #22]
            break;
 800d5d8:	e018      	b.n	800d60c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d5e0:	b2db      	uxtb	r3, r3
 800d5e2:	4619      	mov	r1, r3
 800d5e4:	68f8      	ldr	r0, [r7, #12]
 800d5e6:	f000 fa64 	bl	800dab2 <USBD_CoreFindIF>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	75bb      	strb	r3, [r7, #22]
            break;
 800d5ee:	e00d      	b.n	800d60c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800d5f6:	b2db      	uxtb	r3, r3
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	68f8      	ldr	r0, [r7, #12]
 800d5fc:	f000 fa66 	bl	800dacc <USBD_CoreFindEP>
 800d600:	4603      	mov	r3, r0
 800d602:	75bb      	strb	r3, [r7, #22]
            break;
 800d604:	e002      	b.n	800d60c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d606:	2300      	movs	r3, #0
 800d608:	75bb      	strb	r3, [r7, #22]
            break;
 800d60a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d60c:	7dbb      	ldrb	r3, [r7, #22]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d119      	bne.n	800d646 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d618:	b2db      	uxtb	r3, r3
 800d61a:	2b03      	cmp	r3, #3
 800d61c:	d113      	bne.n	800d646 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d61e:	7dba      	ldrb	r2, [r7, #22]
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	32ae      	adds	r2, #174	@ 0xae
 800d624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d628:	691b      	ldr	r3, [r3, #16]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d00b      	beq.n	800d646 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d62e:	7dba      	ldrb	r2, [r7, #22]
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d636:	7dba      	ldrb	r2, [r7, #22]
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	32ae      	adds	r2, #174	@ 0xae
 800d63c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d640:	691b      	ldr	r3, [r3, #16]
 800d642:	68f8      	ldr	r0, [r7, #12]
 800d644:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d646:	68f8      	ldr	r0, [r7, #12]
 800d648:	f001 f984 	bl	800e954 <USBD_CtlSendStatus>
 800d64c:	e032      	b.n	800d6b4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d64e:	7afb      	ldrb	r3, [r7, #11]
 800d650:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d654:	b2db      	uxtb	r3, r3
 800d656:	4619      	mov	r1, r3
 800d658:	68f8      	ldr	r0, [r7, #12]
 800d65a:	f000 fa37 	bl	800dacc <USBD_CoreFindEP>
 800d65e:	4603      	mov	r3, r0
 800d660:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d662:	7dbb      	ldrb	r3, [r7, #22]
 800d664:	2bff      	cmp	r3, #255	@ 0xff
 800d666:	d025      	beq.n	800d6b4 <USBD_LL_DataOutStage+0x15c>
 800d668:	7dbb      	ldrb	r3, [r7, #22]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d122      	bne.n	800d6b4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d674:	b2db      	uxtb	r3, r3
 800d676:	2b03      	cmp	r3, #3
 800d678:	d117      	bne.n	800d6aa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d67a:	7dba      	ldrb	r2, [r7, #22]
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	32ae      	adds	r2, #174	@ 0xae
 800d680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d684:	699b      	ldr	r3, [r3, #24]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d00f      	beq.n	800d6aa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d68a:	7dba      	ldrb	r2, [r7, #22]
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d692:	7dba      	ldrb	r2, [r7, #22]
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	32ae      	adds	r2, #174	@ 0xae
 800d698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d69c:	699b      	ldr	r3, [r3, #24]
 800d69e:	7afa      	ldrb	r2, [r7, #11]
 800d6a0:	4611      	mov	r1, r2
 800d6a2:	68f8      	ldr	r0, [r7, #12]
 800d6a4:	4798      	blx	r3
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d6aa:	7dfb      	ldrb	r3, [r7, #23]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d001      	beq.n	800d6b4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d6b0:	7dfb      	ldrb	r3, [r7, #23]
 800d6b2:	e000      	b.n	800d6b6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d6b4:	2300      	movs	r3, #0
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3718      	adds	r7, #24
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}

0800d6be <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d6be:	b580      	push	{r7, lr}
 800d6c0:	b086      	sub	sp, #24
 800d6c2:	af00      	add	r7, sp, #0
 800d6c4:	60f8      	str	r0, [r7, #12]
 800d6c6:	460b      	mov	r3, r1
 800d6c8:	607a      	str	r2, [r7, #4]
 800d6ca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d6cc:	7afb      	ldrb	r3, [r7, #11]
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d16f      	bne.n	800d7b2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d6d2:	68fb      	ldr	r3, [r7, #12]
 800d6d4:	3314      	adds	r3, #20
 800d6d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800d6de:	2b02      	cmp	r3, #2
 800d6e0:	d15a      	bne.n	800d798 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	689a      	ldr	r2, [r3, #8]
 800d6e6:	693b      	ldr	r3, [r7, #16]
 800d6e8:	68db      	ldr	r3, [r3, #12]
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d914      	bls.n	800d718 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d6ee:	693b      	ldr	r3, [r7, #16]
 800d6f0:	689a      	ldr	r2, [r3, #8]
 800d6f2:	693b      	ldr	r3, [r7, #16]
 800d6f4:	68db      	ldr	r3, [r3, #12]
 800d6f6:	1ad2      	subs	r2, r2, r3
 800d6f8:	693b      	ldr	r3, [r7, #16]
 800d6fa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d6fc:	693b      	ldr	r3, [r7, #16]
 800d6fe:	689b      	ldr	r3, [r3, #8]
 800d700:	461a      	mov	r2, r3
 800d702:	6879      	ldr	r1, [r7, #4]
 800d704:	68f8      	ldr	r0, [r7, #12]
 800d706:	f001 f8e6 	bl	800e8d6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d70a:	2300      	movs	r3, #0
 800d70c:	2200      	movs	r2, #0
 800d70e:	2100      	movs	r1, #0
 800d710:	68f8      	ldr	r0, [r7, #12]
 800d712:	f001 fe1d 	bl	800f350 <USBD_LL_PrepareReceive>
 800d716:	e03f      	b.n	800d798 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d718:	693b      	ldr	r3, [r7, #16]
 800d71a:	68da      	ldr	r2, [r3, #12]
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	689b      	ldr	r3, [r3, #8]
 800d720:	429a      	cmp	r2, r3
 800d722:	d11c      	bne.n	800d75e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	685a      	ldr	r2, [r3, #4]
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d316      	bcc.n	800d75e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	685a      	ldr	r2, [r3, #4]
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d73a:	429a      	cmp	r2, r3
 800d73c:	d20f      	bcs.n	800d75e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d73e:	2200      	movs	r2, #0
 800d740:	2100      	movs	r1, #0
 800d742:	68f8      	ldr	r0, [r7, #12]
 800d744:	f001 f8c7 	bl	800e8d6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	2200      	movs	r2, #0
 800d74c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d750:	2300      	movs	r3, #0
 800d752:	2200      	movs	r2, #0
 800d754:	2100      	movs	r1, #0
 800d756:	68f8      	ldr	r0, [r7, #12]
 800d758:	f001 fdfa 	bl	800f350 <USBD_LL_PrepareReceive>
 800d75c:	e01c      	b.n	800d798 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d764:	b2db      	uxtb	r3, r3
 800d766:	2b03      	cmp	r3, #3
 800d768:	d10f      	bne.n	800d78a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d770:	68db      	ldr	r3, [r3, #12]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d009      	beq.n	800d78a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	2200      	movs	r2, #0
 800d77a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d784:	68db      	ldr	r3, [r3, #12]
 800d786:	68f8      	ldr	r0, [r7, #12]
 800d788:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d78a:	2180      	movs	r1, #128	@ 0x80
 800d78c:	68f8      	ldr	r0, [r7, #12]
 800d78e:	f001 fd35 	bl	800f1fc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d792:	68f8      	ldr	r0, [r7, #12]
 800d794:	f001 f8f1 	bl	800e97a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d03a      	beq.n	800d818 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d7a2:	68f8      	ldr	r0, [r7, #12]
 800d7a4:	f7ff fe42 	bl	800d42c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800d7b0:	e032      	b.n	800d818 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d7b2:	7afb      	ldrb	r3, [r7, #11]
 800d7b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d7b8:	b2db      	uxtb	r3, r3
 800d7ba:	4619      	mov	r1, r3
 800d7bc:	68f8      	ldr	r0, [r7, #12]
 800d7be:	f000 f985 	bl	800dacc <USBD_CoreFindEP>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d7c6:	7dfb      	ldrb	r3, [r7, #23]
 800d7c8:	2bff      	cmp	r3, #255	@ 0xff
 800d7ca:	d025      	beq.n	800d818 <USBD_LL_DataInStage+0x15a>
 800d7cc:	7dfb      	ldrb	r3, [r7, #23]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d122      	bne.n	800d818 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7d8:	b2db      	uxtb	r3, r3
 800d7da:	2b03      	cmp	r3, #3
 800d7dc:	d11c      	bne.n	800d818 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d7de:	7dfa      	ldrb	r2, [r7, #23]
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	32ae      	adds	r2, #174	@ 0xae
 800d7e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7e8:	695b      	ldr	r3, [r3, #20]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d014      	beq.n	800d818 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d7ee:	7dfa      	ldrb	r2, [r7, #23]
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d7f6:	7dfa      	ldrb	r2, [r7, #23]
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	32ae      	adds	r2, #174	@ 0xae
 800d7fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d800:	695b      	ldr	r3, [r3, #20]
 800d802:	7afa      	ldrb	r2, [r7, #11]
 800d804:	4611      	mov	r1, r2
 800d806:	68f8      	ldr	r0, [r7, #12]
 800d808:	4798      	blx	r3
 800d80a:	4603      	mov	r3, r0
 800d80c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d80e:	7dbb      	ldrb	r3, [r7, #22]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d001      	beq.n	800d818 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d814:	7dbb      	ldrb	r3, [r7, #22]
 800d816:	e000      	b.n	800d81a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d818:	2300      	movs	r3, #0
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3718      	adds	r7, #24
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}

0800d822 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d822:	b580      	push	{r7, lr}
 800d824:	b084      	sub	sp, #16
 800d826:	af00      	add	r7, sp, #0
 800d828:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d82a:	2300      	movs	r3, #0
 800d82c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2201      	movs	r2, #1
 800d832:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2200      	movs	r2, #0
 800d83a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2200      	movs	r2, #0
 800d842:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2200      	movs	r2, #0
 800d848:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2200      	movs	r2, #0
 800d850:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d014      	beq.n	800d888 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d864:	685b      	ldr	r3, [r3, #4]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d00e      	beq.n	800d888 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d870:	685b      	ldr	r3, [r3, #4]
 800d872:	687a      	ldr	r2, [r7, #4]
 800d874:	6852      	ldr	r2, [r2, #4]
 800d876:	b2d2      	uxtb	r2, r2
 800d878:	4611      	mov	r1, r2
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	4798      	blx	r3
 800d87e:	4603      	mov	r3, r0
 800d880:	2b00      	cmp	r3, #0
 800d882:	d001      	beq.n	800d888 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d884:	2303      	movs	r3, #3
 800d886:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d888:	2340      	movs	r3, #64	@ 0x40
 800d88a:	2200      	movs	r2, #0
 800d88c:	2100      	movs	r1, #0
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f001 fc6f 	bl	800f172 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	2201      	movs	r2, #1
 800d898:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	2240      	movs	r2, #64	@ 0x40
 800d8a0:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d8a4:	2340      	movs	r3, #64	@ 0x40
 800d8a6:	2200      	movs	r2, #0
 800d8a8:	2180      	movs	r1, #128	@ 0x80
 800d8aa:	6878      	ldr	r0, [r7, #4]
 800d8ac:	f001 fc61 	bl	800f172 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2240      	movs	r2, #64	@ 0x40
 800d8ba:	621a      	str	r2, [r3, #32]

  return ret;
 800d8bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8be:	4618      	mov	r0, r3
 800d8c0:	3710      	adds	r7, #16
 800d8c2:	46bd      	mov	sp, r7
 800d8c4:	bd80      	pop	{r7, pc}

0800d8c6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d8c6:	b480      	push	{r7}
 800d8c8:	b083      	sub	sp, #12
 800d8ca:	af00      	add	r7, sp, #0
 800d8cc:	6078      	str	r0, [r7, #4]
 800d8ce:	460b      	mov	r3, r1
 800d8d0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	78fa      	ldrb	r2, [r7, #3]
 800d8d6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d8d8:	2300      	movs	r3, #0
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	370c      	adds	r7, #12
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e4:	4770      	bx	lr

0800d8e6 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d8e6:	b480      	push	{r7}
 800d8e8:	b083      	sub	sp, #12
 800d8ea:	af00      	add	r7, sp, #0
 800d8ec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8f4:	b2db      	uxtb	r3, r3
 800d8f6:	2b04      	cmp	r3, #4
 800d8f8:	d006      	beq.n	800d908 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d900:	b2da      	uxtb	r2, r3
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2204      	movs	r2, #4
 800d90c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800d910:	2300      	movs	r3, #0
}
 800d912:	4618      	mov	r0, r3
 800d914:	370c      	adds	r7, #12
 800d916:	46bd      	mov	sp, r7
 800d918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91c:	4770      	bx	lr

0800d91e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d91e:	b480      	push	{r7}
 800d920:	b083      	sub	sp, #12
 800d922:	af00      	add	r7, sp, #0
 800d924:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d92c:	b2db      	uxtb	r3, r3
 800d92e:	2b04      	cmp	r3, #4
 800d930:	d106      	bne.n	800d940 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800d938:	b2da      	uxtb	r2, r3
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800d940:	2300      	movs	r3, #0
}
 800d942:	4618      	mov	r0, r3
 800d944:	370c      	adds	r7, #12
 800d946:	46bd      	mov	sp, r7
 800d948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94c:	4770      	bx	lr

0800d94e <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d94e:	b580      	push	{r7, lr}
 800d950:	b082      	sub	sp, #8
 800d952:	af00      	add	r7, sp, #0
 800d954:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d95c:	b2db      	uxtb	r3, r3
 800d95e:	2b03      	cmp	r3, #3
 800d960:	d110      	bne.n	800d984 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d968:	2b00      	cmp	r3, #0
 800d96a:	d00b      	beq.n	800d984 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d972:	69db      	ldr	r3, [r3, #28]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d005      	beq.n	800d984 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d97e:	69db      	ldr	r3, [r3, #28]
 800d980:	6878      	ldr	r0, [r7, #4]
 800d982:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d984:	2300      	movs	r3, #0
}
 800d986:	4618      	mov	r0, r3
 800d988:	3708      	adds	r7, #8
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}

0800d98e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d98e:	b580      	push	{r7, lr}
 800d990:	b082      	sub	sp, #8
 800d992:	af00      	add	r7, sp, #0
 800d994:	6078      	str	r0, [r7, #4]
 800d996:	460b      	mov	r3, r1
 800d998:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	32ae      	adds	r2, #174	@ 0xae
 800d9a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d101      	bne.n	800d9b0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d9ac:	2303      	movs	r3, #3
 800d9ae:	e01c      	b.n	800d9ea <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9b6:	b2db      	uxtb	r3, r3
 800d9b8:	2b03      	cmp	r3, #3
 800d9ba:	d115      	bne.n	800d9e8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	32ae      	adds	r2, #174	@ 0xae
 800d9c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9ca:	6a1b      	ldr	r3, [r3, #32]
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d00b      	beq.n	800d9e8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d9d0:	687b      	ldr	r3, [r7, #4]
 800d9d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	32ae      	adds	r2, #174	@ 0xae
 800d9da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9de:	6a1b      	ldr	r3, [r3, #32]
 800d9e0:	78fa      	ldrb	r2, [r7, #3]
 800d9e2:	4611      	mov	r1, r2
 800d9e4:	6878      	ldr	r0, [r7, #4]
 800d9e6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d9e8:	2300      	movs	r3, #0
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	3708      	adds	r7, #8
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	bd80      	pop	{r7, pc}

0800d9f2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d9f2:	b580      	push	{r7, lr}
 800d9f4:	b082      	sub	sp, #8
 800d9f6:	af00      	add	r7, sp, #0
 800d9f8:	6078      	str	r0, [r7, #4]
 800d9fa:	460b      	mov	r3, r1
 800d9fc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	32ae      	adds	r2, #174	@ 0xae
 800da08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d101      	bne.n	800da14 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800da10:	2303      	movs	r3, #3
 800da12:	e01c      	b.n	800da4e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da1a:	b2db      	uxtb	r3, r3
 800da1c:	2b03      	cmp	r3, #3
 800da1e:	d115      	bne.n	800da4c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	32ae      	adds	r2, #174	@ 0xae
 800da2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da30:	2b00      	cmp	r3, #0
 800da32:	d00b      	beq.n	800da4c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	32ae      	adds	r2, #174	@ 0xae
 800da3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da44:	78fa      	ldrb	r2, [r7, #3]
 800da46:	4611      	mov	r1, r2
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800da4c:	2300      	movs	r3, #0
}
 800da4e:	4618      	mov	r0, r3
 800da50:	3708      	adds	r7, #8
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}

0800da56 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800da56:	b480      	push	{r7}
 800da58:	b083      	sub	sp, #12
 800da5a:	af00      	add	r7, sp, #0
 800da5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800da5e:	2300      	movs	r3, #0
}
 800da60:	4618      	mov	r0, r3
 800da62:	370c      	adds	r7, #12
 800da64:	46bd      	mov	sp, r7
 800da66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6a:	4770      	bx	lr

0800da6c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	b084      	sub	sp, #16
 800da70:	af00      	add	r7, sp, #0
 800da72:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800da74:	2300      	movs	r3, #0
 800da76:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2201      	movs	r2, #1
 800da7c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da86:	2b00      	cmp	r3, #0
 800da88:	d00e      	beq.n	800daa8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	687a      	ldr	r2, [r7, #4]
 800da94:	6852      	ldr	r2, [r2, #4]
 800da96:	b2d2      	uxtb	r2, r2
 800da98:	4611      	mov	r1, r2
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	4798      	blx	r3
 800da9e:	4603      	mov	r3, r0
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d001      	beq.n	800daa8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800daa4:	2303      	movs	r3, #3
 800daa6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800daa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800daaa:	4618      	mov	r0, r3
 800daac:	3710      	adds	r7, #16
 800daae:	46bd      	mov	sp, r7
 800dab0:	bd80      	pop	{r7, pc}

0800dab2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dab2:	b480      	push	{r7}
 800dab4:	b083      	sub	sp, #12
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	6078      	str	r0, [r7, #4]
 800daba:	460b      	mov	r3, r1
 800dabc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dabe:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	370c      	adds	r7, #12
 800dac4:	46bd      	mov	sp, r7
 800dac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daca:	4770      	bx	lr

0800dacc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dacc:	b480      	push	{r7}
 800dace:	b083      	sub	sp, #12
 800dad0:	af00      	add	r7, sp, #0
 800dad2:	6078      	str	r0, [r7, #4]
 800dad4:	460b      	mov	r3, r1
 800dad6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dad8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dada:	4618      	mov	r0, r3
 800dadc:	370c      	adds	r7, #12
 800dade:	46bd      	mov	sp, r7
 800dae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae4:	4770      	bx	lr

0800dae6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800dae6:	b580      	push	{r7, lr}
 800dae8:	b086      	sub	sp, #24
 800daea:	af00      	add	r7, sp, #0
 800daec:	6078      	str	r0, [r7, #4]
 800daee:	460b      	mov	r3, r1
 800daf0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800dafa:	2300      	movs	r3, #0
 800dafc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	885b      	ldrh	r3, [r3, #2]
 800db02:	b29b      	uxth	r3, r3
 800db04:	68fa      	ldr	r2, [r7, #12]
 800db06:	7812      	ldrb	r2, [r2, #0]
 800db08:	4293      	cmp	r3, r2
 800db0a:	d91f      	bls.n	800db4c <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	781b      	ldrb	r3, [r3, #0]
 800db10:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800db12:	e013      	b.n	800db3c <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800db14:	f107 030a 	add.w	r3, r7, #10
 800db18:	4619      	mov	r1, r3
 800db1a:	6978      	ldr	r0, [r7, #20]
 800db1c:	f000 f81b 	bl	800db56 <USBD_GetNextDesc>
 800db20:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	785b      	ldrb	r3, [r3, #1]
 800db26:	2b05      	cmp	r3, #5
 800db28:	d108      	bne.n	800db3c <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800db2a:	697b      	ldr	r3, [r7, #20]
 800db2c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800db2e:	693b      	ldr	r3, [r7, #16]
 800db30:	789b      	ldrb	r3, [r3, #2]
 800db32:	78fa      	ldrb	r2, [r7, #3]
 800db34:	429a      	cmp	r2, r3
 800db36:	d008      	beq.n	800db4a <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800db38:	2300      	movs	r3, #0
 800db3a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	885b      	ldrh	r3, [r3, #2]
 800db40:	b29a      	uxth	r2, r3
 800db42:	897b      	ldrh	r3, [r7, #10]
 800db44:	429a      	cmp	r2, r3
 800db46:	d8e5      	bhi.n	800db14 <USBD_GetEpDesc+0x2e>
 800db48:	e000      	b.n	800db4c <USBD_GetEpDesc+0x66>
          break;
 800db4a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800db4c:	693b      	ldr	r3, [r7, #16]
}
 800db4e:	4618      	mov	r0, r3
 800db50:	3718      	adds	r7, #24
 800db52:	46bd      	mov	sp, r7
 800db54:	bd80      	pop	{r7, pc}

0800db56 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800db56:	b480      	push	{r7}
 800db58:	b085      	sub	sp, #20
 800db5a:	af00      	add	r7, sp, #0
 800db5c:	6078      	str	r0, [r7, #4]
 800db5e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800db64:	683b      	ldr	r3, [r7, #0]
 800db66:	881b      	ldrh	r3, [r3, #0]
 800db68:	68fa      	ldr	r2, [r7, #12]
 800db6a:	7812      	ldrb	r2, [r2, #0]
 800db6c:	4413      	add	r3, r2
 800db6e:	b29a      	uxth	r2, r3
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	461a      	mov	r2, r3
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	4413      	add	r3, r2
 800db7e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800db80:	68fb      	ldr	r3, [r7, #12]
}
 800db82:	4618      	mov	r0, r3
 800db84:	3714      	adds	r7, #20
 800db86:	46bd      	mov	sp, r7
 800db88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db8c:	4770      	bx	lr

0800db8e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800db8e:	b480      	push	{r7}
 800db90:	b087      	sub	sp, #28
 800db92:	af00      	add	r7, sp, #0
 800db94:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	781b      	ldrb	r3, [r3, #0]
 800db9e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dba0:	697b      	ldr	r3, [r7, #20]
 800dba2:	3301      	adds	r3, #1
 800dba4:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dba6:	697b      	ldr	r3, [r7, #20]
 800dba8:	781b      	ldrb	r3, [r3, #0]
 800dbaa:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800dbac:	8a3b      	ldrh	r3, [r7, #16]
 800dbae:	021b      	lsls	r3, r3, #8
 800dbb0:	b21a      	sxth	r2, r3
 800dbb2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800dbb6:	4313      	orrs	r3, r2
 800dbb8:	b21b      	sxth	r3, r3
 800dbba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800dbbc:	89fb      	ldrh	r3, [r7, #14]
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	371c      	adds	r7, #28
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc8:	4770      	bx	lr
	...

0800dbcc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b084      	sub	sp, #16
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	6078      	str	r0, [r7, #4]
 800dbd4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbd6:	2300      	movs	r3, #0
 800dbd8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dbda:	683b      	ldr	r3, [r7, #0]
 800dbdc:	781b      	ldrb	r3, [r3, #0]
 800dbde:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dbe2:	2b40      	cmp	r3, #64	@ 0x40
 800dbe4:	d005      	beq.n	800dbf2 <USBD_StdDevReq+0x26>
 800dbe6:	2b40      	cmp	r3, #64	@ 0x40
 800dbe8:	d857      	bhi.n	800dc9a <USBD_StdDevReq+0xce>
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d00f      	beq.n	800dc0e <USBD_StdDevReq+0x42>
 800dbee:	2b20      	cmp	r3, #32
 800dbf0:	d153      	bne.n	800dc9a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	32ae      	adds	r2, #174	@ 0xae
 800dbfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc00:	689b      	ldr	r3, [r3, #8]
 800dc02:	6839      	ldr	r1, [r7, #0]
 800dc04:	6878      	ldr	r0, [r7, #4]
 800dc06:	4798      	blx	r3
 800dc08:	4603      	mov	r3, r0
 800dc0a:	73fb      	strb	r3, [r7, #15]
      break;
 800dc0c:	e04a      	b.n	800dca4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	785b      	ldrb	r3, [r3, #1]
 800dc12:	2b09      	cmp	r3, #9
 800dc14:	d83b      	bhi.n	800dc8e <USBD_StdDevReq+0xc2>
 800dc16:	a201      	add	r2, pc, #4	@ (adr r2, 800dc1c <USBD_StdDevReq+0x50>)
 800dc18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc1c:	0800dc71 	.word	0x0800dc71
 800dc20:	0800dc85 	.word	0x0800dc85
 800dc24:	0800dc8f 	.word	0x0800dc8f
 800dc28:	0800dc7b 	.word	0x0800dc7b
 800dc2c:	0800dc8f 	.word	0x0800dc8f
 800dc30:	0800dc4f 	.word	0x0800dc4f
 800dc34:	0800dc45 	.word	0x0800dc45
 800dc38:	0800dc8f 	.word	0x0800dc8f
 800dc3c:	0800dc67 	.word	0x0800dc67
 800dc40:	0800dc59 	.word	0x0800dc59
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dc44:	6839      	ldr	r1, [r7, #0]
 800dc46:	6878      	ldr	r0, [r7, #4]
 800dc48:	f000 fa3c 	bl	800e0c4 <USBD_GetDescriptor>
          break;
 800dc4c:	e024      	b.n	800dc98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dc4e:	6839      	ldr	r1, [r7, #0]
 800dc50:	6878      	ldr	r0, [r7, #4]
 800dc52:	f000 fbcb 	bl	800e3ec <USBD_SetAddress>
          break;
 800dc56:	e01f      	b.n	800dc98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dc58:	6839      	ldr	r1, [r7, #0]
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f000 fc0a 	bl	800e474 <USBD_SetConfig>
 800dc60:	4603      	mov	r3, r0
 800dc62:	73fb      	strb	r3, [r7, #15]
          break;
 800dc64:	e018      	b.n	800dc98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dc66:	6839      	ldr	r1, [r7, #0]
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f000 fcad 	bl	800e5c8 <USBD_GetConfig>
          break;
 800dc6e:	e013      	b.n	800dc98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dc70:	6839      	ldr	r1, [r7, #0]
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f000 fcde 	bl	800e634 <USBD_GetStatus>
          break;
 800dc78:	e00e      	b.n	800dc98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dc7a:	6839      	ldr	r1, [r7, #0]
 800dc7c:	6878      	ldr	r0, [r7, #4]
 800dc7e:	f000 fd0d 	bl	800e69c <USBD_SetFeature>
          break;
 800dc82:	e009      	b.n	800dc98 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dc84:	6839      	ldr	r1, [r7, #0]
 800dc86:	6878      	ldr	r0, [r7, #4]
 800dc88:	f000 fd31 	bl	800e6ee <USBD_ClrFeature>
          break;
 800dc8c:	e004      	b.n	800dc98 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800dc8e:	6839      	ldr	r1, [r7, #0]
 800dc90:	6878      	ldr	r0, [r7, #4]
 800dc92:	f000 fd88 	bl	800e7a6 <USBD_CtlError>
          break;
 800dc96:	bf00      	nop
      }
      break;
 800dc98:	e004      	b.n	800dca4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800dc9a:	6839      	ldr	r1, [r7, #0]
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f000 fd82 	bl	800e7a6 <USBD_CtlError>
      break;
 800dca2:	bf00      	nop
  }

  return ret;
 800dca4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dca6:	4618      	mov	r0, r3
 800dca8:	3710      	adds	r7, #16
 800dcaa:	46bd      	mov	sp, r7
 800dcac:	bd80      	pop	{r7, pc}
 800dcae:	bf00      	nop

0800dcb0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b084      	sub	sp, #16
 800dcb4:	af00      	add	r7, sp, #0
 800dcb6:	6078      	str	r0, [r7, #4]
 800dcb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800dcba:	2300      	movs	r3, #0
 800dcbc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dcc6:	2b40      	cmp	r3, #64	@ 0x40
 800dcc8:	d005      	beq.n	800dcd6 <USBD_StdItfReq+0x26>
 800dcca:	2b40      	cmp	r3, #64	@ 0x40
 800dccc:	d852      	bhi.n	800dd74 <USBD_StdItfReq+0xc4>
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d001      	beq.n	800dcd6 <USBD_StdItfReq+0x26>
 800dcd2:	2b20      	cmp	r3, #32
 800dcd4:	d14e      	bne.n	800dd74 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dcdc:	b2db      	uxtb	r3, r3
 800dcde:	3b01      	subs	r3, #1
 800dce0:	2b02      	cmp	r3, #2
 800dce2:	d840      	bhi.n	800dd66 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	889b      	ldrh	r3, [r3, #4]
 800dce8:	b2db      	uxtb	r3, r3
 800dcea:	2b01      	cmp	r3, #1
 800dcec:	d836      	bhi.n	800dd5c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800dcee:	683b      	ldr	r3, [r7, #0]
 800dcf0:	889b      	ldrh	r3, [r3, #4]
 800dcf2:	b2db      	uxtb	r3, r3
 800dcf4:	4619      	mov	r1, r3
 800dcf6:	6878      	ldr	r0, [r7, #4]
 800dcf8:	f7ff fedb 	bl	800dab2 <USBD_CoreFindIF>
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dd00:	7bbb      	ldrb	r3, [r7, #14]
 800dd02:	2bff      	cmp	r3, #255	@ 0xff
 800dd04:	d01d      	beq.n	800dd42 <USBD_StdItfReq+0x92>
 800dd06:	7bbb      	ldrb	r3, [r7, #14]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d11a      	bne.n	800dd42 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800dd0c:	7bba      	ldrb	r2, [r7, #14]
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	32ae      	adds	r2, #174	@ 0xae
 800dd12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd16:	689b      	ldr	r3, [r3, #8]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d00f      	beq.n	800dd3c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800dd1c:	7bba      	ldrb	r2, [r7, #14]
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dd24:	7bba      	ldrb	r2, [r7, #14]
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	32ae      	adds	r2, #174	@ 0xae
 800dd2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd2e:	689b      	ldr	r3, [r3, #8]
 800dd30:	6839      	ldr	r1, [r7, #0]
 800dd32:	6878      	ldr	r0, [r7, #4]
 800dd34:	4798      	blx	r3
 800dd36:	4603      	mov	r3, r0
 800dd38:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dd3a:	e004      	b.n	800dd46 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800dd3c:	2303      	movs	r3, #3
 800dd3e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dd40:	e001      	b.n	800dd46 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800dd42:	2303      	movs	r3, #3
 800dd44:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	88db      	ldrh	r3, [r3, #6]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d110      	bne.n	800dd70 <USBD_StdItfReq+0xc0>
 800dd4e:	7bfb      	ldrb	r3, [r7, #15]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d10d      	bne.n	800dd70 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f000 fdfd 	bl	800e954 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dd5a:	e009      	b.n	800dd70 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800dd5c:	6839      	ldr	r1, [r7, #0]
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 fd21 	bl	800e7a6 <USBD_CtlError>
          break;
 800dd64:	e004      	b.n	800dd70 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800dd66:	6839      	ldr	r1, [r7, #0]
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f000 fd1c 	bl	800e7a6 <USBD_CtlError>
          break;
 800dd6e:	e000      	b.n	800dd72 <USBD_StdItfReq+0xc2>
          break;
 800dd70:	bf00      	nop
      }
      break;
 800dd72:	e004      	b.n	800dd7e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800dd74:	6839      	ldr	r1, [r7, #0]
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f000 fd15 	bl	800e7a6 <USBD_CtlError>
      break;
 800dd7c:	bf00      	nop
  }

  return ret;
 800dd7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3710      	adds	r7, #16
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}

0800dd88 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b084      	sub	sp, #16
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800dd92:	2300      	movs	r3, #0
 800dd94:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	889b      	ldrh	r3, [r3, #4]
 800dd9a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	781b      	ldrb	r3, [r3, #0]
 800dda0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800dda4:	2b40      	cmp	r3, #64	@ 0x40
 800dda6:	d007      	beq.n	800ddb8 <USBD_StdEPReq+0x30>
 800dda8:	2b40      	cmp	r3, #64	@ 0x40
 800ddaa:	f200 817f 	bhi.w	800e0ac <USBD_StdEPReq+0x324>
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d02a      	beq.n	800de08 <USBD_StdEPReq+0x80>
 800ddb2:	2b20      	cmp	r3, #32
 800ddb4:	f040 817a 	bne.w	800e0ac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ddb8:	7bbb      	ldrb	r3, [r7, #14]
 800ddba:	4619      	mov	r1, r3
 800ddbc:	6878      	ldr	r0, [r7, #4]
 800ddbe:	f7ff fe85 	bl	800dacc <USBD_CoreFindEP>
 800ddc2:	4603      	mov	r3, r0
 800ddc4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ddc6:	7b7b      	ldrb	r3, [r7, #13]
 800ddc8:	2bff      	cmp	r3, #255	@ 0xff
 800ddca:	f000 8174 	beq.w	800e0b6 <USBD_StdEPReq+0x32e>
 800ddce:	7b7b      	ldrb	r3, [r7, #13]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	f040 8170 	bne.w	800e0b6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ddd6:	7b7a      	ldrb	r2, [r7, #13]
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ddde:	7b7a      	ldrb	r2, [r7, #13]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	32ae      	adds	r2, #174	@ 0xae
 800dde4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dde8:	689b      	ldr	r3, [r3, #8]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	f000 8163 	beq.w	800e0b6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ddf0:	7b7a      	ldrb	r2, [r7, #13]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	32ae      	adds	r2, #174	@ 0xae
 800ddf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddfa:	689b      	ldr	r3, [r3, #8]
 800ddfc:	6839      	ldr	r1, [r7, #0]
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	4798      	blx	r3
 800de02:	4603      	mov	r3, r0
 800de04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800de06:	e156      	b.n	800e0b6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800de08:	683b      	ldr	r3, [r7, #0]
 800de0a:	785b      	ldrb	r3, [r3, #1]
 800de0c:	2b03      	cmp	r3, #3
 800de0e:	d008      	beq.n	800de22 <USBD_StdEPReq+0x9a>
 800de10:	2b03      	cmp	r3, #3
 800de12:	f300 8145 	bgt.w	800e0a0 <USBD_StdEPReq+0x318>
 800de16:	2b00      	cmp	r3, #0
 800de18:	f000 809b 	beq.w	800df52 <USBD_StdEPReq+0x1ca>
 800de1c:	2b01      	cmp	r3, #1
 800de1e:	d03c      	beq.n	800de9a <USBD_StdEPReq+0x112>
 800de20:	e13e      	b.n	800e0a0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800de28:	b2db      	uxtb	r3, r3
 800de2a:	2b02      	cmp	r3, #2
 800de2c:	d002      	beq.n	800de34 <USBD_StdEPReq+0xac>
 800de2e:	2b03      	cmp	r3, #3
 800de30:	d016      	beq.n	800de60 <USBD_StdEPReq+0xd8>
 800de32:	e02c      	b.n	800de8e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800de34:	7bbb      	ldrb	r3, [r7, #14]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d00d      	beq.n	800de56 <USBD_StdEPReq+0xce>
 800de3a:	7bbb      	ldrb	r3, [r7, #14]
 800de3c:	2b80      	cmp	r3, #128	@ 0x80
 800de3e:	d00a      	beq.n	800de56 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800de40:	7bbb      	ldrb	r3, [r7, #14]
 800de42:	4619      	mov	r1, r3
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	f001 f9d9 	bl	800f1fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800de4a:	2180      	movs	r1, #128	@ 0x80
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f001 f9d5 	bl	800f1fc <USBD_LL_StallEP>
 800de52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800de54:	e020      	b.n	800de98 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800de56:	6839      	ldr	r1, [r7, #0]
 800de58:	6878      	ldr	r0, [r7, #4]
 800de5a:	f000 fca4 	bl	800e7a6 <USBD_CtlError>
              break;
 800de5e:	e01b      	b.n	800de98 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	885b      	ldrh	r3, [r3, #2]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d10e      	bne.n	800de86 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800de68:	7bbb      	ldrb	r3, [r7, #14]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d00b      	beq.n	800de86 <USBD_StdEPReq+0xfe>
 800de6e:	7bbb      	ldrb	r3, [r7, #14]
 800de70:	2b80      	cmp	r3, #128	@ 0x80
 800de72:	d008      	beq.n	800de86 <USBD_StdEPReq+0xfe>
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	88db      	ldrh	r3, [r3, #6]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d104      	bne.n	800de86 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800de7c:	7bbb      	ldrb	r3, [r7, #14]
 800de7e:	4619      	mov	r1, r3
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f001 f9bb 	bl	800f1fc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f000 fd64 	bl	800e954 <USBD_CtlSendStatus>

              break;
 800de8c:	e004      	b.n	800de98 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800de8e:	6839      	ldr	r1, [r7, #0]
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f000 fc88 	bl	800e7a6 <USBD_CtlError>
              break;
 800de96:	bf00      	nop
          }
          break;
 800de98:	e107      	b.n	800e0aa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dea0:	b2db      	uxtb	r3, r3
 800dea2:	2b02      	cmp	r3, #2
 800dea4:	d002      	beq.n	800deac <USBD_StdEPReq+0x124>
 800dea6:	2b03      	cmp	r3, #3
 800dea8:	d016      	beq.n	800ded8 <USBD_StdEPReq+0x150>
 800deaa:	e04b      	b.n	800df44 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800deac:	7bbb      	ldrb	r3, [r7, #14]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d00d      	beq.n	800dece <USBD_StdEPReq+0x146>
 800deb2:	7bbb      	ldrb	r3, [r7, #14]
 800deb4:	2b80      	cmp	r3, #128	@ 0x80
 800deb6:	d00a      	beq.n	800dece <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800deb8:	7bbb      	ldrb	r3, [r7, #14]
 800deba:	4619      	mov	r1, r3
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f001 f99d 	bl	800f1fc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dec2:	2180      	movs	r1, #128	@ 0x80
 800dec4:	6878      	ldr	r0, [r7, #4]
 800dec6:	f001 f999 	bl	800f1fc <USBD_LL_StallEP>
 800deca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800decc:	e040      	b.n	800df50 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800dece:	6839      	ldr	r1, [r7, #0]
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f000 fc68 	bl	800e7a6 <USBD_CtlError>
              break;
 800ded6:	e03b      	b.n	800df50 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ded8:	683b      	ldr	r3, [r7, #0]
 800deda:	885b      	ldrh	r3, [r3, #2]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d136      	bne.n	800df4e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dee0:	7bbb      	ldrb	r3, [r7, #14]
 800dee2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d004      	beq.n	800def4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800deea:	7bbb      	ldrb	r3, [r7, #14]
 800deec:	4619      	mov	r1, r3
 800deee:	6878      	ldr	r0, [r7, #4]
 800def0:	f001 f9a3 	bl	800f23a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f000 fd2d 	bl	800e954 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800defa:	7bbb      	ldrb	r3, [r7, #14]
 800defc:	4619      	mov	r1, r3
 800defe:	6878      	ldr	r0, [r7, #4]
 800df00:	f7ff fde4 	bl	800dacc <USBD_CoreFindEP>
 800df04:	4603      	mov	r3, r0
 800df06:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800df08:	7b7b      	ldrb	r3, [r7, #13]
 800df0a:	2bff      	cmp	r3, #255	@ 0xff
 800df0c:	d01f      	beq.n	800df4e <USBD_StdEPReq+0x1c6>
 800df0e:	7b7b      	ldrb	r3, [r7, #13]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d11c      	bne.n	800df4e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800df14:	7b7a      	ldrb	r2, [r7, #13]
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800df1c:	7b7a      	ldrb	r2, [r7, #13]
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	32ae      	adds	r2, #174	@ 0xae
 800df22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df26:	689b      	ldr	r3, [r3, #8]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d010      	beq.n	800df4e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800df2c:	7b7a      	ldrb	r2, [r7, #13]
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	32ae      	adds	r2, #174	@ 0xae
 800df32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df36:	689b      	ldr	r3, [r3, #8]
 800df38:	6839      	ldr	r1, [r7, #0]
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	4798      	blx	r3
 800df3e:	4603      	mov	r3, r0
 800df40:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800df42:	e004      	b.n	800df4e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800df44:	6839      	ldr	r1, [r7, #0]
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f000 fc2d 	bl	800e7a6 <USBD_CtlError>
              break;
 800df4c:	e000      	b.n	800df50 <USBD_StdEPReq+0x1c8>
              break;
 800df4e:	bf00      	nop
          }
          break;
 800df50:	e0ab      	b.n	800e0aa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800df58:	b2db      	uxtb	r3, r3
 800df5a:	2b02      	cmp	r3, #2
 800df5c:	d002      	beq.n	800df64 <USBD_StdEPReq+0x1dc>
 800df5e:	2b03      	cmp	r3, #3
 800df60:	d032      	beq.n	800dfc8 <USBD_StdEPReq+0x240>
 800df62:	e097      	b.n	800e094 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800df64:	7bbb      	ldrb	r3, [r7, #14]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d007      	beq.n	800df7a <USBD_StdEPReq+0x1f2>
 800df6a:	7bbb      	ldrb	r3, [r7, #14]
 800df6c:	2b80      	cmp	r3, #128	@ 0x80
 800df6e:	d004      	beq.n	800df7a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800df70:	6839      	ldr	r1, [r7, #0]
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f000 fc17 	bl	800e7a6 <USBD_CtlError>
                break;
 800df78:	e091      	b.n	800e09e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800df7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	da0b      	bge.n	800df9a <USBD_StdEPReq+0x212>
 800df82:	7bbb      	ldrb	r3, [r7, #14]
 800df84:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800df88:	4613      	mov	r3, r2
 800df8a:	009b      	lsls	r3, r3, #2
 800df8c:	4413      	add	r3, r2
 800df8e:	009b      	lsls	r3, r3, #2
 800df90:	3310      	adds	r3, #16
 800df92:	687a      	ldr	r2, [r7, #4]
 800df94:	4413      	add	r3, r2
 800df96:	3304      	adds	r3, #4
 800df98:	e00b      	b.n	800dfb2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800df9a:	7bbb      	ldrb	r3, [r7, #14]
 800df9c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dfa0:	4613      	mov	r3, r2
 800dfa2:	009b      	lsls	r3, r3, #2
 800dfa4:	4413      	add	r3, r2
 800dfa6:	009b      	lsls	r3, r3, #2
 800dfa8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800dfac:	687a      	ldr	r2, [r7, #4]
 800dfae:	4413      	add	r3, r2
 800dfb0:	3304      	adds	r3, #4
 800dfb2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	2202      	movs	r2, #2
 800dfbe:	4619      	mov	r1, r3
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f000 fc6d 	bl	800e8a0 <USBD_CtlSendData>
              break;
 800dfc6:	e06a      	b.n	800e09e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dfc8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	da11      	bge.n	800dff4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dfd0:	7bbb      	ldrb	r3, [r7, #14]
 800dfd2:	f003 020f 	and.w	r2, r3, #15
 800dfd6:	6879      	ldr	r1, [r7, #4]
 800dfd8:	4613      	mov	r3, r2
 800dfda:	009b      	lsls	r3, r3, #2
 800dfdc:	4413      	add	r3, r2
 800dfde:	009b      	lsls	r3, r3, #2
 800dfe0:	440b      	add	r3, r1
 800dfe2:	3324      	adds	r3, #36	@ 0x24
 800dfe4:	881b      	ldrh	r3, [r3, #0]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d117      	bne.n	800e01a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800dfea:	6839      	ldr	r1, [r7, #0]
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f000 fbda 	bl	800e7a6 <USBD_CtlError>
                  break;
 800dff2:	e054      	b.n	800e09e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dff4:	7bbb      	ldrb	r3, [r7, #14]
 800dff6:	f003 020f 	and.w	r2, r3, #15
 800dffa:	6879      	ldr	r1, [r7, #4]
 800dffc:	4613      	mov	r3, r2
 800dffe:	009b      	lsls	r3, r3, #2
 800e000:	4413      	add	r3, r2
 800e002:	009b      	lsls	r3, r3, #2
 800e004:	440b      	add	r3, r1
 800e006:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800e00a:	881b      	ldrh	r3, [r3, #0]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d104      	bne.n	800e01a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e010:	6839      	ldr	r1, [r7, #0]
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f000 fbc7 	bl	800e7a6 <USBD_CtlError>
                  break;
 800e018:	e041      	b.n	800e09e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e01a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e01e:	2b00      	cmp	r3, #0
 800e020:	da0b      	bge.n	800e03a <USBD_StdEPReq+0x2b2>
 800e022:	7bbb      	ldrb	r3, [r7, #14]
 800e024:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e028:	4613      	mov	r3, r2
 800e02a:	009b      	lsls	r3, r3, #2
 800e02c:	4413      	add	r3, r2
 800e02e:	009b      	lsls	r3, r3, #2
 800e030:	3310      	adds	r3, #16
 800e032:	687a      	ldr	r2, [r7, #4]
 800e034:	4413      	add	r3, r2
 800e036:	3304      	adds	r3, #4
 800e038:	e00b      	b.n	800e052 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e03a:	7bbb      	ldrb	r3, [r7, #14]
 800e03c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e040:	4613      	mov	r3, r2
 800e042:	009b      	lsls	r3, r3, #2
 800e044:	4413      	add	r3, r2
 800e046:	009b      	lsls	r3, r3, #2
 800e048:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800e04c:	687a      	ldr	r2, [r7, #4]
 800e04e:	4413      	add	r3, r2
 800e050:	3304      	adds	r3, #4
 800e052:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e054:	7bbb      	ldrb	r3, [r7, #14]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d002      	beq.n	800e060 <USBD_StdEPReq+0x2d8>
 800e05a:	7bbb      	ldrb	r3, [r7, #14]
 800e05c:	2b80      	cmp	r3, #128	@ 0x80
 800e05e:	d103      	bne.n	800e068 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e060:	68bb      	ldr	r3, [r7, #8]
 800e062:	2200      	movs	r2, #0
 800e064:	601a      	str	r2, [r3, #0]
 800e066:	e00e      	b.n	800e086 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e068:	7bbb      	ldrb	r3, [r7, #14]
 800e06a:	4619      	mov	r1, r3
 800e06c:	6878      	ldr	r0, [r7, #4]
 800e06e:	f001 f903 	bl	800f278 <USBD_LL_IsStallEP>
 800e072:	4603      	mov	r3, r0
 800e074:	2b00      	cmp	r3, #0
 800e076:	d003      	beq.n	800e080 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	2201      	movs	r2, #1
 800e07c:	601a      	str	r2, [r3, #0]
 800e07e:	e002      	b.n	800e086 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e080:	68bb      	ldr	r3, [r7, #8]
 800e082:	2200      	movs	r2, #0
 800e084:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e086:	68bb      	ldr	r3, [r7, #8]
 800e088:	2202      	movs	r2, #2
 800e08a:	4619      	mov	r1, r3
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f000 fc07 	bl	800e8a0 <USBD_CtlSendData>
              break;
 800e092:	e004      	b.n	800e09e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e094:	6839      	ldr	r1, [r7, #0]
 800e096:	6878      	ldr	r0, [r7, #4]
 800e098:	f000 fb85 	bl	800e7a6 <USBD_CtlError>
              break;
 800e09c:	bf00      	nop
          }
          break;
 800e09e:	e004      	b.n	800e0aa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e0a0:	6839      	ldr	r1, [r7, #0]
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f000 fb7f 	bl	800e7a6 <USBD_CtlError>
          break;
 800e0a8:	bf00      	nop
      }
      break;
 800e0aa:	e005      	b.n	800e0b8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e0ac:	6839      	ldr	r1, [r7, #0]
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f000 fb79 	bl	800e7a6 <USBD_CtlError>
      break;
 800e0b4:	e000      	b.n	800e0b8 <USBD_StdEPReq+0x330>
      break;
 800e0b6:	bf00      	nop
  }

  return ret;
 800e0b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	3710      	adds	r7, #16
 800e0be:	46bd      	mov	sp, r7
 800e0c0:	bd80      	pop	{r7, pc}
	...

0800e0c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b084      	sub	sp, #16
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
 800e0cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e0ce:	2300      	movs	r3, #0
 800e0d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	885b      	ldrh	r3, [r3, #2]
 800e0de:	0a1b      	lsrs	r3, r3, #8
 800e0e0:	b29b      	uxth	r3, r3
 800e0e2:	3b01      	subs	r3, #1
 800e0e4:	2b0e      	cmp	r3, #14
 800e0e6:	f200 8152 	bhi.w	800e38e <USBD_GetDescriptor+0x2ca>
 800e0ea:	a201      	add	r2, pc, #4	@ (adr r2, 800e0f0 <USBD_GetDescriptor+0x2c>)
 800e0ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0f0:	0800e161 	.word	0x0800e161
 800e0f4:	0800e179 	.word	0x0800e179
 800e0f8:	0800e1b9 	.word	0x0800e1b9
 800e0fc:	0800e38f 	.word	0x0800e38f
 800e100:	0800e38f 	.word	0x0800e38f
 800e104:	0800e32f 	.word	0x0800e32f
 800e108:	0800e35b 	.word	0x0800e35b
 800e10c:	0800e38f 	.word	0x0800e38f
 800e110:	0800e38f 	.word	0x0800e38f
 800e114:	0800e38f 	.word	0x0800e38f
 800e118:	0800e38f 	.word	0x0800e38f
 800e11c:	0800e38f 	.word	0x0800e38f
 800e120:	0800e38f 	.word	0x0800e38f
 800e124:	0800e38f 	.word	0x0800e38f
 800e128:	0800e12d 	.word	0x0800e12d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e132:	69db      	ldr	r3, [r3, #28]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d00b      	beq.n	800e150 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e13e:	69db      	ldr	r3, [r3, #28]
 800e140:	687a      	ldr	r2, [r7, #4]
 800e142:	7c12      	ldrb	r2, [r2, #16]
 800e144:	f107 0108 	add.w	r1, r7, #8
 800e148:	4610      	mov	r0, r2
 800e14a:	4798      	blx	r3
 800e14c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e14e:	e126      	b.n	800e39e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e150:	6839      	ldr	r1, [r7, #0]
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f000 fb27 	bl	800e7a6 <USBD_CtlError>
        err++;
 800e158:	7afb      	ldrb	r3, [r7, #11]
 800e15a:	3301      	adds	r3, #1
 800e15c:	72fb      	strb	r3, [r7, #11]
      break;
 800e15e:	e11e      	b.n	800e39e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	687a      	ldr	r2, [r7, #4]
 800e16a:	7c12      	ldrb	r2, [r2, #16]
 800e16c:	f107 0108 	add.w	r1, r7, #8
 800e170:	4610      	mov	r0, r2
 800e172:	4798      	blx	r3
 800e174:	60f8      	str	r0, [r7, #12]
      break;
 800e176:	e112      	b.n	800e39e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	7c1b      	ldrb	r3, [r3, #16]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d10d      	bne.n	800e19c <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e188:	f107 0208 	add.w	r2, r7, #8
 800e18c:	4610      	mov	r0, r2
 800e18e:	4798      	blx	r3
 800e190:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	3301      	adds	r3, #1
 800e196:	2202      	movs	r2, #2
 800e198:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e19a:	e100      	b.n	800e39e <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e1a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1a4:	f107 0208 	add.w	r2, r7, #8
 800e1a8:	4610      	mov	r0, r2
 800e1aa:	4798      	blx	r3
 800e1ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	2202      	movs	r2, #2
 800e1b4:	701a      	strb	r2, [r3, #0]
      break;
 800e1b6:	e0f2      	b.n	800e39e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	885b      	ldrh	r3, [r3, #2]
 800e1bc:	b2db      	uxtb	r3, r3
 800e1be:	2b05      	cmp	r3, #5
 800e1c0:	f200 80ac 	bhi.w	800e31c <USBD_GetDescriptor+0x258>
 800e1c4:	a201      	add	r2, pc, #4	@ (adr r2, 800e1cc <USBD_GetDescriptor+0x108>)
 800e1c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1ca:	bf00      	nop
 800e1cc:	0800e1e5 	.word	0x0800e1e5
 800e1d0:	0800e219 	.word	0x0800e219
 800e1d4:	0800e24d 	.word	0x0800e24d
 800e1d8:	0800e281 	.word	0x0800e281
 800e1dc:	0800e2b5 	.word	0x0800e2b5
 800e1e0:	0800e2e9 	.word	0x0800e2e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e1ea:	685b      	ldr	r3, [r3, #4]
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d00b      	beq.n	800e208 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e1f6:	685b      	ldr	r3, [r3, #4]
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	7c12      	ldrb	r2, [r2, #16]
 800e1fc:	f107 0108 	add.w	r1, r7, #8
 800e200:	4610      	mov	r0, r2
 800e202:	4798      	blx	r3
 800e204:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e206:	e091      	b.n	800e32c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e208:	6839      	ldr	r1, [r7, #0]
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f000 facb 	bl	800e7a6 <USBD_CtlError>
            err++;
 800e210:	7afb      	ldrb	r3, [r7, #11]
 800e212:	3301      	adds	r3, #1
 800e214:	72fb      	strb	r3, [r7, #11]
          break;
 800e216:	e089      	b.n	800e32c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e21e:	689b      	ldr	r3, [r3, #8]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d00b      	beq.n	800e23c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e22a:	689b      	ldr	r3, [r3, #8]
 800e22c:	687a      	ldr	r2, [r7, #4]
 800e22e:	7c12      	ldrb	r2, [r2, #16]
 800e230:	f107 0108 	add.w	r1, r7, #8
 800e234:	4610      	mov	r0, r2
 800e236:	4798      	blx	r3
 800e238:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e23a:	e077      	b.n	800e32c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e23c:	6839      	ldr	r1, [r7, #0]
 800e23e:	6878      	ldr	r0, [r7, #4]
 800e240:	f000 fab1 	bl	800e7a6 <USBD_CtlError>
            err++;
 800e244:	7afb      	ldrb	r3, [r7, #11]
 800e246:	3301      	adds	r3, #1
 800e248:	72fb      	strb	r3, [r7, #11]
          break;
 800e24a:	e06f      	b.n	800e32c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e252:	68db      	ldr	r3, [r3, #12]
 800e254:	2b00      	cmp	r3, #0
 800e256:	d00b      	beq.n	800e270 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e25e:	68db      	ldr	r3, [r3, #12]
 800e260:	687a      	ldr	r2, [r7, #4]
 800e262:	7c12      	ldrb	r2, [r2, #16]
 800e264:	f107 0108 	add.w	r1, r7, #8
 800e268:	4610      	mov	r0, r2
 800e26a:	4798      	blx	r3
 800e26c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e26e:	e05d      	b.n	800e32c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e270:	6839      	ldr	r1, [r7, #0]
 800e272:	6878      	ldr	r0, [r7, #4]
 800e274:	f000 fa97 	bl	800e7a6 <USBD_CtlError>
            err++;
 800e278:	7afb      	ldrb	r3, [r7, #11]
 800e27a:	3301      	adds	r3, #1
 800e27c:	72fb      	strb	r3, [r7, #11]
          break;
 800e27e:	e055      	b.n	800e32c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e286:	691b      	ldr	r3, [r3, #16]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d00b      	beq.n	800e2a4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e292:	691b      	ldr	r3, [r3, #16]
 800e294:	687a      	ldr	r2, [r7, #4]
 800e296:	7c12      	ldrb	r2, [r2, #16]
 800e298:	f107 0108 	add.w	r1, r7, #8
 800e29c:	4610      	mov	r0, r2
 800e29e:	4798      	blx	r3
 800e2a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2a2:	e043      	b.n	800e32c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e2a4:	6839      	ldr	r1, [r7, #0]
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	f000 fa7d 	bl	800e7a6 <USBD_CtlError>
            err++;
 800e2ac:	7afb      	ldrb	r3, [r7, #11]
 800e2ae:	3301      	adds	r3, #1
 800e2b0:	72fb      	strb	r3, [r7, #11]
          break;
 800e2b2:	e03b      	b.n	800e32c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e2ba:	695b      	ldr	r3, [r3, #20]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d00b      	beq.n	800e2d8 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e2c6:	695b      	ldr	r3, [r3, #20]
 800e2c8:	687a      	ldr	r2, [r7, #4]
 800e2ca:	7c12      	ldrb	r2, [r2, #16]
 800e2cc:	f107 0108 	add.w	r1, r7, #8
 800e2d0:	4610      	mov	r0, r2
 800e2d2:	4798      	blx	r3
 800e2d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e2d6:	e029      	b.n	800e32c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e2d8:	6839      	ldr	r1, [r7, #0]
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f000 fa63 	bl	800e7a6 <USBD_CtlError>
            err++;
 800e2e0:	7afb      	ldrb	r3, [r7, #11]
 800e2e2:	3301      	adds	r3, #1
 800e2e4:	72fb      	strb	r3, [r7, #11]
          break;
 800e2e6:	e021      	b.n	800e32c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e2ee:	699b      	ldr	r3, [r3, #24]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d00b      	beq.n	800e30c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800e2fa:	699b      	ldr	r3, [r3, #24]
 800e2fc:	687a      	ldr	r2, [r7, #4]
 800e2fe:	7c12      	ldrb	r2, [r2, #16]
 800e300:	f107 0108 	add.w	r1, r7, #8
 800e304:	4610      	mov	r0, r2
 800e306:	4798      	blx	r3
 800e308:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e30a:	e00f      	b.n	800e32c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e30c:	6839      	ldr	r1, [r7, #0]
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	f000 fa49 	bl	800e7a6 <USBD_CtlError>
            err++;
 800e314:	7afb      	ldrb	r3, [r7, #11]
 800e316:	3301      	adds	r3, #1
 800e318:	72fb      	strb	r3, [r7, #11]
          break;
 800e31a:	e007      	b.n	800e32c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e31c:	6839      	ldr	r1, [r7, #0]
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f000 fa41 	bl	800e7a6 <USBD_CtlError>
          err++;
 800e324:	7afb      	ldrb	r3, [r7, #11]
 800e326:	3301      	adds	r3, #1
 800e328:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e32a:	bf00      	nop
      }
      break;
 800e32c:	e037      	b.n	800e39e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	7c1b      	ldrb	r3, [r3, #16]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d109      	bne.n	800e34a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e33c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e33e:	f107 0208 	add.w	r2, r7, #8
 800e342:	4610      	mov	r0, r2
 800e344:	4798      	blx	r3
 800e346:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e348:	e029      	b.n	800e39e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e34a:	6839      	ldr	r1, [r7, #0]
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f000 fa2a 	bl	800e7a6 <USBD_CtlError>
        err++;
 800e352:	7afb      	ldrb	r3, [r7, #11]
 800e354:	3301      	adds	r3, #1
 800e356:	72fb      	strb	r3, [r7, #11]
      break;
 800e358:	e021      	b.n	800e39e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	7c1b      	ldrb	r3, [r3, #16]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d10d      	bne.n	800e37e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800e368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e36a:	f107 0208 	add.w	r2, r7, #8
 800e36e:	4610      	mov	r0, r2
 800e370:	4798      	blx	r3
 800e372:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	3301      	adds	r3, #1
 800e378:	2207      	movs	r2, #7
 800e37a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e37c:	e00f      	b.n	800e39e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e37e:	6839      	ldr	r1, [r7, #0]
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f000 fa10 	bl	800e7a6 <USBD_CtlError>
        err++;
 800e386:	7afb      	ldrb	r3, [r7, #11]
 800e388:	3301      	adds	r3, #1
 800e38a:	72fb      	strb	r3, [r7, #11]
      break;
 800e38c:	e007      	b.n	800e39e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e38e:	6839      	ldr	r1, [r7, #0]
 800e390:	6878      	ldr	r0, [r7, #4]
 800e392:	f000 fa08 	bl	800e7a6 <USBD_CtlError>
      err++;
 800e396:	7afb      	ldrb	r3, [r7, #11]
 800e398:	3301      	adds	r3, #1
 800e39a:	72fb      	strb	r3, [r7, #11]
      break;
 800e39c:	bf00      	nop
  }

  if (err != 0U)
 800e39e:	7afb      	ldrb	r3, [r7, #11]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d11e      	bne.n	800e3e2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	88db      	ldrh	r3, [r3, #6]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d016      	beq.n	800e3da <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e3ac:	893b      	ldrh	r3, [r7, #8]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d00e      	beq.n	800e3d0 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e3b2:	683b      	ldr	r3, [r7, #0]
 800e3b4:	88da      	ldrh	r2, [r3, #6]
 800e3b6:	893b      	ldrh	r3, [r7, #8]
 800e3b8:	4293      	cmp	r3, r2
 800e3ba:	bf28      	it	cs
 800e3bc:	4613      	movcs	r3, r2
 800e3be:	b29b      	uxth	r3, r3
 800e3c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e3c2:	893b      	ldrh	r3, [r7, #8]
 800e3c4:	461a      	mov	r2, r3
 800e3c6:	68f9      	ldr	r1, [r7, #12]
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	f000 fa69 	bl	800e8a0 <USBD_CtlSendData>
 800e3ce:	e009      	b.n	800e3e4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e3d0:	6839      	ldr	r1, [r7, #0]
 800e3d2:	6878      	ldr	r0, [r7, #4]
 800e3d4:	f000 f9e7 	bl	800e7a6 <USBD_CtlError>
 800e3d8:	e004      	b.n	800e3e4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f000 faba 	bl	800e954 <USBD_CtlSendStatus>
 800e3e0:	e000      	b.n	800e3e4 <USBD_GetDescriptor+0x320>
    return;
 800e3e2:	bf00      	nop
  }
}
 800e3e4:	3710      	adds	r7, #16
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}
 800e3ea:	bf00      	nop

0800e3ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3ec:	b580      	push	{r7, lr}
 800e3ee:	b084      	sub	sp, #16
 800e3f0:	af00      	add	r7, sp, #0
 800e3f2:	6078      	str	r0, [r7, #4]
 800e3f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e3f6:	683b      	ldr	r3, [r7, #0]
 800e3f8:	889b      	ldrh	r3, [r3, #4]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d131      	bne.n	800e462 <USBD_SetAddress+0x76>
 800e3fe:	683b      	ldr	r3, [r7, #0]
 800e400:	88db      	ldrh	r3, [r3, #6]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d12d      	bne.n	800e462 <USBD_SetAddress+0x76>
 800e406:	683b      	ldr	r3, [r7, #0]
 800e408:	885b      	ldrh	r3, [r3, #2]
 800e40a:	2b7f      	cmp	r3, #127	@ 0x7f
 800e40c:	d829      	bhi.n	800e462 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e40e:	683b      	ldr	r3, [r7, #0]
 800e410:	885b      	ldrh	r3, [r3, #2]
 800e412:	b2db      	uxtb	r3, r3
 800e414:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e418:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e420:	b2db      	uxtb	r3, r3
 800e422:	2b03      	cmp	r3, #3
 800e424:	d104      	bne.n	800e430 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e426:	6839      	ldr	r1, [r7, #0]
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f000 f9bc 	bl	800e7a6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e42e:	e01d      	b.n	800e46c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	7bfa      	ldrb	r2, [r7, #15]
 800e434:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e438:	7bfb      	ldrb	r3, [r7, #15]
 800e43a:	4619      	mov	r1, r3
 800e43c:	6878      	ldr	r0, [r7, #4]
 800e43e:	f000 ff47 	bl	800f2d0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e442:	6878      	ldr	r0, [r7, #4]
 800e444:	f000 fa86 	bl	800e954 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e448:	7bfb      	ldrb	r3, [r7, #15]
 800e44a:	2b00      	cmp	r3, #0
 800e44c:	d004      	beq.n	800e458 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2202      	movs	r2, #2
 800e452:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e456:	e009      	b.n	800e46c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	2201      	movs	r2, #1
 800e45c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e460:	e004      	b.n	800e46c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e462:	6839      	ldr	r1, [r7, #0]
 800e464:	6878      	ldr	r0, [r7, #4]
 800e466:	f000 f99e 	bl	800e7a6 <USBD_CtlError>
  }
}
 800e46a:	bf00      	nop
 800e46c:	bf00      	nop
 800e46e:	3710      	adds	r7, #16
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b084      	sub	sp, #16
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
 800e47c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e47e:	2300      	movs	r3, #0
 800e480:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e482:	683b      	ldr	r3, [r7, #0]
 800e484:	885b      	ldrh	r3, [r3, #2]
 800e486:	b2da      	uxtb	r2, r3
 800e488:	4b4e      	ldr	r3, [pc, #312]	@ (800e5c4 <USBD_SetConfig+0x150>)
 800e48a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e48c:	4b4d      	ldr	r3, [pc, #308]	@ (800e5c4 <USBD_SetConfig+0x150>)
 800e48e:	781b      	ldrb	r3, [r3, #0]
 800e490:	2b01      	cmp	r3, #1
 800e492:	d905      	bls.n	800e4a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e494:	6839      	ldr	r1, [r7, #0]
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f000 f985 	bl	800e7a6 <USBD_CtlError>
    return USBD_FAIL;
 800e49c:	2303      	movs	r3, #3
 800e49e:	e08c      	b.n	800e5ba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e4a6:	b2db      	uxtb	r3, r3
 800e4a8:	2b02      	cmp	r3, #2
 800e4aa:	d002      	beq.n	800e4b2 <USBD_SetConfig+0x3e>
 800e4ac:	2b03      	cmp	r3, #3
 800e4ae:	d029      	beq.n	800e504 <USBD_SetConfig+0x90>
 800e4b0:	e075      	b.n	800e59e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e4b2:	4b44      	ldr	r3, [pc, #272]	@ (800e5c4 <USBD_SetConfig+0x150>)
 800e4b4:	781b      	ldrb	r3, [r3, #0]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d020      	beq.n	800e4fc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e4ba:	4b42      	ldr	r3, [pc, #264]	@ (800e5c4 <USBD_SetConfig+0x150>)
 800e4bc:	781b      	ldrb	r3, [r3, #0]
 800e4be:	461a      	mov	r2, r3
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e4c4:	4b3f      	ldr	r3, [pc, #252]	@ (800e5c4 <USBD_SetConfig+0x150>)
 800e4c6:	781b      	ldrb	r3, [r3, #0]
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f7fe ffb9 	bl	800d442 <USBD_SetClassConfig>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e4d4:	7bfb      	ldrb	r3, [r7, #15]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d008      	beq.n	800e4ec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e4da:	6839      	ldr	r1, [r7, #0]
 800e4dc:	6878      	ldr	r0, [r7, #4]
 800e4de:	f000 f962 	bl	800e7a6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	2202      	movs	r2, #2
 800e4e6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e4ea:	e065      	b.n	800e5b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f000 fa31 	bl	800e954 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	2203      	movs	r2, #3
 800e4f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e4fa:	e05d      	b.n	800e5b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e4fc:	6878      	ldr	r0, [r7, #4]
 800e4fe:	f000 fa29 	bl	800e954 <USBD_CtlSendStatus>
      break;
 800e502:	e059      	b.n	800e5b8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e504:	4b2f      	ldr	r3, [pc, #188]	@ (800e5c4 <USBD_SetConfig+0x150>)
 800e506:	781b      	ldrb	r3, [r3, #0]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d112      	bne.n	800e532 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2202      	movs	r2, #2
 800e510:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800e514:	4b2b      	ldr	r3, [pc, #172]	@ (800e5c4 <USBD_SetConfig+0x150>)
 800e516:	781b      	ldrb	r3, [r3, #0]
 800e518:	461a      	mov	r2, r3
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e51e:	4b29      	ldr	r3, [pc, #164]	@ (800e5c4 <USBD_SetConfig+0x150>)
 800e520:	781b      	ldrb	r3, [r3, #0]
 800e522:	4619      	mov	r1, r3
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f7fe ffa8 	bl	800d47a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e52a:	6878      	ldr	r0, [r7, #4]
 800e52c:	f000 fa12 	bl	800e954 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e530:	e042      	b.n	800e5b8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e532:	4b24      	ldr	r3, [pc, #144]	@ (800e5c4 <USBD_SetConfig+0x150>)
 800e534:	781b      	ldrb	r3, [r3, #0]
 800e536:	461a      	mov	r2, r3
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	685b      	ldr	r3, [r3, #4]
 800e53c:	429a      	cmp	r2, r3
 800e53e:	d02a      	beq.n	800e596 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	685b      	ldr	r3, [r3, #4]
 800e544:	b2db      	uxtb	r3, r3
 800e546:	4619      	mov	r1, r3
 800e548:	6878      	ldr	r0, [r7, #4]
 800e54a:	f7fe ff96 	bl	800d47a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e54e:	4b1d      	ldr	r3, [pc, #116]	@ (800e5c4 <USBD_SetConfig+0x150>)
 800e550:	781b      	ldrb	r3, [r3, #0]
 800e552:	461a      	mov	r2, r3
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e558:	4b1a      	ldr	r3, [pc, #104]	@ (800e5c4 <USBD_SetConfig+0x150>)
 800e55a:	781b      	ldrb	r3, [r3, #0]
 800e55c:	4619      	mov	r1, r3
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	f7fe ff6f 	bl	800d442 <USBD_SetClassConfig>
 800e564:	4603      	mov	r3, r0
 800e566:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e568:	7bfb      	ldrb	r3, [r7, #15]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d00f      	beq.n	800e58e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e56e:	6839      	ldr	r1, [r7, #0]
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f000 f918 	bl	800e7a6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	685b      	ldr	r3, [r3, #4]
 800e57a:	b2db      	uxtb	r3, r3
 800e57c:	4619      	mov	r1, r3
 800e57e:	6878      	ldr	r0, [r7, #4]
 800e580:	f7fe ff7b 	bl	800d47a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2202      	movs	r2, #2
 800e588:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800e58c:	e014      	b.n	800e5b8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e58e:	6878      	ldr	r0, [r7, #4]
 800e590:	f000 f9e0 	bl	800e954 <USBD_CtlSendStatus>
      break;
 800e594:	e010      	b.n	800e5b8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f000 f9dc 	bl	800e954 <USBD_CtlSendStatus>
      break;
 800e59c:	e00c      	b.n	800e5b8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e59e:	6839      	ldr	r1, [r7, #0]
 800e5a0:	6878      	ldr	r0, [r7, #4]
 800e5a2:	f000 f900 	bl	800e7a6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e5a6:	4b07      	ldr	r3, [pc, #28]	@ (800e5c4 <USBD_SetConfig+0x150>)
 800e5a8:	781b      	ldrb	r3, [r3, #0]
 800e5aa:	4619      	mov	r1, r3
 800e5ac:	6878      	ldr	r0, [r7, #4]
 800e5ae:	f7fe ff64 	bl	800d47a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e5b2:	2303      	movs	r3, #3
 800e5b4:	73fb      	strb	r3, [r7, #15]
      break;
 800e5b6:	bf00      	nop
  }

  return ret;
 800e5b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3710      	adds	r7, #16
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}
 800e5c2:	bf00      	nop
 800e5c4:	24000804 	.word	0x24000804

0800e5c8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b082      	sub	sp, #8
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
 800e5d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	88db      	ldrh	r3, [r3, #6]
 800e5d6:	2b01      	cmp	r3, #1
 800e5d8:	d004      	beq.n	800e5e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e5da:	6839      	ldr	r1, [r7, #0]
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	f000 f8e2 	bl	800e7a6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e5e2:	e023      	b.n	800e62c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e5ea:	b2db      	uxtb	r3, r3
 800e5ec:	2b02      	cmp	r3, #2
 800e5ee:	dc02      	bgt.n	800e5f6 <USBD_GetConfig+0x2e>
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	dc03      	bgt.n	800e5fc <USBD_GetConfig+0x34>
 800e5f4:	e015      	b.n	800e622 <USBD_GetConfig+0x5a>
 800e5f6:	2b03      	cmp	r3, #3
 800e5f8:	d00b      	beq.n	800e612 <USBD_GetConfig+0x4a>
 800e5fa:	e012      	b.n	800e622 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	2200      	movs	r2, #0
 800e600:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	3308      	adds	r3, #8
 800e606:	2201      	movs	r2, #1
 800e608:	4619      	mov	r1, r3
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f000 f948 	bl	800e8a0 <USBD_CtlSendData>
        break;
 800e610:	e00c      	b.n	800e62c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	3304      	adds	r3, #4
 800e616:	2201      	movs	r2, #1
 800e618:	4619      	mov	r1, r3
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	f000 f940 	bl	800e8a0 <USBD_CtlSendData>
        break;
 800e620:	e004      	b.n	800e62c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e622:	6839      	ldr	r1, [r7, #0]
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f000 f8be 	bl	800e7a6 <USBD_CtlError>
        break;
 800e62a:	bf00      	nop
}
 800e62c:	bf00      	nop
 800e62e:	3708      	adds	r7, #8
 800e630:	46bd      	mov	sp, r7
 800e632:	bd80      	pop	{r7, pc}

0800e634 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e634:	b580      	push	{r7, lr}
 800e636:	b082      	sub	sp, #8
 800e638:	af00      	add	r7, sp, #0
 800e63a:	6078      	str	r0, [r7, #4]
 800e63c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e644:	b2db      	uxtb	r3, r3
 800e646:	3b01      	subs	r3, #1
 800e648:	2b02      	cmp	r3, #2
 800e64a:	d81e      	bhi.n	800e68a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	88db      	ldrh	r3, [r3, #6]
 800e650:	2b02      	cmp	r3, #2
 800e652:	d004      	beq.n	800e65e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e654:	6839      	ldr	r1, [r7, #0]
 800e656:	6878      	ldr	r0, [r7, #4]
 800e658:	f000 f8a5 	bl	800e7a6 <USBD_CtlError>
        break;
 800e65c:	e01a      	b.n	800e694 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	2201      	movs	r2, #1
 800e662:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d005      	beq.n	800e67a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	68db      	ldr	r3, [r3, #12]
 800e672:	f043 0202 	orr.w	r2, r3, #2
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	330c      	adds	r3, #12
 800e67e:	2202      	movs	r2, #2
 800e680:	4619      	mov	r1, r3
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f000 f90c 	bl	800e8a0 <USBD_CtlSendData>
      break;
 800e688:	e004      	b.n	800e694 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e68a:	6839      	ldr	r1, [r7, #0]
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f000 f88a 	bl	800e7a6 <USBD_CtlError>
      break;
 800e692:	bf00      	nop
  }
}
 800e694:	bf00      	nop
 800e696:	3708      	adds	r7, #8
 800e698:	46bd      	mov	sp, r7
 800e69a:	bd80      	pop	{r7, pc}

0800e69c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b082      	sub	sp, #8
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
 800e6a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	885b      	ldrh	r3, [r3, #2]
 800e6aa:	2b01      	cmp	r3, #1
 800e6ac:	d107      	bne.n	800e6be <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2201      	movs	r2, #1
 800e6b2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f000 f94c 	bl	800e954 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e6bc:	e013      	b.n	800e6e6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e6be:	683b      	ldr	r3, [r7, #0]
 800e6c0:	885b      	ldrh	r3, [r3, #2]
 800e6c2:	2b02      	cmp	r3, #2
 800e6c4:	d10b      	bne.n	800e6de <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e6c6:	683b      	ldr	r3, [r7, #0]
 800e6c8:	889b      	ldrh	r3, [r3, #4]
 800e6ca:	0a1b      	lsrs	r3, r3, #8
 800e6cc:	b29b      	uxth	r3, r3
 800e6ce:	b2da      	uxtb	r2, r3
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f000 f93c 	bl	800e954 <USBD_CtlSendStatus>
}
 800e6dc:	e003      	b.n	800e6e6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e6de:	6839      	ldr	r1, [r7, #0]
 800e6e0:	6878      	ldr	r0, [r7, #4]
 800e6e2:	f000 f860 	bl	800e7a6 <USBD_CtlError>
}
 800e6e6:	bf00      	nop
 800e6e8:	3708      	adds	r7, #8
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}

0800e6ee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6ee:	b580      	push	{r7, lr}
 800e6f0:	b082      	sub	sp, #8
 800e6f2:	af00      	add	r7, sp, #0
 800e6f4:	6078      	str	r0, [r7, #4]
 800e6f6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e6f8:	687b      	ldr	r3, [r7, #4]
 800e6fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800e6fe:	b2db      	uxtb	r3, r3
 800e700:	3b01      	subs	r3, #1
 800e702:	2b02      	cmp	r3, #2
 800e704:	d80b      	bhi.n	800e71e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	885b      	ldrh	r3, [r3, #2]
 800e70a:	2b01      	cmp	r3, #1
 800e70c:	d10c      	bne.n	800e728 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	2200      	movs	r2, #0
 800e712:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e716:	6878      	ldr	r0, [r7, #4]
 800e718:	f000 f91c 	bl	800e954 <USBD_CtlSendStatus>
      }
      break;
 800e71c:	e004      	b.n	800e728 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e71e:	6839      	ldr	r1, [r7, #0]
 800e720:	6878      	ldr	r0, [r7, #4]
 800e722:	f000 f840 	bl	800e7a6 <USBD_CtlError>
      break;
 800e726:	e000      	b.n	800e72a <USBD_ClrFeature+0x3c>
      break;
 800e728:	bf00      	nop
  }
}
 800e72a:	bf00      	nop
 800e72c:	3708      	adds	r7, #8
 800e72e:	46bd      	mov	sp, r7
 800e730:	bd80      	pop	{r7, pc}

0800e732 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e732:	b580      	push	{r7, lr}
 800e734:	b084      	sub	sp, #16
 800e736:	af00      	add	r7, sp, #0
 800e738:	6078      	str	r0, [r7, #4]
 800e73a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	781a      	ldrb	r2, [r3, #0]
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	3301      	adds	r3, #1
 800e74c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	781a      	ldrb	r2, [r3, #0]
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	3301      	adds	r3, #1
 800e75a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e75c:	68f8      	ldr	r0, [r7, #12]
 800e75e:	f7ff fa16 	bl	800db8e <SWAPBYTE>
 800e762:	4603      	mov	r3, r0
 800e764:	461a      	mov	r2, r3
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e76a:	68fb      	ldr	r3, [r7, #12]
 800e76c:	3301      	adds	r3, #1
 800e76e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	3301      	adds	r3, #1
 800e774:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e776:	68f8      	ldr	r0, [r7, #12]
 800e778:	f7ff fa09 	bl	800db8e <SWAPBYTE>
 800e77c:	4603      	mov	r3, r0
 800e77e:	461a      	mov	r2, r3
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	3301      	adds	r3, #1
 800e788:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	3301      	adds	r3, #1
 800e78e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e790:	68f8      	ldr	r0, [r7, #12]
 800e792:	f7ff f9fc 	bl	800db8e <SWAPBYTE>
 800e796:	4603      	mov	r3, r0
 800e798:	461a      	mov	r2, r3
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	80da      	strh	r2, [r3, #6]
}
 800e79e:	bf00      	nop
 800e7a0:	3710      	adds	r7, #16
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}

0800e7a6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7a6:	b580      	push	{r7, lr}
 800e7a8:	b082      	sub	sp, #8
 800e7aa:	af00      	add	r7, sp, #0
 800e7ac:	6078      	str	r0, [r7, #4]
 800e7ae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e7b0:	2180      	movs	r1, #128	@ 0x80
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f000 fd22 	bl	800f1fc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e7b8:	2100      	movs	r1, #0
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f000 fd1e 	bl	800f1fc <USBD_LL_StallEP>
}
 800e7c0:	bf00      	nop
 800e7c2:	3708      	adds	r7, #8
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bd80      	pop	{r7, pc}

0800e7c8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e7c8:	b580      	push	{r7, lr}
 800e7ca:	b086      	sub	sp, #24
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	60f8      	str	r0, [r7, #12]
 800e7d0:	60b9      	str	r1, [r7, #8]
 800e7d2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d042      	beq.n	800e864 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800e7e2:	6938      	ldr	r0, [r7, #16]
 800e7e4:	f000 f842 	bl	800e86c <USBD_GetLen>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	3301      	adds	r3, #1
 800e7ec:	005b      	lsls	r3, r3, #1
 800e7ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e7f2:	d808      	bhi.n	800e806 <USBD_GetString+0x3e>
 800e7f4:	6938      	ldr	r0, [r7, #16]
 800e7f6:	f000 f839 	bl	800e86c <USBD_GetLen>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	3301      	adds	r3, #1
 800e7fe:	b29b      	uxth	r3, r3
 800e800:	005b      	lsls	r3, r3, #1
 800e802:	b29a      	uxth	r2, r3
 800e804:	e001      	b.n	800e80a <USBD_GetString+0x42>
 800e806:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e80e:	7dfb      	ldrb	r3, [r7, #23]
 800e810:	68ba      	ldr	r2, [r7, #8]
 800e812:	4413      	add	r3, r2
 800e814:	687a      	ldr	r2, [r7, #4]
 800e816:	7812      	ldrb	r2, [r2, #0]
 800e818:	701a      	strb	r2, [r3, #0]
  idx++;
 800e81a:	7dfb      	ldrb	r3, [r7, #23]
 800e81c:	3301      	adds	r3, #1
 800e81e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e820:	7dfb      	ldrb	r3, [r7, #23]
 800e822:	68ba      	ldr	r2, [r7, #8]
 800e824:	4413      	add	r3, r2
 800e826:	2203      	movs	r2, #3
 800e828:	701a      	strb	r2, [r3, #0]
  idx++;
 800e82a:	7dfb      	ldrb	r3, [r7, #23]
 800e82c:	3301      	adds	r3, #1
 800e82e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e830:	e013      	b.n	800e85a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800e832:	7dfb      	ldrb	r3, [r7, #23]
 800e834:	68ba      	ldr	r2, [r7, #8]
 800e836:	4413      	add	r3, r2
 800e838:	693a      	ldr	r2, [r7, #16]
 800e83a:	7812      	ldrb	r2, [r2, #0]
 800e83c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e83e:	693b      	ldr	r3, [r7, #16]
 800e840:	3301      	adds	r3, #1
 800e842:	613b      	str	r3, [r7, #16]
    idx++;
 800e844:	7dfb      	ldrb	r3, [r7, #23]
 800e846:	3301      	adds	r3, #1
 800e848:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e84a:	7dfb      	ldrb	r3, [r7, #23]
 800e84c:	68ba      	ldr	r2, [r7, #8]
 800e84e:	4413      	add	r3, r2
 800e850:	2200      	movs	r2, #0
 800e852:	701a      	strb	r2, [r3, #0]
    idx++;
 800e854:	7dfb      	ldrb	r3, [r7, #23]
 800e856:	3301      	adds	r3, #1
 800e858:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e85a:	693b      	ldr	r3, [r7, #16]
 800e85c:	781b      	ldrb	r3, [r3, #0]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d1e7      	bne.n	800e832 <USBD_GetString+0x6a>
 800e862:	e000      	b.n	800e866 <USBD_GetString+0x9e>
    return;
 800e864:	bf00      	nop
  }
}
 800e866:	3718      	adds	r7, #24
 800e868:	46bd      	mov	sp, r7
 800e86a:	bd80      	pop	{r7, pc}

0800e86c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e86c:	b480      	push	{r7}
 800e86e:	b085      	sub	sp, #20
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e874:	2300      	movs	r3, #0
 800e876:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e87c:	e005      	b.n	800e88a <USBD_GetLen+0x1e>
  {
    len++;
 800e87e:	7bfb      	ldrb	r3, [r7, #15]
 800e880:	3301      	adds	r3, #1
 800e882:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	3301      	adds	r3, #1
 800e888:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d1f5      	bne.n	800e87e <USBD_GetLen+0x12>
  }

  return len;
 800e892:	7bfb      	ldrb	r3, [r7, #15]
}
 800e894:	4618      	mov	r0, r3
 800e896:	3714      	adds	r7, #20
 800e898:	46bd      	mov	sp, r7
 800e89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89e:	4770      	bx	lr

0800e8a0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b084      	sub	sp, #16
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	60f8      	str	r0, [r7, #12]
 800e8a8:	60b9      	str	r1, [r7, #8]
 800e8aa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e8ac:	68fb      	ldr	r3, [r7, #12]
 800e8ae:	2202      	movs	r2, #2
 800e8b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800e8b4:	68fb      	ldr	r3, [r7, #12]
 800e8b6:	687a      	ldr	r2, [r7, #4]
 800e8b8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	687a      	ldr	r2, [r7, #4]
 800e8be:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	68ba      	ldr	r2, [r7, #8]
 800e8c4:	2100      	movs	r1, #0
 800e8c6:	68f8      	ldr	r0, [r7, #12]
 800e8c8:	f000 fd21 	bl	800f30e <USBD_LL_Transmit>

  return USBD_OK;
 800e8cc:	2300      	movs	r3, #0
}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	3710      	adds	r7, #16
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}

0800e8d6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e8d6:	b580      	push	{r7, lr}
 800e8d8:	b084      	sub	sp, #16
 800e8da:	af00      	add	r7, sp, #0
 800e8dc:	60f8      	str	r0, [r7, #12]
 800e8de:	60b9      	str	r1, [r7, #8]
 800e8e0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	68ba      	ldr	r2, [r7, #8]
 800e8e6:	2100      	movs	r1, #0
 800e8e8:	68f8      	ldr	r0, [r7, #12]
 800e8ea:	f000 fd10 	bl	800f30e <USBD_LL_Transmit>

  return USBD_OK;
 800e8ee:	2300      	movs	r3, #0
}
 800e8f0:	4618      	mov	r0, r3
 800e8f2:	3710      	adds	r7, #16
 800e8f4:	46bd      	mov	sp, r7
 800e8f6:	bd80      	pop	{r7, pc}

0800e8f8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b084      	sub	sp, #16
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	60f8      	str	r0, [r7, #12]
 800e900:	60b9      	str	r1, [r7, #8]
 800e902:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	2203      	movs	r2, #3
 800e908:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	687a      	ldr	r2, [r7, #4]
 800e910:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	687a      	ldr	r2, [r7, #4]
 800e918:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	68ba      	ldr	r2, [r7, #8]
 800e920:	2100      	movs	r1, #0
 800e922:	68f8      	ldr	r0, [r7, #12]
 800e924:	f000 fd14 	bl	800f350 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e928:	2300      	movs	r3, #0
}
 800e92a:	4618      	mov	r0, r3
 800e92c:	3710      	adds	r7, #16
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}

0800e932 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e932:	b580      	push	{r7, lr}
 800e934:	b084      	sub	sp, #16
 800e936:	af00      	add	r7, sp, #0
 800e938:	60f8      	str	r0, [r7, #12]
 800e93a:	60b9      	str	r1, [r7, #8]
 800e93c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	68ba      	ldr	r2, [r7, #8]
 800e942:	2100      	movs	r1, #0
 800e944:	68f8      	ldr	r0, [r7, #12]
 800e946:	f000 fd03 	bl	800f350 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e94a:	2300      	movs	r3, #0
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	3710      	adds	r7, #16
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}

0800e954 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b082      	sub	sp, #8
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	2204      	movs	r2, #4
 800e960:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e964:	2300      	movs	r3, #0
 800e966:	2200      	movs	r2, #0
 800e968:	2100      	movs	r1, #0
 800e96a:	6878      	ldr	r0, [r7, #4]
 800e96c:	f000 fccf 	bl	800f30e <USBD_LL_Transmit>

  return USBD_OK;
 800e970:	2300      	movs	r3, #0
}
 800e972:	4618      	mov	r0, r3
 800e974:	3708      	adds	r7, #8
 800e976:	46bd      	mov	sp, r7
 800e978:	bd80      	pop	{r7, pc}

0800e97a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e97a:	b580      	push	{r7, lr}
 800e97c:	b082      	sub	sp, #8
 800e97e:	af00      	add	r7, sp, #0
 800e980:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	2205      	movs	r2, #5
 800e986:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e98a:	2300      	movs	r3, #0
 800e98c:	2200      	movs	r2, #0
 800e98e:	2100      	movs	r1, #0
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f000 fcdd 	bl	800f350 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e996:	2300      	movs	r3, #0
}
 800e998:	4618      	mov	r0, r3
 800e99a:	3708      	adds	r7, #8
 800e99c:	46bd      	mov	sp, r7
 800e99e:	bd80      	pop	{r7, pc}

0800e9a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	4913      	ldr	r1, [pc, #76]	@ (800e9f4 <MX_USB_DEVICE_Init+0x54>)
 800e9a8:	4813      	ldr	r0, [pc, #76]	@ (800e9f8 <MX_USB_DEVICE_Init+0x58>)
 800e9aa:	f7fe fccd 	bl	800d348 <USBD_Init>
 800e9ae:	4603      	mov	r3, r0
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d001      	beq.n	800e9b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e9b4:	f7f2 fb4c 	bl	8001050 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e9b8:	4910      	ldr	r1, [pc, #64]	@ (800e9fc <MX_USB_DEVICE_Init+0x5c>)
 800e9ba:	480f      	ldr	r0, [pc, #60]	@ (800e9f8 <MX_USB_DEVICE_Init+0x58>)
 800e9bc:	f7fe fcf4 	bl	800d3a8 <USBD_RegisterClass>
 800e9c0:	4603      	mov	r3, r0
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d001      	beq.n	800e9ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e9c6:	f7f2 fb43 	bl	8001050 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e9ca:	490d      	ldr	r1, [pc, #52]	@ (800ea00 <MX_USB_DEVICE_Init+0x60>)
 800e9cc:	480a      	ldr	r0, [pc, #40]	@ (800e9f8 <MX_USB_DEVICE_Init+0x58>)
 800e9ce:	f7fe fbeb 	bl	800d1a8 <USBD_CDC_RegisterInterface>
 800e9d2:	4603      	mov	r3, r0
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d001      	beq.n	800e9dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e9d8:	f7f2 fb3a 	bl	8001050 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e9dc:	4806      	ldr	r0, [pc, #24]	@ (800e9f8 <MX_USB_DEVICE_Init+0x58>)
 800e9de:	f7fe fd19 	bl	800d414 <USBD_Start>
 800e9e2:	4603      	mov	r3, r0
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d001      	beq.n	800e9ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e9e8:	f7f2 fb32 	bl	8001050 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800e9ec:	f7f7 fa44 	bl	8005e78 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e9f0:	bf00      	nop
 800e9f2:	bd80      	pop	{r7, pc}
 800e9f4:	240000d0 	.word	0x240000d0
 800e9f8:	24000808 	.word	0x24000808
 800e9fc:	2400003c 	.word	0x2400003c
 800ea00:	240000bc 	.word	0x240000bc

0800ea04 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ea04:	b580      	push	{r7, lr}
 800ea06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ea08:	2200      	movs	r2, #0
 800ea0a:	4905      	ldr	r1, [pc, #20]	@ (800ea20 <CDC_Init_FS+0x1c>)
 800ea0c:	4805      	ldr	r0, [pc, #20]	@ (800ea24 <CDC_Init_FS+0x20>)
 800ea0e:	f7fe fbe5 	bl	800d1dc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ea12:	4905      	ldr	r1, [pc, #20]	@ (800ea28 <CDC_Init_FS+0x24>)
 800ea14:	4803      	ldr	r0, [pc, #12]	@ (800ea24 <CDC_Init_FS+0x20>)
 800ea16:	f7fe fc03 	bl	800d220 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ea1a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	bd80      	pop	{r7, pc}
 800ea20:	240012e4 	.word	0x240012e4
 800ea24:	24000808 	.word	0x24000808
 800ea28:	24000ae4 	.word	0x24000ae4

0800ea2c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ea2c:	b480      	push	{r7}
 800ea2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ea30:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	46bd      	mov	sp, r7
 800ea36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3a:	4770      	bx	lr

0800ea3c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ea3c:	b480      	push	{r7}
 800ea3e:	b083      	sub	sp, #12
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	4603      	mov	r3, r0
 800ea44:	6039      	str	r1, [r7, #0]
 800ea46:	71fb      	strb	r3, [r7, #7]
 800ea48:	4613      	mov	r3, r2
 800ea4a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ea4c:	79fb      	ldrb	r3, [r7, #7]
 800ea4e:	2b23      	cmp	r3, #35	@ 0x23
 800ea50:	d84a      	bhi.n	800eae8 <CDC_Control_FS+0xac>
 800ea52:	a201      	add	r2, pc, #4	@ (adr r2, 800ea58 <CDC_Control_FS+0x1c>)
 800ea54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea58:	0800eae9 	.word	0x0800eae9
 800ea5c:	0800eae9 	.word	0x0800eae9
 800ea60:	0800eae9 	.word	0x0800eae9
 800ea64:	0800eae9 	.word	0x0800eae9
 800ea68:	0800eae9 	.word	0x0800eae9
 800ea6c:	0800eae9 	.word	0x0800eae9
 800ea70:	0800eae9 	.word	0x0800eae9
 800ea74:	0800eae9 	.word	0x0800eae9
 800ea78:	0800eae9 	.word	0x0800eae9
 800ea7c:	0800eae9 	.word	0x0800eae9
 800ea80:	0800eae9 	.word	0x0800eae9
 800ea84:	0800eae9 	.word	0x0800eae9
 800ea88:	0800eae9 	.word	0x0800eae9
 800ea8c:	0800eae9 	.word	0x0800eae9
 800ea90:	0800eae9 	.word	0x0800eae9
 800ea94:	0800eae9 	.word	0x0800eae9
 800ea98:	0800eae9 	.word	0x0800eae9
 800ea9c:	0800eae9 	.word	0x0800eae9
 800eaa0:	0800eae9 	.word	0x0800eae9
 800eaa4:	0800eae9 	.word	0x0800eae9
 800eaa8:	0800eae9 	.word	0x0800eae9
 800eaac:	0800eae9 	.word	0x0800eae9
 800eab0:	0800eae9 	.word	0x0800eae9
 800eab4:	0800eae9 	.word	0x0800eae9
 800eab8:	0800eae9 	.word	0x0800eae9
 800eabc:	0800eae9 	.word	0x0800eae9
 800eac0:	0800eae9 	.word	0x0800eae9
 800eac4:	0800eae9 	.word	0x0800eae9
 800eac8:	0800eae9 	.word	0x0800eae9
 800eacc:	0800eae9 	.word	0x0800eae9
 800ead0:	0800eae9 	.word	0x0800eae9
 800ead4:	0800eae9 	.word	0x0800eae9
 800ead8:	0800eae9 	.word	0x0800eae9
 800eadc:	0800eae9 	.word	0x0800eae9
 800eae0:	0800eae9 	.word	0x0800eae9
 800eae4:	0800eae9 	.word	0x0800eae9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800eae8:	bf00      	nop
  }

  return (USBD_OK);
 800eaea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800eaec:	4618      	mov	r0, r3
 800eaee:	370c      	adds	r7, #12
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf6:	4770      	bx	lr

0800eaf8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b082      	sub	sp, #8
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
 800eb00:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800eb02:	6879      	ldr	r1, [r7, #4]
 800eb04:	4805      	ldr	r0, [pc, #20]	@ (800eb1c <CDC_Receive_FS+0x24>)
 800eb06:	f7fe fb8b 	bl	800d220 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800eb0a:	4804      	ldr	r0, [pc, #16]	@ (800eb1c <CDC_Receive_FS+0x24>)
 800eb0c:	f7fe fbe6 	bl	800d2dc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800eb10:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800eb12:	4618      	mov	r0, r3
 800eb14:	3708      	adds	r7, #8
 800eb16:	46bd      	mov	sp, r7
 800eb18:	bd80      	pop	{r7, pc}
 800eb1a:	bf00      	nop
 800eb1c:	24000808 	.word	0x24000808

0800eb20 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b084      	sub	sp, #16
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
 800eb28:	460b      	mov	r3, r1
 800eb2a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800eb2c:	2300      	movs	r3, #0
 800eb2e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800eb30:	4b0d      	ldr	r3, [pc, #52]	@ (800eb68 <CDC_Transmit_FS+0x48>)
 800eb32:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800eb36:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d001      	beq.n	800eb46 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800eb42:	2301      	movs	r3, #1
 800eb44:	e00b      	b.n	800eb5e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800eb46:	887b      	ldrh	r3, [r7, #2]
 800eb48:	461a      	mov	r2, r3
 800eb4a:	6879      	ldr	r1, [r7, #4]
 800eb4c:	4806      	ldr	r0, [pc, #24]	@ (800eb68 <CDC_Transmit_FS+0x48>)
 800eb4e:	f7fe fb45 	bl	800d1dc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800eb52:	4805      	ldr	r0, [pc, #20]	@ (800eb68 <CDC_Transmit_FS+0x48>)
 800eb54:	f7fe fb82 	bl	800d25c <USBD_CDC_TransmitPacket>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800eb5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb5e:	4618      	mov	r0, r3
 800eb60:	3710      	adds	r7, #16
 800eb62:	46bd      	mov	sp, r7
 800eb64:	bd80      	pop	{r7, pc}
 800eb66:	bf00      	nop
 800eb68:	24000808 	.word	0x24000808

0800eb6c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800eb6c:	b480      	push	{r7}
 800eb6e:	b087      	sub	sp, #28
 800eb70:	af00      	add	r7, sp, #0
 800eb72:	60f8      	str	r0, [r7, #12]
 800eb74:	60b9      	str	r1, [r7, #8]
 800eb76:	4613      	mov	r3, r2
 800eb78:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800eb7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	371c      	adds	r7, #28
 800eb86:	46bd      	mov	sp, r7
 800eb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb8c:	4770      	bx	lr
	...

0800eb90 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb90:	b480      	push	{r7}
 800eb92:	b083      	sub	sp, #12
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	4603      	mov	r3, r0
 800eb98:	6039      	str	r1, [r7, #0]
 800eb9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800eb9c:	683b      	ldr	r3, [r7, #0]
 800eb9e:	2212      	movs	r2, #18
 800eba0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800eba2:	4b03      	ldr	r3, [pc, #12]	@ (800ebb0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800eba4:	4618      	mov	r0, r3
 800eba6:	370c      	adds	r7, #12
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebae:	4770      	bx	lr
 800ebb0:	240000f0 	.word	0x240000f0

0800ebb4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebb4:	b480      	push	{r7}
 800ebb6:	b083      	sub	sp, #12
 800ebb8:	af00      	add	r7, sp, #0
 800ebba:	4603      	mov	r3, r0
 800ebbc:	6039      	str	r1, [r7, #0]
 800ebbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	2204      	movs	r2, #4
 800ebc4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ebc6:	4b03      	ldr	r3, [pc, #12]	@ (800ebd4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ebc8:	4618      	mov	r0, r3
 800ebca:	370c      	adds	r7, #12
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd2:	4770      	bx	lr
 800ebd4:	24000104 	.word	0x24000104

0800ebd8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebd8:	b580      	push	{r7, lr}
 800ebda:	b082      	sub	sp, #8
 800ebdc:	af00      	add	r7, sp, #0
 800ebde:	4603      	mov	r3, r0
 800ebe0:	6039      	str	r1, [r7, #0]
 800ebe2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ebe4:	79fb      	ldrb	r3, [r7, #7]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d105      	bne.n	800ebf6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ebea:	683a      	ldr	r2, [r7, #0]
 800ebec:	4907      	ldr	r1, [pc, #28]	@ (800ec0c <USBD_FS_ProductStrDescriptor+0x34>)
 800ebee:	4808      	ldr	r0, [pc, #32]	@ (800ec10 <USBD_FS_ProductStrDescriptor+0x38>)
 800ebf0:	f7ff fdea 	bl	800e7c8 <USBD_GetString>
 800ebf4:	e004      	b.n	800ec00 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ebf6:	683a      	ldr	r2, [r7, #0]
 800ebf8:	4904      	ldr	r1, [pc, #16]	@ (800ec0c <USBD_FS_ProductStrDescriptor+0x34>)
 800ebfa:	4805      	ldr	r0, [pc, #20]	@ (800ec10 <USBD_FS_ProductStrDescriptor+0x38>)
 800ebfc:	f7ff fde4 	bl	800e7c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec00:	4b02      	ldr	r3, [pc, #8]	@ (800ec0c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ec02:	4618      	mov	r0, r3
 800ec04:	3708      	adds	r7, #8
 800ec06:	46bd      	mov	sp, r7
 800ec08:	bd80      	pop	{r7, pc}
 800ec0a:	bf00      	nop
 800ec0c:	24001ae4 	.word	0x24001ae4
 800ec10:	08012064 	.word	0x08012064

0800ec14 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b082      	sub	sp, #8
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	4603      	mov	r3, r0
 800ec1c:	6039      	str	r1, [r7, #0]
 800ec1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ec20:	683a      	ldr	r2, [r7, #0]
 800ec22:	4904      	ldr	r1, [pc, #16]	@ (800ec34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ec24:	4804      	ldr	r0, [pc, #16]	@ (800ec38 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ec26:	f7ff fdcf 	bl	800e7c8 <USBD_GetString>
  return USBD_StrDesc;
 800ec2a:	4b02      	ldr	r3, [pc, #8]	@ (800ec34 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	3708      	adds	r7, #8
 800ec30:	46bd      	mov	sp, r7
 800ec32:	bd80      	pop	{r7, pc}
 800ec34:	24001ae4 	.word	0x24001ae4
 800ec38:	0801207c 	.word	0x0801207c

0800ec3c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b082      	sub	sp, #8
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	4603      	mov	r3, r0
 800ec44:	6039      	str	r1, [r7, #0]
 800ec46:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	221a      	movs	r2, #26
 800ec4c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ec4e:	f000 f843 	bl	800ecd8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ec52:	4b02      	ldr	r3, [pc, #8]	@ (800ec5c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	3708      	adds	r7, #8
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}
 800ec5c:	24000108 	.word	0x24000108

0800ec60 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b082      	sub	sp, #8
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	4603      	mov	r3, r0
 800ec68:	6039      	str	r1, [r7, #0]
 800ec6a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ec6c:	79fb      	ldrb	r3, [r7, #7]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d105      	bne.n	800ec7e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ec72:	683a      	ldr	r2, [r7, #0]
 800ec74:	4907      	ldr	r1, [pc, #28]	@ (800ec94 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ec76:	4808      	ldr	r0, [pc, #32]	@ (800ec98 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ec78:	f7ff fda6 	bl	800e7c8 <USBD_GetString>
 800ec7c:	e004      	b.n	800ec88 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ec7e:	683a      	ldr	r2, [r7, #0]
 800ec80:	4904      	ldr	r1, [pc, #16]	@ (800ec94 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ec82:	4805      	ldr	r0, [pc, #20]	@ (800ec98 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ec84:	f7ff fda0 	bl	800e7c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec88:	4b02      	ldr	r3, [pc, #8]	@ (800ec94 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ec8a:	4618      	mov	r0, r3
 800ec8c:	3708      	adds	r7, #8
 800ec8e:	46bd      	mov	sp, r7
 800ec90:	bd80      	pop	{r7, pc}
 800ec92:	bf00      	nop
 800ec94:	24001ae4 	.word	0x24001ae4
 800ec98:	08012090 	.word	0x08012090

0800ec9c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b082      	sub	sp, #8
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	4603      	mov	r3, r0
 800eca4:	6039      	str	r1, [r7, #0]
 800eca6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eca8:	79fb      	ldrb	r3, [r7, #7]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d105      	bne.n	800ecba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ecae:	683a      	ldr	r2, [r7, #0]
 800ecb0:	4907      	ldr	r1, [pc, #28]	@ (800ecd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ecb2:	4808      	ldr	r0, [pc, #32]	@ (800ecd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ecb4:	f7ff fd88 	bl	800e7c8 <USBD_GetString>
 800ecb8:	e004      	b.n	800ecc4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ecba:	683a      	ldr	r2, [r7, #0]
 800ecbc:	4904      	ldr	r1, [pc, #16]	@ (800ecd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ecbe:	4805      	ldr	r0, [pc, #20]	@ (800ecd4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ecc0:	f7ff fd82 	bl	800e7c8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ecc4:	4b02      	ldr	r3, [pc, #8]	@ (800ecd0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3708      	adds	r7, #8
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}
 800ecce:	bf00      	nop
 800ecd0:	24001ae4 	.word	0x24001ae4
 800ecd4:	0801209c 	.word	0x0801209c

0800ecd8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b084      	sub	sp, #16
 800ecdc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ecde:	4b0f      	ldr	r3, [pc, #60]	@ (800ed1c <Get_SerialNum+0x44>)
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ece4:	4b0e      	ldr	r3, [pc, #56]	@ (800ed20 <Get_SerialNum+0x48>)
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ecea:	4b0e      	ldr	r3, [pc, #56]	@ (800ed24 <Get_SerialNum+0x4c>)
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ecf0:	68fa      	ldr	r2, [r7, #12]
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	4413      	add	r3, r2
 800ecf6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d009      	beq.n	800ed12 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ecfe:	2208      	movs	r2, #8
 800ed00:	4909      	ldr	r1, [pc, #36]	@ (800ed28 <Get_SerialNum+0x50>)
 800ed02:	68f8      	ldr	r0, [r7, #12]
 800ed04:	f000 f814 	bl	800ed30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ed08:	2204      	movs	r2, #4
 800ed0a:	4908      	ldr	r1, [pc, #32]	@ (800ed2c <Get_SerialNum+0x54>)
 800ed0c:	68b8      	ldr	r0, [r7, #8]
 800ed0e:	f000 f80f 	bl	800ed30 <IntToUnicode>
  }
}
 800ed12:	bf00      	nop
 800ed14:	3710      	adds	r7, #16
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bd80      	pop	{r7, pc}
 800ed1a:	bf00      	nop
 800ed1c:	1ff1e800 	.word	0x1ff1e800
 800ed20:	1ff1e804 	.word	0x1ff1e804
 800ed24:	1ff1e808 	.word	0x1ff1e808
 800ed28:	2400010a 	.word	0x2400010a
 800ed2c:	2400011a 	.word	0x2400011a

0800ed30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ed30:	b480      	push	{r7}
 800ed32:	b087      	sub	sp, #28
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	60f8      	str	r0, [r7, #12]
 800ed38:	60b9      	str	r1, [r7, #8]
 800ed3a:	4613      	mov	r3, r2
 800ed3c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ed3e:	2300      	movs	r3, #0
 800ed40:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ed42:	2300      	movs	r3, #0
 800ed44:	75fb      	strb	r3, [r7, #23]
 800ed46:	e027      	b.n	800ed98 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	0f1b      	lsrs	r3, r3, #28
 800ed4c:	2b09      	cmp	r3, #9
 800ed4e:	d80b      	bhi.n	800ed68 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	0f1b      	lsrs	r3, r3, #28
 800ed54:	b2da      	uxtb	r2, r3
 800ed56:	7dfb      	ldrb	r3, [r7, #23]
 800ed58:	005b      	lsls	r3, r3, #1
 800ed5a:	4619      	mov	r1, r3
 800ed5c:	68bb      	ldr	r3, [r7, #8]
 800ed5e:	440b      	add	r3, r1
 800ed60:	3230      	adds	r2, #48	@ 0x30
 800ed62:	b2d2      	uxtb	r2, r2
 800ed64:	701a      	strb	r2, [r3, #0]
 800ed66:	e00a      	b.n	800ed7e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	0f1b      	lsrs	r3, r3, #28
 800ed6c:	b2da      	uxtb	r2, r3
 800ed6e:	7dfb      	ldrb	r3, [r7, #23]
 800ed70:	005b      	lsls	r3, r3, #1
 800ed72:	4619      	mov	r1, r3
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	440b      	add	r3, r1
 800ed78:	3237      	adds	r2, #55	@ 0x37
 800ed7a:	b2d2      	uxtb	r2, r2
 800ed7c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	011b      	lsls	r3, r3, #4
 800ed82:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ed84:	7dfb      	ldrb	r3, [r7, #23]
 800ed86:	005b      	lsls	r3, r3, #1
 800ed88:	3301      	adds	r3, #1
 800ed8a:	68ba      	ldr	r2, [r7, #8]
 800ed8c:	4413      	add	r3, r2
 800ed8e:	2200      	movs	r2, #0
 800ed90:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ed92:	7dfb      	ldrb	r3, [r7, #23]
 800ed94:	3301      	adds	r3, #1
 800ed96:	75fb      	strb	r3, [r7, #23]
 800ed98:	7dfa      	ldrb	r2, [r7, #23]
 800ed9a:	79fb      	ldrb	r3, [r7, #7]
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	d3d3      	bcc.n	800ed48 <IntToUnicode+0x18>
  }
}
 800eda0:	bf00      	nop
 800eda2:	bf00      	nop
 800eda4:	371c      	adds	r7, #28
 800eda6:	46bd      	mov	sp, r7
 800eda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edac:	4770      	bx	lr
	...

0800edb0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b0ba      	sub	sp, #232	@ 0xe8
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800edb8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800edbc:	2200      	movs	r2, #0
 800edbe:	601a      	str	r2, [r3, #0]
 800edc0:	605a      	str	r2, [r3, #4]
 800edc2:	609a      	str	r2, [r3, #8]
 800edc4:	60da      	str	r2, [r3, #12]
 800edc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800edc8:	f107 0310 	add.w	r3, r7, #16
 800edcc:	22c0      	movs	r2, #192	@ 0xc0
 800edce:	2100      	movs	r1, #0
 800edd0:	4618      	mov	r0, r3
 800edd2:	f001 f892 	bl	800fefa <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	4a34      	ldr	r2, [pc, #208]	@ (800eeac <HAL_PCD_MspInit+0xfc>)
 800eddc:	4293      	cmp	r3, r2
 800edde:	d161      	bne.n	800eea4 <HAL_PCD_MspInit+0xf4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ede0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800ede4:	f04f 0300 	mov.w	r3, #0
 800ede8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800edec:	f44f 1340 	mov.w	r3, #3145728	@ 0x300000
 800edf0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800edf4:	f107 0310 	add.w	r3, r7, #16
 800edf8:	4618      	mov	r0, r3
 800edfa:	f7f8 f833 	bl	8006e64 <HAL_RCCEx_PeriphCLKConfig>
 800edfe:	4603      	mov	r3, r0
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d001      	beq.n	800ee08 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800ee04:	f7f2 f924 	bl	8001050 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800ee08:	f7f7 f836 	bl	8005e78 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ee0c:	4b28      	ldr	r3, [pc, #160]	@ (800eeb0 <HAL_PCD_MspInit+0x100>)
 800ee0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ee12:	4a27      	ldr	r2, [pc, #156]	@ (800eeb0 <HAL_PCD_MspInit+0x100>)
 800ee14:	f043 0301 	orr.w	r3, r3, #1
 800ee18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ee1c:	4b24      	ldr	r3, [pc, #144]	@ (800eeb0 <HAL_PCD_MspInit+0x100>)
 800ee1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ee22:	f003 0301 	and.w	r3, r3, #1
 800ee26:	60fb      	str	r3, [r7, #12]
 800ee28:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800ee2a:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 800ee2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee32:	2302      	movs	r3, #2
 800ee34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee38:	2300      	movs	r3, #0
 800ee3a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ee3e:	2300      	movs	r3, #0
 800ee40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800ee44:	230a      	movs	r3, #10
 800ee46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ee4a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800ee4e:	4619      	mov	r1, r3
 800ee50:	4818      	ldr	r0, [pc, #96]	@ (800eeb4 <HAL_PCD_MspInit+0x104>)
 800ee52:	f7f5 fb07 	bl	8004464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800ee56:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ee5a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ee5e:	2300      	movs	r3, #0
 800ee60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee64:	2300      	movs	r3, #0
 800ee66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ee6a:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800ee6e:	4619      	mov	r1, r3
 800ee70:	4810      	ldr	r0, [pc, #64]	@ (800eeb4 <HAL_PCD_MspInit+0x104>)
 800ee72:	f7f5 faf7 	bl	8004464 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ee76:	4b0e      	ldr	r3, [pc, #56]	@ (800eeb0 <HAL_PCD_MspInit+0x100>)
 800ee78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ee7c:	4a0c      	ldr	r2, [pc, #48]	@ (800eeb0 <HAL_PCD_MspInit+0x100>)
 800ee7e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ee82:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800ee86:	4b0a      	ldr	r3, [pc, #40]	@ (800eeb0 <HAL_PCD_MspInit+0x100>)
 800ee88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800ee8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ee90:	60bb      	str	r3, [r7, #8]
 800ee92:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ee94:	2200      	movs	r2, #0
 800ee96:	2100      	movs	r1, #0
 800ee98:	2065      	movs	r0, #101	@ 0x65
 800ee9a:	f7f3 f952 	bl	8002142 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ee9e:	2065      	movs	r0, #101	@ 0x65
 800eea0:	f7f3 f969 	bl	8002176 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800eea4:	bf00      	nop
 800eea6:	37e8      	adds	r7, #232	@ 0xe8
 800eea8:	46bd      	mov	sp, r7
 800eeaa:	bd80      	pop	{r7, pc}
 800eeac:	40080000 	.word	0x40080000
 800eeb0:	58024400 	.word	0x58024400
 800eeb4:	58020000 	.word	0x58020000

0800eeb8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b082      	sub	sp, #8
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800eecc:	4619      	mov	r1, r3
 800eece:	4610      	mov	r0, r2
 800eed0:	f7fe faed 	bl	800d4ae <USBD_LL_SetupStage>
}
 800eed4:	bf00      	nop
 800eed6:	3708      	adds	r7, #8
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bd80      	pop	{r7, pc}

0800eedc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b082      	sub	sp, #8
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
 800eee4:	460b      	mov	r3, r1
 800eee6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800eeee:	78fa      	ldrb	r2, [r7, #3]
 800eef0:	6879      	ldr	r1, [r7, #4]
 800eef2:	4613      	mov	r3, r2
 800eef4:	00db      	lsls	r3, r3, #3
 800eef6:	4413      	add	r3, r2
 800eef8:	009b      	lsls	r3, r3, #2
 800eefa:	440b      	add	r3, r1
 800eefc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ef00:	681a      	ldr	r2, [r3, #0]
 800ef02:	78fb      	ldrb	r3, [r7, #3]
 800ef04:	4619      	mov	r1, r3
 800ef06:	f7fe fb27 	bl	800d558 <USBD_LL_DataOutStage>
}
 800ef0a:	bf00      	nop
 800ef0c:	3708      	adds	r7, #8
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}

0800ef12 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef12:	b580      	push	{r7, lr}
 800ef14:	b082      	sub	sp, #8
 800ef16:	af00      	add	r7, sp, #0
 800ef18:	6078      	str	r0, [r7, #4]
 800ef1a:	460b      	mov	r3, r1
 800ef1c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ef24:	78fa      	ldrb	r2, [r7, #3]
 800ef26:	6879      	ldr	r1, [r7, #4]
 800ef28:	4613      	mov	r3, r2
 800ef2a:	00db      	lsls	r3, r3, #3
 800ef2c:	4413      	add	r3, r2
 800ef2e:	009b      	lsls	r3, r3, #2
 800ef30:	440b      	add	r3, r1
 800ef32:	3320      	adds	r3, #32
 800ef34:	681a      	ldr	r2, [r3, #0]
 800ef36:	78fb      	ldrb	r3, [r7, #3]
 800ef38:	4619      	mov	r1, r3
 800ef3a:	f7fe fbc0 	bl	800d6be <USBD_LL_DataInStage>
}
 800ef3e:	bf00      	nop
 800ef40:	3708      	adds	r7, #8
 800ef42:	46bd      	mov	sp, r7
 800ef44:	bd80      	pop	{r7, pc}

0800ef46 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef46:	b580      	push	{r7, lr}
 800ef48:	b082      	sub	sp, #8
 800ef4a:	af00      	add	r7, sp, #0
 800ef4c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ef54:	4618      	mov	r0, r3
 800ef56:	f7fe fcfa 	bl	800d94e <USBD_LL_SOF>
}
 800ef5a:	bf00      	nop
 800ef5c:	3708      	adds	r7, #8
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}

0800ef62 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef62:	b580      	push	{r7, lr}
 800ef64:	b084      	sub	sp, #16
 800ef66:	af00      	add	r7, sp, #0
 800ef68:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ef6a:	2301      	movs	r3, #1
 800ef6c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	79db      	ldrb	r3, [r3, #7]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d102      	bne.n	800ef7c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800ef76:	2300      	movs	r3, #0
 800ef78:	73fb      	strb	r3, [r7, #15]
 800ef7a:	e008      	b.n	800ef8e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	79db      	ldrb	r3, [r3, #7]
 800ef80:	2b02      	cmp	r3, #2
 800ef82:	d102      	bne.n	800ef8a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800ef84:	2301      	movs	r3, #1
 800ef86:	73fb      	strb	r3, [r7, #15]
 800ef88:	e001      	b.n	800ef8e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800ef8a:	f7f2 f861 	bl	8001050 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ef94:	7bfa      	ldrb	r2, [r7, #15]
 800ef96:	4611      	mov	r1, r2
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f7fe fc94 	bl	800d8c6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800efa4:	4618      	mov	r0, r3
 800efa6:	f7fe fc3c 	bl	800d822 <USBD_LL_Reset>
}
 800efaa:	bf00      	nop
 800efac:	3710      	adds	r7, #16
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}
	...

0800efb4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800efb4:	b580      	push	{r7, lr}
 800efb6:	b082      	sub	sp, #8
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800efc2:	4618      	mov	r0, r3
 800efc4:	f7fe fc8f 	bl	800d8e6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800efc8:	687b      	ldr	r3, [r7, #4]
 800efca:	681b      	ldr	r3, [r3, #0]
 800efcc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	687a      	ldr	r2, [r7, #4]
 800efd4:	6812      	ldr	r2, [r2, #0]
 800efd6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800efda:	f043 0301 	orr.w	r3, r3, #1
 800efde:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	7adb      	ldrb	r3, [r3, #11]
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d005      	beq.n	800eff4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800efe8:	4b04      	ldr	r3, [pc, #16]	@ (800effc <HAL_PCD_SuspendCallback+0x48>)
 800efea:	691b      	ldr	r3, [r3, #16]
 800efec:	4a03      	ldr	r2, [pc, #12]	@ (800effc <HAL_PCD_SuspendCallback+0x48>)
 800efee:	f043 0306 	orr.w	r3, r3, #6
 800eff2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800eff4:	bf00      	nop
 800eff6:	3708      	adds	r7, #8
 800eff8:	46bd      	mov	sp, r7
 800effa:	bd80      	pop	{r7, pc}
 800effc:	e000ed00 	.word	0xe000ed00

0800f000 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f000:	b580      	push	{r7, lr}
 800f002:	b082      	sub	sp, #8
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f00e:	4618      	mov	r0, r3
 800f010:	f7fe fc85 	bl	800d91e <USBD_LL_Resume>
}
 800f014:	bf00      	nop
 800f016:	3708      	adds	r7, #8
 800f018:	46bd      	mov	sp, r7
 800f01a:	bd80      	pop	{r7, pc}

0800f01c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f01c:	b580      	push	{r7, lr}
 800f01e:	b082      	sub	sp, #8
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
 800f024:	460b      	mov	r3, r1
 800f026:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f02e:	78fa      	ldrb	r2, [r7, #3]
 800f030:	4611      	mov	r1, r2
 800f032:	4618      	mov	r0, r3
 800f034:	f7fe fcdd 	bl	800d9f2 <USBD_LL_IsoOUTIncomplete>
}
 800f038:	bf00      	nop
 800f03a:	3708      	adds	r7, #8
 800f03c:	46bd      	mov	sp, r7
 800f03e:	bd80      	pop	{r7, pc}

0800f040 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f040:	b580      	push	{r7, lr}
 800f042:	b082      	sub	sp, #8
 800f044:	af00      	add	r7, sp, #0
 800f046:	6078      	str	r0, [r7, #4]
 800f048:	460b      	mov	r3, r1
 800f04a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f052:	78fa      	ldrb	r2, [r7, #3]
 800f054:	4611      	mov	r1, r2
 800f056:	4618      	mov	r0, r3
 800f058:	f7fe fc99 	bl	800d98e <USBD_LL_IsoINIncomplete>
}
 800f05c:	bf00      	nop
 800f05e:	3708      	adds	r7, #8
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}

0800f064 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b082      	sub	sp, #8
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f072:	4618      	mov	r0, r3
 800f074:	f7fe fcef 	bl	800da56 <USBD_LL_DevConnected>
}
 800f078:	bf00      	nop
 800f07a:	3708      	adds	r7, #8
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}

0800f080 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f080:	b580      	push	{r7, lr}
 800f082:	b082      	sub	sp, #8
 800f084:	af00      	add	r7, sp, #0
 800f086:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f08e:	4618      	mov	r0, r3
 800f090:	f7fe fcec 	bl	800da6c <USBD_LL_DevDisconnected>
}
 800f094:	bf00      	nop
 800f096:	3708      	adds	r7, #8
 800f098:	46bd      	mov	sp, r7
 800f09a:	bd80      	pop	{r7, pc}

0800f09c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b082      	sub	sp, #8
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	781b      	ldrb	r3, [r3, #0]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d13e      	bne.n	800f12a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f0ac:	4a21      	ldr	r2, [pc, #132]	@ (800f134 <USBD_LL_Init+0x98>)
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	4a1f      	ldr	r2, [pc, #124]	@ (800f134 <USBD_LL_Init+0x98>)
 800f0b8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f0bc:	4b1d      	ldr	r3, [pc, #116]	@ (800f134 <USBD_LL_Init+0x98>)
 800f0be:	4a1e      	ldr	r2, [pc, #120]	@ (800f138 <USBD_LL_Init+0x9c>)
 800f0c0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800f0c2:	4b1c      	ldr	r3, [pc, #112]	@ (800f134 <USBD_LL_Init+0x98>)
 800f0c4:	2209      	movs	r2, #9
 800f0c6:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f0c8:	4b1a      	ldr	r3, [pc, #104]	@ (800f134 <USBD_LL_Init+0x98>)
 800f0ca:	2202      	movs	r2, #2
 800f0cc:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f0ce:	4b19      	ldr	r3, [pc, #100]	@ (800f134 <USBD_LL_Init+0x98>)
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f0d4:	4b17      	ldr	r3, [pc, #92]	@ (800f134 <USBD_LL_Init+0x98>)
 800f0d6:	2202      	movs	r2, #2
 800f0d8:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800f0da:	4b16      	ldr	r3, [pc, #88]	@ (800f134 <USBD_LL_Init+0x98>)
 800f0dc:	2201      	movs	r2, #1
 800f0de:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f0e0:	4b14      	ldr	r3, [pc, #80]	@ (800f134 <USBD_LL_Init+0x98>)
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f0e6:	4b13      	ldr	r3, [pc, #76]	@ (800f134 <USBD_LL_Init+0x98>)
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800f0ec:	4b11      	ldr	r3, [pc, #68]	@ (800f134 <USBD_LL_Init+0x98>)
 800f0ee:	2201      	movs	r2, #1
 800f0f0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800f0f2:	4b10      	ldr	r3, [pc, #64]	@ (800f134 <USBD_LL_Init+0x98>)
 800f0f4:	2201      	movs	r2, #1
 800f0f6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f0f8:	4b0e      	ldr	r3, [pc, #56]	@ (800f134 <USBD_LL_Init+0x98>)
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f0fe:	480d      	ldr	r0, [pc, #52]	@ (800f134 <USBD_LL_Init+0x98>)
 800f100:	f7f5 fbc2 	bl	8004888 <HAL_PCD_Init>
 800f104:	4603      	mov	r3, r0
 800f106:	2b00      	cmp	r3, #0
 800f108:	d001      	beq.n	800f10e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800f10a:	f7f1 ffa1 	bl	8001050 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f10e:	2180      	movs	r1, #128	@ 0x80
 800f110:	4808      	ldr	r0, [pc, #32]	@ (800f134 <USBD_LL_Init+0x98>)
 800f112:	f7f6 fe16 	bl	8005d42 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f116:	2240      	movs	r2, #64	@ 0x40
 800f118:	2100      	movs	r1, #0
 800f11a:	4806      	ldr	r0, [pc, #24]	@ (800f134 <USBD_LL_Init+0x98>)
 800f11c:	f7f6 fdca 	bl	8005cb4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f120:	2280      	movs	r2, #128	@ 0x80
 800f122:	2101      	movs	r1, #1
 800f124:	4803      	ldr	r0, [pc, #12]	@ (800f134 <USBD_LL_Init+0x98>)
 800f126:	f7f6 fdc5 	bl	8005cb4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800f12a:	2300      	movs	r3, #0
}
 800f12c:	4618      	mov	r0, r3
 800f12e:	3708      	adds	r7, #8
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}
 800f134:	24001ce4 	.word	0x24001ce4
 800f138:	40080000 	.word	0x40080000

0800f13c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b084      	sub	sp, #16
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f144:	2300      	movs	r3, #0
 800f146:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f148:	2300      	movs	r3, #0
 800f14a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f152:	4618      	mov	r0, r3
 800f154:	f7f5 fca4 	bl	8004aa0 <HAL_PCD_Start>
 800f158:	4603      	mov	r3, r0
 800f15a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f15c:	7bfb      	ldrb	r3, [r7, #15]
 800f15e:	4618      	mov	r0, r3
 800f160:	f000 f942 	bl	800f3e8 <USBD_Get_USB_Status>
 800f164:	4603      	mov	r3, r0
 800f166:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f168:	7bbb      	ldrb	r3, [r7, #14]
}
 800f16a:	4618      	mov	r0, r3
 800f16c:	3710      	adds	r7, #16
 800f16e:	46bd      	mov	sp, r7
 800f170:	bd80      	pop	{r7, pc}

0800f172 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f172:	b580      	push	{r7, lr}
 800f174:	b084      	sub	sp, #16
 800f176:	af00      	add	r7, sp, #0
 800f178:	6078      	str	r0, [r7, #4]
 800f17a:	4608      	mov	r0, r1
 800f17c:	4611      	mov	r1, r2
 800f17e:	461a      	mov	r2, r3
 800f180:	4603      	mov	r3, r0
 800f182:	70fb      	strb	r3, [r7, #3]
 800f184:	460b      	mov	r3, r1
 800f186:	70bb      	strb	r3, [r7, #2]
 800f188:	4613      	mov	r3, r2
 800f18a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f18c:	2300      	movs	r3, #0
 800f18e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f190:	2300      	movs	r3, #0
 800f192:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f19a:	78bb      	ldrb	r3, [r7, #2]
 800f19c:	883a      	ldrh	r2, [r7, #0]
 800f19e:	78f9      	ldrb	r1, [r7, #3]
 800f1a0:	f7f6 f9a5 	bl	80054ee <HAL_PCD_EP_Open>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1a8:	7bfb      	ldrb	r3, [r7, #15]
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f000 f91c 	bl	800f3e8 <USBD_Get_USB_Status>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3710      	adds	r7, #16
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}

0800f1be <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f1be:	b580      	push	{r7, lr}
 800f1c0:	b084      	sub	sp, #16
 800f1c2:	af00      	add	r7, sp, #0
 800f1c4:	6078      	str	r0, [r7, #4]
 800f1c6:	460b      	mov	r3, r1
 800f1c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1ce:	2300      	movs	r3, #0
 800f1d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f1d8:	78fa      	ldrb	r2, [r7, #3]
 800f1da:	4611      	mov	r1, r2
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f7f6 f9ee 	bl	80055be <HAL_PCD_EP_Close>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1e6:	7bfb      	ldrb	r3, [r7, #15]
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f000 f8fd 	bl	800f3e8 <USBD_Get_USB_Status>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	3710      	adds	r7, #16
 800f1f8:	46bd      	mov	sp, r7
 800f1fa:	bd80      	pop	{r7, pc}

0800f1fc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f1fc:	b580      	push	{r7, lr}
 800f1fe:	b084      	sub	sp, #16
 800f200:	af00      	add	r7, sp, #0
 800f202:	6078      	str	r0, [r7, #4]
 800f204:	460b      	mov	r3, r1
 800f206:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f208:	2300      	movs	r3, #0
 800f20a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f20c:	2300      	movs	r3, #0
 800f20e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f210:	687b      	ldr	r3, [r7, #4]
 800f212:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f216:	78fa      	ldrb	r2, [r7, #3]
 800f218:	4611      	mov	r1, r2
 800f21a:	4618      	mov	r0, r3
 800f21c:	f7f6 faa6 	bl	800576c <HAL_PCD_EP_SetStall>
 800f220:	4603      	mov	r3, r0
 800f222:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f224:	7bfb      	ldrb	r3, [r7, #15]
 800f226:	4618      	mov	r0, r3
 800f228:	f000 f8de 	bl	800f3e8 <USBD_Get_USB_Status>
 800f22c:	4603      	mov	r3, r0
 800f22e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f230:	7bbb      	ldrb	r3, [r7, #14]
}
 800f232:	4618      	mov	r0, r3
 800f234:	3710      	adds	r7, #16
 800f236:	46bd      	mov	sp, r7
 800f238:	bd80      	pop	{r7, pc}

0800f23a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f23a:	b580      	push	{r7, lr}
 800f23c:	b084      	sub	sp, #16
 800f23e:	af00      	add	r7, sp, #0
 800f240:	6078      	str	r0, [r7, #4]
 800f242:	460b      	mov	r3, r1
 800f244:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f246:	2300      	movs	r3, #0
 800f248:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f24a:	2300      	movs	r3, #0
 800f24c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f254:	78fa      	ldrb	r2, [r7, #3]
 800f256:	4611      	mov	r1, r2
 800f258:	4618      	mov	r0, r3
 800f25a:	f7f6 faea 	bl	8005832 <HAL_PCD_EP_ClrStall>
 800f25e:	4603      	mov	r3, r0
 800f260:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f262:	7bfb      	ldrb	r3, [r7, #15]
 800f264:	4618      	mov	r0, r3
 800f266:	f000 f8bf 	bl	800f3e8 <USBD_Get_USB_Status>
 800f26a:	4603      	mov	r3, r0
 800f26c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f26e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f270:	4618      	mov	r0, r3
 800f272:	3710      	adds	r7, #16
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}

0800f278 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f278:	b480      	push	{r7}
 800f27a:	b085      	sub	sp, #20
 800f27c:	af00      	add	r7, sp, #0
 800f27e:	6078      	str	r0, [r7, #4]
 800f280:	460b      	mov	r3, r1
 800f282:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f28a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f28c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f290:	2b00      	cmp	r3, #0
 800f292:	da0b      	bge.n	800f2ac <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f294:	78fb      	ldrb	r3, [r7, #3]
 800f296:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f29a:	68f9      	ldr	r1, [r7, #12]
 800f29c:	4613      	mov	r3, r2
 800f29e:	00db      	lsls	r3, r3, #3
 800f2a0:	4413      	add	r3, r2
 800f2a2:	009b      	lsls	r3, r3, #2
 800f2a4:	440b      	add	r3, r1
 800f2a6:	3316      	adds	r3, #22
 800f2a8:	781b      	ldrb	r3, [r3, #0]
 800f2aa:	e00b      	b.n	800f2c4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f2ac:	78fb      	ldrb	r3, [r7, #3]
 800f2ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f2b2:	68f9      	ldr	r1, [r7, #12]
 800f2b4:	4613      	mov	r3, r2
 800f2b6:	00db      	lsls	r3, r3, #3
 800f2b8:	4413      	add	r3, r2
 800f2ba:	009b      	lsls	r3, r3, #2
 800f2bc:	440b      	add	r3, r1
 800f2be:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f2c2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f2c4:	4618      	mov	r0, r3
 800f2c6:	3714      	adds	r7, #20
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ce:	4770      	bx	lr

0800f2d0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f2d0:	b580      	push	{r7, lr}
 800f2d2:	b084      	sub	sp, #16
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	460b      	mov	r3, r1
 800f2da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f2dc:	2300      	movs	r3, #0
 800f2de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2e0:	2300      	movs	r3, #0
 800f2e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f2ea:	78fa      	ldrb	r2, [r7, #3]
 800f2ec:	4611      	mov	r1, r2
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	f7f6 f8d9 	bl	80054a6 <HAL_PCD_SetAddress>
 800f2f4:	4603      	mov	r3, r0
 800f2f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f2f8:	7bfb      	ldrb	r3, [r7, #15]
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f000 f874 	bl	800f3e8 <USBD_Get_USB_Status>
 800f300:	4603      	mov	r3, r0
 800f302:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f304:	7bbb      	ldrb	r3, [r7, #14]
}
 800f306:	4618      	mov	r0, r3
 800f308:	3710      	adds	r7, #16
 800f30a:	46bd      	mov	sp, r7
 800f30c:	bd80      	pop	{r7, pc}

0800f30e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f30e:	b580      	push	{r7, lr}
 800f310:	b086      	sub	sp, #24
 800f312:	af00      	add	r7, sp, #0
 800f314:	60f8      	str	r0, [r7, #12]
 800f316:	607a      	str	r2, [r7, #4]
 800f318:	603b      	str	r3, [r7, #0]
 800f31a:	460b      	mov	r3, r1
 800f31c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f31e:	2300      	movs	r3, #0
 800f320:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f322:	2300      	movs	r3, #0
 800f324:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f32c:	7af9      	ldrb	r1, [r7, #11]
 800f32e:	683b      	ldr	r3, [r7, #0]
 800f330:	687a      	ldr	r2, [r7, #4]
 800f332:	f7f6 f9e1 	bl	80056f8 <HAL_PCD_EP_Transmit>
 800f336:	4603      	mov	r3, r0
 800f338:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f33a:	7dfb      	ldrb	r3, [r7, #23]
 800f33c:	4618      	mov	r0, r3
 800f33e:	f000 f853 	bl	800f3e8 <USBD_Get_USB_Status>
 800f342:	4603      	mov	r3, r0
 800f344:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f346:	7dbb      	ldrb	r3, [r7, #22]
}
 800f348:	4618      	mov	r0, r3
 800f34a:	3718      	adds	r7, #24
 800f34c:	46bd      	mov	sp, r7
 800f34e:	bd80      	pop	{r7, pc}

0800f350 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b086      	sub	sp, #24
 800f354:	af00      	add	r7, sp, #0
 800f356:	60f8      	str	r0, [r7, #12]
 800f358:	607a      	str	r2, [r7, #4]
 800f35a:	603b      	str	r3, [r7, #0]
 800f35c:	460b      	mov	r3, r1
 800f35e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f360:	2300      	movs	r3, #0
 800f362:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f364:	2300      	movs	r3, #0
 800f366:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f36e:	7af9      	ldrb	r1, [r7, #11]
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	687a      	ldr	r2, [r7, #4]
 800f374:	f7f6 f96d 	bl	8005652 <HAL_PCD_EP_Receive>
 800f378:	4603      	mov	r3, r0
 800f37a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f37c:	7dfb      	ldrb	r3, [r7, #23]
 800f37e:	4618      	mov	r0, r3
 800f380:	f000 f832 	bl	800f3e8 <USBD_Get_USB_Status>
 800f384:	4603      	mov	r3, r0
 800f386:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f388:	7dbb      	ldrb	r3, [r7, #22]
}
 800f38a:	4618      	mov	r0, r3
 800f38c:	3718      	adds	r7, #24
 800f38e:	46bd      	mov	sp, r7
 800f390:	bd80      	pop	{r7, pc}

0800f392 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f392:	b580      	push	{r7, lr}
 800f394:	b082      	sub	sp, #8
 800f396:	af00      	add	r7, sp, #0
 800f398:	6078      	str	r0, [r7, #4]
 800f39a:	460b      	mov	r3, r1
 800f39c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f3a4:	78fa      	ldrb	r2, [r7, #3]
 800f3a6:	4611      	mov	r1, r2
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	f7f6 f98d 	bl	80056c8 <HAL_PCD_EP_GetRxCount>
 800f3ae:	4603      	mov	r3, r0
}
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	3708      	adds	r7, #8
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bd80      	pop	{r7, pc}

0800f3b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f3b8:	b480      	push	{r7}
 800f3ba:	b083      	sub	sp, #12
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f3c0:	4b03      	ldr	r3, [pc, #12]	@ (800f3d0 <USBD_static_malloc+0x18>)
}
 800f3c2:	4618      	mov	r0, r3
 800f3c4:	370c      	adds	r7, #12
 800f3c6:	46bd      	mov	sp, r7
 800f3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3cc:	4770      	bx	lr
 800f3ce:	bf00      	nop
 800f3d0:	240021c8 	.word	0x240021c8

0800f3d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f3d4:	b480      	push	{r7}
 800f3d6:	b083      	sub	sp, #12
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800f3dc:	bf00      	nop
 800f3de:	370c      	adds	r7, #12
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e6:	4770      	bx	lr

0800f3e8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f3e8:	b480      	push	{r7}
 800f3ea:	b085      	sub	sp, #20
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f3f6:	79fb      	ldrb	r3, [r7, #7]
 800f3f8:	2b03      	cmp	r3, #3
 800f3fa:	d817      	bhi.n	800f42c <USBD_Get_USB_Status+0x44>
 800f3fc:	a201      	add	r2, pc, #4	@ (adr r2, 800f404 <USBD_Get_USB_Status+0x1c>)
 800f3fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f402:	bf00      	nop
 800f404:	0800f415 	.word	0x0800f415
 800f408:	0800f41b 	.word	0x0800f41b
 800f40c:	0800f421 	.word	0x0800f421
 800f410:	0800f427 	.word	0x0800f427
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f414:	2300      	movs	r3, #0
 800f416:	73fb      	strb	r3, [r7, #15]
    break;
 800f418:	e00b      	b.n	800f432 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f41a:	2303      	movs	r3, #3
 800f41c:	73fb      	strb	r3, [r7, #15]
    break;
 800f41e:	e008      	b.n	800f432 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f420:	2301      	movs	r3, #1
 800f422:	73fb      	strb	r3, [r7, #15]
    break;
 800f424:	e005      	b.n	800f432 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f426:	2303      	movs	r3, #3
 800f428:	73fb      	strb	r3, [r7, #15]
    break;
 800f42a:	e002      	b.n	800f432 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f42c:	2303      	movs	r3, #3
 800f42e:	73fb      	strb	r3, [r7, #15]
    break;
 800f430:	bf00      	nop
  }
  return usb_status;
 800f432:	7bfb      	ldrb	r3, [r7, #15]
}
 800f434:	4618      	mov	r0, r3
 800f436:	3714      	adds	r7, #20
 800f438:	46bd      	mov	sp, r7
 800f43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f43e:	4770      	bx	lr

0800f440 <__cvt>:
 800f440:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f442:	ed2d 8b02 	vpush	{d8}
 800f446:	eeb0 8b40 	vmov.f64	d8, d0
 800f44a:	b085      	sub	sp, #20
 800f44c:	4617      	mov	r7, r2
 800f44e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800f450:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f452:	ee18 2a90 	vmov	r2, s17
 800f456:	f025 0520 	bic.w	r5, r5, #32
 800f45a:	2a00      	cmp	r2, #0
 800f45c:	bfb6      	itet	lt
 800f45e:	222d      	movlt	r2, #45	@ 0x2d
 800f460:	2200      	movge	r2, #0
 800f462:	eeb1 8b40 	vneglt.f64	d8, d0
 800f466:	2d46      	cmp	r5, #70	@ 0x46
 800f468:	460c      	mov	r4, r1
 800f46a:	701a      	strb	r2, [r3, #0]
 800f46c:	d004      	beq.n	800f478 <__cvt+0x38>
 800f46e:	2d45      	cmp	r5, #69	@ 0x45
 800f470:	d100      	bne.n	800f474 <__cvt+0x34>
 800f472:	3401      	adds	r4, #1
 800f474:	2102      	movs	r1, #2
 800f476:	e000      	b.n	800f47a <__cvt+0x3a>
 800f478:	2103      	movs	r1, #3
 800f47a:	ab03      	add	r3, sp, #12
 800f47c:	9301      	str	r3, [sp, #4]
 800f47e:	ab02      	add	r3, sp, #8
 800f480:	9300      	str	r3, [sp, #0]
 800f482:	4622      	mov	r2, r4
 800f484:	4633      	mov	r3, r6
 800f486:	eeb0 0b48 	vmov.f64	d0, d8
 800f48a:	f000 fe41 	bl	8010110 <_dtoa_r>
 800f48e:	2d47      	cmp	r5, #71	@ 0x47
 800f490:	d114      	bne.n	800f4bc <__cvt+0x7c>
 800f492:	07fb      	lsls	r3, r7, #31
 800f494:	d50a      	bpl.n	800f4ac <__cvt+0x6c>
 800f496:	1902      	adds	r2, r0, r4
 800f498:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f49c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4a0:	bf08      	it	eq
 800f4a2:	9203      	streq	r2, [sp, #12]
 800f4a4:	2130      	movs	r1, #48	@ 0x30
 800f4a6:	9b03      	ldr	r3, [sp, #12]
 800f4a8:	4293      	cmp	r3, r2
 800f4aa:	d319      	bcc.n	800f4e0 <__cvt+0xa0>
 800f4ac:	9b03      	ldr	r3, [sp, #12]
 800f4ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f4b0:	1a1b      	subs	r3, r3, r0
 800f4b2:	6013      	str	r3, [r2, #0]
 800f4b4:	b005      	add	sp, #20
 800f4b6:	ecbd 8b02 	vpop	{d8}
 800f4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f4bc:	2d46      	cmp	r5, #70	@ 0x46
 800f4be:	eb00 0204 	add.w	r2, r0, r4
 800f4c2:	d1e9      	bne.n	800f498 <__cvt+0x58>
 800f4c4:	7803      	ldrb	r3, [r0, #0]
 800f4c6:	2b30      	cmp	r3, #48	@ 0x30
 800f4c8:	d107      	bne.n	800f4da <__cvt+0x9a>
 800f4ca:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800f4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4d2:	bf1c      	itt	ne
 800f4d4:	f1c4 0401 	rsbne	r4, r4, #1
 800f4d8:	6034      	strne	r4, [r6, #0]
 800f4da:	6833      	ldr	r3, [r6, #0]
 800f4dc:	441a      	add	r2, r3
 800f4de:	e7db      	b.n	800f498 <__cvt+0x58>
 800f4e0:	1c5c      	adds	r4, r3, #1
 800f4e2:	9403      	str	r4, [sp, #12]
 800f4e4:	7019      	strb	r1, [r3, #0]
 800f4e6:	e7de      	b.n	800f4a6 <__cvt+0x66>

0800f4e8 <__exponent>:
 800f4e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f4ea:	2900      	cmp	r1, #0
 800f4ec:	bfba      	itte	lt
 800f4ee:	4249      	neglt	r1, r1
 800f4f0:	232d      	movlt	r3, #45	@ 0x2d
 800f4f2:	232b      	movge	r3, #43	@ 0x2b
 800f4f4:	2909      	cmp	r1, #9
 800f4f6:	7002      	strb	r2, [r0, #0]
 800f4f8:	7043      	strb	r3, [r0, #1]
 800f4fa:	dd29      	ble.n	800f550 <__exponent+0x68>
 800f4fc:	f10d 0307 	add.w	r3, sp, #7
 800f500:	461d      	mov	r5, r3
 800f502:	270a      	movs	r7, #10
 800f504:	461a      	mov	r2, r3
 800f506:	fbb1 f6f7 	udiv	r6, r1, r7
 800f50a:	fb07 1416 	mls	r4, r7, r6, r1
 800f50e:	3430      	adds	r4, #48	@ 0x30
 800f510:	f802 4c01 	strb.w	r4, [r2, #-1]
 800f514:	460c      	mov	r4, r1
 800f516:	2c63      	cmp	r4, #99	@ 0x63
 800f518:	f103 33ff 	add.w	r3, r3, #4294967295
 800f51c:	4631      	mov	r1, r6
 800f51e:	dcf1      	bgt.n	800f504 <__exponent+0x1c>
 800f520:	3130      	adds	r1, #48	@ 0x30
 800f522:	1e94      	subs	r4, r2, #2
 800f524:	f803 1c01 	strb.w	r1, [r3, #-1]
 800f528:	1c41      	adds	r1, r0, #1
 800f52a:	4623      	mov	r3, r4
 800f52c:	42ab      	cmp	r3, r5
 800f52e:	d30a      	bcc.n	800f546 <__exponent+0x5e>
 800f530:	f10d 0309 	add.w	r3, sp, #9
 800f534:	1a9b      	subs	r3, r3, r2
 800f536:	42ac      	cmp	r4, r5
 800f538:	bf88      	it	hi
 800f53a:	2300      	movhi	r3, #0
 800f53c:	3302      	adds	r3, #2
 800f53e:	4403      	add	r3, r0
 800f540:	1a18      	subs	r0, r3, r0
 800f542:	b003      	add	sp, #12
 800f544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f546:	f813 6b01 	ldrb.w	r6, [r3], #1
 800f54a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800f54e:	e7ed      	b.n	800f52c <__exponent+0x44>
 800f550:	2330      	movs	r3, #48	@ 0x30
 800f552:	3130      	adds	r1, #48	@ 0x30
 800f554:	7083      	strb	r3, [r0, #2]
 800f556:	70c1      	strb	r1, [r0, #3]
 800f558:	1d03      	adds	r3, r0, #4
 800f55a:	e7f1      	b.n	800f540 <__exponent+0x58>
 800f55c:	0000      	movs	r0, r0
	...

0800f560 <_printf_float>:
 800f560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f564:	b08d      	sub	sp, #52	@ 0x34
 800f566:	460c      	mov	r4, r1
 800f568:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800f56c:	4616      	mov	r6, r2
 800f56e:	461f      	mov	r7, r3
 800f570:	4605      	mov	r5, r0
 800f572:	f000 fccb 	bl	800ff0c <_localeconv_r>
 800f576:	f8d0 b000 	ldr.w	fp, [r0]
 800f57a:	4658      	mov	r0, fp
 800f57c:	f7f0 ff00 	bl	8000380 <strlen>
 800f580:	2300      	movs	r3, #0
 800f582:	930a      	str	r3, [sp, #40]	@ 0x28
 800f584:	f8d8 3000 	ldr.w	r3, [r8]
 800f588:	f894 9018 	ldrb.w	r9, [r4, #24]
 800f58c:	6822      	ldr	r2, [r4, #0]
 800f58e:	9005      	str	r0, [sp, #20]
 800f590:	3307      	adds	r3, #7
 800f592:	f023 0307 	bic.w	r3, r3, #7
 800f596:	f103 0108 	add.w	r1, r3, #8
 800f59a:	f8c8 1000 	str.w	r1, [r8]
 800f59e:	ed93 0b00 	vldr	d0, [r3]
 800f5a2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800f800 <_printf_float+0x2a0>
 800f5a6:	eeb0 7bc0 	vabs.f64	d7, d0
 800f5aa:	eeb4 7b46 	vcmp.f64	d7, d6
 800f5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5b2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800f5b6:	dd24      	ble.n	800f602 <_printf_float+0xa2>
 800f5b8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800f5bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5c0:	d502      	bpl.n	800f5c8 <_printf_float+0x68>
 800f5c2:	232d      	movs	r3, #45	@ 0x2d
 800f5c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f5c8:	498f      	ldr	r1, [pc, #572]	@ (800f808 <_printf_float+0x2a8>)
 800f5ca:	4b90      	ldr	r3, [pc, #576]	@ (800f80c <_printf_float+0x2ac>)
 800f5cc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800f5d0:	bf94      	ite	ls
 800f5d2:	4688      	movls	r8, r1
 800f5d4:	4698      	movhi	r8, r3
 800f5d6:	f022 0204 	bic.w	r2, r2, #4
 800f5da:	2303      	movs	r3, #3
 800f5dc:	6123      	str	r3, [r4, #16]
 800f5de:	6022      	str	r2, [r4, #0]
 800f5e0:	f04f 0a00 	mov.w	sl, #0
 800f5e4:	9700      	str	r7, [sp, #0]
 800f5e6:	4633      	mov	r3, r6
 800f5e8:	aa0b      	add	r2, sp, #44	@ 0x2c
 800f5ea:	4621      	mov	r1, r4
 800f5ec:	4628      	mov	r0, r5
 800f5ee:	f000 f9d1 	bl	800f994 <_printf_common>
 800f5f2:	3001      	adds	r0, #1
 800f5f4:	f040 8089 	bne.w	800f70a <_printf_float+0x1aa>
 800f5f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f5fc:	b00d      	add	sp, #52	@ 0x34
 800f5fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f602:	eeb4 0b40 	vcmp.f64	d0, d0
 800f606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f60a:	d709      	bvc.n	800f620 <_printf_float+0xc0>
 800f60c:	ee10 3a90 	vmov	r3, s1
 800f610:	2b00      	cmp	r3, #0
 800f612:	bfbc      	itt	lt
 800f614:	232d      	movlt	r3, #45	@ 0x2d
 800f616:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800f61a:	497d      	ldr	r1, [pc, #500]	@ (800f810 <_printf_float+0x2b0>)
 800f61c:	4b7d      	ldr	r3, [pc, #500]	@ (800f814 <_printf_float+0x2b4>)
 800f61e:	e7d5      	b.n	800f5cc <_printf_float+0x6c>
 800f620:	6863      	ldr	r3, [r4, #4]
 800f622:	1c59      	adds	r1, r3, #1
 800f624:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800f628:	d139      	bne.n	800f69e <_printf_float+0x13e>
 800f62a:	2306      	movs	r3, #6
 800f62c:	6063      	str	r3, [r4, #4]
 800f62e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800f632:	2300      	movs	r3, #0
 800f634:	6022      	str	r2, [r4, #0]
 800f636:	9303      	str	r3, [sp, #12]
 800f638:	ab0a      	add	r3, sp, #40	@ 0x28
 800f63a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800f63e:	ab09      	add	r3, sp, #36	@ 0x24
 800f640:	9300      	str	r3, [sp, #0]
 800f642:	6861      	ldr	r1, [r4, #4]
 800f644:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800f648:	4628      	mov	r0, r5
 800f64a:	f7ff fef9 	bl	800f440 <__cvt>
 800f64e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f652:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800f654:	4680      	mov	r8, r0
 800f656:	d129      	bne.n	800f6ac <_printf_float+0x14c>
 800f658:	1cc8      	adds	r0, r1, #3
 800f65a:	db02      	blt.n	800f662 <_printf_float+0x102>
 800f65c:	6863      	ldr	r3, [r4, #4]
 800f65e:	4299      	cmp	r1, r3
 800f660:	dd41      	ble.n	800f6e6 <_printf_float+0x186>
 800f662:	f1a9 0902 	sub.w	r9, r9, #2
 800f666:	fa5f f989 	uxtb.w	r9, r9
 800f66a:	3901      	subs	r1, #1
 800f66c:	464a      	mov	r2, r9
 800f66e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800f672:	9109      	str	r1, [sp, #36]	@ 0x24
 800f674:	f7ff ff38 	bl	800f4e8 <__exponent>
 800f678:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f67a:	1813      	adds	r3, r2, r0
 800f67c:	2a01      	cmp	r2, #1
 800f67e:	4682      	mov	sl, r0
 800f680:	6123      	str	r3, [r4, #16]
 800f682:	dc02      	bgt.n	800f68a <_printf_float+0x12a>
 800f684:	6822      	ldr	r2, [r4, #0]
 800f686:	07d2      	lsls	r2, r2, #31
 800f688:	d501      	bpl.n	800f68e <_printf_float+0x12e>
 800f68a:	3301      	adds	r3, #1
 800f68c:	6123      	str	r3, [r4, #16]
 800f68e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800f692:	2b00      	cmp	r3, #0
 800f694:	d0a6      	beq.n	800f5e4 <_printf_float+0x84>
 800f696:	232d      	movs	r3, #45	@ 0x2d
 800f698:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f69c:	e7a2      	b.n	800f5e4 <_printf_float+0x84>
 800f69e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800f6a2:	d1c4      	bne.n	800f62e <_printf_float+0xce>
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d1c2      	bne.n	800f62e <_printf_float+0xce>
 800f6a8:	2301      	movs	r3, #1
 800f6aa:	e7bf      	b.n	800f62c <_printf_float+0xcc>
 800f6ac:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f6b0:	d9db      	bls.n	800f66a <_printf_float+0x10a>
 800f6b2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800f6b6:	d118      	bne.n	800f6ea <_printf_float+0x18a>
 800f6b8:	2900      	cmp	r1, #0
 800f6ba:	6863      	ldr	r3, [r4, #4]
 800f6bc:	dd0b      	ble.n	800f6d6 <_printf_float+0x176>
 800f6be:	6121      	str	r1, [r4, #16]
 800f6c0:	b913      	cbnz	r3, 800f6c8 <_printf_float+0x168>
 800f6c2:	6822      	ldr	r2, [r4, #0]
 800f6c4:	07d0      	lsls	r0, r2, #31
 800f6c6:	d502      	bpl.n	800f6ce <_printf_float+0x16e>
 800f6c8:	3301      	adds	r3, #1
 800f6ca:	440b      	add	r3, r1
 800f6cc:	6123      	str	r3, [r4, #16]
 800f6ce:	65a1      	str	r1, [r4, #88]	@ 0x58
 800f6d0:	f04f 0a00 	mov.w	sl, #0
 800f6d4:	e7db      	b.n	800f68e <_printf_float+0x12e>
 800f6d6:	b913      	cbnz	r3, 800f6de <_printf_float+0x17e>
 800f6d8:	6822      	ldr	r2, [r4, #0]
 800f6da:	07d2      	lsls	r2, r2, #31
 800f6dc:	d501      	bpl.n	800f6e2 <_printf_float+0x182>
 800f6de:	3302      	adds	r3, #2
 800f6e0:	e7f4      	b.n	800f6cc <_printf_float+0x16c>
 800f6e2:	2301      	movs	r3, #1
 800f6e4:	e7f2      	b.n	800f6cc <_printf_float+0x16c>
 800f6e6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800f6ea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f6ec:	4299      	cmp	r1, r3
 800f6ee:	db05      	blt.n	800f6fc <_printf_float+0x19c>
 800f6f0:	6823      	ldr	r3, [r4, #0]
 800f6f2:	6121      	str	r1, [r4, #16]
 800f6f4:	07d8      	lsls	r0, r3, #31
 800f6f6:	d5ea      	bpl.n	800f6ce <_printf_float+0x16e>
 800f6f8:	1c4b      	adds	r3, r1, #1
 800f6fa:	e7e7      	b.n	800f6cc <_printf_float+0x16c>
 800f6fc:	2900      	cmp	r1, #0
 800f6fe:	bfd4      	ite	le
 800f700:	f1c1 0202 	rsble	r2, r1, #2
 800f704:	2201      	movgt	r2, #1
 800f706:	4413      	add	r3, r2
 800f708:	e7e0      	b.n	800f6cc <_printf_float+0x16c>
 800f70a:	6823      	ldr	r3, [r4, #0]
 800f70c:	055a      	lsls	r2, r3, #21
 800f70e:	d407      	bmi.n	800f720 <_printf_float+0x1c0>
 800f710:	6923      	ldr	r3, [r4, #16]
 800f712:	4642      	mov	r2, r8
 800f714:	4631      	mov	r1, r6
 800f716:	4628      	mov	r0, r5
 800f718:	47b8      	blx	r7
 800f71a:	3001      	adds	r0, #1
 800f71c:	d12a      	bne.n	800f774 <_printf_float+0x214>
 800f71e:	e76b      	b.n	800f5f8 <_printf_float+0x98>
 800f720:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800f724:	f240 80e0 	bls.w	800f8e8 <_printf_float+0x388>
 800f728:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f72c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f734:	d133      	bne.n	800f79e <_printf_float+0x23e>
 800f736:	4a38      	ldr	r2, [pc, #224]	@ (800f818 <_printf_float+0x2b8>)
 800f738:	2301      	movs	r3, #1
 800f73a:	4631      	mov	r1, r6
 800f73c:	4628      	mov	r0, r5
 800f73e:	47b8      	blx	r7
 800f740:	3001      	adds	r0, #1
 800f742:	f43f af59 	beq.w	800f5f8 <_printf_float+0x98>
 800f746:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800f74a:	4543      	cmp	r3, r8
 800f74c:	db02      	blt.n	800f754 <_printf_float+0x1f4>
 800f74e:	6823      	ldr	r3, [r4, #0]
 800f750:	07d8      	lsls	r0, r3, #31
 800f752:	d50f      	bpl.n	800f774 <_printf_float+0x214>
 800f754:	9b05      	ldr	r3, [sp, #20]
 800f756:	465a      	mov	r2, fp
 800f758:	4631      	mov	r1, r6
 800f75a:	4628      	mov	r0, r5
 800f75c:	47b8      	blx	r7
 800f75e:	3001      	adds	r0, #1
 800f760:	f43f af4a 	beq.w	800f5f8 <_printf_float+0x98>
 800f764:	f04f 0900 	mov.w	r9, #0
 800f768:	f108 38ff 	add.w	r8, r8, #4294967295
 800f76c:	f104 0a1a 	add.w	sl, r4, #26
 800f770:	45c8      	cmp	r8, r9
 800f772:	dc09      	bgt.n	800f788 <_printf_float+0x228>
 800f774:	6823      	ldr	r3, [r4, #0]
 800f776:	079b      	lsls	r3, r3, #30
 800f778:	f100 8107 	bmi.w	800f98a <_printf_float+0x42a>
 800f77c:	68e0      	ldr	r0, [r4, #12]
 800f77e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f780:	4298      	cmp	r0, r3
 800f782:	bfb8      	it	lt
 800f784:	4618      	movlt	r0, r3
 800f786:	e739      	b.n	800f5fc <_printf_float+0x9c>
 800f788:	2301      	movs	r3, #1
 800f78a:	4652      	mov	r2, sl
 800f78c:	4631      	mov	r1, r6
 800f78e:	4628      	mov	r0, r5
 800f790:	47b8      	blx	r7
 800f792:	3001      	adds	r0, #1
 800f794:	f43f af30 	beq.w	800f5f8 <_printf_float+0x98>
 800f798:	f109 0901 	add.w	r9, r9, #1
 800f79c:	e7e8      	b.n	800f770 <_printf_float+0x210>
 800f79e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	dc3b      	bgt.n	800f81c <_printf_float+0x2bc>
 800f7a4:	4a1c      	ldr	r2, [pc, #112]	@ (800f818 <_printf_float+0x2b8>)
 800f7a6:	2301      	movs	r3, #1
 800f7a8:	4631      	mov	r1, r6
 800f7aa:	4628      	mov	r0, r5
 800f7ac:	47b8      	blx	r7
 800f7ae:	3001      	adds	r0, #1
 800f7b0:	f43f af22 	beq.w	800f5f8 <_printf_float+0x98>
 800f7b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f7b8:	ea59 0303 	orrs.w	r3, r9, r3
 800f7bc:	d102      	bne.n	800f7c4 <_printf_float+0x264>
 800f7be:	6823      	ldr	r3, [r4, #0]
 800f7c0:	07d9      	lsls	r1, r3, #31
 800f7c2:	d5d7      	bpl.n	800f774 <_printf_float+0x214>
 800f7c4:	9b05      	ldr	r3, [sp, #20]
 800f7c6:	465a      	mov	r2, fp
 800f7c8:	4631      	mov	r1, r6
 800f7ca:	4628      	mov	r0, r5
 800f7cc:	47b8      	blx	r7
 800f7ce:	3001      	adds	r0, #1
 800f7d0:	f43f af12 	beq.w	800f5f8 <_printf_float+0x98>
 800f7d4:	f04f 0a00 	mov.w	sl, #0
 800f7d8:	f104 0b1a 	add.w	fp, r4, #26
 800f7dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f7de:	425b      	negs	r3, r3
 800f7e0:	4553      	cmp	r3, sl
 800f7e2:	dc01      	bgt.n	800f7e8 <_printf_float+0x288>
 800f7e4:	464b      	mov	r3, r9
 800f7e6:	e794      	b.n	800f712 <_printf_float+0x1b2>
 800f7e8:	2301      	movs	r3, #1
 800f7ea:	465a      	mov	r2, fp
 800f7ec:	4631      	mov	r1, r6
 800f7ee:	4628      	mov	r0, r5
 800f7f0:	47b8      	blx	r7
 800f7f2:	3001      	adds	r0, #1
 800f7f4:	f43f af00 	beq.w	800f5f8 <_printf_float+0x98>
 800f7f8:	f10a 0a01 	add.w	sl, sl, #1
 800f7fc:	e7ee      	b.n	800f7dc <_printf_float+0x27c>
 800f7fe:	bf00      	nop
 800f800:	ffffffff 	.word	0xffffffff
 800f804:	7fefffff 	.word	0x7fefffff
 800f808:	080120e8 	.word	0x080120e8
 800f80c:	080120ec 	.word	0x080120ec
 800f810:	080120f0 	.word	0x080120f0
 800f814:	080120f4 	.word	0x080120f4
 800f818:	080120f8 	.word	0x080120f8
 800f81c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f81e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f822:	4553      	cmp	r3, sl
 800f824:	bfa8      	it	ge
 800f826:	4653      	movge	r3, sl
 800f828:	2b00      	cmp	r3, #0
 800f82a:	4699      	mov	r9, r3
 800f82c:	dc37      	bgt.n	800f89e <_printf_float+0x33e>
 800f82e:	2300      	movs	r3, #0
 800f830:	9307      	str	r3, [sp, #28]
 800f832:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f836:	f104 021a 	add.w	r2, r4, #26
 800f83a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f83c:	9907      	ldr	r1, [sp, #28]
 800f83e:	9306      	str	r3, [sp, #24]
 800f840:	eba3 0309 	sub.w	r3, r3, r9
 800f844:	428b      	cmp	r3, r1
 800f846:	dc31      	bgt.n	800f8ac <_printf_float+0x34c>
 800f848:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f84a:	459a      	cmp	sl, r3
 800f84c:	dc3b      	bgt.n	800f8c6 <_printf_float+0x366>
 800f84e:	6823      	ldr	r3, [r4, #0]
 800f850:	07da      	lsls	r2, r3, #31
 800f852:	d438      	bmi.n	800f8c6 <_printf_float+0x366>
 800f854:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f856:	ebaa 0903 	sub.w	r9, sl, r3
 800f85a:	9b06      	ldr	r3, [sp, #24]
 800f85c:	ebaa 0303 	sub.w	r3, sl, r3
 800f860:	4599      	cmp	r9, r3
 800f862:	bfa8      	it	ge
 800f864:	4699      	movge	r9, r3
 800f866:	f1b9 0f00 	cmp.w	r9, #0
 800f86a:	dc34      	bgt.n	800f8d6 <_printf_float+0x376>
 800f86c:	f04f 0800 	mov.w	r8, #0
 800f870:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f874:	f104 0b1a 	add.w	fp, r4, #26
 800f878:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f87a:	ebaa 0303 	sub.w	r3, sl, r3
 800f87e:	eba3 0309 	sub.w	r3, r3, r9
 800f882:	4543      	cmp	r3, r8
 800f884:	f77f af76 	ble.w	800f774 <_printf_float+0x214>
 800f888:	2301      	movs	r3, #1
 800f88a:	465a      	mov	r2, fp
 800f88c:	4631      	mov	r1, r6
 800f88e:	4628      	mov	r0, r5
 800f890:	47b8      	blx	r7
 800f892:	3001      	adds	r0, #1
 800f894:	f43f aeb0 	beq.w	800f5f8 <_printf_float+0x98>
 800f898:	f108 0801 	add.w	r8, r8, #1
 800f89c:	e7ec      	b.n	800f878 <_printf_float+0x318>
 800f89e:	4642      	mov	r2, r8
 800f8a0:	4631      	mov	r1, r6
 800f8a2:	4628      	mov	r0, r5
 800f8a4:	47b8      	blx	r7
 800f8a6:	3001      	adds	r0, #1
 800f8a8:	d1c1      	bne.n	800f82e <_printf_float+0x2ce>
 800f8aa:	e6a5      	b.n	800f5f8 <_printf_float+0x98>
 800f8ac:	2301      	movs	r3, #1
 800f8ae:	4631      	mov	r1, r6
 800f8b0:	4628      	mov	r0, r5
 800f8b2:	9206      	str	r2, [sp, #24]
 800f8b4:	47b8      	blx	r7
 800f8b6:	3001      	adds	r0, #1
 800f8b8:	f43f ae9e 	beq.w	800f5f8 <_printf_float+0x98>
 800f8bc:	9b07      	ldr	r3, [sp, #28]
 800f8be:	9a06      	ldr	r2, [sp, #24]
 800f8c0:	3301      	adds	r3, #1
 800f8c2:	9307      	str	r3, [sp, #28]
 800f8c4:	e7b9      	b.n	800f83a <_printf_float+0x2da>
 800f8c6:	9b05      	ldr	r3, [sp, #20]
 800f8c8:	465a      	mov	r2, fp
 800f8ca:	4631      	mov	r1, r6
 800f8cc:	4628      	mov	r0, r5
 800f8ce:	47b8      	blx	r7
 800f8d0:	3001      	adds	r0, #1
 800f8d2:	d1bf      	bne.n	800f854 <_printf_float+0x2f4>
 800f8d4:	e690      	b.n	800f5f8 <_printf_float+0x98>
 800f8d6:	9a06      	ldr	r2, [sp, #24]
 800f8d8:	464b      	mov	r3, r9
 800f8da:	4442      	add	r2, r8
 800f8dc:	4631      	mov	r1, r6
 800f8de:	4628      	mov	r0, r5
 800f8e0:	47b8      	blx	r7
 800f8e2:	3001      	adds	r0, #1
 800f8e4:	d1c2      	bne.n	800f86c <_printf_float+0x30c>
 800f8e6:	e687      	b.n	800f5f8 <_printf_float+0x98>
 800f8e8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800f8ec:	f1b9 0f01 	cmp.w	r9, #1
 800f8f0:	dc01      	bgt.n	800f8f6 <_printf_float+0x396>
 800f8f2:	07db      	lsls	r3, r3, #31
 800f8f4:	d536      	bpl.n	800f964 <_printf_float+0x404>
 800f8f6:	2301      	movs	r3, #1
 800f8f8:	4642      	mov	r2, r8
 800f8fa:	4631      	mov	r1, r6
 800f8fc:	4628      	mov	r0, r5
 800f8fe:	47b8      	blx	r7
 800f900:	3001      	adds	r0, #1
 800f902:	f43f ae79 	beq.w	800f5f8 <_printf_float+0x98>
 800f906:	9b05      	ldr	r3, [sp, #20]
 800f908:	465a      	mov	r2, fp
 800f90a:	4631      	mov	r1, r6
 800f90c:	4628      	mov	r0, r5
 800f90e:	47b8      	blx	r7
 800f910:	3001      	adds	r0, #1
 800f912:	f43f ae71 	beq.w	800f5f8 <_printf_float+0x98>
 800f916:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f91a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f91e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f922:	f109 39ff 	add.w	r9, r9, #4294967295
 800f926:	d018      	beq.n	800f95a <_printf_float+0x3fa>
 800f928:	464b      	mov	r3, r9
 800f92a:	f108 0201 	add.w	r2, r8, #1
 800f92e:	4631      	mov	r1, r6
 800f930:	4628      	mov	r0, r5
 800f932:	47b8      	blx	r7
 800f934:	3001      	adds	r0, #1
 800f936:	d10c      	bne.n	800f952 <_printf_float+0x3f2>
 800f938:	e65e      	b.n	800f5f8 <_printf_float+0x98>
 800f93a:	2301      	movs	r3, #1
 800f93c:	465a      	mov	r2, fp
 800f93e:	4631      	mov	r1, r6
 800f940:	4628      	mov	r0, r5
 800f942:	47b8      	blx	r7
 800f944:	3001      	adds	r0, #1
 800f946:	f43f ae57 	beq.w	800f5f8 <_printf_float+0x98>
 800f94a:	f108 0801 	add.w	r8, r8, #1
 800f94e:	45c8      	cmp	r8, r9
 800f950:	dbf3      	blt.n	800f93a <_printf_float+0x3da>
 800f952:	4653      	mov	r3, sl
 800f954:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f958:	e6dc      	b.n	800f714 <_printf_float+0x1b4>
 800f95a:	f04f 0800 	mov.w	r8, #0
 800f95e:	f104 0b1a 	add.w	fp, r4, #26
 800f962:	e7f4      	b.n	800f94e <_printf_float+0x3ee>
 800f964:	2301      	movs	r3, #1
 800f966:	4642      	mov	r2, r8
 800f968:	e7e1      	b.n	800f92e <_printf_float+0x3ce>
 800f96a:	2301      	movs	r3, #1
 800f96c:	464a      	mov	r2, r9
 800f96e:	4631      	mov	r1, r6
 800f970:	4628      	mov	r0, r5
 800f972:	47b8      	blx	r7
 800f974:	3001      	adds	r0, #1
 800f976:	f43f ae3f 	beq.w	800f5f8 <_printf_float+0x98>
 800f97a:	f108 0801 	add.w	r8, r8, #1
 800f97e:	68e3      	ldr	r3, [r4, #12]
 800f980:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f982:	1a5b      	subs	r3, r3, r1
 800f984:	4543      	cmp	r3, r8
 800f986:	dcf0      	bgt.n	800f96a <_printf_float+0x40a>
 800f988:	e6f8      	b.n	800f77c <_printf_float+0x21c>
 800f98a:	f04f 0800 	mov.w	r8, #0
 800f98e:	f104 0919 	add.w	r9, r4, #25
 800f992:	e7f4      	b.n	800f97e <_printf_float+0x41e>

0800f994 <_printf_common>:
 800f994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f998:	4616      	mov	r6, r2
 800f99a:	4698      	mov	r8, r3
 800f99c:	688a      	ldr	r2, [r1, #8]
 800f99e:	690b      	ldr	r3, [r1, #16]
 800f9a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f9a4:	4293      	cmp	r3, r2
 800f9a6:	bfb8      	it	lt
 800f9a8:	4613      	movlt	r3, r2
 800f9aa:	6033      	str	r3, [r6, #0]
 800f9ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f9b0:	4607      	mov	r7, r0
 800f9b2:	460c      	mov	r4, r1
 800f9b4:	b10a      	cbz	r2, 800f9ba <_printf_common+0x26>
 800f9b6:	3301      	adds	r3, #1
 800f9b8:	6033      	str	r3, [r6, #0]
 800f9ba:	6823      	ldr	r3, [r4, #0]
 800f9bc:	0699      	lsls	r1, r3, #26
 800f9be:	bf42      	ittt	mi
 800f9c0:	6833      	ldrmi	r3, [r6, #0]
 800f9c2:	3302      	addmi	r3, #2
 800f9c4:	6033      	strmi	r3, [r6, #0]
 800f9c6:	6825      	ldr	r5, [r4, #0]
 800f9c8:	f015 0506 	ands.w	r5, r5, #6
 800f9cc:	d106      	bne.n	800f9dc <_printf_common+0x48>
 800f9ce:	f104 0a19 	add.w	sl, r4, #25
 800f9d2:	68e3      	ldr	r3, [r4, #12]
 800f9d4:	6832      	ldr	r2, [r6, #0]
 800f9d6:	1a9b      	subs	r3, r3, r2
 800f9d8:	42ab      	cmp	r3, r5
 800f9da:	dc26      	bgt.n	800fa2a <_printf_common+0x96>
 800f9dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f9e0:	6822      	ldr	r2, [r4, #0]
 800f9e2:	3b00      	subs	r3, #0
 800f9e4:	bf18      	it	ne
 800f9e6:	2301      	movne	r3, #1
 800f9e8:	0692      	lsls	r2, r2, #26
 800f9ea:	d42b      	bmi.n	800fa44 <_printf_common+0xb0>
 800f9ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f9f0:	4641      	mov	r1, r8
 800f9f2:	4638      	mov	r0, r7
 800f9f4:	47c8      	blx	r9
 800f9f6:	3001      	adds	r0, #1
 800f9f8:	d01e      	beq.n	800fa38 <_printf_common+0xa4>
 800f9fa:	6823      	ldr	r3, [r4, #0]
 800f9fc:	6922      	ldr	r2, [r4, #16]
 800f9fe:	f003 0306 	and.w	r3, r3, #6
 800fa02:	2b04      	cmp	r3, #4
 800fa04:	bf02      	ittt	eq
 800fa06:	68e5      	ldreq	r5, [r4, #12]
 800fa08:	6833      	ldreq	r3, [r6, #0]
 800fa0a:	1aed      	subeq	r5, r5, r3
 800fa0c:	68a3      	ldr	r3, [r4, #8]
 800fa0e:	bf0c      	ite	eq
 800fa10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa14:	2500      	movne	r5, #0
 800fa16:	4293      	cmp	r3, r2
 800fa18:	bfc4      	itt	gt
 800fa1a:	1a9b      	subgt	r3, r3, r2
 800fa1c:	18ed      	addgt	r5, r5, r3
 800fa1e:	2600      	movs	r6, #0
 800fa20:	341a      	adds	r4, #26
 800fa22:	42b5      	cmp	r5, r6
 800fa24:	d11a      	bne.n	800fa5c <_printf_common+0xc8>
 800fa26:	2000      	movs	r0, #0
 800fa28:	e008      	b.n	800fa3c <_printf_common+0xa8>
 800fa2a:	2301      	movs	r3, #1
 800fa2c:	4652      	mov	r2, sl
 800fa2e:	4641      	mov	r1, r8
 800fa30:	4638      	mov	r0, r7
 800fa32:	47c8      	blx	r9
 800fa34:	3001      	adds	r0, #1
 800fa36:	d103      	bne.n	800fa40 <_printf_common+0xac>
 800fa38:	f04f 30ff 	mov.w	r0, #4294967295
 800fa3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa40:	3501      	adds	r5, #1
 800fa42:	e7c6      	b.n	800f9d2 <_printf_common+0x3e>
 800fa44:	18e1      	adds	r1, r4, r3
 800fa46:	1c5a      	adds	r2, r3, #1
 800fa48:	2030      	movs	r0, #48	@ 0x30
 800fa4a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fa4e:	4422      	add	r2, r4
 800fa50:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fa54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fa58:	3302      	adds	r3, #2
 800fa5a:	e7c7      	b.n	800f9ec <_printf_common+0x58>
 800fa5c:	2301      	movs	r3, #1
 800fa5e:	4622      	mov	r2, r4
 800fa60:	4641      	mov	r1, r8
 800fa62:	4638      	mov	r0, r7
 800fa64:	47c8      	blx	r9
 800fa66:	3001      	adds	r0, #1
 800fa68:	d0e6      	beq.n	800fa38 <_printf_common+0xa4>
 800fa6a:	3601      	adds	r6, #1
 800fa6c:	e7d9      	b.n	800fa22 <_printf_common+0x8e>
	...

0800fa70 <_printf_i>:
 800fa70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fa74:	7e0f      	ldrb	r7, [r1, #24]
 800fa76:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fa78:	2f78      	cmp	r7, #120	@ 0x78
 800fa7a:	4691      	mov	r9, r2
 800fa7c:	4680      	mov	r8, r0
 800fa7e:	460c      	mov	r4, r1
 800fa80:	469a      	mov	sl, r3
 800fa82:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fa86:	d807      	bhi.n	800fa98 <_printf_i+0x28>
 800fa88:	2f62      	cmp	r7, #98	@ 0x62
 800fa8a:	d80a      	bhi.n	800faa2 <_printf_i+0x32>
 800fa8c:	2f00      	cmp	r7, #0
 800fa8e:	f000 80d2 	beq.w	800fc36 <_printf_i+0x1c6>
 800fa92:	2f58      	cmp	r7, #88	@ 0x58
 800fa94:	f000 80b9 	beq.w	800fc0a <_printf_i+0x19a>
 800fa98:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fa9c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800faa0:	e03a      	b.n	800fb18 <_printf_i+0xa8>
 800faa2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800faa6:	2b15      	cmp	r3, #21
 800faa8:	d8f6      	bhi.n	800fa98 <_printf_i+0x28>
 800faaa:	a101      	add	r1, pc, #4	@ (adr r1, 800fab0 <_printf_i+0x40>)
 800faac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fab0:	0800fb09 	.word	0x0800fb09
 800fab4:	0800fb1d 	.word	0x0800fb1d
 800fab8:	0800fa99 	.word	0x0800fa99
 800fabc:	0800fa99 	.word	0x0800fa99
 800fac0:	0800fa99 	.word	0x0800fa99
 800fac4:	0800fa99 	.word	0x0800fa99
 800fac8:	0800fb1d 	.word	0x0800fb1d
 800facc:	0800fa99 	.word	0x0800fa99
 800fad0:	0800fa99 	.word	0x0800fa99
 800fad4:	0800fa99 	.word	0x0800fa99
 800fad8:	0800fa99 	.word	0x0800fa99
 800fadc:	0800fc1d 	.word	0x0800fc1d
 800fae0:	0800fb47 	.word	0x0800fb47
 800fae4:	0800fbd7 	.word	0x0800fbd7
 800fae8:	0800fa99 	.word	0x0800fa99
 800faec:	0800fa99 	.word	0x0800fa99
 800faf0:	0800fc3f 	.word	0x0800fc3f
 800faf4:	0800fa99 	.word	0x0800fa99
 800faf8:	0800fb47 	.word	0x0800fb47
 800fafc:	0800fa99 	.word	0x0800fa99
 800fb00:	0800fa99 	.word	0x0800fa99
 800fb04:	0800fbdf 	.word	0x0800fbdf
 800fb08:	6833      	ldr	r3, [r6, #0]
 800fb0a:	1d1a      	adds	r2, r3, #4
 800fb0c:	681b      	ldr	r3, [r3, #0]
 800fb0e:	6032      	str	r2, [r6, #0]
 800fb10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fb14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fb18:	2301      	movs	r3, #1
 800fb1a:	e09d      	b.n	800fc58 <_printf_i+0x1e8>
 800fb1c:	6833      	ldr	r3, [r6, #0]
 800fb1e:	6820      	ldr	r0, [r4, #0]
 800fb20:	1d19      	adds	r1, r3, #4
 800fb22:	6031      	str	r1, [r6, #0]
 800fb24:	0606      	lsls	r6, r0, #24
 800fb26:	d501      	bpl.n	800fb2c <_printf_i+0xbc>
 800fb28:	681d      	ldr	r5, [r3, #0]
 800fb2a:	e003      	b.n	800fb34 <_printf_i+0xc4>
 800fb2c:	0645      	lsls	r5, r0, #25
 800fb2e:	d5fb      	bpl.n	800fb28 <_printf_i+0xb8>
 800fb30:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fb34:	2d00      	cmp	r5, #0
 800fb36:	da03      	bge.n	800fb40 <_printf_i+0xd0>
 800fb38:	232d      	movs	r3, #45	@ 0x2d
 800fb3a:	426d      	negs	r5, r5
 800fb3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb40:	4859      	ldr	r0, [pc, #356]	@ (800fca8 <_printf_i+0x238>)
 800fb42:	230a      	movs	r3, #10
 800fb44:	e011      	b.n	800fb6a <_printf_i+0xfa>
 800fb46:	6821      	ldr	r1, [r4, #0]
 800fb48:	6833      	ldr	r3, [r6, #0]
 800fb4a:	0608      	lsls	r0, r1, #24
 800fb4c:	f853 5b04 	ldr.w	r5, [r3], #4
 800fb50:	d402      	bmi.n	800fb58 <_printf_i+0xe8>
 800fb52:	0649      	lsls	r1, r1, #25
 800fb54:	bf48      	it	mi
 800fb56:	b2ad      	uxthmi	r5, r5
 800fb58:	2f6f      	cmp	r7, #111	@ 0x6f
 800fb5a:	4853      	ldr	r0, [pc, #332]	@ (800fca8 <_printf_i+0x238>)
 800fb5c:	6033      	str	r3, [r6, #0]
 800fb5e:	bf14      	ite	ne
 800fb60:	230a      	movne	r3, #10
 800fb62:	2308      	moveq	r3, #8
 800fb64:	2100      	movs	r1, #0
 800fb66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fb6a:	6866      	ldr	r6, [r4, #4]
 800fb6c:	60a6      	str	r6, [r4, #8]
 800fb6e:	2e00      	cmp	r6, #0
 800fb70:	bfa2      	ittt	ge
 800fb72:	6821      	ldrge	r1, [r4, #0]
 800fb74:	f021 0104 	bicge.w	r1, r1, #4
 800fb78:	6021      	strge	r1, [r4, #0]
 800fb7a:	b90d      	cbnz	r5, 800fb80 <_printf_i+0x110>
 800fb7c:	2e00      	cmp	r6, #0
 800fb7e:	d04b      	beq.n	800fc18 <_printf_i+0x1a8>
 800fb80:	4616      	mov	r6, r2
 800fb82:	fbb5 f1f3 	udiv	r1, r5, r3
 800fb86:	fb03 5711 	mls	r7, r3, r1, r5
 800fb8a:	5dc7      	ldrb	r7, [r0, r7]
 800fb8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fb90:	462f      	mov	r7, r5
 800fb92:	42bb      	cmp	r3, r7
 800fb94:	460d      	mov	r5, r1
 800fb96:	d9f4      	bls.n	800fb82 <_printf_i+0x112>
 800fb98:	2b08      	cmp	r3, #8
 800fb9a:	d10b      	bne.n	800fbb4 <_printf_i+0x144>
 800fb9c:	6823      	ldr	r3, [r4, #0]
 800fb9e:	07df      	lsls	r7, r3, #31
 800fba0:	d508      	bpl.n	800fbb4 <_printf_i+0x144>
 800fba2:	6923      	ldr	r3, [r4, #16]
 800fba4:	6861      	ldr	r1, [r4, #4]
 800fba6:	4299      	cmp	r1, r3
 800fba8:	bfde      	ittt	le
 800fbaa:	2330      	movle	r3, #48	@ 0x30
 800fbac:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fbb0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fbb4:	1b92      	subs	r2, r2, r6
 800fbb6:	6122      	str	r2, [r4, #16]
 800fbb8:	f8cd a000 	str.w	sl, [sp]
 800fbbc:	464b      	mov	r3, r9
 800fbbe:	aa03      	add	r2, sp, #12
 800fbc0:	4621      	mov	r1, r4
 800fbc2:	4640      	mov	r0, r8
 800fbc4:	f7ff fee6 	bl	800f994 <_printf_common>
 800fbc8:	3001      	adds	r0, #1
 800fbca:	d14a      	bne.n	800fc62 <_printf_i+0x1f2>
 800fbcc:	f04f 30ff 	mov.w	r0, #4294967295
 800fbd0:	b004      	add	sp, #16
 800fbd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fbd6:	6823      	ldr	r3, [r4, #0]
 800fbd8:	f043 0320 	orr.w	r3, r3, #32
 800fbdc:	6023      	str	r3, [r4, #0]
 800fbde:	4833      	ldr	r0, [pc, #204]	@ (800fcac <_printf_i+0x23c>)
 800fbe0:	2778      	movs	r7, #120	@ 0x78
 800fbe2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fbe6:	6823      	ldr	r3, [r4, #0]
 800fbe8:	6831      	ldr	r1, [r6, #0]
 800fbea:	061f      	lsls	r7, r3, #24
 800fbec:	f851 5b04 	ldr.w	r5, [r1], #4
 800fbf0:	d402      	bmi.n	800fbf8 <_printf_i+0x188>
 800fbf2:	065f      	lsls	r7, r3, #25
 800fbf4:	bf48      	it	mi
 800fbf6:	b2ad      	uxthmi	r5, r5
 800fbf8:	6031      	str	r1, [r6, #0]
 800fbfa:	07d9      	lsls	r1, r3, #31
 800fbfc:	bf44      	itt	mi
 800fbfe:	f043 0320 	orrmi.w	r3, r3, #32
 800fc02:	6023      	strmi	r3, [r4, #0]
 800fc04:	b11d      	cbz	r5, 800fc0e <_printf_i+0x19e>
 800fc06:	2310      	movs	r3, #16
 800fc08:	e7ac      	b.n	800fb64 <_printf_i+0xf4>
 800fc0a:	4827      	ldr	r0, [pc, #156]	@ (800fca8 <_printf_i+0x238>)
 800fc0c:	e7e9      	b.n	800fbe2 <_printf_i+0x172>
 800fc0e:	6823      	ldr	r3, [r4, #0]
 800fc10:	f023 0320 	bic.w	r3, r3, #32
 800fc14:	6023      	str	r3, [r4, #0]
 800fc16:	e7f6      	b.n	800fc06 <_printf_i+0x196>
 800fc18:	4616      	mov	r6, r2
 800fc1a:	e7bd      	b.n	800fb98 <_printf_i+0x128>
 800fc1c:	6833      	ldr	r3, [r6, #0]
 800fc1e:	6825      	ldr	r5, [r4, #0]
 800fc20:	6961      	ldr	r1, [r4, #20]
 800fc22:	1d18      	adds	r0, r3, #4
 800fc24:	6030      	str	r0, [r6, #0]
 800fc26:	062e      	lsls	r6, r5, #24
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	d501      	bpl.n	800fc30 <_printf_i+0x1c0>
 800fc2c:	6019      	str	r1, [r3, #0]
 800fc2e:	e002      	b.n	800fc36 <_printf_i+0x1c6>
 800fc30:	0668      	lsls	r0, r5, #25
 800fc32:	d5fb      	bpl.n	800fc2c <_printf_i+0x1bc>
 800fc34:	8019      	strh	r1, [r3, #0]
 800fc36:	2300      	movs	r3, #0
 800fc38:	6123      	str	r3, [r4, #16]
 800fc3a:	4616      	mov	r6, r2
 800fc3c:	e7bc      	b.n	800fbb8 <_printf_i+0x148>
 800fc3e:	6833      	ldr	r3, [r6, #0]
 800fc40:	1d1a      	adds	r2, r3, #4
 800fc42:	6032      	str	r2, [r6, #0]
 800fc44:	681e      	ldr	r6, [r3, #0]
 800fc46:	6862      	ldr	r2, [r4, #4]
 800fc48:	2100      	movs	r1, #0
 800fc4a:	4630      	mov	r0, r6
 800fc4c:	f7f0 fb48 	bl	80002e0 <memchr>
 800fc50:	b108      	cbz	r0, 800fc56 <_printf_i+0x1e6>
 800fc52:	1b80      	subs	r0, r0, r6
 800fc54:	6060      	str	r0, [r4, #4]
 800fc56:	6863      	ldr	r3, [r4, #4]
 800fc58:	6123      	str	r3, [r4, #16]
 800fc5a:	2300      	movs	r3, #0
 800fc5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc60:	e7aa      	b.n	800fbb8 <_printf_i+0x148>
 800fc62:	6923      	ldr	r3, [r4, #16]
 800fc64:	4632      	mov	r2, r6
 800fc66:	4649      	mov	r1, r9
 800fc68:	4640      	mov	r0, r8
 800fc6a:	47d0      	blx	sl
 800fc6c:	3001      	adds	r0, #1
 800fc6e:	d0ad      	beq.n	800fbcc <_printf_i+0x15c>
 800fc70:	6823      	ldr	r3, [r4, #0]
 800fc72:	079b      	lsls	r3, r3, #30
 800fc74:	d413      	bmi.n	800fc9e <_printf_i+0x22e>
 800fc76:	68e0      	ldr	r0, [r4, #12]
 800fc78:	9b03      	ldr	r3, [sp, #12]
 800fc7a:	4298      	cmp	r0, r3
 800fc7c:	bfb8      	it	lt
 800fc7e:	4618      	movlt	r0, r3
 800fc80:	e7a6      	b.n	800fbd0 <_printf_i+0x160>
 800fc82:	2301      	movs	r3, #1
 800fc84:	4632      	mov	r2, r6
 800fc86:	4649      	mov	r1, r9
 800fc88:	4640      	mov	r0, r8
 800fc8a:	47d0      	blx	sl
 800fc8c:	3001      	adds	r0, #1
 800fc8e:	d09d      	beq.n	800fbcc <_printf_i+0x15c>
 800fc90:	3501      	adds	r5, #1
 800fc92:	68e3      	ldr	r3, [r4, #12]
 800fc94:	9903      	ldr	r1, [sp, #12]
 800fc96:	1a5b      	subs	r3, r3, r1
 800fc98:	42ab      	cmp	r3, r5
 800fc9a:	dcf2      	bgt.n	800fc82 <_printf_i+0x212>
 800fc9c:	e7eb      	b.n	800fc76 <_printf_i+0x206>
 800fc9e:	2500      	movs	r5, #0
 800fca0:	f104 0619 	add.w	r6, r4, #25
 800fca4:	e7f5      	b.n	800fc92 <_printf_i+0x222>
 800fca6:	bf00      	nop
 800fca8:	080120fa 	.word	0x080120fa
 800fcac:	0801210b 	.word	0x0801210b

0800fcb0 <std>:
 800fcb0:	2300      	movs	r3, #0
 800fcb2:	b510      	push	{r4, lr}
 800fcb4:	4604      	mov	r4, r0
 800fcb6:	e9c0 3300 	strd	r3, r3, [r0]
 800fcba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fcbe:	6083      	str	r3, [r0, #8]
 800fcc0:	8181      	strh	r1, [r0, #12]
 800fcc2:	6643      	str	r3, [r0, #100]	@ 0x64
 800fcc4:	81c2      	strh	r2, [r0, #14]
 800fcc6:	6183      	str	r3, [r0, #24]
 800fcc8:	4619      	mov	r1, r3
 800fcca:	2208      	movs	r2, #8
 800fccc:	305c      	adds	r0, #92	@ 0x5c
 800fcce:	f000 f914 	bl	800fefa <memset>
 800fcd2:	4b0d      	ldr	r3, [pc, #52]	@ (800fd08 <std+0x58>)
 800fcd4:	6263      	str	r3, [r4, #36]	@ 0x24
 800fcd6:	4b0d      	ldr	r3, [pc, #52]	@ (800fd0c <std+0x5c>)
 800fcd8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fcda:	4b0d      	ldr	r3, [pc, #52]	@ (800fd10 <std+0x60>)
 800fcdc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fcde:	4b0d      	ldr	r3, [pc, #52]	@ (800fd14 <std+0x64>)
 800fce0:	6323      	str	r3, [r4, #48]	@ 0x30
 800fce2:	4b0d      	ldr	r3, [pc, #52]	@ (800fd18 <std+0x68>)
 800fce4:	6224      	str	r4, [r4, #32]
 800fce6:	429c      	cmp	r4, r3
 800fce8:	d006      	beq.n	800fcf8 <std+0x48>
 800fcea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800fcee:	4294      	cmp	r4, r2
 800fcf0:	d002      	beq.n	800fcf8 <std+0x48>
 800fcf2:	33d0      	adds	r3, #208	@ 0xd0
 800fcf4:	429c      	cmp	r4, r3
 800fcf6:	d105      	bne.n	800fd04 <std+0x54>
 800fcf8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800fcfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd00:	f000 b978 	b.w	800fff4 <__retarget_lock_init_recursive>
 800fd04:	bd10      	pop	{r4, pc}
 800fd06:	bf00      	nop
 800fd08:	0800fe75 	.word	0x0800fe75
 800fd0c:	0800fe97 	.word	0x0800fe97
 800fd10:	0800fecf 	.word	0x0800fecf
 800fd14:	0800fef3 	.word	0x0800fef3
 800fd18:	240023e8 	.word	0x240023e8

0800fd1c <stdio_exit_handler>:
 800fd1c:	4a02      	ldr	r2, [pc, #8]	@ (800fd28 <stdio_exit_handler+0xc>)
 800fd1e:	4903      	ldr	r1, [pc, #12]	@ (800fd2c <stdio_exit_handler+0x10>)
 800fd20:	4803      	ldr	r0, [pc, #12]	@ (800fd30 <stdio_exit_handler+0x14>)
 800fd22:	f000 b869 	b.w	800fdf8 <_fwalk_sglue>
 800fd26:	bf00      	nop
 800fd28:	24000124 	.word	0x24000124
 800fd2c:	08011879 	.word	0x08011879
 800fd30:	24000134 	.word	0x24000134

0800fd34 <cleanup_stdio>:
 800fd34:	6841      	ldr	r1, [r0, #4]
 800fd36:	4b0c      	ldr	r3, [pc, #48]	@ (800fd68 <cleanup_stdio+0x34>)
 800fd38:	4299      	cmp	r1, r3
 800fd3a:	b510      	push	{r4, lr}
 800fd3c:	4604      	mov	r4, r0
 800fd3e:	d001      	beq.n	800fd44 <cleanup_stdio+0x10>
 800fd40:	f001 fd9a 	bl	8011878 <_fflush_r>
 800fd44:	68a1      	ldr	r1, [r4, #8]
 800fd46:	4b09      	ldr	r3, [pc, #36]	@ (800fd6c <cleanup_stdio+0x38>)
 800fd48:	4299      	cmp	r1, r3
 800fd4a:	d002      	beq.n	800fd52 <cleanup_stdio+0x1e>
 800fd4c:	4620      	mov	r0, r4
 800fd4e:	f001 fd93 	bl	8011878 <_fflush_r>
 800fd52:	68e1      	ldr	r1, [r4, #12]
 800fd54:	4b06      	ldr	r3, [pc, #24]	@ (800fd70 <cleanup_stdio+0x3c>)
 800fd56:	4299      	cmp	r1, r3
 800fd58:	d004      	beq.n	800fd64 <cleanup_stdio+0x30>
 800fd5a:	4620      	mov	r0, r4
 800fd5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd60:	f001 bd8a 	b.w	8011878 <_fflush_r>
 800fd64:	bd10      	pop	{r4, pc}
 800fd66:	bf00      	nop
 800fd68:	240023e8 	.word	0x240023e8
 800fd6c:	24002450 	.word	0x24002450
 800fd70:	240024b8 	.word	0x240024b8

0800fd74 <global_stdio_init.part.0>:
 800fd74:	b510      	push	{r4, lr}
 800fd76:	4b0b      	ldr	r3, [pc, #44]	@ (800fda4 <global_stdio_init.part.0+0x30>)
 800fd78:	4c0b      	ldr	r4, [pc, #44]	@ (800fda8 <global_stdio_init.part.0+0x34>)
 800fd7a:	4a0c      	ldr	r2, [pc, #48]	@ (800fdac <global_stdio_init.part.0+0x38>)
 800fd7c:	601a      	str	r2, [r3, #0]
 800fd7e:	4620      	mov	r0, r4
 800fd80:	2200      	movs	r2, #0
 800fd82:	2104      	movs	r1, #4
 800fd84:	f7ff ff94 	bl	800fcb0 <std>
 800fd88:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800fd8c:	2201      	movs	r2, #1
 800fd8e:	2109      	movs	r1, #9
 800fd90:	f7ff ff8e 	bl	800fcb0 <std>
 800fd94:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800fd98:	2202      	movs	r2, #2
 800fd9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fd9e:	2112      	movs	r1, #18
 800fda0:	f7ff bf86 	b.w	800fcb0 <std>
 800fda4:	24002520 	.word	0x24002520
 800fda8:	240023e8 	.word	0x240023e8
 800fdac:	0800fd1d 	.word	0x0800fd1d

0800fdb0 <__sfp_lock_acquire>:
 800fdb0:	4801      	ldr	r0, [pc, #4]	@ (800fdb8 <__sfp_lock_acquire+0x8>)
 800fdb2:	f000 b920 	b.w	800fff6 <__retarget_lock_acquire_recursive>
 800fdb6:	bf00      	nop
 800fdb8:	24002529 	.word	0x24002529

0800fdbc <__sfp_lock_release>:
 800fdbc:	4801      	ldr	r0, [pc, #4]	@ (800fdc4 <__sfp_lock_release+0x8>)
 800fdbe:	f000 b91b 	b.w	800fff8 <__retarget_lock_release_recursive>
 800fdc2:	bf00      	nop
 800fdc4:	24002529 	.word	0x24002529

0800fdc8 <__sinit>:
 800fdc8:	b510      	push	{r4, lr}
 800fdca:	4604      	mov	r4, r0
 800fdcc:	f7ff fff0 	bl	800fdb0 <__sfp_lock_acquire>
 800fdd0:	6a23      	ldr	r3, [r4, #32]
 800fdd2:	b11b      	cbz	r3, 800fddc <__sinit+0x14>
 800fdd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fdd8:	f7ff bff0 	b.w	800fdbc <__sfp_lock_release>
 800fddc:	4b04      	ldr	r3, [pc, #16]	@ (800fdf0 <__sinit+0x28>)
 800fdde:	6223      	str	r3, [r4, #32]
 800fde0:	4b04      	ldr	r3, [pc, #16]	@ (800fdf4 <__sinit+0x2c>)
 800fde2:	681b      	ldr	r3, [r3, #0]
 800fde4:	2b00      	cmp	r3, #0
 800fde6:	d1f5      	bne.n	800fdd4 <__sinit+0xc>
 800fde8:	f7ff ffc4 	bl	800fd74 <global_stdio_init.part.0>
 800fdec:	e7f2      	b.n	800fdd4 <__sinit+0xc>
 800fdee:	bf00      	nop
 800fdf0:	0800fd35 	.word	0x0800fd35
 800fdf4:	24002520 	.word	0x24002520

0800fdf8 <_fwalk_sglue>:
 800fdf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fdfc:	4607      	mov	r7, r0
 800fdfe:	4688      	mov	r8, r1
 800fe00:	4614      	mov	r4, r2
 800fe02:	2600      	movs	r6, #0
 800fe04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fe08:	f1b9 0901 	subs.w	r9, r9, #1
 800fe0c:	d505      	bpl.n	800fe1a <_fwalk_sglue+0x22>
 800fe0e:	6824      	ldr	r4, [r4, #0]
 800fe10:	2c00      	cmp	r4, #0
 800fe12:	d1f7      	bne.n	800fe04 <_fwalk_sglue+0xc>
 800fe14:	4630      	mov	r0, r6
 800fe16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fe1a:	89ab      	ldrh	r3, [r5, #12]
 800fe1c:	2b01      	cmp	r3, #1
 800fe1e:	d907      	bls.n	800fe30 <_fwalk_sglue+0x38>
 800fe20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fe24:	3301      	adds	r3, #1
 800fe26:	d003      	beq.n	800fe30 <_fwalk_sglue+0x38>
 800fe28:	4629      	mov	r1, r5
 800fe2a:	4638      	mov	r0, r7
 800fe2c:	47c0      	blx	r8
 800fe2e:	4306      	orrs	r6, r0
 800fe30:	3568      	adds	r5, #104	@ 0x68
 800fe32:	e7e9      	b.n	800fe08 <_fwalk_sglue+0x10>

0800fe34 <siprintf>:
 800fe34:	b40e      	push	{r1, r2, r3}
 800fe36:	b500      	push	{lr}
 800fe38:	b09c      	sub	sp, #112	@ 0x70
 800fe3a:	ab1d      	add	r3, sp, #116	@ 0x74
 800fe3c:	9002      	str	r0, [sp, #8]
 800fe3e:	9006      	str	r0, [sp, #24]
 800fe40:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800fe44:	4809      	ldr	r0, [pc, #36]	@ (800fe6c <siprintf+0x38>)
 800fe46:	9107      	str	r1, [sp, #28]
 800fe48:	9104      	str	r1, [sp, #16]
 800fe4a:	4909      	ldr	r1, [pc, #36]	@ (800fe70 <siprintf+0x3c>)
 800fe4c:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe50:	9105      	str	r1, [sp, #20]
 800fe52:	6800      	ldr	r0, [r0, #0]
 800fe54:	9301      	str	r3, [sp, #4]
 800fe56:	a902      	add	r1, sp, #8
 800fe58:	f001 fb8e 	bl	8011578 <_svfiprintf_r>
 800fe5c:	9b02      	ldr	r3, [sp, #8]
 800fe5e:	2200      	movs	r2, #0
 800fe60:	701a      	strb	r2, [r3, #0]
 800fe62:	b01c      	add	sp, #112	@ 0x70
 800fe64:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe68:	b003      	add	sp, #12
 800fe6a:	4770      	bx	lr
 800fe6c:	24000130 	.word	0x24000130
 800fe70:	ffff0208 	.word	0xffff0208

0800fe74 <__sread>:
 800fe74:	b510      	push	{r4, lr}
 800fe76:	460c      	mov	r4, r1
 800fe78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe7c:	f000 f86c 	bl	800ff58 <_read_r>
 800fe80:	2800      	cmp	r0, #0
 800fe82:	bfab      	itete	ge
 800fe84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fe86:	89a3      	ldrhlt	r3, [r4, #12]
 800fe88:	181b      	addge	r3, r3, r0
 800fe8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fe8e:	bfac      	ite	ge
 800fe90:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fe92:	81a3      	strhlt	r3, [r4, #12]
 800fe94:	bd10      	pop	{r4, pc}

0800fe96 <__swrite>:
 800fe96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe9a:	461f      	mov	r7, r3
 800fe9c:	898b      	ldrh	r3, [r1, #12]
 800fe9e:	05db      	lsls	r3, r3, #23
 800fea0:	4605      	mov	r5, r0
 800fea2:	460c      	mov	r4, r1
 800fea4:	4616      	mov	r6, r2
 800fea6:	d505      	bpl.n	800feb4 <__swrite+0x1e>
 800fea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800feac:	2302      	movs	r3, #2
 800feae:	2200      	movs	r2, #0
 800feb0:	f000 f840 	bl	800ff34 <_lseek_r>
 800feb4:	89a3      	ldrh	r3, [r4, #12]
 800feb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800feba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800febe:	81a3      	strh	r3, [r4, #12]
 800fec0:	4632      	mov	r2, r6
 800fec2:	463b      	mov	r3, r7
 800fec4:	4628      	mov	r0, r5
 800fec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800feca:	f000 b857 	b.w	800ff7c <_write_r>

0800fece <__sseek>:
 800fece:	b510      	push	{r4, lr}
 800fed0:	460c      	mov	r4, r1
 800fed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fed6:	f000 f82d 	bl	800ff34 <_lseek_r>
 800feda:	1c43      	adds	r3, r0, #1
 800fedc:	89a3      	ldrh	r3, [r4, #12]
 800fede:	bf15      	itete	ne
 800fee0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fee2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fee6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800feea:	81a3      	strheq	r3, [r4, #12]
 800feec:	bf18      	it	ne
 800feee:	81a3      	strhne	r3, [r4, #12]
 800fef0:	bd10      	pop	{r4, pc}

0800fef2 <__sclose>:
 800fef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fef6:	f000 b80d 	b.w	800ff14 <_close_r>

0800fefa <memset>:
 800fefa:	4402      	add	r2, r0
 800fefc:	4603      	mov	r3, r0
 800fefe:	4293      	cmp	r3, r2
 800ff00:	d100      	bne.n	800ff04 <memset+0xa>
 800ff02:	4770      	bx	lr
 800ff04:	f803 1b01 	strb.w	r1, [r3], #1
 800ff08:	e7f9      	b.n	800fefe <memset+0x4>
	...

0800ff0c <_localeconv_r>:
 800ff0c:	4800      	ldr	r0, [pc, #0]	@ (800ff10 <_localeconv_r+0x4>)
 800ff0e:	4770      	bx	lr
 800ff10:	24000270 	.word	0x24000270

0800ff14 <_close_r>:
 800ff14:	b538      	push	{r3, r4, r5, lr}
 800ff16:	4d06      	ldr	r5, [pc, #24]	@ (800ff30 <_close_r+0x1c>)
 800ff18:	2300      	movs	r3, #0
 800ff1a:	4604      	mov	r4, r0
 800ff1c:	4608      	mov	r0, r1
 800ff1e:	602b      	str	r3, [r5, #0]
 800ff20:	f7f1 f9b6 	bl	8001290 <_close>
 800ff24:	1c43      	adds	r3, r0, #1
 800ff26:	d102      	bne.n	800ff2e <_close_r+0x1a>
 800ff28:	682b      	ldr	r3, [r5, #0]
 800ff2a:	b103      	cbz	r3, 800ff2e <_close_r+0x1a>
 800ff2c:	6023      	str	r3, [r4, #0]
 800ff2e:	bd38      	pop	{r3, r4, r5, pc}
 800ff30:	24002524 	.word	0x24002524

0800ff34 <_lseek_r>:
 800ff34:	b538      	push	{r3, r4, r5, lr}
 800ff36:	4d07      	ldr	r5, [pc, #28]	@ (800ff54 <_lseek_r+0x20>)
 800ff38:	4604      	mov	r4, r0
 800ff3a:	4608      	mov	r0, r1
 800ff3c:	4611      	mov	r1, r2
 800ff3e:	2200      	movs	r2, #0
 800ff40:	602a      	str	r2, [r5, #0]
 800ff42:	461a      	mov	r2, r3
 800ff44:	f7f1 f9cb 	bl	80012de <_lseek>
 800ff48:	1c43      	adds	r3, r0, #1
 800ff4a:	d102      	bne.n	800ff52 <_lseek_r+0x1e>
 800ff4c:	682b      	ldr	r3, [r5, #0]
 800ff4e:	b103      	cbz	r3, 800ff52 <_lseek_r+0x1e>
 800ff50:	6023      	str	r3, [r4, #0]
 800ff52:	bd38      	pop	{r3, r4, r5, pc}
 800ff54:	24002524 	.word	0x24002524

0800ff58 <_read_r>:
 800ff58:	b538      	push	{r3, r4, r5, lr}
 800ff5a:	4d07      	ldr	r5, [pc, #28]	@ (800ff78 <_read_r+0x20>)
 800ff5c:	4604      	mov	r4, r0
 800ff5e:	4608      	mov	r0, r1
 800ff60:	4611      	mov	r1, r2
 800ff62:	2200      	movs	r2, #0
 800ff64:	602a      	str	r2, [r5, #0]
 800ff66:	461a      	mov	r2, r3
 800ff68:	f7f1 f959 	bl	800121e <_read>
 800ff6c:	1c43      	adds	r3, r0, #1
 800ff6e:	d102      	bne.n	800ff76 <_read_r+0x1e>
 800ff70:	682b      	ldr	r3, [r5, #0]
 800ff72:	b103      	cbz	r3, 800ff76 <_read_r+0x1e>
 800ff74:	6023      	str	r3, [r4, #0]
 800ff76:	bd38      	pop	{r3, r4, r5, pc}
 800ff78:	24002524 	.word	0x24002524

0800ff7c <_write_r>:
 800ff7c:	b538      	push	{r3, r4, r5, lr}
 800ff7e:	4d07      	ldr	r5, [pc, #28]	@ (800ff9c <_write_r+0x20>)
 800ff80:	4604      	mov	r4, r0
 800ff82:	4608      	mov	r0, r1
 800ff84:	4611      	mov	r1, r2
 800ff86:	2200      	movs	r2, #0
 800ff88:	602a      	str	r2, [r5, #0]
 800ff8a:	461a      	mov	r2, r3
 800ff8c:	f7f1 f964 	bl	8001258 <_write>
 800ff90:	1c43      	adds	r3, r0, #1
 800ff92:	d102      	bne.n	800ff9a <_write_r+0x1e>
 800ff94:	682b      	ldr	r3, [r5, #0]
 800ff96:	b103      	cbz	r3, 800ff9a <_write_r+0x1e>
 800ff98:	6023      	str	r3, [r4, #0]
 800ff9a:	bd38      	pop	{r3, r4, r5, pc}
 800ff9c:	24002524 	.word	0x24002524

0800ffa0 <__errno>:
 800ffa0:	4b01      	ldr	r3, [pc, #4]	@ (800ffa8 <__errno+0x8>)
 800ffa2:	6818      	ldr	r0, [r3, #0]
 800ffa4:	4770      	bx	lr
 800ffa6:	bf00      	nop
 800ffa8:	24000130 	.word	0x24000130

0800ffac <__libc_init_array>:
 800ffac:	b570      	push	{r4, r5, r6, lr}
 800ffae:	4d0d      	ldr	r5, [pc, #52]	@ (800ffe4 <__libc_init_array+0x38>)
 800ffb0:	4c0d      	ldr	r4, [pc, #52]	@ (800ffe8 <__libc_init_array+0x3c>)
 800ffb2:	1b64      	subs	r4, r4, r5
 800ffb4:	10a4      	asrs	r4, r4, #2
 800ffb6:	2600      	movs	r6, #0
 800ffb8:	42a6      	cmp	r6, r4
 800ffba:	d109      	bne.n	800ffd0 <__libc_init_array+0x24>
 800ffbc:	4d0b      	ldr	r5, [pc, #44]	@ (800ffec <__libc_init_array+0x40>)
 800ffbe:	4c0c      	ldr	r4, [pc, #48]	@ (800fff0 <__libc_init_array+0x44>)
 800ffc0:	f002 f838 	bl	8012034 <_init>
 800ffc4:	1b64      	subs	r4, r4, r5
 800ffc6:	10a4      	asrs	r4, r4, #2
 800ffc8:	2600      	movs	r6, #0
 800ffca:	42a6      	cmp	r6, r4
 800ffcc:	d105      	bne.n	800ffda <__libc_init_array+0x2e>
 800ffce:	bd70      	pop	{r4, r5, r6, pc}
 800ffd0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ffd4:	4798      	blx	r3
 800ffd6:	3601      	adds	r6, #1
 800ffd8:	e7ee      	b.n	800ffb8 <__libc_init_array+0xc>
 800ffda:	f855 3b04 	ldr.w	r3, [r5], #4
 800ffde:	4798      	blx	r3
 800ffe0:	3601      	adds	r6, #1
 800ffe2:	e7f2      	b.n	800ffca <__libc_init_array+0x1e>
 800ffe4:	08012468 	.word	0x08012468
 800ffe8:	08012468 	.word	0x08012468
 800ffec:	08012468 	.word	0x08012468
 800fff0:	0801246c 	.word	0x0801246c

0800fff4 <__retarget_lock_init_recursive>:
 800fff4:	4770      	bx	lr

0800fff6 <__retarget_lock_acquire_recursive>:
 800fff6:	4770      	bx	lr

0800fff8 <__retarget_lock_release_recursive>:
 800fff8:	4770      	bx	lr

0800fffa <quorem>:
 800fffa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fffe:	6903      	ldr	r3, [r0, #16]
 8010000:	690c      	ldr	r4, [r1, #16]
 8010002:	42a3      	cmp	r3, r4
 8010004:	4607      	mov	r7, r0
 8010006:	db7e      	blt.n	8010106 <quorem+0x10c>
 8010008:	3c01      	subs	r4, #1
 801000a:	f101 0814 	add.w	r8, r1, #20
 801000e:	00a3      	lsls	r3, r4, #2
 8010010:	f100 0514 	add.w	r5, r0, #20
 8010014:	9300      	str	r3, [sp, #0]
 8010016:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801001a:	9301      	str	r3, [sp, #4]
 801001c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8010020:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8010024:	3301      	adds	r3, #1
 8010026:	429a      	cmp	r2, r3
 8010028:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801002c:	fbb2 f6f3 	udiv	r6, r2, r3
 8010030:	d32e      	bcc.n	8010090 <quorem+0x96>
 8010032:	f04f 0a00 	mov.w	sl, #0
 8010036:	46c4      	mov	ip, r8
 8010038:	46ae      	mov	lr, r5
 801003a:	46d3      	mov	fp, sl
 801003c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8010040:	b298      	uxth	r0, r3
 8010042:	fb06 a000 	mla	r0, r6, r0, sl
 8010046:	0c02      	lsrs	r2, r0, #16
 8010048:	0c1b      	lsrs	r3, r3, #16
 801004a:	fb06 2303 	mla	r3, r6, r3, r2
 801004e:	f8de 2000 	ldr.w	r2, [lr]
 8010052:	b280      	uxth	r0, r0
 8010054:	b292      	uxth	r2, r2
 8010056:	1a12      	subs	r2, r2, r0
 8010058:	445a      	add	r2, fp
 801005a:	f8de 0000 	ldr.w	r0, [lr]
 801005e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010062:	b29b      	uxth	r3, r3
 8010064:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8010068:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801006c:	b292      	uxth	r2, r2
 801006e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8010072:	45e1      	cmp	r9, ip
 8010074:	f84e 2b04 	str.w	r2, [lr], #4
 8010078:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801007c:	d2de      	bcs.n	801003c <quorem+0x42>
 801007e:	9b00      	ldr	r3, [sp, #0]
 8010080:	58eb      	ldr	r3, [r5, r3]
 8010082:	b92b      	cbnz	r3, 8010090 <quorem+0x96>
 8010084:	9b01      	ldr	r3, [sp, #4]
 8010086:	3b04      	subs	r3, #4
 8010088:	429d      	cmp	r5, r3
 801008a:	461a      	mov	r2, r3
 801008c:	d32f      	bcc.n	80100ee <quorem+0xf4>
 801008e:	613c      	str	r4, [r7, #16]
 8010090:	4638      	mov	r0, r7
 8010092:	f001 f90d 	bl	80112b0 <__mcmp>
 8010096:	2800      	cmp	r0, #0
 8010098:	db25      	blt.n	80100e6 <quorem+0xec>
 801009a:	4629      	mov	r1, r5
 801009c:	2000      	movs	r0, #0
 801009e:	f858 2b04 	ldr.w	r2, [r8], #4
 80100a2:	f8d1 c000 	ldr.w	ip, [r1]
 80100a6:	fa1f fe82 	uxth.w	lr, r2
 80100aa:	fa1f f38c 	uxth.w	r3, ip
 80100ae:	eba3 030e 	sub.w	r3, r3, lr
 80100b2:	4403      	add	r3, r0
 80100b4:	0c12      	lsrs	r2, r2, #16
 80100b6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80100ba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80100be:	b29b      	uxth	r3, r3
 80100c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80100c4:	45c1      	cmp	r9, r8
 80100c6:	f841 3b04 	str.w	r3, [r1], #4
 80100ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 80100ce:	d2e6      	bcs.n	801009e <quorem+0xa4>
 80100d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80100d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80100d8:	b922      	cbnz	r2, 80100e4 <quorem+0xea>
 80100da:	3b04      	subs	r3, #4
 80100dc:	429d      	cmp	r5, r3
 80100de:	461a      	mov	r2, r3
 80100e0:	d30b      	bcc.n	80100fa <quorem+0x100>
 80100e2:	613c      	str	r4, [r7, #16]
 80100e4:	3601      	adds	r6, #1
 80100e6:	4630      	mov	r0, r6
 80100e8:	b003      	add	sp, #12
 80100ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100ee:	6812      	ldr	r2, [r2, #0]
 80100f0:	3b04      	subs	r3, #4
 80100f2:	2a00      	cmp	r2, #0
 80100f4:	d1cb      	bne.n	801008e <quorem+0x94>
 80100f6:	3c01      	subs	r4, #1
 80100f8:	e7c6      	b.n	8010088 <quorem+0x8e>
 80100fa:	6812      	ldr	r2, [r2, #0]
 80100fc:	3b04      	subs	r3, #4
 80100fe:	2a00      	cmp	r2, #0
 8010100:	d1ef      	bne.n	80100e2 <quorem+0xe8>
 8010102:	3c01      	subs	r4, #1
 8010104:	e7ea      	b.n	80100dc <quorem+0xe2>
 8010106:	2000      	movs	r0, #0
 8010108:	e7ee      	b.n	80100e8 <quorem+0xee>
 801010a:	0000      	movs	r0, r0
 801010c:	0000      	movs	r0, r0
	...

08010110 <_dtoa_r>:
 8010110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010114:	ed2d 8b02 	vpush	{d8}
 8010118:	69c7      	ldr	r7, [r0, #28]
 801011a:	b091      	sub	sp, #68	@ 0x44
 801011c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8010120:	ec55 4b10 	vmov	r4, r5, d0
 8010124:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8010126:	9107      	str	r1, [sp, #28]
 8010128:	4681      	mov	r9, r0
 801012a:	9209      	str	r2, [sp, #36]	@ 0x24
 801012c:	930d      	str	r3, [sp, #52]	@ 0x34
 801012e:	b97f      	cbnz	r7, 8010150 <_dtoa_r+0x40>
 8010130:	2010      	movs	r0, #16
 8010132:	f000 fd8d 	bl	8010c50 <malloc>
 8010136:	4602      	mov	r2, r0
 8010138:	f8c9 001c 	str.w	r0, [r9, #28]
 801013c:	b920      	cbnz	r0, 8010148 <_dtoa_r+0x38>
 801013e:	4ba0      	ldr	r3, [pc, #640]	@ (80103c0 <_dtoa_r+0x2b0>)
 8010140:	21ef      	movs	r1, #239	@ 0xef
 8010142:	48a0      	ldr	r0, [pc, #640]	@ (80103c4 <_dtoa_r+0x2b4>)
 8010144:	f001 fbf8 	bl	8011938 <__assert_func>
 8010148:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801014c:	6007      	str	r7, [r0, #0]
 801014e:	60c7      	str	r7, [r0, #12]
 8010150:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8010154:	6819      	ldr	r1, [r3, #0]
 8010156:	b159      	cbz	r1, 8010170 <_dtoa_r+0x60>
 8010158:	685a      	ldr	r2, [r3, #4]
 801015a:	604a      	str	r2, [r1, #4]
 801015c:	2301      	movs	r3, #1
 801015e:	4093      	lsls	r3, r2
 8010160:	608b      	str	r3, [r1, #8]
 8010162:	4648      	mov	r0, r9
 8010164:	f000 fe6a 	bl	8010e3c <_Bfree>
 8010168:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801016c:	2200      	movs	r2, #0
 801016e:	601a      	str	r2, [r3, #0]
 8010170:	1e2b      	subs	r3, r5, #0
 8010172:	bfbb      	ittet	lt
 8010174:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8010178:	9303      	strlt	r3, [sp, #12]
 801017a:	2300      	movge	r3, #0
 801017c:	2201      	movlt	r2, #1
 801017e:	bfac      	ite	ge
 8010180:	6033      	strge	r3, [r6, #0]
 8010182:	6032      	strlt	r2, [r6, #0]
 8010184:	4b90      	ldr	r3, [pc, #576]	@ (80103c8 <_dtoa_r+0x2b8>)
 8010186:	9e03      	ldr	r6, [sp, #12]
 8010188:	43b3      	bics	r3, r6
 801018a:	d110      	bne.n	80101ae <_dtoa_r+0x9e>
 801018c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801018e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8010192:	6013      	str	r3, [r2, #0]
 8010194:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8010198:	4323      	orrs	r3, r4
 801019a:	f000 84de 	beq.w	8010b5a <_dtoa_r+0xa4a>
 801019e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80101a0:	4f8a      	ldr	r7, [pc, #552]	@ (80103cc <_dtoa_r+0x2bc>)
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	f000 84e0 	beq.w	8010b68 <_dtoa_r+0xa58>
 80101a8:	1cfb      	adds	r3, r7, #3
 80101aa:	f000 bcdb 	b.w	8010b64 <_dtoa_r+0xa54>
 80101ae:	ed9d 8b02 	vldr	d8, [sp, #8]
 80101b2:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80101b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101ba:	d10a      	bne.n	80101d2 <_dtoa_r+0xc2>
 80101bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80101be:	2301      	movs	r3, #1
 80101c0:	6013      	str	r3, [r2, #0]
 80101c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80101c4:	b113      	cbz	r3, 80101cc <_dtoa_r+0xbc>
 80101c6:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80101c8:	4b81      	ldr	r3, [pc, #516]	@ (80103d0 <_dtoa_r+0x2c0>)
 80101ca:	6013      	str	r3, [r2, #0]
 80101cc:	4f81      	ldr	r7, [pc, #516]	@ (80103d4 <_dtoa_r+0x2c4>)
 80101ce:	f000 bccb 	b.w	8010b68 <_dtoa_r+0xa58>
 80101d2:	aa0e      	add	r2, sp, #56	@ 0x38
 80101d4:	a90f      	add	r1, sp, #60	@ 0x3c
 80101d6:	4648      	mov	r0, r9
 80101d8:	eeb0 0b48 	vmov.f64	d0, d8
 80101dc:	f001 f918 	bl	8011410 <__d2b>
 80101e0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80101e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80101e6:	9001      	str	r0, [sp, #4]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d045      	beq.n	8010278 <_dtoa_r+0x168>
 80101ec:	eeb0 7b48 	vmov.f64	d7, d8
 80101f0:	ee18 1a90 	vmov	r1, s17
 80101f4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80101f8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80101fc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8010200:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8010204:	2500      	movs	r5, #0
 8010206:	ee07 1a90 	vmov	s15, r1
 801020a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 801020e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80103a8 <_dtoa_r+0x298>
 8010212:	ee37 7b46 	vsub.f64	d7, d7, d6
 8010216:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80103b0 <_dtoa_r+0x2a0>
 801021a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801021e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80103b8 <_dtoa_r+0x2a8>
 8010222:	ee07 3a90 	vmov	s15, r3
 8010226:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801022a:	eeb0 7b46 	vmov.f64	d7, d6
 801022e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8010232:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8010236:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801023a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801023e:	ee16 8a90 	vmov	r8, s13
 8010242:	d508      	bpl.n	8010256 <_dtoa_r+0x146>
 8010244:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8010248:	eeb4 6b47 	vcmp.f64	d6, d7
 801024c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010250:	bf18      	it	ne
 8010252:	f108 38ff 	addne.w	r8, r8, #4294967295
 8010256:	f1b8 0f16 	cmp.w	r8, #22
 801025a:	d82b      	bhi.n	80102b4 <_dtoa_r+0x1a4>
 801025c:	495e      	ldr	r1, [pc, #376]	@ (80103d8 <_dtoa_r+0x2c8>)
 801025e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8010262:	ed91 7b00 	vldr	d7, [r1]
 8010266:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801026a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801026e:	d501      	bpl.n	8010274 <_dtoa_r+0x164>
 8010270:	f108 38ff 	add.w	r8, r8, #4294967295
 8010274:	2100      	movs	r1, #0
 8010276:	e01e      	b.n	80102b6 <_dtoa_r+0x1a6>
 8010278:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801027a:	4413      	add	r3, r2
 801027c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8010280:	2920      	cmp	r1, #32
 8010282:	bfc1      	itttt	gt
 8010284:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8010288:	408e      	lslgt	r6, r1
 801028a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801028e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8010292:	bfd6      	itet	le
 8010294:	f1c1 0120 	rsble	r1, r1, #32
 8010298:	4331      	orrgt	r1, r6
 801029a:	fa04 f101 	lslle.w	r1, r4, r1
 801029e:	ee07 1a90 	vmov	s15, r1
 80102a2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80102a6:	3b01      	subs	r3, #1
 80102a8:	ee17 1a90 	vmov	r1, s15
 80102ac:	2501      	movs	r5, #1
 80102ae:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80102b2:	e7a8      	b.n	8010206 <_dtoa_r+0xf6>
 80102b4:	2101      	movs	r1, #1
 80102b6:	1ad2      	subs	r2, r2, r3
 80102b8:	1e53      	subs	r3, r2, #1
 80102ba:	9306      	str	r3, [sp, #24]
 80102bc:	bf45      	ittet	mi
 80102be:	f1c2 0301 	rsbmi	r3, r2, #1
 80102c2:	9305      	strmi	r3, [sp, #20]
 80102c4:	2300      	movpl	r3, #0
 80102c6:	2300      	movmi	r3, #0
 80102c8:	bf4c      	ite	mi
 80102ca:	9306      	strmi	r3, [sp, #24]
 80102cc:	9305      	strpl	r3, [sp, #20]
 80102ce:	f1b8 0f00 	cmp.w	r8, #0
 80102d2:	910c      	str	r1, [sp, #48]	@ 0x30
 80102d4:	db18      	blt.n	8010308 <_dtoa_r+0x1f8>
 80102d6:	9b06      	ldr	r3, [sp, #24]
 80102d8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80102dc:	4443      	add	r3, r8
 80102de:	9306      	str	r3, [sp, #24]
 80102e0:	2300      	movs	r3, #0
 80102e2:	9a07      	ldr	r2, [sp, #28]
 80102e4:	2a09      	cmp	r2, #9
 80102e6:	d849      	bhi.n	801037c <_dtoa_r+0x26c>
 80102e8:	2a05      	cmp	r2, #5
 80102ea:	bfc4      	itt	gt
 80102ec:	3a04      	subgt	r2, #4
 80102ee:	9207      	strgt	r2, [sp, #28]
 80102f0:	9a07      	ldr	r2, [sp, #28]
 80102f2:	f1a2 0202 	sub.w	r2, r2, #2
 80102f6:	bfcc      	ite	gt
 80102f8:	2400      	movgt	r4, #0
 80102fa:	2401      	movle	r4, #1
 80102fc:	2a03      	cmp	r2, #3
 80102fe:	d848      	bhi.n	8010392 <_dtoa_r+0x282>
 8010300:	e8df f002 	tbb	[pc, r2]
 8010304:	3a2c2e0b 	.word	0x3a2c2e0b
 8010308:	9b05      	ldr	r3, [sp, #20]
 801030a:	2200      	movs	r2, #0
 801030c:	eba3 0308 	sub.w	r3, r3, r8
 8010310:	9305      	str	r3, [sp, #20]
 8010312:	920a      	str	r2, [sp, #40]	@ 0x28
 8010314:	f1c8 0300 	rsb	r3, r8, #0
 8010318:	e7e3      	b.n	80102e2 <_dtoa_r+0x1d2>
 801031a:	2200      	movs	r2, #0
 801031c:	9208      	str	r2, [sp, #32]
 801031e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010320:	2a00      	cmp	r2, #0
 8010322:	dc39      	bgt.n	8010398 <_dtoa_r+0x288>
 8010324:	f04f 0b01 	mov.w	fp, #1
 8010328:	46da      	mov	sl, fp
 801032a:	465a      	mov	r2, fp
 801032c:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8010330:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8010334:	2100      	movs	r1, #0
 8010336:	2004      	movs	r0, #4
 8010338:	f100 0614 	add.w	r6, r0, #20
 801033c:	4296      	cmp	r6, r2
 801033e:	d930      	bls.n	80103a2 <_dtoa_r+0x292>
 8010340:	6079      	str	r1, [r7, #4]
 8010342:	4648      	mov	r0, r9
 8010344:	9304      	str	r3, [sp, #16]
 8010346:	f000 fd39 	bl	8010dbc <_Balloc>
 801034a:	9b04      	ldr	r3, [sp, #16]
 801034c:	4607      	mov	r7, r0
 801034e:	2800      	cmp	r0, #0
 8010350:	d146      	bne.n	80103e0 <_dtoa_r+0x2d0>
 8010352:	4b22      	ldr	r3, [pc, #136]	@ (80103dc <_dtoa_r+0x2cc>)
 8010354:	4602      	mov	r2, r0
 8010356:	f240 11af 	movw	r1, #431	@ 0x1af
 801035a:	e6f2      	b.n	8010142 <_dtoa_r+0x32>
 801035c:	2201      	movs	r2, #1
 801035e:	e7dd      	b.n	801031c <_dtoa_r+0x20c>
 8010360:	2200      	movs	r2, #0
 8010362:	9208      	str	r2, [sp, #32]
 8010364:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010366:	eb08 0b02 	add.w	fp, r8, r2
 801036a:	f10b 0a01 	add.w	sl, fp, #1
 801036e:	4652      	mov	r2, sl
 8010370:	2a01      	cmp	r2, #1
 8010372:	bfb8      	it	lt
 8010374:	2201      	movlt	r2, #1
 8010376:	e7db      	b.n	8010330 <_dtoa_r+0x220>
 8010378:	2201      	movs	r2, #1
 801037a:	e7f2      	b.n	8010362 <_dtoa_r+0x252>
 801037c:	2401      	movs	r4, #1
 801037e:	2200      	movs	r2, #0
 8010380:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8010384:	f04f 3bff 	mov.w	fp, #4294967295
 8010388:	2100      	movs	r1, #0
 801038a:	46da      	mov	sl, fp
 801038c:	2212      	movs	r2, #18
 801038e:	9109      	str	r1, [sp, #36]	@ 0x24
 8010390:	e7ce      	b.n	8010330 <_dtoa_r+0x220>
 8010392:	2201      	movs	r2, #1
 8010394:	9208      	str	r2, [sp, #32]
 8010396:	e7f5      	b.n	8010384 <_dtoa_r+0x274>
 8010398:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801039c:	46da      	mov	sl, fp
 801039e:	465a      	mov	r2, fp
 80103a0:	e7c6      	b.n	8010330 <_dtoa_r+0x220>
 80103a2:	3101      	adds	r1, #1
 80103a4:	0040      	lsls	r0, r0, #1
 80103a6:	e7c7      	b.n	8010338 <_dtoa_r+0x228>
 80103a8:	636f4361 	.word	0x636f4361
 80103ac:	3fd287a7 	.word	0x3fd287a7
 80103b0:	8b60c8b3 	.word	0x8b60c8b3
 80103b4:	3fc68a28 	.word	0x3fc68a28
 80103b8:	509f79fb 	.word	0x509f79fb
 80103bc:	3fd34413 	.word	0x3fd34413
 80103c0:	08012129 	.word	0x08012129
 80103c4:	08012140 	.word	0x08012140
 80103c8:	7ff00000 	.word	0x7ff00000
 80103cc:	08012125 	.word	0x08012125
 80103d0:	080120f9 	.word	0x080120f9
 80103d4:	080120f8 	.word	0x080120f8
 80103d8:	08012238 	.word	0x08012238
 80103dc:	08012198 	.word	0x08012198
 80103e0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80103e4:	f1ba 0f0e 	cmp.w	sl, #14
 80103e8:	6010      	str	r0, [r2, #0]
 80103ea:	d86f      	bhi.n	80104cc <_dtoa_r+0x3bc>
 80103ec:	2c00      	cmp	r4, #0
 80103ee:	d06d      	beq.n	80104cc <_dtoa_r+0x3bc>
 80103f0:	f1b8 0f00 	cmp.w	r8, #0
 80103f4:	f340 80c2 	ble.w	801057c <_dtoa_r+0x46c>
 80103f8:	4aca      	ldr	r2, [pc, #808]	@ (8010724 <_dtoa_r+0x614>)
 80103fa:	f008 010f 	and.w	r1, r8, #15
 80103fe:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8010402:	f418 7f80 	tst.w	r8, #256	@ 0x100
 8010406:	ed92 7b00 	vldr	d7, [r2]
 801040a:	ea4f 1128 	mov.w	r1, r8, asr #4
 801040e:	f000 80a9 	beq.w	8010564 <_dtoa_r+0x454>
 8010412:	4ac5      	ldr	r2, [pc, #788]	@ (8010728 <_dtoa_r+0x618>)
 8010414:	ed92 6b08 	vldr	d6, [r2, #32]
 8010418:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801041c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8010420:	f001 010f 	and.w	r1, r1, #15
 8010424:	2203      	movs	r2, #3
 8010426:	48c0      	ldr	r0, [pc, #768]	@ (8010728 <_dtoa_r+0x618>)
 8010428:	2900      	cmp	r1, #0
 801042a:	f040 809d 	bne.w	8010568 <_dtoa_r+0x458>
 801042e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8010432:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8010436:	ed8d 7b02 	vstr	d7, [sp, #8]
 801043a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801043c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010440:	2900      	cmp	r1, #0
 8010442:	f000 80c1 	beq.w	80105c8 <_dtoa_r+0x4b8>
 8010446:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801044a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801044e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010452:	f140 80b9 	bpl.w	80105c8 <_dtoa_r+0x4b8>
 8010456:	f1ba 0f00 	cmp.w	sl, #0
 801045a:	f000 80b5 	beq.w	80105c8 <_dtoa_r+0x4b8>
 801045e:	f1bb 0f00 	cmp.w	fp, #0
 8010462:	dd31      	ble.n	80104c8 <_dtoa_r+0x3b8>
 8010464:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8010468:	ee27 7b06 	vmul.f64	d7, d7, d6
 801046c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010470:	f108 31ff 	add.w	r1, r8, #4294967295
 8010474:	9104      	str	r1, [sp, #16]
 8010476:	3201      	adds	r2, #1
 8010478:	465c      	mov	r4, fp
 801047a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801047e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8010482:	ee07 2a90 	vmov	s15, r2
 8010486:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801048a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801048e:	ee15 2a90 	vmov	r2, s11
 8010492:	ec51 0b15 	vmov	r0, r1, d5
 8010496:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801049a:	2c00      	cmp	r4, #0
 801049c:	f040 8098 	bne.w	80105d0 <_dtoa_r+0x4c0>
 80104a0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80104a4:	ee36 6b47 	vsub.f64	d6, d6, d7
 80104a8:	ec41 0b17 	vmov	d7, r0, r1
 80104ac:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80104b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104b4:	f300 8261 	bgt.w	801097a <_dtoa_r+0x86a>
 80104b8:	eeb1 7b47 	vneg.f64	d7, d7
 80104bc:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80104c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104c4:	f100 80f5 	bmi.w	80106b2 <_dtoa_r+0x5a2>
 80104c8:	ed8d 8b02 	vstr	d8, [sp, #8]
 80104cc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80104ce:	2a00      	cmp	r2, #0
 80104d0:	f2c0 812c 	blt.w	801072c <_dtoa_r+0x61c>
 80104d4:	f1b8 0f0e 	cmp.w	r8, #14
 80104d8:	f300 8128 	bgt.w	801072c <_dtoa_r+0x61c>
 80104dc:	4b91      	ldr	r3, [pc, #580]	@ (8010724 <_dtoa_r+0x614>)
 80104de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80104e2:	ed93 6b00 	vldr	d6, [r3]
 80104e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	da03      	bge.n	80104f4 <_dtoa_r+0x3e4>
 80104ec:	f1ba 0f00 	cmp.w	sl, #0
 80104f0:	f340 80d2 	ble.w	8010698 <_dtoa_r+0x588>
 80104f4:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80104f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80104fc:	463e      	mov	r6, r7
 80104fe:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010502:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010506:	ee15 3a10 	vmov	r3, s10
 801050a:	3330      	adds	r3, #48	@ 0x30
 801050c:	f806 3b01 	strb.w	r3, [r6], #1
 8010510:	1bf3      	subs	r3, r6, r7
 8010512:	459a      	cmp	sl, r3
 8010514:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010518:	eea3 7b46 	vfms.f64	d7, d3, d6
 801051c:	f040 80f8 	bne.w	8010710 <_dtoa_r+0x600>
 8010520:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010524:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801052c:	f300 80dd 	bgt.w	80106ea <_dtoa_r+0x5da>
 8010530:	eeb4 7b46 	vcmp.f64	d7, d6
 8010534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010538:	d104      	bne.n	8010544 <_dtoa_r+0x434>
 801053a:	ee15 3a10 	vmov	r3, s10
 801053e:	07db      	lsls	r3, r3, #31
 8010540:	f100 80d3 	bmi.w	80106ea <_dtoa_r+0x5da>
 8010544:	9901      	ldr	r1, [sp, #4]
 8010546:	4648      	mov	r0, r9
 8010548:	f000 fc78 	bl	8010e3c <_Bfree>
 801054c:	2300      	movs	r3, #0
 801054e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010550:	7033      	strb	r3, [r6, #0]
 8010552:	f108 0301 	add.w	r3, r8, #1
 8010556:	6013      	str	r3, [r2, #0]
 8010558:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801055a:	2b00      	cmp	r3, #0
 801055c:	f000 8304 	beq.w	8010b68 <_dtoa_r+0xa58>
 8010560:	601e      	str	r6, [r3, #0]
 8010562:	e301      	b.n	8010b68 <_dtoa_r+0xa58>
 8010564:	2202      	movs	r2, #2
 8010566:	e75e      	b.n	8010426 <_dtoa_r+0x316>
 8010568:	07cc      	lsls	r4, r1, #31
 801056a:	d504      	bpl.n	8010576 <_dtoa_r+0x466>
 801056c:	ed90 6b00 	vldr	d6, [r0]
 8010570:	3201      	adds	r2, #1
 8010572:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010576:	1049      	asrs	r1, r1, #1
 8010578:	3008      	adds	r0, #8
 801057a:	e755      	b.n	8010428 <_dtoa_r+0x318>
 801057c:	d022      	beq.n	80105c4 <_dtoa_r+0x4b4>
 801057e:	f1c8 0100 	rsb	r1, r8, #0
 8010582:	4a68      	ldr	r2, [pc, #416]	@ (8010724 <_dtoa_r+0x614>)
 8010584:	f001 000f 	and.w	r0, r1, #15
 8010588:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 801058c:	ed92 7b00 	vldr	d7, [r2]
 8010590:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010594:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010598:	4863      	ldr	r0, [pc, #396]	@ (8010728 <_dtoa_r+0x618>)
 801059a:	1109      	asrs	r1, r1, #4
 801059c:	2400      	movs	r4, #0
 801059e:	2202      	movs	r2, #2
 80105a0:	b929      	cbnz	r1, 80105ae <_dtoa_r+0x49e>
 80105a2:	2c00      	cmp	r4, #0
 80105a4:	f43f af49 	beq.w	801043a <_dtoa_r+0x32a>
 80105a8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80105ac:	e745      	b.n	801043a <_dtoa_r+0x32a>
 80105ae:	07ce      	lsls	r6, r1, #31
 80105b0:	d505      	bpl.n	80105be <_dtoa_r+0x4ae>
 80105b2:	ed90 6b00 	vldr	d6, [r0]
 80105b6:	3201      	adds	r2, #1
 80105b8:	2401      	movs	r4, #1
 80105ba:	ee27 7b06 	vmul.f64	d7, d7, d6
 80105be:	1049      	asrs	r1, r1, #1
 80105c0:	3008      	adds	r0, #8
 80105c2:	e7ed      	b.n	80105a0 <_dtoa_r+0x490>
 80105c4:	2202      	movs	r2, #2
 80105c6:	e738      	b.n	801043a <_dtoa_r+0x32a>
 80105c8:	f8cd 8010 	str.w	r8, [sp, #16]
 80105cc:	4654      	mov	r4, sl
 80105ce:	e754      	b.n	801047a <_dtoa_r+0x36a>
 80105d0:	4a54      	ldr	r2, [pc, #336]	@ (8010724 <_dtoa_r+0x614>)
 80105d2:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80105d6:	ed12 4b02 	vldr	d4, [r2, #-8]
 80105da:	9a08      	ldr	r2, [sp, #32]
 80105dc:	ec41 0b17 	vmov	d7, r0, r1
 80105e0:	443c      	add	r4, r7
 80105e2:	b34a      	cbz	r2, 8010638 <_dtoa_r+0x528>
 80105e4:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80105e8:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80105ec:	463e      	mov	r6, r7
 80105ee:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80105f2:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80105f6:	ee35 7b47 	vsub.f64	d7, d5, d7
 80105fa:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80105fe:	ee14 2a90 	vmov	r2, s9
 8010602:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010606:	3230      	adds	r2, #48	@ 0x30
 8010608:	ee36 6b45 	vsub.f64	d6, d6, d5
 801060c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8010610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010614:	f806 2b01 	strb.w	r2, [r6], #1
 8010618:	d438      	bmi.n	801068c <_dtoa_r+0x57c>
 801061a:	ee32 5b46 	vsub.f64	d5, d2, d6
 801061e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8010622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010626:	d462      	bmi.n	80106ee <_dtoa_r+0x5de>
 8010628:	42a6      	cmp	r6, r4
 801062a:	f43f af4d 	beq.w	80104c8 <_dtoa_r+0x3b8>
 801062e:	ee27 7b03 	vmul.f64	d7, d7, d3
 8010632:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010636:	e7e0      	b.n	80105fa <_dtoa_r+0x4ea>
 8010638:	4621      	mov	r1, r4
 801063a:	463e      	mov	r6, r7
 801063c:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010640:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010644:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010648:	ee14 2a90 	vmov	r2, s9
 801064c:	3230      	adds	r2, #48	@ 0x30
 801064e:	f806 2b01 	strb.w	r2, [r6], #1
 8010652:	42a6      	cmp	r6, r4
 8010654:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010658:	ee36 6b45 	vsub.f64	d6, d6, d5
 801065c:	d119      	bne.n	8010692 <_dtoa_r+0x582>
 801065e:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8010662:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010666:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801066a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801066e:	dc3e      	bgt.n	80106ee <_dtoa_r+0x5de>
 8010670:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010674:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801067c:	f57f af24 	bpl.w	80104c8 <_dtoa_r+0x3b8>
 8010680:	460e      	mov	r6, r1
 8010682:	3901      	subs	r1, #1
 8010684:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010688:	2b30      	cmp	r3, #48	@ 0x30
 801068a:	d0f9      	beq.n	8010680 <_dtoa_r+0x570>
 801068c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8010690:	e758      	b.n	8010544 <_dtoa_r+0x434>
 8010692:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010696:	e7d5      	b.n	8010644 <_dtoa_r+0x534>
 8010698:	d10b      	bne.n	80106b2 <_dtoa_r+0x5a2>
 801069a:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 801069e:	ee26 6b07 	vmul.f64	d6, d6, d7
 80106a2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80106a6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80106aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106ae:	f2c0 8161 	blt.w	8010974 <_dtoa_r+0x864>
 80106b2:	2400      	movs	r4, #0
 80106b4:	4625      	mov	r5, r4
 80106b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106b8:	43db      	mvns	r3, r3
 80106ba:	9304      	str	r3, [sp, #16]
 80106bc:	463e      	mov	r6, r7
 80106be:	f04f 0800 	mov.w	r8, #0
 80106c2:	4621      	mov	r1, r4
 80106c4:	4648      	mov	r0, r9
 80106c6:	f000 fbb9 	bl	8010e3c <_Bfree>
 80106ca:	2d00      	cmp	r5, #0
 80106cc:	d0de      	beq.n	801068c <_dtoa_r+0x57c>
 80106ce:	f1b8 0f00 	cmp.w	r8, #0
 80106d2:	d005      	beq.n	80106e0 <_dtoa_r+0x5d0>
 80106d4:	45a8      	cmp	r8, r5
 80106d6:	d003      	beq.n	80106e0 <_dtoa_r+0x5d0>
 80106d8:	4641      	mov	r1, r8
 80106da:	4648      	mov	r0, r9
 80106dc:	f000 fbae 	bl	8010e3c <_Bfree>
 80106e0:	4629      	mov	r1, r5
 80106e2:	4648      	mov	r0, r9
 80106e4:	f000 fbaa 	bl	8010e3c <_Bfree>
 80106e8:	e7d0      	b.n	801068c <_dtoa_r+0x57c>
 80106ea:	f8cd 8010 	str.w	r8, [sp, #16]
 80106ee:	4633      	mov	r3, r6
 80106f0:	461e      	mov	r6, r3
 80106f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80106f6:	2a39      	cmp	r2, #57	@ 0x39
 80106f8:	d106      	bne.n	8010708 <_dtoa_r+0x5f8>
 80106fa:	429f      	cmp	r7, r3
 80106fc:	d1f8      	bne.n	80106f0 <_dtoa_r+0x5e0>
 80106fe:	9a04      	ldr	r2, [sp, #16]
 8010700:	3201      	adds	r2, #1
 8010702:	9204      	str	r2, [sp, #16]
 8010704:	2230      	movs	r2, #48	@ 0x30
 8010706:	703a      	strb	r2, [r7, #0]
 8010708:	781a      	ldrb	r2, [r3, #0]
 801070a:	3201      	adds	r2, #1
 801070c:	701a      	strb	r2, [r3, #0]
 801070e:	e7bd      	b.n	801068c <_dtoa_r+0x57c>
 8010710:	ee27 7b04 	vmul.f64	d7, d7, d4
 8010714:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8010718:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801071c:	f47f aeef 	bne.w	80104fe <_dtoa_r+0x3ee>
 8010720:	e710      	b.n	8010544 <_dtoa_r+0x434>
 8010722:	bf00      	nop
 8010724:	08012238 	.word	0x08012238
 8010728:	08012210 	.word	0x08012210
 801072c:	9908      	ldr	r1, [sp, #32]
 801072e:	2900      	cmp	r1, #0
 8010730:	f000 80e3 	beq.w	80108fa <_dtoa_r+0x7ea>
 8010734:	9907      	ldr	r1, [sp, #28]
 8010736:	2901      	cmp	r1, #1
 8010738:	f300 80c8 	bgt.w	80108cc <_dtoa_r+0x7bc>
 801073c:	2d00      	cmp	r5, #0
 801073e:	f000 80c1 	beq.w	80108c4 <_dtoa_r+0x7b4>
 8010742:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010746:	9e05      	ldr	r6, [sp, #20]
 8010748:	461c      	mov	r4, r3
 801074a:	9304      	str	r3, [sp, #16]
 801074c:	9b05      	ldr	r3, [sp, #20]
 801074e:	4413      	add	r3, r2
 8010750:	9305      	str	r3, [sp, #20]
 8010752:	9b06      	ldr	r3, [sp, #24]
 8010754:	2101      	movs	r1, #1
 8010756:	4413      	add	r3, r2
 8010758:	4648      	mov	r0, r9
 801075a:	9306      	str	r3, [sp, #24]
 801075c:	f000 fc22 	bl	8010fa4 <__i2b>
 8010760:	9b04      	ldr	r3, [sp, #16]
 8010762:	4605      	mov	r5, r0
 8010764:	b166      	cbz	r6, 8010780 <_dtoa_r+0x670>
 8010766:	9a06      	ldr	r2, [sp, #24]
 8010768:	2a00      	cmp	r2, #0
 801076a:	dd09      	ble.n	8010780 <_dtoa_r+0x670>
 801076c:	42b2      	cmp	r2, r6
 801076e:	9905      	ldr	r1, [sp, #20]
 8010770:	bfa8      	it	ge
 8010772:	4632      	movge	r2, r6
 8010774:	1a89      	subs	r1, r1, r2
 8010776:	9105      	str	r1, [sp, #20]
 8010778:	9906      	ldr	r1, [sp, #24]
 801077a:	1ab6      	subs	r6, r6, r2
 801077c:	1a8a      	subs	r2, r1, r2
 801077e:	9206      	str	r2, [sp, #24]
 8010780:	b1fb      	cbz	r3, 80107c2 <_dtoa_r+0x6b2>
 8010782:	9a08      	ldr	r2, [sp, #32]
 8010784:	2a00      	cmp	r2, #0
 8010786:	f000 80bc 	beq.w	8010902 <_dtoa_r+0x7f2>
 801078a:	b19c      	cbz	r4, 80107b4 <_dtoa_r+0x6a4>
 801078c:	4629      	mov	r1, r5
 801078e:	4622      	mov	r2, r4
 8010790:	4648      	mov	r0, r9
 8010792:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010794:	f000 fcc6 	bl	8011124 <__pow5mult>
 8010798:	9a01      	ldr	r2, [sp, #4]
 801079a:	4601      	mov	r1, r0
 801079c:	4605      	mov	r5, r0
 801079e:	4648      	mov	r0, r9
 80107a0:	f000 fc16 	bl	8010fd0 <__multiply>
 80107a4:	9901      	ldr	r1, [sp, #4]
 80107a6:	9004      	str	r0, [sp, #16]
 80107a8:	4648      	mov	r0, r9
 80107aa:	f000 fb47 	bl	8010e3c <_Bfree>
 80107ae:	9a04      	ldr	r2, [sp, #16]
 80107b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80107b2:	9201      	str	r2, [sp, #4]
 80107b4:	1b1a      	subs	r2, r3, r4
 80107b6:	d004      	beq.n	80107c2 <_dtoa_r+0x6b2>
 80107b8:	9901      	ldr	r1, [sp, #4]
 80107ba:	4648      	mov	r0, r9
 80107bc:	f000 fcb2 	bl	8011124 <__pow5mult>
 80107c0:	9001      	str	r0, [sp, #4]
 80107c2:	2101      	movs	r1, #1
 80107c4:	4648      	mov	r0, r9
 80107c6:	f000 fbed 	bl	8010fa4 <__i2b>
 80107ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80107cc:	4604      	mov	r4, r0
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	f000 81d0 	beq.w	8010b74 <_dtoa_r+0xa64>
 80107d4:	461a      	mov	r2, r3
 80107d6:	4601      	mov	r1, r0
 80107d8:	4648      	mov	r0, r9
 80107da:	f000 fca3 	bl	8011124 <__pow5mult>
 80107de:	9b07      	ldr	r3, [sp, #28]
 80107e0:	2b01      	cmp	r3, #1
 80107e2:	4604      	mov	r4, r0
 80107e4:	f300 8095 	bgt.w	8010912 <_dtoa_r+0x802>
 80107e8:	9b02      	ldr	r3, [sp, #8]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	f040 808b 	bne.w	8010906 <_dtoa_r+0x7f6>
 80107f0:	9b03      	ldr	r3, [sp, #12]
 80107f2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80107f6:	2a00      	cmp	r2, #0
 80107f8:	f040 8087 	bne.w	801090a <_dtoa_r+0x7fa>
 80107fc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8010800:	0d12      	lsrs	r2, r2, #20
 8010802:	0512      	lsls	r2, r2, #20
 8010804:	2a00      	cmp	r2, #0
 8010806:	f000 8082 	beq.w	801090e <_dtoa_r+0x7fe>
 801080a:	9b05      	ldr	r3, [sp, #20]
 801080c:	3301      	adds	r3, #1
 801080e:	9305      	str	r3, [sp, #20]
 8010810:	9b06      	ldr	r3, [sp, #24]
 8010812:	3301      	adds	r3, #1
 8010814:	9306      	str	r3, [sp, #24]
 8010816:	2301      	movs	r3, #1
 8010818:	930b      	str	r3, [sp, #44]	@ 0x2c
 801081a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801081c:	2b00      	cmp	r3, #0
 801081e:	f000 81af 	beq.w	8010b80 <_dtoa_r+0xa70>
 8010822:	6922      	ldr	r2, [r4, #16]
 8010824:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8010828:	6910      	ldr	r0, [r2, #16]
 801082a:	f000 fb6f 	bl	8010f0c <__hi0bits>
 801082e:	f1c0 0020 	rsb	r0, r0, #32
 8010832:	9b06      	ldr	r3, [sp, #24]
 8010834:	4418      	add	r0, r3
 8010836:	f010 001f 	ands.w	r0, r0, #31
 801083a:	d076      	beq.n	801092a <_dtoa_r+0x81a>
 801083c:	f1c0 0220 	rsb	r2, r0, #32
 8010840:	2a04      	cmp	r2, #4
 8010842:	dd69      	ble.n	8010918 <_dtoa_r+0x808>
 8010844:	9b05      	ldr	r3, [sp, #20]
 8010846:	f1c0 001c 	rsb	r0, r0, #28
 801084a:	4403      	add	r3, r0
 801084c:	9305      	str	r3, [sp, #20]
 801084e:	9b06      	ldr	r3, [sp, #24]
 8010850:	4406      	add	r6, r0
 8010852:	4403      	add	r3, r0
 8010854:	9306      	str	r3, [sp, #24]
 8010856:	9b05      	ldr	r3, [sp, #20]
 8010858:	2b00      	cmp	r3, #0
 801085a:	dd05      	ble.n	8010868 <_dtoa_r+0x758>
 801085c:	9901      	ldr	r1, [sp, #4]
 801085e:	461a      	mov	r2, r3
 8010860:	4648      	mov	r0, r9
 8010862:	f000 fcb9 	bl	80111d8 <__lshift>
 8010866:	9001      	str	r0, [sp, #4]
 8010868:	9b06      	ldr	r3, [sp, #24]
 801086a:	2b00      	cmp	r3, #0
 801086c:	dd05      	ble.n	801087a <_dtoa_r+0x76a>
 801086e:	4621      	mov	r1, r4
 8010870:	461a      	mov	r2, r3
 8010872:	4648      	mov	r0, r9
 8010874:	f000 fcb0 	bl	80111d8 <__lshift>
 8010878:	4604      	mov	r4, r0
 801087a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801087c:	2b00      	cmp	r3, #0
 801087e:	d056      	beq.n	801092e <_dtoa_r+0x81e>
 8010880:	9801      	ldr	r0, [sp, #4]
 8010882:	4621      	mov	r1, r4
 8010884:	f000 fd14 	bl	80112b0 <__mcmp>
 8010888:	2800      	cmp	r0, #0
 801088a:	da50      	bge.n	801092e <_dtoa_r+0x81e>
 801088c:	f108 33ff 	add.w	r3, r8, #4294967295
 8010890:	9304      	str	r3, [sp, #16]
 8010892:	9901      	ldr	r1, [sp, #4]
 8010894:	2300      	movs	r3, #0
 8010896:	220a      	movs	r2, #10
 8010898:	4648      	mov	r0, r9
 801089a:	f000 faf1 	bl	8010e80 <__multadd>
 801089e:	9b08      	ldr	r3, [sp, #32]
 80108a0:	9001      	str	r0, [sp, #4]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	f000 816e 	beq.w	8010b84 <_dtoa_r+0xa74>
 80108a8:	4629      	mov	r1, r5
 80108aa:	2300      	movs	r3, #0
 80108ac:	220a      	movs	r2, #10
 80108ae:	4648      	mov	r0, r9
 80108b0:	f000 fae6 	bl	8010e80 <__multadd>
 80108b4:	f1bb 0f00 	cmp.w	fp, #0
 80108b8:	4605      	mov	r5, r0
 80108ba:	dc64      	bgt.n	8010986 <_dtoa_r+0x876>
 80108bc:	9b07      	ldr	r3, [sp, #28]
 80108be:	2b02      	cmp	r3, #2
 80108c0:	dc3e      	bgt.n	8010940 <_dtoa_r+0x830>
 80108c2:	e060      	b.n	8010986 <_dtoa_r+0x876>
 80108c4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80108c6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80108ca:	e73c      	b.n	8010746 <_dtoa_r+0x636>
 80108cc:	f10a 34ff 	add.w	r4, sl, #4294967295
 80108d0:	42a3      	cmp	r3, r4
 80108d2:	bfbf      	itttt	lt
 80108d4:	1ae2      	sublt	r2, r4, r3
 80108d6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80108d8:	189b      	addlt	r3, r3, r2
 80108da:	930a      	strlt	r3, [sp, #40]	@ 0x28
 80108dc:	bfae      	itee	ge
 80108de:	1b1c      	subge	r4, r3, r4
 80108e0:	4623      	movlt	r3, r4
 80108e2:	2400      	movlt	r4, #0
 80108e4:	f1ba 0f00 	cmp.w	sl, #0
 80108e8:	bfb5      	itete	lt
 80108ea:	9a05      	ldrlt	r2, [sp, #20]
 80108ec:	9e05      	ldrge	r6, [sp, #20]
 80108ee:	eba2 060a 	sublt.w	r6, r2, sl
 80108f2:	4652      	movge	r2, sl
 80108f4:	bfb8      	it	lt
 80108f6:	2200      	movlt	r2, #0
 80108f8:	e727      	b.n	801074a <_dtoa_r+0x63a>
 80108fa:	9e05      	ldr	r6, [sp, #20]
 80108fc:	9d08      	ldr	r5, [sp, #32]
 80108fe:	461c      	mov	r4, r3
 8010900:	e730      	b.n	8010764 <_dtoa_r+0x654>
 8010902:	461a      	mov	r2, r3
 8010904:	e758      	b.n	80107b8 <_dtoa_r+0x6a8>
 8010906:	2300      	movs	r3, #0
 8010908:	e786      	b.n	8010818 <_dtoa_r+0x708>
 801090a:	9b02      	ldr	r3, [sp, #8]
 801090c:	e784      	b.n	8010818 <_dtoa_r+0x708>
 801090e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8010910:	e783      	b.n	801081a <_dtoa_r+0x70a>
 8010912:	2300      	movs	r3, #0
 8010914:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010916:	e784      	b.n	8010822 <_dtoa_r+0x712>
 8010918:	d09d      	beq.n	8010856 <_dtoa_r+0x746>
 801091a:	9b05      	ldr	r3, [sp, #20]
 801091c:	321c      	adds	r2, #28
 801091e:	4413      	add	r3, r2
 8010920:	9305      	str	r3, [sp, #20]
 8010922:	9b06      	ldr	r3, [sp, #24]
 8010924:	4416      	add	r6, r2
 8010926:	4413      	add	r3, r2
 8010928:	e794      	b.n	8010854 <_dtoa_r+0x744>
 801092a:	4602      	mov	r2, r0
 801092c:	e7f5      	b.n	801091a <_dtoa_r+0x80a>
 801092e:	f1ba 0f00 	cmp.w	sl, #0
 8010932:	f8cd 8010 	str.w	r8, [sp, #16]
 8010936:	46d3      	mov	fp, sl
 8010938:	dc21      	bgt.n	801097e <_dtoa_r+0x86e>
 801093a:	9b07      	ldr	r3, [sp, #28]
 801093c:	2b02      	cmp	r3, #2
 801093e:	dd1e      	ble.n	801097e <_dtoa_r+0x86e>
 8010940:	f1bb 0f00 	cmp.w	fp, #0
 8010944:	f47f aeb7 	bne.w	80106b6 <_dtoa_r+0x5a6>
 8010948:	4621      	mov	r1, r4
 801094a:	465b      	mov	r3, fp
 801094c:	2205      	movs	r2, #5
 801094e:	4648      	mov	r0, r9
 8010950:	f000 fa96 	bl	8010e80 <__multadd>
 8010954:	4601      	mov	r1, r0
 8010956:	4604      	mov	r4, r0
 8010958:	9801      	ldr	r0, [sp, #4]
 801095a:	f000 fca9 	bl	80112b0 <__mcmp>
 801095e:	2800      	cmp	r0, #0
 8010960:	f77f aea9 	ble.w	80106b6 <_dtoa_r+0x5a6>
 8010964:	463e      	mov	r6, r7
 8010966:	2331      	movs	r3, #49	@ 0x31
 8010968:	f806 3b01 	strb.w	r3, [r6], #1
 801096c:	9b04      	ldr	r3, [sp, #16]
 801096e:	3301      	adds	r3, #1
 8010970:	9304      	str	r3, [sp, #16]
 8010972:	e6a4      	b.n	80106be <_dtoa_r+0x5ae>
 8010974:	f8cd 8010 	str.w	r8, [sp, #16]
 8010978:	4654      	mov	r4, sl
 801097a:	4625      	mov	r5, r4
 801097c:	e7f2      	b.n	8010964 <_dtoa_r+0x854>
 801097e:	9b08      	ldr	r3, [sp, #32]
 8010980:	2b00      	cmp	r3, #0
 8010982:	f000 8103 	beq.w	8010b8c <_dtoa_r+0xa7c>
 8010986:	2e00      	cmp	r6, #0
 8010988:	dd05      	ble.n	8010996 <_dtoa_r+0x886>
 801098a:	4629      	mov	r1, r5
 801098c:	4632      	mov	r2, r6
 801098e:	4648      	mov	r0, r9
 8010990:	f000 fc22 	bl	80111d8 <__lshift>
 8010994:	4605      	mov	r5, r0
 8010996:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010998:	2b00      	cmp	r3, #0
 801099a:	d058      	beq.n	8010a4e <_dtoa_r+0x93e>
 801099c:	6869      	ldr	r1, [r5, #4]
 801099e:	4648      	mov	r0, r9
 80109a0:	f000 fa0c 	bl	8010dbc <_Balloc>
 80109a4:	4606      	mov	r6, r0
 80109a6:	b928      	cbnz	r0, 80109b4 <_dtoa_r+0x8a4>
 80109a8:	4b82      	ldr	r3, [pc, #520]	@ (8010bb4 <_dtoa_r+0xaa4>)
 80109aa:	4602      	mov	r2, r0
 80109ac:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80109b0:	f7ff bbc7 	b.w	8010142 <_dtoa_r+0x32>
 80109b4:	692a      	ldr	r2, [r5, #16]
 80109b6:	3202      	adds	r2, #2
 80109b8:	0092      	lsls	r2, r2, #2
 80109ba:	f105 010c 	add.w	r1, r5, #12
 80109be:	300c      	adds	r0, #12
 80109c0:	f000 ffac 	bl	801191c <memcpy>
 80109c4:	2201      	movs	r2, #1
 80109c6:	4631      	mov	r1, r6
 80109c8:	4648      	mov	r0, r9
 80109ca:	f000 fc05 	bl	80111d8 <__lshift>
 80109ce:	1c7b      	adds	r3, r7, #1
 80109d0:	9305      	str	r3, [sp, #20]
 80109d2:	eb07 030b 	add.w	r3, r7, fp
 80109d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80109d8:	9b02      	ldr	r3, [sp, #8]
 80109da:	f003 0301 	and.w	r3, r3, #1
 80109de:	46a8      	mov	r8, r5
 80109e0:	9308      	str	r3, [sp, #32]
 80109e2:	4605      	mov	r5, r0
 80109e4:	9b05      	ldr	r3, [sp, #20]
 80109e6:	9801      	ldr	r0, [sp, #4]
 80109e8:	4621      	mov	r1, r4
 80109ea:	f103 3bff 	add.w	fp, r3, #4294967295
 80109ee:	f7ff fb04 	bl	800fffa <quorem>
 80109f2:	4641      	mov	r1, r8
 80109f4:	9002      	str	r0, [sp, #8]
 80109f6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80109fa:	9801      	ldr	r0, [sp, #4]
 80109fc:	f000 fc58 	bl	80112b0 <__mcmp>
 8010a00:	462a      	mov	r2, r5
 8010a02:	9006      	str	r0, [sp, #24]
 8010a04:	4621      	mov	r1, r4
 8010a06:	4648      	mov	r0, r9
 8010a08:	f000 fc6e 	bl	80112e8 <__mdiff>
 8010a0c:	68c2      	ldr	r2, [r0, #12]
 8010a0e:	4606      	mov	r6, r0
 8010a10:	b9fa      	cbnz	r2, 8010a52 <_dtoa_r+0x942>
 8010a12:	4601      	mov	r1, r0
 8010a14:	9801      	ldr	r0, [sp, #4]
 8010a16:	f000 fc4b 	bl	80112b0 <__mcmp>
 8010a1a:	4602      	mov	r2, r0
 8010a1c:	4631      	mov	r1, r6
 8010a1e:	4648      	mov	r0, r9
 8010a20:	920a      	str	r2, [sp, #40]	@ 0x28
 8010a22:	f000 fa0b 	bl	8010e3c <_Bfree>
 8010a26:	9b07      	ldr	r3, [sp, #28]
 8010a28:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010a2a:	9e05      	ldr	r6, [sp, #20]
 8010a2c:	ea43 0102 	orr.w	r1, r3, r2
 8010a30:	9b08      	ldr	r3, [sp, #32]
 8010a32:	4319      	orrs	r1, r3
 8010a34:	d10f      	bne.n	8010a56 <_dtoa_r+0x946>
 8010a36:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010a3a:	d028      	beq.n	8010a8e <_dtoa_r+0x97e>
 8010a3c:	9b06      	ldr	r3, [sp, #24]
 8010a3e:	2b00      	cmp	r3, #0
 8010a40:	dd02      	ble.n	8010a48 <_dtoa_r+0x938>
 8010a42:	9b02      	ldr	r3, [sp, #8]
 8010a44:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8010a48:	f88b a000 	strb.w	sl, [fp]
 8010a4c:	e639      	b.n	80106c2 <_dtoa_r+0x5b2>
 8010a4e:	4628      	mov	r0, r5
 8010a50:	e7bd      	b.n	80109ce <_dtoa_r+0x8be>
 8010a52:	2201      	movs	r2, #1
 8010a54:	e7e2      	b.n	8010a1c <_dtoa_r+0x90c>
 8010a56:	9b06      	ldr	r3, [sp, #24]
 8010a58:	2b00      	cmp	r3, #0
 8010a5a:	db04      	blt.n	8010a66 <_dtoa_r+0x956>
 8010a5c:	9907      	ldr	r1, [sp, #28]
 8010a5e:	430b      	orrs	r3, r1
 8010a60:	9908      	ldr	r1, [sp, #32]
 8010a62:	430b      	orrs	r3, r1
 8010a64:	d120      	bne.n	8010aa8 <_dtoa_r+0x998>
 8010a66:	2a00      	cmp	r2, #0
 8010a68:	ddee      	ble.n	8010a48 <_dtoa_r+0x938>
 8010a6a:	9901      	ldr	r1, [sp, #4]
 8010a6c:	2201      	movs	r2, #1
 8010a6e:	4648      	mov	r0, r9
 8010a70:	f000 fbb2 	bl	80111d8 <__lshift>
 8010a74:	4621      	mov	r1, r4
 8010a76:	9001      	str	r0, [sp, #4]
 8010a78:	f000 fc1a 	bl	80112b0 <__mcmp>
 8010a7c:	2800      	cmp	r0, #0
 8010a7e:	dc03      	bgt.n	8010a88 <_dtoa_r+0x978>
 8010a80:	d1e2      	bne.n	8010a48 <_dtoa_r+0x938>
 8010a82:	f01a 0f01 	tst.w	sl, #1
 8010a86:	d0df      	beq.n	8010a48 <_dtoa_r+0x938>
 8010a88:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010a8c:	d1d9      	bne.n	8010a42 <_dtoa_r+0x932>
 8010a8e:	2339      	movs	r3, #57	@ 0x39
 8010a90:	f88b 3000 	strb.w	r3, [fp]
 8010a94:	4633      	mov	r3, r6
 8010a96:	461e      	mov	r6, r3
 8010a98:	3b01      	subs	r3, #1
 8010a9a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010a9e:	2a39      	cmp	r2, #57	@ 0x39
 8010aa0:	d053      	beq.n	8010b4a <_dtoa_r+0xa3a>
 8010aa2:	3201      	adds	r2, #1
 8010aa4:	701a      	strb	r2, [r3, #0]
 8010aa6:	e60c      	b.n	80106c2 <_dtoa_r+0x5b2>
 8010aa8:	2a00      	cmp	r2, #0
 8010aaa:	dd07      	ble.n	8010abc <_dtoa_r+0x9ac>
 8010aac:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010ab0:	d0ed      	beq.n	8010a8e <_dtoa_r+0x97e>
 8010ab2:	f10a 0301 	add.w	r3, sl, #1
 8010ab6:	f88b 3000 	strb.w	r3, [fp]
 8010aba:	e602      	b.n	80106c2 <_dtoa_r+0x5b2>
 8010abc:	9b05      	ldr	r3, [sp, #20]
 8010abe:	9a05      	ldr	r2, [sp, #20]
 8010ac0:	f803 ac01 	strb.w	sl, [r3, #-1]
 8010ac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010ac6:	4293      	cmp	r3, r2
 8010ac8:	d029      	beq.n	8010b1e <_dtoa_r+0xa0e>
 8010aca:	9901      	ldr	r1, [sp, #4]
 8010acc:	2300      	movs	r3, #0
 8010ace:	220a      	movs	r2, #10
 8010ad0:	4648      	mov	r0, r9
 8010ad2:	f000 f9d5 	bl	8010e80 <__multadd>
 8010ad6:	45a8      	cmp	r8, r5
 8010ad8:	9001      	str	r0, [sp, #4]
 8010ada:	f04f 0300 	mov.w	r3, #0
 8010ade:	f04f 020a 	mov.w	r2, #10
 8010ae2:	4641      	mov	r1, r8
 8010ae4:	4648      	mov	r0, r9
 8010ae6:	d107      	bne.n	8010af8 <_dtoa_r+0x9e8>
 8010ae8:	f000 f9ca 	bl	8010e80 <__multadd>
 8010aec:	4680      	mov	r8, r0
 8010aee:	4605      	mov	r5, r0
 8010af0:	9b05      	ldr	r3, [sp, #20]
 8010af2:	3301      	adds	r3, #1
 8010af4:	9305      	str	r3, [sp, #20]
 8010af6:	e775      	b.n	80109e4 <_dtoa_r+0x8d4>
 8010af8:	f000 f9c2 	bl	8010e80 <__multadd>
 8010afc:	4629      	mov	r1, r5
 8010afe:	4680      	mov	r8, r0
 8010b00:	2300      	movs	r3, #0
 8010b02:	220a      	movs	r2, #10
 8010b04:	4648      	mov	r0, r9
 8010b06:	f000 f9bb 	bl	8010e80 <__multadd>
 8010b0a:	4605      	mov	r5, r0
 8010b0c:	e7f0      	b.n	8010af0 <_dtoa_r+0x9e0>
 8010b0e:	f1bb 0f00 	cmp.w	fp, #0
 8010b12:	bfcc      	ite	gt
 8010b14:	465e      	movgt	r6, fp
 8010b16:	2601      	movle	r6, #1
 8010b18:	443e      	add	r6, r7
 8010b1a:	f04f 0800 	mov.w	r8, #0
 8010b1e:	9901      	ldr	r1, [sp, #4]
 8010b20:	2201      	movs	r2, #1
 8010b22:	4648      	mov	r0, r9
 8010b24:	f000 fb58 	bl	80111d8 <__lshift>
 8010b28:	4621      	mov	r1, r4
 8010b2a:	9001      	str	r0, [sp, #4]
 8010b2c:	f000 fbc0 	bl	80112b0 <__mcmp>
 8010b30:	2800      	cmp	r0, #0
 8010b32:	dcaf      	bgt.n	8010a94 <_dtoa_r+0x984>
 8010b34:	d102      	bne.n	8010b3c <_dtoa_r+0xa2c>
 8010b36:	f01a 0f01 	tst.w	sl, #1
 8010b3a:	d1ab      	bne.n	8010a94 <_dtoa_r+0x984>
 8010b3c:	4633      	mov	r3, r6
 8010b3e:	461e      	mov	r6, r3
 8010b40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010b44:	2a30      	cmp	r2, #48	@ 0x30
 8010b46:	d0fa      	beq.n	8010b3e <_dtoa_r+0xa2e>
 8010b48:	e5bb      	b.n	80106c2 <_dtoa_r+0x5b2>
 8010b4a:	429f      	cmp	r7, r3
 8010b4c:	d1a3      	bne.n	8010a96 <_dtoa_r+0x986>
 8010b4e:	9b04      	ldr	r3, [sp, #16]
 8010b50:	3301      	adds	r3, #1
 8010b52:	9304      	str	r3, [sp, #16]
 8010b54:	2331      	movs	r3, #49	@ 0x31
 8010b56:	703b      	strb	r3, [r7, #0]
 8010b58:	e5b3      	b.n	80106c2 <_dtoa_r+0x5b2>
 8010b5a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010b5c:	4f16      	ldr	r7, [pc, #88]	@ (8010bb8 <_dtoa_r+0xaa8>)
 8010b5e:	b11b      	cbz	r3, 8010b68 <_dtoa_r+0xa58>
 8010b60:	f107 0308 	add.w	r3, r7, #8
 8010b64:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8010b66:	6013      	str	r3, [r2, #0]
 8010b68:	4638      	mov	r0, r7
 8010b6a:	b011      	add	sp, #68	@ 0x44
 8010b6c:	ecbd 8b02 	vpop	{d8}
 8010b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b74:	9b07      	ldr	r3, [sp, #28]
 8010b76:	2b01      	cmp	r3, #1
 8010b78:	f77f ae36 	ble.w	80107e8 <_dtoa_r+0x6d8>
 8010b7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010b7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010b80:	2001      	movs	r0, #1
 8010b82:	e656      	b.n	8010832 <_dtoa_r+0x722>
 8010b84:	f1bb 0f00 	cmp.w	fp, #0
 8010b88:	f77f aed7 	ble.w	801093a <_dtoa_r+0x82a>
 8010b8c:	463e      	mov	r6, r7
 8010b8e:	9801      	ldr	r0, [sp, #4]
 8010b90:	4621      	mov	r1, r4
 8010b92:	f7ff fa32 	bl	800fffa <quorem>
 8010b96:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010b9a:	f806 ab01 	strb.w	sl, [r6], #1
 8010b9e:	1bf2      	subs	r2, r6, r7
 8010ba0:	4593      	cmp	fp, r2
 8010ba2:	ddb4      	ble.n	8010b0e <_dtoa_r+0x9fe>
 8010ba4:	9901      	ldr	r1, [sp, #4]
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	220a      	movs	r2, #10
 8010baa:	4648      	mov	r0, r9
 8010bac:	f000 f968 	bl	8010e80 <__multadd>
 8010bb0:	9001      	str	r0, [sp, #4]
 8010bb2:	e7ec      	b.n	8010b8e <_dtoa_r+0xa7e>
 8010bb4:	08012198 	.word	0x08012198
 8010bb8:	0801211c 	.word	0x0801211c

08010bbc <_free_r>:
 8010bbc:	b538      	push	{r3, r4, r5, lr}
 8010bbe:	4605      	mov	r5, r0
 8010bc0:	2900      	cmp	r1, #0
 8010bc2:	d041      	beq.n	8010c48 <_free_r+0x8c>
 8010bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010bc8:	1f0c      	subs	r4, r1, #4
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	bfb8      	it	lt
 8010bce:	18e4      	addlt	r4, r4, r3
 8010bd0:	f000 f8e8 	bl	8010da4 <__malloc_lock>
 8010bd4:	4a1d      	ldr	r2, [pc, #116]	@ (8010c4c <_free_r+0x90>)
 8010bd6:	6813      	ldr	r3, [r2, #0]
 8010bd8:	b933      	cbnz	r3, 8010be8 <_free_r+0x2c>
 8010bda:	6063      	str	r3, [r4, #4]
 8010bdc:	6014      	str	r4, [r2, #0]
 8010bde:	4628      	mov	r0, r5
 8010be0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010be4:	f000 b8e4 	b.w	8010db0 <__malloc_unlock>
 8010be8:	42a3      	cmp	r3, r4
 8010bea:	d908      	bls.n	8010bfe <_free_r+0x42>
 8010bec:	6820      	ldr	r0, [r4, #0]
 8010bee:	1821      	adds	r1, r4, r0
 8010bf0:	428b      	cmp	r3, r1
 8010bf2:	bf01      	itttt	eq
 8010bf4:	6819      	ldreq	r1, [r3, #0]
 8010bf6:	685b      	ldreq	r3, [r3, #4]
 8010bf8:	1809      	addeq	r1, r1, r0
 8010bfa:	6021      	streq	r1, [r4, #0]
 8010bfc:	e7ed      	b.n	8010bda <_free_r+0x1e>
 8010bfe:	461a      	mov	r2, r3
 8010c00:	685b      	ldr	r3, [r3, #4]
 8010c02:	b10b      	cbz	r3, 8010c08 <_free_r+0x4c>
 8010c04:	42a3      	cmp	r3, r4
 8010c06:	d9fa      	bls.n	8010bfe <_free_r+0x42>
 8010c08:	6811      	ldr	r1, [r2, #0]
 8010c0a:	1850      	adds	r0, r2, r1
 8010c0c:	42a0      	cmp	r0, r4
 8010c0e:	d10b      	bne.n	8010c28 <_free_r+0x6c>
 8010c10:	6820      	ldr	r0, [r4, #0]
 8010c12:	4401      	add	r1, r0
 8010c14:	1850      	adds	r0, r2, r1
 8010c16:	4283      	cmp	r3, r0
 8010c18:	6011      	str	r1, [r2, #0]
 8010c1a:	d1e0      	bne.n	8010bde <_free_r+0x22>
 8010c1c:	6818      	ldr	r0, [r3, #0]
 8010c1e:	685b      	ldr	r3, [r3, #4]
 8010c20:	6053      	str	r3, [r2, #4]
 8010c22:	4408      	add	r0, r1
 8010c24:	6010      	str	r0, [r2, #0]
 8010c26:	e7da      	b.n	8010bde <_free_r+0x22>
 8010c28:	d902      	bls.n	8010c30 <_free_r+0x74>
 8010c2a:	230c      	movs	r3, #12
 8010c2c:	602b      	str	r3, [r5, #0]
 8010c2e:	e7d6      	b.n	8010bde <_free_r+0x22>
 8010c30:	6820      	ldr	r0, [r4, #0]
 8010c32:	1821      	adds	r1, r4, r0
 8010c34:	428b      	cmp	r3, r1
 8010c36:	bf04      	itt	eq
 8010c38:	6819      	ldreq	r1, [r3, #0]
 8010c3a:	685b      	ldreq	r3, [r3, #4]
 8010c3c:	6063      	str	r3, [r4, #4]
 8010c3e:	bf04      	itt	eq
 8010c40:	1809      	addeq	r1, r1, r0
 8010c42:	6021      	streq	r1, [r4, #0]
 8010c44:	6054      	str	r4, [r2, #4]
 8010c46:	e7ca      	b.n	8010bde <_free_r+0x22>
 8010c48:	bd38      	pop	{r3, r4, r5, pc}
 8010c4a:	bf00      	nop
 8010c4c:	24002530 	.word	0x24002530

08010c50 <malloc>:
 8010c50:	4b02      	ldr	r3, [pc, #8]	@ (8010c5c <malloc+0xc>)
 8010c52:	4601      	mov	r1, r0
 8010c54:	6818      	ldr	r0, [r3, #0]
 8010c56:	f000 b825 	b.w	8010ca4 <_malloc_r>
 8010c5a:	bf00      	nop
 8010c5c:	24000130 	.word	0x24000130

08010c60 <sbrk_aligned>:
 8010c60:	b570      	push	{r4, r5, r6, lr}
 8010c62:	4e0f      	ldr	r6, [pc, #60]	@ (8010ca0 <sbrk_aligned+0x40>)
 8010c64:	460c      	mov	r4, r1
 8010c66:	6831      	ldr	r1, [r6, #0]
 8010c68:	4605      	mov	r5, r0
 8010c6a:	b911      	cbnz	r1, 8010c72 <sbrk_aligned+0x12>
 8010c6c:	f000 fe46 	bl	80118fc <_sbrk_r>
 8010c70:	6030      	str	r0, [r6, #0]
 8010c72:	4621      	mov	r1, r4
 8010c74:	4628      	mov	r0, r5
 8010c76:	f000 fe41 	bl	80118fc <_sbrk_r>
 8010c7a:	1c43      	adds	r3, r0, #1
 8010c7c:	d103      	bne.n	8010c86 <sbrk_aligned+0x26>
 8010c7e:	f04f 34ff 	mov.w	r4, #4294967295
 8010c82:	4620      	mov	r0, r4
 8010c84:	bd70      	pop	{r4, r5, r6, pc}
 8010c86:	1cc4      	adds	r4, r0, #3
 8010c88:	f024 0403 	bic.w	r4, r4, #3
 8010c8c:	42a0      	cmp	r0, r4
 8010c8e:	d0f8      	beq.n	8010c82 <sbrk_aligned+0x22>
 8010c90:	1a21      	subs	r1, r4, r0
 8010c92:	4628      	mov	r0, r5
 8010c94:	f000 fe32 	bl	80118fc <_sbrk_r>
 8010c98:	3001      	adds	r0, #1
 8010c9a:	d1f2      	bne.n	8010c82 <sbrk_aligned+0x22>
 8010c9c:	e7ef      	b.n	8010c7e <sbrk_aligned+0x1e>
 8010c9e:	bf00      	nop
 8010ca0:	2400252c 	.word	0x2400252c

08010ca4 <_malloc_r>:
 8010ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ca8:	1ccd      	adds	r5, r1, #3
 8010caa:	f025 0503 	bic.w	r5, r5, #3
 8010cae:	3508      	adds	r5, #8
 8010cb0:	2d0c      	cmp	r5, #12
 8010cb2:	bf38      	it	cc
 8010cb4:	250c      	movcc	r5, #12
 8010cb6:	2d00      	cmp	r5, #0
 8010cb8:	4606      	mov	r6, r0
 8010cba:	db01      	blt.n	8010cc0 <_malloc_r+0x1c>
 8010cbc:	42a9      	cmp	r1, r5
 8010cbe:	d904      	bls.n	8010cca <_malloc_r+0x26>
 8010cc0:	230c      	movs	r3, #12
 8010cc2:	6033      	str	r3, [r6, #0]
 8010cc4:	2000      	movs	r0, #0
 8010cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010cca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010da0 <_malloc_r+0xfc>
 8010cce:	f000 f869 	bl	8010da4 <__malloc_lock>
 8010cd2:	f8d8 3000 	ldr.w	r3, [r8]
 8010cd6:	461c      	mov	r4, r3
 8010cd8:	bb44      	cbnz	r4, 8010d2c <_malloc_r+0x88>
 8010cda:	4629      	mov	r1, r5
 8010cdc:	4630      	mov	r0, r6
 8010cde:	f7ff ffbf 	bl	8010c60 <sbrk_aligned>
 8010ce2:	1c43      	adds	r3, r0, #1
 8010ce4:	4604      	mov	r4, r0
 8010ce6:	d158      	bne.n	8010d9a <_malloc_r+0xf6>
 8010ce8:	f8d8 4000 	ldr.w	r4, [r8]
 8010cec:	4627      	mov	r7, r4
 8010cee:	2f00      	cmp	r7, #0
 8010cf0:	d143      	bne.n	8010d7a <_malloc_r+0xd6>
 8010cf2:	2c00      	cmp	r4, #0
 8010cf4:	d04b      	beq.n	8010d8e <_malloc_r+0xea>
 8010cf6:	6823      	ldr	r3, [r4, #0]
 8010cf8:	4639      	mov	r1, r7
 8010cfa:	4630      	mov	r0, r6
 8010cfc:	eb04 0903 	add.w	r9, r4, r3
 8010d00:	f000 fdfc 	bl	80118fc <_sbrk_r>
 8010d04:	4581      	cmp	r9, r0
 8010d06:	d142      	bne.n	8010d8e <_malloc_r+0xea>
 8010d08:	6821      	ldr	r1, [r4, #0]
 8010d0a:	1a6d      	subs	r5, r5, r1
 8010d0c:	4629      	mov	r1, r5
 8010d0e:	4630      	mov	r0, r6
 8010d10:	f7ff ffa6 	bl	8010c60 <sbrk_aligned>
 8010d14:	3001      	adds	r0, #1
 8010d16:	d03a      	beq.n	8010d8e <_malloc_r+0xea>
 8010d18:	6823      	ldr	r3, [r4, #0]
 8010d1a:	442b      	add	r3, r5
 8010d1c:	6023      	str	r3, [r4, #0]
 8010d1e:	f8d8 3000 	ldr.w	r3, [r8]
 8010d22:	685a      	ldr	r2, [r3, #4]
 8010d24:	bb62      	cbnz	r2, 8010d80 <_malloc_r+0xdc>
 8010d26:	f8c8 7000 	str.w	r7, [r8]
 8010d2a:	e00f      	b.n	8010d4c <_malloc_r+0xa8>
 8010d2c:	6822      	ldr	r2, [r4, #0]
 8010d2e:	1b52      	subs	r2, r2, r5
 8010d30:	d420      	bmi.n	8010d74 <_malloc_r+0xd0>
 8010d32:	2a0b      	cmp	r2, #11
 8010d34:	d917      	bls.n	8010d66 <_malloc_r+0xc2>
 8010d36:	1961      	adds	r1, r4, r5
 8010d38:	42a3      	cmp	r3, r4
 8010d3a:	6025      	str	r5, [r4, #0]
 8010d3c:	bf18      	it	ne
 8010d3e:	6059      	strne	r1, [r3, #4]
 8010d40:	6863      	ldr	r3, [r4, #4]
 8010d42:	bf08      	it	eq
 8010d44:	f8c8 1000 	streq.w	r1, [r8]
 8010d48:	5162      	str	r2, [r4, r5]
 8010d4a:	604b      	str	r3, [r1, #4]
 8010d4c:	4630      	mov	r0, r6
 8010d4e:	f000 f82f 	bl	8010db0 <__malloc_unlock>
 8010d52:	f104 000b 	add.w	r0, r4, #11
 8010d56:	1d23      	adds	r3, r4, #4
 8010d58:	f020 0007 	bic.w	r0, r0, #7
 8010d5c:	1ac2      	subs	r2, r0, r3
 8010d5e:	bf1c      	itt	ne
 8010d60:	1a1b      	subne	r3, r3, r0
 8010d62:	50a3      	strne	r3, [r4, r2]
 8010d64:	e7af      	b.n	8010cc6 <_malloc_r+0x22>
 8010d66:	6862      	ldr	r2, [r4, #4]
 8010d68:	42a3      	cmp	r3, r4
 8010d6a:	bf0c      	ite	eq
 8010d6c:	f8c8 2000 	streq.w	r2, [r8]
 8010d70:	605a      	strne	r2, [r3, #4]
 8010d72:	e7eb      	b.n	8010d4c <_malloc_r+0xa8>
 8010d74:	4623      	mov	r3, r4
 8010d76:	6864      	ldr	r4, [r4, #4]
 8010d78:	e7ae      	b.n	8010cd8 <_malloc_r+0x34>
 8010d7a:	463c      	mov	r4, r7
 8010d7c:	687f      	ldr	r7, [r7, #4]
 8010d7e:	e7b6      	b.n	8010cee <_malloc_r+0x4a>
 8010d80:	461a      	mov	r2, r3
 8010d82:	685b      	ldr	r3, [r3, #4]
 8010d84:	42a3      	cmp	r3, r4
 8010d86:	d1fb      	bne.n	8010d80 <_malloc_r+0xdc>
 8010d88:	2300      	movs	r3, #0
 8010d8a:	6053      	str	r3, [r2, #4]
 8010d8c:	e7de      	b.n	8010d4c <_malloc_r+0xa8>
 8010d8e:	230c      	movs	r3, #12
 8010d90:	6033      	str	r3, [r6, #0]
 8010d92:	4630      	mov	r0, r6
 8010d94:	f000 f80c 	bl	8010db0 <__malloc_unlock>
 8010d98:	e794      	b.n	8010cc4 <_malloc_r+0x20>
 8010d9a:	6005      	str	r5, [r0, #0]
 8010d9c:	e7d6      	b.n	8010d4c <_malloc_r+0xa8>
 8010d9e:	bf00      	nop
 8010da0:	24002530 	.word	0x24002530

08010da4 <__malloc_lock>:
 8010da4:	4801      	ldr	r0, [pc, #4]	@ (8010dac <__malloc_lock+0x8>)
 8010da6:	f7ff b926 	b.w	800fff6 <__retarget_lock_acquire_recursive>
 8010daa:	bf00      	nop
 8010dac:	24002528 	.word	0x24002528

08010db0 <__malloc_unlock>:
 8010db0:	4801      	ldr	r0, [pc, #4]	@ (8010db8 <__malloc_unlock+0x8>)
 8010db2:	f7ff b921 	b.w	800fff8 <__retarget_lock_release_recursive>
 8010db6:	bf00      	nop
 8010db8:	24002528 	.word	0x24002528

08010dbc <_Balloc>:
 8010dbc:	b570      	push	{r4, r5, r6, lr}
 8010dbe:	69c6      	ldr	r6, [r0, #28]
 8010dc0:	4604      	mov	r4, r0
 8010dc2:	460d      	mov	r5, r1
 8010dc4:	b976      	cbnz	r6, 8010de4 <_Balloc+0x28>
 8010dc6:	2010      	movs	r0, #16
 8010dc8:	f7ff ff42 	bl	8010c50 <malloc>
 8010dcc:	4602      	mov	r2, r0
 8010dce:	61e0      	str	r0, [r4, #28]
 8010dd0:	b920      	cbnz	r0, 8010ddc <_Balloc+0x20>
 8010dd2:	4b18      	ldr	r3, [pc, #96]	@ (8010e34 <_Balloc+0x78>)
 8010dd4:	4818      	ldr	r0, [pc, #96]	@ (8010e38 <_Balloc+0x7c>)
 8010dd6:	216b      	movs	r1, #107	@ 0x6b
 8010dd8:	f000 fdae 	bl	8011938 <__assert_func>
 8010ddc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010de0:	6006      	str	r6, [r0, #0]
 8010de2:	60c6      	str	r6, [r0, #12]
 8010de4:	69e6      	ldr	r6, [r4, #28]
 8010de6:	68f3      	ldr	r3, [r6, #12]
 8010de8:	b183      	cbz	r3, 8010e0c <_Balloc+0x50>
 8010dea:	69e3      	ldr	r3, [r4, #28]
 8010dec:	68db      	ldr	r3, [r3, #12]
 8010dee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010df2:	b9b8      	cbnz	r0, 8010e24 <_Balloc+0x68>
 8010df4:	2101      	movs	r1, #1
 8010df6:	fa01 f605 	lsl.w	r6, r1, r5
 8010dfa:	1d72      	adds	r2, r6, #5
 8010dfc:	0092      	lsls	r2, r2, #2
 8010dfe:	4620      	mov	r0, r4
 8010e00:	f000 fdb8 	bl	8011974 <_calloc_r>
 8010e04:	b160      	cbz	r0, 8010e20 <_Balloc+0x64>
 8010e06:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010e0a:	e00e      	b.n	8010e2a <_Balloc+0x6e>
 8010e0c:	2221      	movs	r2, #33	@ 0x21
 8010e0e:	2104      	movs	r1, #4
 8010e10:	4620      	mov	r0, r4
 8010e12:	f000 fdaf 	bl	8011974 <_calloc_r>
 8010e16:	69e3      	ldr	r3, [r4, #28]
 8010e18:	60f0      	str	r0, [r6, #12]
 8010e1a:	68db      	ldr	r3, [r3, #12]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d1e4      	bne.n	8010dea <_Balloc+0x2e>
 8010e20:	2000      	movs	r0, #0
 8010e22:	bd70      	pop	{r4, r5, r6, pc}
 8010e24:	6802      	ldr	r2, [r0, #0]
 8010e26:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010e30:	e7f7      	b.n	8010e22 <_Balloc+0x66>
 8010e32:	bf00      	nop
 8010e34:	08012129 	.word	0x08012129
 8010e38:	080121a9 	.word	0x080121a9

08010e3c <_Bfree>:
 8010e3c:	b570      	push	{r4, r5, r6, lr}
 8010e3e:	69c6      	ldr	r6, [r0, #28]
 8010e40:	4605      	mov	r5, r0
 8010e42:	460c      	mov	r4, r1
 8010e44:	b976      	cbnz	r6, 8010e64 <_Bfree+0x28>
 8010e46:	2010      	movs	r0, #16
 8010e48:	f7ff ff02 	bl	8010c50 <malloc>
 8010e4c:	4602      	mov	r2, r0
 8010e4e:	61e8      	str	r0, [r5, #28]
 8010e50:	b920      	cbnz	r0, 8010e5c <_Bfree+0x20>
 8010e52:	4b09      	ldr	r3, [pc, #36]	@ (8010e78 <_Bfree+0x3c>)
 8010e54:	4809      	ldr	r0, [pc, #36]	@ (8010e7c <_Bfree+0x40>)
 8010e56:	218f      	movs	r1, #143	@ 0x8f
 8010e58:	f000 fd6e 	bl	8011938 <__assert_func>
 8010e5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010e60:	6006      	str	r6, [r0, #0]
 8010e62:	60c6      	str	r6, [r0, #12]
 8010e64:	b13c      	cbz	r4, 8010e76 <_Bfree+0x3a>
 8010e66:	69eb      	ldr	r3, [r5, #28]
 8010e68:	6862      	ldr	r2, [r4, #4]
 8010e6a:	68db      	ldr	r3, [r3, #12]
 8010e6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010e70:	6021      	str	r1, [r4, #0]
 8010e72:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010e76:	bd70      	pop	{r4, r5, r6, pc}
 8010e78:	08012129 	.word	0x08012129
 8010e7c:	080121a9 	.word	0x080121a9

08010e80 <__multadd>:
 8010e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e84:	690d      	ldr	r5, [r1, #16]
 8010e86:	4607      	mov	r7, r0
 8010e88:	460c      	mov	r4, r1
 8010e8a:	461e      	mov	r6, r3
 8010e8c:	f101 0c14 	add.w	ip, r1, #20
 8010e90:	2000      	movs	r0, #0
 8010e92:	f8dc 3000 	ldr.w	r3, [ip]
 8010e96:	b299      	uxth	r1, r3
 8010e98:	fb02 6101 	mla	r1, r2, r1, r6
 8010e9c:	0c1e      	lsrs	r6, r3, #16
 8010e9e:	0c0b      	lsrs	r3, r1, #16
 8010ea0:	fb02 3306 	mla	r3, r2, r6, r3
 8010ea4:	b289      	uxth	r1, r1
 8010ea6:	3001      	adds	r0, #1
 8010ea8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010eac:	4285      	cmp	r5, r0
 8010eae:	f84c 1b04 	str.w	r1, [ip], #4
 8010eb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010eb6:	dcec      	bgt.n	8010e92 <__multadd+0x12>
 8010eb8:	b30e      	cbz	r6, 8010efe <__multadd+0x7e>
 8010eba:	68a3      	ldr	r3, [r4, #8]
 8010ebc:	42ab      	cmp	r3, r5
 8010ebe:	dc19      	bgt.n	8010ef4 <__multadd+0x74>
 8010ec0:	6861      	ldr	r1, [r4, #4]
 8010ec2:	4638      	mov	r0, r7
 8010ec4:	3101      	adds	r1, #1
 8010ec6:	f7ff ff79 	bl	8010dbc <_Balloc>
 8010eca:	4680      	mov	r8, r0
 8010ecc:	b928      	cbnz	r0, 8010eda <__multadd+0x5a>
 8010ece:	4602      	mov	r2, r0
 8010ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8010f04 <__multadd+0x84>)
 8010ed2:	480d      	ldr	r0, [pc, #52]	@ (8010f08 <__multadd+0x88>)
 8010ed4:	21ba      	movs	r1, #186	@ 0xba
 8010ed6:	f000 fd2f 	bl	8011938 <__assert_func>
 8010eda:	6922      	ldr	r2, [r4, #16]
 8010edc:	3202      	adds	r2, #2
 8010ede:	f104 010c 	add.w	r1, r4, #12
 8010ee2:	0092      	lsls	r2, r2, #2
 8010ee4:	300c      	adds	r0, #12
 8010ee6:	f000 fd19 	bl	801191c <memcpy>
 8010eea:	4621      	mov	r1, r4
 8010eec:	4638      	mov	r0, r7
 8010eee:	f7ff ffa5 	bl	8010e3c <_Bfree>
 8010ef2:	4644      	mov	r4, r8
 8010ef4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010ef8:	3501      	adds	r5, #1
 8010efa:	615e      	str	r6, [r3, #20]
 8010efc:	6125      	str	r5, [r4, #16]
 8010efe:	4620      	mov	r0, r4
 8010f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010f04:	08012198 	.word	0x08012198
 8010f08:	080121a9 	.word	0x080121a9

08010f0c <__hi0bits>:
 8010f0c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8010f10:	4603      	mov	r3, r0
 8010f12:	bf36      	itet	cc
 8010f14:	0403      	lslcc	r3, r0, #16
 8010f16:	2000      	movcs	r0, #0
 8010f18:	2010      	movcc	r0, #16
 8010f1a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8010f1e:	bf3c      	itt	cc
 8010f20:	021b      	lslcc	r3, r3, #8
 8010f22:	3008      	addcc	r0, #8
 8010f24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010f28:	bf3c      	itt	cc
 8010f2a:	011b      	lslcc	r3, r3, #4
 8010f2c:	3004      	addcc	r0, #4
 8010f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010f32:	bf3c      	itt	cc
 8010f34:	009b      	lslcc	r3, r3, #2
 8010f36:	3002      	addcc	r0, #2
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	db05      	blt.n	8010f48 <__hi0bits+0x3c>
 8010f3c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8010f40:	f100 0001 	add.w	r0, r0, #1
 8010f44:	bf08      	it	eq
 8010f46:	2020      	moveq	r0, #32
 8010f48:	4770      	bx	lr

08010f4a <__lo0bits>:
 8010f4a:	6803      	ldr	r3, [r0, #0]
 8010f4c:	4602      	mov	r2, r0
 8010f4e:	f013 0007 	ands.w	r0, r3, #7
 8010f52:	d00b      	beq.n	8010f6c <__lo0bits+0x22>
 8010f54:	07d9      	lsls	r1, r3, #31
 8010f56:	d421      	bmi.n	8010f9c <__lo0bits+0x52>
 8010f58:	0798      	lsls	r0, r3, #30
 8010f5a:	bf49      	itett	mi
 8010f5c:	085b      	lsrmi	r3, r3, #1
 8010f5e:	089b      	lsrpl	r3, r3, #2
 8010f60:	2001      	movmi	r0, #1
 8010f62:	6013      	strmi	r3, [r2, #0]
 8010f64:	bf5c      	itt	pl
 8010f66:	6013      	strpl	r3, [r2, #0]
 8010f68:	2002      	movpl	r0, #2
 8010f6a:	4770      	bx	lr
 8010f6c:	b299      	uxth	r1, r3
 8010f6e:	b909      	cbnz	r1, 8010f74 <__lo0bits+0x2a>
 8010f70:	0c1b      	lsrs	r3, r3, #16
 8010f72:	2010      	movs	r0, #16
 8010f74:	b2d9      	uxtb	r1, r3
 8010f76:	b909      	cbnz	r1, 8010f7c <__lo0bits+0x32>
 8010f78:	3008      	adds	r0, #8
 8010f7a:	0a1b      	lsrs	r3, r3, #8
 8010f7c:	0719      	lsls	r1, r3, #28
 8010f7e:	bf04      	itt	eq
 8010f80:	091b      	lsreq	r3, r3, #4
 8010f82:	3004      	addeq	r0, #4
 8010f84:	0799      	lsls	r1, r3, #30
 8010f86:	bf04      	itt	eq
 8010f88:	089b      	lsreq	r3, r3, #2
 8010f8a:	3002      	addeq	r0, #2
 8010f8c:	07d9      	lsls	r1, r3, #31
 8010f8e:	d403      	bmi.n	8010f98 <__lo0bits+0x4e>
 8010f90:	085b      	lsrs	r3, r3, #1
 8010f92:	f100 0001 	add.w	r0, r0, #1
 8010f96:	d003      	beq.n	8010fa0 <__lo0bits+0x56>
 8010f98:	6013      	str	r3, [r2, #0]
 8010f9a:	4770      	bx	lr
 8010f9c:	2000      	movs	r0, #0
 8010f9e:	4770      	bx	lr
 8010fa0:	2020      	movs	r0, #32
 8010fa2:	4770      	bx	lr

08010fa4 <__i2b>:
 8010fa4:	b510      	push	{r4, lr}
 8010fa6:	460c      	mov	r4, r1
 8010fa8:	2101      	movs	r1, #1
 8010faa:	f7ff ff07 	bl	8010dbc <_Balloc>
 8010fae:	4602      	mov	r2, r0
 8010fb0:	b928      	cbnz	r0, 8010fbe <__i2b+0x1a>
 8010fb2:	4b05      	ldr	r3, [pc, #20]	@ (8010fc8 <__i2b+0x24>)
 8010fb4:	4805      	ldr	r0, [pc, #20]	@ (8010fcc <__i2b+0x28>)
 8010fb6:	f240 1145 	movw	r1, #325	@ 0x145
 8010fba:	f000 fcbd 	bl	8011938 <__assert_func>
 8010fbe:	2301      	movs	r3, #1
 8010fc0:	6144      	str	r4, [r0, #20]
 8010fc2:	6103      	str	r3, [r0, #16]
 8010fc4:	bd10      	pop	{r4, pc}
 8010fc6:	bf00      	nop
 8010fc8:	08012198 	.word	0x08012198
 8010fcc:	080121a9 	.word	0x080121a9

08010fd0 <__multiply>:
 8010fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fd4:	4614      	mov	r4, r2
 8010fd6:	690a      	ldr	r2, [r1, #16]
 8010fd8:	6923      	ldr	r3, [r4, #16]
 8010fda:	429a      	cmp	r2, r3
 8010fdc:	bfa8      	it	ge
 8010fde:	4623      	movge	r3, r4
 8010fe0:	460f      	mov	r7, r1
 8010fe2:	bfa4      	itt	ge
 8010fe4:	460c      	movge	r4, r1
 8010fe6:	461f      	movge	r7, r3
 8010fe8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8010fec:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8010ff0:	68a3      	ldr	r3, [r4, #8]
 8010ff2:	6861      	ldr	r1, [r4, #4]
 8010ff4:	eb0a 0609 	add.w	r6, sl, r9
 8010ff8:	42b3      	cmp	r3, r6
 8010ffa:	b085      	sub	sp, #20
 8010ffc:	bfb8      	it	lt
 8010ffe:	3101      	addlt	r1, #1
 8011000:	f7ff fedc 	bl	8010dbc <_Balloc>
 8011004:	b930      	cbnz	r0, 8011014 <__multiply+0x44>
 8011006:	4602      	mov	r2, r0
 8011008:	4b44      	ldr	r3, [pc, #272]	@ (801111c <__multiply+0x14c>)
 801100a:	4845      	ldr	r0, [pc, #276]	@ (8011120 <__multiply+0x150>)
 801100c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8011010:	f000 fc92 	bl	8011938 <__assert_func>
 8011014:	f100 0514 	add.w	r5, r0, #20
 8011018:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801101c:	462b      	mov	r3, r5
 801101e:	2200      	movs	r2, #0
 8011020:	4543      	cmp	r3, r8
 8011022:	d321      	bcc.n	8011068 <__multiply+0x98>
 8011024:	f107 0114 	add.w	r1, r7, #20
 8011028:	f104 0214 	add.w	r2, r4, #20
 801102c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8011030:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8011034:	9302      	str	r3, [sp, #8]
 8011036:	1b13      	subs	r3, r2, r4
 8011038:	3b15      	subs	r3, #21
 801103a:	f023 0303 	bic.w	r3, r3, #3
 801103e:	3304      	adds	r3, #4
 8011040:	f104 0715 	add.w	r7, r4, #21
 8011044:	42ba      	cmp	r2, r7
 8011046:	bf38      	it	cc
 8011048:	2304      	movcc	r3, #4
 801104a:	9301      	str	r3, [sp, #4]
 801104c:	9b02      	ldr	r3, [sp, #8]
 801104e:	9103      	str	r1, [sp, #12]
 8011050:	428b      	cmp	r3, r1
 8011052:	d80c      	bhi.n	801106e <__multiply+0x9e>
 8011054:	2e00      	cmp	r6, #0
 8011056:	dd03      	ble.n	8011060 <__multiply+0x90>
 8011058:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801105c:	2b00      	cmp	r3, #0
 801105e:	d05b      	beq.n	8011118 <__multiply+0x148>
 8011060:	6106      	str	r6, [r0, #16]
 8011062:	b005      	add	sp, #20
 8011064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011068:	f843 2b04 	str.w	r2, [r3], #4
 801106c:	e7d8      	b.n	8011020 <__multiply+0x50>
 801106e:	f8b1 a000 	ldrh.w	sl, [r1]
 8011072:	f1ba 0f00 	cmp.w	sl, #0
 8011076:	d024      	beq.n	80110c2 <__multiply+0xf2>
 8011078:	f104 0e14 	add.w	lr, r4, #20
 801107c:	46a9      	mov	r9, r5
 801107e:	f04f 0c00 	mov.w	ip, #0
 8011082:	f85e 7b04 	ldr.w	r7, [lr], #4
 8011086:	f8d9 3000 	ldr.w	r3, [r9]
 801108a:	fa1f fb87 	uxth.w	fp, r7
 801108e:	b29b      	uxth	r3, r3
 8011090:	fb0a 330b 	mla	r3, sl, fp, r3
 8011094:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011098:	f8d9 7000 	ldr.w	r7, [r9]
 801109c:	4463      	add	r3, ip
 801109e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80110a2:	fb0a c70b 	mla	r7, sl, fp, ip
 80110a6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80110aa:	b29b      	uxth	r3, r3
 80110ac:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80110b0:	4572      	cmp	r2, lr
 80110b2:	f849 3b04 	str.w	r3, [r9], #4
 80110b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80110ba:	d8e2      	bhi.n	8011082 <__multiply+0xb2>
 80110bc:	9b01      	ldr	r3, [sp, #4]
 80110be:	f845 c003 	str.w	ip, [r5, r3]
 80110c2:	9b03      	ldr	r3, [sp, #12]
 80110c4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80110c8:	3104      	adds	r1, #4
 80110ca:	f1b9 0f00 	cmp.w	r9, #0
 80110ce:	d021      	beq.n	8011114 <__multiply+0x144>
 80110d0:	682b      	ldr	r3, [r5, #0]
 80110d2:	f104 0c14 	add.w	ip, r4, #20
 80110d6:	46ae      	mov	lr, r5
 80110d8:	f04f 0a00 	mov.w	sl, #0
 80110dc:	f8bc b000 	ldrh.w	fp, [ip]
 80110e0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80110e4:	fb09 770b 	mla	r7, r9, fp, r7
 80110e8:	4457      	add	r7, sl
 80110ea:	b29b      	uxth	r3, r3
 80110ec:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80110f0:	f84e 3b04 	str.w	r3, [lr], #4
 80110f4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80110f8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80110fc:	f8be 3000 	ldrh.w	r3, [lr]
 8011100:	fb09 330a 	mla	r3, r9, sl, r3
 8011104:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8011108:	4562      	cmp	r2, ip
 801110a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801110e:	d8e5      	bhi.n	80110dc <__multiply+0x10c>
 8011110:	9f01      	ldr	r7, [sp, #4]
 8011112:	51eb      	str	r3, [r5, r7]
 8011114:	3504      	adds	r5, #4
 8011116:	e799      	b.n	801104c <__multiply+0x7c>
 8011118:	3e01      	subs	r6, #1
 801111a:	e79b      	b.n	8011054 <__multiply+0x84>
 801111c:	08012198 	.word	0x08012198
 8011120:	080121a9 	.word	0x080121a9

08011124 <__pow5mult>:
 8011124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011128:	4615      	mov	r5, r2
 801112a:	f012 0203 	ands.w	r2, r2, #3
 801112e:	4607      	mov	r7, r0
 8011130:	460e      	mov	r6, r1
 8011132:	d007      	beq.n	8011144 <__pow5mult+0x20>
 8011134:	4c25      	ldr	r4, [pc, #148]	@ (80111cc <__pow5mult+0xa8>)
 8011136:	3a01      	subs	r2, #1
 8011138:	2300      	movs	r3, #0
 801113a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801113e:	f7ff fe9f 	bl	8010e80 <__multadd>
 8011142:	4606      	mov	r6, r0
 8011144:	10ad      	asrs	r5, r5, #2
 8011146:	d03d      	beq.n	80111c4 <__pow5mult+0xa0>
 8011148:	69fc      	ldr	r4, [r7, #28]
 801114a:	b97c      	cbnz	r4, 801116c <__pow5mult+0x48>
 801114c:	2010      	movs	r0, #16
 801114e:	f7ff fd7f 	bl	8010c50 <malloc>
 8011152:	4602      	mov	r2, r0
 8011154:	61f8      	str	r0, [r7, #28]
 8011156:	b928      	cbnz	r0, 8011164 <__pow5mult+0x40>
 8011158:	4b1d      	ldr	r3, [pc, #116]	@ (80111d0 <__pow5mult+0xac>)
 801115a:	481e      	ldr	r0, [pc, #120]	@ (80111d4 <__pow5mult+0xb0>)
 801115c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011160:	f000 fbea 	bl	8011938 <__assert_func>
 8011164:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011168:	6004      	str	r4, [r0, #0]
 801116a:	60c4      	str	r4, [r0, #12]
 801116c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011170:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8011174:	b94c      	cbnz	r4, 801118a <__pow5mult+0x66>
 8011176:	f240 2171 	movw	r1, #625	@ 0x271
 801117a:	4638      	mov	r0, r7
 801117c:	f7ff ff12 	bl	8010fa4 <__i2b>
 8011180:	2300      	movs	r3, #0
 8011182:	f8c8 0008 	str.w	r0, [r8, #8]
 8011186:	4604      	mov	r4, r0
 8011188:	6003      	str	r3, [r0, #0]
 801118a:	f04f 0900 	mov.w	r9, #0
 801118e:	07eb      	lsls	r3, r5, #31
 8011190:	d50a      	bpl.n	80111a8 <__pow5mult+0x84>
 8011192:	4631      	mov	r1, r6
 8011194:	4622      	mov	r2, r4
 8011196:	4638      	mov	r0, r7
 8011198:	f7ff ff1a 	bl	8010fd0 <__multiply>
 801119c:	4631      	mov	r1, r6
 801119e:	4680      	mov	r8, r0
 80111a0:	4638      	mov	r0, r7
 80111a2:	f7ff fe4b 	bl	8010e3c <_Bfree>
 80111a6:	4646      	mov	r6, r8
 80111a8:	106d      	asrs	r5, r5, #1
 80111aa:	d00b      	beq.n	80111c4 <__pow5mult+0xa0>
 80111ac:	6820      	ldr	r0, [r4, #0]
 80111ae:	b938      	cbnz	r0, 80111c0 <__pow5mult+0x9c>
 80111b0:	4622      	mov	r2, r4
 80111b2:	4621      	mov	r1, r4
 80111b4:	4638      	mov	r0, r7
 80111b6:	f7ff ff0b 	bl	8010fd0 <__multiply>
 80111ba:	6020      	str	r0, [r4, #0]
 80111bc:	f8c0 9000 	str.w	r9, [r0]
 80111c0:	4604      	mov	r4, r0
 80111c2:	e7e4      	b.n	801118e <__pow5mult+0x6a>
 80111c4:	4630      	mov	r0, r6
 80111c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111ca:	bf00      	nop
 80111cc:	08012204 	.word	0x08012204
 80111d0:	08012129 	.word	0x08012129
 80111d4:	080121a9 	.word	0x080121a9

080111d8 <__lshift>:
 80111d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111dc:	460c      	mov	r4, r1
 80111de:	6849      	ldr	r1, [r1, #4]
 80111e0:	6923      	ldr	r3, [r4, #16]
 80111e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80111e6:	68a3      	ldr	r3, [r4, #8]
 80111e8:	4607      	mov	r7, r0
 80111ea:	4691      	mov	r9, r2
 80111ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80111f0:	f108 0601 	add.w	r6, r8, #1
 80111f4:	42b3      	cmp	r3, r6
 80111f6:	db0b      	blt.n	8011210 <__lshift+0x38>
 80111f8:	4638      	mov	r0, r7
 80111fa:	f7ff fddf 	bl	8010dbc <_Balloc>
 80111fe:	4605      	mov	r5, r0
 8011200:	b948      	cbnz	r0, 8011216 <__lshift+0x3e>
 8011202:	4602      	mov	r2, r0
 8011204:	4b28      	ldr	r3, [pc, #160]	@ (80112a8 <__lshift+0xd0>)
 8011206:	4829      	ldr	r0, [pc, #164]	@ (80112ac <__lshift+0xd4>)
 8011208:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801120c:	f000 fb94 	bl	8011938 <__assert_func>
 8011210:	3101      	adds	r1, #1
 8011212:	005b      	lsls	r3, r3, #1
 8011214:	e7ee      	b.n	80111f4 <__lshift+0x1c>
 8011216:	2300      	movs	r3, #0
 8011218:	f100 0114 	add.w	r1, r0, #20
 801121c:	f100 0210 	add.w	r2, r0, #16
 8011220:	4618      	mov	r0, r3
 8011222:	4553      	cmp	r3, sl
 8011224:	db33      	blt.n	801128e <__lshift+0xb6>
 8011226:	6920      	ldr	r0, [r4, #16]
 8011228:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801122c:	f104 0314 	add.w	r3, r4, #20
 8011230:	f019 091f 	ands.w	r9, r9, #31
 8011234:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011238:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801123c:	d02b      	beq.n	8011296 <__lshift+0xbe>
 801123e:	f1c9 0e20 	rsb	lr, r9, #32
 8011242:	468a      	mov	sl, r1
 8011244:	2200      	movs	r2, #0
 8011246:	6818      	ldr	r0, [r3, #0]
 8011248:	fa00 f009 	lsl.w	r0, r0, r9
 801124c:	4310      	orrs	r0, r2
 801124e:	f84a 0b04 	str.w	r0, [sl], #4
 8011252:	f853 2b04 	ldr.w	r2, [r3], #4
 8011256:	459c      	cmp	ip, r3
 8011258:	fa22 f20e 	lsr.w	r2, r2, lr
 801125c:	d8f3      	bhi.n	8011246 <__lshift+0x6e>
 801125e:	ebac 0304 	sub.w	r3, ip, r4
 8011262:	3b15      	subs	r3, #21
 8011264:	f023 0303 	bic.w	r3, r3, #3
 8011268:	3304      	adds	r3, #4
 801126a:	f104 0015 	add.w	r0, r4, #21
 801126e:	4584      	cmp	ip, r0
 8011270:	bf38      	it	cc
 8011272:	2304      	movcc	r3, #4
 8011274:	50ca      	str	r2, [r1, r3]
 8011276:	b10a      	cbz	r2, 801127c <__lshift+0xa4>
 8011278:	f108 0602 	add.w	r6, r8, #2
 801127c:	3e01      	subs	r6, #1
 801127e:	4638      	mov	r0, r7
 8011280:	612e      	str	r6, [r5, #16]
 8011282:	4621      	mov	r1, r4
 8011284:	f7ff fdda 	bl	8010e3c <_Bfree>
 8011288:	4628      	mov	r0, r5
 801128a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801128e:	f842 0f04 	str.w	r0, [r2, #4]!
 8011292:	3301      	adds	r3, #1
 8011294:	e7c5      	b.n	8011222 <__lshift+0x4a>
 8011296:	3904      	subs	r1, #4
 8011298:	f853 2b04 	ldr.w	r2, [r3], #4
 801129c:	f841 2f04 	str.w	r2, [r1, #4]!
 80112a0:	459c      	cmp	ip, r3
 80112a2:	d8f9      	bhi.n	8011298 <__lshift+0xc0>
 80112a4:	e7ea      	b.n	801127c <__lshift+0xa4>
 80112a6:	bf00      	nop
 80112a8:	08012198 	.word	0x08012198
 80112ac:	080121a9 	.word	0x080121a9

080112b0 <__mcmp>:
 80112b0:	690a      	ldr	r2, [r1, #16]
 80112b2:	4603      	mov	r3, r0
 80112b4:	6900      	ldr	r0, [r0, #16]
 80112b6:	1a80      	subs	r0, r0, r2
 80112b8:	b530      	push	{r4, r5, lr}
 80112ba:	d10e      	bne.n	80112da <__mcmp+0x2a>
 80112bc:	3314      	adds	r3, #20
 80112be:	3114      	adds	r1, #20
 80112c0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80112c4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80112c8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80112cc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80112d0:	4295      	cmp	r5, r2
 80112d2:	d003      	beq.n	80112dc <__mcmp+0x2c>
 80112d4:	d205      	bcs.n	80112e2 <__mcmp+0x32>
 80112d6:	f04f 30ff 	mov.w	r0, #4294967295
 80112da:	bd30      	pop	{r4, r5, pc}
 80112dc:	42a3      	cmp	r3, r4
 80112de:	d3f3      	bcc.n	80112c8 <__mcmp+0x18>
 80112e0:	e7fb      	b.n	80112da <__mcmp+0x2a>
 80112e2:	2001      	movs	r0, #1
 80112e4:	e7f9      	b.n	80112da <__mcmp+0x2a>
	...

080112e8 <__mdiff>:
 80112e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80112ec:	4689      	mov	r9, r1
 80112ee:	4606      	mov	r6, r0
 80112f0:	4611      	mov	r1, r2
 80112f2:	4648      	mov	r0, r9
 80112f4:	4614      	mov	r4, r2
 80112f6:	f7ff ffdb 	bl	80112b0 <__mcmp>
 80112fa:	1e05      	subs	r5, r0, #0
 80112fc:	d112      	bne.n	8011324 <__mdiff+0x3c>
 80112fe:	4629      	mov	r1, r5
 8011300:	4630      	mov	r0, r6
 8011302:	f7ff fd5b 	bl	8010dbc <_Balloc>
 8011306:	4602      	mov	r2, r0
 8011308:	b928      	cbnz	r0, 8011316 <__mdiff+0x2e>
 801130a:	4b3f      	ldr	r3, [pc, #252]	@ (8011408 <__mdiff+0x120>)
 801130c:	f240 2137 	movw	r1, #567	@ 0x237
 8011310:	483e      	ldr	r0, [pc, #248]	@ (801140c <__mdiff+0x124>)
 8011312:	f000 fb11 	bl	8011938 <__assert_func>
 8011316:	2301      	movs	r3, #1
 8011318:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801131c:	4610      	mov	r0, r2
 801131e:	b003      	add	sp, #12
 8011320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011324:	bfbc      	itt	lt
 8011326:	464b      	movlt	r3, r9
 8011328:	46a1      	movlt	r9, r4
 801132a:	4630      	mov	r0, r6
 801132c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011330:	bfba      	itte	lt
 8011332:	461c      	movlt	r4, r3
 8011334:	2501      	movlt	r5, #1
 8011336:	2500      	movge	r5, #0
 8011338:	f7ff fd40 	bl	8010dbc <_Balloc>
 801133c:	4602      	mov	r2, r0
 801133e:	b918      	cbnz	r0, 8011348 <__mdiff+0x60>
 8011340:	4b31      	ldr	r3, [pc, #196]	@ (8011408 <__mdiff+0x120>)
 8011342:	f240 2145 	movw	r1, #581	@ 0x245
 8011346:	e7e3      	b.n	8011310 <__mdiff+0x28>
 8011348:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801134c:	6926      	ldr	r6, [r4, #16]
 801134e:	60c5      	str	r5, [r0, #12]
 8011350:	f109 0310 	add.w	r3, r9, #16
 8011354:	f109 0514 	add.w	r5, r9, #20
 8011358:	f104 0e14 	add.w	lr, r4, #20
 801135c:	f100 0b14 	add.w	fp, r0, #20
 8011360:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011364:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011368:	9301      	str	r3, [sp, #4]
 801136a:	46d9      	mov	r9, fp
 801136c:	f04f 0c00 	mov.w	ip, #0
 8011370:	9b01      	ldr	r3, [sp, #4]
 8011372:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011376:	f853 af04 	ldr.w	sl, [r3, #4]!
 801137a:	9301      	str	r3, [sp, #4]
 801137c:	fa1f f38a 	uxth.w	r3, sl
 8011380:	4619      	mov	r1, r3
 8011382:	b283      	uxth	r3, r0
 8011384:	1acb      	subs	r3, r1, r3
 8011386:	0c00      	lsrs	r0, r0, #16
 8011388:	4463      	add	r3, ip
 801138a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801138e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011392:	b29b      	uxth	r3, r3
 8011394:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011398:	4576      	cmp	r6, lr
 801139a:	f849 3b04 	str.w	r3, [r9], #4
 801139e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80113a2:	d8e5      	bhi.n	8011370 <__mdiff+0x88>
 80113a4:	1b33      	subs	r3, r6, r4
 80113a6:	3b15      	subs	r3, #21
 80113a8:	f023 0303 	bic.w	r3, r3, #3
 80113ac:	3415      	adds	r4, #21
 80113ae:	3304      	adds	r3, #4
 80113b0:	42a6      	cmp	r6, r4
 80113b2:	bf38      	it	cc
 80113b4:	2304      	movcc	r3, #4
 80113b6:	441d      	add	r5, r3
 80113b8:	445b      	add	r3, fp
 80113ba:	461e      	mov	r6, r3
 80113bc:	462c      	mov	r4, r5
 80113be:	4544      	cmp	r4, r8
 80113c0:	d30e      	bcc.n	80113e0 <__mdiff+0xf8>
 80113c2:	f108 0103 	add.w	r1, r8, #3
 80113c6:	1b49      	subs	r1, r1, r5
 80113c8:	f021 0103 	bic.w	r1, r1, #3
 80113cc:	3d03      	subs	r5, #3
 80113ce:	45a8      	cmp	r8, r5
 80113d0:	bf38      	it	cc
 80113d2:	2100      	movcc	r1, #0
 80113d4:	440b      	add	r3, r1
 80113d6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80113da:	b191      	cbz	r1, 8011402 <__mdiff+0x11a>
 80113dc:	6117      	str	r7, [r2, #16]
 80113de:	e79d      	b.n	801131c <__mdiff+0x34>
 80113e0:	f854 1b04 	ldr.w	r1, [r4], #4
 80113e4:	46e6      	mov	lr, ip
 80113e6:	0c08      	lsrs	r0, r1, #16
 80113e8:	fa1c fc81 	uxtah	ip, ip, r1
 80113ec:	4471      	add	r1, lr
 80113ee:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80113f2:	b289      	uxth	r1, r1
 80113f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80113f8:	f846 1b04 	str.w	r1, [r6], #4
 80113fc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011400:	e7dd      	b.n	80113be <__mdiff+0xd6>
 8011402:	3f01      	subs	r7, #1
 8011404:	e7e7      	b.n	80113d6 <__mdiff+0xee>
 8011406:	bf00      	nop
 8011408:	08012198 	.word	0x08012198
 801140c:	080121a9 	.word	0x080121a9

08011410 <__d2b>:
 8011410:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011414:	460f      	mov	r7, r1
 8011416:	2101      	movs	r1, #1
 8011418:	ec59 8b10 	vmov	r8, r9, d0
 801141c:	4616      	mov	r6, r2
 801141e:	f7ff fccd 	bl	8010dbc <_Balloc>
 8011422:	4604      	mov	r4, r0
 8011424:	b930      	cbnz	r0, 8011434 <__d2b+0x24>
 8011426:	4602      	mov	r2, r0
 8011428:	4b23      	ldr	r3, [pc, #140]	@ (80114b8 <__d2b+0xa8>)
 801142a:	4824      	ldr	r0, [pc, #144]	@ (80114bc <__d2b+0xac>)
 801142c:	f240 310f 	movw	r1, #783	@ 0x30f
 8011430:	f000 fa82 	bl	8011938 <__assert_func>
 8011434:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011438:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801143c:	b10d      	cbz	r5, 8011442 <__d2b+0x32>
 801143e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011442:	9301      	str	r3, [sp, #4]
 8011444:	f1b8 0300 	subs.w	r3, r8, #0
 8011448:	d023      	beq.n	8011492 <__d2b+0x82>
 801144a:	4668      	mov	r0, sp
 801144c:	9300      	str	r3, [sp, #0]
 801144e:	f7ff fd7c 	bl	8010f4a <__lo0bits>
 8011452:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011456:	b1d0      	cbz	r0, 801148e <__d2b+0x7e>
 8011458:	f1c0 0320 	rsb	r3, r0, #32
 801145c:	fa02 f303 	lsl.w	r3, r2, r3
 8011460:	430b      	orrs	r3, r1
 8011462:	40c2      	lsrs	r2, r0
 8011464:	6163      	str	r3, [r4, #20]
 8011466:	9201      	str	r2, [sp, #4]
 8011468:	9b01      	ldr	r3, [sp, #4]
 801146a:	61a3      	str	r3, [r4, #24]
 801146c:	2b00      	cmp	r3, #0
 801146e:	bf0c      	ite	eq
 8011470:	2201      	moveq	r2, #1
 8011472:	2202      	movne	r2, #2
 8011474:	6122      	str	r2, [r4, #16]
 8011476:	b1a5      	cbz	r5, 80114a2 <__d2b+0x92>
 8011478:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801147c:	4405      	add	r5, r0
 801147e:	603d      	str	r5, [r7, #0]
 8011480:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011484:	6030      	str	r0, [r6, #0]
 8011486:	4620      	mov	r0, r4
 8011488:	b003      	add	sp, #12
 801148a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801148e:	6161      	str	r1, [r4, #20]
 8011490:	e7ea      	b.n	8011468 <__d2b+0x58>
 8011492:	a801      	add	r0, sp, #4
 8011494:	f7ff fd59 	bl	8010f4a <__lo0bits>
 8011498:	9b01      	ldr	r3, [sp, #4]
 801149a:	6163      	str	r3, [r4, #20]
 801149c:	3020      	adds	r0, #32
 801149e:	2201      	movs	r2, #1
 80114a0:	e7e8      	b.n	8011474 <__d2b+0x64>
 80114a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80114a6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80114aa:	6038      	str	r0, [r7, #0]
 80114ac:	6918      	ldr	r0, [r3, #16]
 80114ae:	f7ff fd2d 	bl	8010f0c <__hi0bits>
 80114b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80114b6:	e7e5      	b.n	8011484 <__d2b+0x74>
 80114b8:	08012198 	.word	0x08012198
 80114bc:	080121a9 	.word	0x080121a9

080114c0 <__ssputs_r>:
 80114c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80114c4:	688e      	ldr	r6, [r1, #8]
 80114c6:	461f      	mov	r7, r3
 80114c8:	42be      	cmp	r6, r7
 80114ca:	680b      	ldr	r3, [r1, #0]
 80114cc:	4682      	mov	sl, r0
 80114ce:	460c      	mov	r4, r1
 80114d0:	4690      	mov	r8, r2
 80114d2:	d82d      	bhi.n	8011530 <__ssputs_r+0x70>
 80114d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80114d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80114dc:	d026      	beq.n	801152c <__ssputs_r+0x6c>
 80114de:	6965      	ldr	r5, [r4, #20]
 80114e0:	6909      	ldr	r1, [r1, #16]
 80114e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80114e6:	eba3 0901 	sub.w	r9, r3, r1
 80114ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80114ee:	1c7b      	adds	r3, r7, #1
 80114f0:	444b      	add	r3, r9
 80114f2:	106d      	asrs	r5, r5, #1
 80114f4:	429d      	cmp	r5, r3
 80114f6:	bf38      	it	cc
 80114f8:	461d      	movcc	r5, r3
 80114fa:	0553      	lsls	r3, r2, #21
 80114fc:	d527      	bpl.n	801154e <__ssputs_r+0x8e>
 80114fe:	4629      	mov	r1, r5
 8011500:	f7ff fbd0 	bl	8010ca4 <_malloc_r>
 8011504:	4606      	mov	r6, r0
 8011506:	b360      	cbz	r0, 8011562 <__ssputs_r+0xa2>
 8011508:	6921      	ldr	r1, [r4, #16]
 801150a:	464a      	mov	r2, r9
 801150c:	f000 fa06 	bl	801191c <memcpy>
 8011510:	89a3      	ldrh	r3, [r4, #12]
 8011512:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8011516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801151a:	81a3      	strh	r3, [r4, #12]
 801151c:	6126      	str	r6, [r4, #16]
 801151e:	6165      	str	r5, [r4, #20]
 8011520:	444e      	add	r6, r9
 8011522:	eba5 0509 	sub.w	r5, r5, r9
 8011526:	6026      	str	r6, [r4, #0]
 8011528:	60a5      	str	r5, [r4, #8]
 801152a:	463e      	mov	r6, r7
 801152c:	42be      	cmp	r6, r7
 801152e:	d900      	bls.n	8011532 <__ssputs_r+0x72>
 8011530:	463e      	mov	r6, r7
 8011532:	6820      	ldr	r0, [r4, #0]
 8011534:	4632      	mov	r2, r6
 8011536:	4641      	mov	r1, r8
 8011538:	f000 f9c6 	bl	80118c8 <memmove>
 801153c:	68a3      	ldr	r3, [r4, #8]
 801153e:	1b9b      	subs	r3, r3, r6
 8011540:	60a3      	str	r3, [r4, #8]
 8011542:	6823      	ldr	r3, [r4, #0]
 8011544:	4433      	add	r3, r6
 8011546:	6023      	str	r3, [r4, #0]
 8011548:	2000      	movs	r0, #0
 801154a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801154e:	462a      	mov	r2, r5
 8011550:	f000 fa36 	bl	80119c0 <_realloc_r>
 8011554:	4606      	mov	r6, r0
 8011556:	2800      	cmp	r0, #0
 8011558:	d1e0      	bne.n	801151c <__ssputs_r+0x5c>
 801155a:	6921      	ldr	r1, [r4, #16]
 801155c:	4650      	mov	r0, sl
 801155e:	f7ff fb2d 	bl	8010bbc <_free_r>
 8011562:	230c      	movs	r3, #12
 8011564:	f8ca 3000 	str.w	r3, [sl]
 8011568:	89a3      	ldrh	r3, [r4, #12]
 801156a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801156e:	81a3      	strh	r3, [r4, #12]
 8011570:	f04f 30ff 	mov.w	r0, #4294967295
 8011574:	e7e9      	b.n	801154a <__ssputs_r+0x8a>
	...

08011578 <_svfiprintf_r>:
 8011578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801157c:	4698      	mov	r8, r3
 801157e:	898b      	ldrh	r3, [r1, #12]
 8011580:	061b      	lsls	r3, r3, #24
 8011582:	b09d      	sub	sp, #116	@ 0x74
 8011584:	4607      	mov	r7, r0
 8011586:	460d      	mov	r5, r1
 8011588:	4614      	mov	r4, r2
 801158a:	d510      	bpl.n	80115ae <_svfiprintf_r+0x36>
 801158c:	690b      	ldr	r3, [r1, #16]
 801158e:	b973      	cbnz	r3, 80115ae <_svfiprintf_r+0x36>
 8011590:	2140      	movs	r1, #64	@ 0x40
 8011592:	f7ff fb87 	bl	8010ca4 <_malloc_r>
 8011596:	6028      	str	r0, [r5, #0]
 8011598:	6128      	str	r0, [r5, #16]
 801159a:	b930      	cbnz	r0, 80115aa <_svfiprintf_r+0x32>
 801159c:	230c      	movs	r3, #12
 801159e:	603b      	str	r3, [r7, #0]
 80115a0:	f04f 30ff 	mov.w	r0, #4294967295
 80115a4:	b01d      	add	sp, #116	@ 0x74
 80115a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115aa:	2340      	movs	r3, #64	@ 0x40
 80115ac:	616b      	str	r3, [r5, #20]
 80115ae:	2300      	movs	r3, #0
 80115b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80115b2:	2320      	movs	r3, #32
 80115b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80115b8:	f8cd 800c 	str.w	r8, [sp, #12]
 80115bc:	2330      	movs	r3, #48	@ 0x30
 80115be:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801175c <_svfiprintf_r+0x1e4>
 80115c2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80115c6:	f04f 0901 	mov.w	r9, #1
 80115ca:	4623      	mov	r3, r4
 80115cc:	469a      	mov	sl, r3
 80115ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80115d2:	b10a      	cbz	r2, 80115d8 <_svfiprintf_r+0x60>
 80115d4:	2a25      	cmp	r2, #37	@ 0x25
 80115d6:	d1f9      	bne.n	80115cc <_svfiprintf_r+0x54>
 80115d8:	ebba 0b04 	subs.w	fp, sl, r4
 80115dc:	d00b      	beq.n	80115f6 <_svfiprintf_r+0x7e>
 80115de:	465b      	mov	r3, fp
 80115e0:	4622      	mov	r2, r4
 80115e2:	4629      	mov	r1, r5
 80115e4:	4638      	mov	r0, r7
 80115e6:	f7ff ff6b 	bl	80114c0 <__ssputs_r>
 80115ea:	3001      	adds	r0, #1
 80115ec:	f000 80a7 	beq.w	801173e <_svfiprintf_r+0x1c6>
 80115f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80115f2:	445a      	add	r2, fp
 80115f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80115f6:	f89a 3000 	ldrb.w	r3, [sl]
 80115fa:	2b00      	cmp	r3, #0
 80115fc:	f000 809f 	beq.w	801173e <_svfiprintf_r+0x1c6>
 8011600:	2300      	movs	r3, #0
 8011602:	f04f 32ff 	mov.w	r2, #4294967295
 8011606:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801160a:	f10a 0a01 	add.w	sl, sl, #1
 801160e:	9304      	str	r3, [sp, #16]
 8011610:	9307      	str	r3, [sp, #28]
 8011612:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011616:	931a      	str	r3, [sp, #104]	@ 0x68
 8011618:	4654      	mov	r4, sl
 801161a:	2205      	movs	r2, #5
 801161c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011620:	484e      	ldr	r0, [pc, #312]	@ (801175c <_svfiprintf_r+0x1e4>)
 8011622:	f7ee fe5d 	bl	80002e0 <memchr>
 8011626:	9a04      	ldr	r2, [sp, #16]
 8011628:	b9d8      	cbnz	r0, 8011662 <_svfiprintf_r+0xea>
 801162a:	06d0      	lsls	r0, r2, #27
 801162c:	bf44      	itt	mi
 801162e:	2320      	movmi	r3, #32
 8011630:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011634:	0711      	lsls	r1, r2, #28
 8011636:	bf44      	itt	mi
 8011638:	232b      	movmi	r3, #43	@ 0x2b
 801163a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801163e:	f89a 3000 	ldrb.w	r3, [sl]
 8011642:	2b2a      	cmp	r3, #42	@ 0x2a
 8011644:	d015      	beq.n	8011672 <_svfiprintf_r+0xfa>
 8011646:	9a07      	ldr	r2, [sp, #28]
 8011648:	4654      	mov	r4, sl
 801164a:	2000      	movs	r0, #0
 801164c:	f04f 0c0a 	mov.w	ip, #10
 8011650:	4621      	mov	r1, r4
 8011652:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011656:	3b30      	subs	r3, #48	@ 0x30
 8011658:	2b09      	cmp	r3, #9
 801165a:	d94b      	bls.n	80116f4 <_svfiprintf_r+0x17c>
 801165c:	b1b0      	cbz	r0, 801168c <_svfiprintf_r+0x114>
 801165e:	9207      	str	r2, [sp, #28]
 8011660:	e014      	b.n	801168c <_svfiprintf_r+0x114>
 8011662:	eba0 0308 	sub.w	r3, r0, r8
 8011666:	fa09 f303 	lsl.w	r3, r9, r3
 801166a:	4313      	orrs	r3, r2
 801166c:	9304      	str	r3, [sp, #16]
 801166e:	46a2      	mov	sl, r4
 8011670:	e7d2      	b.n	8011618 <_svfiprintf_r+0xa0>
 8011672:	9b03      	ldr	r3, [sp, #12]
 8011674:	1d19      	adds	r1, r3, #4
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	9103      	str	r1, [sp, #12]
 801167a:	2b00      	cmp	r3, #0
 801167c:	bfbb      	ittet	lt
 801167e:	425b      	neglt	r3, r3
 8011680:	f042 0202 	orrlt.w	r2, r2, #2
 8011684:	9307      	strge	r3, [sp, #28]
 8011686:	9307      	strlt	r3, [sp, #28]
 8011688:	bfb8      	it	lt
 801168a:	9204      	strlt	r2, [sp, #16]
 801168c:	7823      	ldrb	r3, [r4, #0]
 801168e:	2b2e      	cmp	r3, #46	@ 0x2e
 8011690:	d10a      	bne.n	80116a8 <_svfiprintf_r+0x130>
 8011692:	7863      	ldrb	r3, [r4, #1]
 8011694:	2b2a      	cmp	r3, #42	@ 0x2a
 8011696:	d132      	bne.n	80116fe <_svfiprintf_r+0x186>
 8011698:	9b03      	ldr	r3, [sp, #12]
 801169a:	1d1a      	adds	r2, r3, #4
 801169c:	681b      	ldr	r3, [r3, #0]
 801169e:	9203      	str	r2, [sp, #12]
 80116a0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80116a4:	3402      	adds	r4, #2
 80116a6:	9305      	str	r3, [sp, #20]
 80116a8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801176c <_svfiprintf_r+0x1f4>
 80116ac:	7821      	ldrb	r1, [r4, #0]
 80116ae:	2203      	movs	r2, #3
 80116b0:	4650      	mov	r0, sl
 80116b2:	f7ee fe15 	bl	80002e0 <memchr>
 80116b6:	b138      	cbz	r0, 80116c8 <_svfiprintf_r+0x150>
 80116b8:	9b04      	ldr	r3, [sp, #16]
 80116ba:	eba0 000a 	sub.w	r0, r0, sl
 80116be:	2240      	movs	r2, #64	@ 0x40
 80116c0:	4082      	lsls	r2, r0
 80116c2:	4313      	orrs	r3, r2
 80116c4:	3401      	adds	r4, #1
 80116c6:	9304      	str	r3, [sp, #16]
 80116c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116cc:	4824      	ldr	r0, [pc, #144]	@ (8011760 <_svfiprintf_r+0x1e8>)
 80116ce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80116d2:	2206      	movs	r2, #6
 80116d4:	f7ee fe04 	bl	80002e0 <memchr>
 80116d8:	2800      	cmp	r0, #0
 80116da:	d036      	beq.n	801174a <_svfiprintf_r+0x1d2>
 80116dc:	4b21      	ldr	r3, [pc, #132]	@ (8011764 <_svfiprintf_r+0x1ec>)
 80116de:	bb1b      	cbnz	r3, 8011728 <_svfiprintf_r+0x1b0>
 80116e0:	9b03      	ldr	r3, [sp, #12]
 80116e2:	3307      	adds	r3, #7
 80116e4:	f023 0307 	bic.w	r3, r3, #7
 80116e8:	3308      	adds	r3, #8
 80116ea:	9303      	str	r3, [sp, #12]
 80116ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116ee:	4433      	add	r3, r6
 80116f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80116f2:	e76a      	b.n	80115ca <_svfiprintf_r+0x52>
 80116f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80116f8:	460c      	mov	r4, r1
 80116fa:	2001      	movs	r0, #1
 80116fc:	e7a8      	b.n	8011650 <_svfiprintf_r+0xd8>
 80116fe:	2300      	movs	r3, #0
 8011700:	3401      	adds	r4, #1
 8011702:	9305      	str	r3, [sp, #20]
 8011704:	4619      	mov	r1, r3
 8011706:	f04f 0c0a 	mov.w	ip, #10
 801170a:	4620      	mov	r0, r4
 801170c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011710:	3a30      	subs	r2, #48	@ 0x30
 8011712:	2a09      	cmp	r2, #9
 8011714:	d903      	bls.n	801171e <_svfiprintf_r+0x1a6>
 8011716:	2b00      	cmp	r3, #0
 8011718:	d0c6      	beq.n	80116a8 <_svfiprintf_r+0x130>
 801171a:	9105      	str	r1, [sp, #20]
 801171c:	e7c4      	b.n	80116a8 <_svfiprintf_r+0x130>
 801171e:	fb0c 2101 	mla	r1, ip, r1, r2
 8011722:	4604      	mov	r4, r0
 8011724:	2301      	movs	r3, #1
 8011726:	e7f0      	b.n	801170a <_svfiprintf_r+0x192>
 8011728:	ab03      	add	r3, sp, #12
 801172a:	9300      	str	r3, [sp, #0]
 801172c:	462a      	mov	r2, r5
 801172e:	4b0e      	ldr	r3, [pc, #56]	@ (8011768 <_svfiprintf_r+0x1f0>)
 8011730:	a904      	add	r1, sp, #16
 8011732:	4638      	mov	r0, r7
 8011734:	f7fd ff14 	bl	800f560 <_printf_float>
 8011738:	1c42      	adds	r2, r0, #1
 801173a:	4606      	mov	r6, r0
 801173c:	d1d6      	bne.n	80116ec <_svfiprintf_r+0x174>
 801173e:	89ab      	ldrh	r3, [r5, #12]
 8011740:	065b      	lsls	r3, r3, #25
 8011742:	f53f af2d 	bmi.w	80115a0 <_svfiprintf_r+0x28>
 8011746:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011748:	e72c      	b.n	80115a4 <_svfiprintf_r+0x2c>
 801174a:	ab03      	add	r3, sp, #12
 801174c:	9300      	str	r3, [sp, #0]
 801174e:	462a      	mov	r2, r5
 8011750:	4b05      	ldr	r3, [pc, #20]	@ (8011768 <_svfiprintf_r+0x1f0>)
 8011752:	a904      	add	r1, sp, #16
 8011754:	4638      	mov	r0, r7
 8011756:	f7fe f98b 	bl	800fa70 <_printf_i>
 801175a:	e7ed      	b.n	8011738 <_svfiprintf_r+0x1c0>
 801175c:	08012300 	.word	0x08012300
 8011760:	0801230a 	.word	0x0801230a
 8011764:	0800f561 	.word	0x0800f561
 8011768:	080114c1 	.word	0x080114c1
 801176c:	08012306 	.word	0x08012306

08011770 <__sflush_r>:
 8011770:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011778:	0716      	lsls	r6, r2, #28
 801177a:	4605      	mov	r5, r0
 801177c:	460c      	mov	r4, r1
 801177e:	d454      	bmi.n	801182a <__sflush_r+0xba>
 8011780:	684b      	ldr	r3, [r1, #4]
 8011782:	2b00      	cmp	r3, #0
 8011784:	dc02      	bgt.n	801178c <__sflush_r+0x1c>
 8011786:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011788:	2b00      	cmp	r3, #0
 801178a:	dd48      	ble.n	801181e <__sflush_r+0xae>
 801178c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801178e:	2e00      	cmp	r6, #0
 8011790:	d045      	beq.n	801181e <__sflush_r+0xae>
 8011792:	2300      	movs	r3, #0
 8011794:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011798:	682f      	ldr	r7, [r5, #0]
 801179a:	6a21      	ldr	r1, [r4, #32]
 801179c:	602b      	str	r3, [r5, #0]
 801179e:	d030      	beq.n	8011802 <__sflush_r+0x92>
 80117a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80117a2:	89a3      	ldrh	r3, [r4, #12]
 80117a4:	0759      	lsls	r1, r3, #29
 80117a6:	d505      	bpl.n	80117b4 <__sflush_r+0x44>
 80117a8:	6863      	ldr	r3, [r4, #4]
 80117aa:	1ad2      	subs	r2, r2, r3
 80117ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80117ae:	b10b      	cbz	r3, 80117b4 <__sflush_r+0x44>
 80117b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80117b2:	1ad2      	subs	r2, r2, r3
 80117b4:	2300      	movs	r3, #0
 80117b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80117b8:	6a21      	ldr	r1, [r4, #32]
 80117ba:	4628      	mov	r0, r5
 80117bc:	47b0      	blx	r6
 80117be:	1c43      	adds	r3, r0, #1
 80117c0:	89a3      	ldrh	r3, [r4, #12]
 80117c2:	d106      	bne.n	80117d2 <__sflush_r+0x62>
 80117c4:	6829      	ldr	r1, [r5, #0]
 80117c6:	291d      	cmp	r1, #29
 80117c8:	d82b      	bhi.n	8011822 <__sflush_r+0xb2>
 80117ca:	4a2a      	ldr	r2, [pc, #168]	@ (8011874 <__sflush_r+0x104>)
 80117cc:	410a      	asrs	r2, r1
 80117ce:	07d6      	lsls	r6, r2, #31
 80117d0:	d427      	bmi.n	8011822 <__sflush_r+0xb2>
 80117d2:	2200      	movs	r2, #0
 80117d4:	6062      	str	r2, [r4, #4]
 80117d6:	04d9      	lsls	r1, r3, #19
 80117d8:	6922      	ldr	r2, [r4, #16]
 80117da:	6022      	str	r2, [r4, #0]
 80117dc:	d504      	bpl.n	80117e8 <__sflush_r+0x78>
 80117de:	1c42      	adds	r2, r0, #1
 80117e0:	d101      	bne.n	80117e6 <__sflush_r+0x76>
 80117e2:	682b      	ldr	r3, [r5, #0]
 80117e4:	b903      	cbnz	r3, 80117e8 <__sflush_r+0x78>
 80117e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80117e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80117ea:	602f      	str	r7, [r5, #0]
 80117ec:	b1b9      	cbz	r1, 801181e <__sflush_r+0xae>
 80117ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80117f2:	4299      	cmp	r1, r3
 80117f4:	d002      	beq.n	80117fc <__sflush_r+0x8c>
 80117f6:	4628      	mov	r0, r5
 80117f8:	f7ff f9e0 	bl	8010bbc <_free_r>
 80117fc:	2300      	movs	r3, #0
 80117fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8011800:	e00d      	b.n	801181e <__sflush_r+0xae>
 8011802:	2301      	movs	r3, #1
 8011804:	4628      	mov	r0, r5
 8011806:	47b0      	blx	r6
 8011808:	4602      	mov	r2, r0
 801180a:	1c50      	adds	r0, r2, #1
 801180c:	d1c9      	bne.n	80117a2 <__sflush_r+0x32>
 801180e:	682b      	ldr	r3, [r5, #0]
 8011810:	2b00      	cmp	r3, #0
 8011812:	d0c6      	beq.n	80117a2 <__sflush_r+0x32>
 8011814:	2b1d      	cmp	r3, #29
 8011816:	d001      	beq.n	801181c <__sflush_r+0xac>
 8011818:	2b16      	cmp	r3, #22
 801181a:	d11e      	bne.n	801185a <__sflush_r+0xea>
 801181c:	602f      	str	r7, [r5, #0]
 801181e:	2000      	movs	r0, #0
 8011820:	e022      	b.n	8011868 <__sflush_r+0xf8>
 8011822:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011826:	b21b      	sxth	r3, r3
 8011828:	e01b      	b.n	8011862 <__sflush_r+0xf2>
 801182a:	690f      	ldr	r7, [r1, #16]
 801182c:	2f00      	cmp	r7, #0
 801182e:	d0f6      	beq.n	801181e <__sflush_r+0xae>
 8011830:	0793      	lsls	r3, r2, #30
 8011832:	680e      	ldr	r6, [r1, #0]
 8011834:	bf08      	it	eq
 8011836:	694b      	ldreq	r3, [r1, #20]
 8011838:	600f      	str	r7, [r1, #0]
 801183a:	bf18      	it	ne
 801183c:	2300      	movne	r3, #0
 801183e:	eba6 0807 	sub.w	r8, r6, r7
 8011842:	608b      	str	r3, [r1, #8]
 8011844:	f1b8 0f00 	cmp.w	r8, #0
 8011848:	dde9      	ble.n	801181e <__sflush_r+0xae>
 801184a:	6a21      	ldr	r1, [r4, #32]
 801184c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801184e:	4643      	mov	r3, r8
 8011850:	463a      	mov	r2, r7
 8011852:	4628      	mov	r0, r5
 8011854:	47b0      	blx	r6
 8011856:	2800      	cmp	r0, #0
 8011858:	dc08      	bgt.n	801186c <__sflush_r+0xfc>
 801185a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801185e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011862:	81a3      	strh	r3, [r4, #12]
 8011864:	f04f 30ff 	mov.w	r0, #4294967295
 8011868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801186c:	4407      	add	r7, r0
 801186e:	eba8 0800 	sub.w	r8, r8, r0
 8011872:	e7e7      	b.n	8011844 <__sflush_r+0xd4>
 8011874:	dfbffffe 	.word	0xdfbffffe

08011878 <_fflush_r>:
 8011878:	b538      	push	{r3, r4, r5, lr}
 801187a:	690b      	ldr	r3, [r1, #16]
 801187c:	4605      	mov	r5, r0
 801187e:	460c      	mov	r4, r1
 8011880:	b913      	cbnz	r3, 8011888 <_fflush_r+0x10>
 8011882:	2500      	movs	r5, #0
 8011884:	4628      	mov	r0, r5
 8011886:	bd38      	pop	{r3, r4, r5, pc}
 8011888:	b118      	cbz	r0, 8011892 <_fflush_r+0x1a>
 801188a:	6a03      	ldr	r3, [r0, #32]
 801188c:	b90b      	cbnz	r3, 8011892 <_fflush_r+0x1a>
 801188e:	f7fe fa9b 	bl	800fdc8 <__sinit>
 8011892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011896:	2b00      	cmp	r3, #0
 8011898:	d0f3      	beq.n	8011882 <_fflush_r+0xa>
 801189a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801189c:	07d0      	lsls	r0, r2, #31
 801189e:	d404      	bmi.n	80118aa <_fflush_r+0x32>
 80118a0:	0599      	lsls	r1, r3, #22
 80118a2:	d402      	bmi.n	80118aa <_fflush_r+0x32>
 80118a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80118a6:	f7fe fba6 	bl	800fff6 <__retarget_lock_acquire_recursive>
 80118aa:	4628      	mov	r0, r5
 80118ac:	4621      	mov	r1, r4
 80118ae:	f7ff ff5f 	bl	8011770 <__sflush_r>
 80118b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80118b4:	07da      	lsls	r2, r3, #31
 80118b6:	4605      	mov	r5, r0
 80118b8:	d4e4      	bmi.n	8011884 <_fflush_r+0xc>
 80118ba:	89a3      	ldrh	r3, [r4, #12]
 80118bc:	059b      	lsls	r3, r3, #22
 80118be:	d4e1      	bmi.n	8011884 <_fflush_r+0xc>
 80118c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80118c2:	f7fe fb99 	bl	800fff8 <__retarget_lock_release_recursive>
 80118c6:	e7dd      	b.n	8011884 <_fflush_r+0xc>

080118c8 <memmove>:
 80118c8:	4288      	cmp	r0, r1
 80118ca:	b510      	push	{r4, lr}
 80118cc:	eb01 0402 	add.w	r4, r1, r2
 80118d0:	d902      	bls.n	80118d8 <memmove+0x10>
 80118d2:	4284      	cmp	r4, r0
 80118d4:	4623      	mov	r3, r4
 80118d6:	d807      	bhi.n	80118e8 <memmove+0x20>
 80118d8:	1e43      	subs	r3, r0, #1
 80118da:	42a1      	cmp	r1, r4
 80118dc:	d008      	beq.n	80118f0 <memmove+0x28>
 80118de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80118e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80118e6:	e7f8      	b.n	80118da <memmove+0x12>
 80118e8:	4402      	add	r2, r0
 80118ea:	4601      	mov	r1, r0
 80118ec:	428a      	cmp	r2, r1
 80118ee:	d100      	bne.n	80118f2 <memmove+0x2a>
 80118f0:	bd10      	pop	{r4, pc}
 80118f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80118f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80118fa:	e7f7      	b.n	80118ec <memmove+0x24>

080118fc <_sbrk_r>:
 80118fc:	b538      	push	{r3, r4, r5, lr}
 80118fe:	4d06      	ldr	r5, [pc, #24]	@ (8011918 <_sbrk_r+0x1c>)
 8011900:	2300      	movs	r3, #0
 8011902:	4604      	mov	r4, r0
 8011904:	4608      	mov	r0, r1
 8011906:	602b      	str	r3, [r5, #0]
 8011908:	f7ef fcf6 	bl	80012f8 <_sbrk>
 801190c:	1c43      	adds	r3, r0, #1
 801190e:	d102      	bne.n	8011916 <_sbrk_r+0x1a>
 8011910:	682b      	ldr	r3, [r5, #0]
 8011912:	b103      	cbz	r3, 8011916 <_sbrk_r+0x1a>
 8011914:	6023      	str	r3, [r4, #0]
 8011916:	bd38      	pop	{r3, r4, r5, pc}
 8011918:	24002524 	.word	0x24002524

0801191c <memcpy>:
 801191c:	440a      	add	r2, r1
 801191e:	4291      	cmp	r1, r2
 8011920:	f100 33ff 	add.w	r3, r0, #4294967295
 8011924:	d100      	bne.n	8011928 <memcpy+0xc>
 8011926:	4770      	bx	lr
 8011928:	b510      	push	{r4, lr}
 801192a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801192e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011932:	4291      	cmp	r1, r2
 8011934:	d1f9      	bne.n	801192a <memcpy+0xe>
 8011936:	bd10      	pop	{r4, pc}

08011938 <__assert_func>:
 8011938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801193a:	4614      	mov	r4, r2
 801193c:	461a      	mov	r2, r3
 801193e:	4b09      	ldr	r3, [pc, #36]	@ (8011964 <__assert_func+0x2c>)
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	4605      	mov	r5, r0
 8011944:	68d8      	ldr	r0, [r3, #12]
 8011946:	b954      	cbnz	r4, 801195e <__assert_func+0x26>
 8011948:	4b07      	ldr	r3, [pc, #28]	@ (8011968 <__assert_func+0x30>)
 801194a:	461c      	mov	r4, r3
 801194c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011950:	9100      	str	r1, [sp, #0]
 8011952:	462b      	mov	r3, r5
 8011954:	4905      	ldr	r1, [pc, #20]	@ (801196c <__assert_func+0x34>)
 8011956:	f000 f86f 	bl	8011a38 <fiprintf>
 801195a:	f000 f87f 	bl	8011a5c <abort>
 801195e:	4b04      	ldr	r3, [pc, #16]	@ (8011970 <__assert_func+0x38>)
 8011960:	e7f4      	b.n	801194c <__assert_func+0x14>
 8011962:	bf00      	nop
 8011964:	24000130 	.word	0x24000130
 8011968:	08012356 	.word	0x08012356
 801196c:	08012328 	.word	0x08012328
 8011970:	0801231b 	.word	0x0801231b

08011974 <_calloc_r>:
 8011974:	b570      	push	{r4, r5, r6, lr}
 8011976:	fba1 5402 	umull	r5, r4, r1, r2
 801197a:	b93c      	cbnz	r4, 801198c <_calloc_r+0x18>
 801197c:	4629      	mov	r1, r5
 801197e:	f7ff f991 	bl	8010ca4 <_malloc_r>
 8011982:	4606      	mov	r6, r0
 8011984:	b928      	cbnz	r0, 8011992 <_calloc_r+0x1e>
 8011986:	2600      	movs	r6, #0
 8011988:	4630      	mov	r0, r6
 801198a:	bd70      	pop	{r4, r5, r6, pc}
 801198c:	220c      	movs	r2, #12
 801198e:	6002      	str	r2, [r0, #0]
 8011990:	e7f9      	b.n	8011986 <_calloc_r+0x12>
 8011992:	462a      	mov	r2, r5
 8011994:	4621      	mov	r1, r4
 8011996:	f7fe fab0 	bl	800fefa <memset>
 801199a:	e7f5      	b.n	8011988 <_calloc_r+0x14>

0801199c <__ascii_mbtowc>:
 801199c:	b082      	sub	sp, #8
 801199e:	b901      	cbnz	r1, 80119a2 <__ascii_mbtowc+0x6>
 80119a0:	a901      	add	r1, sp, #4
 80119a2:	b142      	cbz	r2, 80119b6 <__ascii_mbtowc+0x1a>
 80119a4:	b14b      	cbz	r3, 80119ba <__ascii_mbtowc+0x1e>
 80119a6:	7813      	ldrb	r3, [r2, #0]
 80119a8:	600b      	str	r3, [r1, #0]
 80119aa:	7812      	ldrb	r2, [r2, #0]
 80119ac:	1e10      	subs	r0, r2, #0
 80119ae:	bf18      	it	ne
 80119b0:	2001      	movne	r0, #1
 80119b2:	b002      	add	sp, #8
 80119b4:	4770      	bx	lr
 80119b6:	4610      	mov	r0, r2
 80119b8:	e7fb      	b.n	80119b2 <__ascii_mbtowc+0x16>
 80119ba:	f06f 0001 	mvn.w	r0, #1
 80119be:	e7f8      	b.n	80119b2 <__ascii_mbtowc+0x16>

080119c0 <_realloc_r>:
 80119c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119c4:	4680      	mov	r8, r0
 80119c6:	4615      	mov	r5, r2
 80119c8:	460c      	mov	r4, r1
 80119ca:	b921      	cbnz	r1, 80119d6 <_realloc_r+0x16>
 80119cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80119d0:	4611      	mov	r1, r2
 80119d2:	f7ff b967 	b.w	8010ca4 <_malloc_r>
 80119d6:	b92a      	cbnz	r2, 80119e4 <_realloc_r+0x24>
 80119d8:	f7ff f8f0 	bl	8010bbc <_free_r>
 80119dc:	2400      	movs	r4, #0
 80119de:	4620      	mov	r0, r4
 80119e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119e4:	f000 f841 	bl	8011a6a <_malloc_usable_size_r>
 80119e8:	4285      	cmp	r5, r0
 80119ea:	4606      	mov	r6, r0
 80119ec:	d802      	bhi.n	80119f4 <_realloc_r+0x34>
 80119ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80119f2:	d8f4      	bhi.n	80119de <_realloc_r+0x1e>
 80119f4:	4629      	mov	r1, r5
 80119f6:	4640      	mov	r0, r8
 80119f8:	f7ff f954 	bl	8010ca4 <_malloc_r>
 80119fc:	4607      	mov	r7, r0
 80119fe:	2800      	cmp	r0, #0
 8011a00:	d0ec      	beq.n	80119dc <_realloc_r+0x1c>
 8011a02:	42b5      	cmp	r5, r6
 8011a04:	462a      	mov	r2, r5
 8011a06:	4621      	mov	r1, r4
 8011a08:	bf28      	it	cs
 8011a0a:	4632      	movcs	r2, r6
 8011a0c:	f7ff ff86 	bl	801191c <memcpy>
 8011a10:	4621      	mov	r1, r4
 8011a12:	4640      	mov	r0, r8
 8011a14:	f7ff f8d2 	bl	8010bbc <_free_r>
 8011a18:	463c      	mov	r4, r7
 8011a1a:	e7e0      	b.n	80119de <_realloc_r+0x1e>

08011a1c <__ascii_wctomb>:
 8011a1c:	4603      	mov	r3, r0
 8011a1e:	4608      	mov	r0, r1
 8011a20:	b141      	cbz	r1, 8011a34 <__ascii_wctomb+0x18>
 8011a22:	2aff      	cmp	r2, #255	@ 0xff
 8011a24:	d904      	bls.n	8011a30 <__ascii_wctomb+0x14>
 8011a26:	228a      	movs	r2, #138	@ 0x8a
 8011a28:	601a      	str	r2, [r3, #0]
 8011a2a:	f04f 30ff 	mov.w	r0, #4294967295
 8011a2e:	4770      	bx	lr
 8011a30:	700a      	strb	r2, [r1, #0]
 8011a32:	2001      	movs	r0, #1
 8011a34:	4770      	bx	lr
	...

08011a38 <fiprintf>:
 8011a38:	b40e      	push	{r1, r2, r3}
 8011a3a:	b503      	push	{r0, r1, lr}
 8011a3c:	4601      	mov	r1, r0
 8011a3e:	ab03      	add	r3, sp, #12
 8011a40:	4805      	ldr	r0, [pc, #20]	@ (8011a58 <fiprintf+0x20>)
 8011a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a46:	6800      	ldr	r0, [r0, #0]
 8011a48:	9301      	str	r3, [sp, #4]
 8011a4a:	f000 f83f 	bl	8011acc <_vfiprintf_r>
 8011a4e:	b002      	add	sp, #8
 8011a50:	f85d eb04 	ldr.w	lr, [sp], #4
 8011a54:	b003      	add	sp, #12
 8011a56:	4770      	bx	lr
 8011a58:	24000130 	.word	0x24000130

08011a5c <abort>:
 8011a5c:	b508      	push	{r3, lr}
 8011a5e:	2006      	movs	r0, #6
 8011a60:	f000 fa08 	bl	8011e74 <raise>
 8011a64:	2001      	movs	r0, #1
 8011a66:	f7ef fbcf 	bl	8001208 <_exit>

08011a6a <_malloc_usable_size_r>:
 8011a6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011a6e:	1f18      	subs	r0, r3, #4
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	bfbc      	itt	lt
 8011a74:	580b      	ldrlt	r3, [r1, r0]
 8011a76:	18c0      	addlt	r0, r0, r3
 8011a78:	4770      	bx	lr

08011a7a <__sfputc_r>:
 8011a7a:	6893      	ldr	r3, [r2, #8]
 8011a7c:	3b01      	subs	r3, #1
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	b410      	push	{r4}
 8011a82:	6093      	str	r3, [r2, #8]
 8011a84:	da08      	bge.n	8011a98 <__sfputc_r+0x1e>
 8011a86:	6994      	ldr	r4, [r2, #24]
 8011a88:	42a3      	cmp	r3, r4
 8011a8a:	db01      	blt.n	8011a90 <__sfputc_r+0x16>
 8011a8c:	290a      	cmp	r1, #10
 8011a8e:	d103      	bne.n	8011a98 <__sfputc_r+0x1e>
 8011a90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011a94:	f000 b932 	b.w	8011cfc <__swbuf_r>
 8011a98:	6813      	ldr	r3, [r2, #0]
 8011a9a:	1c58      	adds	r0, r3, #1
 8011a9c:	6010      	str	r0, [r2, #0]
 8011a9e:	7019      	strb	r1, [r3, #0]
 8011aa0:	4608      	mov	r0, r1
 8011aa2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011aa6:	4770      	bx	lr

08011aa8 <__sfputs_r>:
 8011aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aaa:	4606      	mov	r6, r0
 8011aac:	460f      	mov	r7, r1
 8011aae:	4614      	mov	r4, r2
 8011ab0:	18d5      	adds	r5, r2, r3
 8011ab2:	42ac      	cmp	r4, r5
 8011ab4:	d101      	bne.n	8011aba <__sfputs_r+0x12>
 8011ab6:	2000      	movs	r0, #0
 8011ab8:	e007      	b.n	8011aca <__sfputs_r+0x22>
 8011aba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011abe:	463a      	mov	r2, r7
 8011ac0:	4630      	mov	r0, r6
 8011ac2:	f7ff ffda 	bl	8011a7a <__sfputc_r>
 8011ac6:	1c43      	adds	r3, r0, #1
 8011ac8:	d1f3      	bne.n	8011ab2 <__sfputs_r+0xa>
 8011aca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08011acc <_vfiprintf_r>:
 8011acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ad0:	460d      	mov	r5, r1
 8011ad2:	b09d      	sub	sp, #116	@ 0x74
 8011ad4:	4614      	mov	r4, r2
 8011ad6:	4698      	mov	r8, r3
 8011ad8:	4606      	mov	r6, r0
 8011ada:	b118      	cbz	r0, 8011ae4 <_vfiprintf_r+0x18>
 8011adc:	6a03      	ldr	r3, [r0, #32]
 8011ade:	b90b      	cbnz	r3, 8011ae4 <_vfiprintf_r+0x18>
 8011ae0:	f7fe f972 	bl	800fdc8 <__sinit>
 8011ae4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011ae6:	07d9      	lsls	r1, r3, #31
 8011ae8:	d405      	bmi.n	8011af6 <_vfiprintf_r+0x2a>
 8011aea:	89ab      	ldrh	r3, [r5, #12]
 8011aec:	059a      	lsls	r2, r3, #22
 8011aee:	d402      	bmi.n	8011af6 <_vfiprintf_r+0x2a>
 8011af0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011af2:	f7fe fa80 	bl	800fff6 <__retarget_lock_acquire_recursive>
 8011af6:	89ab      	ldrh	r3, [r5, #12]
 8011af8:	071b      	lsls	r3, r3, #28
 8011afa:	d501      	bpl.n	8011b00 <_vfiprintf_r+0x34>
 8011afc:	692b      	ldr	r3, [r5, #16]
 8011afe:	b99b      	cbnz	r3, 8011b28 <_vfiprintf_r+0x5c>
 8011b00:	4629      	mov	r1, r5
 8011b02:	4630      	mov	r0, r6
 8011b04:	f000 f938 	bl	8011d78 <__swsetup_r>
 8011b08:	b170      	cbz	r0, 8011b28 <_vfiprintf_r+0x5c>
 8011b0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011b0c:	07dc      	lsls	r4, r3, #31
 8011b0e:	d504      	bpl.n	8011b1a <_vfiprintf_r+0x4e>
 8011b10:	f04f 30ff 	mov.w	r0, #4294967295
 8011b14:	b01d      	add	sp, #116	@ 0x74
 8011b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011b1a:	89ab      	ldrh	r3, [r5, #12]
 8011b1c:	0598      	lsls	r0, r3, #22
 8011b1e:	d4f7      	bmi.n	8011b10 <_vfiprintf_r+0x44>
 8011b20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011b22:	f7fe fa69 	bl	800fff8 <__retarget_lock_release_recursive>
 8011b26:	e7f3      	b.n	8011b10 <_vfiprintf_r+0x44>
 8011b28:	2300      	movs	r3, #0
 8011b2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011b2c:	2320      	movs	r3, #32
 8011b2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8011b32:	f8cd 800c 	str.w	r8, [sp, #12]
 8011b36:	2330      	movs	r3, #48	@ 0x30
 8011b38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8011ce8 <_vfiprintf_r+0x21c>
 8011b3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8011b40:	f04f 0901 	mov.w	r9, #1
 8011b44:	4623      	mov	r3, r4
 8011b46:	469a      	mov	sl, r3
 8011b48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011b4c:	b10a      	cbz	r2, 8011b52 <_vfiprintf_r+0x86>
 8011b4e:	2a25      	cmp	r2, #37	@ 0x25
 8011b50:	d1f9      	bne.n	8011b46 <_vfiprintf_r+0x7a>
 8011b52:	ebba 0b04 	subs.w	fp, sl, r4
 8011b56:	d00b      	beq.n	8011b70 <_vfiprintf_r+0xa4>
 8011b58:	465b      	mov	r3, fp
 8011b5a:	4622      	mov	r2, r4
 8011b5c:	4629      	mov	r1, r5
 8011b5e:	4630      	mov	r0, r6
 8011b60:	f7ff ffa2 	bl	8011aa8 <__sfputs_r>
 8011b64:	3001      	adds	r0, #1
 8011b66:	f000 80a7 	beq.w	8011cb8 <_vfiprintf_r+0x1ec>
 8011b6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011b6c:	445a      	add	r2, fp
 8011b6e:	9209      	str	r2, [sp, #36]	@ 0x24
 8011b70:	f89a 3000 	ldrb.w	r3, [sl]
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	f000 809f 	beq.w	8011cb8 <_vfiprintf_r+0x1ec>
 8011b7a:	2300      	movs	r3, #0
 8011b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8011b80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011b84:	f10a 0a01 	add.w	sl, sl, #1
 8011b88:	9304      	str	r3, [sp, #16]
 8011b8a:	9307      	str	r3, [sp, #28]
 8011b8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011b90:	931a      	str	r3, [sp, #104]	@ 0x68
 8011b92:	4654      	mov	r4, sl
 8011b94:	2205      	movs	r2, #5
 8011b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011b9a:	4853      	ldr	r0, [pc, #332]	@ (8011ce8 <_vfiprintf_r+0x21c>)
 8011b9c:	f7ee fba0 	bl	80002e0 <memchr>
 8011ba0:	9a04      	ldr	r2, [sp, #16]
 8011ba2:	b9d8      	cbnz	r0, 8011bdc <_vfiprintf_r+0x110>
 8011ba4:	06d1      	lsls	r1, r2, #27
 8011ba6:	bf44      	itt	mi
 8011ba8:	2320      	movmi	r3, #32
 8011baa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011bae:	0713      	lsls	r3, r2, #28
 8011bb0:	bf44      	itt	mi
 8011bb2:	232b      	movmi	r3, #43	@ 0x2b
 8011bb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011bb8:	f89a 3000 	ldrb.w	r3, [sl]
 8011bbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8011bbe:	d015      	beq.n	8011bec <_vfiprintf_r+0x120>
 8011bc0:	9a07      	ldr	r2, [sp, #28]
 8011bc2:	4654      	mov	r4, sl
 8011bc4:	2000      	movs	r0, #0
 8011bc6:	f04f 0c0a 	mov.w	ip, #10
 8011bca:	4621      	mov	r1, r4
 8011bcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011bd0:	3b30      	subs	r3, #48	@ 0x30
 8011bd2:	2b09      	cmp	r3, #9
 8011bd4:	d94b      	bls.n	8011c6e <_vfiprintf_r+0x1a2>
 8011bd6:	b1b0      	cbz	r0, 8011c06 <_vfiprintf_r+0x13a>
 8011bd8:	9207      	str	r2, [sp, #28]
 8011bda:	e014      	b.n	8011c06 <_vfiprintf_r+0x13a>
 8011bdc:	eba0 0308 	sub.w	r3, r0, r8
 8011be0:	fa09 f303 	lsl.w	r3, r9, r3
 8011be4:	4313      	orrs	r3, r2
 8011be6:	9304      	str	r3, [sp, #16]
 8011be8:	46a2      	mov	sl, r4
 8011bea:	e7d2      	b.n	8011b92 <_vfiprintf_r+0xc6>
 8011bec:	9b03      	ldr	r3, [sp, #12]
 8011bee:	1d19      	adds	r1, r3, #4
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	9103      	str	r1, [sp, #12]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	bfbb      	ittet	lt
 8011bf8:	425b      	neglt	r3, r3
 8011bfa:	f042 0202 	orrlt.w	r2, r2, #2
 8011bfe:	9307      	strge	r3, [sp, #28]
 8011c00:	9307      	strlt	r3, [sp, #28]
 8011c02:	bfb8      	it	lt
 8011c04:	9204      	strlt	r2, [sp, #16]
 8011c06:	7823      	ldrb	r3, [r4, #0]
 8011c08:	2b2e      	cmp	r3, #46	@ 0x2e
 8011c0a:	d10a      	bne.n	8011c22 <_vfiprintf_r+0x156>
 8011c0c:	7863      	ldrb	r3, [r4, #1]
 8011c0e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011c10:	d132      	bne.n	8011c78 <_vfiprintf_r+0x1ac>
 8011c12:	9b03      	ldr	r3, [sp, #12]
 8011c14:	1d1a      	adds	r2, r3, #4
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	9203      	str	r2, [sp, #12]
 8011c1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8011c1e:	3402      	adds	r4, #2
 8011c20:	9305      	str	r3, [sp, #20]
 8011c22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8011cf8 <_vfiprintf_r+0x22c>
 8011c26:	7821      	ldrb	r1, [r4, #0]
 8011c28:	2203      	movs	r2, #3
 8011c2a:	4650      	mov	r0, sl
 8011c2c:	f7ee fb58 	bl	80002e0 <memchr>
 8011c30:	b138      	cbz	r0, 8011c42 <_vfiprintf_r+0x176>
 8011c32:	9b04      	ldr	r3, [sp, #16]
 8011c34:	eba0 000a 	sub.w	r0, r0, sl
 8011c38:	2240      	movs	r2, #64	@ 0x40
 8011c3a:	4082      	lsls	r2, r0
 8011c3c:	4313      	orrs	r3, r2
 8011c3e:	3401      	adds	r4, #1
 8011c40:	9304      	str	r3, [sp, #16]
 8011c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011c46:	4829      	ldr	r0, [pc, #164]	@ (8011cec <_vfiprintf_r+0x220>)
 8011c48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011c4c:	2206      	movs	r2, #6
 8011c4e:	f7ee fb47 	bl	80002e0 <memchr>
 8011c52:	2800      	cmp	r0, #0
 8011c54:	d03f      	beq.n	8011cd6 <_vfiprintf_r+0x20a>
 8011c56:	4b26      	ldr	r3, [pc, #152]	@ (8011cf0 <_vfiprintf_r+0x224>)
 8011c58:	bb1b      	cbnz	r3, 8011ca2 <_vfiprintf_r+0x1d6>
 8011c5a:	9b03      	ldr	r3, [sp, #12]
 8011c5c:	3307      	adds	r3, #7
 8011c5e:	f023 0307 	bic.w	r3, r3, #7
 8011c62:	3308      	adds	r3, #8
 8011c64:	9303      	str	r3, [sp, #12]
 8011c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c68:	443b      	add	r3, r7
 8011c6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8011c6c:	e76a      	b.n	8011b44 <_vfiprintf_r+0x78>
 8011c6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8011c72:	460c      	mov	r4, r1
 8011c74:	2001      	movs	r0, #1
 8011c76:	e7a8      	b.n	8011bca <_vfiprintf_r+0xfe>
 8011c78:	2300      	movs	r3, #0
 8011c7a:	3401      	adds	r4, #1
 8011c7c:	9305      	str	r3, [sp, #20]
 8011c7e:	4619      	mov	r1, r3
 8011c80:	f04f 0c0a 	mov.w	ip, #10
 8011c84:	4620      	mov	r0, r4
 8011c86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011c8a:	3a30      	subs	r2, #48	@ 0x30
 8011c8c:	2a09      	cmp	r2, #9
 8011c8e:	d903      	bls.n	8011c98 <_vfiprintf_r+0x1cc>
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d0c6      	beq.n	8011c22 <_vfiprintf_r+0x156>
 8011c94:	9105      	str	r1, [sp, #20]
 8011c96:	e7c4      	b.n	8011c22 <_vfiprintf_r+0x156>
 8011c98:	fb0c 2101 	mla	r1, ip, r1, r2
 8011c9c:	4604      	mov	r4, r0
 8011c9e:	2301      	movs	r3, #1
 8011ca0:	e7f0      	b.n	8011c84 <_vfiprintf_r+0x1b8>
 8011ca2:	ab03      	add	r3, sp, #12
 8011ca4:	9300      	str	r3, [sp, #0]
 8011ca6:	462a      	mov	r2, r5
 8011ca8:	4b12      	ldr	r3, [pc, #72]	@ (8011cf4 <_vfiprintf_r+0x228>)
 8011caa:	a904      	add	r1, sp, #16
 8011cac:	4630      	mov	r0, r6
 8011cae:	f7fd fc57 	bl	800f560 <_printf_float>
 8011cb2:	4607      	mov	r7, r0
 8011cb4:	1c78      	adds	r0, r7, #1
 8011cb6:	d1d6      	bne.n	8011c66 <_vfiprintf_r+0x19a>
 8011cb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011cba:	07d9      	lsls	r1, r3, #31
 8011cbc:	d405      	bmi.n	8011cca <_vfiprintf_r+0x1fe>
 8011cbe:	89ab      	ldrh	r3, [r5, #12]
 8011cc0:	059a      	lsls	r2, r3, #22
 8011cc2:	d402      	bmi.n	8011cca <_vfiprintf_r+0x1fe>
 8011cc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011cc6:	f7fe f997 	bl	800fff8 <__retarget_lock_release_recursive>
 8011cca:	89ab      	ldrh	r3, [r5, #12]
 8011ccc:	065b      	lsls	r3, r3, #25
 8011cce:	f53f af1f 	bmi.w	8011b10 <_vfiprintf_r+0x44>
 8011cd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011cd4:	e71e      	b.n	8011b14 <_vfiprintf_r+0x48>
 8011cd6:	ab03      	add	r3, sp, #12
 8011cd8:	9300      	str	r3, [sp, #0]
 8011cda:	462a      	mov	r2, r5
 8011cdc:	4b05      	ldr	r3, [pc, #20]	@ (8011cf4 <_vfiprintf_r+0x228>)
 8011cde:	a904      	add	r1, sp, #16
 8011ce0:	4630      	mov	r0, r6
 8011ce2:	f7fd fec5 	bl	800fa70 <_printf_i>
 8011ce6:	e7e4      	b.n	8011cb2 <_vfiprintf_r+0x1e6>
 8011ce8:	08012300 	.word	0x08012300
 8011cec:	0801230a 	.word	0x0801230a
 8011cf0:	0800f561 	.word	0x0800f561
 8011cf4:	08011aa9 	.word	0x08011aa9
 8011cf8:	08012306 	.word	0x08012306

08011cfc <__swbuf_r>:
 8011cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011cfe:	460e      	mov	r6, r1
 8011d00:	4614      	mov	r4, r2
 8011d02:	4605      	mov	r5, r0
 8011d04:	b118      	cbz	r0, 8011d0e <__swbuf_r+0x12>
 8011d06:	6a03      	ldr	r3, [r0, #32]
 8011d08:	b90b      	cbnz	r3, 8011d0e <__swbuf_r+0x12>
 8011d0a:	f7fe f85d 	bl	800fdc8 <__sinit>
 8011d0e:	69a3      	ldr	r3, [r4, #24]
 8011d10:	60a3      	str	r3, [r4, #8]
 8011d12:	89a3      	ldrh	r3, [r4, #12]
 8011d14:	071a      	lsls	r2, r3, #28
 8011d16:	d501      	bpl.n	8011d1c <__swbuf_r+0x20>
 8011d18:	6923      	ldr	r3, [r4, #16]
 8011d1a:	b943      	cbnz	r3, 8011d2e <__swbuf_r+0x32>
 8011d1c:	4621      	mov	r1, r4
 8011d1e:	4628      	mov	r0, r5
 8011d20:	f000 f82a 	bl	8011d78 <__swsetup_r>
 8011d24:	b118      	cbz	r0, 8011d2e <__swbuf_r+0x32>
 8011d26:	f04f 37ff 	mov.w	r7, #4294967295
 8011d2a:	4638      	mov	r0, r7
 8011d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011d2e:	6823      	ldr	r3, [r4, #0]
 8011d30:	6922      	ldr	r2, [r4, #16]
 8011d32:	1a98      	subs	r0, r3, r2
 8011d34:	6963      	ldr	r3, [r4, #20]
 8011d36:	b2f6      	uxtb	r6, r6
 8011d38:	4283      	cmp	r3, r0
 8011d3a:	4637      	mov	r7, r6
 8011d3c:	dc05      	bgt.n	8011d4a <__swbuf_r+0x4e>
 8011d3e:	4621      	mov	r1, r4
 8011d40:	4628      	mov	r0, r5
 8011d42:	f7ff fd99 	bl	8011878 <_fflush_r>
 8011d46:	2800      	cmp	r0, #0
 8011d48:	d1ed      	bne.n	8011d26 <__swbuf_r+0x2a>
 8011d4a:	68a3      	ldr	r3, [r4, #8]
 8011d4c:	3b01      	subs	r3, #1
 8011d4e:	60a3      	str	r3, [r4, #8]
 8011d50:	6823      	ldr	r3, [r4, #0]
 8011d52:	1c5a      	adds	r2, r3, #1
 8011d54:	6022      	str	r2, [r4, #0]
 8011d56:	701e      	strb	r6, [r3, #0]
 8011d58:	6962      	ldr	r2, [r4, #20]
 8011d5a:	1c43      	adds	r3, r0, #1
 8011d5c:	429a      	cmp	r2, r3
 8011d5e:	d004      	beq.n	8011d6a <__swbuf_r+0x6e>
 8011d60:	89a3      	ldrh	r3, [r4, #12]
 8011d62:	07db      	lsls	r3, r3, #31
 8011d64:	d5e1      	bpl.n	8011d2a <__swbuf_r+0x2e>
 8011d66:	2e0a      	cmp	r6, #10
 8011d68:	d1df      	bne.n	8011d2a <__swbuf_r+0x2e>
 8011d6a:	4621      	mov	r1, r4
 8011d6c:	4628      	mov	r0, r5
 8011d6e:	f7ff fd83 	bl	8011878 <_fflush_r>
 8011d72:	2800      	cmp	r0, #0
 8011d74:	d0d9      	beq.n	8011d2a <__swbuf_r+0x2e>
 8011d76:	e7d6      	b.n	8011d26 <__swbuf_r+0x2a>

08011d78 <__swsetup_r>:
 8011d78:	b538      	push	{r3, r4, r5, lr}
 8011d7a:	4b29      	ldr	r3, [pc, #164]	@ (8011e20 <__swsetup_r+0xa8>)
 8011d7c:	4605      	mov	r5, r0
 8011d7e:	6818      	ldr	r0, [r3, #0]
 8011d80:	460c      	mov	r4, r1
 8011d82:	b118      	cbz	r0, 8011d8c <__swsetup_r+0x14>
 8011d84:	6a03      	ldr	r3, [r0, #32]
 8011d86:	b90b      	cbnz	r3, 8011d8c <__swsetup_r+0x14>
 8011d88:	f7fe f81e 	bl	800fdc8 <__sinit>
 8011d8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011d90:	0719      	lsls	r1, r3, #28
 8011d92:	d422      	bmi.n	8011dda <__swsetup_r+0x62>
 8011d94:	06da      	lsls	r2, r3, #27
 8011d96:	d407      	bmi.n	8011da8 <__swsetup_r+0x30>
 8011d98:	2209      	movs	r2, #9
 8011d9a:	602a      	str	r2, [r5, #0]
 8011d9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011da0:	81a3      	strh	r3, [r4, #12]
 8011da2:	f04f 30ff 	mov.w	r0, #4294967295
 8011da6:	e033      	b.n	8011e10 <__swsetup_r+0x98>
 8011da8:	0758      	lsls	r0, r3, #29
 8011daa:	d512      	bpl.n	8011dd2 <__swsetup_r+0x5a>
 8011dac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011dae:	b141      	cbz	r1, 8011dc2 <__swsetup_r+0x4a>
 8011db0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011db4:	4299      	cmp	r1, r3
 8011db6:	d002      	beq.n	8011dbe <__swsetup_r+0x46>
 8011db8:	4628      	mov	r0, r5
 8011dba:	f7fe feff 	bl	8010bbc <_free_r>
 8011dbe:	2300      	movs	r3, #0
 8011dc0:	6363      	str	r3, [r4, #52]	@ 0x34
 8011dc2:	89a3      	ldrh	r3, [r4, #12]
 8011dc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8011dc8:	81a3      	strh	r3, [r4, #12]
 8011dca:	2300      	movs	r3, #0
 8011dcc:	6063      	str	r3, [r4, #4]
 8011dce:	6923      	ldr	r3, [r4, #16]
 8011dd0:	6023      	str	r3, [r4, #0]
 8011dd2:	89a3      	ldrh	r3, [r4, #12]
 8011dd4:	f043 0308 	orr.w	r3, r3, #8
 8011dd8:	81a3      	strh	r3, [r4, #12]
 8011dda:	6923      	ldr	r3, [r4, #16]
 8011ddc:	b94b      	cbnz	r3, 8011df2 <__swsetup_r+0x7a>
 8011dde:	89a3      	ldrh	r3, [r4, #12]
 8011de0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8011de4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011de8:	d003      	beq.n	8011df2 <__swsetup_r+0x7a>
 8011dea:	4621      	mov	r1, r4
 8011dec:	4628      	mov	r0, r5
 8011dee:	f000 f883 	bl	8011ef8 <__smakebuf_r>
 8011df2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011df6:	f013 0201 	ands.w	r2, r3, #1
 8011dfa:	d00a      	beq.n	8011e12 <__swsetup_r+0x9a>
 8011dfc:	2200      	movs	r2, #0
 8011dfe:	60a2      	str	r2, [r4, #8]
 8011e00:	6962      	ldr	r2, [r4, #20]
 8011e02:	4252      	negs	r2, r2
 8011e04:	61a2      	str	r2, [r4, #24]
 8011e06:	6922      	ldr	r2, [r4, #16]
 8011e08:	b942      	cbnz	r2, 8011e1c <__swsetup_r+0xa4>
 8011e0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8011e0e:	d1c5      	bne.n	8011d9c <__swsetup_r+0x24>
 8011e10:	bd38      	pop	{r3, r4, r5, pc}
 8011e12:	0799      	lsls	r1, r3, #30
 8011e14:	bf58      	it	pl
 8011e16:	6962      	ldrpl	r2, [r4, #20]
 8011e18:	60a2      	str	r2, [r4, #8]
 8011e1a:	e7f4      	b.n	8011e06 <__swsetup_r+0x8e>
 8011e1c:	2000      	movs	r0, #0
 8011e1e:	e7f7      	b.n	8011e10 <__swsetup_r+0x98>
 8011e20:	24000130 	.word	0x24000130

08011e24 <_raise_r>:
 8011e24:	291f      	cmp	r1, #31
 8011e26:	b538      	push	{r3, r4, r5, lr}
 8011e28:	4605      	mov	r5, r0
 8011e2a:	460c      	mov	r4, r1
 8011e2c:	d904      	bls.n	8011e38 <_raise_r+0x14>
 8011e2e:	2316      	movs	r3, #22
 8011e30:	6003      	str	r3, [r0, #0]
 8011e32:	f04f 30ff 	mov.w	r0, #4294967295
 8011e36:	bd38      	pop	{r3, r4, r5, pc}
 8011e38:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8011e3a:	b112      	cbz	r2, 8011e42 <_raise_r+0x1e>
 8011e3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011e40:	b94b      	cbnz	r3, 8011e56 <_raise_r+0x32>
 8011e42:	4628      	mov	r0, r5
 8011e44:	f000 f830 	bl	8011ea8 <_getpid_r>
 8011e48:	4622      	mov	r2, r4
 8011e4a:	4601      	mov	r1, r0
 8011e4c:	4628      	mov	r0, r5
 8011e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011e52:	f000 b817 	b.w	8011e84 <_kill_r>
 8011e56:	2b01      	cmp	r3, #1
 8011e58:	d00a      	beq.n	8011e70 <_raise_r+0x4c>
 8011e5a:	1c59      	adds	r1, r3, #1
 8011e5c:	d103      	bne.n	8011e66 <_raise_r+0x42>
 8011e5e:	2316      	movs	r3, #22
 8011e60:	6003      	str	r3, [r0, #0]
 8011e62:	2001      	movs	r0, #1
 8011e64:	e7e7      	b.n	8011e36 <_raise_r+0x12>
 8011e66:	2100      	movs	r1, #0
 8011e68:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8011e6c:	4620      	mov	r0, r4
 8011e6e:	4798      	blx	r3
 8011e70:	2000      	movs	r0, #0
 8011e72:	e7e0      	b.n	8011e36 <_raise_r+0x12>

08011e74 <raise>:
 8011e74:	4b02      	ldr	r3, [pc, #8]	@ (8011e80 <raise+0xc>)
 8011e76:	4601      	mov	r1, r0
 8011e78:	6818      	ldr	r0, [r3, #0]
 8011e7a:	f7ff bfd3 	b.w	8011e24 <_raise_r>
 8011e7e:	bf00      	nop
 8011e80:	24000130 	.word	0x24000130

08011e84 <_kill_r>:
 8011e84:	b538      	push	{r3, r4, r5, lr}
 8011e86:	4d07      	ldr	r5, [pc, #28]	@ (8011ea4 <_kill_r+0x20>)
 8011e88:	2300      	movs	r3, #0
 8011e8a:	4604      	mov	r4, r0
 8011e8c:	4608      	mov	r0, r1
 8011e8e:	4611      	mov	r1, r2
 8011e90:	602b      	str	r3, [r5, #0]
 8011e92:	f7ef f9a9 	bl	80011e8 <_kill>
 8011e96:	1c43      	adds	r3, r0, #1
 8011e98:	d102      	bne.n	8011ea0 <_kill_r+0x1c>
 8011e9a:	682b      	ldr	r3, [r5, #0]
 8011e9c:	b103      	cbz	r3, 8011ea0 <_kill_r+0x1c>
 8011e9e:	6023      	str	r3, [r4, #0]
 8011ea0:	bd38      	pop	{r3, r4, r5, pc}
 8011ea2:	bf00      	nop
 8011ea4:	24002524 	.word	0x24002524

08011ea8 <_getpid_r>:
 8011ea8:	f7ef b996 	b.w	80011d8 <_getpid>

08011eac <__swhatbuf_r>:
 8011eac:	b570      	push	{r4, r5, r6, lr}
 8011eae:	460c      	mov	r4, r1
 8011eb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011eb4:	2900      	cmp	r1, #0
 8011eb6:	b096      	sub	sp, #88	@ 0x58
 8011eb8:	4615      	mov	r5, r2
 8011eba:	461e      	mov	r6, r3
 8011ebc:	da0d      	bge.n	8011eda <__swhatbuf_r+0x2e>
 8011ebe:	89a3      	ldrh	r3, [r4, #12]
 8011ec0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011ec4:	f04f 0100 	mov.w	r1, #0
 8011ec8:	bf14      	ite	ne
 8011eca:	2340      	movne	r3, #64	@ 0x40
 8011ecc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011ed0:	2000      	movs	r0, #0
 8011ed2:	6031      	str	r1, [r6, #0]
 8011ed4:	602b      	str	r3, [r5, #0]
 8011ed6:	b016      	add	sp, #88	@ 0x58
 8011ed8:	bd70      	pop	{r4, r5, r6, pc}
 8011eda:	466a      	mov	r2, sp
 8011edc:	f000 f848 	bl	8011f70 <_fstat_r>
 8011ee0:	2800      	cmp	r0, #0
 8011ee2:	dbec      	blt.n	8011ebe <__swhatbuf_r+0x12>
 8011ee4:	9901      	ldr	r1, [sp, #4]
 8011ee6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011eea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011eee:	4259      	negs	r1, r3
 8011ef0:	4159      	adcs	r1, r3
 8011ef2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011ef6:	e7eb      	b.n	8011ed0 <__swhatbuf_r+0x24>

08011ef8 <__smakebuf_r>:
 8011ef8:	898b      	ldrh	r3, [r1, #12]
 8011efa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011efc:	079d      	lsls	r5, r3, #30
 8011efe:	4606      	mov	r6, r0
 8011f00:	460c      	mov	r4, r1
 8011f02:	d507      	bpl.n	8011f14 <__smakebuf_r+0x1c>
 8011f04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011f08:	6023      	str	r3, [r4, #0]
 8011f0a:	6123      	str	r3, [r4, #16]
 8011f0c:	2301      	movs	r3, #1
 8011f0e:	6163      	str	r3, [r4, #20]
 8011f10:	b003      	add	sp, #12
 8011f12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011f14:	ab01      	add	r3, sp, #4
 8011f16:	466a      	mov	r2, sp
 8011f18:	f7ff ffc8 	bl	8011eac <__swhatbuf_r>
 8011f1c:	9f00      	ldr	r7, [sp, #0]
 8011f1e:	4605      	mov	r5, r0
 8011f20:	4639      	mov	r1, r7
 8011f22:	4630      	mov	r0, r6
 8011f24:	f7fe febe 	bl	8010ca4 <_malloc_r>
 8011f28:	b948      	cbnz	r0, 8011f3e <__smakebuf_r+0x46>
 8011f2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011f2e:	059a      	lsls	r2, r3, #22
 8011f30:	d4ee      	bmi.n	8011f10 <__smakebuf_r+0x18>
 8011f32:	f023 0303 	bic.w	r3, r3, #3
 8011f36:	f043 0302 	orr.w	r3, r3, #2
 8011f3a:	81a3      	strh	r3, [r4, #12]
 8011f3c:	e7e2      	b.n	8011f04 <__smakebuf_r+0xc>
 8011f3e:	89a3      	ldrh	r3, [r4, #12]
 8011f40:	6020      	str	r0, [r4, #0]
 8011f42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011f46:	81a3      	strh	r3, [r4, #12]
 8011f48:	9b01      	ldr	r3, [sp, #4]
 8011f4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011f4e:	b15b      	cbz	r3, 8011f68 <__smakebuf_r+0x70>
 8011f50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011f54:	4630      	mov	r0, r6
 8011f56:	f000 f81d 	bl	8011f94 <_isatty_r>
 8011f5a:	b128      	cbz	r0, 8011f68 <__smakebuf_r+0x70>
 8011f5c:	89a3      	ldrh	r3, [r4, #12]
 8011f5e:	f023 0303 	bic.w	r3, r3, #3
 8011f62:	f043 0301 	orr.w	r3, r3, #1
 8011f66:	81a3      	strh	r3, [r4, #12]
 8011f68:	89a3      	ldrh	r3, [r4, #12]
 8011f6a:	431d      	orrs	r5, r3
 8011f6c:	81a5      	strh	r5, [r4, #12]
 8011f6e:	e7cf      	b.n	8011f10 <__smakebuf_r+0x18>

08011f70 <_fstat_r>:
 8011f70:	b538      	push	{r3, r4, r5, lr}
 8011f72:	4d07      	ldr	r5, [pc, #28]	@ (8011f90 <_fstat_r+0x20>)
 8011f74:	2300      	movs	r3, #0
 8011f76:	4604      	mov	r4, r0
 8011f78:	4608      	mov	r0, r1
 8011f7a:	4611      	mov	r1, r2
 8011f7c:	602b      	str	r3, [r5, #0]
 8011f7e:	f7ef f993 	bl	80012a8 <_fstat>
 8011f82:	1c43      	adds	r3, r0, #1
 8011f84:	d102      	bne.n	8011f8c <_fstat_r+0x1c>
 8011f86:	682b      	ldr	r3, [r5, #0]
 8011f88:	b103      	cbz	r3, 8011f8c <_fstat_r+0x1c>
 8011f8a:	6023      	str	r3, [r4, #0]
 8011f8c:	bd38      	pop	{r3, r4, r5, pc}
 8011f8e:	bf00      	nop
 8011f90:	24002524 	.word	0x24002524

08011f94 <_isatty_r>:
 8011f94:	b538      	push	{r3, r4, r5, lr}
 8011f96:	4d06      	ldr	r5, [pc, #24]	@ (8011fb0 <_isatty_r+0x1c>)
 8011f98:	2300      	movs	r3, #0
 8011f9a:	4604      	mov	r4, r0
 8011f9c:	4608      	mov	r0, r1
 8011f9e:	602b      	str	r3, [r5, #0]
 8011fa0:	f7ef f992 	bl	80012c8 <_isatty>
 8011fa4:	1c43      	adds	r3, r0, #1
 8011fa6:	d102      	bne.n	8011fae <_isatty_r+0x1a>
 8011fa8:	682b      	ldr	r3, [r5, #0]
 8011faa:	b103      	cbz	r3, 8011fae <_isatty_r+0x1a>
 8011fac:	6023      	str	r3, [r4, #0]
 8011fae:	bd38      	pop	{r3, r4, r5, pc}
 8011fb0:	24002524 	.word	0x24002524

08011fb4 <lrintf>:
 8011fb4:	ee10 3a10 	vmov	r3, s0
 8011fb8:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8011fbc:	f1a2 007f 	sub.w	r0, r2, #127	@ 0x7f
 8011fc0:	281e      	cmp	r0, #30
 8011fc2:	b082      	sub	sp, #8
 8011fc4:	dc2f      	bgt.n	8012026 <lrintf+0x72>
 8011fc6:	1c41      	adds	r1, r0, #1
 8011fc8:	da02      	bge.n	8011fd0 <lrintf+0x1c>
 8011fca:	2000      	movs	r0, #0
 8011fcc:	b002      	add	sp, #8
 8011fce:	4770      	bx	lr
 8011fd0:	2816      	cmp	r0, #22
 8011fd2:	ea4f 71d3 	mov.w	r1, r3, lsr #31
 8011fd6:	dd0a      	ble.n	8011fee <lrintf+0x3a>
 8011fd8:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011fdc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8011fe0:	3a96      	subs	r2, #150	@ 0x96
 8011fe2:	fa03 f002 	lsl.w	r0, r3, r2
 8011fe6:	2900      	cmp	r1, #0
 8011fe8:	d0f0      	beq.n	8011fcc <lrintf+0x18>
 8011fea:	4240      	negs	r0, r0
 8011fec:	e7ee      	b.n	8011fcc <lrintf+0x18>
 8011fee:	4b10      	ldr	r3, [pc, #64]	@ (8012030 <lrintf+0x7c>)
 8011ff0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8011ff4:	ed93 7a00 	vldr	s14, [r3]
 8011ff8:	ee37 0a00 	vadd.f32	s0, s14, s0
 8011ffc:	ed8d 0a01 	vstr	s0, [sp, #4]
 8012000:	eddd 7a01 	vldr	s15, [sp, #4]
 8012004:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012008:	ee17 3a90 	vmov	r3, s15
 801200c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8012010:	d0db      	beq.n	8011fca <lrintf+0x16>
 8012012:	f3c3 0016 	ubfx	r0, r3, #0, #23
 8012016:	f3c3 53c7 	ubfx	r3, r3, #23, #8
 801201a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 801201e:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8012022:	40d8      	lsrs	r0, r3
 8012024:	e7df      	b.n	8011fe6 <lrintf+0x32>
 8012026:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801202a:	ee17 0a90 	vmov	r0, s15
 801202e:	e7cd      	b.n	8011fcc <lrintf+0x18>
 8012030:	08012458 	.word	0x08012458

08012034 <_init>:
 8012034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012036:	bf00      	nop
 8012038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801203a:	bc08      	pop	{r3}
 801203c:	469e      	mov	lr, r3
 801203e:	4770      	bx	lr

08012040 <_fini>:
 8012040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012042:	bf00      	nop
 8012044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012046:	bc08      	pop	{r3}
 8012048:	469e      	mov	lr, r3
 801204a:	4770      	bx	lr
